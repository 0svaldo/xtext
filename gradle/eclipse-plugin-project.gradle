import org.apache.ivy.osgi.core.ManifestParser

buildscript {
	repositories.jcenter()
	dependencies {
		classpath (group: 'org.apache.ivy', name: 'ivy', version: '2.4.0')
	}
}

apply plugin: 'java'

dependencies {
	def manifestFile = new File(projectDir, 'META-INF/MANIFEST.MF')
	def manifest = ManifestParser.parseManifest(manifestFile)
	manifest.requires
		.collect{toDependency(it)}
		.findAll {it != null}
		.each {
			add('compile', it)
		}
}

def toDependency(requirement) {
	if (requirement.resolution == 'optional') {
		return null
	}
	if (requirement.name.contains('.ui')) {
		return null
	}
	def projectDependency = rootProject.project(':plugins').findProject(requirement.name) 
		?: rootProject.project(':tests').findProject(requirement.name)
		?: rootProject.project(':intellij').findProject(requirement.name)
	if (projectDependency && requirement.version == null) {
		return projectDependency
	}
	/*
	* TODO these belong into the dependency resolution rules of the downstream projects
	*/
	if (requirement.name == 'com.google.inject') {
		return [group:'com.google.inject', name:'guice', version:'3.0']
	}
	if (requirement.name == 'org.antlr.runtime') {
		return [group:'org.antlr', name:'antlr-runtime', version:'3.2']
	}
	if (requirement.name == 'org.eclipse.equinox.common') {
		return [group:'org.eclipse.equinox', name:'org.eclipse.equinox.common', version:'3.6.0']
	}
	if (requirement.name.startsWith('org.eclipse.emf.mwe2')) {
		return [group:'org.eclipse.emf', name: requirement.name, version:'(2.7,3.0)']
	}
	if (requirement.name.startsWith('org.eclipse.emf.mwe')) {
		return [group:'org.eclipse.emf', name: requirement.name, version:'(1.2,2.0]']
	}
	if (requirement.name.startsWith('org.eclipse.emf')) {
		return [group:'org.eclipse.emf', name: requirement.name, version:'(2.8,3.0)']
	}
	if (requirement.name == 'org.eclipse.jdt.core') {
		return [group:'org.eclipse.tycho', name: 'org.eclipse.jdt.core', version:'3.10.0+']
	}
	if (requirement.name == 'org.apache.log4j') {
		return [group:'log4j', name: 'log4j', version:'1.2.16']
	}
	if (requirement.name == 'com.google.guava') {
		return [group:'com.google.guava', name: 'guava', version:'[10.0.1,19.0.0)']
	}
	if (requirement.name == 'org.objectweb.asm') {
		return [group:'org.ow2.asm', name: 'asm', version:'[5.0.1,6.0.0)']
	}
	if (requirement.name.startsWith('org.eclipse.xtend') || requirement.name == 'org.eclipse.xpand') {
		return [group:'org.eclipse.xpand', name: requirement.name, version:'[1.1, 3.0]']
	}
	logger.debug("Requirement '${requirement}' of ${project} is not mapped to a Maven dependency")
}

jar {
	from('bin')
	manifest {
		from('META-INF/MANIFEST.MF')
	}
	Properties buildProperties = new Properties()
	File propertiesFile = new File(projectDir, 'build.properties')
	propertiesFile.withInputStream {
			buildProperties.load(it)
	}
	def binIncludes = buildProperties.get("bin.includes").split(',').findAll{it != "."}
	binIncludes.each{ include ->
		if (project.file(include).isDirectory()) {
			from(include) {
				into(include)
			}
		} else {
			from(include)
		}
	}
}

//skip compilation, done by Eclipse/Buckminster
sourceSets*.java*.srcDirs = []
sourceSets*.resources*.srcDirs = []