/*
Generated with Xtext
*/

import xtext;

import org::eclipse::emf::ecore;
import org::eclipse::jface::text::contentassist;
import org::eclipse::xtext::crossref;
import org::eclipse::xtext::ui::common::editor::contentassist;
import org::eclipse::xtext::ui::common::xtend::contentassist;

import ReferenceGrammar;
import ReferenceModel;

extension org::eclipse::xtext::ui::common::xtend::contentassist::ContentAssist reexport;

/**
 * Represents a generated, default implementation of interface {@link IProposalProvider}.
 * 
 * @see org.eclipse.xtext.ui.common.editor.contentassist.IProposalProvider
 */

	 
List[ICompletionProposal] completeSpielplatzGroesse(Assignment assignment, IContentAssistContext contentAssistContext) :
	{ newProposal(assignment, "1", contentAssistContext) };
	 
List[ICompletionProposal] completeSpielplatzBeschreibung(Assignment assignment, IContentAssistContext contentAssistContext) :
	{ newProposal(assignment, "\"SpielplatzBeschreibung\"", contentAssistContext) };
	 
List[ICompletionProposal] completeSpielplatzKinder(Assignment assignment, IContentAssistContext contentAssistContext) :
	{};
	 
List[ICompletionProposal] completeSpielplatzErzieher(Assignment assignment, IContentAssistContext contentAssistContext) :
	{};
	 
List[ICompletionProposal] completeSpielplatzSpielzeuge(Assignment assignment, IContentAssistContext contentAssistContext) :
	{};
	 
List[ICompletionProposal] completeSpielplatzFamilie(Assignment assignment, IContentAssistContext contentAssistContext) :
	{};
	 
List[ICompletionProposal] completeSpielplatzTypes(Assignment assignment, IContentAssistContext contentAssistContext) :
	{};
	 
List[ICompletionProposal] completeKindName(Assignment assignment, IContentAssistContext contentAssistContext) :
    { newProposal(assignment, "KindName", contentAssistContext) };
	 
List[ICompletionProposal] completeKindAge(Assignment assignment, IContentAssistContext contentAssistContext) :
	{ newProposal(assignment, "1", contentAssistContext) };
	 
List[ICompletionProposal] completeErwachsenerName(Assignment assignment, IContentAssistContext contentAssistContext) :
    { newProposal(assignment, "ErwachsenerName", contentAssistContext) };
	 
List[ICompletionProposal] completeErwachsenerAge(Assignment assignment, IContentAssistContext contentAssistContext) :
	{ newProposal(assignment, "1", contentAssistContext) };
	 
List[ICompletionProposal] completeSpielzeugName(Assignment assignment, IContentAssistContext contentAssistContext) :
    { newProposal(assignment, "SpielzeugName", contentAssistContext) };
	 
List[ICompletionProposal] completeSpielzeugFarbe(Assignment assignment, IContentAssistContext contentAssistContext) :
	{};
	 
List[ICompletionProposal] completeFamilieName(Assignment assignment, IContentAssistContext contentAssistContext) :
	{};
	 
List[ICompletionProposal] completeFamilieMutter(Assignment assignment, IContentAssistContext contentAssistContext) :
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);
	 
List[ICompletionProposal] completeFamilieVater(Assignment assignment, IContentAssistContext contentAssistContext) :
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);
	 
List[ICompletionProposal] completeFamilieKinder(Assignment assignment, IContentAssistContext contentAssistContext) :
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);

	 
List[ICompletionProposal] completeFarbeWert(Assignment assignment, IContentAssistContext contentAssistContext) :
	{};
	 
List[ICompletionProposal] completeCustomTypeParserRuleName(Assignment assignment, IContentAssistContext contentAssistContext) :
    { newProposal(assignment, "CustomTypeParserRuleName", contentAssistContext) };
	 	  
List[ICompletionProposal] complete(RuleCall ruleCall, IContentAssistContext contentAssistContext) :
	{};
	 	  
List[ICompletionProposal] completeReferenceModelCustomType(RuleCall ruleCall, IContentAssistContext contentAssistContext) :
	{};

/*
	// TODO 
    @Override
	protected String getDefaultImageFilePath() {
		return "icons/editor.gif";
	}

	@Override
	protected String getPluginId() {
		return UI_PLUGIN_ID;
	}
*/
