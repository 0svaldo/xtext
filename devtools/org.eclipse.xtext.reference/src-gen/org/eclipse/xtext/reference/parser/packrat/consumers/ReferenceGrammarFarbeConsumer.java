/*
* generated by Xtext
*/
package org.eclipse.xtext.reference.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Keyword;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;

import org.eclipse.xtext.reference.services.ReferenceGrammarGrammarAccess.FarbeElements;

public final class ReferenceGrammarFarbeConsumer extends NonTerminalConsumer {

	private FarbeElements rule;	

	private IElementConsumer assignment$1$Consumer;

	private IElementConsumer alternatives$2$Consumer;

	private IElementConsumer keyword$5$Consumer;

	private IElementConsumer keyword$6$Consumer;

	private IElementConsumer keyword$7$Consumer;

	private IElementConsumer keyword$8$Consumer;

	private ICharacterClass keyword$5$Delimiter;

	private ICharacterClass keyword$6$Delimiter;

	private ICharacterClass keyword$7$Delimiter;

	private ICharacterClass keyword$8$Delimiter;

	protected class Assignment$1$Consumer extends AssignmentConsumer {
		
		protected Assignment$1$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return alternatives$2$Consumer;
		}
	}

	protected class Alternatives$2$Consumer extends AlternativesConsumer {
		
		protected Alternatives$2$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$5$Consumer);
			acceptor.accept(keyword$6$Consumer);
			acceptor.accept(keyword$7$Consumer);
			acceptor.accept(keyword$8$Consumer);
		}
	}

	protected class Keyword$5$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$5$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "wert", false, false, getKeyword$5$Delimiter(), optional);
		}
	}

	protected class Keyword$6$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$6$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "wert", false, false, getKeyword$6$Delimiter(), optional);
		}
	}

	protected class Keyword$7$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$7$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "wert", false, false, getKeyword$7$Delimiter(), optional);
		}
	}

	protected class Keyword$8$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$8$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "wert", false, false, getKeyword$8$Delimiter(), optional);
		}
	}

	public ReferenceGrammarFarbeConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$5$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$6$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$7$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$8$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return assignment$1$Consumer.consume();
	}

	public FarbeElements getRule() {
		return rule;
	}
	
	public void setRule(FarbeElements rule) {
		this.rule = rule;
		
		assignment$1$Consumer = new Assignment$1$Consumer(rule.eleAssignmentWert());
		alternatives$2$Consumer = new Alternatives$2$Consumer(rule.ele0Alternatives());
		keyword$5$Consumer = new Keyword$5$Consumer(rule.ele0000KeywordROT());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.ele0001KeywordBLAU());
		keyword$7$Consumer = new Keyword$7$Consumer(rule.ele001KeywordGELB());
		keyword$8$Consumer = new Keyword$8$Consumer(rule.ele01KeywordGRÜN());
		keyword$5$Consumer = new Keyword$5$Consumer(rule.ele0000KeywordROT());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.ele0001KeywordBLAU());
		keyword$7$Consumer = new Keyword$7$Consumer(rule.ele001KeywordGELB());
		keyword$8$Consumer = new Keyword$8$Consumer(rule.ele01KeywordGRÜN());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public ICharacterClass getKeyword$5$Delimiter() {
		return keyword$5$Delimiter;
	}
	
	public void setKeyword$5$Delimiter(ICharacterClass characterClass) {
		keyword$5$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$6$Delimiter() {
		return keyword$6$Delimiter;
	}
	
	public void setKeyword$6$Delimiter(ICharacterClass characterClass) {
		keyword$6$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$7$Delimiter() {
		return keyword$7$Delimiter;
	}
	
	public void setKeyword$7$Delimiter(ICharacterClass characterClass) {
		keyword$7$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$8$Delimiter() {
		return keyword$8$Delimiter;
	}
	
	public void setKeyword$8$Delimiter(ICharacterClass characterClass) {
		keyword$8$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
