/*
* generated by Xtext
*/
package org.eclipse.xtext.reference.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.reference.services.ReferenceGrammarGrammarAccess.SpielplatzElements;

public final class ReferenceGrammarSpielplatzConsumer extends NonTerminalConsumer {

	private SpielplatzElements rule;	

	private INonTerminalConsumer customTypeParserRuleConsumer;

	private INonTerminalConsumer erwachsenerConsumer;

	private INonTerminalConsumer familieConsumer;

	private ITerminalConsumer intConsumer;

	private INonTerminalConsumer kindConsumer;

	private INonTerminalConsumer spielzeugConsumer;

	private ITerminalConsumer stringConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer keyword$2$Consumer;

	private IElementConsumer assignment$3$Consumer;

	private IElementConsumer ruleCall$4$Consumer;

	private IElementConsumer assignment$5$Consumer;

	private IElementConsumer ruleCall$6$Consumer;

	private IElementConsumer keyword$7$Consumer;

	private IElementConsumer alternatives$8$Consumer;

	private IElementConsumer assignment$9$Consumer;

	private IElementConsumer ruleCall$10$Consumer;

	private IElementConsumer assignment$11$Consumer;

	private IElementConsumer ruleCall$12$Consumer;

	private IElementConsumer assignment$13$Consumer;

	private IElementConsumer ruleCall$14$Consumer;

	private IElementConsumer assignment$15$Consumer;

	private IElementConsumer ruleCall$16$Consumer;

	private IElementConsumer assignment$17$Consumer;

	private IElementConsumer ruleCall$18$Consumer;

	private IElementConsumer keyword$19$Consumer;

	private ICharacterClass keyword$7$Delimiter;

	private ICharacterClass keyword$19$Delimiter;

	private ICharacterClass keyword$2$Delimiter;

	private ISequenceMatcher ruleCall$4$Delimiter;

	private ISequenceMatcher ruleCall$6$Delimiter;

	protected class Group$1$Consumer extends OptionalGroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$2$Consumer);
			acceptor.accept(assignment$3$Consumer);
			acceptor.accept(assignment$5$Consumer);
			acceptor.accept(keyword$7$Consumer);
			acceptor.accept(alternatives$8$Consumer);
			acceptor.accept(keyword$19$Consumer);
		}
	}

	protected class Keyword$2$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$2$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$2$Delimiter(), optional);
		}
	}

	protected class Assignment$3$Consumer extends AssignmentConsumer {
		
		protected Assignment$3$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$4$Consumer;
		}
	}

	protected class RuleCall$4$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$4$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(intConsumer, "groesse", false, false, getElement(), getRuleCall$4$Delimiter(), optional);
		}
	}

	protected class Assignment$5$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$5$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$6$Consumer;
		}
	}

	protected class RuleCall$6$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$6$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "beschreibung", false, false, getElement(), getRuleCall$6$Delimiter(), optional);
		}
	}

	protected class Keyword$7$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$7$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$7$Delimiter(), optional);
		}
	}

	protected class Alternatives$8$Consumer extends LoopAlternativesConsumer {
		
		protected Alternatives$8$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$9$Consumer);
			acceptor.accept(assignment$11$Consumer);
			acceptor.accept(assignment$13$Consumer);
			acceptor.accept(assignment$15$Consumer);
			acceptor.accept(assignment$17$Consumer);
		}
	}

	protected class Assignment$9$Consumer extends AssignmentConsumer {
		
		protected Assignment$9$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$10$Consumer;
		}
	}

	protected class RuleCall$10$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$10$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(kindConsumer, "kinder", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$11$Consumer extends AssignmentConsumer {
		
		protected Assignment$11$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$12$Consumer;
		}
	}

	protected class RuleCall$12$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$12$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(erwachsenerConsumer, "erzieher", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$13$Consumer extends AssignmentConsumer {
		
		protected Assignment$13$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$14$Consumer;
		}
	}

	protected class RuleCall$14$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$14$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(spielzeugConsumer, "spielzeuge", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$15$Consumer extends AssignmentConsumer {
		
		protected Assignment$15$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$16$Consumer;
		}
	}

	protected class RuleCall$16$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$16$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(familieConsumer, "familie", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$17$Consumer extends AssignmentConsumer {
		
		protected Assignment$17$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$18$Consumer;
		}
	}

	protected class RuleCall$18$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$18$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(customTypeParserRuleConsumer, "types", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$19$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$19$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$19$Delimiter(), optional);
		}
	}

	public ReferenceGrammarSpielplatzConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$7$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$19$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$2$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$4$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$6$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public SpielplatzElements getRule() {
		return rule;
	}
	
	public void setRule(SpielplatzElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		keyword$2$Consumer = new Keyword$2$Consumer(rule.ele0KeywordSpielplatz());
		assignment$3$Consumer = new Assignment$3$Consumer(rule.ele1AssignmentGroesse());
		ruleCall$4$Consumer = new RuleCall$4$Consumer(rule.ele10TerminalRuleCallINT());
		assignment$5$Consumer = new Assignment$5$Consumer(rule.ele2AssignmentBeschreibung());
		ruleCall$6$Consumer = new RuleCall$6$Consumer(rule.ele20TerminalRuleCallSTRING());
		keyword$7$Consumer = new Keyword$7$Consumer(rule.ele3KeywordLeftCurlyBracket());
		alternatives$8$Consumer = new Alternatives$8$Consumer(rule.ele4Alternatives());
		assignment$9$Consumer = new Assignment$9$Consumer(rule.ele40AssignmentKinder());
		ruleCall$10$Consumer = new RuleCall$10$Consumer(rule.ele400ParserRuleCallKind());
		assignment$11$Consumer = new Assignment$11$Consumer(rule.ele41AssignmentErzieher());
		ruleCall$12$Consumer = new RuleCall$12$Consumer(rule.ele410ParserRuleCallErwachsener());
		assignment$13$Consumer = new Assignment$13$Consumer(rule.ele42AssignmentSpielzeuge());
		ruleCall$14$Consumer = new RuleCall$14$Consumer(rule.ele420ParserRuleCallSpielzeug());
		assignment$15$Consumer = new Assignment$15$Consumer(rule.ele43AssignmentFamilie());
		ruleCall$16$Consumer = new RuleCall$16$Consumer(rule.ele430ParserRuleCallFamilie());
		assignment$17$Consumer = new Assignment$17$Consumer(rule.ele44AssignmentTypes());
		ruleCall$18$Consumer = new RuleCall$18$Consumer(rule.ele440ParserRuleCallCustomTypeParserRule());
		keyword$19$Consumer = new Keyword$19$Consumer(rule.ele5KeywordRightCurlyBracket());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setCustomTypeParserRuleConsumer(INonTerminalConsumer customTypeParserRuleConsumer) {
		this.customTypeParserRuleConsumer = customTypeParserRuleConsumer;
	}
	
	public void setErwachsenerConsumer(INonTerminalConsumer erwachsenerConsumer) {
		this.erwachsenerConsumer = erwachsenerConsumer;
	}
	
	public void setFamilieConsumer(INonTerminalConsumer familieConsumer) {
		this.familieConsumer = familieConsumer;
	}
	
	public void setIntConsumer(ITerminalConsumer intConsumer) {
		this.intConsumer = intConsumer;
	}
	
	public void setKindConsumer(INonTerminalConsumer kindConsumer) {
		this.kindConsumer = kindConsumer;
	}
	
	public void setSpielzeugConsumer(INonTerminalConsumer spielzeugConsumer) {
		this.spielzeugConsumer = spielzeugConsumer;
	}
	
	public void setStringConsumer(ITerminalConsumer stringConsumer) {
		this.stringConsumer = stringConsumer;
	}
	
	public ICharacterClass getKeyword$7$Delimiter() {
		return keyword$7$Delimiter;
	}
	
	public void setKeyword$7$Delimiter(ICharacterClass characterClass) {
		keyword$7$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$19$Delimiter() {
		return keyword$19$Delimiter;
	}
	
	public void setKeyword$19$Delimiter(ICharacterClass characterClass) {
		keyword$19$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$2$Delimiter() {
		return keyword$2$Delimiter;
	}
	
	public void setKeyword$2$Delimiter(ICharacterClass characterClass) {
		keyword$2$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$4$Delimiter() {
		return ruleCall$4$Delimiter;
	}
	
	public void setRuleCall$4$Delimiter(ISequenceMatcher matcher) {
		ruleCall$4$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$6$Delimiter() {
		return ruleCall$6$Delimiter;
	}
	
	public void setRuleCall$6$Delimiter(ISequenceMatcher matcher) {
		ruleCall$6$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
