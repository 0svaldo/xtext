/*
* generated by Xtext
*/
package org.eclipse.xtext.example.parseTreeConstruction;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;
import org.eclipse.xtext.example.services.FowlerDslGrammarAccess;

import com.google.inject.Inject;

public class FowlerDslParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private FowlerDslGrammarAccess grammarAccess;
	
	@Override
	protected Solution internalSerialize(EObject obj) {
		IInstanceDescription inst = getDescr(obj);
		Solution s;
		if(inst.isInstanceOf(grammarAccess.getStatemachineRule().getType().getClassifier()) && (s = new Statemachine_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getEventRule().getType().getClassifier()) && (s = new Event_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getCommandRule().getType().getClassifier()) && (s = new Command_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getStateRule().getType().getClassifier()) && (s = new State_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getTransitionRule().getType().getClassifier()) && (s = new Transition_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		return null;
	}
	

/************ begin Rule Statemachine ****************
 *
 * Statemachine:
 *   "events" (events+=Event)* "end" "commands" (commands+=Command)* "end" (states+=State)*;
 *
 **/

// "events" (events+=Event)* "end" "commands" (commands+=Command)* "end" (states+=State)*
protected class Statemachine_Group extends GroupToken {
	
	public Statemachine_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStatemachineAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Statemachine_6_Assignment_states(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Statemachine_5_Keyword_end(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new Statemachine_4_Assignment_commands(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				while(s3 != null) {
					Solution s4 = new Statemachine_3_Keyword_commands(s3.getCurrent(), s3.getPredecessor()).firstSolution();
					while(s4 != null) {
						Solution s5 = new Statemachine_2_Keyword_end(s4.getCurrent(), s4.getPredecessor()).firstSolution();
						while(s5 != null) {
							Solution s6 = new Statemachine_1_Assignment_events(s5.getCurrent(), s5.getPredecessor()).firstSolution();
							while(s6 != null) {
								Solution s7 = new Statemachine_0_Keyword_events(s6.getCurrent(), s6.getPredecessor()).firstSolution();
								if(s7 != null) {
									last = s7.getPredecessor();
									return s7;
								} else {
									s6 = s6.getPredecessor().nextSolution(this,s6);
								}
							}
							s5 = s5.getPredecessor().nextSolution(this,s5);
						}
						s4 = s4.getPredecessor().nextSolution(this,s4);
					}
					s3 = s3.getPredecessor().nextSolution(this,s3);
				}
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "events"
protected class Statemachine_0_Keyword_events extends KeywordToken  {
	
	public Statemachine_0_Keyword_events(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStatemachineAccess().getEventsKeyword_0();
	}	
}

// (events+=Event)*
protected class Statemachine_1_Assignment_events extends AssignmentToken  {
	
	public Statemachine_1_Assignment_events(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatemachineAccess().getEventsAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("events",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("events");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEventRule().getType().getClassifier())) {
				Solution s = new Event_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// "end"
protected class Statemachine_2_Keyword_end extends KeywordToken  {
	
	public Statemachine_2_Keyword_end(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStatemachineAccess().getEndKeyword_2();
	}	
}

// "commands"
protected class Statemachine_3_Keyword_commands extends KeywordToken  {
	
	public Statemachine_3_Keyword_commands(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStatemachineAccess().getCommandsKeyword_3();
	}	
}

// (commands+=Command)*
protected class Statemachine_4_Assignment_commands extends AssignmentToken  {
	
	public Statemachine_4_Assignment_commands(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatemachineAccess().getCommandsAssignment_4();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("commands",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("commands");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCommandRule().getType().getClassifier())) {
				Solution s = new Command_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// "end"
protected class Statemachine_5_Keyword_end extends KeywordToken  {
	
	public Statemachine_5_Keyword_end(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStatemachineAccess().getEndKeyword_5();
	}	
}

// (states+=State)*
protected class Statemachine_6_Assignment_states extends AssignmentToken  {
	
	public Statemachine_6_Assignment_states(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatemachineAccess().getStatesAssignment_6();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("states",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("states");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStateRule().getType().getClassifier())) {
				Solution s = new State_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}


/************ end Rule Statemachine ****************/


/************ begin Rule Event ****************
 *
 * Event:
 *   (resetting?="resetting")? name=ID code=ID;
 *
 **/

// (resetting?="resetting")? name=ID code=ID
protected class Event_Group extends GroupToken {
	
	public Event_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEventAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Event_2_Assignment_code(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Event_1_Assignment_name(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new Event_0_Assignment_resetting(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				if(s3 != null) {
					last = s3.getPredecessor();
					return s3;
				} else {
					s2 = s2.getPredecessor().nextSolution(this,s2);
				}
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// (resetting?="resetting")?
protected class Event_0_Assignment_resetting extends AssignmentToken  {
	
	public Event_0_Assignment_resetting(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventAccess().getResettingAssignment_0();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("resetting",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("resetting");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.getEventAccess().getResettingResettingKeyword_0_0();
			return new Solution(obj);
		}

		return null;
	}
}

// name=ID
protected class Event_1_Assignment_name extends AssignmentToken  {
	
	public Event_1_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventAccess().getNameAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0();
			return new Solution(obj);
		}
		return null;
	}
}

// code=ID
protected class Event_2_Assignment_code extends AssignmentToken  {
	
	public Event_2_Assignment_code(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventAccess().getCodeAssignment_2();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("code",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("code");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getEventAccess().getCodeIDTerminalRuleCall_2_0();
			return new Solution(obj);
		}
		return null;
	}
}


/************ end Rule Event ****************/


/************ begin Rule Command ****************
 *
 * Command:
 *   name=ID code=ID;
 *
 **/

// name=ID code=ID
protected class Command_Group extends GroupToken {
	
	public Command_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCommandAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Command_1_Assignment_code(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Command_0_Assignment_name(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// name=ID
protected class Command_0_Assignment_name extends AssignmentToken  {
	
	public Command_0_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCommandAccess().getNameAssignment_0();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCommandAccess().getNameIDTerminalRuleCall_0_0();
			return new Solution(obj);
		}
		return null;
	}
}

// code=ID
protected class Command_1_Assignment_code extends AssignmentToken  {
	
	public Command_1_Assignment_code(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCommandAccess().getCodeAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("code",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("code");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCommandAccess().getCodeIDTerminalRuleCall_1_0();
			return new Solution(obj);
		}
		return null;
	}
}


/************ end Rule Command ****************/


/************ begin Rule State ****************
 *
 * State:
 *   "state" name=ID ("actions" "{" (actions+=[Command])+ "}")? (transitions+=Transition)* "end";
 *
 **/

// "state" name=ID ("actions" "{" (actions+=[Command])+ "}")? (transitions+=Transition)* "end"
protected class State_Group extends GroupToken {
	
	public State_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new State_4_Keyword_end(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new State_3_Assignment_transitions(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new State_2_Group(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				while(s3 != null) {
					Solution s4 = new State_1_Assignment_name(s3.getCurrent(), s3.getPredecessor()).firstSolution();
					while(s4 != null) {
						Solution s5 = new State_0_Keyword_state(s4.getCurrent(), s4.getPredecessor()).firstSolution();
						if(s5 != null) {
							last = s5.getPredecessor();
							return s5;
						} else {
							s4 = s4.getPredecessor().nextSolution(this,s4);
						}
					}
					s3 = s3.getPredecessor().nextSolution(this,s3);
				}
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "state"
protected class State_0_Keyword_state extends KeywordToken  {
	
	public State_0_Keyword_state(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_0();
	}	
}

// name=ID
protected class State_1_Assignment_name extends AssignmentToken  {
	
	public State_1_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getNameAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0();
			return new Solution(obj);
		}
		return null;
	}
}

// ("actions" "{" (actions+=[Command])+ "}")?
protected class State_2_Group extends GroupToken {
	
	public State_2_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup_2();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new State_2_3_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new State_2_2_Assignment_actions(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new State_2_1_Keyword(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				while(s3 != null) {
					Solution s4 = new State_2_0_Keyword_actions(s3.getCurrent(), s3.getPredecessor()).firstSolution();
					if(s4 != null) {
						last = s4.getPredecessor();
						return s4;
					} else {
						s3 = s3.getPredecessor().nextSolution(this,s3);
					}
				}
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "actions"
protected class State_2_0_Keyword_actions extends KeywordToken  {
	
	public State_2_0_Keyword_actions(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getActionsKeyword_2_0();
	}	
}

// "{"
protected class State_2_1_Keyword extends KeywordToken  {
	
	public State_2_1_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_2_1();
	}	
}

// (actions+=[Command])+
protected class State_2_2_Assignment_actions extends AssignmentToken  {
	
	public State_2_2_Assignment_actions(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getActionsAssignment_2_2();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("actions",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("actions");
		if(value instanceof EObject) { // xtext::CrossReference
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStateAccess().getActionsCommandCrossReference_2_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getStateAccess().getActionsCommandCrossReference_2_2_0(); 
				return new Solution(obj);
			}
		}
		return null;
	}
}

// "}"
protected class State_2_3_Keyword extends KeywordToken  {
	
	public State_2_3_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getRightCurlyBracketKeyword_2_3();
	}	
}


// (transitions+=Transition)*
protected class State_3_Assignment_transitions extends AssignmentToken  {
	
	public State_3_Assignment_transitions(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTransitionsAssignment_3();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("transitions",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("transitions");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTransitionRule().getType().getClassifier())) {
				Solution s = new Transition_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// "end"
protected class State_4_Keyword_end extends KeywordToken  {
	
	public State_4_Keyword_end(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getEndKeyword_4();
	}	
}


/************ end Rule State ****************/


/************ begin Rule Transition ****************
 *
 * Transition:
 *   event=[Event] "=>" state=[State];
 *
 **/

// event=[Event] "=>" state=[State]
protected class Transition_Group extends GroupToken {
	
	public Transition_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTransitionAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Transition_2_Assignment_state(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Transition_1_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new Transition_0_Assignment_event(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				if(s3 != null) {
					last = s3.getPredecessor();
					return s3;
				} else {
					s2 = s2.getPredecessor().nextSolution(this,s2);
				}
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// event=[Event]
protected class Transition_0_Assignment_event extends AssignmentToken  {
	
	public Transition_0_Assignment_event(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransitionAccess().getEventAssignment_0();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("event",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("event");
		if(value instanceof EObject) { // xtext::CrossReference
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTransitionAccess().getEventEventCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getTransitionAccess().getEventEventCrossReference_0_0(); 
				return new Solution(obj);
			}
		}
		return null;
	}
}

// "=>"
protected class Transition_1_Keyword extends KeywordToken  {
	
	public Transition_1_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTransitionAccess().getEqualsSignGreaterThanSignKeyword_1();
	}	
}

// state=[State]
protected class Transition_2_Assignment_state extends AssignmentToken  {
	
	public Transition_2_Assignment_state(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransitionAccess().getStateAssignment_2();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("state",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("state");
		if(value instanceof EObject) { // xtext::CrossReference
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTransitionAccess().getStateStateCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getTransitionAccess().getStateStateCrossReference_2_0(); 
				return new Solution(obj);
			}
		}
		return null;
	}
}


/************ end Rule Transition ****************/

}
