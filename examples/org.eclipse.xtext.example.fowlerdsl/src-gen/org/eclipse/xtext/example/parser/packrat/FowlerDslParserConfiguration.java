/*
* generated by Xtext
*/
package org.eclipse.xtext.example.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.example.services.FowlerDslGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 

import org.eclipse.xtext.example.parser.packrat.consumers.FowlerDslStatemachineConsumer;
import org.eclipse.xtext.example.parser.packrat.consumers.FowlerDslEventConsumer;
import org.eclipse.xtext.example.parser.packrat.consumers.FowlerDslCommandConsumer;
import org.eclipse.xtext.example.parser.packrat.consumers.FowlerDslStateConsumer;
import org.eclipse.xtext.example.parser.packrat.consumers.FowlerDslTransitionConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class FowlerDslParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 

    private FowlerDslStatemachineConsumer statemachineConsumer;
    private FowlerDslEventConsumer eventConsumer;
    private FowlerDslCommandConsumer commandConsumer;
    private FowlerDslStateConsumer stateConsumer;
    private FowlerDslTransitionConsumer transitionConsumer;

	private FowlerDslGrammarAccess grammarAccess;

	public FowlerDslParserConfiguration(IInternalParserConfiguration configuration, FowlerDslGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public FowlerDslStatemachineConsumer getRootConsumer() {
		return statemachineConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		statemachineConsumer = new FowlerDslStatemachineConsumer(
    		this, null
    	);
		eventConsumer = new FowlerDslEventConsumer(
    		this, null
    	);
		commandConsumer = new FowlerDslCommandConsumer(
    		this, null
    	);
		stateConsumer = new FowlerDslStateConsumer(
    		this, null
    	);
		transitionConsumer = new FowlerDslTransitionConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getStatemachineConsumer().setRule(grammarAccess.prStatemachine());
		getEventConsumer().setRule(grammarAccess.prEvent());
		getCommandConsumer().setRule(grammarAccess.prCommand());
		getStateConsumer().setRule(grammarAccess.prState());
		getTransitionConsumer().setRule(grammarAccess.prTransition());
		getIdConsumer().setRule(grammarAccess.trID());
		getIntConsumer().setRule(grammarAccess.trINT());
		getStringConsumer().setRule(grammarAccess.trSTRING());
		getMlCommentConsumer().setRule(grammarAccess.trML_COMMENT());
		getSlCommentConsumer().setRule(grammarAccess.trSL_COMMENT());
		getWsConsumer().setRule(grammarAccess.trWS());
		getAnyOtherConsumer().setRule(grammarAccess.trANY_OTHER());


		getStatemachineConsumer().setCommandConsumer(getCommandConsumer());
		getStatemachineConsumer().setEventConsumer(getEventConsumer());
		getStatemachineConsumer().setStateConsumer(getStateConsumer());

		getEventConsumer().setIdConsumer(getIdConsumer());

		getCommandConsumer().setIdConsumer(getIdConsumer());

		getStateConsumer().setIdConsumer(getIdConsumer());
		getStateConsumer().setTransitionConsumer(getTransitionConsumer());

		getTransitionConsumer().setIdConsumer(getIdConsumer());

		getStatemachineConsumer().setKeyword$10$Delimiter(org.eclipse.xtext.example.parser.packrat.FowlerDslDelimiters.keyword$9$Delimiter);
		getStatemachineConsumer().setKeyword$11$Delimiter(org.eclipse.xtext.example.parser.packrat.FowlerDslDelimiters.keyword$9$Delimiter);
		getStatemachineConsumer().setKeyword$14$Delimiter(org.eclipse.xtext.example.parser.packrat.FowlerDslDelimiters.keyword$9$Delimiter);
		getStatemachineConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.example.parser.packrat.FowlerDslDelimiters.keyword$9$Delimiter);
		getEventConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.example.parser.packrat.FowlerDslDelimiters.keyword$9$Delimiter);
		getEventConsumer().setRuleCall$6$Delimiter(org.eclipse.xtext.example.parser.packrat.FowlerDslDelimiters.ruleCall$26$Delimiter);
		getEventConsumer().setRuleCall$8$Delimiter(org.eclipse.xtext.example.parser.packrat.FowlerDslDelimiters.ruleCall$26$Delimiter);
		getCommandConsumer().setRuleCall$3$Delimiter(org.eclipse.xtext.example.parser.packrat.FowlerDslDelimiters.ruleCall$26$Delimiter);
		getCommandConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.example.parser.packrat.FowlerDslDelimiters.ruleCall$26$Delimiter);
		getStateConsumer().setCrossReference$14$Delimiter(org.eclipse.xtext.example.parser.packrat.FowlerDslDelimiters.ruleCall$26$Delimiter);
		getStateConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.example.parser.packrat.FowlerDslDelimiters.keyword$9$Delimiter);
		getStateConsumer().setKeyword$11$Delimiter(org.eclipse.xtext.example.parser.packrat.FowlerDslDelimiters.keyword$9$Delimiter);
		getStateConsumer().setKeyword$12$Delimiter(org.eclipse.xtext.example.parser.packrat.FowlerDslDelimiters.keyword$49$Delimiter);
		getStateConsumer().setKeyword$16$Delimiter(org.eclipse.xtext.example.parser.packrat.FowlerDslDelimiters.keyword$49$Delimiter);
		getStateConsumer().setKeyword$19$Delimiter(org.eclipse.xtext.example.parser.packrat.FowlerDslDelimiters.keyword$9$Delimiter);
		getStateConsumer().setRuleCall$7$Delimiter(org.eclipse.xtext.example.parser.packrat.FowlerDslDelimiters.ruleCall$26$Delimiter);
		getTransitionConsumer().setCrossReference$4$Delimiter(org.eclipse.xtext.example.parser.packrat.FowlerDslDelimiters.ruleCall$26$Delimiter);
		getTransitionConsumer().setCrossReference$8$Delimiter(org.eclipse.xtext.example.parser.packrat.FowlerDslDelimiters.ruleCall$26$Delimiter);
		getTransitionConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.example.parser.packrat.FowlerDslDelimiters.keyword$49$Delimiter);
	}
	
	// TODO collect superGrammars transitive
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public FowlerDslStatemachineConsumer getStatemachineConsumer() {
    	return statemachineConsumer;
    }

    public FowlerDslEventConsumer getEventConsumer() {
    	return eventConsumer;
    }

    public FowlerDslCommandConsumer getCommandConsumer() {
    	return commandConsumer;
    }

    public FowlerDslStateConsumer getStateConsumer() {
    	return stateConsumer;
    }

    public FowlerDslTransitionConsumer getTransitionConsumer() {
    	return transitionConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
