/*
* generated by Xtext
*/
grammar InternalFowlerDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.example.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.example.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.example.services.FowlerDslGrammarAccess;

}

@parser::members {
 
 	private FowlerDslGrammarAccess grammarAccess;
 	
    public InternalFowlerDslParser(TokenStream input, IAstFactory factory, FowlerDslGrammarAccess grammarAccess) {
        super(input, factory, grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/xtext/example/parser/antlr/internal/InternalFowlerDsl.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Statemachine";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}





// Entry rule entryRuleStatemachine
entryRuleStatemachine returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prStatemachine().getRule(), currentNode); }
	 iv_ruleStatemachine=ruleStatemachine 
	 { $current=$iv_ruleStatemachine.current; } 
	 EOF 
;

// Rule Statemachine
ruleStatemachine returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((((('events' 
    {
        createLeafNode(grammarAccess.prStatemachine().ele000000KeywordEvents(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prStatemachine().ele0000010ParserRuleCallEvent(), currentNode); 
	    }
	    lv_events_1=ruleEvent 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prStatemachine().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "events", lv_events_1, "Event", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*)'end' 
    {
        createLeafNode(grammarAccess.prStatemachine().ele00001KeywordEnd(), null); 
    }
)'commands' 
    {
        createLeafNode(grammarAccess.prStatemachine().ele0001KeywordCommands(), null); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prStatemachine().ele0010ParserRuleCallCommand(), currentNode); 
	    }
	    lv_commands_4=ruleCommand 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prStatemachine().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "commands", lv_commands_4, "Command", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*)'end' 
    {
        createLeafNode(grammarAccess.prStatemachine().ele01KeywordEnd(), null); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prStatemachine().ele10ParserRuleCallState(), currentNode); 
	    }
	    lv_states_6=ruleState 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prStatemachine().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "states", lv_states_6, "State", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*);







// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prEvent().getRule(), currentNode); }
	 iv_ruleEvent=ruleEvent 
	 { $current=$iv_ruleEvent.current; } 
	 EOF 
;

// Rule Event
ruleEvent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	
	
	    lv_resetting_0='resetting' 
    {
        createLeafNode(grammarAccess.prEvent().ele000KeywordResetting(), "resetting"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prEvent().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "resetting", true, "resetting", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    lv_name_1=RULE_ID	{
		createLeafNode(grammarAccess.prEvent().ele010ParserRuleCallID(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prEvent().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))(	
	
	    lv_code_2=RULE_ID	{
		createLeafNode(grammarAccess.prEvent().ele10ParserRuleCallID(), "code"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prEvent().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "code", lv_code_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));







// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prCommand().getRule(), currentNode); }
	 iv_ruleCommand=ruleCommand 
	 { $current=$iv_ruleCommand.current; } 
	 EOF 
;

// Rule Command
ruleCommand returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_name_0=RULE_ID	{
		createLeafNode(grammarAccess.prCommand().ele00ParserRuleCallID(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prCommand().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_code_1=RULE_ID	{
		createLeafNode(grammarAccess.prCommand().ele10ParserRuleCallID(), "code"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prCommand().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "code", lv_code_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));







// Entry rule entryRuleState
entryRuleState returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prState().getRule(), currentNode); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((('state' 
    {
        createLeafNode(grammarAccess.prState().ele0000KeywordState(), null); 
    }
(	
	
	    lv_name_1=RULE_ID	{
		createLeafNode(grammarAccess.prState().ele00010ParserRuleCallID(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prState().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))((('actions' 
    {
        createLeafNode(grammarAccess.prState().ele001000KeywordActions(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.prState().ele001001KeywordLeftCurlyBracket(), null); 
    }
)(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.prState().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.prState().ele001010CrossReferenceEStringCommand(), "actions"); 
	}

		// TODO assign feature to currentNode
	
)+)'}' 
    {
        createLeafNode(grammarAccess.prState().ele0011KeywordRightCurlyBracket(), null); 
    }
)?)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prState().ele010ParserRuleCallTransition(), currentNode); 
	    }
	    lv_transitions_6=ruleTransition 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prState().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "transitions", lv_transitions_6, "Transition", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*)'end' 
    {
        createLeafNode(grammarAccess.prState().ele1KeywordEnd(), null); 
    }
);







// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prTransition().getRule(), currentNode); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.prTransition().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.prTransition().ele000CrossReferenceEStringEvent(), "event"); 
	}

		// TODO assign feature to currentNode
	
)'=>' 
    {
        createLeafNode(grammarAccess.prTransition().ele01KeywordEqualsSignGreaterThanSign(), null); 
    }
)(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.prTransition().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.prTransition().ele10CrossReferenceEStringState(), "state"); 
	}

		// TODO assign feature to currentNode
	
));

































RULE_ID : '^'? (('a'..'z'|'A'..'Z')|'_') ((('a'..'z'|'A'..'Z')|'_')|'0'..'9')*;



RULE_INT : ('0'..'9')+;



RULE_STRING : ('\"' ('\\' ((((((('b'|'t')|'n')|'f')|'r')|'\"')|'\'')|'\\')|~(('\\'|'\"')))* '\"'|'\'' ('\\' ((((((('b'|'t')|'n')|'f')|'r')|'\"')|'\'')|'\\')|~(('\\'|'\'')))* '\'');



RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';



RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;



RULE_WS : (((' '|'\t')|'\r')|'\n')+;



RULE_ANY_OTHER : .;




