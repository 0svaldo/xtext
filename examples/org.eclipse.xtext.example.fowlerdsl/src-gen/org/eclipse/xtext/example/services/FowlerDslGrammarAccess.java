/*
* generated by Xtext
*/

package org.eclipse.xtext.example.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FowlerDslGrammarAccess implements IGrammarAccess {
	
	
	public class StatemachineElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statemachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordEvents = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentEvents = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallEvent = (RuleCall)c1AssignmentEvents.eContents().get(0);
		private final Keyword c2KeywordEnd = (Keyword)cGroup.eContents().get(2);
		private final Keyword c3KeywordCommands = (Keyword)cGroup.eContents().get(3);
		private final Assignment c4AssignmentCommands = (Assignment)cGroup.eContents().get(4);
		private final RuleCall c40ParserRuleCallCommand = (RuleCall)c4AssignmentCommands.eContents().get(0);
		private final Keyword c5KeywordEnd = (Keyword)cGroup.eContents().get(5);
		private final Assignment c6AssignmentStates = (Assignment)cGroup.eContents().get(6);
		private final RuleCall c60ParserRuleCallState = (RuleCall)c6AssignmentStates.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordEvents() { return c0KeywordEvents; }

		// not supported
		public Assignment ele1AssignmentEvents() { return c1AssignmentEvents; }

		// not supported
		public RuleCall ele10ParserRuleCallEvent() { return c10ParserRuleCallEvent; }

		// not supported
		public Keyword ele2KeywordEnd() { return c2KeywordEnd; }

		// not supported
		public Keyword ele3KeywordCommands() { return c3KeywordCommands; }

		// not supported
		public Assignment ele4AssignmentCommands() { return c4AssignmentCommands; }

		// not supported
		public RuleCall ele40ParserRuleCallCommand() { return c40ParserRuleCallCommand; }

		// not supported
		public Keyword ele5KeywordEnd() { return c5KeywordEnd; }

		// not supported
		public Assignment ele6AssignmentStates() { return c6AssignmentStates; }

		// not supported
		public RuleCall ele60ParserRuleCallState() { return c60ParserRuleCallState; }
	}

	public class EventElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment c0AssignmentResetting = (Assignment)cGroup.eContents().get(0);
		private final Keyword c00KeywordResetting = (Keyword)c0AssignmentResetting.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallID = (RuleCall)c1AssignmentName.eContents().get(0);
		private final Assignment c2AssignmentCode = (Assignment)cGroup.eContents().get(2);
		private final RuleCall c20TerminalRuleCallID = (RuleCall)c2AssignmentCode.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Assignment ele0AssignmentResetting() { return c0AssignmentResetting; }

		// not supported
		public Keyword ele00KeywordResetting() { return c00KeywordResetting; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10TerminalRuleCallID() { return c10TerminalRuleCallID; }

		// not supported
		public Assignment ele2AssignmentCode() { return c2AssignmentCode; }

		// not supported
		public RuleCall ele20TerminalRuleCallID() { return c20TerminalRuleCallID; }
	}

	public class CommandElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment c0AssignmentName = (Assignment)cGroup.eContents().get(0);
		private final RuleCall c00TerminalRuleCallID = (RuleCall)c0AssignmentName.eContents().get(0);
		private final Assignment c1AssignmentCode = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallID = (RuleCall)c1AssignmentCode.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Assignment ele0AssignmentName() { return c0AssignmentName; }

		// not supported
		public RuleCall ele00TerminalRuleCallID() { return c00TerminalRuleCallID; }

		// not supported
		public Assignment ele1AssignmentCode() { return c1AssignmentCode; }

		// not supported
		public RuleCall ele10TerminalRuleCallID() { return c10TerminalRuleCallID; }
	}

	public class StateElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordState = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallID = (RuleCall)c1AssignmentName.eContents().get(0);
		private final Group c2Group = (Group)cGroup.eContents().get(2);
		private final Keyword c20KeywordActions = (Keyword)c2Group.eContents().get(0);
		private final Keyword c21KeywordLeftCurlyBracket = (Keyword)c2Group.eContents().get(1);
		private final Assignment c22AssignmentActions = (Assignment)c2Group.eContents().get(2);
		private final CrossReference c220CrossReferenceIDCommand = (CrossReference)c22AssignmentActions.eContents().get(0);
		private final RuleCall c2201TerminalRuleCallID = (RuleCall)c220CrossReferenceIDCommand.eContents().get(1);
		private final Keyword c23KeywordRightCurlyBracket = (Keyword)c2Group.eContents().get(3);
		private final Assignment c3AssignmentTransitions = (Assignment)cGroup.eContents().get(3);
		private final RuleCall c30ParserRuleCallTransition = (RuleCall)c3AssignmentTransitions.eContents().get(0);
		private final Keyword c4KeywordEnd = (Keyword)cGroup.eContents().get(4);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordState() { return c0KeywordState; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10TerminalRuleCallID() { return c10TerminalRuleCallID; }

		// not supported
		public Group ele2Group() { return c2Group; }

		// not supported
		public Keyword ele20KeywordActions() { return c20KeywordActions; }

		// not supported
		public Keyword ele21KeywordLeftCurlyBracket() { return c21KeywordLeftCurlyBracket; }

		// not supported
		public Assignment ele22AssignmentActions() { return c22AssignmentActions; }

		// not supported
		public CrossReference ele220CrossReferenceIDCommand() { return c220CrossReferenceIDCommand; }

		// not supported
		public RuleCall ele2201TerminalRuleCallID() { return c2201TerminalRuleCallID; }

		// not supported
		public Keyword ele23KeywordRightCurlyBracket() { return c23KeywordRightCurlyBracket; }

		// not supported
		public Assignment ele3AssignmentTransitions() { return c3AssignmentTransitions; }

		// not supported
		public RuleCall ele30ParserRuleCallTransition() { return c30ParserRuleCallTransition; }

		// not supported
		public Keyword ele4KeywordEnd() { return c4KeywordEnd; }
	}

	public class TransitionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment c0AssignmentEvent = (Assignment)cGroup.eContents().get(0);
		private final CrossReference c00CrossReferenceIDEvent = (CrossReference)c0AssignmentEvent.eContents().get(0);
		private final RuleCall c001TerminalRuleCallID = (RuleCall)c00CrossReferenceIDEvent.eContents().get(1);
		private final Keyword c1KeywordEqualsSignGreaterThanSign = (Keyword)cGroup.eContents().get(1);
		private final Assignment c2AssignmentState = (Assignment)cGroup.eContents().get(2);
		private final CrossReference c20CrossReferenceIDState = (CrossReference)c2AssignmentState.eContents().get(0);
		private final RuleCall c201TerminalRuleCallID = (RuleCall)c20CrossReferenceIDState.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Assignment ele0AssignmentEvent() { return c0AssignmentEvent; }

		// not supported
		public CrossReference ele00CrossReferenceIDEvent() { return c00CrossReferenceIDEvent; }

		// not supported
		public RuleCall ele001TerminalRuleCallID() { return c001TerminalRuleCallID; }

		// not supported
		public Keyword ele1KeywordEqualsSignGreaterThanSign() { return c1KeywordEqualsSignGreaterThanSign; }

		// not supported
		public Assignment ele2AssignmentState() { return c2AssignmentState; }

		// not supported
		public CrossReference ele20CrossReferenceIDState() { return c20CrossReferenceIDState; }

		// not supported
		public RuleCall ele201TerminalRuleCallID() { return c201TerminalRuleCallID; }
	}
	
	private StatemachineElements pStatemachine;
	private EventElements pEvent;
	private CommandElements pCommand;
	private StateElements pState;
	private TransitionElements pTransition;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess terminalsGrammarAccess;

	@Inject
	public FowlerDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess terminalsGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.terminalsGrammarAccess = terminalsGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return terminalsGrammarAccess;
	}

	
	// not supported
	public StatemachineElements prStatemachine() {
		return (pStatemachine != null) ? pStatemachine : (pStatemachine = new StatemachineElements());
	} 

	// not supported
	public EventElements prEvent() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	} 

	// not supported
	public CommandElements prCommand() {
		return (pCommand != null) ? pCommand : (pCommand = new CommandElements());
	} 

	// not supported
	public StateElements prState() {
		return (pState != null) ? pState : (pState = new StateElements());
	} 

	// not supported
	public TransitionElements prTransition() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	} 

	// not supported
	public TerminalRule trID() {
		return terminalsGrammarAccess.trID();
	} 

	// not supported
	public TerminalRule trINT() {
		return terminalsGrammarAccess.trINT();
	} 

	// not supported
	public TerminalRule trSTRING() {
		return terminalsGrammarAccess.trSTRING();
	} 

	// not supported
	public TerminalRule trML_COMMENT() {
		return terminalsGrammarAccess.trML_COMMENT();
	} 

	// not supported
	public TerminalRule trSL_COMMENT() {
		return terminalsGrammarAccess.trSL_COMMENT();
	} 

	// not supported
	public TerminalRule trWS() {
		return terminalsGrammarAccess.trWS();
	} 

	// not supported
	public TerminalRule trANY_OTHER() {
		return terminalsGrammarAccess.trANY_OTHER();
	} 
}
