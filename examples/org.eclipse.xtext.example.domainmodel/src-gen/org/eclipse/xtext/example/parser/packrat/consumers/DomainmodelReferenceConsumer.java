/*
* generated by Xtext
*/
package org.eclipse.xtext.example.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;

import org.eclipse.xtext.AbstractRule;

import org.eclipse.xtext.parser.packrat.IMarkerFactory.IMarker;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ConsumeResult;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.example.services.DomainmodelGrammarAccess.ReferenceElements;

import org.eclipse.xtext.builtin.parser.packrat.consumers.XtextBuiltinIDConsumer;
import org.eclipse.xtext.example.parser.packrat.consumers.DomainmodelTypeRefConsumer;

@SuppressWarnings("unused")
public final class DomainmodelReferenceConsumer extends NonTerminalConsumer {

	private ReferenceElements rule;
	
	private ITerminalConsumer idConsumer;
	private INonTerminalConsumer typeRefConsumer;

	private ISequenceMatcher crossReference$14$Delimiter;
	
	private ICharacterClass keyword$5$Delimiter;
	
	private ICharacterClass keyword$8$Delimiter;
	
	private ICharacterClass keyword$12$Delimiter;
	
	private ISequenceMatcher ruleCall$7$Delimiter;
	
	public DomainmodelReferenceConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		crossReference$14$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		keyword$5$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$8$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$12$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$7$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume(int entryPoint) throws Exception {
		return consumeGroup$1(entryPoint);
	}

	protected int consumeGroup$1(int entryPoint) throws Exception {
		int result = doConsumeGroup$1(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeGroup$1(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeGroup$1(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().eleGroup());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$5(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0000KeywordRef());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$6(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0001AssignmentName());
					return result.getResult();
				}
			case 2:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$8(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele001KeywordColon());
					return result.getResult();
				}
			case 3:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$9(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele01AssignmentType());
					return result.getResult();
				}
			case 4:
				result.nextStep();
				if (result.didGroupFail(consumeGroup$11(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele1Group());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeKeyword$5(int entryPoint) throws Exception {
		int result = doConsumeKeyword$5(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$5(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$5(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele0000KeywordRef(), null, false, false, getKeyword$5$Delimiter());
	}

	protected int consumeAssignment$6(int entryPoint) throws Exception {
		int result = doConsumeAssignment$6(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$6(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$6(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele0001AssignmentName());
		return result.getResult(consumeRuleCall$7(entryPoint));
	}

	protected int consumeRuleCall$7(int entryPoint) throws Exception {
		return consumeTerminal(idConsumer, "name", false, false, getRule().ele00010LexerRuleCallID(), getRuleCall$7$Delimiter());
	}

	protected int consumeKeyword$8(int entryPoint) throws Exception {
		int result = doConsumeKeyword$8(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$8(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$8(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele001KeywordColon(), null, false, false, getKeyword$8$Delimiter());
	}

	protected int consumeAssignment$9(int entryPoint) throws Exception {
		int result = doConsumeAssignment$9(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$9(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$9(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele01AssignmentType());
		return result.getResult(consumeRuleCall$10(entryPoint));
	}

	protected int consumeRuleCall$10(int entryPoint) throws Exception {
		return consumeNonTerminal(typeRefConsumer, "type", false, false, false, getRule().ele010ParserRuleCallTypeRef());
	}

	protected int consumeGroup$11(int entryPoint) throws Exception {
		IMarker marker = mark();
		int result = doConsumeGroup$11(entryPoint);
		if (result != ConsumeResult.SUCCESS) {
			marker.rollback();
			skipped(getRule().ele1Group());
		} else
			marker.commit();
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeGroup$11(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().ele1Group());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$12(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele10KeywordOpposite());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$13(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele11AssignmentOpposite());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeKeyword$12(int entryPoint) throws Exception {
		int result = doConsumeKeyword$12(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$12(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$12(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele10KeywordOpposite(), null, false, false, getKeyword$12$Delimiter());
	}

	protected int consumeAssignment$13(int entryPoint) throws Exception {
		int result = doConsumeAssignment$13(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$13(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$13(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele11AssignmentOpposite());
		return result.getResult(consumeCrossReference$14(entryPoint));
	}

	protected int consumeCrossReference$14(int entryPoint) throws Exception {
		return consumeTerminal(idConsumer, "opposite", false, false, getRule().ele110CrossReferenceEStringReference(), getCrossReference$14$Delimiter());
	}

	public ReferenceElements getRule() {
		return rule;
	}
	
	public void setRule(ReferenceElements rule) {
		this.rule = rule;
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setTypeRefConsumer(INonTerminalConsumer typeRefConsumer) {
		this.typeRefConsumer = typeRefConsumer;
	}
	
	public ISequenceMatcher getCrossReference$14$Delimiter() {
		return crossReference$14$Delimiter;
	}
	
	public void setCrossReference$14$Delimiter(ISequenceMatcher matcher) {
		crossReference$14$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ICharacterClass getKeyword$5$Delimiter() {
		return keyword$5$Delimiter;
	}
	
	public void setKeyword$5$Delimiter(ICharacterClass characterClass) {
		keyword$5$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$8$Delimiter() {
		return keyword$8$Delimiter;
	}
	
	public void setKeyword$8$Delimiter(ICharacterClass characterClass) {
		keyword$8$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$12$Delimiter() {
		return keyword$12$Delimiter;
	}
	
	public void setKeyword$12$Delimiter(ICharacterClass characterClass) {
		keyword$12$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$7$Delimiter() {
		return ruleCall$7$Delimiter;
	}
	
	public void setRuleCall$7$Delimiter(ISequenceMatcher matcher) {
		ruleCall$7$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
