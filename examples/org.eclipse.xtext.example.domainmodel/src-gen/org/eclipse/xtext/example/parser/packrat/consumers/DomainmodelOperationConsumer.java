/*
* generated by Xtext
*/
package org.eclipse.xtext.example.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;

import org.eclipse.xtext.AbstractRule;

import org.eclipse.xtext.parser.packrat.IMarkerFactory.IMarker;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ConsumeResult;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.example.services.DomainmodelGrammarAccess.OperationElements;

import org.eclipse.xtext.builtin.parser.packrat.consumers.XtextBuiltinIDConsumer;
import org.eclipse.xtext.example.parser.packrat.consumers.DomainmodelParameterConsumer;
import org.eclipse.xtext.example.parser.packrat.consumers.DomainmodelTypeRefConsumer;

@SuppressWarnings("unused")
public final class DomainmodelOperationConsumer extends NonTerminalConsumer {

	private OperationElements rule;
	
	private ITerminalConsumer idConsumer;
	private INonTerminalConsumer parameterConsumer;
	private INonTerminalConsumer typeRefConsumer;

	private ICharacterClass keyword$7$Delimiter;
	
	private ICharacterClass keyword$10$Delimiter;
	
	private ICharacterClass keyword$15$Delimiter;
	
	private ICharacterClass keyword$18$Delimiter;
	
	private ICharacterClass keyword$19$Delimiter;
	
	private ISequenceMatcher ruleCall$9$Delimiter;
	
	public DomainmodelOperationConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$7$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$10$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$15$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$18$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$19$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$9$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume(int entryPoint) throws Exception {
		return consumeGroup$1(entryPoint);
	}

	protected int consumeGroup$1(int entryPoint) throws Exception {
		int result = doConsumeGroup$1(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeGroup$1(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeGroup$1(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().eleGroup());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$7(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele000000KeywordOp());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$8(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele000001AssignmentName());
					return result.getResult();
				}
			case 2:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$10(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00001KeywordLeftParenthesis());
					return result.getResult();
				}
			case 3:
				result.nextStep();
				if (result.didGroupFail(consumeGroup$11(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0001Group());
					return result.getResult();
				}
			case 4:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$18(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele001KeywordRightParenthesis());
					return result.getResult();
				}
			case 5:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$19(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele01KeywordColon());
					return result.getResult();
				}
			case 6:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$20(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele1AssignmentType());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeKeyword$7(int entryPoint) throws Exception {
		int result = doConsumeKeyword$7(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$7(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$7(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele000000KeywordOp(), null, false, false, getKeyword$7$Delimiter());
	}

	protected int consumeAssignment$8(int entryPoint) throws Exception {
		int result = doConsumeAssignment$8(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$8(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$8(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele000001AssignmentName());
		return result.getResult(consumeRuleCall$9(entryPoint));
	}

	protected int consumeRuleCall$9(int entryPoint) throws Exception {
		return consumeTerminal(idConsumer, "name", false, false, getRule().ele0000010LexerRuleCallID(), getRuleCall$9$Delimiter());
	}

	protected int consumeKeyword$10(int entryPoint) throws Exception {
		int result = doConsumeKeyword$10(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$10(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$10(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele00001KeywordLeftParenthesis(), null, false, false, getKeyword$10$Delimiter());
	}

	protected int consumeGroup$11(int entryPoint) throws Exception {
		IMarker marker = mark();
		int result = doConsumeGroup$11(entryPoint);
		if (result != ConsumeResult.SUCCESS) {
			marker.rollback();
			skipped(getRule().ele0001Group());
		} else
			marker.commit();
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeGroup$11(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().ele0001Group());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$12(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00010AssignmentParams());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeGroup$14(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00011Group());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeAssignment$12(int entryPoint) throws Exception {
		int result = doConsumeAssignment$12(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$12(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$12(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele00010AssignmentParams());
		return result.getResult(consumeRuleCall$13(entryPoint));
	}

	protected int consumeRuleCall$13(int entryPoint) throws Exception {
		return consumeNonTerminal(parameterConsumer, "params", true, false, false, getRule().ele000100ParserRuleCallParameter());
	}

	protected int consumeGroup$14(int entryPoint) throws Exception {
		IMarker marker = mark();
		while(doConsumeGroup$14(entryPoint) == ConsumeResult.SUCCESS) {
			marker.flush();
		}
		marker.rollback();
		skipped(getRule().ele00011Group());
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeGroup$14(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().ele00011Group());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$15(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele000110KeywordComma());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$16(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele000111AssignmentParams());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeKeyword$15(int entryPoint) throws Exception {
		int result = doConsumeKeyword$15(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$15(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$15(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele000110KeywordComma(), null, false, false, getKeyword$15$Delimiter());
	}

	protected int consumeAssignment$16(int entryPoint) throws Exception {
		int result = doConsumeAssignment$16(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$16(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$16(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele000111AssignmentParams());
		return result.getResult(consumeRuleCall$17(entryPoint));
	}

	protected int consumeRuleCall$17(int entryPoint) throws Exception {
		return consumeNonTerminal(parameterConsumer, "params", true, false, false, getRule().ele0001110ParserRuleCallParameter());
	}

	protected int consumeKeyword$18(int entryPoint) throws Exception {
		int result = doConsumeKeyword$18(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$18(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$18(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele001KeywordRightParenthesis(), null, false, false, getKeyword$18$Delimiter());
	}

	protected int consumeKeyword$19(int entryPoint) throws Exception {
		int result = doConsumeKeyword$19(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$19(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$19(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele01KeywordColon(), null, false, false, getKeyword$19$Delimiter());
	}

	protected int consumeAssignment$20(int entryPoint) throws Exception {
		int result = doConsumeAssignment$20(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$20(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$20(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele1AssignmentType());
		return result.getResult(consumeRuleCall$21(entryPoint));
	}

	protected int consumeRuleCall$21(int entryPoint) throws Exception {
		return consumeNonTerminal(typeRefConsumer, "type", false, false, false, getRule().ele10ParserRuleCallTypeRef());
	}

	public OperationElements getRule() {
		return rule;
	}
	
	public void setRule(OperationElements rule) {
		this.rule = rule;
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setParameterConsumer(INonTerminalConsumer parameterConsumer) {
		this.parameterConsumer = parameterConsumer;
	}
	
	public void setTypeRefConsumer(INonTerminalConsumer typeRefConsumer) {
		this.typeRefConsumer = typeRefConsumer;
	}
	
	public ICharacterClass getKeyword$7$Delimiter() {
		return keyword$7$Delimiter;
	}
	
	public void setKeyword$7$Delimiter(ICharacterClass characterClass) {
		keyword$7$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$10$Delimiter() {
		return keyword$10$Delimiter;
	}
	
	public void setKeyword$10$Delimiter(ICharacterClass characterClass) {
		keyword$10$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$15$Delimiter() {
		return keyword$15$Delimiter;
	}
	
	public void setKeyword$15$Delimiter(ICharacterClass characterClass) {
		keyword$15$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$18$Delimiter() {
		return keyword$18$Delimiter;
	}
	
	public void setKeyword$18$Delimiter(ICharacterClass characterClass) {
		keyword$18$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$19$Delimiter() {
		return keyword$19$Delimiter;
	}
	
	public void setKeyword$19$Delimiter(ICharacterClass characterClass) {
		keyword$19$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$9$Delimiter() {
		return ruleCall$9$Delimiter;
	}
	
	public void setRuleCall$9$Delimiter(ISequenceMatcher matcher) {
		ruleCall$9$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
