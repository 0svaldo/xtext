/*
* generated by Xtext
*/
package org.eclipse.xtext.example.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;

import org.eclipse.xtext.AbstractRule;

import org.eclipse.xtext.parser.packrat.IMarkerFactory.IMarker;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ConsumeResult;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.example.services.DomainmodelGrammarAccess.EntityElements;

import org.eclipse.xtext.example.parser.packrat.consumers.DomainmodelFeatureConsumer;
import org.eclipse.xtext.builtin.parser.packrat.consumers.XtextBuiltinIDConsumer;

@SuppressWarnings("unused")
public final class DomainmodelEntityConsumer extends NonTerminalConsumer {

	private EntityElements rule;
	
	private INonTerminalConsumer featureConsumer;
	private ITerminalConsumer idConsumer;

	private ISequenceMatcher crossReference$12$Delimiter;
	
	private ICharacterClass keyword$6$Delimiter;
	
	private ICharacterClass keyword$10$Delimiter;
	
	private ICharacterClass keyword$14$Delimiter;
	
	private ICharacterClass keyword$17$Delimiter;
	
	private ISequenceMatcher ruleCall$8$Delimiter;
	
	public DomainmodelEntityConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		crossReference$12$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		keyword$6$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$10$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$14$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$17$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$8$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume(int entryPoint) throws Exception {
		return consumeGroup$1(entryPoint);
	}

	protected int consumeGroup$1(int entryPoint) throws Exception {
		GroupResult result = createGroupResult(getRule().eleGroup());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$6(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00000KeywordEntity());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$7(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00001AssignmentName());
					return result.getResult();
				}
			case 2:
				result.nextStep();
				if (result.didGroupFail(consumeGroup$9(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0001Group());
					return result.getResult();
				}
			case 3:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$14(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele001KeywordLeftCurlyBracket());
					return result.getResult();
				}
			case 4:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$15(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele01AssignmentFeatures());
					return result.getResult();
				}
			case 5:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$17(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele1KeywordRightCurlyBracket());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeKeyword$6(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele00000KeywordEntity(), null, false, false, getKeyword$6$Delimiter());
	}

	protected int consumeAssignment$7(int entryPoint) throws Exception {
		return consumeRuleCall$8(entryPoint);
	}

	protected int consumeRuleCall$8(int entryPoint) throws Exception {
		return consumeTerminal(idConsumer, "name", false, false, getRule().ele000010LexerRuleCallID(), getRuleCall$8$Delimiter());
	}

	protected int consumeGroup$9(int entryPoint) throws Exception {
		IMarker marker = mark();
		int result = doConsumeGroup$9(entryPoint);
		if (result != ConsumeResult.SUCCESS) {
			marker.rollback();
			skipped(getRule().ele0001Group());
		} else
			marker.commit();
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeGroup$9(int entryPoint) throws Exception {
		GroupResult result = createGroupResult(getRule().ele0001Group());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$10(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00010KeywordExtends());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$11(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00011AssignmentSuperType());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeKeyword$10(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele00010KeywordExtends(), null, false, false, getKeyword$10$Delimiter());
	}

	protected int consumeAssignment$11(int entryPoint) throws Exception {
		return consumeCrossReference$12(entryPoint);
	}

	protected int consumeCrossReference$12(int entryPoint) throws Exception {
		return consumeTerminal(idConsumer, "superType", false, false, getRule().ele000110CrossReferenceEStringEntity(), getCrossReference$12$Delimiter());
	}

	protected int consumeKeyword$14(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele001KeywordLeftCurlyBracket(), null, false, false, getKeyword$14$Delimiter());
	}

	protected int consumeAssignment$15(int entryPoint) throws Exception {
		IMarker marker = mark();
		while(doConsumeAssignment$15(entryPoint) == ConsumeResult.SUCCESS) {
			marker.flush();
		}
		marker.rollback();
		skipped(getRule().ele01AssignmentFeatures());
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeAssignment$15(int entryPoint) throws Exception {
		return consumeRuleCall$16(entryPoint);
	}

	protected int consumeRuleCall$16(int entryPoint) throws Exception {
		return consumeNonTerminal(featureConsumer, "features", true, false, false, getRule().ele010ParserRuleCallFeature());
	}

	protected int consumeKeyword$17(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele1KeywordRightCurlyBracket(), null, false, false, getKeyword$17$Delimiter());
	}

	public EntityElements getRule() {
		return rule;
	}
	
	public void setRule(EntityElements rule) {
		this.rule = rule;
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setFeatureConsumer(INonTerminalConsumer featureConsumer) {
		this.featureConsumer = featureConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public ISequenceMatcher getCrossReference$12$Delimiter() {
		return crossReference$12$Delimiter;
	}
	
	public void setCrossReference$12$Delimiter(ISequenceMatcher matcher) {
		crossReference$12$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ICharacterClass getKeyword$6$Delimiter() {
		return keyword$6$Delimiter;
	}
	
	public void setKeyword$6$Delimiter(ICharacterClass characterClass) {
		keyword$6$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$10$Delimiter() {
		return keyword$10$Delimiter;
	}
	
	public void setKeyword$10$Delimiter(ICharacterClass characterClass) {
		keyword$10$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$14$Delimiter() {
		return keyword$14$Delimiter;
	}
	
	public void setKeyword$14$Delimiter(ICharacterClass characterClass) {
		keyword$14$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$17$Delimiter() {
		return keyword$17$Delimiter;
	}
	
	public void setKeyword$17$Delimiter(ICharacterClass characterClass) {
		keyword$17$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$8$Delimiter() {
		return ruleCall$8$Delimiter;
	}
	
	public void setRuleCall$8$Delimiter(ISequenceMatcher matcher) {
		ruleCall$8$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
