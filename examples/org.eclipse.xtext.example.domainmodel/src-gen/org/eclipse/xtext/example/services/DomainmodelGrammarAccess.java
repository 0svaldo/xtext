/*
* generated by Xtext
*/

package org.eclipse.xtext.example.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DomainmodelGrammarAccess implements IGrammarAccess {
	
	
	public class FileElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "File");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment c0AssignmentImports = (Assignment)cGroup.eContents().get(0);
		private final RuleCall c00ParserRuleCallImport = (RuleCall)c0AssignmentImports.eContents().get(0);
		private final Assignment c1AssignmentNamedElements = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallNamedElement = (RuleCall)c1AssignmentNamedElements.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Assignment ele0AssignmentImports() { return c0AssignmentImports; }

		// not supported
		public RuleCall ele00ParserRuleCallImport() { return c00ParserRuleCallImport; }

		// not supported
		public Assignment ele1AssignmentNamedElements() { return c1AssignmentNamedElements; }

		// not supported
		public RuleCall ele10ParserRuleCallNamedElement() { return c10ParserRuleCallNamedElement; }
	}

	public class ImportElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordImport = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentImportURI = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallSTRING = (RuleCall)c1AssignmentImportURI.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordImport() { return c0KeywordImport; }

		// not supported
		public Assignment ele1AssignmentImportURI() { return c1AssignmentImportURI; }

		// not supported
		public RuleCall ele10TerminalRuleCallSTRING() { return c10TerminalRuleCallSTRING; }
	}

	public class NamedElementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallPackage = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallType = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallPackage() { return c0ParserRuleCallPackage; }

		// not supported
		public RuleCall ele1ParserRuleCallType() { return c1ParserRuleCallType; }
	}

	public class PackageElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordPackage = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallQualifiedName = (RuleCall)c1AssignmentName.eContents().get(0);
		private final Keyword c2KeywordLeftCurlyBracket = (Keyword)cGroup.eContents().get(2);
		private final Assignment c3AssignmentNamedElements = (Assignment)cGroup.eContents().get(3);
		private final RuleCall c30ParserRuleCallNamedElement = (RuleCall)c3AssignmentNamedElements.eContents().get(0);
		private final Keyword c4KeywordRightCurlyBracket = (Keyword)cGroup.eContents().get(4);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordPackage() { return c0KeywordPackage; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10ParserRuleCallQualifiedName() { return c10ParserRuleCallQualifiedName; }

		// not supported
		public Keyword ele2KeywordLeftCurlyBracket() { return c2KeywordLeftCurlyBracket; }

		// not supported
		public Assignment ele3AssignmentNamedElements() { return c3AssignmentNamedElements; }

		// not supported
		public RuleCall ele30ParserRuleCallNamedElement() { return c30ParserRuleCallNamedElement; }

		// not supported
		public Keyword ele4KeywordRightCurlyBracket() { return c4KeywordRightCurlyBracket; }
	}

	public class TypeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallEntity = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallDataType = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallEntity() { return c0ParserRuleCallEntity; }

		// not supported
		public RuleCall ele1ParserRuleCallDataType() { return c1ParserRuleCallDataType; }
	}

	public class DataTypeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordDatatype = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallID = (RuleCall)c1AssignmentName.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordDatatype() { return c0KeywordDatatype; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10TerminalRuleCallID() { return c10TerminalRuleCallID; }
	}

	public class EntityElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordEntity = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallID = (RuleCall)c1AssignmentName.eContents().get(0);
		private final Group c2Group = (Group)cGroup.eContents().get(2);
		private final Keyword c20KeywordExtends = (Keyword)c2Group.eContents().get(0);
		private final Assignment c21AssignmentSuperType = (Assignment)c2Group.eContents().get(1);
		private final CrossReference c210CrossReferenceEStringEntity = (CrossReference)c21AssignmentSuperType.eContents().get(0);
		private final Keyword c3KeywordLeftCurlyBracket = (Keyword)cGroup.eContents().get(3);
		private final Assignment c4AssignmentFeatures = (Assignment)cGroup.eContents().get(4);
		private final RuleCall c40ParserRuleCallFeature = (RuleCall)c4AssignmentFeatures.eContents().get(0);
		private final Keyword c5KeywordRightCurlyBracket = (Keyword)cGroup.eContents().get(5);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordEntity() { return c0KeywordEntity; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10TerminalRuleCallID() { return c10TerminalRuleCallID; }

		// not supported
		public Group ele2Group() { return c2Group; }

		// not supported
		public Keyword ele20KeywordExtends() { return c20KeywordExtends; }

		// not supported
		public Assignment ele21AssignmentSuperType() { return c21AssignmentSuperType; }

		// not supported
		public CrossReference ele210CrossReferenceEStringEntity() { return c210CrossReferenceEStringEntity; }

		// not supported
		public Keyword ele3KeywordLeftCurlyBracket() { return c3KeywordLeftCurlyBracket; }

		// not supported
		public Assignment ele4AssignmentFeatures() { return c4AssignmentFeatures; }

		// not supported
		public RuleCall ele40ParserRuleCallFeature() { return c40ParserRuleCallFeature; }

		// not supported
		public Keyword ele5KeywordRightCurlyBracket() { return c5KeywordRightCurlyBracket; }
	}

	public class FeatureElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallStructuralFeature = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallOperation = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallStructuralFeature() { return c0ParserRuleCallStructuralFeature; }

		// not supported
		public RuleCall ele1ParserRuleCallOperation() { return c1ParserRuleCallOperation; }
	}

	public class StructuralFeatureElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructuralFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallAttribute = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallReference = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallAttribute() { return c0ParserRuleCallAttribute; }

		// not supported
		public RuleCall ele1ParserRuleCallReference() { return c1ParserRuleCallReference; }
	}

	public class AttributeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordAttr = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallID = (RuleCall)c1AssignmentName.eContents().get(0);
		private final Keyword c2KeywordColon = (Keyword)cGroup.eContents().get(2);
		private final Assignment c3AssignmentType = (Assignment)cGroup.eContents().get(3);
		private final RuleCall c30ParserRuleCallTypeRef = (RuleCall)c3AssignmentType.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordAttr() { return c0KeywordAttr; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10TerminalRuleCallID() { return c10TerminalRuleCallID; }

		// not supported
		public Keyword ele2KeywordColon() { return c2KeywordColon; }

		// not supported
		public Assignment ele3AssignmentType() { return c3AssignmentType; }

		// not supported
		public RuleCall ele30ParserRuleCallTypeRef() { return c30ParserRuleCallTypeRef; }
	}

	public class ReferenceElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordRef = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallID = (RuleCall)c1AssignmentName.eContents().get(0);
		private final Keyword c2KeywordColon = (Keyword)cGroup.eContents().get(2);
		private final Assignment c3AssignmentType = (Assignment)cGroup.eContents().get(3);
		private final RuleCall c30ParserRuleCallTypeRef = (RuleCall)c3AssignmentType.eContents().get(0);
		private final Group c4Group = (Group)cGroup.eContents().get(4);
		private final Keyword c40KeywordOpposite = (Keyword)c4Group.eContents().get(0);
		private final Assignment c41AssignmentOpposite = (Assignment)c4Group.eContents().get(1);
		private final CrossReference c410CrossReferenceEStringReference = (CrossReference)c41AssignmentOpposite.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordRef() { return c0KeywordRef; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10TerminalRuleCallID() { return c10TerminalRuleCallID; }

		// not supported
		public Keyword ele2KeywordColon() { return c2KeywordColon; }

		// not supported
		public Assignment ele3AssignmentType() { return c3AssignmentType; }

		// not supported
		public RuleCall ele30ParserRuleCallTypeRef() { return c30ParserRuleCallTypeRef; }

		// not supported
		public Group ele4Group() { return c4Group; }

		// not supported
		public Keyword ele40KeywordOpposite() { return c40KeywordOpposite; }

		// not supported
		public Assignment ele41AssignmentOpposite() { return c41AssignmentOpposite; }

		// not supported
		public CrossReference ele410CrossReferenceEStringReference() { return c410CrossReferenceEStringReference; }
	}

	public class OperationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordOp = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallID = (RuleCall)c1AssignmentName.eContents().get(0);
		private final Keyword c2KeywordLeftParenthesis = (Keyword)cGroup.eContents().get(2);
		private final Group c3Group = (Group)cGroup.eContents().get(3);
		private final Assignment c30AssignmentParams = (Assignment)c3Group.eContents().get(0);
		private final RuleCall c300ParserRuleCallParameter = (RuleCall)c30AssignmentParams.eContents().get(0);
		private final Group c31Group = (Group)c3Group.eContents().get(1);
		private final Keyword c310KeywordComma = (Keyword)c31Group.eContents().get(0);
		private final Assignment c311AssignmentParams = (Assignment)c31Group.eContents().get(1);
		private final RuleCall c3110ParserRuleCallParameter = (RuleCall)c311AssignmentParams.eContents().get(0);
		private final Keyword c4KeywordRightParenthesis = (Keyword)cGroup.eContents().get(4);
		private final Keyword c5KeywordColon = (Keyword)cGroup.eContents().get(5);
		private final Assignment c6AssignmentType = (Assignment)cGroup.eContents().get(6);
		private final RuleCall c60ParserRuleCallTypeRef = (RuleCall)c6AssignmentType.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordOp() { return c0KeywordOp; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10TerminalRuleCallID() { return c10TerminalRuleCallID; }

		// not supported
		public Keyword ele2KeywordLeftParenthesis() { return c2KeywordLeftParenthesis; }

		// not supported
		public Group ele3Group() { return c3Group; }

		// not supported
		public Assignment ele30AssignmentParams() { return c30AssignmentParams; }

		// not supported
		public RuleCall ele300ParserRuleCallParameter() { return c300ParserRuleCallParameter; }

		// not supported
		public Group ele31Group() { return c31Group; }

		// not supported
		public Keyword ele310KeywordComma() { return c310KeywordComma; }

		// not supported
		public Assignment ele311AssignmentParams() { return c311AssignmentParams; }

		// not supported
		public RuleCall ele3110ParserRuleCallParameter() { return c3110ParserRuleCallParameter; }

		// not supported
		public Keyword ele4KeywordRightParenthesis() { return c4KeywordRightParenthesis; }

		// not supported
		public Keyword ele5KeywordColon() { return c5KeywordColon; }

		// not supported
		public Assignment ele6AssignmentType() { return c6AssignmentType; }

		// not supported
		public RuleCall ele60ParserRuleCallTypeRef() { return c60ParserRuleCallTypeRef; }
	}

	public class ParameterElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment c0AssignmentName = (Assignment)cGroup.eContents().get(0);
		private final RuleCall c00TerminalRuleCallID = (RuleCall)c0AssignmentName.eContents().get(0);
		private final Assignment c1AssignmentType = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallTypeRef = (RuleCall)c1AssignmentType.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Assignment ele0AssignmentName() { return c0AssignmentName; }

		// not supported
		public RuleCall ele00TerminalRuleCallID() { return c00TerminalRuleCallID; }

		// not supported
		public Assignment ele1AssignmentType() { return c1AssignmentType; }

		// not supported
		public RuleCall ele10ParserRuleCallTypeRef() { return c10ParserRuleCallTypeRef; }
	}

	public class TypedElementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallFeature = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallParameter = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallFeature() { return c0ParserRuleCallFeature; }

		// not supported
		public RuleCall ele1ParserRuleCallParameter() { return c1ParserRuleCallParameter; }
	}

	public class TypeRefElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeRef");
		private final Assignment cAssignmentReferenced = (Assignment)rule.eContents().get(1);
		private final CrossReference c0CrossReferenceEStringType = (CrossReference)cAssignmentReferenced.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Assignment eleAssignmentReferenced() { return cAssignmentReferenced; }

		// not supported
		public CrossReference ele0CrossReferenceEStringType() { return c0CrossReferenceEStringType; }
	}

	public class QualifiedNameElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall c0TerminalRuleCallID = (RuleCall)cGroup.eContents().get(0);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Keyword c10KeywordFullStop = (Keyword)c1Group.eContents().get(0);
		private final RuleCall c11TerminalRuleCallID = (RuleCall)c1Group.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public RuleCall ele0TerminalRuleCallID() { return c0TerminalRuleCallID; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Keyword ele10KeywordFullStop() { return c10KeywordFullStop; }

		// not supported
		public RuleCall ele11TerminalRuleCallID() { return c11TerminalRuleCallID; }
	}
	
	private FileElements pFile;
	private ImportElements pImport;
	private NamedElementElements pNamedElement;
	private PackageElements pPackage;
	private TypeElements pType;
	private DataTypeElements pDataType;
	private EntityElements pEntity;
	private FeatureElements pFeature;
	private StructuralFeatureElements pStructuralFeature;
	private AttributeElements pAttribute;
	private ReferenceElements pReference;
	private OperationElements pOperation;
	private ParameterElements pParameter;
	private TypedElementElements pTypedElement;
	private TypeRefElements pTypeRef;
	private QualifiedNameElements pQualifiedName;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess terminalsGrammarAccess;

	@Inject
	public DomainmodelGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess terminalsGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.terminalsGrammarAccess = terminalsGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return terminalsGrammarAccess;
	}

	
	// not supported
	public FileElements prFile() {
		return (pFile != null) ? pFile : (pFile = new FileElements());
	} 

	// not supported
	public ImportElements prImport() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	} 

	// not supported
	public NamedElementElements prNamedElement() {
		return (pNamedElement != null) ? pNamedElement : (pNamedElement = new NamedElementElements());
	} 

	// not supported
	public PackageElements prPackage() {
		return (pPackage != null) ? pPackage : (pPackage = new PackageElements());
	} 

	// not supported
	public TypeElements prType() {
		return (pType != null) ? pType : (pType = new TypeElements());
	} 

	// not supported
	public DataTypeElements prDataType() {
		return (pDataType != null) ? pDataType : (pDataType = new DataTypeElements());
	} 

	// not supported
	public EntityElements prEntity() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	} 

	// not supported
	public FeatureElements prFeature() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	} 

	// not supported
	public StructuralFeatureElements prStructuralFeature() {
		return (pStructuralFeature != null) ? pStructuralFeature : (pStructuralFeature = new StructuralFeatureElements());
	} 

	// not supported
	public AttributeElements prAttribute() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	} 

	// not supported
	public ReferenceElements prReference() {
		return (pReference != null) ? pReference : (pReference = new ReferenceElements());
	} 

	// not supported
	public OperationElements prOperation() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	} 

	// not supported
	public ParameterElements prParameter() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	} 

	// not supported
	public TypedElementElements prTypedElement() {
		return (pTypedElement != null) ? pTypedElement : (pTypedElement = new TypedElementElements());
	} 

	// not supported
	public TypeRefElements prTypeRef() {
		return (pTypeRef != null) ? pTypeRef : (pTypeRef = new TypeRefElements());
	} 

	// not supported
	public QualifiedNameElements prQualifiedName() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	} 

	// not supported
	public TerminalRule trID() {
		return terminalsGrammarAccess.trID();
	} 

	// not supported
	public TerminalRule trINT() {
		return terminalsGrammarAccess.trINT();
	} 

	// not supported
	public TerminalRule trSTRING() {
		return terminalsGrammarAccess.trSTRING();
	} 

	// not supported
	public TerminalRule trML_COMMENT() {
		return terminalsGrammarAccess.trML_COMMENT();
	} 

	// not supported
	public TerminalRule trSL_COMMENT() {
		return terminalsGrammarAccess.trSL_COMMENT();
	} 

	// not supported
	public TerminalRule trWS() {
		return terminalsGrammarAccess.trWS();
	} 

	// not supported
	public TerminalRule trANY_OTHER() {
		return terminalsGrammarAccess.trANY_OTHER();
	} 
}
