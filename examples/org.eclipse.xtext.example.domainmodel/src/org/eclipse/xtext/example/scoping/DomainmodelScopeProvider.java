/*
 * generated by Xtext
 */
package org.eclipse.xtext.example.scoping;

import static org.eclipse.xtext.EcoreUtil2.*;
import static org.eclipse.xtext.scoping.Scopes.*;

import java.util.List;

import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.example.domainmodel.Entity;
import org.eclipse.xtext.example.domainmodel.Reference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.SimpleScope;

/**
 * This class contains custom scoping description.
 * 
 * see : http://wiki.eclipse.org/Xtext/Documentation#Scoping on how and when to
 * use it
 * 
 */
public class DomainmodelScopeProvider extends AbstractDeclarativeScopeProvider {
	public IScope scope_Reference_opposite(Reference ref, EReference eRef) {
		List<Reference> typeSelect = typeSelect(((Entity) ref.getType().getReferenced()).getFeatures(), Reference.class);
		return new SimpleScope(scopedElementsFor(typeSelect));
	}

}
