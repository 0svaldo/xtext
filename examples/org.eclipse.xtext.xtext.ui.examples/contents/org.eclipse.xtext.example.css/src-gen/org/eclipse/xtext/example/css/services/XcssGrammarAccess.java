/*
* generated by Xtext
*/

package org.eclipse.xtext.example.css.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class XcssGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StyleSheetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StyleSheet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStyleSheetAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRulesStyleRuleParserRuleCall_1_0 = (RuleCall)cRulesAssignment_1.eContents().get(0);
		
		//StyleSheet:
		//	{StyleSheet} rules+=StyleRule*;
		public ParserRule getRule() { return rule; }

		//{StyleSheet} rules+=StyleRule*
		public Group getGroup() { return cGroup; }

		//{StyleSheet}
		public Action getStyleSheetAction_0() { return cStyleSheetAction_0; }

		//rules+=StyleRule*
		public Assignment getRulesAssignment_1() { return cRulesAssignment_1; }

		//StyleRule
		public RuleCall getRulesStyleRuleParserRuleCall_1_0() { return cRulesStyleRuleParserRuleCall_1_0; }
	}

	public class StyleRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StyleRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectorsSelectorParserRuleCall_0_0 = (RuleCall)cSelectorsAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSettingsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSettingsSettingParserRuleCall_2_0 = (RuleCall)cSettingsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StyleRule:
		//	selectors+=Selector+ "{" settings+=Setting* "}";
		public ParserRule getRule() { return rule; }

		//selectors+=Selector+ "{" settings+=Setting* "}"
		public Group getGroup() { return cGroup; }

		//selectors+=Selector+
		public Assignment getSelectorsAssignment_0() { return cSelectorsAssignment_0; }

		//Selector
		public RuleCall getSelectorsSelectorParserRuleCall_0_0() { return cSelectorsSelectorParserRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//settings+=Setting*
		public Assignment getSettingsAssignment_2() { return cSettingsAssignment_2; }

		//Setting
		public RuleCall getSettingsSettingParserRuleCall_2_0() { return cSettingsSettingParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class _JvmTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "_JvmTypeReference");
		private final RuleCall cTypeSelectorParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//_JvmTypeReference returns JvmTypeReference:
		//	TypeSelector;
		public ParserRule getRule() { return rule; }

		//TypeSelector
		public RuleCall getTypeSelectorParserRuleCall() { return cTypeSelectorParserRuleCall; }
	}

	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cTypeSelectorParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cWildcardSelectorParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cIdSelectorParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Assignment cFilterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilterFilterParserRuleCall_1_0 = (RuleCall)cFilterAssignment_1.eContents().get(0);
		
		//Selector:
		//	(TypeSelector | WildcardSelector | IdSelector) filter=Filter?;
		public ParserRule getRule() { return rule; }

		//(TypeSelector | WildcardSelector | IdSelector) filter=Filter?
		public Group getGroup() { return cGroup; }

		//TypeSelector | WildcardSelector | IdSelector
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//TypeSelector
		public RuleCall getTypeSelectorParserRuleCall_0_0() { return cTypeSelectorParserRuleCall_0_0; }

		//WildcardSelector
		public RuleCall getWildcardSelectorParserRuleCall_0_1() { return cWildcardSelectorParserRuleCall_0_1; }

		//IdSelector
		public RuleCall getIdSelectorParserRuleCall_0_2() { return cIdSelectorParserRuleCall_0_2; }

		//filter=Filter?
		public Assignment getFilterAssignment_1() { return cFilterAssignment_1; }

		//Filter
		public RuleCall getFilterFilterParserRuleCall_1_0() { return cFilterFilterParserRuleCall_1_0; }
	}

	public class TypeSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeSelector");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeJvmTypeCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedNameParserRuleCall_0_1 = (RuleCall)cTypeJvmTypeCrossReference_0.eContents().get(1);
		
		//TypeSelector:
		//	type=[JvmType|QualifiedName];
		public ParserRule getRule() { return rule; }

		//type=[JvmType|QualifiedName]
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//[JvmType|QualifiedName]
		public CrossReference getTypeJvmTypeCrossReference_0() { return cTypeJvmTypeCrossReference_0; }

		//QualifiedName
		public RuleCall getTypeJvmTypeQualifiedNameParserRuleCall_0_1() { return cTypeJvmTypeQualifiedNameParserRuleCall_0_1; }
	}

	public class IdSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//IdSelector:
		//	"#" id=ID;
		public ParserRule getRule() { return rule; }

		//"#" id=ID
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
	}

	public class WildcardSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WildcardSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWildcardSelectorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//WildcardSelector:
		//	{WildcardSelector} "*";
		public ParserRule getRule() { return rule; }

		//{WildcardSelector} "*"
		public Group getGroup() { return cGroup; }

		//{WildcardSelector}
		public Action getWildcardSelectorAction_0() { return cWildcardSelectorAction_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class FilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Filter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cXExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Filter returns XExpression:
		//	"[" XExpression "]";
		public ParserRule getRule() { return rule; }

		//"[" XExpression "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//XExpression
		public RuleCall getXExpressionParserRuleCall_1() { return cXExpressionParserRuleCall_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class SettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Setting");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cXExpressionParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cXAssignmentAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cAssignableAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAssignableFeatureReferenceParserRuleCall_1_1_0 = (RuleCall)cAssignableAssignment_1_1.eContents().get(0);
		private final Assignment cFeatureAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cFeatureJvmIdentifyableElementCrossReference_1_2_0 = (CrossReference)cFeatureAssignment_1_2.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifyableElementOpSettingAssignParserRuleCall_1_2_0_1 = (RuleCall)cFeatureJvmIdentifyableElementCrossReference_1_2_0.eContents().get(1);
		private final Assignment cValueAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cValueXExpressionParserRuleCall_1_3_0 = (RuleCall)cValueAssignment_1_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//Setting returns XExpression: //	XOrExpression ({XAssignment.assignable=current} feature=[JvmIdentifyableElement|OpSettingAssign] value=XAssignment)? ';';
		//	XExpression ";" | {XAssignment} assignable=FeatureReference feature=[JvmIdentifyableElement|OpSettingAssign]
		//	value=XExpression ";";
		public ParserRule getRule() { return rule; }

		////	XOrExpression ({XAssignment.assignable=current} feature=[JvmIdentifyableElement|OpSettingAssign] value=XAssignment)? ';';
		//XExpression ";" | {XAssignment} assignable=FeatureReference feature=[JvmIdentifyableElement|OpSettingAssign]
		//value=XExpression ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		////	XOrExpression ({XAssignment.assignable=current} feature=[JvmIdentifyableElement|OpSettingAssign] value=XAssignment)? ';';
		//XExpression ";"
		public Group getGroup_0() { return cGroup_0; }

		////	XOrExpression ({XAssignment.assignable=current} feature=[JvmIdentifyableElement|OpSettingAssign] value=XAssignment)? ';';
		//XExpression
		public RuleCall getXExpressionParserRuleCall_0_0() { return cXExpressionParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//{XAssignment} assignable=FeatureReference feature=[JvmIdentifyableElement|OpSettingAssign] value=XExpression ";"
		public Group getGroup_1() { return cGroup_1; }

		//{XAssignment}
		public Action getXAssignmentAction_1_0() { return cXAssignmentAction_1_0; }

		//assignable=FeatureReference
		public Assignment getAssignableAssignment_1_1() { return cAssignableAssignment_1_1; }

		//FeatureReference
		public RuleCall getAssignableFeatureReferenceParserRuleCall_1_1_0() { return cAssignableFeatureReferenceParserRuleCall_1_1_0; }

		//feature=[JvmIdentifyableElement|OpSettingAssign]
		public Assignment getFeatureAssignment_1_2() { return cFeatureAssignment_1_2; }

		//[JvmIdentifyableElement|OpSettingAssign]
		public CrossReference getFeatureJvmIdentifyableElementCrossReference_1_2_0() { return cFeatureJvmIdentifyableElementCrossReference_1_2_0; }

		//OpSettingAssign
		public RuleCall getFeatureJvmIdentifyableElementOpSettingAssignParserRuleCall_1_2_0_1() { return cFeatureJvmIdentifyableElementOpSettingAssignParserRuleCall_1_2_0_1; }

		//value=XExpression
		public Assignment getValueAssignment_1_3() { return cValueAssignment_1_3; }

		//XExpression
		public RuleCall getValueXExpressionParserRuleCall_1_3_0() { return cValueXExpressionParserRuleCall_1_3_0; }

		//";"
		public Keyword getSemicolonKeyword_1_4() { return cSemicolonKeyword_1_4; }
	}

	public class OpSettingAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpSettingAssign");
		private final Keyword cColonKeyword = (Keyword)rule.eContents().get(1);
		
		//OpSettingAssign:
		//	":";
		public ParserRule getRule() { return rule; }

		//":"
		public Keyword getColonKeyword() { return cColonKeyword; }
	}

	public class FeatureReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureReference");
		private final Assignment cFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifyableElementCrossReference_0 = (CrossReference)cFeatureAssignment.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifyableElementIDTerminalRuleCall_0_1 = (RuleCall)cFeatureJvmIdentifyableElementCrossReference_0.eContents().get(1);
		
		//FeatureReference returns XFeatureCall:
		//	feature=[JvmIdentifyableElement];
		public ParserRule getRule() { return rule; }

		//feature=[JvmIdentifyableElement]
		public Assignment getFeatureAssignment() { return cFeatureAssignment; }

		//[JvmIdentifyableElement]
		public CrossReference getFeatureJvmIdentifyableElementCrossReference_0() { return cFeatureJvmIdentifyableElementCrossReference_0; }

		//ID
		public RuleCall getFeatureJvmIdentifyableElementIDTerminalRuleCall_0_1() { return cFeatureJvmIdentifyableElementIDTerminalRuleCall_0_1; }
	}

	public class CssLiteralsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CssLiterals");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFontLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColorLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSizeLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//CssLiterals returns XExpression:
		//	FontLiteral | ColorLiteral | SizeLiteral;
		public ParserRule getRule() { return rule; }

		//FontLiteral | ColorLiteral | SizeLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//FontLiteral
		public RuleCall getFontLiteralParserRuleCall_0() { return cFontLiteralParserRuleCall_0; }

		//ColorLiteral
		public RuleCall getColorLiteralParserRuleCall_1() { return cColorLiteralParserRuleCall_1; }

		//SizeLiteral
		public RuleCall getSizeLiteralParserRuleCall_2() { return cSizeLiteralParserRuleCall_2; }
	}

	public class FontLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FontLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFontLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFontKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameStringOrIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Assignment cItalicAssignment_3_0 = (Assignment)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cItalicIKeyword_3_0_0 = (Keyword)cItalicAssignment_3_0.eContents().get(0);
		private final Assignment cBoldAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cBoldBKeyword_3_1_0 = (Keyword)cBoldAssignment_3_1.eContents().get(0);
		private final Assignment cSizeAssignment_3_2 = (Assignment)cUnorderedGroup_3.eContents().get(2);
		private final RuleCall cSizeSizeLiteralParserRuleCall_3_2_0 = (RuleCall)cSizeAssignment_3_2.eContents().get(0);
		
		//FontLiteral:
		//	{FontLiteral} "font" name=StringOrID? (italic?="I"? & bold?="B"? & size?=SizeLiteral?);
		public ParserRule getRule() { return rule; }

		//{FontLiteral} "font" name=StringOrID? (italic?="I"? & bold?="B"? & size?=SizeLiteral?)
		public Group getGroup() { return cGroup; }

		//{FontLiteral}
		public Action getFontLiteralAction_0() { return cFontLiteralAction_0; }

		//"font"
		public Keyword getFontKeyword_1() { return cFontKeyword_1; }

		//name=StringOrID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//StringOrID
		public RuleCall getNameStringOrIDParserRuleCall_2_0() { return cNameStringOrIDParserRuleCall_2_0; }

		//italic?="I"? & bold?="B"? & size?=SizeLiteral?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//italic?="I"?
		public Assignment getItalicAssignment_3_0() { return cItalicAssignment_3_0; }

		//"I"
		public Keyword getItalicIKeyword_3_0_0() { return cItalicIKeyword_3_0_0; }

		//bold?="B"?
		public Assignment getBoldAssignment_3_1() { return cBoldAssignment_3_1; }

		//"B"
		public Keyword getBoldBKeyword_3_1_0() { return cBoldBKeyword_3_1_0; }

		//size?=SizeLiteral?
		public Assignment getSizeAssignment_3_2() { return cSizeAssignment_3_2; }

		//SizeLiteral
		public RuleCall getSizeSizeLiteralParserRuleCall_3_2_0() { return cSizeSizeLiteralParserRuleCall_3_2_0; }
	}

	public class StringOrIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringOrID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StringOrID:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class ColorLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColorLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRGBParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColorConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ColorLiteral:
		//	RGB | ColorConstant;
		public ParserRule getRule() { return rule; }

		//RGB | ColorConstant
		public Alternatives getAlternatives() { return cAlternatives; }

		//RGB
		public RuleCall getRGBParserRuleCall_0() { return cRGBParserRuleCall_0; }

		//ColorConstant
		public RuleCall getColorConstantParserRuleCall_1() { return cColorConstantParserRuleCall_1; }
	}

	public class ColorConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColorConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cConstantJvmIdentifyableElementCrossReference_1_0 = (CrossReference)cConstantAssignment_1.eContents().get(0);
		private final RuleCall cConstantJvmIdentifyableElementIDTerminalRuleCall_1_0_1 = (RuleCall)cConstantJvmIdentifyableElementCrossReference_1_0.eContents().get(1);
		
		//ColorConstant:
		//	"$" constant=[JvmIdentifyableElement];
		public ParserRule getRule() { return rule; }

		//"$" constant=[JvmIdentifyableElement]
		public Group getGroup() { return cGroup; }

		//"$"
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }

		//constant=[JvmIdentifyableElement]
		public Assignment getConstantAssignment_1() { return cConstantAssignment_1; }

		//[JvmIdentifyableElement]
		public CrossReference getConstantJvmIdentifyableElementCrossReference_1_0() { return cConstantJvmIdentifyableElementCrossReference_1_0; }

		//ID
		public RuleCall getConstantJvmIdentifyableElementIDTerminalRuleCall_1_0_1() { return cConstantJvmIdentifyableElementIDTerminalRuleCall_1_0_1; }
	}

	public class RGBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RGB");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cHexAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cHexNumberSignKeyword_0_0_0 = (Keyword)cHexAssignment_0_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueHEXINTParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cNumberSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRedAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRedINTTerminalRuleCall_1_2_0 = (RuleCall)cRedAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cGreenAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cGreenINTTerminalRuleCall_1_4_0 = (RuleCall)cGreenAssignment_1_4.eContents().get(0);
		private final Keyword cCommaKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cBlueAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cBlueINTTerminalRuleCall_1_6_0 = (RuleCall)cBlueAssignment_1_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		
		//RGB:
		//	hex?="#" value=HEXINT | "#" "(" red=INT "," green=INT "," blue=INT ")";
		public ParserRule getRule() { return rule; }

		//hex?="#" value=HEXINT | "#" "(" red=INT "," green=INT "," blue=INT ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//hex?="#" value=HEXINT
		public Group getGroup_0() { return cGroup_0; }

		//hex?="#"
		public Assignment getHexAssignment_0_0() { return cHexAssignment_0_0; }

		//"#"
		public Keyword getHexNumberSignKeyword_0_0_0() { return cHexNumberSignKeyword_0_0_0; }

		//value=HEXINT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//HEXINT
		public RuleCall getValueHEXINTParserRuleCall_0_1_0() { return cValueHEXINTParserRuleCall_0_1_0; }

		//"#" "(" red=INT "," green=INT "," blue=INT ")"
		public Group getGroup_1() { return cGroup_1; }

		//"#"
		public Keyword getNumberSignKeyword_1_0() { return cNumberSignKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//red=INT
		public Assignment getRedAssignment_1_2() { return cRedAssignment_1_2; }

		//INT
		public RuleCall getRedINTTerminalRuleCall_1_2_0() { return cRedINTTerminalRuleCall_1_2_0; }

		//","
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }

		//green=INT
		public Assignment getGreenAssignment_1_4() { return cGreenAssignment_1_4; }

		//INT
		public RuleCall getGreenINTTerminalRuleCall_1_4_0() { return cGreenINTTerminalRuleCall_1_4_0; }

		//","
		public Keyword getCommaKeyword_1_5() { return cCommaKeyword_1_5; }

		//blue=INT
		public Assignment getBlueAssignment_1_6() { return cBlueAssignment_1_6; }

		//INT
		public RuleCall getBlueINTTerminalRuleCall_1_6_0() { return cBlueINTTerminalRuleCall_1_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_7() { return cRightParenthesisKeyword_1_7; }
	}

	public class HEXINTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HEXINT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//HEXINT returns EInt:
		//	INT ID? | ID;
		public ParserRule getRule() { return rule; }

		//INT ID? | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT ID?
		public Group getGroup_0() { return cGroup_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_0() { return cINTTerminalRuleCall_0_0; }

		//ID?
		public RuleCall getIDTerminalRuleCall_0_1() { return cIDTerminalRuleCall_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class SizeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SizeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitSizeUnitEnumRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		//SizeLiteral:
		//	value=INT unit=SizeUnit;
		public ParserRule getRule() { return rule; }

		//value=INT unit=SizeUnit
		public Group getGroup() { return cGroup; }

		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }

		//unit=SizeUnit
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//SizeUnit
		public RuleCall getUnitSizeUnitEnumRuleCall_1_0() { return cUnitSizeUnitEnumRuleCall_1_0; }
	}

	public class XLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCssLiteralsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXClosureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXBooleanLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXIntLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXNullLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXStringLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXTypeLiteralParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//XLiteral returns XExpression:
		//	CssLiterals | XClosure | XBooleanLiteral | XIntLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
		public ParserRule getRule() { return rule; }

		//CssLiterals | XClosure | XBooleanLiteral | XIntLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//CssLiterals
		public RuleCall getCssLiteralsParserRuleCall_0() { return cCssLiteralsParserRuleCall_0; }

		//XClosure
		public RuleCall getXClosureParserRuleCall_1() { return cXClosureParserRuleCall_1; }

		//XBooleanLiteral
		public RuleCall getXBooleanLiteralParserRuleCall_2() { return cXBooleanLiteralParserRuleCall_2; }

		//XIntLiteral
		public RuleCall getXIntLiteralParserRuleCall_3() { return cXIntLiteralParserRuleCall_3; }

		//XNullLiteral
		public RuleCall getXNullLiteralParserRuleCall_4() { return cXNullLiteralParserRuleCall_4; }

		//XStringLiteral
		public RuleCall getXStringLiteralParserRuleCall_5() { return cXStringLiteralParserRuleCall_5; }

		//XTypeLiteral
		public RuleCall getXTypeLiteralParserRuleCall_6() { return cXTypeLiteralParserRuleCall_6; }
	}
	
	
	public class SizeUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SizeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEmEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEmEmKeyword_0_0 = (Keyword)cEmEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPtEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPtPtKeyword_1_0 = (Keyword)cPtEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPxEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPxPxKeyword_2_0 = (Keyword)cPxEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPercentEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPercentPercentSignKeyword_3_0 = (Keyword)cPercentEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum SizeUnit:
		//	em | pt | px | percent="%";
		public EnumRule getRule() { return rule; }

		//em | pt | px | percent="%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//em
		public EnumLiteralDeclaration getEmEnumLiteralDeclaration_0() { return cEmEnumLiteralDeclaration_0; }

		//"em"
		public Keyword getEmEmKeyword_0_0() { return cEmEmKeyword_0_0; }

		//pt
		public EnumLiteralDeclaration getPtEnumLiteralDeclaration_1() { return cPtEnumLiteralDeclaration_1; }

		//"pt"
		public Keyword getPtPtKeyword_1_0() { return cPtPtKeyword_1_0; }

		//px
		public EnumLiteralDeclaration getPxEnumLiteralDeclaration_2() { return cPxEnumLiteralDeclaration_2; }

		//"px"
		public Keyword getPxPxKeyword_2_0() { return cPxPxKeyword_2_0; }

		//percent="%"
		public EnumLiteralDeclaration getPercentEnumLiteralDeclaration_3() { return cPercentEnumLiteralDeclaration_3; }

		//"%"
		public Keyword getPercentPercentSignKeyword_3_0() { return cPercentPercentSignKeyword_3_0; }
	}
	
	private StyleSheetElements pStyleSheet;
	private StyleRuleElements pStyleRule;
	private _JvmTypeReferenceElements p_JvmTypeReference;
	private SelectorElements pSelector;
	private TypeSelectorElements pTypeSelector;
	private IdSelectorElements pIdSelector;
	private WildcardSelectorElements pWildcardSelector;
	private FilterElements pFilter;
	private SettingElements pSetting;
	private OpSettingAssignElements pOpSettingAssign;
	private FeatureReferenceElements pFeatureReference;
	private CssLiteralsElements pCssLiterals;
	private FontLiteralElements pFontLiteral;
	private StringOrIDElements pStringOrID;
	private ColorLiteralElements pColorLiteral;
	private ColorConstantElements pColorConstant;
	private RGBElements pRGB;
	private HEXINTElements pHEXINT;
	private SizeLiteralElements pSizeLiteral;
	private SizeUnitElements unknownRuleSizeUnit;
	private XLiteralElements pXLiteral;
	
	private final GrammarProvider grammarProvider;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public XcssGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammarProvider = grammarProvider;
		this.gaXbase = gaXbase;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//StyleSheet:
	//	{StyleSheet} rules+=StyleRule*;
	public StyleSheetElements getStyleSheetAccess() {
		return (pStyleSheet != null) ? pStyleSheet : (pStyleSheet = new StyleSheetElements());
	}
	
	public ParserRule getStyleSheetRule() {
		return getStyleSheetAccess().getRule();
	}

	//StyleRule:
	//	selectors+=Selector+ "{" settings+=Setting* "}";
	public StyleRuleElements getStyleRuleAccess() {
		return (pStyleRule != null) ? pStyleRule : (pStyleRule = new StyleRuleElements());
	}
	
	public ParserRule getStyleRuleRule() {
		return getStyleRuleAccess().getRule();
	}

	//_JvmTypeReference returns JvmTypeReference:
	//	TypeSelector;
	public _JvmTypeReferenceElements get_JvmTypeReferenceAccess() {
		return (p_JvmTypeReference != null) ? p_JvmTypeReference : (p_JvmTypeReference = new _JvmTypeReferenceElements());
	}
	
	public ParserRule get_JvmTypeReferenceRule() {
		return get_JvmTypeReferenceAccess().getRule();
	}

	//Selector:
	//	(TypeSelector | WildcardSelector | IdSelector) filter=Filter?;
	public SelectorElements getSelectorAccess() {
		return (pSelector != null) ? pSelector : (pSelector = new SelectorElements());
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}

	//TypeSelector:
	//	type=[JvmType|QualifiedName];
	public TypeSelectorElements getTypeSelectorAccess() {
		return (pTypeSelector != null) ? pTypeSelector : (pTypeSelector = new TypeSelectorElements());
	}
	
	public ParserRule getTypeSelectorRule() {
		return getTypeSelectorAccess().getRule();
	}

	//IdSelector:
	//	"#" id=ID;
	public IdSelectorElements getIdSelectorAccess() {
		return (pIdSelector != null) ? pIdSelector : (pIdSelector = new IdSelectorElements());
	}
	
	public ParserRule getIdSelectorRule() {
		return getIdSelectorAccess().getRule();
	}

	//WildcardSelector:
	//	{WildcardSelector} "*";
	public WildcardSelectorElements getWildcardSelectorAccess() {
		return (pWildcardSelector != null) ? pWildcardSelector : (pWildcardSelector = new WildcardSelectorElements());
	}
	
	public ParserRule getWildcardSelectorRule() {
		return getWildcardSelectorAccess().getRule();
	}

	//Filter returns XExpression:
	//	"[" XExpression "]";
	public FilterElements getFilterAccess() {
		return (pFilter != null) ? pFilter : (pFilter = new FilterElements());
	}
	
	public ParserRule getFilterRule() {
		return getFilterAccess().getRule();
	}

	//Setting returns XExpression: //	XOrExpression ({XAssignment.assignable=current} feature=[JvmIdentifyableElement|OpSettingAssign] value=XAssignment)? ';';
	//	XExpression ";" | {XAssignment} assignable=FeatureReference feature=[JvmIdentifyableElement|OpSettingAssign]
	//	value=XExpression ";";
	public SettingElements getSettingAccess() {
		return (pSetting != null) ? pSetting : (pSetting = new SettingElements());
	}
	
	public ParserRule getSettingRule() {
		return getSettingAccess().getRule();
	}

	//OpSettingAssign:
	//	":";
	public OpSettingAssignElements getOpSettingAssignAccess() {
		return (pOpSettingAssign != null) ? pOpSettingAssign : (pOpSettingAssign = new OpSettingAssignElements());
	}
	
	public ParserRule getOpSettingAssignRule() {
		return getOpSettingAssignAccess().getRule();
	}

	//FeatureReference returns XFeatureCall:
	//	feature=[JvmIdentifyableElement];
	public FeatureReferenceElements getFeatureReferenceAccess() {
		return (pFeatureReference != null) ? pFeatureReference : (pFeatureReference = new FeatureReferenceElements());
	}
	
	public ParserRule getFeatureReferenceRule() {
		return getFeatureReferenceAccess().getRule();
	}

	//CssLiterals returns XExpression:
	//	FontLiteral | ColorLiteral | SizeLiteral;
	public CssLiteralsElements getCssLiteralsAccess() {
		return (pCssLiterals != null) ? pCssLiterals : (pCssLiterals = new CssLiteralsElements());
	}
	
	public ParserRule getCssLiteralsRule() {
		return getCssLiteralsAccess().getRule();
	}

	//FontLiteral:
	//	{FontLiteral} "font" name=StringOrID? (italic?="I"? & bold?="B"? & size?=SizeLiteral?);
	public FontLiteralElements getFontLiteralAccess() {
		return (pFontLiteral != null) ? pFontLiteral : (pFontLiteral = new FontLiteralElements());
	}
	
	public ParserRule getFontLiteralRule() {
		return getFontLiteralAccess().getRule();
	}

	//StringOrID:
	//	STRING | ID;
	public StringOrIDElements getStringOrIDAccess() {
		return (pStringOrID != null) ? pStringOrID : (pStringOrID = new StringOrIDElements());
	}
	
	public ParserRule getStringOrIDRule() {
		return getStringOrIDAccess().getRule();
	}

	//ColorLiteral:
	//	RGB | ColorConstant;
	public ColorLiteralElements getColorLiteralAccess() {
		return (pColorLiteral != null) ? pColorLiteral : (pColorLiteral = new ColorLiteralElements());
	}
	
	public ParserRule getColorLiteralRule() {
		return getColorLiteralAccess().getRule();
	}

	//ColorConstant:
	//	"$" constant=[JvmIdentifyableElement];
	public ColorConstantElements getColorConstantAccess() {
		return (pColorConstant != null) ? pColorConstant : (pColorConstant = new ColorConstantElements());
	}
	
	public ParserRule getColorConstantRule() {
		return getColorConstantAccess().getRule();
	}

	//RGB:
	//	hex?="#" value=HEXINT | "#" "(" red=INT "," green=INT "," blue=INT ")";
	public RGBElements getRGBAccess() {
		return (pRGB != null) ? pRGB : (pRGB = new RGBElements());
	}
	
	public ParserRule getRGBRule() {
		return getRGBAccess().getRule();
	}

	//HEXINT returns EInt:
	//	INT ID? | ID;
	public HEXINTElements getHEXINTAccess() {
		return (pHEXINT != null) ? pHEXINT : (pHEXINT = new HEXINTElements());
	}
	
	public ParserRule getHEXINTRule() {
		return getHEXINTAccess().getRule();
	}

	//SizeLiteral:
	//	value=INT unit=SizeUnit;
	public SizeLiteralElements getSizeLiteralAccess() {
		return (pSizeLiteral != null) ? pSizeLiteral : (pSizeLiteral = new SizeLiteralElements());
	}
	
	public ParserRule getSizeLiteralRule() {
		return getSizeLiteralAccess().getRule();
	}

	//enum SizeUnit:
	//	em | pt | px | percent="%";
	public SizeUnitElements getSizeUnitAccess() {
		return (unknownRuleSizeUnit != null) ? unknownRuleSizeUnit : (unknownRuleSizeUnit = new SizeUnitElements());
	}
	
	public EnumRule getSizeUnitRule() {
		return getSizeUnitAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	CssLiterals | XClosure | XBooleanLiteral | XIntLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XLiteralElements getXLiteralAccess() {
		return (pXLiteral != null) ? pXLiteral : (pXLiteral = new XLiteralElements());
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	XOrExpression ({XAssignment.assignable=current} feature=[types::JvmIdentifyableElement|OpAssign] value=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpAssign:
	//	"=" | "+=";
	public XbaseGrammarAccess.OpAssignElements getOpAssignAccess() {
		return gaXbase.getOpAssignAccess();
	}
	
	public ParserRule getOpAssignRule() {
		return getOpAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpOr]
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpAnd]
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpEquality]
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression ({XInstanceOfExpression.expression=current} "instanceof" type=[types::JvmType|QualifiedName]
	//	| {XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpCompare]
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpOther]
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpAdd]
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpMulti]
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifyableElement|OpUnary] operand=XMemberFeatureCall | XMemberFeatureCall;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression ({XMemberFeatureCall.memberCallTarget=current} "." ("<" typeArguments+=JvmArgumentTypeReference
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifyableElement]
	//	(explicitOperationCall?="(" (memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XLiteral | XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XCastedExpression | XThrowExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XClosure returns XExpression:
	//	{XClosure} (formalParameters+=JvmFormalParameter ("," formalParameters+=JvmFormalParameter)*)? "|"
	//	expression=XExpression;
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XCastedExpression:
	//	"(" type=JvmTypeReference ")" target=XMemberFeatureCall;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression:
	//	"if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression:
	//	"switch" switch=XExpressionInsideBlock? "{" cases+=XCasePart+ ("default" ":" (default=XExpression ";" |
	//	default=XBlockExpression))? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" (then=XExpression ";" | then=XBlockExpression);
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression:
	//	"for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression:
	//	"while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression:
	//	"do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration:
	//	(writeable?="var" | "val") type=JvmTypeReference? name=ID "=" right=XExpression;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall:
	//	("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifyableElement] (explicitOperationCall?="(" (featureCallArguments+=XExpression (","
	//	featureCallArguments+=XExpression)*)? ")")?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//XConstructorCall:
	//	"new" constructor=[types::JvmConstructor|QualifiedName] ("<" typeArguments+=JvmArgumentTypeReference (","
	//	typeArguments+=JvmArgumentTypeReference)* ">")? "(" (arguments+=XExpression ("," arguments+=XExpression)*)? ")";
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral:
	//	{XBooleanLiteral} "false" | isTrue?="true";
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XIntLiteral:
	//	value=INT;
	public XbaseGrammarAccess.XIntLiteralElements getXIntLiteralAccess() {
		return gaXbase.getXIntLiteralAccess();
	}
	
	public ParserRule getXIntLiteralRule() {
		return getXIntLiteralAccess().getRule();
	}

	//XStringLiteral:
	//	value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral:
	//	type=[types::JvmType|QualifiedName] "." "class";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression:
	//	"throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression:
	//	"try" expression=XExpression (catchClauses+=XCatchClause+ ("finally" finallyExpression=XExpression)? | "finally"
	//	finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=JvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//JvmTypeReference returns JvmParameterizedTypeReference:
	//	JvmParameterizedTypeReference | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)* ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public XtypeGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
