/*
* generated by Xtext
*/
package org.eclipse.xtext.example.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.example.services.EcoreDslGrammarAccess;

import com.google.inject.Inject;

public class EcoreDslParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private EcoreDslGrammarAccess grammarAccess;
	
	@Override	
	public EcoreDslGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EcoreDsl_Group(this, this, 0, inst);
			case 1: return new ReferencedMetamodel_Group(this, this, 1, inst);
			case 2: return new EPackageDecl_Group(this, this, 2, inst);
			case 3: return new SubEPackageDecl_Group(this, this, 3, inst);
			case 4: return new EClassifierDecl_Alternatives(this, this, 4, inst);
			case 5: return new EDataTypeDecl_Alternatives(this, this, 5, inst);
			case 6: return new EAnnotationDecl_Group(this, this, 6, inst);
			case 7: return new EClassDecl_Group(this, this, 7, inst);
			case 8: return new EStructuralFeatureDecl_Alternatives(this, this, 8, inst);
			case 9: return new EAttributeDecl_Group(this, this, 9, inst);
			case 10: return new EReferenceDecl_Group(this, this, 10, inst);
			case 11: return new EEnumDecl_Group(this, this, 11, inst);
			case 12: return new EEnumLiteralDecl_Group(this, this, 12, inst);
			case 13: return new ETypeParameterDecl_Group(this, this, 13, inst);
			case 14: return new EGenericTypeReferenceDecl_Alternatives(this, this, 14, inst);
			case 15: return new EGenericTypeDecl_Alternatives(this, this, 15, inst);
			case 16: return new EOperationDecl_Group(this, this, 16, inst);
			case 17: return new EParameterDecl_Group(this, this, 17, inst);
			case 18: return new MapEntry_Group(this, this, 18, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule EcoreDsl ****************
 *
 * EcoreDsl:
 *   metamodelDeclarations+=ReferencedMetamodel* package=EPackageDecl;
 *
 **/

// metamodelDeclarations+=ReferencedMetamodel* package=EPackageDecl
protected class EcoreDsl_Group extends GroupToken {
	
	public EcoreDsl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEcoreDslAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EcoreDsl_PackageAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getEcoreDslRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// metamodelDeclarations+=ReferencedMetamodel*
protected class EcoreDsl_MetamodelDeclarationsAssignment_0 extends AssignmentToken  {
	
	public EcoreDsl_MetamodelDeclarationsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEcoreDslAccess().getMetamodelDeclarationsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReferencedMetamodel_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("metamodelDeclarations",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("metamodelDeclarations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getReferencedMetamodelRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEcoreDslAccess().getMetamodelDeclarationsReferencedMetamodelParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EcoreDsl_MetamodelDeclarationsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// package=EPackageDecl
protected class EcoreDsl_PackageAssignment_1 extends AssignmentToken  {
	
	public EcoreDsl_PackageAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEcoreDslAccess().getPackageAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EPackageDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("package",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("package");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEPackageDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEcoreDslAccess().getPackageEPackageDeclParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EcoreDsl_MetamodelDeclarationsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule EcoreDsl ****************/


/************ begin Rule ReferencedMetamodel ****************
 *
 * ReferencedMetamodel:
 *   "import" (alias=ID "=")? ePackage=[ecore::EPackage|STRING] ";";
 *
 **/

// "import" (alias=ID "=")? ePackage=[ecore::EPackage|STRING] ";"
protected class ReferencedMetamodel_Group extends GroupToken {
	
	public ReferencedMetamodel_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReferencedMetamodelAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReferencedMetamodel_SemicolonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getReferencedMetamodelRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// "import"
protected class ReferencedMetamodel_ImportKeyword_0 extends KeywordToken  {
	
	public ReferencedMetamodel_ImportKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReferencedMetamodelAccess().getImportKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

}

// (alias=ID "=")?
protected class ReferencedMetamodel_Group_1 extends GroupToken {
	
	public ReferencedMetamodel_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReferencedMetamodelAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReferencedMetamodel_EqualsSignKeyword_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// alias=ID
protected class ReferencedMetamodel_AliasAssignment_1_0 extends AssignmentToken  {
	
	public ReferencedMetamodel_AliasAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReferencedMetamodelAccess().getAliasAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReferencedMetamodel_ImportKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("alias",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("alias");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getReferencedMetamodelAccess().getAliasIDTerminalRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getReferencedMetamodelAccess().getAliasIDTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class ReferencedMetamodel_EqualsSignKeyword_1_1 extends KeywordToken  {
	
	public ReferencedMetamodel_EqualsSignKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReferencedMetamodelAccess().getEqualsSignKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReferencedMetamodel_AliasAssignment_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}

}


// ePackage=[ecore::EPackage|STRING]
protected class ReferencedMetamodel_EPackageAssignment_2 extends AssignmentToken  {
	
	public ReferencedMetamodel_EPackageAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReferencedMetamodelAccess().getEPackageAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReferencedMetamodel_Group_1(parent, this, 0, inst);
			case 1: return new ReferencedMetamodel_ImportKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("ePackage",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ePackage");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getReferencedMetamodelAccess().getEPackageEPackageCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getReferencedMetamodelAccess().getEPackageEPackageCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ";"
protected class ReferencedMetamodel_SemicolonKeyword_3 extends KeywordToken  {
	
	public ReferencedMetamodel_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReferencedMetamodelAccess().getSemicolonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReferencedMetamodel_EPackageAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ReferencedMetamodel ****************/


/************ begin Rule EPackageDecl ****************
 *
 * EPackageDecl returns ecore::EPackage:
 *   eAnnotations+=EAnnotationDecl* "package" name=QID "nsURI" "=" nsURI=STRING
 *   "nsPrefix" "=" nsPrefix=QID "{" (eSubpackages+=SubEPackageDecl|eClassifiers+=
 *   EClassifierDecl)* "}";
 *
 **/

// eAnnotations+=EAnnotationDecl* "package" name=QID "nsURI" "=" nsURI=STRING
// "nsPrefix" "=" nsPrefix=QID "{" (eSubpackages+=SubEPackageDecl|eClassifiers+=
// EClassifierDecl)* "}"
protected class EPackageDecl_Group extends GroupToken {
	
	public EPackageDecl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEPackageDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EPackageDecl_RightCurlyBracketKeyword_11(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getEPackageDeclRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// eAnnotations+=EAnnotationDecl*
protected class EPackageDecl_EAnnotationsAssignment_0 extends AssignmentToken  {
	
	public EPackageDecl_EAnnotationsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEPackageDeclAccess().getEAnnotationsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAnnotationDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eAnnotations",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eAnnotations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEAnnotationDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEPackageDeclAccess().getEAnnotationsEAnnotationDeclParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EPackageDecl_EAnnotationsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// "package"
protected class EPackageDecl_PackageKeyword_1 extends KeywordToken  {
	
	public EPackageDecl_PackageKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEPackageDeclAccess().getPackageKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EPackageDecl_EAnnotationsAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}

}

// name=QID
protected class EPackageDecl_NameAssignment_2 extends AssignmentToken  {
	
	public EPackageDecl_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEPackageDeclAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EPackageDecl_PackageKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEPackageDeclAccess().getNameQIDParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DRC;
			element = grammarAccess.getEPackageDeclAccess().getNameQIDParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "nsURI"
protected class EPackageDecl_NsURIKeyword_3 extends KeywordToken  {
	
	public EPackageDecl_NsURIKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEPackageDeclAccess().getNsURIKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EPackageDecl_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class EPackageDecl_EqualsSignKeyword_4 extends KeywordToken  {
	
	public EPackageDecl_EqualsSignKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEPackageDeclAccess().getEqualsSignKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EPackageDecl_NsURIKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// nsURI=STRING
protected class EPackageDecl_NsURIAssignment_5 extends AssignmentToken  {
	
	public EPackageDecl_NsURIAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEPackageDeclAccess().getNsURIAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EPackageDecl_EqualsSignKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("nsURI",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("nsURI");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEPackageDeclAccess().getNsURISTRINGTerminalRuleCall_5_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEPackageDeclAccess().getNsURISTRINGTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// "nsPrefix"
protected class EPackageDecl_NsPrefixKeyword_6 extends KeywordToken  {
	
	public EPackageDecl_NsPrefixKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEPackageDeclAccess().getNsPrefixKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EPackageDecl_NsURIAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class EPackageDecl_EqualsSignKeyword_7 extends KeywordToken  {
	
	public EPackageDecl_EqualsSignKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEPackageDeclAccess().getEqualsSignKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EPackageDecl_NsPrefixKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// nsPrefix=QID
protected class EPackageDecl_NsPrefixAssignment_8 extends AssignmentToken  {
	
	public EPackageDecl_NsPrefixAssignment_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEPackageDeclAccess().getNsPrefixAssignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EPackageDecl_EqualsSignKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("nsPrefix",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("nsPrefix");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEPackageDeclAccess().getNsPrefixQIDParserRuleCall_8_0(), value, null)) {
			type = AssignmentType.DRC;
			element = grammarAccess.getEPackageDeclAccess().getNsPrefixQIDParserRuleCall_8_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class EPackageDecl_LeftCurlyBracketKeyword_9 extends KeywordToken  {
	
	public EPackageDecl_LeftCurlyBracketKeyword_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEPackageDeclAccess().getLeftCurlyBracketKeyword_9();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EPackageDecl_NsPrefixAssignment_8(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// (eSubpackages+=SubEPackageDecl|eClassifiers+=EClassifierDecl)*
protected class EPackageDecl_Alternatives_10 extends AlternativesToken {

	public EPackageDecl_Alternatives_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEPackageDeclAccess().getAlternatives_10();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EPackageDecl_ESubpackagesAssignment_10_0(parent, this, 0, inst);
			case 1: return new EPackageDecl_EClassifiersAssignment_10_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// eSubpackages+=SubEPackageDecl
protected class EPackageDecl_ESubpackagesAssignment_10_0 extends AssignmentToken  {
	
	public EPackageDecl_ESubpackagesAssignment_10_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEPackageDeclAccess().getESubpackagesAssignment_10_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubEPackageDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eSubpackages",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eSubpackages");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSubEPackageDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEPackageDeclAccess().getESubpackagesSubEPackageDeclParserRuleCall_10_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EPackageDecl_Alternatives_10(parent, next, actIndex, consumed);
			case 1: return new EPackageDecl_LeftCurlyBracketKeyword_9(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// eClassifiers+=EClassifierDecl
protected class EPackageDecl_EClassifiersAssignment_10_1 extends AssignmentToken  {
	
	public EPackageDecl_EClassifiersAssignment_10_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEPackageDeclAccess().getEClassifiersAssignment_10_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassifierDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eClassifiers",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eClassifiers");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEClassifierDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEPackageDeclAccess().getEClassifiersEClassifierDeclParserRuleCall_10_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EPackageDecl_Alternatives_10(parent, next, actIndex, consumed);
			case 1: return new EPackageDecl_LeftCurlyBracketKeyword_9(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class EPackageDecl_RightCurlyBracketKeyword_11 extends KeywordToken  {
	
	public EPackageDecl_RightCurlyBracketKeyword_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEPackageDeclAccess().getRightCurlyBracketKeyword_11();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EPackageDecl_Alternatives_10(parent, this, 0, inst);
			case 1: return new EPackageDecl_LeftCurlyBracketKeyword_9(parent, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule EPackageDecl ****************/


/************ begin Rule SubEPackageDecl ****************
 *
 * SubEPackageDecl returns ecore::EPackage:
 *   eAnnotations+=EAnnotationDecl* "package" name=ID "{" (eSubpackages+=
 *   SubEPackageDecl|eClassifiers+=EClassifierDecl)* "}";
 *
 **/

// eAnnotations+=EAnnotationDecl* "package" name=ID "{" (eSubpackages+=
// SubEPackageDecl|eClassifiers+=EClassifierDecl)* "}"
protected class SubEPackageDecl_Group extends GroupToken {
	
	public SubEPackageDecl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSubEPackageDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubEPackageDecl_RightCurlyBracketKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getSubEPackageDeclRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// eAnnotations+=EAnnotationDecl*
protected class SubEPackageDecl_EAnnotationsAssignment_0 extends AssignmentToken  {
	
	public SubEPackageDecl_EAnnotationsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSubEPackageDeclAccess().getEAnnotationsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAnnotationDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eAnnotations",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eAnnotations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEAnnotationDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSubEPackageDeclAccess().getEAnnotationsEAnnotationDeclParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SubEPackageDecl_EAnnotationsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// "package"
protected class SubEPackageDecl_PackageKeyword_1 extends KeywordToken  {
	
	public SubEPackageDecl_PackageKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSubEPackageDeclAccess().getPackageKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubEPackageDecl_EAnnotationsAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}

}

// name=ID
protected class SubEPackageDecl_NameAssignment_2 extends AssignmentToken  {
	
	public SubEPackageDecl_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSubEPackageDeclAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubEPackageDecl_PackageKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getSubEPackageDeclAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getSubEPackageDeclAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class SubEPackageDecl_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public SubEPackageDecl_LeftCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSubEPackageDeclAccess().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubEPackageDecl_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// (eSubpackages+=SubEPackageDecl|eClassifiers+=EClassifierDecl)*
protected class SubEPackageDecl_Alternatives_4 extends AlternativesToken {

	public SubEPackageDecl_Alternatives_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSubEPackageDeclAccess().getAlternatives_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubEPackageDecl_ESubpackagesAssignment_4_0(parent, this, 0, inst);
			case 1: return new SubEPackageDecl_EClassifiersAssignment_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// eSubpackages+=SubEPackageDecl
protected class SubEPackageDecl_ESubpackagesAssignment_4_0 extends AssignmentToken  {
	
	public SubEPackageDecl_ESubpackagesAssignment_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSubEPackageDeclAccess().getESubpackagesAssignment_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubEPackageDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eSubpackages",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eSubpackages");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSubEPackageDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSubEPackageDeclAccess().getESubpackagesSubEPackageDeclParserRuleCall_4_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SubEPackageDecl_Alternatives_4(parent, next, actIndex, consumed);
			case 1: return new SubEPackageDecl_LeftCurlyBracketKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// eClassifiers+=EClassifierDecl
protected class SubEPackageDecl_EClassifiersAssignment_4_1 extends AssignmentToken  {
	
	public SubEPackageDecl_EClassifiersAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSubEPackageDeclAccess().getEClassifiersAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassifierDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eClassifiers",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eClassifiers");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEClassifierDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSubEPackageDeclAccess().getEClassifiersEClassifierDeclParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SubEPackageDecl_Alternatives_4(parent, next, actIndex, consumed);
			case 1: return new SubEPackageDecl_LeftCurlyBracketKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class SubEPackageDecl_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public SubEPackageDecl_RightCurlyBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSubEPackageDeclAccess().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubEPackageDecl_Alternatives_4(parent, this, 0, inst);
			case 1: return new SubEPackageDecl_LeftCurlyBracketKeyword_3(parent, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule SubEPackageDecl ****************/


/************ begin Rule EClassifierDecl ****************
 *
 * EClassifierDecl returns ecore::EClassifier:
 *   EClassDecl|EDataTypeDecl;
 *
 **/

// EClassDecl|EDataTypeDecl
protected class EClassifierDecl_Alternatives extends AlternativesToken {

	public EClassifierDecl_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEClassifierDeclAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassifierDecl_EClassDeclParserRuleCall_0(parent, this, 0, inst);
			case 1: return new EClassifierDecl_EDataTypeDeclParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getEClassDeclRule().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getEDataTypeDeclRule().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getEEnumDeclRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// EClassDecl
protected class EClassifierDecl_EClassDeclParserRuleCall_0 extends RuleCallToken {
	
	public EClassifierDecl_EClassDeclParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEClassifierDeclAccess().getEClassDeclParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getEClassDeclRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(EClassDecl_Group.class, current)) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// EDataTypeDecl
protected class EClassifierDecl_EDataTypeDeclParserRuleCall_1 extends RuleCallToken {
	
	public EClassifierDecl_EDataTypeDeclParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEClassifierDeclAccess().getEDataTypeDeclParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EDataTypeDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getEDataTypeDeclRule().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getEEnumDeclRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(EDataTypeDecl_Alternatives.class, current)) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule EClassifierDecl ****************/


/************ begin Rule EDataTypeDecl ****************
 *
 * EDataTypeDecl returns ecore::EDataType:
 *   eAnnotations+=EAnnotationDecl* serializable=Serializable? ("datatype" name=ID
 *   ":" instanceClassName=STRING_OR_QID ";")|EEnumDecl;
 *
 **/

// eAnnotations+=EAnnotationDecl* serializable=Serializable? ("datatype" name=ID
// ":" instanceClassName=STRING_OR_QID ";")|EEnumDecl
protected class EDataTypeDecl_Alternatives extends AlternativesToken {

	public EDataTypeDecl_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEDataTypeDeclAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EDataTypeDecl_Group_0(parent, this, 0, inst);
			case 1: return new EDataTypeDecl_EEnumDeclParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getEDataTypeDeclRule().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getEEnumDeclRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// eAnnotations+=EAnnotationDecl* serializable=Serializable? ("datatype" name=ID
// ":" instanceClassName=STRING_OR_QID ";")
protected class EDataTypeDecl_Group_0 extends GroupToken {
	
	public EDataTypeDecl_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEDataTypeDeclAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EDataTypeDecl_Group_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getEDataTypeDeclRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// eAnnotations+=EAnnotationDecl*
protected class EDataTypeDecl_EAnnotationsAssignment_0_0 extends AssignmentToken  {
	
	public EDataTypeDecl_EAnnotationsAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEDataTypeDeclAccess().getEAnnotationsAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAnnotationDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eAnnotations",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eAnnotations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEAnnotationDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEDataTypeDeclAccess().getEAnnotationsEAnnotationDeclParserRuleCall_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EDataTypeDecl_EAnnotationsAssignment_0_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// serializable=Serializable?
protected class EDataTypeDecl_SerializableAssignment_0_1 extends AssignmentToken  {
	
	public EDataTypeDecl_SerializableAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEDataTypeDeclAccess().getSerializableAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EDataTypeDecl_EAnnotationsAssignment_0_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("serializable",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("serializable");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEDataTypeDeclAccess().getSerializableSerializableTerminalRuleCall_0_1_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEDataTypeDeclAccess().getSerializableSerializableTerminalRuleCall_0_1_0();
			return obj;
		}
		return null;
	}

}

// "datatype" name=ID ":" instanceClassName=STRING_OR_QID ";"
protected class EDataTypeDecl_Group_0_2 extends GroupToken {
	
	public EDataTypeDecl_Group_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEDataTypeDeclAccess().getGroup_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EDataTypeDecl_SemicolonKeyword_0_2_4(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "datatype"
protected class EDataTypeDecl_DatatypeKeyword_0_2_0 extends KeywordToken  {
	
	public EDataTypeDecl_DatatypeKeyword_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEDataTypeDeclAccess().getDatatypeKeyword_0_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EDataTypeDecl_SerializableAssignment_0_1(parent, this, 0, inst);
			case 1: return new EDataTypeDecl_EAnnotationsAssignment_0_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

}

// name=ID
protected class EDataTypeDecl_NameAssignment_0_2_1 extends AssignmentToken  {
	
	public EDataTypeDecl_NameAssignment_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEDataTypeDeclAccess().getNameAssignment_0_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EDataTypeDecl_DatatypeKeyword_0_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEDataTypeDeclAccess().getNameIDTerminalRuleCall_0_2_1_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEDataTypeDeclAccess().getNameIDTerminalRuleCall_0_2_1_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class EDataTypeDecl_ColonKeyword_0_2_2 extends KeywordToken  {
	
	public EDataTypeDecl_ColonKeyword_0_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEDataTypeDeclAccess().getColonKeyword_0_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EDataTypeDecl_NameAssignment_0_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// instanceClassName=STRING_OR_QID
protected class EDataTypeDecl_InstanceClassNameAssignment_0_2_3 extends AssignmentToken  {
	
	public EDataTypeDecl_InstanceClassNameAssignment_0_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEDataTypeDeclAccess().getInstanceClassNameAssignment_0_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EDataTypeDecl_ColonKeyword_0_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("instanceClassName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("instanceClassName");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEDataTypeDeclAccess().getInstanceClassNameSTRING_OR_QIDParserRuleCall_0_2_3_0(), value, null)) {
			type = AssignmentType.DRC;
			element = grammarAccess.getEDataTypeDeclAccess().getInstanceClassNameSTRING_OR_QIDParserRuleCall_0_2_3_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class EDataTypeDecl_SemicolonKeyword_0_2_4 extends KeywordToken  {
	
	public EDataTypeDecl_SemicolonKeyword_0_2_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEDataTypeDeclAccess().getSemicolonKeyword_0_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EDataTypeDecl_InstanceClassNameAssignment_0_2_3(parent, this, 0, inst);
			default: return null;
		}	
	}

}



// EEnumDecl
protected class EDataTypeDecl_EEnumDeclParserRuleCall_1 extends RuleCallToken {
	
	public EDataTypeDecl_EEnumDeclParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEDataTypeDeclAccess().getEEnumDeclParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EEnumDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getEEnumDeclRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(EEnumDecl_Group.class, current)) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule EDataTypeDecl ****************/


/************ begin Rule EAnnotationDecl ****************
 *
 * EAnnotationDecl returns ecore::EAnnotation:
 *   "@" source=STRING_OR_QID ("(" details+=MapEntry ("," details+=MapEntry)* ")")
 *   ?;
 *
 **/

// "@" source=STRING_OR_QID ("(" details+=MapEntry ("," details+=MapEntry)* ")")?
protected class EAnnotationDecl_Group extends GroupToken {
	
	public EAnnotationDecl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEAnnotationDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAnnotationDecl_Group_2(parent, this, 0, inst);
			case 1: return new EAnnotationDecl_SourceAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getEAnnotationDeclRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// "@"
protected class EAnnotationDecl_CommercialAtKeyword_0 extends KeywordToken  {
	
	public EAnnotationDecl_CommercialAtKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEAnnotationDeclAccess().getCommercialAtKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

}

// source=STRING_OR_QID
protected class EAnnotationDecl_SourceAssignment_1 extends AssignmentToken  {
	
	public EAnnotationDecl_SourceAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEAnnotationDeclAccess().getSourceAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAnnotationDecl_CommercialAtKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("source",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("source");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEAnnotationDeclAccess().getSourceSTRING_OR_QIDParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DRC;
			element = grammarAccess.getEAnnotationDeclAccess().getSourceSTRING_OR_QIDParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("(" details+=MapEntry ("," details+=MapEntry)* ")")?
protected class EAnnotationDecl_Group_2 extends GroupToken {
	
	public EAnnotationDecl_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEAnnotationDeclAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAnnotationDecl_RightParenthesisKeyword_2_3(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class EAnnotationDecl_LeftParenthesisKeyword_2_0 extends KeywordToken  {
	
	public EAnnotationDecl_LeftParenthesisKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEAnnotationDeclAccess().getLeftParenthesisKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAnnotationDecl_SourceAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// details+=MapEntry
protected class EAnnotationDecl_DetailsAssignment_2_1 extends AssignmentToken  {
	
	public EAnnotationDecl_DetailsAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEAnnotationDeclAccess().getDetailsAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MapEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("details",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("details");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMapEntryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEAnnotationDeclAccess().getDetailsMapEntryParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EAnnotationDecl_LeftParenthesisKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," details+=MapEntry)*
protected class EAnnotationDecl_Group_2_2 extends GroupToken {
	
	public EAnnotationDecl_Group_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEAnnotationDeclAccess().getGroup_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAnnotationDecl_DetailsAssignment_2_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class EAnnotationDecl_CommaKeyword_2_2_0 extends KeywordToken  {
	
	public EAnnotationDecl_CommaKeyword_2_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEAnnotationDeclAccess().getCommaKeyword_2_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAnnotationDecl_Group_2_2(parent, this, 0, inst);
			case 1: return new EAnnotationDecl_DetailsAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// details+=MapEntry
protected class EAnnotationDecl_DetailsAssignment_2_2_1 extends AssignmentToken  {
	
	public EAnnotationDecl_DetailsAssignment_2_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEAnnotationDeclAccess().getDetailsAssignment_2_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MapEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("details",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("details");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMapEntryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEAnnotationDeclAccess().getDetailsMapEntryParserRuleCall_2_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EAnnotationDecl_CommaKeyword_2_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class EAnnotationDecl_RightParenthesisKeyword_2_3 extends KeywordToken  {
	
	public EAnnotationDecl_RightParenthesisKeyword_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEAnnotationDeclAccess().getRightParenthesisKeyword_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAnnotationDecl_Group_2_2(parent, this, 0, inst);
			case 1: return new EAnnotationDecl_DetailsAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}



/************ end Rule EAnnotationDecl ****************/


/************ begin Rule EClassDecl ****************
 *
 * EClassDecl returns ecore::EClass:
 *   eAnnotations+=EAnnotationDecl* abstract?="abstract"? (interface?="interface"|
 *   "class") name=ID ("<" eTypeParameters+=ETypeParameterDecl (","
 *   eTypeParameters+=ETypeParameterDecl)* ">")? ("extends" eGenericSuperTypes+=
 *   EGenericTypeReferenceDecl ("," eGenericSuperTypes+=EGenericTypeReferenceDecl)
 *   *)? (":" instanceClassName=STRING_OR_QID)? "{" (eStructuralFeatures+=
 *   EStructuralFeatureDecl|eOperations+=EOperationDecl)* "}";
 *
 **/

// eAnnotations+=EAnnotationDecl* abstract?="abstract"? (interface?="interface"|
// "class") name=ID ("<" eTypeParameters+=ETypeParameterDecl ("," eTypeParameters
// +=ETypeParameterDecl)* ">")? ("extends" eGenericSuperTypes+=
// EGenericTypeReferenceDecl ("," eGenericSuperTypes+=EGenericTypeReferenceDecl)*)
// ? (":" instanceClassName=STRING_OR_QID)? "{" (eStructuralFeatures+=
// EStructuralFeatureDecl|eOperations+=EOperationDecl)* "}"
protected class EClassDecl_Group extends GroupToken {
	
	public EClassDecl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassDecl_RightCurlyBracketKeyword_9(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getEClassDeclRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// eAnnotations+=EAnnotationDecl*
protected class EClassDecl_EAnnotationsAssignment_0 extends AssignmentToken  {
	
	public EClassDecl_EAnnotationsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getEAnnotationsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAnnotationDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eAnnotations",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eAnnotations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEAnnotationDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEClassDeclAccess().getEAnnotationsEAnnotationDeclParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EClassDecl_EAnnotationsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// abstract?="abstract"?
protected class EClassDecl_AbstractAssignment_1 extends AssignmentToken  {
	
	public EClassDecl_AbstractAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getAbstractAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassDecl_EAnnotationsAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("abstract",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("abstract");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getEClassDeclAccess().getAbstractAbstractKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// interface?="interface"|"class"
protected class EClassDecl_Alternatives_2 extends AlternativesToken {

	public EClassDecl_Alternatives_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getAlternatives_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassDecl_InterfaceAssignment_2_0(parent, this, 0, inst);
			case 1: return new EClassDecl_ClassKeyword_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// interface?="interface"
protected class EClassDecl_InterfaceAssignment_2_0 extends AssignmentToken  {
	
	public EClassDecl_InterfaceAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getInterfaceAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassDecl_AbstractAssignment_1(parent, this, 0, inst);
			case 1: return new EClassDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interface",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interface");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getEClassDeclAccess().getInterfaceInterfaceKeyword_2_0_0();
			return obj;
		}
		return null;
	}

}

// "class"
protected class EClassDecl_ClassKeyword_2_1 extends KeywordToken  {
	
	public EClassDecl_ClassKeyword_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getClassKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassDecl_AbstractAssignment_1(parent, this, 0, inst);
			case 1: return new EClassDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

}


// name=ID
protected class EClassDecl_NameAssignment_3 extends AssignmentToken  {
	
	public EClassDecl_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassDecl_Alternatives_2(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEClassDeclAccess().getNameIDTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEClassDeclAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ("<" eTypeParameters+=ETypeParameterDecl ("," eTypeParameters+=
// ETypeParameterDecl)* ">")?
protected class EClassDecl_Group_4 extends GroupToken {
	
	public EClassDecl_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassDecl_GreaterThanSignKeyword_4_3(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "<"
protected class EClassDecl_LessThanSignKeyword_4_0 extends KeywordToken  {
	
	public EClassDecl_LessThanSignKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getLessThanSignKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassDecl_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// eTypeParameters+=ETypeParameterDecl
protected class EClassDecl_ETypeParametersAssignment_4_1 extends AssignmentToken  {
	
	public EClassDecl_ETypeParametersAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getETypeParametersAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ETypeParameterDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eTypeParameters",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eTypeParameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getETypeParameterDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEClassDeclAccess().getETypeParametersETypeParameterDeclParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EClassDecl_LessThanSignKeyword_4_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," eTypeParameters+=ETypeParameterDecl)*
protected class EClassDecl_Group_4_2 extends GroupToken {
	
	public EClassDecl_Group_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getGroup_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassDecl_ETypeParametersAssignment_4_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class EClassDecl_CommaKeyword_4_2_0 extends KeywordToken  {
	
	public EClassDecl_CommaKeyword_4_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getCommaKeyword_4_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassDecl_Group_4_2(parent, this, 0, inst);
			case 1: return new EClassDecl_ETypeParametersAssignment_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// eTypeParameters+=ETypeParameterDecl
protected class EClassDecl_ETypeParametersAssignment_4_2_1 extends AssignmentToken  {
	
	public EClassDecl_ETypeParametersAssignment_4_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getETypeParametersAssignment_4_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ETypeParameterDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eTypeParameters",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eTypeParameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getETypeParameterDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEClassDeclAccess().getETypeParametersETypeParameterDeclParserRuleCall_4_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EClassDecl_CommaKeyword_4_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ">"
protected class EClassDecl_GreaterThanSignKeyword_4_3 extends KeywordToken  {
	
	public EClassDecl_GreaterThanSignKeyword_4_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getGreaterThanSignKeyword_4_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassDecl_Group_4_2(parent, this, 0, inst);
			case 1: return new EClassDecl_ETypeParametersAssignment_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}


// ("extends" eGenericSuperTypes+=EGenericTypeReferenceDecl ("," eGenericSuperTypes
// +=EGenericTypeReferenceDecl)*)?
protected class EClassDecl_Group_5 extends GroupToken {
	
	public EClassDecl_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassDecl_Group_5_2(parent, this, 0, inst);
			case 1: return new EClassDecl_EGenericSuperTypesAssignment_5_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// "extends"
protected class EClassDecl_ExtendsKeyword_5_0 extends KeywordToken  {
	
	public EClassDecl_ExtendsKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getExtendsKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassDecl_Group_4(parent, this, 0, inst);
			case 1: return new EClassDecl_NameAssignment_3(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// eGenericSuperTypes+=EGenericTypeReferenceDecl
protected class EClassDecl_EGenericSuperTypesAssignment_5_1 extends AssignmentToken  {
	
	public EClassDecl_EGenericSuperTypesAssignment_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getEGenericSuperTypesAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeReferenceDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eGenericSuperTypes",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eGenericSuperTypes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEGenericTypeReferenceDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEClassDeclAccess().getEGenericSuperTypesEGenericTypeReferenceDeclParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EClassDecl_ExtendsKeyword_5_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," eGenericSuperTypes+=EGenericTypeReferenceDecl)*
protected class EClassDecl_Group_5_2 extends GroupToken {
	
	public EClassDecl_Group_5_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getGroup_5_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassDecl_EGenericSuperTypesAssignment_5_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class EClassDecl_CommaKeyword_5_2_0 extends KeywordToken  {
	
	public EClassDecl_CommaKeyword_5_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getCommaKeyword_5_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassDecl_Group_5_2(parent, this, 0, inst);
			case 1: return new EClassDecl_EGenericSuperTypesAssignment_5_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// eGenericSuperTypes+=EGenericTypeReferenceDecl
protected class EClassDecl_EGenericSuperTypesAssignment_5_2_1 extends AssignmentToken  {
	
	public EClassDecl_EGenericSuperTypesAssignment_5_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getEGenericSuperTypesAssignment_5_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeReferenceDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eGenericSuperTypes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eGenericSuperTypes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEGenericTypeReferenceDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEClassDeclAccess().getEGenericSuperTypesEGenericTypeReferenceDeclParserRuleCall_5_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EClassDecl_CommaKeyword_5_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// (":" instanceClassName=STRING_OR_QID)?
protected class EClassDecl_Group_6 extends GroupToken {
	
	public EClassDecl_Group_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassDecl_InstanceClassNameAssignment_6_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// ":"
protected class EClassDecl_ColonKeyword_6_0 extends KeywordToken  {
	
	public EClassDecl_ColonKeyword_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getColonKeyword_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassDecl_Group_5(parent, this, 0, inst);
			case 1: return new EClassDecl_Group_4(parent, this, 1, inst);
			case 2: return new EClassDecl_NameAssignment_3(parent, this, 2, inst);
			default: return null;
		}	
	}

}

// instanceClassName=STRING_OR_QID
protected class EClassDecl_InstanceClassNameAssignment_6_1 extends AssignmentToken  {
	
	public EClassDecl_InstanceClassNameAssignment_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getInstanceClassNameAssignment_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassDecl_ColonKeyword_6_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("instanceClassName",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("instanceClassName");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEClassDeclAccess().getInstanceClassNameSTRING_OR_QIDParserRuleCall_6_1_0(), value, null)) {
			type = AssignmentType.DRC;
			element = grammarAccess.getEClassDeclAccess().getInstanceClassNameSTRING_OR_QIDParserRuleCall_6_1_0();
			return obj;
		}
		return null;
	}

}


// "{"
protected class EClassDecl_LeftCurlyBracketKeyword_7 extends KeywordToken  {
	
	public EClassDecl_LeftCurlyBracketKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getLeftCurlyBracketKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassDecl_Group_6(parent, this, 0, inst);
			case 1: return new EClassDecl_Group_5(parent, this, 1, inst);
			case 2: return new EClassDecl_Group_4(parent, this, 2, inst);
			case 3: return new EClassDecl_NameAssignment_3(parent, this, 3, inst);
			default: return null;
		}	
	}

}

// (eStructuralFeatures+=EStructuralFeatureDecl|eOperations+=EOperationDecl)*
protected class EClassDecl_Alternatives_8 extends AlternativesToken {

	public EClassDecl_Alternatives_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getAlternatives_8();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassDecl_EStructuralFeaturesAssignment_8_0(parent, this, 0, inst);
			case 1: return new EClassDecl_EOperationsAssignment_8_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// eStructuralFeatures+=EStructuralFeatureDecl
protected class EClassDecl_EStructuralFeaturesAssignment_8_0 extends AssignmentToken  {
	
	public EClassDecl_EStructuralFeaturesAssignment_8_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getEStructuralFeaturesAssignment_8_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EStructuralFeatureDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eStructuralFeatures",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eStructuralFeatures");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEStructuralFeatureDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEClassDeclAccess().getEStructuralFeaturesEStructuralFeatureDeclParserRuleCall_8_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EClassDecl_Alternatives_8(parent, next, actIndex, consumed);
			case 1: return new EClassDecl_LeftCurlyBracketKeyword_7(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// eOperations+=EOperationDecl
protected class EClassDecl_EOperationsAssignment_8_1 extends AssignmentToken  {
	
	public EClassDecl_EOperationsAssignment_8_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getEOperationsAssignment_8_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eOperations",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eOperations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEOperationDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEClassDeclAccess().getEOperationsEOperationDeclParserRuleCall_8_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EClassDecl_Alternatives_8(parent, next, actIndex, consumed);
			case 1: return new EClassDecl_LeftCurlyBracketKeyword_7(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class EClassDecl_RightCurlyBracketKeyword_9 extends KeywordToken  {
	
	public EClassDecl_RightCurlyBracketKeyword_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEClassDeclAccess().getRightCurlyBracketKeyword_9();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EClassDecl_Alternatives_8(parent, this, 0, inst);
			case 1: return new EClassDecl_LeftCurlyBracketKeyword_7(parent, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule EClassDecl ****************/


/************ begin Rule EStructuralFeatureDecl ****************
 *
 * EStructuralFeatureDecl returns ecore::EStructuralFeature:
 *   EAttributeDecl|EReferenceDecl;
 *
 **/

// EAttributeDecl|EReferenceDecl
protected class EStructuralFeatureDecl_Alternatives extends AlternativesToken {

	public EStructuralFeatureDecl_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEStructuralFeatureDeclAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EStructuralFeatureDecl_EAttributeDeclParserRuleCall_0(parent, this, 0, inst);
			case 1: return new EStructuralFeatureDecl_EReferenceDeclParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getEAttributeDeclRule().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getEReferenceDeclRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// EAttributeDecl
protected class EStructuralFeatureDecl_EAttributeDeclParserRuleCall_0 extends RuleCallToken {
	
	public EStructuralFeatureDecl_EAttributeDeclParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEStructuralFeatureDeclAccess().getEAttributeDeclParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getEAttributeDeclRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(EAttributeDecl_Group.class, current)) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// EReferenceDecl
protected class EStructuralFeatureDecl_EReferenceDeclParserRuleCall_1 extends RuleCallToken {
	
	public EStructuralFeatureDecl_EReferenceDeclParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEStructuralFeatureDeclAccess().getEReferenceDeclParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getEReferenceDeclRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(EReferenceDecl_Group.class, current)) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule EStructuralFeatureDecl ****************/


/************ begin Rule EAttributeDecl ****************
 *
 * EAttributeDecl returns ecore::EAttribute:
 *   eAnnotations+=EAnnotationDecl* (iD?="ID"|unique=Bag|ordered=Random|changeable
 *   =Readonly|volatile?="volatile"|transient?="transient"|unsettable?=
 *   "unsettable"|derived?="derived")* "attr" eGenericType=
 *   EGenericTypeReferenceDecl ("[" lowerBound=INT (".." upperBound=SINT)? "]")?
 *   name=ID ("=" defaultValueLiteral=STRING)? ";";
 *
 **/

// eAnnotations+=EAnnotationDecl* (iD?="ID"|unique=Bag|ordered=Random|changeable=
// Readonly|volatile?="volatile"|transient?="transient"|unsettable?="unsettable"|
// derived?="derived")* "attr" eGenericType=EGenericTypeReferenceDecl ("["
// lowerBound=INT (".." upperBound=SINT)? "]")? name=ID ("=" defaultValueLiteral=
// STRING)? ";"
protected class EAttributeDecl_Group extends GroupToken {
	
	public EAttributeDecl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_SemicolonKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getEAttributeDeclRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// eAnnotations+=EAnnotationDecl*
protected class EAttributeDecl_EAnnotationsAssignment_0 extends AssignmentToken  {
	
	public EAttributeDecl_EAnnotationsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getEAnnotationsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAnnotationDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eAnnotations",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eAnnotations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEAnnotationDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEAttributeDeclAccess().getEAnnotationsEAnnotationDeclParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EAttributeDecl_EAnnotationsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// (iD?="ID"|unique=Bag|ordered=Random|changeable=Readonly|volatile?="volatile"|
// transient?="transient"|unsettable?="unsettable"|derived?="derived")*
protected class EAttributeDecl_Alternatives_1 extends AlternativesToken {

	public EAttributeDecl_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_IDAssignment_1_0(parent, this, 0, inst);
			case 1: return new EAttributeDecl_UniqueAssignment_1_1(parent, this, 1, inst);
			case 2: return new EAttributeDecl_OrderedAssignment_1_2(parent, this, 2, inst);
			case 3: return new EAttributeDecl_ChangeableAssignment_1_3(parent, this, 3, inst);
			case 4: return new EAttributeDecl_VolatileAssignment_1_4(parent, this, 4, inst);
			case 5: return new EAttributeDecl_TransientAssignment_1_5(parent, this, 5, inst);
			case 6: return new EAttributeDecl_UnsettableAssignment_1_6(parent, this, 6, inst);
			case 7: return new EAttributeDecl_DerivedAssignment_1_7(parent, this, 7, inst);
			default: return null;
		}	
	}

}

// iD?="ID"
protected class EAttributeDecl_IDAssignment_1_0 extends AssignmentToken  {
	
	public EAttributeDecl_IDAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getIDAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_Alternatives_1(parent, this, 0, inst);
			case 1: return new EAttributeDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("iD",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("iD");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getEAttributeDeclAccess().getIDIDKeyword_1_0_0();
			return obj;
		}
		return null;
	}

}

// unique=Bag
protected class EAttributeDecl_UniqueAssignment_1_1 extends AssignmentToken  {
	
	public EAttributeDecl_UniqueAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getUniqueAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_Alternatives_1(parent, this, 0, inst);
			case 1: return new EAttributeDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("unique",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unique");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEAttributeDeclAccess().getUniqueBagTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEAttributeDeclAccess().getUniqueBagTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// ordered=Random
protected class EAttributeDecl_OrderedAssignment_1_2 extends AssignmentToken  {
	
	public EAttributeDecl_OrderedAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getOrderedAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_Alternatives_1(parent, this, 0, inst);
			case 1: return new EAttributeDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("ordered",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ordered");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEAttributeDeclAccess().getOrderedRandomTerminalRuleCall_1_2_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEAttributeDeclAccess().getOrderedRandomTerminalRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}

// changeable=Readonly
protected class EAttributeDecl_ChangeableAssignment_1_3 extends AssignmentToken  {
	
	public EAttributeDecl_ChangeableAssignment_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getChangeableAssignment_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_Alternatives_1(parent, this, 0, inst);
			case 1: return new EAttributeDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("changeable",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("changeable");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEAttributeDeclAccess().getChangeableReadonlyTerminalRuleCall_1_3_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEAttributeDeclAccess().getChangeableReadonlyTerminalRuleCall_1_3_0();
			return obj;
		}
		return null;
	}

}

// volatile?="volatile"
protected class EAttributeDecl_VolatileAssignment_1_4 extends AssignmentToken  {
	
	public EAttributeDecl_VolatileAssignment_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getVolatileAssignment_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_Alternatives_1(parent, this, 0, inst);
			case 1: return new EAttributeDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("volatile",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("volatile");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getEAttributeDeclAccess().getVolatileVolatileKeyword_1_4_0();
			return obj;
		}
		return null;
	}

}

// transient?="transient"
protected class EAttributeDecl_TransientAssignment_1_5 extends AssignmentToken  {
	
	public EAttributeDecl_TransientAssignment_1_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getTransientAssignment_1_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_Alternatives_1(parent, this, 0, inst);
			case 1: return new EAttributeDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("transient",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("transient");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getEAttributeDeclAccess().getTransientTransientKeyword_1_5_0();
			return obj;
		}
		return null;
	}

}

// unsettable?="unsettable"
protected class EAttributeDecl_UnsettableAssignment_1_6 extends AssignmentToken  {
	
	public EAttributeDecl_UnsettableAssignment_1_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getUnsettableAssignment_1_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_Alternatives_1(parent, this, 0, inst);
			case 1: return new EAttributeDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("unsettable",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unsettable");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getEAttributeDeclAccess().getUnsettableUnsettableKeyword_1_6_0();
			return obj;
		}
		return null;
	}

}

// derived?="derived"
protected class EAttributeDecl_DerivedAssignment_1_7 extends AssignmentToken  {
	
	public EAttributeDecl_DerivedAssignment_1_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getDerivedAssignment_1_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_Alternatives_1(parent, this, 0, inst);
			case 1: return new EAttributeDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("derived",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("derived");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getEAttributeDeclAccess().getDerivedDerivedKeyword_1_7_0();
			return obj;
		}
		return null;
	}

}


// "attr"
protected class EAttributeDecl_AttrKeyword_2 extends KeywordToken  {
	
	public EAttributeDecl_AttrKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getAttrKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_Alternatives_1(parent, this, 0, inst);
			case 1: return new EAttributeDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

}

// eGenericType=EGenericTypeReferenceDecl
protected class EAttributeDecl_EGenericTypeAssignment_3 extends AssignmentToken  {
	
	public EAttributeDecl_EGenericTypeAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getEGenericTypeAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeReferenceDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eGenericType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eGenericType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEGenericTypeReferenceDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEAttributeDeclAccess().getEGenericTypeEGenericTypeReferenceDeclParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EAttributeDecl_AttrKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("[" lowerBound=INT (".." upperBound=SINT)? "]")?
protected class EAttributeDecl_Group_4 extends GroupToken {
	
	public EAttributeDecl_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_RightSquareBracketKeyword_4_3(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "["
protected class EAttributeDecl_LeftSquareBracketKeyword_4_0 extends KeywordToken  {
	
	public EAttributeDecl_LeftSquareBracketKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getLeftSquareBracketKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_EGenericTypeAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// lowerBound=INT
protected class EAttributeDecl_LowerBoundAssignment_4_1 extends AssignmentToken  {
	
	public EAttributeDecl_LowerBoundAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getLowerBoundAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_LeftSquareBracketKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("lowerBound",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("lowerBound");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEAttributeDeclAccess().getLowerBoundINTTerminalRuleCall_4_1_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEAttributeDeclAccess().getLowerBoundINTTerminalRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}

// (".." upperBound=SINT)?
protected class EAttributeDecl_Group_4_2 extends GroupToken {
	
	public EAttributeDecl_Group_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getGroup_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_UpperBoundAssignment_4_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// ".."
protected class EAttributeDecl_FullStopFullStopKeyword_4_2_0 extends KeywordToken  {
	
	public EAttributeDecl_FullStopFullStopKeyword_4_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getFullStopFullStopKeyword_4_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_LowerBoundAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// upperBound=SINT
protected class EAttributeDecl_UpperBoundAssignment_4_2_1 extends AssignmentToken  {
	
	public EAttributeDecl_UpperBoundAssignment_4_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getUpperBoundAssignment_4_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_FullStopFullStopKeyword_4_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("upperBound",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("upperBound");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEAttributeDeclAccess().getUpperBoundSINTParserRuleCall_4_2_1_0(), value, null)) {
			type = AssignmentType.DRC;
			element = grammarAccess.getEAttributeDeclAccess().getUpperBoundSINTParserRuleCall_4_2_1_0();
			return obj;
		}
		return null;
	}

}


// "]"
protected class EAttributeDecl_RightSquareBracketKeyword_4_3 extends KeywordToken  {
	
	public EAttributeDecl_RightSquareBracketKeyword_4_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getRightSquareBracketKeyword_4_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_Group_4_2(parent, this, 0, inst);
			case 1: return new EAttributeDecl_LowerBoundAssignment_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}


// name=ID
protected class EAttributeDecl_NameAssignment_5 extends AssignmentToken  {
	
	public EAttributeDecl_NameAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getNameAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_Group_4(parent, this, 0, inst);
			case 1: return new EAttributeDecl_EGenericTypeAssignment_3(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEAttributeDeclAccess().getNameIDTerminalRuleCall_5_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEAttributeDeclAccess().getNameIDTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// ("=" defaultValueLiteral=STRING)?
protected class EAttributeDecl_Group_6 extends GroupToken {
	
	public EAttributeDecl_Group_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_DefaultValueLiteralAssignment_6_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class EAttributeDecl_EqualsSignKeyword_6_0 extends KeywordToken  {
	
	public EAttributeDecl_EqualsSignKeyword_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getEqualsSignKeyword_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_NameAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// defaultValueLiteral=STRING
protected class EAttributeDecl_DefaultValueLiteralAssignment_6_1 extends AssignmentToken  {
	
	public EAttributeDecl_DefaultValueLiteralAssignment_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getDefaultValueLiteralAssignment_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_EqualsSignKeyword_6_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("defaultValueLiteral",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("defaultValueLiteral");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEAttributeDeclAccess().getDefaultValueLiteralSTRINGTerminalRuleCall_6_1_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEAttributeDeclAccess().getDefaultValueLiteralSTRINGTerminalRuleCall_6_1_0();
			return obj;
		}
		return null;
	}

}


// ";"
protected class EAttributeDecl_SemicolonKeyword_7 extends KeywordToken  {
	
	public EAttributeDecl_SemicolonKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEAttributeDeclAccess().getSemicolonKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAttributeDecl_Group_6(parent, this, 0, inst);
			case 1: return new EAttributeDecl_NameAssignment_5(parent, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule EAttributeDecl ****************/


/************ begin Rule EReferenceDecl ****************
 *
 * EReferenceDecl returns ecore::EReference:
 *   eAnnotations+=EAnnotationDecl* (resolveProxies=Local|unique=Bag|ordered=
 *   Random|changeable=Readonly|volatile?="volatile"|transient?="transient"|
 *   unsettable?="unsettable"|derived?="derived")* (containment?="val"|"ref")
 *   eGenericType=EGenericTypeReferenceDecl ("[" lowerBound=INT (".." upperBound=
 *   SINT)? "]")? ("#" eOpposite=[ecore::EReference])? name=ID ";";
 *
 **/

// eAnnotations+=EAnnotationDecl* (resolveProxies=Local|unique=Bag|ordered=Random|
// changeable=Readonly|volatile?="volatile"|transient?="transient"|unsettable?=
// "unsettable"|derived?="derived")* (containment?="val"|"ref") eGenericType=
// EGenericTypeReferenceDecl ("[" lowerBound=INT (".." upperBound=SINT)? "]")? (
// "#" eOpposite=[ecore::EReference])? name=ID ";"
protected class EReferenceDecl_Group extends GroupToken {
	
	public EReferenceDecl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_SemicolonKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getEReferenceDeclRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// eAnnotations+=EAnnotationDecl*
protected class EReferenceDecl_EAnnotationsAssignment_0 extends AssignmentToken  {
	
	public EReferenceDecl_EAnnotationsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getEAnnotationsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAnnotationDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eAnnotations",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eAnnotations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEAnnotationDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEReferenceDeclAccess().getEAnnotationsEAnnotationDeclParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EReferenceDecl_EAnnotationsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// (resolveProxies=Local|unique=Bag|ordered=Random|changeable=Readonly|volatile?=
// "volatile"|transient?="transient"|unsettable?="unsettable"|derived?="derived")*
protected class EReferenceDecl_Alternatives_1 extends AlternativesToken {

	public EReferenceDecl_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_ResolveProxiesAssignment_1_0(parent, this, 0, inst);
			case 1: return new EReferenceDecl_UniqueAssignment_1_1(parent, this, 1, inst);
			case 2: return new EReferenceDecl_OrderedAssignment_1_2(parent, this, 2, inst);
			case 3: return new EReferenceDecl_ChangeableAssignment_1_3(parent, this, 3, inst);
			case 4: return new EReferenceDecl_VolatileAssignment_1_4(parent, this, 4, inst);
			case 5: return new EReferenceDecl_TransientAssignment_1_5(parent, this, 5, inst);
			case 6: return new EReferenceDecl_UnsettableAssignment_1_6(parent, this, 6, inst);
			case 7: return new EReferenceDecl_DerivedAssignment_1_7(parent, this, 7, inst);
			default: return null;
		}	
	}

}

// resolveProxies=Local
protected class EReferenceDecl_ResolveProxiesAssignment_1_0 extends AssignmentToken  {
	
	public EReferenceDecl_ResolveProxiesAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getResolveProxiesAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_Alternatives_1(parent, this, 0, inst);
			case 1: return new EReferenceDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("resolveProxies",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("resolveProxies");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEReferenceDeclAccess().getResolveProxiesLocalTerminalRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEReferenceDeclAccess().getResolveProxiesLocalTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// unique=Bag
protected class EReferenceDecl_UniqueAssignment_1_1 extends AssignmentToken  {
	
	public EReferenceDecl_UniqueAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getUniqueAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_Alternatives_1(parent, this, 0, inst);
			case 1: return new EReferenceDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("unique",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unique");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEReferenceDeclAccess().getUniqueBagTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEReferenceDeclAccess().getUniqueBagTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// ordered=Random
protected class EReferenceDecl_OrderedAssignment_1_2 extends AssignmentToken  {
	
	public EReferenceDecl_OrderedAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getOrderedAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_Alternatives_1(parent, this, 0, inst);
			case 1: return new EReferenceDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("ordered",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ordered");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEReferenceDeclAccess().getOrderedRandomTerminalRuleCall_1_2_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEReferenceDeclAccess().getOrderedRandomTerminalRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}

// changeable=Readonly
protected class EReferenceDecl_ChangeableAssignment_1_3 extends AssignmentToken  {
	
	public EReferenceDecl_ChangeableAssignment_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getChangeableAssignment_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_Alternatives_1(parent, this, 0, inst);
			case 1: return new EReferenceDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("changeable",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("changeable");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEReferenceDeclAccess().getChangeableReadonlyTerminalRuleCall_1_3_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEReferenceDeclAccess().getChangeableReadonlyTerminalRuleCall_1_3_0();
			return obj;
		}
		return null;
	}

}

// volatile?="volatile"
protected class EReferenceDecl_VolatileAssignment_1_4 extends AssignmentToken  {
	
	public EReferenceDecl_VolatileAssignment_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getVolatileAssignment_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_Alternatives_1(parent, this, 0, inst);
			case 1: return new EReferenceDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("volatile",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("volatile");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getEReferenceDeclAccess().getVolatileVolatileKeyword_1_4_0();
			return obj;
		}
		return null;
	}

}

// transient?="transient"
protected class EReferenceDecl_TransientAssignment_1_5 extends AssignmentToken  {
	
	public EReferenceDecl_TransientAssignment_1_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getTransientAssignment_1_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_Alternatives_1(parent, this, 0, inst);
			case 1: return new EReferenceDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("transient",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("transient");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getEReferenceDeclAccess().getTransientTransientKeyword_1_5_0();
			return obj;
		}
		return null;
	}

}

// unsettable?="unsettable"
protected class EReferenceDecl_UnsettableAssignment_1_6 extends AssignmentToken  {
	
	public EReferenceDecl_UnsettableAssignment_1_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getUnsettableAssignment_1_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_Alternatives_1(parent, this, 0, inst);
			case 1: return new EReferenceDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("unsettable",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unsettable");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getEReferenceDeclAccess().getUnsettableUnsettableKeyword_1_6_0();
			return obj;
		}
		return null;
	}

}

// derived?="derived"
protected class EReferenceDecl_DerivedAssignment_1_7 extends AssignmentToken  {
	
	public EReferenceDecl_DerivedAssignment_1_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getDerivedAssignment_1_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_Alternatives_1(parent, this, 0, inst);
			case 1: return new EReferenceDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("derived",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("derived");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getEReferenceDeclAccess().getDerivedDerivedKeyword_1_7_0();
			return obj;
		}
		return null;
	}

}


// containment?="val"|"ref"
protected class EReferenceDecl_Alternatives_2 extends AlternativesToken {

	public EReferenceDecl_Alternatives_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getAlternatives_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_ContainmentAssignment_2_0(parent, this, 0, inst);
			case 1: return new EReferenceDecl_RefKeyword_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// containment?="val"
protected class EReferenceDecl_ContainmentAssignment_2_0 extends AssignmentToken  {
	
	public EReferenceDecl_ContainmentAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getContainmentAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_Alternatives_1(parent, this, 0, inst);
			case 1: return new EReferenceDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("containment",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("containment");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getEReferenceDeclAccess().getContainmentValKeyword_2_0_0();
			return obj;
		}
		return null;
	}

}

// "ref"
protected class EReferenceDecl_RefKeyword_2_1 extends KeywordToken  {
	
	public EReferenceDecl_RefKeyword_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getRefKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_Alternatives_1(parent, this, 0, inst);
			case 1: return new EReferenceDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

}


// eGenericType=EGenericTypeReferenceDecl
protected class EReferenceDecl_EGenericTypeAssignment_3 extends AssignmentToken  {
	
	public EReferenceDecl_EGenericTypeAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getEGenericTypeAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeReferenceDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eGenericType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eGenericType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEGenericTypeReferenceDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEReferenceDeclAccess().getEGenericTypeEGenericTypeReferenceDeclParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EReferenceDecl_Alternatives_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("[" lowerBound=INT (".." upperBound=SINT)? "]")?
protected class EReferenceDecl_Group_4 extends GroupToken {
	
	public EReferenceDecl_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_RightSquareBracketKeyword_4_3(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "["
protected class EReferenceDecl_LeftSquareBracketKeyword_4_0 extends KeywordToken  {
	
	public EReferenceDecl_LeftSquareBracketKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getLeftSquareBracketKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_EGenericTypeAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// lowerBound=INT
protected class EReferenceDecl_LowerBoundAssignment_4_1 extends AssignmentToken  {
	
	public EReferenceDecl_LowerBoundAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getLowerBoundAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_LeftSquareBracketKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("lowerBound",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("lowerBound");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEReferenceDeclAccess().getLowerBoundINTTerminalRuleCall_4_1_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEReferenceDeclAccess().getLowerBoundINTTerminalRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}

// (".." upperBound=SINT)?
protected class EReferenceDecl_Group_4_2 extends GroupToken {
	
	public EReferenceDecl_Group_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getGroup_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_UpperBoundAssignment_4_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// ".."
protected class EReferenceDecl_FullStopFullStopKeyword_4_2_0 extends KeywordToken  {
	
	public EReferenceDecl_FullStopFullStopKeyword_4_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getFullStopFullStopKeyword_4_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_LowerBoundAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// upperBound=SINT
protected class EReferenceDecl_UpperBoundAssignment_4_2_1 extends AssignmentToken  {
	
	public EReferenceDecl_UpperBoundAssignment_4_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getUpperBoundAssignment_4_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_FullStopFullStopKeyword_4_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("upperBound",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("upperBound");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEReferenceDeclAccess().getUpperBoundSINTParserRuleCall_4_2_1_0(), value, null)) {
			type = AssignmentType.DRC;
			element = grammarAccess.getEReferenceDeclAccess().getUpperBoundSINTParserRuleCall_4_2_1_0();
			return obj;
		}
		return null;
	}

}


// "]"
protected class EReferenceDecl_RightSquareBracketKeyword_4_3 extends KeywordToken  {
	
	public EReferenceDecl_RightSquareBracketKeyword_4_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getRightSquareBracketKeyword_4_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_Group_4_2(parent, this, 0, inst);
			case 1: return new EReferenceDecl_LowerBoundAssignment_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}


// ("#" eOpposite=[ecore::EReference])?
protected class EReferenceDecl_Group_5 extends GroupToken {
	
	public EReferenceDecl_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_EOppositeAssignment_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "#"
protected class EReferenceDecl_NumberSignKeyword_5_0 extends KeywordToken  {
	
	public EReferenceDecl_NumberSignKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getNumberSignKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_Group_4(parent, this, 0, inst);
			case 1: return new EReferenceDecl_EGenericTypeAssignment_3(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// eOpposite=[ecore::EReference]
protected class EReferenceDecl_EOppositeAssignment_5_1 extends AssignmentToken  {
	
	public EReferenceDecl_EOppositeAssignment_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getEOppositeAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_NumberSignKeyword_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eOpposite",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eOpposite");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEReferenceDeclAccess().getEOppositeEReferenceCrossReference_5_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getEReferenceDeclAccess().getEOppositeEReferenceCrossReference_5_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// name=ID
protected class EReferenceDecl_NameAssignment_6 extends AssignmentToken  {
	
	public EReferenceDecl_NameAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getNameAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_Group_5(parent, this, 0, inst);
			case 1: return new EReferenceDecl_Group_4(parent, this, 1, inst);
			case 2: return new EReferenceDecl_EGenericTypeAssignment_3(parent, this, 2, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEReferenceDeclAccess().getNameIDTerminalRuleCall_6_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEReferenceDeclAccess().getNameIDTerminalRuleCall_6_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class EReferenceDecl_SemicolonKeyword_7 extends KeywordToken  {
	
	public EReferenceDecl_SemicolonKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEReferenceDeclAccess().getSemicolonKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EReferenceDecl_NameAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule EReferenceDecl ****************/


/************ begin Rule EEnumDecl ****************
 *
 * EEnumDecl returns ecore::EEnum:
 *   eAnnotations+=EAnnotationDecl* "enum" name=ID "{" eLiterals+=EEnumLiteralDecl
 *   + "}";
 *
 **/

// eAnnotations+=EAnnotationDecl* "enum" name=ID "{" eLiterals+=EEnumLiteralDecl+
// "}"
protected class EEnumDecl_Group extends GroupToken {
	
	public EEnumDecl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEEnumDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EEnumDecl_RightCurlyBracketKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getEEnumDeclRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// eAnnotations+=EAnnotationDecl*
protected class EEnumDecl_EAnnotationsAssignment_0 extends AssignmentToken  {
	
	public EEnumDecl_EAnnotationsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEEnumDeclAccess().getEAnnotationsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAnnotationDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eAnnotations",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eAnnotations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEAnnotationDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEEnumDeclAccess().getEAnnotationsEAnnotationDeclParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EEnumDecl_EAnnotationsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// "enum"
protected class EEnumDecl_EnumKeyword_1 extends KeywordToken  {
	
	public EEnumDecl_EnumKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEEnumDeclAccess().getEnumKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EEnumDecl_EAnnotationsAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}

}

// name=ID
protected class EEnumDecl_NameAssignment_2 extends AssignmentToken  {
	
	public EEnumDecl_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEEnumDeclAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EEnumDecl_EnumKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEEnumDeclAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEEnumDeclAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class EEnumDecl_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public EEnumDecl_LeftCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEEnumDeclAccess().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EEnumDecl_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// eLiterals+=EEnumLiteralDecl+
protected class EEnumDecl_ELiteralsAssignment_4 extends AssignmentToken  {
	
	public EEnumDecl_ELiteralsAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEEnumDeclAccess().getELiteralsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EEnumLiteralDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eLiterals",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eLiterals");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEEnumLiteralDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEEnumDeclAccess().getELiteralsEEnumLiteralDeclParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EEnumDecl_ELiteralsAssignment_4(parent, next, actIndex, consumed);
			case 1: return new EEnumDecl_LeftCurlyBracketKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class EEnumDecl_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public EEnumDecl_RightCurlyBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEEnumDeclAccess().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EEnumDecl_ELiteralsAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule EEnumDecl ****************/


/************ begin Rule EEnumLiteralDecl ****************
 *
 * EEnumLiteralDecl returns ecore::EEnumLiteral:
 *   eAnnotations+=EAnnotationDecl* name=ID ("=" value=INT)? literal=STRING? ";";
 *
 **/

// eAnnotations+=EAnnotationDecl* name=ID ("=" value=INT)? literal=STRING? ";"
protected class EEnumLiteralDecl_Group extends GroupToken {
	
	public EEnumLiteralDecl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEEnumLiteralDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EEnumLiteralDecl_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getEEnumLiteralDeclRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// eAnnotations+=EAnnotationDecl*
protected class EEnumLiteralDecl_EAnnotationsAssignment_0 extends AssignmentToken  {
	
	public EEnumLiteralDecl_EAnnotationsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEEnumLiteralDeclAccess().getEAnnotationsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAnnotationDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eAnnotations",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eAnnotations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEAnnotationDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEEnumLiteralDeclAccess().getEAnnotationsEAnnotationDeclParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EEnumLiteralDecl_EAnnotationsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// name=ID
protected class EEnumLiteralDecl_NameAssignment_1 extends AssignmentToken  {
	
	public EEnumLiteralDecl_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEEnumLiteralDeclAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EEnumLiteralDecl_EAnnotationsAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEEnumLiteralDeclAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEEnumLiteralDeclAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("=" value=INT)?
protected class EEnumLiteralDecl_Group_2 extends GroupToken {
	
	public EEnumLiteralDecl_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEEnumLiteralDeclAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EEnumLiteralDecl_ValueAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class EEnumLiteralDecl_EqualsSignKeyword_2_0 extends KeywordToken  {
	
	public EEnumLiteralDecl_EqualsSignKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEEnumLiteralDeclAccess().getEqualsSignKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EEnumLiteralDecl_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// value=INT
protected class EEnumLiteralDecl_ValueAssignment_2_1 extends AssignmentToken  {
	
	public EEnumLiteralDecl_ValueAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEEnumLiteralDeclAccess().getValueAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EEnumLiteralDecl_EqualsSignKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEEnumLiteralDeclAccess().getValueINTTerminalRuleCall_2_1_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEEnumLiteralDeclAccess().getValueINTTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// literal=STRING?
protected class EEnumLiteralDecl_LiteralAssignment_3 extends AssignmentToken  {
	
	public EEnumLiteralDecl_LiteralAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEEnumLiteralDeclAccess().getLiteralAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EEnumLiteralDecl_Group_2(parent, this, 0, inst);
			case 1: return new EEnumLiteralDecl_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("literal",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("literal");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEEnumLiteralDeclAccess().getLiteralSTRINGTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEEnumLiteralDeclAccess().getLiteralSTRINGTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class EEnumLiteralDecl_SemicolonKeyword_4 extends KeywordToken  {
	
	public EEnumLiteralDecl_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEEnumLiteralDeclAccess().getSemicolonKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EEnumLiteralDecl_LiteralAssignment_3(parent, this, 0, inst);
			case 1: return new EEnumLiteralDecl_Group_2(parent, this, 1, inst);
			case 2: return new EEnumLiteralDecl_NameAssignment_1(parent, this, 2, inst);
			default: return null;
		}	
	}

}


/************ end Rule EEnumLiteralDecl ****************/


/************ begin Rule ETypeParameterDecl ****************
 *
 * ETypeParameterDecl returns ecore::ETypeParameter:
 *   name=ID ("extends" eBounds+=EGenericTypeDecl)?;
 *
 **/

// name=ID ("extends" eBounds+=EGenericTypeDecl)?
protected class ETypeParameterDecl_Group extends GroupToken {
	
	public ETypeParameterDecl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getETypeParameterDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ETypeParameterDecl_Group_1(parent, this, 0, inst);
			case 1: return new ETypeParameterDecl_NameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getETypeParameterDeclRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// name=ID
protected class ETypeParameterDecl_NameAssignment_0 extends AssignmentToken  {
	
	public ETypeParameterDecl_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getETypeParameterDeclAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getETypeParameterDeclAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getETypeParameterDeclAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ("extends" eBounds+=EGenericTypeDecl)?
protected class ETypeParameterDecl_Group_1 extends GroupToken {
	
	public ETypeParameterDecl_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getETypeParameterDeclAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ETypeParameterDecl_EBoundsAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "extends"
protected class ETypeParameterDecl_ExtendsKeyword_1_0 extends KeywordToken  {
	
	public ETypeParameterDecl_ExtendsKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getETypeParameterDeclAccess().getExtendsKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ETypeParameterDecl_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// eBounds+=EGenericTypeDecl
protected class ETypeParameterDecl_EBoundsAssignment_1_1 extends AssignmentToken  {
	
	public ETypeParameterDecl_EBoundsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getETypeParameterDeclAccess().getEBoundsAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eBounds",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eBounds");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEGenericTypeDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getETypeParameterDeclAccess().getEBoundsEGenericTypeDeclParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ETypeParameterDecl_ExtendsKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ETypeParameterDecl ****************/


/************ begin Rule EGenericTypeReferenceDecl ****************
 *
 * EGenericTypeReferenceDecl returns ecore::EGenericType:
 *   eClassifier=[ecore::EClassifier] ("<" eTypeArguments+=EGenericTypeDecl (","
 *   eTypeArguments+=EGenericTypeDecl)* ">")?|"#" eTypeParameter=[ecore::
 *   ETypeParameter];
 *
 **/

// eClassifier=[ecore::EClassifier] ("<" eTypeArguments+=EGenericTypeDecl (","
// eTypeArguments+=EGenericTypeDecl)* ">")?|"#" eTypeParameter=[ecore::
// ETypeParameter]
protected class EGenericTypeReferenceDecl_Alternatives extends AlternativesToken {

	public EGenericTypeReferenceDecl_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEGenericTypeReferenceDeclAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeReferenceDecl_Group_0(parent, this, 0, inst);
			case 1: return new EGenericTypeReferenceDecl_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getEGenericTypeReferenceDeclRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// eClassifier=[ecore::EClassifier] ("<" eTypeArguments+=EGenericTypeDecl (","
// eTypeArguments+=EGenericTypeDecl)* ">")?
protected class EGenericTypeReferenceDecl_Group_0 extends GroupToken {
	
	public EGenericTypeReferenceDecl_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEGenericTypeReferenceDeclAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeReferenceDecl_Group_0_1(parent, this, 0, inst);
			case 1: return new EGenericTypeReferenceDecl_EClassifierAssignment_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// eClassifier=[ecore::EClassifier]
protected class EGenericTypeReferenceDecl_EClassifierAssignment_0_0 extends AssignmentToken  {
	
	public EGenericTypeReferenceDecl_EClassifierAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEGenericTypeReferenceDeclAccess().getEClassifierAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eClassifier",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eClassifier");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEGenericTypeReferenceDeclAccess().getEClassifierEClassifierCrossReference_0_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getEGenericTypeReferenceDeclAccess().getEClassifierEClassifierCrossReference_0_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("<" eTypeArguments+=EGenericTypeDecl ("," eTypeArguments+=EGenericTypeDecl)*
// ">")?
protected class EGenericTypeReferenceDecl_Group_0_1 extends GroupToken {
	
	public EGenericTypeReferenceDecl_Group_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEGenericTypeReferenceDeclAccess().getGroup_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeReferenceDecl_GreaterThanSignKeyword_0_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "<"
protected class EGenericTypeReferenceDecl_LessThanSignKeyword_0_1_0 extends KeywordToken  {
	
	public EGenericTypeReferenceDecl_LessThanSignKeyword_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEGenericTypeReferenceDeclAccess().getLessThanSignKeyword_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeReferenceDecl_EClassifierAssignment_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// eTypeArguments+=EGenericTypeDecl
protected class EGenericTypeReferenceDecl_ETypeArgumentsAssignment_0_1_1 extends AssignmentToken  {
	
	public EGenericTypeReferenceDecl_ETypeArgumentsAssignment_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEGenericTypeReferenceDeclAccess().getETypeArgumentsAssignment_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eTypeArguments",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eTypeArguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEGenericTypeDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEGenericTypeReferenceDeclAccess().getETypeArgumentsEGenericTypeDeclParserRuleCall_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EGenericTypeReferenceDecl_LessThanSignKeyword_0_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," eTypeArguments+=EGenericTypeDecl)*
protected class EGenericTypeReferenceDecl_Group_0_1_2 extends GroupToken {
	
	public EGenericTypeReferenceDecl_Group_0_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEGenericTypeReferenceDeclAccess().getGroup_0_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeReferenceDecl_ETypeArgumentsAssignment_0_1_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class EGenericTypeReferenceDecl_CommaKeyword_0_1_2_0 extends KeywordToken  {
	
	public EGenericTypeReferenceDecl_CommaKeyword_0_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEGenericTypeReferenceDeclAccess().getCommaKeyword_0_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeReferenceDecl_Group_0_1_2(parent, this, 0, inst);
			case 1: return new EGenericTypeReferenceDecl_ETypeArgumentsAssignment_0_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// eTypeArguments+=EGenericTypeDecl
protected class EGenericTypeReferenceDecl_ETypeArgumentsAssignment_0_1_2_1 extends AssignmentToken  {
	
	public EGenericTypeReferenceDecl_ETypeArgumentsAssignment_0_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEGenericTypeReferenceDeclAccess().getETypeArgumentsAssignment_0_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eTypeArguments",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eTypeArguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEGenericTypeDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEGenericTypeReferenceDeclAccess().getETypeArgumentsEGenericTypeDeclParserRuleCall_0_1_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EGenericTypeReferenceDecl_CommaKeyword_0_1_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ">"
protected class EGenericTypeReferenceDecl_GreaterThanSignKeyword_0_1_3 extends KeywordToken  {
	
	public EGenericTypeReferenceDecl_GreaterThanSignKeyword_0_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEGenericTypeReferenceDeclAccess().getGreaterThanSignKeyword_0_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeReferenceDecl_Group_0_1_2(parent, this, 0, inst);
			case 1: return new EGenericTypeReferenceDecl_ETypeArgumentsAssignment_0_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}



// "#" eTypeParameter=[ecore::ETypeParameter]
protected class EGenericTypeReferenceDecl_Group_1 extends GroupToken {
	
	public EGenericTypeReferenceDecl_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEGenericTypeReferenceDeclAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeReferenceDecl_ETypeParameterAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "#"
protected class EGenericTypeReferenceDecl_NumberSignKeyword_1_0 extends KeywordToken  {
	
	public EGenericTypeReferenceDecl_NumberSignKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEGenericTypeReferenceDeclAccess().getNumberSignKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

}

// eTypeParameter=[ecore::ETypeParameter]
protected class EGenericTypeReferenceDecl_ETypeParameterAssignment_1_1 extends AssignmentToken  {
	
	public EGenericTypeReferenceDecl_ETypeParameterAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEGenericTypeReferenceDeclAccess().getETypeParameterAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeReferenceDecl_NumberSignKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eTypeParameter",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eTypeParameter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEGenericTypeReferenceDeclAccess().getETypeParameterETypeParameterCrossReference_1_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getEGenericTypeReferenceDeclAccess().getETypeParameterETypeParameterCrossReference_1_1_0(); 
				return obj;
			}
		}
		return null;
	}

}



/************ end Rule EGenericTypeReferenceDecl ****************/


/************ begin Rule EGenericTypeDecl ****************
 *
 * EGenericTypeDecl returns ecore::EGenericType:
 *   eClassifier=[ecore::EClassifier] ("<" eTypeArguments+=EGenericTypeDecl (","
 *   eTypeArguments+=EGenericTypeDecl)* ">")?|"#" eTypeParameter=[ecore::
 *   ETypeParameter]|"?" ("extends" eUpperBound=EGenericTypeDecl|"super"
 *   eLowerBound=EGenericTypeDecl);
 *
 **/

// eClassifier=[ecore::EClassifier] ("<" eTypeArguments+=EGenericTypeDecl (","
// eTypeArguments+=EGenericTypeDecl)* ">")?|"#" eTypeParameter=[ecore::
// ETypeParameter]|"?" ("extends" eUpperBound=EGenericTypeDecl|"super" eLowerBound
// =EGenericTypeDecl)
protected class EGenericTypeDecl_Alternatives extends AlternativesToken {

	public EGenericTypeDecl_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEGenericTypeDeclAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeDecl_Group_0(parent, this, 0, inst);
			case 1: return new EGenericTypeDecl_Group_1(parent, this, 1, inst);
			case 2: return new EGenericTypeDecl_Group_2(parent, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getEGenericTypeDeclRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// eClassifier=[ecore::EClassifier] ("<" eTypeArguments+=EGenericTypeDecl (","
// eTypeArguments+=EGenericTypeDecl)* ">")?
protected class EGenericTypeDecl_Group_0 extends GroupToken {
	
	public EGenericTypeDecl_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEGenericTypeDeclAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeDecl_Group_0_1(parent, this, 0, inst);
			case 1: return new EGenericTypeDecl_EClassifierAssignment_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// eClassifier=[ecore::EClassifier]
protected class EGenericTypeDecl_EClassifierAssignment_0_0 extends AssignmentToken  {
	
	public EGenericTypeDecl_EClassifierAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEGenericTypeDeclAccess().getEClassifierAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eClassifier",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eClassifier");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEGenericTypeDeclAccess().getEClassifierEClassifierCrossReference_0_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getEGenericTypeDeclAccess().getEClassifierEClassifierCrossReference_0_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("<" eTypeArguments+=EGenericTypeDecl ("," eTypeArguments+=EGenericTypeDecl)*
// ">")?
protected class EGenericTypeDecl_Group_0_1 extends GroupToken {
	
	public EGenericTypeDecl_Group_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEGenericTypeDeclAccess().getGroup_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeDecl_GreaterThanSignKeyword_0_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "<"
protected class EGenericTypeDecl_LessThanSignKeyword_0_1_0 extends KeywordToken  {
	
	public EGenericTypeDecl_LessThanSignKeyword_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEGenericTypeDeclAccess().getLessThanSignKeyword_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeDecl_EClassifierAssignment_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// eTypeArguments+=EGenericTypeDecl
protected class EGenericTypeDecl_ETypeArgumentsAssignment_0_1_1 extends AssignmentToken  {
	
	public EGenericTypeDecl_ETypeArgumentsAssignment_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEGenericTypeDeclAccess().getETypeArgumentsAssignment_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eTypeArguments",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eTypeArguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEGenericTypeDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEGenericTypeDeclAccess().getETypeArgumentsEGenericTypeDeclParserRuleCall_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EGenericTypeDecl_LessThanSignKeyword_0_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," eTypeArguments+=EGenericTypeDecl)*
protected class EGenericTypeDecl_Group_0_1_2 extends GroupToken {
	
	public EGenericTypeDecl_Group_0_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEGenericTypeDeclAccess().getGroup_0_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeDecl_ETypeArgumentsAssignment_0_1_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class EGenericTypeDecl_CommaKeyword_0_1_2_0 extends KeywordToken  {
	
	public EGenericTypeDecl_CommaKeyword_0_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEGenericTypeDeclAccess().getCommaKeyword_0_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeDecl_Group_0_1_2(parent, this, 0, inst);
			case 1: return new EGenericTypeDecl_ETypeArgumentsAssignment_0_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// eTypeArguments+=EGenericTypeDecl
protected class EGenericTypeDecl_ETypeArgumentsAssignment_0_1_2_1 extends AssignmentToken  {
	
	public EGenericTypeDecl_ETypeArgumentsAssignment_0_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEGenericTypeDeclAccess().getETypeArgumentsAssignment_0_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eTypeArguments",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eTypeArguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEGenericTypeDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEGenericTypeDeclAccess().getETypeArgumentsEGenericTypeDeclParserRuleCall_0_1_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EGenericTypeDecl_CommaKeyword_0_1_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ">"
protected class EGenericTypeDecl_GreaterThanSignKeyword_0_1_3 extends KeywordToken  {
	
	public EGenericTypeDecl_GreaterThanSignKeyword_0_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEGenericTypeDeclAccess().getGreaterThanSignKeyword_0_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeDecl_Group_0_1_2(parent, this, 0, inst);
			case 1: return new EGenericTypeDecl_ETypeArgumentsAssignment_0_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}



// "#" eTypeParameter=[ecore::ETypeParameter]
protected class EGenericTypeDecl_Group_1 extends GroupToken {
	
	public EGenericTypeDecl_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEGenericTypeDeclAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeDecl_ETypeParameterAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "#"
protected class EGenericTypeDecl_NumberSignKeyword_1_0 extends KeywordToken  {
	
	public EGenericTypeDecl_NumberSignKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEGenericTypeDeclAccess().getNumberSignKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

}

// eTypeParameter=[ecore::ETypeParameter]
protected class EGenericTypeDecl_ETypeParameterAssignment_1_1 extends AssignmentToken  {
	
	public EGenericTypeDecl_ETypeParameterAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEGenericTypeDeclAccess().getETypeParameterAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeDecl_NumberSignKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eTypeParameter",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eTypeParameter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEGenericTypeDeclAccess().getETypeParameterETypeParameterCrossReference_1_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getEGenericTypeDeclAccess().getETypeParameterETypeParameterCrossReference_1_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "?" ("extends" eUpperBound=EGenericTypeDecl|"super" eLowerBound=EGenericTypeDecl
// )
protected class EGenericTypeDecl_Group_2 extends GroupToken {
	
	public EGenericTypeDecl_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEGenericTypeDeclAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeDecl_Alternatives_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "?"
protected class EGenericTypeDecl_QuestionMarkKeyword_2_0 extends KeywordToken  {
	
	public EGenericTypeDecl_QuestionMarkKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEGenericTypeDeclAccess().getQuestionMarkKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

}

// "extends" eUpperBound=EGenericTypeDecl|"super" eLowerBound=EGenericTypeDecl
protected class EGenericTypeDecl_Alternatives_2_1 extends AlternativesToken {

	public EGenericTypeDecl_Alternatives_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEGenericTypeDeclAccess().getAlternatives_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeDecl_Group_2_1_0(parent, this, 0, inst);
			case 1: return new EGenericTypeDecl_Group_2_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// "extends" eUpperBound=EGenericTypeDecl
protected class EGenericTypeDecl_Group_2_1_0 extends GroupToken {
	
	public EGenericTypeDecl_Group_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEGenericTypeDeclAccess().getGroup_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeDecl_EUpperBoundAssignment_2_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "extends"
protected class EGenericTypeDecl_ExtendsKeyword_2_1_0_0 extends KeywordToken  {
	
	public EGenericTypeDecl_ExtendsKeyword_2_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEGenericTypeDeclAccess().getExtendsKeyword_2_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeDecl_QuestionMarkKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// eUpperBound=EGenericTypeDecl
protected class EGenericTypeDecl_EUpperBoundAssignment_2_1_0_1 extends AssignmentToken  {
	
	public EGenericTypeDecl_EUpperBoundAssignment_2_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEGenericTypeDeclAccess().getEUpperBoundAssignment_2_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eUpperBound",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eUpperBound");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEGenericTypeDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEGenericTypeDeclAccess().getEUpperBoundEGenericTypeDeclParserRuleCall_2_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EGenericTypeDecl_ExtendsKeyword_2_1_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "super" eLowerBound=EGenericTypeDecl
protected class EGenericTypeDecl_Group_2_1_1 extends GroupToken {
	
	public EGenericTypeDecl_Group_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEGenericTypeDeclAccess().getGroup_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeDecl_ELowerBoundAssignment_2_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "super"
protected class EGenericTypeDecl_SuperKeyword_2_1_1_0 extends KeywordToken  {
	
	public EGenericTypeDecl_SuperKeyword_2_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEGenericTypeDeclAccess().getSuperKeyword_2_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeDecl_QuestionMarkKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// eLowerBound=EGenericTypeDecl
protected class EGenericTypeDecl_ELowerBoundAssignment_2_1_1_1 extends AssignmentToken  {
	
	public EGenericTypeDecl_ELowerBoundAssignment_2_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEGenericTypeDeclAccess().getELowerBoundAssignment_2_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eLowerBound",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eLowerBound");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEGenericTypeDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEGenericTypeDeclAccess().getELowerBoundEGenericTypeDeclParserRuleCall_2_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EGenericTypeDecl_SuperKeyword_2_1_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}





/************ end Rule EGenericTypeDecl ****************/


/************ begin Rule EOperationDecl ****************
 *
 * EOperationDecl returns ecore::EOperation:
 *   eAnnotations+=EAnnotationDecl* (unique?=Bag|ordered?=Random)* "op" (
 *   eGenericType=EGenericTypeReferenceDecl|"void") name=ID ("<" eTypeParameters+=
 *   ETypeParameterDecl ("," eTypeParameters+=ETypeParameterDecl)* ">")? "(" (
 *   eParameters+=EParameterDecl ("," eParameters+=EParameterDecl)*)? ")" (
 *   "throws" eGenericExceptions+=EGenericTypeReferenceDecl (","
 *   eGenericExceptions+=EGenericTypeReferenceDecl)*)? ";";
 *
 **/

// eAnnotations+=EAnnotationDecl* (unique?=Bag|ordered?=Random)* "op" (eGenericType
// =EGenericTypeReferenceDecl|"void") name=ID ("<" eTypeParameters+=
// ETypeParameterDecl ("," eTypeParameters+=ETypeParameterDecl)* ">")? "(" (
// eParameters+=EParameterDecl ("," eParameters+=EParameterDecl)*)? ")" ("throws"
// eGenericExceptions+=EGenericTypeReferenceDecl ("," eGenericExceptions+=
// EGenericTypeReferenceDecl)*)? ";"
protected class EOperationDecl_Group extends GroupToken {
	
	public EOperationDecl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_SemicolonKeyword_10(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getEOperationDeclRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// eAnnotations+=EAnnotationDecl*
protected class EOperationDecl_EAnnotationsAssignment_0 extends AssignmentToken  {
	
	public EOperationDecl_EAnnotationsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getEAnnotationsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAnnotationDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eAnnotations",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eAnnotations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEAnnotationDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEOperationDeclAccess().getEAnnotationsEAnnotationDeclParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EOperationDecl_EAnnotationsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// (unique?=Bag|ordered?=Random)*
protected class EOperationDecl_Alternatives_1 extends AlternativesToken {

	public EOperationDecl_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_UniqueAssignment_1_0(parent, this, 0, inst);
			case 1: return new EOperationDecl_OrderedAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// unique?=Bag
protected class EOperationDecl_UniqueAssignment_1_0 extends AssignmentToken  {
	
	public EOperationDecl_UniqueAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getUniqueAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_Alternatives_1(parent, this, 0, inst);
			case 1: return new EOperationDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("unique",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unique");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEOperationDeclAccess().getUniqueBagTerminalRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEOperationDeclAccess().getUniqueBagTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// ordered?=Random
protected class EOperationDecl_OrderedAssignment_1_1 extends AssignmentToken  {
	
	public EOperationDecl_OrderedAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getOrderedAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_Alternatives_1(parent, this, 0, inst);
			case 1: return new EOperationDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("ordered",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ordered");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEOperationDeclAccess().getOrderedRandomTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEOperationDeclAccess().getOrderedRandomTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// "op"
protected class EOperationDecl_OpKeyword_2 extends KeywordToken  {
	
	public EOperationDecl_OpKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getOpKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_Alternatives_1(parent, this, 0, inst);
			case 1: return new EOperationDecl_EAnnotationsAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

}

// eGenericType=EGenericTypeReferenceDecl|"void"
protected class EOperationDecl_Alternatives_3 extends AlternativesToken {

	public EOperationDecl_Alternatives_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getAlternatives_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_EGenericTypeAssignment_3_0(parent, this, 0, inst);
			case 1: return new EOperationDecl_VoidKeyword_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// eGenericType=EGenericTypeReferenceDecl
protected class EOperationDecl_EGenericTypeAssignment_3_0 extends AssignmentToken  {
	
	public EOperationDecl_EGenericTypeAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getEGenericTypeAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeReferenceDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eGenericType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eGenericType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEGenericTypeReferenceDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEOperationDeclAccess().getEGenericTypeEGenericTypeReferenceDeclParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EOperationDecl_OpKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "void"
protected class EOperationDecl_VoidKeyword_3_1 extends KeywordToken  {
	
	public EOperationDecl_VoidKeyword_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getVoidKeyword_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_OpKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}

}


// name=ID
protected class EOperationDecl_NameAssignment_4 extends AssignmentToken  {
	
	public EOperationDecl_NameAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getNameAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_Alternatives_3(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEOperationDeclAccess().getNameIDTerminalRuleCall_4_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEOperationDeclAccess().getNameIDTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// ("<" eTypeParameters+=ETypeParameterDecl ("," eTypeParameters+=
// ETypeParameterDecl)* ">")?
protected class EOperationDecl_Group_5 extends GroupToken {
	
	public EOperationDecl_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_GreaterThanSignKeyword_5_3(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "<"
protected class EOperationDecl_LessThanSignKeyword_5_0 extends KeywordToken  {
	
	public EOperationDecl_LessThanSignKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getLessThanSignKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_NameAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// eTypeParameters+=ETypeParameterDecl
protected class EOperationDecl_ETypeParametersAssignment_5_1 extends AssignmentToken  {
	
	public EOperationDecl_ETypeParametersAssignment_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getETypeParametersAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ETypeParameterDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eTypeParameters",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eTypeParameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getETypeParameterDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEOperationDeclAccess().getETypeParametersETypeParameterDeclParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EOperationDecl_LessThanSignKeyword_5_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," eTypeParameters+=ETypeParameterDecl)*
protected class EOperationDecl_Group_5_2 extends GroupToken {
	
	public EOperationDecl_Group_5_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getGroup_5_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_ETypeParametersAssignment_5_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class EOperationDecl_CommaKeyword_5_2_0 extends KeywordToken  {
	
	public EOperationDecl_CommaKeyword_5_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getCommaKeyword_5_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_Group_5_2(parent, this, 0, inst);
			case 1: return new EOperationDecl_ETypeParametersAssignment_5_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// eTypeParameters+=ETypeParameterDecl
protected class EOperationDecl_ETypeParametersAssignment_5_2_1 extends AssignmentToken  {
	
	public EOperationDecl_ETypeParametersAssignment_5_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getETypeParametersAssignment_5_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ETypeParameterDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eTypeParameters",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eTypeParameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getETypeParameterDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEOperationDeclAccess().getETypeParametersETypeParameterDeclParserRuleCall_5_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EOperationDecl_CommaKeyword_5_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ">"
protected class EOperationDecl_GreaterThanSignKeyword_5_3 extends KeywordToken  {
	
	public EOperationDecl_GreaterThanSignKeyword_5_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getGreaterThanSignKeyword_5_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_Group_5_2(parent, this, 0, inst);
			case 1: return new EOperationDecl_ETypeParametersAssignment_5_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}


// "("
protected class EOperationDecl_LeftParenthesisKeyword_6 extends KeywordToken  {
	
	public EOperationDecl_LeftParenthesisKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getLeftParenthesisKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_Group_5(parent, this, 0, inst);
			case 1: return new EOperationDecl_NameAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// (eParameters+=EParameterDecl ("," eParameters+=EParameterDecl)*)?
protected class EOperationDecl_Group_7 extends GroupToken {
	
	public EOperationDecl_Group_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getGroup_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_Group_7_1(parent, this, 0, inst);
			case 1: return new EOperationDecl_EParametersAssignment_7_0(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// eParameters+=EParameterDecl
protected class EOperationDecl_EParametersAssignment_7_0 extends AssignmentToken  {
	
	public EOperationDecl_EParametersAssignment_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getEParametersAssignment_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EParameterDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eParameters",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eParameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEParameterDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEOperationDeclAccess().getEParametersEParameterDeclParserRuleCall_7_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EOperationDecl_LeftParenthesisKeyword_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," eParameters+=EParameterDecl)*
protected class EOperationDecl_Group_7_1 extends GroupToken {
	
	public EOperationDecl_Group_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getGroup_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_EParametersAssignment_7_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class EOperationDecl_CommaKeyword_7_1_0 extends KeywordToken  {
	
	public EOperationDecl_CommaKeyword_7_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getCommaKeyword_7_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_Group_7_1(parent, this, 0, inst);
			case 1: return new EOperationDecl_EParametersAssignment_7_0(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// eParameters+=EParameterDecl
protected class EOperationDecl_EParametersAssignment_7_1_1 extends AssignmentToken  {
	
	public EOperationDecl_EParametersAssignment_7_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getEParametersAssignment_7_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EParameterDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eParameters",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eParameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEParameterDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEOperationDeclAccess().getEParametersEParameterDeclParserRuleCall_7_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EOperationDecl_CommaKeyword_7_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class EOperationDecl_RightParenthesisKeyword_8 extends KeywordToken  {
	
	public EOperationDecl_RightParenthesisKeyword_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getRightParenthesisKeyword_8();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_Group_7(parent, this, 0, inst);
			case 1: return new EOperationDecl_LeftParenthesisKeyword_6(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// ("throws" eGenericExceptions+=EGenericTypeReferenceDecl ("," eGenericExceptions
// +=EGenericTypeReferenceDecl)*)?
protected class EOperationDecl_Group_9 extends GroupToken {
	
	public EOperationDecl_Group_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getGroup_9();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_Group_9_2(parent, this, 0, inst);
			case 1: return new EOperationDecl_EGenericExceptionsAssignment_9_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// "throws"
protected class EOperationDecl_ThrowsKeyword_9_0 extends KeywordToken  {
	
	public EOperationDecl_ThrowsKeyword_9_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getThrowsKeyword_9_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_RightParenthesisKeyword_8(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// eGenericExceptions+=EGenericTypeReferenceDecl
protected class EOperationDecl_EGenericExceptionsAssignment_9_1 extends AssignmentToken  {
	
	public EOperationDecl_EGenericExceptionsAssignment_9_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getEGenericExceptionsAssignment_9_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeReferenceDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eGenericExceptions",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eGenericExceptions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEGenericTypeReferenceDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEOperationDeclAccess().getEGenericExceptionsEGenericTypeReferenceDeclParserRuleCall_9_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EOperationDecl_ThrowsKeyword_9_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," eGenericExceptions+=EGenericTypeReferenceDecl)*
protected class EOperationDecl_Group_9_2 extends GroupToken {
	
	public EOperationDecl_Group_9_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getGroup_9_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_EGenericExceptionsAssignment_9_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class EOperationDecl_CommaKeyword_9_2_0 extends KeywordToken  {
	
	public EOperationDecl_CommaKeyword_9_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getCommaKeyword_9_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_Group_9_2(parent, this, 0, inst);
			case 1: return new EOperationDecl_EGenericExceptionsAssignment_9_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// eGenericExceptions+=EGenericTypeReferenceDecl
protected class EOperationDecl_EGenericExceptionsAssignment_9_2_1 extends AssignmentToken  {
	
	public EOperationDecl_EGenericExceptionsAssignment_9_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getEGenericExceptionsAssignment_9_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeReferenceDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eGenericExceptions",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eGenericExceptions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEGenericTypeReferenceDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEOperationDeclAccess().getEGenericExceptionsEGenericTypeReferenceDeclParserRuleCall_9_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EOperationDecl_CommaKeyword_9_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ";"
protected class EOperationDecl_SemicolonKeyword_10 extends KeywordToken  {
	
	public EOperationDecl_SemicolonKeyword_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEOperationDeclAccess().getSemicolonKeyword_10();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EOperationDecl_Group_9(parent, this, 0, inst);
			case 1: return new EOperationDecl_RightParenthesisKeyword_8(parent, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule EOperationDecl ****************/


/************ begin Rule EParameterDecl ****************
 *
 * EParameterDecl returns ecore::EParameter:
 *   eAnnotations+=EAnnotationDecl* eGenericType=EGenericTypeReferenceDecl name=ID
 * ;
 *
 **/

// eAnnotations+=EAnnotationDecl* eGenericType=EGenericTypeReferenceDecl name=ID
protected class EParameterDecl_Group extends GroupToken {
	
	public EParameterDecl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEParameterDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EParameterDecl_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getEParameterDeclRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// eAnnotations+=EAnnotationDecl*
protected class EParameterDecl_EAnnotationsAssignment_0 extends AssignmentToken  {
	
	public EParameterDecl_EAnnotationsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEParameterDeclAccess().getEAnnotationsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EAnnotationDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eAnnotations",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eAnnotations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEAnnotationDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEParameterDeclAccess().getEAnnotationsEAnnotationDeclParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EParameterDecl_EAnnotationsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// eGenericType=EGenericTypeReferenceDecl
protected class EParameterDecl_EGenericTypeAssignment_1 extends AssignmentToken  {
	
	public EParameterDecl_EGenericTypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEParameterDeclAccess().getEGenericTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EGenericTypeReferenceDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eGenericType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eGenericType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEGenericTypeReferenceDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEParameterDeclAccess().getEGenericTypeEGenericTypeReferenceDeclParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EParameterDecl_EAnnotationsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// name=ID
protected class EParameterDecl_NameAssignment_2 extends AssignmentToken  {
	
	public EParameterDecl_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEParameterDeclAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EParameterDecl_EGenericTypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getEParameterDeclAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getEParameterDeclAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule EParameterDecl ****************/


/************ begin Rule MapEntry ****************
 *
 * MapEntry returns ecore::EStringToStringMapEntry:
 *   key=ID "=" value=STRING;
 *
 **/

// key=ID "=" value=STRING
protected class MapEntry_Group extends GroupToken {
	
	public MapEntry_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMapEntryAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MapEntry_ValueAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getMapEntryRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// key=ID
protected class MapEntry_KeyAssignment_0 extends AssignmentToken  {
	
	public MapEntry_KeyAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMapEntryAccess().getKeyAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("key",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("key");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getMapEntryAccess().getKeyIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getMapEntryAccess().getKeyIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class MapEntry_EqualsSignKeyword_1 extends KeywordToken  {
	
	public MapEntry_EqualsSignKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMapEntryAccess().getEqualsSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MapEntry_KeyAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// value=STRING
protected class MapEntry_ValueAssignment_2 extends AssignmentToken  {
	
	public MapEntry_ValueAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMapEntryAccess().getValueAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MapEntry_EqualsSignKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getMapEntryAccess().getValueSTRINGTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getMapEntryAccess().getValueSTRINGTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule MapEntry ****************/




}
