grammar org.eclipse.xtext.example.EcoreDsl

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate ecoredsl "http://example.xtext.org/EcoreDsl"

EcoreDsl: (imports+=ImportStatementDecl)* package=EPackageDecl;

ImportStatementDecl : "import" (alias=ID "=")? importURI=STRING ";" ;

EPackageDecl returns ecore::EPackage: (eAnnotations+=EAnnotationDecl)* "package" name=QID "nsURI" "=" nsURI=STRING "nsPrefix" "=" nsPrefix=QID  "{" 
    (eSubpackages+=SubEPackageDecl | eClassifiers+=EClassifierDecl)*  "}"
;

SubEPackageDecl returns ecore::EPackage : (eAnnotations+=EAnnotationDecl)* "package" name=ID "{" 
    (eSubpackages+=SubEPackageDecl | eClassifiers+=EClassifierDecl)*  "}"
;

EClassifierDecl returns ecore::EClassifier: 
    EClassDecl | EDataTypeDecl
;

EDataTypeDecl returns ecore::EDataType : 
    (eAnnotations+=EAnnotationDecl)*  
    (serializable?="!serializable")? ("datatype" name=ID ":" instanceClassName=STRING_OR_QID ";") | EEnumDecl
;

EAnnotationDecl returns ecore::EAnnotation: 
    "@" source=STRING (eModelElement=[ecore::EModelElement])? "(" contents+=MapEntrySuper ("," contents+=MapEntrySuper)* ")" ;

EClassDecl returns ecore::EClass : (eAnnotations+=EAnnotationDecl)*  (^abstract?="abstract")?  ((interface?="interface")|"class") name=ID 
    ("<" eTypeParameters+=ETypeParameterDecl ("," eTypeParameters+=ETypeParameterDecl)* ">")?
    ("extends" eGenericSuperTypes+=EGenericTypeReferenceDecl ("," eGenericSuperTypes+=EGenericTypeReferenceDecl)*)?  (":" instanceClassName=STRING_OR_QID)? "{"  
    ((eStructuralFeatures+=EStructuralFeatureDecl)|(eOperations+=EOperationDecl))* "}"
;

EStructuralFeatureDecl returns ecore::EStructuralFeature:
   EAttributeDecl | EReferenceDecl
;
            
EAttributeDecl returns ecore::EAttribute:
    (eAnnotations+=EAnnotationDecl)* 
    ((iD?="ID")|(unique?="bag")|(ordered?="random")|(changeable?="readonly")|(volatile?="volatile")|(transient?="transient")|(unsettable?="unsettable")|(derived?="derived"))*
    "attr" eGenericType=EGenericTypeReferenceDecl ("["lowerBound=INT (".." upperBound=SINT)? "]")?  name=ID ("=" defaultValueLiteral=STRING)?  ";" 
;

EReferenceDecl returns ecore::EReference:
    (eAnnotations+=EAnnotationDecl)* 
    ((resolveProxies?="local")|(unique?="bag")|(ordered?="random")|(changeable?="readonly")|(volatile?="volatile")|(transient?="transient")|(unsettable?="unsettable")|(derived?="derived"))*
    ((containment?="val")|"ref") eGenericType=EGenericTypeReferenceDecl ("["lowerBound=INT (".." upperBound=SINT)? "]")? ("#" eOpposite=[ecore::EReference])? name=ID ";" 
;

EEnumDecl returns ecore::EEnum: (eAnnotations+=EAnnotationDecl)*  "enum" name=ID "{" 
    (eLiterals+=EEnumLiteralDecl)+ "}"
;

EEnumLiteralDecl returns ecore::EEnumLiteral : 
    (eAnnotations+=EAnnotationDecl)*  name=ID ("=" value=INT)? (literal=STRING)? ";"
;

ETypeParameterDecl returns ecore::ETypeParameter :
    name=ID ("extends" eBounds+=EGenericTypeDecl)?
;

EGenericTypeReferenceDecl returns ecore::EGenericType:
    (eClassifier=[ecore::EClassifier] ("<" eTypeArguments+=EGenericTypeDecl ("," eTypeArguments+=EGenericTypeDecl)* ">")? ) 
    | ("#"eTypeParameter=[ecore::ETypeParameter])
;

EGenericTypeDecl returns ecore::EGenericType:
    (eClassifier=[ecore::EClassifier] ("<" eTypeArguments+=EGenericTypeDecl ("," eTypeArguments+=EGenericTypeDecl)* ">")? ) 
    | ("#"eTypeParameter=[ecore::ETypeParameter])
    | ("?"(("extends" eUpperBound=EGenericTypeDecl) | ("super" eLowerBound=EGenericTypeDecl)) )
;

EOperationDecl returns ecore::EOperation:
   (eAnnotations+=EAnnotationDecl)*  
   ((unique?="bag")|(ordered?="random"))*
   "op"  ((eGenericType=EGenericTypeReferenceDecl)|"void") name=ID
   ("<" eTypeParameters+=ETypeParameterDecl ("," eTypeParameters+=ETypeParameterDecl)* ">")? 
   "(" (eParameters+=EParameterDecl (","  eParameters+=EParameterDecl)* )? ")" ("throws" eGenericExceptions+=EGenericTypeReferenceDecl ("," eGenericExceptions+=EGenericTypeReferenceDecl)*  )? ";"  
;

EParameterDecl returns ecore::EParameter:
    (eAnnotations+=EAnnotationDecl)*  
    eGenericType=EGenericTypeReferenceDecl name=ID
;

MapEntrySuper returns ecore::EObject:
    MapEntry
;
    
MapEntry:
   detailKey=ID "=" detailValue=STRING 
;        

MultiplicityExpr : "+" | "?" | "*" ; 

QID: ID (("."|"$") ID)*;

STRING_OR_QID : STRING | QID ;

SINT returns ecore::EInt :
       '-'? INT;

