/*
* generated by Xtext
*/

package org.eclipse.xtext.example.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.builtin.XtextBuiltinGrammarAccess;

@Singleton
public class EcoreDslGrammarAccess implements IGrammarAccess {
	
	
	public class EcoreDslElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EcoreDsl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment c0AssignmentImports = (Assignment)cGroup.eContents().get(0);
		private final RuleCall c00ParserRuleCallImportStatementDecl = (RuleCall)c0AssignmentImports.eContents().get(0);
		private final Assignment c1AssignmentPackage = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallEPackageDecl = (RuleCall)c1AssignmentPackage.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Assignment ele0AssignmentImports() { return c0AssignmentImports; }

		// not supported
		public RuleCall ele00ParserRuleCallImportStatementDecl() { return c00ParserRuleCallImportStatementDecl; }

		// not supported
		public Assignment ele1AssignmentPackage() { return c1AssignmentPackage; }

		// not supported
		public RuleCall ele10ParserRuleCallEPackageDecl() { return c10ParserRuleCallEPackageDecl; }
	}

	public class ImportStatementDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportStatementDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Keyword c000KeywordImport = (Keyword)c00Group.eContents().get(0);
		private final Group c001Group = (Group)c00Group.eContents().get(1);
		private final Assignment c0010AssignmentAlias = (Assignment)c001Group.eContents().get(0);
		private final RuleCall c00100LexerRuleCallID = (RuleCall)c0010AssignmentAlias.eContents().get(0);
		private final Keyword c0011KeywordEqualsSign = (Keyword)c001Group.eContents().get(1);
		private final Assignment c01AssignmentImportURI = (Assignment)c0Group.eContents().get(1);
		private final RuleCall c010LexerRuleCallSTRING = (RuleCall)c01AssignmentImportURI.eContents().get(0);
		private final Keyword c1KeywordSemicolon = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Keyword ele000KeywordImport() { return c000KeywordImport; }

		// not supported
		public Group ele001Group() { return c001Group; }

		// not supported
		public Assignment ele0010AssignmentAlias() { return c0010AssignmentAlias; }

		// not supported
		public RuleCall ele00100LexerRuleCallID() { return c00100LexerRuleCallID; }

		// not supported
		public Keyword ele0011KeywordEqualsSign() { return c0011KeywordEqualsSign; }

		// not supported
		public Assignment ele01AssignmentImportURI() { return c01AssignmentImportURI; }

		// not supported
		public RuleCall ele010LexerRuleCallSTRING() { return c010LexerRuleCallSTRING; }

		// not supported
		public Keyword ele1KeywordSemicolon() { return c1KeywordSemicolon; }
	}

	public class EPackageDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EPackageDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Group c000Group = (Group)c00Group.eContents().get(0);
		private final Group c0000Group = (Group)c000Group.eContents().get(0);
		private final Group c00000Group = (Group)c0000Group.eContents().get(0);
		private final Group c000000Group = (Group)c00000Group.eContents().get(0);
		private final Group c0000000Group = (Group)c000000Group.eContents().get(0);
		private final Group c00000000Group = (Group)c0000000Group.eContents().get(0);
		private final Group c000000000Group = (Group)c00000000Group.eContents().get(0);
		private final Group c0000000000Group = (Group)c000000000Group.eContents().get(0);
		private final Assignment c00000000000AssignmentEAnnotations = (Assignment)c0000000000Group.eContents().get(0);
		private final RuleCall c000000000000ParserRuleCallEAnnotationDecl = (RuleCall)c00000000000AssignmentEAnnotations.eContents().get(0);
		private final Keyword c00000000001KeywordPackage = (Keyword)c0000000000Group.eContents().get(1);
		private final Assignment c0000000001AssignmentName = (Assignment)c000000000Group.eContents().get(1);
		private final RuleCall c00000000010ParserRuleCallQID = (RuleCall)c0000000001AssignmentName.eContents().get(0);
		private final Keyword c000000001KeywordNsURI = (Keyword)c00000000Group.eContents().get(1);
		private final Keyword c00000001KeywordEqualsSign = (Keyword)c0000000Group.eContents().get(1);
		private final Assignment c0000001AssignmentNsURI = (Assignment)c000000Group.eContents().get(1);
		private final RuleCall c00000010LexerRuleCallSTRING = (RuleCall)c0000001AssignmentNsURI.eContents().get(0);
		private final Keyword c000001KeywordNsPrefix = (Keyword)c00000Group.eContents().get(1);
		private final Keyword c00001KeywordEqualsSign = (Keyword)c0000Group.eContents().get(1);
		private final Assignment c0001AssignmentNsPrefix = (Assignment)c000Group.eContents().get(1);
		private final RuleCall c00010ParserRuleCallQID = (RuleCall)c0001AssignmentNsPrefix.eContents().get(0);
		private final Keyword c001KeywordLeftCurlyBracket = (Keyword)c00Group.eContents().get(1);
		private final Alternatives c01Alternatives = (Alternatives)c0Group.eContents().get(1);
		private final Assignment c010AssignmentESubpackages = (Assignment)c01Alternatives.eContents().get(0);
		private final RuleCall c0100ParserRuleCallSubEPackageDecl = (RuleCall)c010AssignmentESubpackages.eContents().get(0);
		private final Assignment c011AssignmentEClassifiers = (Assignment)c01Alternatives.eContents().get(1);
		private final RuleCall c0110ParserRuleCallEClassifierDecl = (RuleCall)c011AssignmentEClassifiers.eContents().get(0);
		private final Keyword c1KeywordRightCurlyBracket = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Group ele000Group() { return c000Group; }

		// not supported
		public Group ele0000Group() { return c0000Group; }

		// not supported
		public Group ele00000Group() { return c00000Group; }

		// not supported
		public Group ele000000Group() { return c000000Group; }

		// not supported
		public Group ele0000000Group() { return c0000000Group; }

		// not supported
		public Group ele00000000Group() { return c00000000Group; }

		// not supported
		public Group ele000000000Group() { return c000000000Group; }

		// not supported
		public Group ele0000000000Group() { return c0000000000Group; }

		// not supported
		public Assignment ele00000000000AssignmentEAnnotations() { return c00000000000AssignmentEAnnotations; }

		// not supported
		public RuleCall ele000000000000ParserRuleCallEAnnotationDecl() { return c000000000000ParserRuleCallEAnnotationDecl; }

		// not supported
		public Keyword ele00000000001KeywordPackage() { return c00000000001KeywordPackage; }

		// not supported
		public Assignment ele0000000001AssignmentName() { return c0000000001AssignmentName; }

		// not supported
		public RuleCall ele00000000010ParserRuleCallQID() { return c00000000010ParserRuleCallQID; }

		// not supported
		public Keyword ele000000001KeywordNsURI() { return c000000001KeywordNsURI; }

		// not supported
		public Keyword ele00000001KeywordEqualsSign() { return c00000001KeywordEqualsSign; }

		// not supported
		public Assignment ele0000001AssignmentNsURI() { return c0000001AssignmentNsURI; }

		// not supported
		public RuleCall ele00000010LexerRuleCallSTRING() { return c00000010LexerRuleCallSTRING; }

		// not supported
		public Keyword ele000001KeywordNsPrefix() { return c000001KeywordNsPrefix; }

		// not supported
		public Keyword ele00001KeywordEqualsSign() { return c00001KeywordEqualsSign; }

		// not supported
		public Assignment ele0001AssignmentNsPrefix() { return c0001AssignmentNsPrefix; }

		// not supported
		public RuleCall ele00010ParserRuleCallQID() { return c00010ParserRuleCallQID; }

		// not supported
		public Keyword ele001KeywordLeftCurlyBracket() { return c001KeywordLeftCurlyBracket; }

		// not supported
		public Alternatives ele01Alternatives() { return c01Alternatives; }

		// not supported
		public Assignment ele010AssignmentESubpackages() { return c010AssignmentESubpackages; }

		// not supported
		public RuleCall ele0100ParserRuleCallSubEPackageDecl() { return c0100ParserRuleCallSubEPackageDecl; }

		// not supported
		public Assignment ele011AssignmentEClassifiers() { return c011AssignmentEClassifiers; }

		// not supported
		public RuleCall ele0110ParserRuleCallEClassifierDecl() { return c0110ParserRuleCallEClassifierDecl; }

		// not supported
		public Keyword ele1KeywordRightCurlyBracket() { return c1KeywordRightCurlyBracket; }
	}

	public class SubEPackageDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubEPackageDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Group c000Group = (Group)c00Group.eContents().get(0);
		private final Group c0000Group = (Group)c000Group.eContents().get(0);
		private final Assignment c00000AssignmentEAnnotations = (Assignment)c0000Group.eContents().get(0);
		private final RuleCall c000000ParserRuleCallEAnnotationDecl = (RuleCall)c00000AssignmentEAnnotations.eContents().get(0);
		private final Keyword c00001KeywordPackage = (Keyword)c0000Group.eContents().get(1);
		private final Assignment c0001AssignmentName = (Assignment)c000Group.eContents().get(1);
		private final RuleCall c00010LexerRuleCallID = (RuleCall)c0001AssignmentName.eContents().get(0);
		private final Keyword c001KeywordLeftCurlyBracket = (Keyword)c00Group.eContents().get(1);
		private final Alternatives c01Alternatives = (Alternatives)c0Group.eContents().get(1);
		private final Assignment c010AssignmentESubpackages = (Assignment)c01Alternatives.eContents().get(0);
		private final RuleCall c0100ParserRuleCallSubEPackageDecl = (RuleCall)c010AssignmentESubpackages.eContents().get(0);
		private final Assignment c011AssignmentEClassifiers = (Assignment)c01Alternatives.eContents().get(1);
		private final RuleCall c0110ParserRuleCallEClassifierDecl = (RuleCall)c011AssignmentEClassifiers.eContents().get(0);
		private final Keyword c1KeywordRightCurlyBracket = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Group ele000Group() { return c000Group; }

		// not supported
		public Group ele0000Group() { return c0000Group; }

		// not supported
		public Assignment ele00000AssignmentEAnnotations() { return c00000AssignmentEAnnotations; }

		// not supported
		public RuleCall ele000000ParserRuleCallEAnnotationDecl() { return c000000ParserRuleCallEAnnotationDecl; }

		// not supported
		public Keyword ele00001KeywordPackage() { return c00001KeywordPackage; }

		// not supported
		public Assignment ele0001AssignmentName() { return c0001AssignmentName; }

		// not supported
		public RuleCall ele00010LexerRuleCallID() { return c00010LexerRuleCallID; }

		// not supported
		public Keyword ele001KeywordLeftCurlyBracket() { return c001KeywordLeftCurlyBracket; }

		// not supported
		public Alternatives ele01Alternatives() { return c01Alternatives; }

		// not supported
		public Assignment ele010AssignmentESubpackages() { return c010AssignmentESubpackages; }

		// not supported
		public RuleCall ele0100ParserRuleCallSubEPackageDecl() { return c0100ParserRuleCallSubEPackageDecl; }

		// not supported
		public Assignment ele011AssignmentEClassifiers() { return c011AssignmentEClassifiers; }

		// not supported
		public RuleCall ele0110ParserRuleCallEClassifierDecl() { return c0110ParserRuleCallEClassifierDecl; }

		// not supported
		public Keyword ele1KeywordRightCurlyBracket() { return c1KeywordRightCurlyBracket; }
	}

	public class EClassifierDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EClassifierDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallEClassDecl = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallEDataTypeDecl = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallEClassDecl() { return c0ParserRuleCallEClassDecl; }

		// not supported
		public RuleCall ele1ParserRuleCallEDataTypeDecl() { return c1ParserRuleCallEDataTypeDecl; }
	}

	public class EDataTypeDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EDataTypeDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group c0Group = (Group)cAlternatives.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Assignment c000AssignmentEAnnotations = (Assignment)c00Group.eContents().get(0);
		private final RuleCall c0000ParserRuleCallEAnnotationDecl = (RuleCall)c000AssignmentEAnnotations.eContents().get(0);
		private final Assignment c001AssignmentSerializable = (Assignment)c00Group.eContents().get(1);
		private final Keyword c0010KeywordSerializable = (Keyword)c001AssignmentSerializable.eContents().get(0);
		private final Group c01Group = (Group)c0Group.eContents().get(1);
		private final Group c010Group = (Group)c01Group.eContents().get(0);
		private final Group c0100Group = (Group)c010Group.eContents().get(0);
		private final Group c01000Group = (Group)c0100Group.eContents().get(0);
		private final Keyword c010000KeywordDatatype = (Keyword)c01000Group.eContents().get(0);
		private final Assignment c010001AssignmentName = (Assignment)c01000Group.eContents().get(1);
		private final RuleCall c0100010LexerRuleCallID = (RuleCall)c010001AssignmentName.eContents().get(0);
		private final Keyword c01001KeywordColon = (Keyword)c0100Group.eContents().get(1);
		private final Assignment c0101AssignmentInstanceClassName = (Assignment)c010Group.eContents().get(1);
		private final RuleCall c01010ParserRuleCallSTRING_OR_QID = (RuleCall)c0101AssignmentInstanceClassName.eContents().get(0);
		private final Keyword c011KeywordSemicolon = (Keyword)c01Group.eContents().get(1);
		private final RuleCall c1ParserRuleCallEEnumDecl = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Assignment ele000AssignmentEAnnotations() { return c000AssignmentEAnnotations; }

		// not supported
		public RuleCall ele0000ParserRuleCallEAnnotationDecl() { return c0000ParserRuleCallEAnnotationDecl; }

		// not supported
		public Assignment ele001AssignmentSerializable() { return c001AssignmentSerializable; }

		// not supported
		public Keyword ele0010KeywordSerializable() { return c0010KeywordSerializable; }

		// not supported
		public Group ele01Group() { return c01Group; }

		// not supported
		public Group ele010Group() { return c010Group; }

		// not supported
		public Group ele0100Group() { return c0100Group; }

		// not supported
		public Group ele01000Group() { return c01000Group; }

		// not supported
		public Keyword ele010000KeywordDatatype() { return c010000KeywordDatatype; }

		// not supported
		public Assignment ele010001AssignmentName() { return c010001AssignmentName; }

		// not supported
		public RuleCall ele0100010LexerRuleCallID() { return c0100010LexerRuleCallID; }

		// not supported
		public Keyword ele01001KeywordColon() { return c01001KeywordColon; }

		// not supported
		public Assignment ele0101AssignmentInstanceClassName() { return c0101AssignmentInstanceClassName; }

		// not supported
		public RuleCall ele01010ParserRuleCallSTRING_OR_QID() { return c01010ParserRuleCallSTRING_OR_QID; }

		// not supported
		public Keyword ele011KeywordSemicolon() { return c011KeywordSemicolon; }

		// not supported
		public RuleCall ele1ParserRuleCallEEnumDecl() { return c1ParserRuleCallEEnumDecl; }
	}

	public class EAnnotationDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EAnnotationDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Group c000Group = (Group)c00Group.eContents().get(0);
		private final Group c0000Group = (Group)c000Group.eContents().get(0);
		private final Group c00000Group = (Group)c0000Group.eContents().get(0);
		private final Keyword c000000KeywordCommercialAt = (Keyword)c00000Group.eContents().get(0);
		private final Assignment c000001AssignmentSource = (Assignment)c00000Group.eContents().get(1);
		private final RuleCall c0000010LexerRuleCallSTRING = (RuleCall)c000001AssignmentSource.eContents().get(0);
		private final Assignment c00001AssignmentEModelElement = (Assignment)c0000Group.eContents().get(1);
		private final CrossReference c000010CrossReferenceEStringEModelElement = (CrossReference)c00001AssignmentEModelElement.eContents().get(0);
		private final Keyword c0001KeywordLeftParenthesis = (Keyword)c000Group.eContents().get(1);
		private final Assignment c001AssignmentContents = (Assignment)c00Group.eContents().get(1);
		private final RuleCall c0010ParserRuleCallMapEntrySuper = (RuleCall)c001AssignmentContents.eContents().get(0);
		private final Group c01Group = (Group)c0Group.eContents().get(1);
		private final Keyword c010KeywordComma = (Keyword)c01Group.eContents().get(0);
		private final Assignment c011AssignmentContents = (Assignment)c01Group.eContents().get(1);
		private final RuleCall c0110ParserRuleCallMapEntrySuper = (RuleCall)c011AssignmentContents.eContents().get(0);
		private final Keyword c1KeywordRightParenthesis = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Group ele000Group() { return c000Group; }

		// not supported
		public Group ele0000Group() { return c0000Group; }

		// not supported
		public Group ele00000Group() { return c00000Group; }

		// not supported
		public Keyword ele000000KeywordCommercialAt() { return c000000KeywordCommercialAt; }

		// not supported
		public Assignment ele000001AssignmentSource() { return c000001AssignmentSource; }

		// not supported
		public RuleCall ele0000010LexerRuleCallSTRING() { return c0000010LexerRuleCallSTRING; }

		// not supported
		public Assignment ele00001AssignmentEModelElement() { return c00001AssignmentEModelElement; }

		// not supported
		public CrossReference ele000010CrossReferenceEStringEModelElement() { return c000010CrossReferenceEStringEModelElement; }

		// not supported
		public Keyword ele0001KeywordLeftParenthesis() { return c0001KeywordLeftParenthesis; }

		// not supported
		public Assignment ele001AssignmentContents() { return c001AssignmentContents; }

		// not supported
		public RuleCall ele0010ParserRuleCallMapEntrySuper() { return c0010ParserRuleCallMapEntrySuper; }

		// not supported
		public Group ele01Group() { return c01Group; }

		// not supported
		public Keyword ele010KeywordComma() { return c010KeywordComma; }

		// not supported
		public Assignment ele011AssignmentContents() { return c011AssignmentContents; }

		// not supported
		public RuleCall ele0110ParserRuleCallMapEntrySuper() { return c0110ParserRuleCallMapEntrySuper; }

		// not supported
		public Keyword ele1KeywordRightParenthesis() { return c1KeywordRightParenthesis; }
	}

	public class EClassDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EClassDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Group c000Group = (Group)c00Group.eContents().get(0);
		private final Group c0000Group = (Group)c000Group.eContents().get(0);
		private final Group c00000Group = (Group)c0000Group.eContents().get(0);
		private final Group c000000Group = (Group)c00000Group.eContents().get(0);
		private final Group c0000000Group = (Group)c000000Group.eContents().get(0);
		private final Group c00000000Group = (Group)c0000000Group.eContents().get(0);
		private final Assignment c000000000AssignmentEAnnotations = (Assignment)c00000000Group.eContents().get(0);
		private final RuleCall c0000000000ParserRuleCallEAnnotationDecl = (RuleCall)c000000000AssignmentEAnnotations.eContents().get(0);
		private final Assignment c000000001AssignmentAbstract = (Assignment)c00000000Group.eContents().get(1);
		private final Keyword c0000000010KeywordAbstract = (Keyword)c000000001AssignmentAbstract.eContents().get(0);
		private final Alternatives c00000001Alternatives = (Alternatives)c0000000Group.eContents().get(1);
		private final Assignment c000000010AssignmentInterface = (Assignment)c00000001Alternatives.eContents().get(0);
		private final Keyword c0000000100KeywordInterface = (Keyword)c000000010AssignmentInterface.eContents().get(0);
		private final Keyword c000000011KeywordClass = (Keyword)c00000001Alternatives.eContents().get(1);
		private final Assignment c0000001AssignmentName = (Assignment)c000000Group.eContents().get(1);
		private final RuleCall c00000010LexerRuleCallID = (RuleCall)c0000001AssignmentName.eContents().get(0);
		private final Group c000001Group = (Group)c00000Group.eContents().get(1);
		private final Group c0000010Group = (Group)c000001Group.eContents().get(0);
		private final Group c00000100Group = (Group)c0000010Group.eContents().get(0);
		private final Keyword c000001000KeywordLessThanSign = (Keyword)c00000100Group.eContents().get(0);
		private final Assignment c000001001AssignmentETypeParameters = (Assignment)c00000100Group.eContents().get(1);
		private final RuleCall c0000010010ParserRuleCallETypeParameterDecl = (RuleCall)c000001001AssignmentETypeParameters.eContents().get(0);
		private final Group c00000101Group = (Group)c0000010Group.eContents().get(1);
		private final Keyword c000001010KeywordComma = (Keyword)c00000101Group.eContents().get(0);
		private final Assignment c000001011AssignmentETypeParameters = (Assignment)c00000101Group.eContents().get(1);
		private final RuleCall c0000010110ParserRuleCallETypeParameterDecl = (RuleCall)c000001011AssignmentETypeParameters.eContents().get(0);
		private final Keyword c0000011KeywordGreaterThanSign = (Keyword)c000001Group.eContents().get(1);
		private final Group c00001Group = (Group)c0000Group.eContents().get(1);
		private final Group c000010Group = (Group)c00001Group.eContents().get(0);
		private final Keyword c0000100KeywordExtends = (Keyword)c000010Group.eContents().get(0);
		private final Assignment c0000101AssignmentEGenericSuperTypes = (Assignment)c000010Group.eContents().get(1);
		private final RuleCall c00001010ParserRuleCallEGenericTypeReferenceDecl = (RuleCall)c0000101AssignmentEGenericSuperTypes.eContents().get(0);
		private final Group c000011Group = (Group)c00001Group.eContents().get(1);
		private final Keyword c0000110KeywordComma = (Keyword)c000011Group.eContents().get(0);
		private final Assignment c0000111AssignmentEGenericSuperTypes = (Assignment)c000011Group.eContents().get(1);
		private final RuleCall c00001110ParserRuleCallEGenericTypeReferenceDecl = (RuleCall)c0000111AssignmentEGenericSuperTypes.eContents().get(0);
		private final Group c0001Group = (Group)c000Group.eContents().get(1);
		private final Keyword c00010KeywordColon = (Keyword)c0001Group.eContents().get(0);
		private final Assignment c00011AssignmentInstanceClassName = (Assignment)c0001Group.eContents().get(1);
		private final RuleCall c000110ParserRuleCallSTRING_OR_QID = (RuleCall)c00011AssignmentInstanceClassName.eContents().get(0);
		private final Keyword c001KeywordLeftCurlyBracket = (Keyword)c00Group.eContents().get(1);
		private final Alternatives c01Alternatives = (Alternatives)c0Group.eContents().get(1);
		private final Assignment c010AssignmentEStructuralFeatures = (Assignment)c01Alternatives.eContents().get(0);
		private final RuleCall c0100ParserRuleCallEStructuralFeatureDecl = (RuleCall)c010AssignmentEStructuralFeatures.eContents().get(0);
		private final Assignment c011AssignmentEOperations = (Assignment)c01Alternatives.eContents().get(1);
		private final RuleCall c0110ParserRuleCallEOperationDecl = (RuleCall)c011AssignmentEOperations.eContents().get(0);
		private final Keyword c1KeywordRightCurlyBracket = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Group ele000Group() { return c000Group; }

		// not supported
		public Group ele0000Group() { return c0000Group; }

		// not supported
		public Group ele00000Group() { return c00000Group; }

		// not supported
		public Group ele000000Group() { return c000000Group; }

		// not supported
		public Group ele0000000Group() { return c0000000Group; }

		// not supported
		public Group ele00000000Group() { return c00000000Group; }

		// not supported
		public Assignment ele000000000AssignmentEAnnotations() { return c000000000AssignmentEAnnotations; }

		// not supported
		public RuleCall ele0000000000ParserRuleCallEAnnotationDecl() { return c0000000000ParserRuleCallEAnnotationDecl; }

		// not supported
		public Assignment ele000000001AssignmentAbstract() { return c000000001AssignmentAbstract; }

		// not supported
		public Keyword ele0000000010KeywordAbstract() { return c0000000010KeywordAbstract; }

		// not supported
		public Alternatives ele00000001Alternatives() { return c00000001Alternatives; }

		// not supported
		public Assignment ele000000010AssignmentInterface() { return c000000010AssignmentInterface; }

		// not supported
		public Keyword ele0000000100KeywordInterface() { return c0000000100KeywordInterface; }

		// not supported
		public Keyword ele000000011KeywordClass() { return c000000011KeywordClass; }

		// not supported
		public Assignment ele0000001AssignmentName() { return c0000001AssignmentName; }

		// not supported
		public RuleCall ele00000010LexerRuleCallID() { return c00000010LexerRuleCallID; }

		// not supported
		public Group ele000001Group() { return c000001Group; }

		// not supported
		public Group ele0000010Group() { return c0000010Group; }

		// not supported
		public Group ele00000100Group() { return c00000100Group; }

		// not supported
		public Keyword ele000001000KeywordLessThanSign() { return c000001000KeywordLessThanSign; }

		// not supported
		public Assignment ele000001001AssignmentETypeParameters() { return c000001001AssignmentETypeParameters; }

		// not supported
		public RuleCall ele0000010010ParserRuleCallETypeParameterDecl() { return c0000010010ParserRuleCallETypeParameterDecl; }

		// not supported
		public Group ele00000101Group() { return c00000101Group; }

		// not supported
		public Keyword ele000001010KeywordComma() { return c000001010KeywordComma; }

		// not supported
		public Assignment ele000001011AssignmentETypeParameters() { return c000001011AssignmentETypeParameters; }

		// not supported
		public RuleCall ele0000010110ParserRuleCallETypeParameterDecl() { return c0000010110ParserRuleCallETypeParameterDecl; }

		// not supported
		public Keyword ele0000011KeywordGreaterThanSign() { return c0000011KeywordGreaterThanSign; }

		// not supported
		public Group ele00001Group() { return c00001Group; }

		// not supported
		public Group ele000010Group() { return c000010Group; }

		// not supported
		public Keyword ele0000100KeywordExtends() { return c0000100KeywordExtends; }

		// not supported
		public Assignment ele0000101AssignmentEGenericSuperTypes() { return c0000101AssignmentEGenericSuperTypes; }

		// not supported
		public RuleCall ele00001010ParserRuleCallEGenericTypeReferenceDecl() { return c00001010ParserRuleCallEGenericTypeReferenceDecl; }

		// not supported
		public Group ele000011Group() { return c000011Group; }

		// not supported
		public Keyword ele0000110KeywordComma() { return c0000110KeywordComma; }

		// not supported
		public Assignment ele0000111AssignmentEGenericSuperTypes() { return c0000111AssignmentEGenericSuperTypes; }

		// not supported
		public RuleCall ele00001110ParserRuleCallEGenericTypeReferenceDecl() { return c00001110ParserRuleCallEGenericTypeReferenceDecl; }

		// not supported
		public Group ele0001Group() { return c0001Group; }

		// not supported
		public Keyword ele00010KeywordColon() { return c00010KeywordColon; }

		// not supported
		public Assignment ele00011AssignmentInstanceClassName() { return c00011AssignmentInstanceClassName; }

		// not supported
		public RuleCall ele000110ParserRuleCallSTRING_OR_QID() { return c000110ParserRuleCallSTRING_OR_QID; }

		// not supported
		public Keyword ele001KeywordLeftCurlyBracket() { return c001KeywordLeftCurlyBracket; }

		// not supported
		public Alternatives ele01Alternatives() { return c01Alternatives; }

		// not supported
		public Assignment ele010AssignmentEStructuralFeatures() { return c010AssignmentEStructuralFeatures; }

		// not supported
		public RuleCall ele0100ParserRuleCallEStructuralFeatureDecl() { return c0100ParserRuleCallEStructuralFeatureDecl; }

		// not supported
		public Assignment ele011AssignmentEOperations() { return c011AssignmentEOperations; }

		// not supported
		public RuleCall ele0110ParserRuleCallEOperationDecl() { return c0110ParserRuleCallEOperationDecl; }

		// not supported
		public Keyword ele1KeywordRightCurlyBracket() { return c1KeywordRightCurlyBracket; }
	}

	public class EStructuralFeatureDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EStructuralFeatureDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallEAttributeDecl = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallEReferenceDecl = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallEAttributeDecl() { return c0ParserRuleCallEAttributeDecl; }

		// not supported
		public RuleCall ele1ParserRuleCallEReferenceDecl() { return c1ParserRuleCallEReferenceDecl; }
	}

	public class EAttributeDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EAttributeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Group c000Group = (Group)c00Group.eContents().get(0);
		private final Group c0000Group = (Group)c000Group.eContents().get(0);
		private final Group c00000Group = (Group)c0000Group.eContents().get(0);
		private final Group c000000Group = (Group)c00000Group.eContents().get(0);
		private final Assignment c0000000AssignmentEAnnotations = (Assignment)c000000Group.eContents().get(0);
		private final RuleCall c00000000ParserRuleCallEAnnotationDecl = (RuleCall)c0000000AssignmentEAnnotations.eContents().get(0);
		private final Alternatives c0000001Alternatives = (Alternatives)c000000Group.eContents().get(1);
		private final Alternatives c00000010Alternatives = (Alternatives)c0000001Alternatives.eContents().get(0);
		private final Alternatives c000000100Alternatives = (Alternatives)c00000010Alternatives.eContents().get(0);
		private final Alternatives c0000001000Alternatives = (Alternatives)c000000100Alternatives.eContents().get(0);
		private final Alternatives c00000010000Alternatives = (Alternatives)c0000001000Alternatives.eContents().get(0);
		private final Alternatives c000000100000Alternatives = (Alternatives)c00000010000Alternatives.eContents().get(0);
		private final Alternatives c0000001000000Alternatives = (Alternatives)c000000100000Alternatives.eContents().get(0);
		private final Assignment c00000010000000AssignmentID = (Assignment)c0000001000000Alternatives.eContents().get(0);
		private final Keyword c000000100000000KeywordID = (Keyword)c00000010000000AssignmentID.eContents().get(0);
		private final Assignment c00000010000001AssignmentUnique = (Assignment)c0000001000000Alternatives.eContents().get(1);
		private final Keyword c000000100000010KeywordBag = (Keyword)c00000010000001AssignmentUnique.eContents().get(0);
		private final Assignment c0000001000001AssignmentOrdered = (Assignment)c000000100000Alternatives.eContents().get(1);
		private final Keyword c00000010000010KeywordRandom = (Keyword)c0000001000001AssignmentOrdered.eContents().get(0);
		private final Assignment c000000100001AssignmentChangeable = (Assignment)c00000010000Alternatives.eContents().get(1);
		private final Keyword c0000001000010KeywordReadonly = (Keyword)c000000100001AssignmentChangeable.eContents().get(0);
		private final Assignment c00000010001AssignmentVolatile = (Assignment)c0000001000Alternatives.eContents().get(1);
		private final Keyword c000000100010KeywordVolatile = (Keyword)c00000010001AssignmentVolatile.eContents().get(0);
		private final Assignment c0000001001AssignmentTransient = (Assignment)c000000100Alternatives.eContents().get(1);
		private final Keyword c00000010010KeywordTransient = (Keyword)c0000001001AssignmentTransient.eContents().get(0);
		private final Assignment c000000101AssignmentUnsettable = (Assignment)c00000010Alternatives.eContents().get(1);
		private final Keyword c0000001010KeywordUnsettable = (Keyword)c000000101AssignmentUnsettable.eContents().get(0);
		private final Assignment c00000011AssignmentDerived = (Assignment)c0000001Alternatives.eContents().get(1);
		private final Keyword c000000110KeywordDerived = (Keyword)c00000011AssignmentDerived.eContents().get(0);
		private final Keyword c000001KeywordAttr = (Keyword)c00000Group.eContents().get(1);
		private final Assignment c00001AssignmentEGenericType = (Assignment)c0000Group.eContents().get(1);
		private final RuleCall c000010ParserRuleCallEGenericTypeReferenceDecl = (RuleCall)c00001AssignmentEGenericType.eContents().get(0);
		private final Group c0001Group = (Group)c000Group.eContents().get(1);
		private final Group c00010Group = (Group)c0001Group.eContents().get(0);
		private final Group c000100Group = (Group)c00010Group.eContents().get(0);
		private final Keyword c0001000KeywordLeftSquareBracket = (Keyword)c000100Group.eContents().get(0);
		private final Assignment c0001001AssignmentLowerBound = (Assignment)c000100Group.eContents().get(1);
		private final RuleCall c00010010LexerRuleCallINT = (RuleCall)c0001001AssignmentLowerBound.eContents().get(0);
		private final Group c000101Group = (Group)c00010Group.eContents().get(1);
		private final Keyword c0001010KeywordFullStopFullStop = (Keyword)c000101Group.eContents().get(0);
		private final Assignment c0001011AssignmentUpperBound = (Assignment)c000101Group.eContents().get(1);
		private final RuleCall c00010110ParserRuleCallSINT = (RuleCall)c0001011AssignmentUpperBound.eContents().get(0);
		private final Keyword c00011KeywordRightSquareBracket = (Keyword)c0001Group.eContents().get(1);
		private final Assignment c001AssignmentName = (Assignment)c00Group.eContents().get(1);
		private final RuleCall c0010LexerRuleCallID = (RuleCall)c001AssignmentName.eContents().get(0);
		private final Group c01Group = (Group)c0Group.eContents().get(1);
		private final Keyword c010KeywordEqualsSign = (Keyword)c01Group.eContents().get(0);
		private final Assignment c011AssignmentDefaultValueLiteral = (Assignment)c01Group.eContents().get(1);
		private final RuleCall c0110LexerRuleCallSTRING = (RuleCall)c011AssignmentDefaultValueLiteral.eContents().get(0);
		private final Keyword c1KeywordSemicolon = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Group ele000Group() { return c000Group; }

		// not supported
		public Group ele0000Group() { return c0000Group; }

		// not supported
		public Group ele00000Group() { return c00000Group; }

		// not supported
		public Group ele000000Group() { return c000000Group; }

		// not supported
		public Assignment ele0000000AssignmentEAnnotations() { return c0000000AssignmentEAnnotations; }

		// not supported
		public RuleCall ele00000000ParserRuleCallEAnnotationDecl() { return c00000000ParserRuleCallEAnnotationDecl; }

		// not supported
		public Alternatives ele0000001Alternatives() { return c0000001Alternatives; }

		// not supported
		public Alternatives ele00000010Alternatives() { return c00000010Alternatives; }

		// not supported
		public Alternatives ele000000100Alternatives() { return c000000100Alternatives; }

		// not supported
		public Alternatives ele0000001000Alternatives() { return c0000001000Alternatives; }

		// not supported
		public Alternatives ele00000010000Alternatives() { return c00000010000Alternatives; }

		// not supported
		public Alternatives ele000000100000Alternatives() { return c000000100000Alternatives; }

		// not supported
		public Alternatives ele0000001000000Alternatives() { return c0000001000000Alternatives; }

		// not supported
		public Assignment ele00000010000000AssignmentID() { return c00000010000000AssignmentID; }

		// not supported
		public Keyword ele000000100000000KeywordID() { return c000000100000000KeywordID; }

		// not supported
		public Assignment ele00000010000001AssignmentUnique() { return c00000010000001AssignmentUnique; }

		// not supported
		public Keyword ele000000100000010KeywordBag() { return c000000100000010KeywordBag; }

		// not supported
		public Assignment ele0000001000001AssignmentOrdered() { return c0000001000001AssignmentOrdered; }

		// not supported
		public Keyword ele00000010000010KeywordRandom() { return c00000010000010KeywordRandom; }

		// not supported
		public Assignment ele000000100001AssignmentChangeable() { return c000000100001AssignmentChangeable; }

		// not supported
		public Keyword ele0000001000010KeywordReadonly() { return c0000001000010KeywordReadonly; }

		// not supported
		public Assignment ele00000010001AssignmentVolatile() { return c00000010001AssignmentVolatile; }

		// not supported
		public Keyword ele000000100010KeywordVolatile() { return c000000100010KeywordVolatile; }

		// not supported
		public Assignment ele0000001001AssignmentTransient() { return c0000001001AssignmentTransient; }

		// not supported
		public Keyword ele00000010010KeywordTransient() { return c00000010010KeywordTransient; }

		// not supported
		public Assignment ele000000101AssignmentUnsettable() { return c000000101AssignmentUnsettable; }

		// not supported
		public Keyword ele0000001010KeywordUnsettable() { return c0000001010KeywordUnsettable; }

		// not supported
		public Assignment ele00000011AssignmentDerived() { return c00000011AssignmentDerived; }

		// not supported
		public Keyword ele000000110KeywordDerived() { return c000000110KeywordDerived; }

		// not supported
		public Keyword ele000001KeywordAttr() { return c000001KeywordAttr; }

		// not supported
		public Assignment ele00001AssignmentEGenericType() { return c00001AssignmentEGenericType; }

		// not supported
		public RuleCall ele000010ParserRuleCallEGenericTypeReferenceDecl() { return c000010ParserRuleCallEGenericTypeReferenceDecl; }

		// not supported
		public Group ele0001Group() { return c0001Group; }

		// not supported
		public Group ele00010Group() { return c00010Group; }

		// not supported
		public Group ele000100Group() { return c000100Group; }

		// not supported
		public Keyword ele0001000KeywordLeftSquareBracket() { return c0001000KeywordLeftSquareBracket; }

		// not supported
		public Assignment ele0001001AssignmentLowerBound() { return c0001001AssignmentLowerBound; }

		// not supported
		public RuleCall ele00010010LexerRuleCallINT() { return c00010010LexerRuleCallINT; }

		// not supported
		public Group ele000101Group() { return c000101Group; }

		// not supported
		public Keyword ele0001010KeywordFullStopFullStop() { return c0001010KeywordFullStopFullStop; }

		// not supported
		public Assignment ele0001011AssignmentUpperBound() { return c0001011AssignmentUpperBound; }

		// not supported
		public RuleCall ele00010110ParserRuleCallSINT() { return c00010110ParserRuleCallSINT; }

		// not supported
		public Keyword ele00011KeywordRightSquareBracket() { return c00011KeywordRightSquareBracket; }

		// not supported
		public Assignment ele001AssignmentName() { return c001AssignmentName; }

		// not supported
		public RuleCall ele0010LexerRuleCallID() { return c0010LexerRuleCallID; }

		// not supported
		public Group ele01Group() { return c01Group; }

		// not supported
		public Keyword ele010KeywordEqualsSign() { return c010KeywordEqualsSign; }

		// not supported
		public Assignment ele011AssignmentDefaultValueLiteral() { return c011AssignmentDefaultValueLiteral; }

		// not supported
		public RuleCall ele0110LexerRuleCallSTRING() { return c0110LexerRuleCallSTRING; }

		// not supported
		public Keyword ele1KeywordSemicolon() { return c1KeywordSemicolon; }
	}

	public class EReferenceDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EReferenceDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Group c000Group = (Group)c00Group.eContents().get(0);
		private final Group c0000Group = (Group)c000Group.eContents().get(0);
		private final Group c00000Group = (Group)c0000Group.eContents().get(0);
		private final Group c000000Group = (Group)c00000Group.eContents().get(0);
		private final Assignment c0000000AssignmentEAnnotations = (Assignment)c000000Group.eContents().get(0);
		private final RuleCall c00000000ParserRuleCallEAnnotationDecl = (RuleCall)c0000000AssignmentEAnnotations.eContents().get(0);
		private final Alternatives c0000001Alternatives = (Alternatives)c000000Group.eContents().get(1);
		private final Alternatives c00000010Alternatives = (Alternatives)c0000001Alternatives.eContents().get(0);
		private final Alternatives c000000100Alternatives = (Alternatives)c00000010Alternatives.eContents().get(0);
		private final Alternatives c0000001000Alternatives = (Alternatives)c000000100Alternatives.eContents().get(0);
		private final Alternatives c00000010000Alternatives = (Alternatives)c0000001000Alternatives.eContents().get(0);
		private final Alternatives c000000100000Alternatives = (Alternatives)c00000010000Alternatives.eContents().get(0);
		private final Alternatives c0000001000000Alternatives = (Alternatives)c000000100000Alternatives.eContents().get(0);
		private final Assignment c00000010000000AssignmentResolveProxies = (Assignment)c0000001000000Alternatives.eContents().get(0);
		private final Keyword c000000100000000KeywordLocal = (Keyword)c00000010000000AssignmentResolveProxies.eContents().get(0);
		private final Assignment c00000010000001AssignmentUnique = (Assignment)c0000001000000Alternatives.eContents().get(1);
		private final Keyword c000000100000010KeywordBag = (Keyword)c00000010000001AssignmentUnique.eContents().get(0);
		private final Assignment c0000001000001AssignmentOrdered = (Assignment)c000000100000Alternatives.eContents().get(1);
		private final Keyword c00000010000010KeywordRandom = (Keyword)c0000001000001AssignmentOrdered.eContents().get(0);
		private final Assignment c000000100001AssignmentChangeable = (Assignment)c00000010000Alternatives.eContents().get(1);
		private final Keyword c0000001000010KeywordReadonly = (Keyword)c000000100001AssignmentChangeable.eContents().get(0);
		private final Assignment c00000010001AssignmentVolatile = (Assignment)c0000001000Alternatives.eContents().get(1);
		private final Keyword c000000100010KeywordVolatile = (Keyword)c00000010001AssignmentVolatile.eContents().get(0);
		private final Assignment c0000001001AssignmentTransient = (Assignment)c000000100Alternatives.eContents().get(1);
		private final Keyword c00000010010KeywordTransient = (Keyword)c0000001001AssignmentTransient.eContents().get(0);
		private final Assignment c000000101AssignmentUnsettable = (Assignment)c00000010Alternatives.eContents().get(1);
		private final Keyword c0000001010KeywordUnsettable = (Keyword)c000000101AssignmentUnsettable.eContents().get(0);
		private final Assignment c00000011AssignmentDerived = (Assignment)c0000001Alternatives.eContents().get(1);
		private final Keyword c000000110KeywordDerived = (Keyword)c00000011AssignmentDerived.eContents().get(0);
		private final Alternatives c000001Alternatives = (Alternatives)c00000Group.eContents().get(1);
		private final Assignment c0000010AssignmentContainment = (Assignment)c000001Alternatives.eContents().get(0);
		private final Keyword c00000100KeywordVal = (Keyword)c0000010AssignmentContainment.eContents().get(0);
		private final Keyword c0000011KeywordRef = (Keyword)c000001Alternatives.eContents().get(1);
		private final Assignment c00001AssignmentEGenericType = (Assignment)c0000Group.eContents().get(1);
		private final RuleCall c000010ParserRuleCallEGenericTypeReferenceDecl = (RuleCall)c00001AssignmentEGenericType.eContents().get(0);
		private final Group c0001Group = (Group)c000Group.eContents().get(1);
		private final Group c00010Group = (Group)c0001Group.eContents().get(0);
		private final Group c000100Group = (Group)c00010Group.eContents().get(0);
		private final Keyword c0001000KeywordLeftSquareBracket = (Keyword)c000100Group.eContents().get(0);
		private final Assignment c0001001AssignmentLowerBound = (Assignment)c000100Group.eContents().get(1);
		private final RuleCall c00010010LexerRuleCallINT = (RuleCall)c0001001AssignmentLowerBound.eContents().get(0);
		private final Group c000101Group = (Group)c00010Group.eContents().get(1);
		private final Keyword c0001010KeywordFullStopFullStop = (Keyword)c000101Group.eContents().get(0);
		private final Assignment c0001011AssignmentUpperBound = (Assignment)c000101Group.eContents().get(1);
		private final RuleCall c00010110ParserRuleCallSINT = (RuleCall)c0001011AssignmentUpperBound.eContents().get(0);
		private final Keyword c00011KeywordRightSquareBracket = (Keyword)c0001Group.eContents().get(1);
		private final Group c001Group = (Group)c00Group.eContents().get(1);
		private final Keyword c0010KeywordNumberSign = (Keyword)c001Group.eContents().get(0);
		private final Assignment c0011AssignmentEOpposite = (Assignment)c001Group.eContents().get(1);
		private final CrossReference c00110CrossReferenceEStringEReference = (CrossReference)c0011AssignmentEOpposite.eContents().get(0);
		private final Assignment c01AssignmentName = (Assignment)c0Group.eContents().get(1);
		private final RuleCall c010LexerRuleCallID = (RuleCall)c01AssignmentName.eContents().get(0);
		private final Keyword c1KeywordSemicolon = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Group ele000Group() { return c000Group; }

		// not supported
		public Group ele0000Group() { return c0000Group; }

		// not supported
		public Group ele00000Group() { return c00000Group; }

		// not supported
		public Group ele000000Group() { return c000000Group; }

		// not supported
		public Assignment ele0000000AssignmentEAnnotations() { return c0000000AssignmentEAnnotations; }

		// not supported
		public RuleCall ele00000000ParserRuleCallEAnnotationDecl() { return c00000000ParserRuleCallEAnnotationDecl; }

		// not supported
		public Alternatives ele0000001Alternatives() { return c0000001Alternatives; }

		// not supported
		public Alternatives ele00000010Alternatives() { return c00000010Alternatives; }

		// not supported
		public Alternatives ele000000100Alternatives() { return c000000100Alternatives; }

		// not supported
		public Alternatives ele0000001000Alternatives() { return c0000001000Alternatives; }

		// not supported
		public Alternatives ele00000010000Alternatives() { return c00000010000Alternatives; }

		// not supported
		public Alternatives ele000000100000Alternatives() { return c000000100000Alternatives; }

		// not supported
		public Alternatives ele0000001000000Alternatives() { return c0000001000000Alternatives; }

		// not supported
		public Assignment ele00000010000000AssignmentResolveProxies() { return c00000010000000AssignmentResolveProxies; }

		// not supported
		public Keyword ele000000100000000KeywordLocal() { return c000000100000000KeywordLocal; }

		// not supported
		public Assignment ele00000010000001AssignmentUnique() { return c00000010000001AssignmentUnique; }

		// not supported
		public Keyword ele000000100000010KeywordBag() { return c000000100000010KeywordBag; }

		// not supported
		public Assignment ele0000001000001AssignmentOrdered() { return c0000001000001AssignmentOrdered; }

		// not supported
		public Keyword ele00000010000010KeywordRandom() { return c00000010000010KeywordRandom; }

		// not supported
		public Assignment ele000000100001AssignmentChangeable() { return c000000100001AssignmentChangeable; }

		// not supported
		public Keyword ele0000001000010KeywordReadonly() { return c0000001000010KeywordReadonly; }

		// not supported
		public Assignment ele00000010001AssignmentVolatile() { return c00000010001AssignmentVolatile; }

		// not supported
		public Keyword ele000000100010KeywordVolatile() { return c000000100010KeywordVolatile; }

		// not supported
		public Assignment ele0000001001AssignmentTransient() { return c0000001001AssignmentTransient; }

		// not supported
		public Keyword ele00000010010KeywordTransient() { return c00000010010KeywordTransient; }

		// not supported
		public Assignment ele000000101AssignmentUnsettable() { return c000000101AssignmentUnsettable; }

		// not supported
		public Keyword ele0000001010KeywordUnsettable() { return c0000001010KeywordUnsettable; }

		// not supported
		public Assignment ele00000011AssignmentDerived() { return c00000011AssignmentDerived; }

		// not supported
		public Keyword ele000000110KeywordDerived() { return c000000110KeywordDerived; }

		// not supported
		public Alternatives ele000001Alternatives() { return c000001Alternatives; }

		// not supported
		public Assignment ele0000010AssignmentContainment() { return c0000010AssignmentContainment; }

		// not supported
		public Keyword ele00000100KeywordVal() { return c00000100KeywordVal; }

		// not supported
		public Keyword ele0000011KeywordRef() { return c0000011KeywordRef; }

		// not supported
		public Assignment ele00001AssignmentEGenericType() { return c00001AssignmentEGenericType; }

		// not supported
		public RuleCall ele000010ParserRuleCallEGenericTypeReferenceDecl() { return c000010ParserRuleCallEGenericTypeReferenceDecl; }

		// not supported
		public Group ele0001Group() { return c0001Group; }

		// not supported
		public Group ele00010Group() { return c00010Group; }

		// not supported
		public Group ele000100Group() { return c000100Group; }

		// not supported
		public Keyword ele0001000KeywordLeftSquareBracket() { return c0001000KeywordLeftSquareBracket; }

		// not supported
		public Assignment ele0001001AssignmentLowerBound() { return c0001001AssignmentLowerBound; }

		// not supported
		public RuleCall ele00010010LexerRuleCallINT() { return c00010010LexerRuleCallINT; }

		// not supported
		public Group ele000101Group() { return c000101Group; }

		// not supported
		public Keyword ele0001010KeywordFullStopFullStop() { return c0001010KeywordFullStopFullStop; }

		// not supported
		public Assignment ele0001011AssignmentUpperBound() { return c0001011AssignmentUpperBound; }

		// not supported
		public RuleCall ele00010110ParserRuleCallSINT() { return c00010110ParserRuleCallSINT; }

		// not supported
		public Keyword ele00011KeywordRightSquareBracket() { return c00011KeywordRightSquareBracket; }

		// not supported
		public Group ele001Group() { return c001Group; }

		// not supported
		public Keyword ele0010KeywordNumberSign() { return c0010KeywordNumberSign; }

		// not supported
		public Assignment ele0011AssignmentEOpposite() { return c0011AssignmentEOpposite; }

		// not supported
		public CrossReference ele00110CrossReferenceEStringEReference() { return c00110CrossReferenceEStringEReference; }

		// not supported
		public Assignment ele01AssignmentName() { return c01AssignmentName; }

		// not supported
		public RuleCall ele010LexerRuleCallID() { return c010LexerRuleCallID; }

		// not supported
		public Keyword ele1KeywordSemicolon() { return c1KeywordSemicolon; }
	}

	public class EEnumDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EEnumDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Group c000Group = (Group)c00Group.eContents().get(0);
		private final Group c0000Group = (Group)c000Group.eContents().get(0);
		private final Assignment c00000AssignmentEAnnotations = (Assignment)c0000Group.eContents().get(0);
		private final RuleCall c000000ParserRuleCallEAnnotationDecl = (RuleCall)c00000AssignmentEAnnotations.eContents().get(0);
		private final Keyword c00001KeywordEnum = (Keyword)c0000Group.eContents().get(1);
		private final Assignment c0001AssignmentName = (Assignment)c000Group.eContents().get(1);
		private final RuleCall c00010LexerRuleCallID = (RuleCall)c0001AssignmentName.eContents().get(0);
		private final Keyword c001KeywordLeftCurlyBracket = (Keyword)c00Group.eContents().get(1);
		private final Assignment c01AssignmentELiterals = (Assignment)c0Group.eContents().get(1);
		private final RuleCall c010ParserRuleCallEEnumLiteralDecl = (RuleCall)c01AssignmentELiterals.eContents().get(0);
		private final Keyword c1KeywordRightCurlyBracket = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Group ele000Group() { return c000Group; }

		// not supported
		public Group ele0000Group() { return c0000Group; }

		// not supported
		public Assignment ele00000AssignmentEAnnotations() { return c00000AssignmentEAnnotations; }

		// not supported
		public RuleCall ele000000ParserRuleCallEAnnotationDecl() { return c000000ParserRuleCallEAnnotationDecl; }

		// not supported
		public Keyword ele00001KeywordEnum() { return c00001KeywordEnum; }

		// not supported
		public Assignment ele0001AssignmentName() { return c0001AssignmentName; }

		// not supported
		public RuleCall ele00010LexerRuleCallID() { return c00010LexerRuleCallID; }

		// not supported
		public Keyword ele001KeywordLeftCurlyBracket() { return c001KeywordLeftCurlyBracket; }

		// not supported
		public Assignment ele01AssignmentELiterals() { return c01AssignmentELiterals; }

		// not supported
		public RuleCall ele010ParserRuleCallEEnumLiteralDecl() { return c010ParserRuleCallEEnumLiteralDecl; }

		// not supported
		public Keyword ele1KeywordRightCurlyBracket() { return c1KeywordRightCurlyBracket; }
	}

	public class EEnumLiteralDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EEnumLiteralDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Group c000Group = (Group)c00Group.eContents().get(0);
		private final Assignment c0000AssignmentEAnnotations = (Assignment)c000Group.eContents().get(0);
		private final RuleCall c00000ParserRuleCallEAnnotationDecl = (RuleCall)c0000AssignmentEAnnotations.eContents().get(0);
		private final Assignment c0001AssignmentName = (Assignment)c000Group.eContents().get(1);
		private final RuleCall c00010LexerRuleCallID = (RuleCall)c0001AssignmentName.eContents().get(0);
		private final Group c001Group = (Group)c00Group.eContents().get(1);
		private final Keyword c0010KeywordEqualsSign = (Keyword)c001Group.eContents().get(0);
		private final Assignment c0011AssignmentValue = (Assignment)c001Group.eContents().get(1);
		private final RuleCall c00110LexerRuleCallINT = (RuleCall)c0011AssignmentValue.eContents().get(0);
		private final Assignment c01AssignmentLiteral = (Assignment)c0Group.eContents().get(1);
		private final RuleCall c010LexerRuleCallSTRING = (RuleCall)c01AssignmentLiteral.eContents().get(0);
		private final Keyword c1KeywordSemicolon = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Group ele000Group() { return c000Group; }

		// not supported
		public Assignment ele0000AssignmentEAnnotations() { return c0000AssignmentEAnnotations; }

		// not supported
		public RuleCall ele00000ParserRuleCallEAnnotationDecl() { return c00000ParserRuleCallEAnnotationDecl; }

		// not supported
		public Assignment ele0001AssignmentName() { return c0001AssignmentName; }

		// not supported
		public RuleCall ele00010LexerRuleCallID() { return c00010LexerRuleCallID; }

		// not supported
		public Group ele001Group() { return c001Group; }

		// not supported
		public Keyword ele0010KeywordEqualsSign() { return c0010KeywordEqualsSign; }

		// not supported
		public Assignment ele0011AssignmentValue() { return c0011AssignmentValue; }

		// not supported
		public RuleCall ele00110LexerRuleCallINT() { return c00110LexerRuleCallINT; }

		// not supported
		public Assignment ele01AssignmentLiteral() { return c01AssignmentLiteral; }

		// not supported
		public RuleCall ele010LexerRuleCallSTRING() { return c010LexerRuleCallSTRING; }

		// not supported
		public Keyword ele1KeywordSemicolon() { return c1KeywordSemicolon; }
	}

	public class ETypeParameterDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETypeParameterDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment c0AssignmentName = (Assignment)cGroup.eContents().get(0);
		private final RuleCall c00LexerRuleCallID = (RuleCall)c0AssignmentName.eContents().get(0);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Keyword c10KeywordExtends = (Keyword)c1Group.eContents().get(0);
		private final Assignment c11AssignmentEBounds = (Assignment)c1Group.eContents().get(1);
		private final RuleCall c110ParserRuleCallEGenericTypeDecl = (RuleCall)c11AssignmentEBounds.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Assignment ele0AssignmentName() { return c0AssignmentName; }

		// not supported
		public RuleCall ele00LexerRuleCallID() { return c00LexerRuleCallID; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Keyword ele10KeywordExtends() { return c10KeywordExtends; }

		// not supported
		public Assignment ele11AssignmentEBounds() { return c11AssignmentEBounds; }

		// not supported
		public RuleCall ele110ParserRuleCallEGenericTypeDecl() { return c110ParserRuleCallEGenericTypeDecl; }
	}

	public class EGenericTypeReferenceDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EGenericTypeReferenceDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group c0Group = (Group)cAlternatives.eContents().get(0);
		private final Assignment c00AssignmentEClassifier = (Assignment)c0Group.eContents().get(0);
		private final CrossReference c000CrossReferenceEStringEClassifier = (CrossReference)c00AssignmentEClassifier.eContents().get(0);
		private final Group c01Group = (Group)c0Group.eContents().get(1);
		private final Group c010Group = (Group)c01Group.eContents().get(0);
		private final Group c0100Group = (Group)c010Group.eContents().get(0);
		private final Keyword c01000KeywordLessThanSign = (Keyword)c0100Group.eContents().get(0);
		private final Assignment c01001AssignmentETypeArguments = (Assignment)c0100Group.eContents().get(1);
		private final RuleCall c010010ParserRuleCallEGenericTypeDecl = (RuleCall)c01001AssignmentETypeArguments.eContents().get(0);
		private final Group c0101Group = (Group)c010Group.eContents().get(1);
		private final Keyword c01010KeywordComma = (Keyword)c0101Group.eContents().get(0);
		private final Assignment c01011AssignmentETypeArguments = (Assignment)c0101Group.eContents().get(1);
		private final RuleCall c010110ParserRuleCallEGenericTypeDecl = (RuleCall)c01011AssignmentETypeArguments.eContents().get(0);
		private final Keyword c011KeywordGreaterThanSign = (Keyword)c01Group.eContents().get(1);
		private final Group c1Group = (Group)cAlternatives.eContents().get(1);
		private final Keyword c10KeywordNumberSign = (Keyword)c1Group.eContents().get(0);
		private final Assignment c11AssignmentETypeParameter = (Assignment)c1Group.eContents().get(1);
		private final CrossReference c110CrossReferenceEStringETypeParameter = (CrossReference)c11AssignmentETypeParameter.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Assignment ele00AssignmentEClassifier() { return c00AssignmentEClassifier; }

		// not supported
		public CrossReference ele000CrossReferenceEStringEClassifier() { return c000CrossReferenceEStringEClassifier; }

		// not supported
		public Group ele01Group() { return c01Group; }

		// not supported
		public Group ele010Group() { return c010Group; }

		// not supported
		public Group ele0100Group() { return c0100Group; }

		// not supported
		public Keyword ele01000KeywordLessThanSign() { return c01000KeywordLessThanSign; }

		// not supported
		public Assignment ele01001AssignmentETypeArguments() { return c01001AssignmentETypeArguments; }

		// not supported
		public RuleCall ele010010ParserRuleCallEGenericTypeDecl() { return c010010ParserRuleCallEGenericTypeDecl; }

		// not supported
		public Group ele0101Group() { return c0101Group; }

		// not supported
		public Keyword ele01010KeywordComma() { return c01010KeywordComma; }

		// not supported
		public Assignment ele01011AssignmentETypeArguments() { return c01011AssignmentETypeArguments; }

		// not supported
		public RuleCall ele010110ParserRuleCallEGenericTypeDecl() { return c010110ParserRuleCallEGenericTypeDecl; }

		// not supported
		public Keyword ele011KeywordGreaterThanSign() { return c011KeywordGreaterThanSign; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Keyword ele10KeywordNumberSign() { return c10KeywordNumberSign; }

		// not supported
		public Assignment ele11AssignmentETypeParameter() { return c11AssignmentETypeParameter; }

		// not supported
		public CrossReference ele110CrossReferenceEStringETypeParameter() { return c110CrossReferenceEStringETypeParameter; }
	}

	public class EGenericTypeDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EGenericTypeDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives c0Alternatives = (Alternatives)cAlternatives.eContents().get(0);
		private final Group c00Group = (Group)c0Alternatives.eContents().get(0);
		private final Assignment c000AssignmentEClassifier = (Assignment)c00Group.eContents().get(0);
		private final CrossReference c0000CrossReferenceEStringEClassifier = (CrossReference)c000AssignmentEClassifier.eContents().get(0);
		private final Group c001Group = (Group)c00Group.eContents().get(1);
		private final Group c0010Group = (Group)c001Group.eContents().get(0);
		private final Group c00100Group = (Group)c0010Group.eContents().get(0);
		private final Keyword c001000KeywordLessThanSign = (Keyword)c00100Group.eContents().get(0);
		private final Assignment c001001AssignmentETypeArguments = (Assignment)c00100Group.eContents().get(1);
		private final RuleCall c0010010ParserRuleCallEGenericTypeDecl = (RuleCall)c001001AssignmentETypeArguments.eContents().get(0);
		private final Group c00101Group = (Group)c0010Group.eContents().get(1);
		private final Keyword c001010KeywordComma = (Keyword)c00101Group.eContents().get(0);
		private final Assignment c001011AssignmentETypeArguments = (Assignment)c00101Group.eContents().get(1);
		private final RuleCall c0010110ParserRuleCallEGenericTypeDecl = (RuleCall)c001011AssignmentETypeArguments.eContents().get(0);
		private final Keyword c0011KeywordGreaterThanSign = (Keyword)c001Group.eContents().get(1);
		private final Group c01Group = (Group)c0Alternatives.eContents().get(1);
		private final Keyword c010KeywordNumberSign = (Keyword)c01Group.eContents().get(0);
		private final Assignment c011AssignmentETypeParameter = (Assignment)c01Group.eContents().get(1);
		private final CrossReference c0110CrossReferenceEStringETypeParameter = (CrossReference)c011AssignmentETypeParameter.eContents().get(0);
		private final Group c1Group = (Group)cAlternatives.eContents().get(1);
		private final Keyword c10KeywordQuestionMark = (Keyword)c1Group.eContents().get(0);
		private final Alternatives c11Alternatives = (Alternatives)c1Group.eContents().get(1);
		private final Group c110Group = (Group)c11Alternatives.eContents().get(0);
		private final Keyword c1100KeywordExtends = (Keyword)c110Group.eContents().get(0);
		private final Assignment c1101AssignmentEUpperBound = (Assignment)c110Group.eContents().get(1);
		private final RuleCall c11010ParserRuleCallEGenericTypeDecl = (RuleCall)c1101AssignmentEUpperBound.eContents().get(0);
		private final Group c111Group = (Group)c11Alternatives.eContents().get(1);
		private final Keyword c1110KeywordSuper = (Keyword)c111Group.eContents().get(0);
		private final Assignment c1111AssignmentELowerBound = (Assignment)c111Group.eContents().get(1);
		private final RuleCall c11110ParserRuleCallEGenericTypeDecl = (RuleCall)c1111AssignmentELowerBound.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public Alternatives ele0Alternatives() { return c0Alternatives; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Assignment ele000AssignmentEClassifier() { return c000AssignmentEClassifier; }

		// not supported
		public CrossReference ele0000CrossReferenceEStringEClassifier() { return c0000CrossReferenceEStringEClassifier; }

		// not supported
		public Group ele001Group() { return c001Group; }

		// not supported
		public Group ele0010Group() { return c0010Group; }

		// not supported
		public Group ele00100Group() { return c00100Group; }

		// not supported
		public Keyword ele001000KeywordLessThanSign() { return c001000KeywordLessThanSign; }

		// not supported
		public Assignment ele001001AssignmentETypeArguments() { return c001001AssignmentETypeArguments; }

		// not supported
		public RuleCall ele0010010ParserRuleCallEGenericTypeDecl() { return c0010010ParserRuleCallEGenericTypeDecl; }

		// not supported
		public Group ele00101Group() { return c00101Group; }

		// not supported
		public Keyword ele001010KeywordComma() { return c001010KeywordComma; }

		// not supported
		public Assignment ele001011AssignmentETypeArguments() { return c001011AssignmentETypeArguments; }

		// not supported
		public RuleCall ele0010110ParserRuleCallEGenericTypeDecl() { return c0010110ParserRuleCallEGenericTypeDecl; }

		// not supported
		public Keyword ele0011KeywordGreaterThanSign() { return c0011KeywordGreaterThanSign; }

		// not supported
		public Group ele01Group() { return c01Group; }

		// not supported
		public Keyword ele010KeywordNumberSign() { return c010KeywordNumberSign; }

		// not supported
		public Assignment ele011AssignmentETypeParameter() { return c011AssignmentETypeParameter; }

		// not supported
		public CrossReference ele0110CrossReferenceEStringETypeParameter() { return c0110CrossReferenceEStringETypeParameter; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Keyword ele10KeywordQuestionMark() { return c10KeywordQuestionMark; }

		// not supported
		public Alternatives ele11Alternatives() { return c11Alternatives; }

		// not supported
		public Group ele110Group() { return c110Group; }

		// not supported
		public Keyword ele1100KeywordExtends() { return c1100KeywordExtends; }

		// not supported
		public Assignment ele1101AssignmentEUpperBound() { return c1101AssignmentEUpperBound; }

		// not supported
		public RuleCall ele11010ParserRuleCallEGenericTypeDecl() { return c11010ParserRuleCallEGenericTypeDecl; }

		// not supported
		public Group ele111Group() { return c111Group; }

		// not supported
		public Keyword ele1110KeywordSuper() { return c1110KeywordSuper; }

		// not supported
		public Assignment ele1111AssignmentELowerBound() { return c1111AssignmentELowerBound; }

		// not supported
		public RuleCall ele11110ParserRuleCallEGenericTypeDecl() { return c11110ParserRuleCallEGenericTypeDecl; }
	}

	public class EOperationDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EOperationDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Group c000Group = (Group)c00Group.eContents().get(0);
		private final Group c0000Group = (Group)c000Group.eContents().get(0);
		private final Group c00000Group = (Group)c0000Group.eContents().get(0);
		private final Group c000000Group = (Group)c00000Group.eContents().get(0);
		private final Group c0000000Group = (Group)c000000Group.eContents().get(0);
		private final Group c00000000Group = (Group)c0000000Group.eContents().get(0);
		private final Group c000000000Group = (Group)c00000000Group.eContents().get(0);
		private final Assignment c0000000000AssignmentEAnnotations = (Assignment)c000000000Group.eContents().get(0);
		private final RuleCall c00000000000ParserRuleCallEAnnotationDecl = (RuleCall)c0000000000AssignmentEAnnotations.eContents().get(0);
		private final Alternatives c0000000001Alternatives = (Alternatives)c000000000Group.eContents().get(1);
		private final Assignment c00000000010AssignmentUnique = (Assignment)c0000000001Alternatives.eContents().get(0);
		private final Keyword c000000000100KeywordBag = (Keyword)c00000000010AssignmentUnique.eContents().get(0);
		private final Assignment c00000000011AssignmentOrdered = (Assignment)c0000000001Alternatives.eContents().get(1);
		private final Keyword c000000000110KeywordRandom = (Keyword)c00000000011AssignmentOrdered.eContents().get(0);
		private final Keyword c000000001KeywordOp = (Keyword)c00000000Group.eContents().get(1);
		private final Alternatives c00000001Alternatives = (Alternatives)c0000000Group.eContents().get(1);
		private final Assignment c000000010AssignmentEGenericType = (Assignment)c00000001Alternatives.eContents().get(0);
		private final RuleCall c0000000100ParserRuleCallEGenericTypeReferenceDecl = (RuleCall)c000000010AssignmentEGenericType.eContents().get(0);
		private final Keyword c000000011KeywordVoid = (Keyword)c00000001Alternatives.eContents().get(1);
		private final Assignment c0000001AssignmentName = (Assignment)c000000Group.eContents().get(1);
		private final RuleCall c00000010LexerRuleCallID = (RuleCall)c0000001AssignmentName.eContents().get(0);
		private final Group c000001Group = (Group)c00000Group.eContents().get(1);
		private final Group c0000010Group = (Group)c000001Group.eContents().get(0);
		private final Group c00000100Group = (Group)c0000010Group.eContents().get(0);
		private final Keyword c000001000KeywordLessThanSign = (Keyword)c00000100Group.eContents().get(0);
		private final Assignment c000001001AssignmentETypeParameters = (Assignment)c00000100Group.eContents().get(1);
		private final RuleCall c0000010010ParserRuleCallETypeParameterDecl = (RuleCall)c000001001AssignmentETypeParameters.eContents().get(0);
		private final Group c00000101Group = (Group)c0000010Group.eContents().get(1);
		private final Keyword c000001010KeywordComma = (Keyword)c00000101Group.eContents().get(0);
		private final Assignment c000001011AssignmentETypeParameters = (Assignment)c00000101Group.eContents().get(1);
		private final RuleCall c0000010110ParserRuleCallETypeParameterDecl = (RuleCall)c000001011AssignmentETypeParameters.eContents().get(0);
		private final Keyword c0000011KeywordGreaterThanSign = (Keyword)c000001Group.eContents().get(1);
		private final Keyword c00001KeywordLeftParenthesis = (Keyword)c0000Group.eContents().get(1);
		private final Group c0001Group = (Group)c000Group.eContents().get(1);
		private final Assignment c00010AssignmentEParameters = (Assignment)c0001Group.eContents().get(0);
		private final RuleCall c000100ParserRuleCallEParameterDecl = (RuleCall)c00010AssignmentEParameters.eContents().get(0);
		private final Group c00011Group = (Group)c0001Group.eContents().get(1);
		private final Keyword c000110KeywordComma = (Keyword)c00011Group.eContents().get(0);
		private final Assignment c000111AssignmentEParameters = (Assignment)c00011Group.eContents().get(1);
		private final RuleCall c0001110ParserRuleCallEParameterDecl = (RuleCall)c000111AssignmentEParameters.eContents().get(0);
		private final Keyword c001KeywordRightParenthesis = (Keyword)c00Group.eContents().get(1);
		private final Group c01Group = (Group)c0Group.eContents().get(1);
		private final Group c010Group = (Group)c01Group.eContents().get(0);
		private final Keyword c0100KeywordThrows = (Keyword)c010Group.eContents().get(0);
		private final Assignment c0101AssignmentEGenericExceptions = (Assignment)c010Group.eContents().get(1);
		private final RuleCall c01010ParserRuleCallEGenericTypeReferenceDecl = (RuleCall)c0101AssignmentEGenericExceptions.eContents().get(0);
		private final Group c011Group = (Group)c01Group.eContents().get(1);
		private final Keyword c0110KeywordComma = (Keyword)c011Group.eContents().get(0);
		private final Assignment c0111AssignmentEGenericExceptions = (Assignment)c011Group.eContents().get(1);
		private final RuleCall c01110ParserRuleCallEGenericTypeReferenceDecl = (RuleCall)c0111AssignmentEGenericExceptions.eContents().get(0);
		private final Keyword c1KeywordSemicolon = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Group ele000Group() { return c000Group; }

		// not supported
		public Group ele0000Group() { return c0000Group; }

		// not supported
		public Group ele00000Group() { return c00000Group; }

		// not supported
		public Group ele000000Group() { return c000000Group; }

		// not supported
		public Group ele0000000Group() { return c0000000Group; }

		// not supported
		public Group ele00000000Group() { return c00000000Group; }

		// not supported
		public Group ele000000000Group() { return c000000000Group; }

		// not supported
		public Assignment ele0000000000AssignmentEAnnotations() { return c0000000000AssignmentEAnnotations; }

		// not supported
		public RuleCall ele00000000000ParserRuleCallEAnnotationDecl() { return c00000000000ParserRuleCallEAnnotationDecl; }

		// not supported
		public Alternatives ele0000000001Alternatives() { return c0000000001Alternatives; }

		// not supported
		public Assignment ele00000000010AssignmentUnique() { return c00000000010AssignmentUnique; }

		// not supported
		public Keyword ele000000000100KeywordBag() { return c000000000100KeywordBag; }

		// not supported
		public Assignment ele00000000011AssignmentOrdered() { return c00000000011AssignmentOrdered; }

		// not supported
		public Keyword ele000000000110KeywordRandom() { return c000000000110KeywordRandom; }

		// not supported
		public Keyword ele000000001KeywordOp() { return c000000001KeywordOp; }

		// not supported
		public Alternatives ele00000001Alternatives() { return c00000001Alternatives; }

		// not supported
		public Assignment ele000000010AssignmentEGenericType() { return c000000010AssignmentEGenericType; }

		// not supported
		public RuleCall ele0000000100ParserRuleCallEGenericTypeReferenceDecl() { return c0000000100ParserRuleCallEGenericTypeReferenceDecl; }

		// not supported
		public Keyword ele000000011KeywordVoid() { return c000000011KeywordVoid; }

		// not supported
		public Assignment ele0000001AssignmentName() { return c0000001AssignmentName; }

		// not supported
		public RuleCall ele00000010LexerRuleCallID() { return c00000010LexerRuleCallID; }

		// not supported
		public Group ele000001Group() { return c000001Group; }

		// not supported
		public Group ele0000010Group() { return c0000010Group; }

		// not supported
		public Group ele00000100Group() { return c00000100Group; }

		// not supported
		public Keyword ele000001000KeywordLessThanSign() { return c000001000KeywordLessThanSign; }

		// not supported
		public Assignment ele000001001AssignmentETypeParameters() { return c000001001AssignmentETypeParameters; }

		// not supported
		public RuleCall ele0000010010ParserRuleCallETypeParameterDecl() { return c0000010010ParserRuleCallETypeParameterDecl; }

		// not supported
		public Group ele00000101Group() { return c00000101Group; }

		// not supported
		public Keyword ele000001010KeywordComma() { return c000001010KeywordComma; }

		// not supported
		public Assignment ele000001011AssignmentETypeParameters() { return c000001011AssignmentETypeParameters; }

		// not supported
		public RuleCall ele0000010110ParserRuleCallETypeParameterDecl() { return c0000010110ParserRuleCallETypeParameterDecl; }

		// not supported
		public Keyword ele0000011KeywordGreaterThanSign() { return c0000011KeywordGreaterThanSign; }

		// not supported
		public Keyword ele00001KeywordLeftParenthesis() { return c00001KeywordLeftParenthesis; }

		// not supported
		public Group ele0001Group() { return c0001Group; }

		// not supported
		public Assignment ele00010AssignmentEParameters() { return c00010AssignmentEParameters; }

		// not supported
		public RuleCall ele000100ParserRuleCallEParameterDecl() { return c000100ParserRuleCallEParameterDecl; }

		// not supported
		public Group ele00011Group() { return c00011Group; }

		// not supported
		public Keyword ele000110KeywordComma() { return c000110KeywordComma; }

		// not supported
		public Assignment ele000111AssignmentEParameters() { return c000111AssignmentEParameters; }

		// not supported
		public RuleCall ele0001110ParserRuleCallEParameterDecl() { return c0001110ParserRuleCallEParameterDecl; }

		// not supported
		public Keyword ele001KeywordRightParenthesis() { return c001KeywordRightParenthesis; }

		// not supported
		public Group ele01Group() { return c01Group; }

		// not supported
		public Group ele010Group() { return c010Group; }

		// not supported
		public Keyword ele0100KeywordThrows() { return c0100KeywordThrows; }

		// not supported
		public Assignment ele0101AssignmentEGenericExceptions() { return c0101AssignmentEGenericExceptions; }

		// not supported
		public RuleCall ele01010ParserRuleCallEGenericTypeReferenceDecl() { return c01010ParserRuleCallEGenericTypeReferenceDecl; }

		// not supported
		public Group ele011Group() { return c011Group; }

		// not supported
		public Keyword ele0110KeywordComma() { return c0110KeywordComma; }

		// not supported
		public Assignment ele0111AssignmentEGenericExceptions() { return c0111AssignmentEGenericExceptions; }

		// not supported
		public RuleCall ele01110ParserRuleCallEGenericTypeReferenceDecl() { return c01110ParserRuleCallEGenericTypeReferenceDecl; }

		// not supported
		public Keyword ele1KeywordSemicolon() { return c1KeywordSemicolon; }
	}

	public class EParameterDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EParameterDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Assignment c00AssignmentEAnnotations = (Assignment)c0Group.eContents().get(0);
		private final RuleCall c000ParserRuleCallEAnnotationDecl = (RuleCall)c00AssignmentEAnnotations.eContents().get(0);
		private final Assignment c01AssignmentEGenericType = (Assignment)c0Group.eContents().get(1);
		private final RuleCall c010ParserRuleCallEGenericTypeReferenceDecl = (RuleCall)c01AssignmentEGenericType.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10LexerRuleCallID = (RuleCall)c1AssignmentName.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Assignment ele00AssignmentEAnnotations() { return c00AssignmentEAnnotations; }

		// not supported
		public RuleCall ele000ParserRuleCallEAnnotationDecl() { return c000ParserRuleCallEAnnotationDecl; }

		// not supported
		public Assignment ele01AssignmentEGenericType() { return c01AssignmentEGenericType; }

		// not supported
		public RuleCall ele010ParserRuleCallEGenericTypeReferenceDecl() { return c010ParserRuleCallEGenericTypeReferenceDecl; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10LexerRuleCallID() { return c10LexerRuleCallID; }
	}

	public class MapEntrySuperElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapEntrySuper");
		private final RuleCall cParserRuleCallMapEntry = (RuleCall)rule.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public RuleCall eleParserRuleCallMapEntry() { return cParserRuleCallMapEntry; }
	}

	public class MapEntryElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Assignment c00AssignmentDetailKey = (Assignment)c0Group.eContents().get(0);
		private final RuleCall c000LexerRuleCallID = (RuleCall)c00AssignmentDetailKey.eContents().get(0);
		private final Keyword c01KeywordEqualsSign = (Keyword)c0Group.eContents().get(1);
		private final Assignment c1AssignmentDetailValue = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10LexerRuleCallSTRING = (RuleCall)c1AssignmentDetailValue.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Assignment ele00AssignmentDetailKey() { return c00AssignmentDetailKey; }

		// not supported
		public RuleCall ele000LexerRuleCallID() { return c000LexerRuleCallID; }

		// not supported
		public Keyword ele01KeywordEqualsSign() { return c01KeywordEqualsSign; }

		// not supported
		public Assignment ele1AssignmentDetailValue() { return c1AssignmentDetailValue; }

		// not supported
		public RuleCall ele10LexerRuleCallSTRING() { return c10LexerRuleCallSTRING; }
	}

	public class MultiplicityExprElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicityExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives c0Alternatives = (Alternatives)cAlternatives.eContents().get(0);
		private final Keyword c00KeywordPlusSign = (Keyword)c0Alternatives.eContents().get(0);
		private final Keyword c01KeywordQuestionMark = (Keyword)c0Alternatives.eContents().get(1);
		private final Keyword c1KeywordAsterisk = (Keyword)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public Alternatives ele0Alternatives() { return c0Alternatives; }

		// not supported
		public Keyword ele00KeywordPlusSign() { return c00KeywordPlusSign; }

		// not supported
		public Keyword ele01KeywordQuestionMark() { return c01KeywordQuestionMark; }

		// not supported
		public Keyword ele1KeywordAsterisk() { return c1KeywordAsterisk; }
	}

	public class QIDElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall c0LexerRuleCallID = (RuleCall)cGroup.eContents().get(0);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Alternatives c10Alternatives = (Alternatives)c1Group.eContents().get(0);
		private final Keyword c100KeywordFullStop = (Keyword)c10Alternatives.eContents().get(0);
		private final Keyword c101Keyword$ = (Keyword)c10Alternatives.eContents().get(1);
		private final RuleCall c11LexerRuleCallID = (RuleCall)c1Group.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public RuleCall ele0LexerRuleCallID() { return c0LexerRuleCallID; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Alternatives ele10Alternatives() { return c10Alternatives; }

		// not supported
		public Keyword ele100KeywordFullStop() { return c100KeywordFullStop; }

		// not supported
		public Keyword ele101Keyword$() { return c101Keyword$; }

		// not supported
		public RuleCall ele11LexerRuleCallID() { return c11LexerRuleCallID; }
	}

	public class STRING_OR_QIDElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "STRING_OR_QID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0LexerRuleCallSTRING = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallQID = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0LexerRuleCallSTRING() { return c0LexerRuleCallSTRING; }

		// not supported
		public RuleCall ele1ParserRuleCallQID() { return c1ParserRuleCallQID; }
	}

	public class SINTElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SINT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordHyphenMinus = (Keyword)cGroup.eContents().get(0);
		private final RuleCall c1LexerRuleCallINT = (RuleCall)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordHyphenMinus() { return c0KeywordHyphenMinus; }

		// not supported
		public RuleCall ele1LexerRuleCallINT() { return c1LexerRuleCallINT; }
	}
	
	private EcoreDslElements pEcoreDsl;
	private ImportStatementDeclElements pImportStatementDecl;
	private EPackageDeclElements pEPackageDecl;
	private SubEPackageDeclElements pSubEPackageDecl;
	private EClassifierDeclElements pEClassifierDecl;
	private EDataTypeDeclElements pEDataTypeDecl;
	private EAnnotationDeclElements pEAnnotationDecl;
	private EClassDeclElements pEClassDecl;
	private EStructuralFeatureDeclElements pEStructuralFeatureDecl;
	private EAttributeDeclElements pEAttributeDecl;
	private EReferenceDeclElements pEReferenceDecl;
	private EEnumDeclElements pEEnumDecl;
	private EEnumLiteralDeclElements pEEnumLiteralDecl;
	private ETypeParameterDeclElements pETypeParameterDecl;
	private EGenericTypeReferenceDeclElements pEGenericTypeReferenceDecl;
	private EGenericTypeDeclElements pEGenericTypeDecl;
	private EOperationDeclElements pEOperationDecl;
	private EParameterDeclElements pEParameterDecl;
	private MapEntrySuperElements pMapEntrySuper;
	private MapEntryElements pMapEntry;
	private MultiplicityExprElements pMultiplicityExpr;
	private QIDElements pQID;
	private STRING_OR_QIDElements pSTRING_OR_QID;
	private SINTElements pSINT;
	
	private final GrammarProvider grammarProvider;

	private XtextBuiltinGrammarAccess superGrammarAccess;

	@Inject
	public EcoreDslGrammarAccess(GrammarProvider grammarProvider, XtextBuiltinGrammarAccess superGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.superGrammarAccess = superGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public XtextBuiltinGrammarAccess getSuperGrammarAccess() {
		return superGrammarAccess;
	}

	
	// not supported
	public EcoreDslElements prEcoreDsl() {
		return (pEcoreDsl != null) ? pEcoreDsl : (pEcoreDsl = new EcoreDslElements());
	} 

	// not supported
	public ImportStatementDeclElements prImportStatementDecl() {
		return (pImportStatementDecl != null) ? pImportStatementDecl : (pImportStatementDecl = new ImportStatementDeclElements());
	} 

	// not supported
	public EPackageDeclElements prEPackageDecl() {
		return (pEPackageDecl != null) ? pEPackageDecl : (pEPackageDecl = new EPackageDeclElements());
	} 

	// not supported
	public SubEPackageDeclElements prSubEPackageDecl() {
		return (pSubEPackageDecl != null) ? pSubEPackageDecl : (pSubEPackageDecl = new SubEPackageDeclElements());
	} 

	// not supported
	public EClassifierDeclElements prEClassifierDecl() {
		return (pEClassifierDecl != null) ? pEClassifierDecl : (pEClassifierDecl = new EClassifierDeclElements());
	} 

	// not supported
	public EDataTypeDeclElements prEDataTypeDecl() {
		return (pEDataTypeDecl != null) ? pEDataTypeDecl : (pEDataTypeDecl = new EDataTypeDeclElements());
	} 

	// not supported
	public EAnnotationDeclElements prEAnnotationDecl() {
		return (pEAnnotationDecl != null) ? pEAnnotationDecl : (pEAnnotationDecl = new EAnnotationDeclElements());
	} 

	// not supported
	public EClassDeclElements prEClassDecl() {
		return (pEClassDecl != null) ? pEClassDecl : (pEClassDecl = new EClassDeclElements());
	} 

	// not supported
	public EStructuralFeatureDeclElements prEStructuralFeatureDecl() {
		return (pEStructuralFeatureDecl != null) ? pEStructuralFeatureDecl : (pEStructuralFeatureDecl = new EStructuralFeatureDeclElements());
	} 

	// not supported
	public EAttributeDeclElements prEAttributeDecl() {
		return (pEAttributeDecl != null) ? pEAttributeDecl : (pEAttributeDecl = new EAttributeDeclElements());
	} 

	// not supported
	public EReferenceDeclElements prEReferenceDecl() {
		return (pEReferenceDecl != null) ? pEReferenceDecl : (pEReferenceDecl = new EReferenceDeclElements());
	} 

	// not supported
	public EEnumDeclElements prEEnumDecl() {
		return (pEEnumDecl != null) ? pEEnumDecl : (pEEnumDecl = new EEnumDeclElements());
	} 

	// not supported
	public EEnumLiteralDeclElements prEEnumLiteralDecl() {
		return (pEEnumLiteralDecl != null) ? pEEnumLiteralDecl : (pEEnumLiteralDecl = new EEnumLiteralDeclElements());
	} 

	// not supported
	public ETypeParameterDeclElements prETypeParameterDecl() {
		return (pETypeParameterDecl != null) ? pETypeParameterDecl : (pETypeParameterDecl = new ETypeParameterDeclElements());
	} 

	// not supported
	public EGenericTypeReferenceDeclElements prEGenericTypeReferenceDecl() {
		return (pEGenericTypeReferenceDecl != null) ? pEGenericTypeReferenceDecl : (pEGenericTypeReferenceDecl = new EGenericTypeReferenceDeclElements());
	} 

	// not supported
	public EGenericTypeDeclElements prEGenericTypeDecl() {
		return (pEGenericTypeDecl != null) ? pEGenericTypeDecl : (pEGenericTypeDecl = new EGenericTypeDeclElements());
	} 

	// not supported
	public EOperationDeclElements prEOperationDecl() {
		return (pEOperationDecl != null) ? pEOperationDecl : (pEOperationDecl = new EOperationDeclElements());
	} 

	// not supported
	public EParameterDeclElements prEParameterDecl() {
		return (pEParameterDecl != null) ? pEParameterDecl : (pEParameterDecl = new EParameterDeclElements());
	} 

	// not supported
	public MapEntrySuperElements prMapEntrySuper() {
		return (pMapEntrySuper != null) ? pMapEntrySuper : (pMapEntrySuper = new MapEntrySuperElements());
	} 

	// not supported
	public MapEntryElements prMapEntry() {
		return (pMapEntry != null) ? pMapEntry : (pMapEntry = new MapEntryElements());
	} 

	// not supported
	public MultiplicityExprElements prMultiplicityExpr() {
		return (pMultiplicityExpr != null) ? pMultiplicityExpr : (pMultiplicityExpr = new MultiplicityExprElements());
	} 

	// not supported
	public QIDElements prQID() {
		return (pQID != null) ? pQID : (pQID = new QIDElements());
	} 

	// not supported
	public STRING_OR_QIDElements prSTRING_OR_QID() {
		return (pSTRING_OR_QID != null) ? pSTRING_OR_QID : (pSTRING_OR_QID = new STRING_OR_QIDElements());
	} 

	// not supported
	public SINTElements prSINT() {
		return (pSINT != null) ? pSINT : (pSINT = new SINTElements());
	} 

	// not supported
	public LexerRule lrID() {
		return superGrammarAccess.lrID();
	} 

	// not supported
	public LexerRule lrINT() {
		return superGrammarAccess.lrINT();
	} 

	// not supported
	public LexerRule lrSTRING() {
		return superGrammarAccess.lrSTRING();
	} 

	// not supported
	public LexerRule lrML_COMMENT() {
		return superGrammarAccess.lrML_COMMENT();
	} 

	// not supported
	public LexerRule lrSL_COMMENT() {
		return superGrammarAccess.lrSL_COMMENT();
	} 

	// not supported
	public LexerRule lrWS() {
		return superGrammarAccess.lrWS();
	} 

	// not supported
	public LexerRule lrANY_OTHER() {
		return superGrammarAccess.lrANY_OTHER();
	} 
}
