/*
* generated by Xtext
*/
package org.eclipse.xtext.example.parseTreeConstruction;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;
import org.eclipse.xtext.example.services.EcoreDslGrammarAccess;

import com.google.inject.Inject;

public class EcoreDslParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private EcoreDslGrammarAccess grammarAccess;
	
	@Override
	protected Solution internalSerialize(EObject obj) {
		IInstanceDescription inst = getDescr(obj);
		Solution s;
		if(inst.isInstanceOf(grammarAccess.prEcoreDsl().getRule().getType().getType()) && (s = new EcoreDsl_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prImportStatementDecl().getRule().getType().getType()) && (s = new ImportStatementDecl_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prEPackageDecl().getRule().getType().getType()) && (s = new EPackageDecl_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prSubEPackageDecl().getRule().getType().getType()) && (s = new SubEPackageDecl_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prEClassifierDecl().getRule().getType().getType()) && (s = new EClassifierDecl_Alternatives(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prEDataTypeDecl().getRule().getType().getType()) && (s = new EDataTypeDecl_Alternatives(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prEAnnotationDecl().getRule().getType().getType()) && (s = new EAnnotationDecl_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prEClassDecl().getRule().getType().getType()) && (s = new EClassDecl_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prEStructuralFeatureDecl().getRule().getType().getType()) && (s = new EStructuralFeatureDecl_Alternatives(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prEAttributeDecl().getRule().getType().getType()) && (s = new EAttributeDecl_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prEReferenceDecl().getRule().getType().getType()) && (s = new EReferenceDecl_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prEEnumDecl().getRule().getType().getType()) && (s = new EEnumDecl_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prEEnumLiteralDecl().getRule().getType().getType()) && (s = new EEnumLiteralDecl_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prETypeParameterDecl().getRule().getType().getType()) && (s = new ETypeParameterDecl_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prEGenericTypeReferenceDecl().getRule().getType().getType()) && (s = new EGenericTypeReferenceDecl_Alternatives(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prEGenericTypeDecl().getRule().getType().getType()) && (s = new EGenericTypeDecl_Alternatives(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prEOperationDecl().getRule().getType().getType()) && (s = new EOperationDecl_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prEParameterDecl().getRule().getType().getType()) && (s = new EParameterDecl_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prMapEntrySuper().getRule().getType().getType()) && (s = new MapEntrySuper_RuleCall_MapEntry(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prMapEntry().getRule().getType().getType()) && (s = new MapEntry_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prMultiplicityExpr().getRule().getType().getType()) && (s = new MultiplicityExpr_Alternatives(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		return null;
	}
	

/************ begin Rule EcoreDsl ****************
 *
 * not supported
 *
 **/


// not supported
protected class EcoreDsl_Group extends GroupToken {
	
	public EcoreDsl_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEcoreDsl().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EcoreDsl_1_Assignment_package(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EcoreDsl_0_Assignment_imports(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class EcoreDsl_0_Assignment_imports extends AssignmentToken  {
	
	public EcoreDsl_0_Assignment_imports(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEcoreDsl().ele0AssignmentImports();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("imports",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("imports");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prImportStatementDecl().getRule().getType().getType())) {
				Solution s = new ImportStatementDecl_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EcoreDsl_1_Assignment_package extends AssignmentToken  {
	
	public EcoreDsl_1_Assignment_package(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEcoreDsl().ele1AssignmentPackage();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("package",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("package");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEPackageDecl().getRule().getType().getType())) {
				Solution s = new EPackageDecl_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}


/************ end Rule EcoreDsl ****************/


/************ begin Rule ImportStatementDecl ****************
 *
 * not supported
 *
 **/


// not supported
protected class ImportStatementDecl_Group extends GroupToken {
	
	public ImportStatementDecl_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prImportStatementDecl().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new ImportStatementDecl_3_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new ImportStatementDecl_2_Assignment_importURI(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new ImportStatementDecl_1_Group(s2.getCurrent(), s2.getPredecessor()).firstSolution();
		while(s3 != null) {
			Solution s4 = new ImportStatementDecl_0_Keyword_import(s3.getCurrent(), s3.getPredecessor()).firstSolution();
			if(s4 != null) {
				last = s4.getPredecessor();
				return s4;
			} else {
				s3 = s3.getPredecessor().nextSolution(this,s3);
			}
		}
			s2 = s2.getPredecessor().nextSolution(this,s2);
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class ImportStatementDecl_0_Keyword_import extends KeywordToken  {
	
	public ImportStatementDecl_0_Keyword_import(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prImportStatementDecl().ele0KeywordImport();
	}	
}

// not supported
protected class ImportStatementDecl_1_Group extends GroupToken {
	
	public ImportStatementDecl_1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prImportStatementDecl().ele1Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new ImportStatementDecl_1_1_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new ImportStatementDecl_1_0_Assignment_alias(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class ImportStatementDecl_1_0_Assignment_alias extends AssignmentToken  {
	
	public ImportStatementDecl_1_0_Assignment_alias(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prImportStatementDecl().ele10AssignmentAlias();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("alias",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("alias");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prImportStatementDecl().ele100TerminalRuleCallID();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class ImportStatementDecl_1_1_Keyword extends KeywordToken  {
	
	public ImportStatementDecl_1_1_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prImportStatementDecl().ele11KeywordEqualsSign();
	}	
}


// not supported
protected class ImportStatementDecl_2_Assignment_importURI extends AssignmentToken  {
	
	public ImportStatementDecl_2_Assignment_importURI(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prImportStatementDecl().ele2AssignmentImportURI();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("importURI",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("importURI");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prImportStatementDecl().ele20TerminalRuleCallSTRING();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class ImportStatementDecl_3_Keyword extends KeywordToken  {
	
	public ImportStatementDecl_3_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prImportStatementDecl().ele3KeywordSemicolon();
	}	
}


/************ end Rule ImportStatementDecl ****************/


/************ begin Rule EPackageDecl ****************
 *
 * not supported
 *
 **/


// not supported
protected class EPackageDecl_Group extends GroupToken {
	
	public EPackageDecl_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEPackageDecl().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EPackageDecl_11_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EPackageDecl_10_Alternatives(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new EPackageDecl_9_Keyword(s2.getCurrent(), s2.getPredecessor()).firstSolution();
		while(s3 != null) {
			Solution s4 = new EPackageDecl_8_Assignment_nsPrefix(s3.getCurrent(), s3.getPredecessor()).firstSolution();
		while(s4 != null) {
			Solution s5 = new EPackageDecl_7_Keyword(s4.getCurrent(), s4.getPredecessor()).firstSolution();
		while(s5 != null) {
			Solution s6 = new EPackageDecl_6_Keyword_nsPrefix(s5.getCurrent(), s5.getPredecessor()).firstSolution();
		while(s6 != null) {
			Solution s7 = new EPackageDecl_5_Assignment_nsURI(s6.getCurrent(), s6.getPredecessor()).firstSolution();
		while(s7 != null) {
			Solution s8 = new EPackageDecl_4_Keyword(s7.getCurrent(), s7.getPredecessor()).firstSolution();
		while(s8 != null) {
			Solution s9 = new EPackageDecl_3_Keyword_nsURI(s8.getCurrent(), s8.getPredecessor()).firstSolution();
		while(s9 != null) {
			Solution s10 = new EPackageDecl_2_Assignment_name(s9.getCurrent(), s9.getPredecessor()).firstSolution();
		while(s10 != null) {
			Solution s11 = new EPackageDecl_1_Keyword_package(s10.getCurrent(), s10.getPredecessor()).firstSolution();
		while(s11 != null) {
			Solution s12 = new EPackageDecl_0_Assignment_eAnnotations(s11.getCurrent(), s11.getPredecessor()).firstSolution();
			if(s12 != null) {
				last = s12.getPredecessor();
				return s12;
			} else {
				s11 = s11.getPredecessor().nextSolution(this,s11);
			}
		}
			s10 = s10.getPredecessor().nextSolution(this,s10);
		}
			s9 = s9.getPredecessor().nextSolution(this,s9);
		}
			s8 = s8.getPredecessor().nextSolution(this,s8);
		}
			s7 = s7.getPredecessor().nextSolution(this,s7);
		}
			s6 = s6.getPredecessor().nextSolution(this,s6);
		}
			s5 = s5.getPredecessor().nextSolution(this,s5);
		}
			s4 = s4.getPredecessor().nextSolution(this,s4);
		}
			s3 = s3.getPredecessor().nextSolution(this,s3);
		}
			s2 = s2.getPredecessor().nextSolution(this,s2);
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class EPackageDecl_0_Assignment_eAnnotations extends AssignmentToken  {
	
	public EPackageDecl_0_Assignment_eAnnotations(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEPackageDecl().ele0AssignmentEAnnotations();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eAnnotations",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eAnnotations");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEAnnotationDecl().getRule().getType().getType())) {
				Solution s = new EAnnotationDecl_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EPackageDecl_1_Keyword_package extends KeywordToken  {
	
	public EPackageDecl_1_Keyword_package(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEPackageDecl().ele1KeywordPackage();
	}	
}

// not supported
protected class EPackageDecl_2_Assignment_name extends AssignmentToken  {
	
	public EPackageDecl_2_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEPackageDecl().ele2AssignmentName();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");

		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for datatype rule
			type = AssignmentType.PRC;
			element = grammarAccess.prEPackageDecl().ele20ParserRuleCallQID();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class EPackageDecl_3_Keyword_nsURI extends KeywordToken  {
	
	public EPackageDecl_3_Keyword_nsURI(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEPackageDecl().ele3KeywordNsURI();
	}	
}

// not supported
protected class EPackageDecl_4_Keyword extends KeywordToken  {
	
	public EPackageDecl_4_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEPackageDecl().ele4KeywordEqualsSign();
	}	
}

// not supported
protected class EPackageDecl_5_Assignment_nsURI extends AssignmentToken  {
	
	public EPackageDecl_5_Assignment_nsURI(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEPackageDecl().ele5AssignmentNsURI();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("nsURI",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("nsURI");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prEPackageDecl().ele50TerminalRuleCallSTRING();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class EPackageDecl_6_Keyword_nsPrefix extends KeywordToken  {
	
	public EPackageDecl_6_Keyword_nsPrefix(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEPackageDecl().ele6KeywordNsPrefix();
	}	
}

// not supported
protected class EPackageDecl_7_Keyword extends KeywordToken  {
	
	public EPackageDecl_7_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEPackageDecl().ele7KeywordEqualsSign();
	}	
}

// not supported
protected class EPackageDecl_8_Assignment_nsPrefix extends AssignmentToken  {
	
	public EPackageDecl_8_Assignment_nsPrefix(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEPackageDecl().ele8AssignmentNsPrefix();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("nsPrefix",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("nsPrefix");

		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for datatype rule
			type = AssignmentType.PRC;
			element = grammarAccess.prEPackageDecl().ele80ParserRuleCallQID();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class EPackageDecl_9_Keyword extends KeywordToken  {
	
	public EPackageDecl_9_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEPackageDecl().ele9KeywordLeftCurlyBracket();
	}	
}

// not supported
protected class EPackageDecl_10_Alternatives extends AlternativesToken {

	public EPackageDecl_10_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.prEPackageDecl().ele10Alternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new EPackageDecl_10_0_Assignment_eSubpackages(current, this);
			case 1: return new EPackageDecl_10_1_Assignment_eClassifiers(current, this);
			default: return null;
		}
	}
}

// not supported
protected class EPackageDecl_10_0_Assignment_eSubpackages extends AssignmentToken  {
	
	public EPackageDecl_10_0_Assignment_eSubpackages(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEPackageDecl().ele100AssignmentESubpackages();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eSubpackages",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eSubpackages");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prSubEPackageDecl().getRule().getType().getType())) {
				Solution s = new SubEPackageDecl_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EPackageDecl_10_1_Assignment_eClassifiers extends AssignmentToken  {
	
	public EPackageDecl_10_1_Assignment_eClassifiers(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEPackageDecl().ele101AssignmentEClassifiers();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eClassifiers",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eClassifiers");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEClassifierDecl().getRule().getType().getType())) {
				Solution s = new EClassifierDecl_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}


// not supported
protected class EPackageDecl_11_Keyword extends KeywordToken  {
	
	public EPackageDecl_11_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEPackageDecl().ele11KeywordRightCurlyBracket();
	}	
}


/************ end Rule EPackageDecl ****************/


/************ begin Rule SubEPackageDecl ****************
 *
 * not supported
 *
 **/


// not supported
protected class SubEPackageDecl_Group extends GroupToken {
	
	public SubEPackageDecl_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prSubEPackageDecl().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new SubEPackageDecl_5_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new SubEPackageDecl_4_Alternatives(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new SubEPackageDecl_3_Keyword(s2.getCurrent(), s2.getPredecessor()).firstSolution();
		while(s3 != null) {
			Solution s4 = new SubEPackageDecl_2_Assignment_name(s3.getCurrent(), s3.getPredecessor()).firstSolution();
		while(s4 != null) {
			Solution s5 = new SubEPackageDecl_1_Keyword_package(s4.getCurrent(), s4.getPredecessor()).firstSolution();
		while(s5 != null) {
			Solution s6 = new SubEPackageDecl_0_Assignment_eAnnotations(s5.getCurrent(), s5.getPredecessor()).firstSolution();
			if(s6 != null) {
				last = s6.getPredecessor();
				return s6;
			} else {
				s5 = s5.getPredecessor().nextSolution(this,s5);
			}
		}
			s4 = s4.getPredecessor().nextSolution(this,s4);
		}
			s3 = s3.getPredecessor().nextSolution(this,s3);
		}
			s2 = s2.getPredecessor().nextSolution(this,s2);
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class SubEPackageDecl_0_Assignment_eAnnotations extends AssignmentToken  {
	
	public SubEPackageDecl_0_Assignment_eAnnotations(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prSubEPackageDecl().ele0AssignmentEAnnotations();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eAnnotations",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eAnnotations");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEAnnotationDecl().getRule().getType().getType())) {
				Solution s = new EAnnotationDecl_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class SubEPackageDecl_1_Keyword_package extends KeywordToken  {
	
	public SubEPackageDecl_1_Keyword_package(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prSubEPackageDecl().ele1KeywordPackage();
	}	
}

// not supported
protected class SubEPackageDecl_2_Assignment_name extends AssignmentToken  {
	
	public SubEPackageDecl_2_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prSubEPackageDecl().ele2AssignmentName();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prSubEPackageDecl().ele20TerminalRuleCallID();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class SubEPackageDecl_3_Keyword extends KeywordToken  {
	
	public SubEPackageDecl_3_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prSubEPackageDecl().ele3KeywordLeftCurlyBracket();
	}	
}

// not supported
protected class SubEPackageDecl_4_Alternatives extends AlternativesToken {

	public SubEPackageDecl_4_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.prSubEPackageDecl().ele4Alternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new SubEPackageDecl_4_0_Assignment_eSubpackages(current, this);
			case 1: return new SubEPackageDecl_4_1_Assignment_eClassifiers(current, this);
			default: return null;
		}
	}
}

// not supported
protected class SubEPackageDecl_4_0_Assignment_eSubpackages extends AssignmentToken  {
	
	public SubEPackageDecl_4_0_Assignment_eSubpackages(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prSubEPackageDecl().ele40AssignmentESubpackages();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eSubpackages",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eSubpackages");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prSubEPackageDecl().getRule().getType().getType())) {
				Solution s = new SubEPackageDecl_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class SubEPackageDecl_4_1_Assignment_eClassifiers extends AssignmentToken  {
	
	public SubEPackageDecl_4_1_Assignment_eClassifiers(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prSubEPackageDecl().ele41AssignmentEClassifiers();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eClassifiers",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eClassifiers");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEClassifierDecl().getRule().getType().getType())) {
				Solution s = new EClassifierDecl_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}


// not supported
protected class SubEPackageDecl_5_Keyword extends KeywordToken  {
	
	public SubEPackageDecl_5_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prSubEPackageDecl().ele5KeywordRightCurlyBracket();
	}	
}


/************ end Rule SubEPackageDecl ****************/


/************ begin Rule EClassifierDecl ****************
 *
 * not supported
 *
 **/


// not supported
protected class EClassifierDecl_Alternatives extends AlternativesToken {

	public EClassifierDecl_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.prEClassifierDecl().eleAlternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new EClassifierDecl_0_RuleCall_EClassDecl(current, this);
			case 1: return new EClassifierDecl_1_RuleCall_EDataTypeDecl(current, this);
			default: return null;
		}
	}
}

// not supported
protected class EClassifierDecl_0_RuleCall_EClassDecl extends RuleCallToken {
	
	public EClassifierDecl_0_RuleCall_EClassDecl(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.prEClassifierDecl().ele0ParserRuleCallEClassDecl();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(EClassDecl_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.prEClassDecl().getRule().getType().getType())) return null;
		return new EClassDecl_Group(current, this).firstSolution();
	}
}

// not supported
protected class EClassifierDecl_1_RuleCall_EDataTypeDecl extends RuleCallToken {
	
	public EClassifierDecl_1_RuleCall_EDataTypeDecl(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.prEClassifierDecl().ele1ParserRuleCallEDataTypeDecl();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(EDataTypeDecl_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.prEDataTypeDecl().getRule().getType().getType())) return null;
		return new EDataTypeDecl_Alternatives(current, this).firstSolution();
	}
}


/************ end Rule EClassifierDecl ****************/


/************ begin Rule EDataTypeDecl ****************
 *
 * not supported
 *
 **/


// not supported
protected class EDataTypeDecl_Alternatives extends AlternativesToken {

	public EDataTypeDecl_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.prEDataTypeDecl().eleAlternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new EDataTypeDecl_0_Group(current, this);
			case 1: return new EDataTypeDecl_1_RuleCall_EEnumDecl(current, this);
			default: return null;
		}
	}
}

// not supported
protected class EDataTypeDecl_0_Group extends GroupToken {
	
	public EDataTypeDecl_0_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEDataTypeDecl().ele0Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EDataTypeDecl_0_2_Group(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EDataTypeDecl_0_1_Assignment_serializable(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new EDataTypeDecl_0_0_Assignment_eAnnotations(s2.getCurrent(), s2.getPredecessor()).firstSolution();
			if(s3 != null) {
				last = s3.getPredecessor();
				return s3;
			} else {
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class EDataTypeDecl_0_0_Assignment_eAnnotations extends AssignmentToken  {
	
	public EDataTypeDecl_0_0_Assignment_eAnnotations(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEDataTypeDecl().ele00AssignmentEAnnotations();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eAnnotations",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eAnnotations");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEAnnotationDecl().getRule().getType().getType())) {
				Solution s = new EAnnotationDecl_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EDataTypeDecl_0_1_Assignment_serializable extends AssignmentToken  {
	
	public EDataTypeDecl_0_1_Assignment_serializable(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEDataTypeDecl().ele01AssignmentSerializable();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("serializable",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("serializable");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prEDataTypeDecl().ele010KeywordSerializable();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class EDataTypeDecl_0_2_Group extends GroupToken {
	
	public EDataTypeDecl_0_2_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEDataTypeDecl().ele02Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EDataTypeDecl_0_2_4_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EDataTypeDecl_0_2_3_Assignment_instanceClassName(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new EDataTypeDecl_0_2_2_Keyword(s2.getCurrent(), s2.getPredecessor()).firstSolution();
		while(s3 != null) {
			Solution s4 = new EDataTypeDecl_0_2_1_Assignment_name(s3.getCurrent(), s3.getPredecessor()).firstSolution();
		while(s4 != null) {
			Solution s5 = new EDataTypeDecl_0_2_0_Keyword_datatype(s4.getCurrent(), s4.getPredecessor()).firstSolution();
			if(s5 != null) {
				last = s5.getPredecessor();
				return s5;
			} else {
				s4 = s4.getPredecessor().nextSolution(this,s4);
			}
		}
			s3 = s3.getPredecessor().nextSolution(this,s3);
		}
			s2 = s2.getPredecessor().nextSolution(this,s2);
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class EDataTypeDecl_0_2_0_Keyword_datatype extends KeywordToken  {
	
	public EDataTypeDecl_0_2_0_Keyword_datatype(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEDataTypeDecl().ele020KeywordDatatype();
	}	
}

// not supported
protected class EDataTypeDecl_0_2_1_Assignment_name extends AssignmentToken  {
	
	public EDataTypeDecl_0_2_1_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEDataTypeDecl().ele021AssignmentName();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prEDataTypeDecl().ele0210TerminalRuleCallID();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class EDataTypeDecl_0_2_2_Keyword extends KeywordToken  {
	
	public EDataTypeDecl_0_2_2_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEDataTypeDecl().ele022KeywordColon();
	}	
}

// not supported
protected class EDataTypeDecl_0_2_3_Assignment_instanceClassName extends AssignmentToken  {
	
	public EDataTypeDecl_0_2_3_Assignment_instanceClassName(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEDataTypeDecl().ele023AssignmentInstanceClassName();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("instanceClassName",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("instanceClassName");

		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for datatype rule
			type = AssignmentType.PRC;
			element = grammarAccess.prEDataTypeDecl().ele0230ParserRuleCallSTRING_OR_QID();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class EDataTypeDecl_0_2_4_Keyword extends KeywordToken  {
	
	public EDataTypeDecl_0_2_4_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEDataTypeDecl().ele024KeywordSemicolon();
	}	
}



// not supported
protected class EDataTypeDecl_1_RuleCall_EEnumDecl extends RuleCallToken {
	
	public EDataTypeDecl_1_RuleCall_EEnumDecl(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.prEDataTypeDecl().ele1ParserRuleCallEEnumDecl();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(EEnumDecl_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.prEEnumDecl().getRule().getType().getType())) return null;
		return new EEnumDecl_Group(current, this).firstSolution();
	}
}


/************ end Rule EDataTypeDecl ****************/


/************ begin Rule EAnnotationDecl ****************
 *
 * not supported
 *
 **/


// not supported
protected class EAnnotationDecl_Group extends GroupToken {
	
	public EAnnotationDecl_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEAnnotationDecl().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EAnnotationDecl_6_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EAnnotationDecl_5_Group(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new EAnnotationDecl_4_Assignment_contents(s2.getCurrent(), s2.getPredecessor()).firstSolution();
		while(s3 != null) {
			Solution s4 = new EAnnotationDecl_3_Keyword(s3.getCurrent(), s3.getPredecessor()).firstSolution();
		while(s4 != null) {
			Solution s5 = new EAnnotationDecl_2_Assignment_eModelElement(s4.getCurrent(), s4.getPredecessor()).firstSolution();
		while(s5 != null) {
			Solution s6 = new EAnnotationDecl_1_Assignment_source(s5.getCurrent(), s5.getPredecessor()).firstSolution();
		while(s6 != null) {
			Solution s7 = new EAnnotationDecl_0_Keyword(s6.getCurrent(), s6.getPredecessor()).firstSolution();
			if(s7 != null) {
				last = s7.getPredecessor();
				return s7;
			} else {
				s6 = s6.getPredecessor().nextSolution(this,s6);
			}
		}
			s5 = s5.getPredecessor().nextSolution(this,s5);
		}
			s4 = s4.getPredecessor().nextSolution(this,s4);
		}
			s3 = s3.getPredecessor().nextSolution(this,s3);
		}
			s2 = s2.getPredecessor().nextSolution(this,s2);
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class EAnnotationDecl_0_Keyword extends KeywordToken  {
	
	public EAnnotationDecl_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEAnnotationDecl().ele0KeywordCommercialAt();
	}	
}

// not supported
protected class EAnnotationDecl_1_Assignment_source extends AssignmentToken  {
	
	public EAnnotationDecl_1_Assignment_source(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEAnnotationDecl().ele1AssignmentSource();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("source",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("source");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prEAnnotationDecl().ele10TerminalRuleCallSTRING();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class EAnnotationDecl_2_Assignment_eModelElement extends AssignmentToken  {
	
	public EAnnotationDecl_2_Assignment_eModelElement(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEAnnotationDecl().ele2AssignmentEModelElement();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eModelElement",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eModelElement");
		if(value instanceof EObject) { // xtext::CrossReference
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEAnnotationDecl().ele20CrossReferenceEStringEModelElement().getType().getType())) {
				type = AssignmentType.CR;
				element = grammarAccess.prEAnnotationDecl().ele20CrossReferenceEStringEModelElement(); 
				return new Solution(obj);
			}
		}
		return null;
	}
}

// not supported
protected class EAnnotationDecl_3_Keyword extends KeywordToken  {
	
	public EAnnotationDecl_3_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEAnnotationDecl().ele3KeywordLeftParenthesis();
	}	
}

// not supported
protected class EAnnotationDecl_4_Assignment_contents extends AssignmentToken  {
	
	public EAnnotationDecl_4_Assignment_contents(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEAnnotationDecl().ele4AssignmentContents();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("contents",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contents");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prMapEntrySuper().getRule().getType().getType())) {
				Solution s = new MapEntrySuper_RuleCall_MapEntry(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EAnnotationDecl_5_Group extends GroupToken {
	
	public EAnnotationDecl_5_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEAnnotationDecl().ele5Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EAnnotationDecl_5_1_Assignment_contents(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EAnnotationDecl_5_0_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class EAnnotationDecl_5_0_Keyword extends KeywordToken  {
	
	public EAnnotationDecl_5_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEAnnotationDecl().ele50KeywordComma();
	}	
}

// not supported
protected class EAnnotationDecl_5_1_Assignment_contents extends AssignmentToken  {
	
	public EAnnotationDecl_5_1_Assignment_contents(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEAnnotationDecl().ele51AssignmentContents();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("contents",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contents");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prMapEntrySuper().getRule().getType().getType())) {
				Solution s = new MapEntrySuper_RuleCall_MapEntry(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}


// not supported
protected class EAnnotationDecl_6_Keyword extends KeywordToken  {
	
	public EAnnotationDecl_6_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEAnnotationDecl().ele6KeywordRightParenthesis();
	}	
}


/************ end Rule EAnnotationDecl ****************/


/************ begin Rule EClassDecl ****************
 *
 * not supported
 *
 **/


// not supported
protected class EClassDecl_Group extends GroupToken {
	
	public EClassDecl_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEClassDecl().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EClassDecl_9_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EClassDecl_8_Alternatives(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new EClassDecl_7_Keyword(s2.getCurrent(), s2.getPredecessor()).firstSolution();
		while(s3 != null) {
			Solution s4 = new EClassDecl_6_Group(s3.getCurrent(), s3.getPredecessor()).firstSolution();
		while(s4 != null) {
			Solution s5 = new EClassDecl_5_Group(s4.getCurrent(), s4.getPredecessor()).firstSolution();
		while(s5 != null) {
			Solution s6 = new EClassDecl_4_Group(s5.getCurrent(), s5.getPredecessor()).firstSolution();
		while(s6 != null) {
			Solution s7 = new EClassDecl_3_Assignment_name(s6.getCurrent(), s6.getPredecessor()).firstSolution();
		while(s7 != null) {
			Solution s8 = new EClassDecl_2_Alternatives(s7.getCurrent(), s7.getPredecessor()).firstSolution();
		while(s8 != null) {
			Solution s9 = new EClassDecl_1_Assignment_abstract(s8.getCurrent(), s8.getPredecessor()).firstSolution();
		while(s9 != null) {
			Solution s10 = new EClassDecl_0_Assignment_eAnnotations(s9.getCurrent(), s9.getPredecessor()).firstSolution();
			if(s10 != null) {
				last = s10.getPredecessor();
				return s10;
			} else {
				s9 = s9.getPredecessor().nextSolution(this,s9);
			}
		}
			s8 = s8.getPredecessor().nextSolution(this,s8);
		}
			s7 = s7.getPredecessor().nextSolution(this,s7);
		}
			s6 = s6.getPredecessor().nextSolution(this,s6);
		}
			s5 = s5.getPredecessor().nextSolution(this,s5);
		}
			s4 = s4.getPredecessor().nextSolution(this,s4);
		}
			s3 = s3.getPredecessor().nextSolution(this,s3);
		}
			s2 = s2.getPredecessor().nextSolution(this,s2);
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class EClassDecl_0_Assignment_eAnnotations extends AssignmentToken  {
	
	public EClassDecl_0_Assignment_eAnnotations(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEClassDecl().ele0AssignmentEAnnotations();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eAnnotations",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eAnnotations");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEAnnotationDecl().getRule().getType().getType())) {
				Solution s = new EAnnotationDecl_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EClassDecl_1_Assignment_abstract extends AssignmentToken  {
	
	public EClassDecl_1_Assignment_abstract(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEClassDecl().ele1AssignmentAbstract();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("abstract",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("abstract");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prEClassDecl().ele10KeywordAbstract();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class EClassDecl_2_Alternatives extends AlternativesToken {

	public EClassDecl_2_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.prEClassDecl().ele2Alternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new EClassDecl_2_0_Assignment_interface(current, this);
			case 1: return new EClassDecl_2_1_Keyword_class(current, this);
			default: return null;
		}
	}
}

// not supported
protected class EClassDecl_2_0_Assignment_interface extends AssignmentToken  {
	
	public EClassDecl_2_0_Assignment_interface(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEClassDecl().ele20AssignmentInterface();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("interface",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interface");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prEClassDecl().ele200KeywordInterface();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class EClassDecl_2_1_Keyword_class extends KeywordToken  {
	
	public EClassDecl_2_1_Keyword_class(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEClassDecl().ele21KeywordClass();
	}	
}


// not supported
protected class EClassDecl_3_Assignment_name extends AssignmentToken  {
	
	public EClassDecl_3_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEClassDecl().ele3AssignmentName();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prEClassDecl().ele30TerminalRuleCallID();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class EClassDecl_4_Group extends GroupToken {
	
	public EClassDecl_4_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEClassDecl().ele4Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EClassDecl_4_3_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EClassDecl_4_2_Group(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new EClassDecl_4_1_Assignment_eTypeParameters(s2.getCurrent(), s2.getPredecessor()).firstSolution();
		while(s3 != null) {
			Solution s4 = new EClassDecl_4_0_Keyword(s3.getCurrent(), s3.getPredecessor()).firstSolution();
			if(s4 != null) {
				last = s4.getPredecessor();
				return s4;
			} else {
				s3 = s3.getPredecessor().nextSolution(this,s3);
			}
		}
			s2 = s2.getPredecessor().nextSolution(this,s2);
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class EClassDecl_4_0_Keyword extends KeywordToken  {
	
	public EClassDecl_4_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEClassDecl().ele40KeywordLessThanSign();
	}	
}

// not supported
protected class EClassDecl_4_1_Assignment_eTypeParameters extends AssignmentToken  {
	
	public EClassDecl_4_1_Assignment_eTypeParameters(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEClassDecl().ele41AssignmentETypeParameters();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eTypeParameters",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eTypeParameters");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prETypeParameterDecl().getRule().getType().getType())) {
				Solution s = new ETypeParameterDecl_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EClassDecl_4_2_Group extends GroupToken {
	
	public EClassDecl_4_2_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEClassDecl().ele42Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EClassDecl_4_2_1_Assignment_eTypeParameters(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EClassDecl_4_2_0_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class EClassDecl_4_2_0_Keyword extends KeywordToken  {
	
	public EClassDecl_4_2_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEClassDecl().ele420KeywordComma();
	}	
}

// not supported
protected class EClassDecl_4_2_1_Assignment_eTypeParameters extends AssignmentToken  {
	
	public EClassDecl_4_2_1_Assignment_eTypeParameters(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEClassDecl().ele421AssignmentETypeParameters();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eTypeParameters",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eTypeParameters");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prETypeParameterDecl().getRule().getType().getType())) {
				Solution s = new ETypeParameterDecl_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}


// not supported
protected class EClassDecl_4_3_Keyword extends KeywordToken  {
	
	public EClassDecl_4_3_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEClassDecl().ele43KeywordGreaterThanSign();
	}	
}


// not supported
protected class EClassDecl_5_Group extends GroupToken {
	
	public EClassDecl_5_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEClassDecl().ele5Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EClassDecl_5_2_Group(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EClassDecl_5_1_Assignment_eGenericSuperTypes(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new EClassDecl_5_0_Keyword_extends(s2.getCurrent(), s2.getPredecessor()).firstSolution();
			if(s3 != null) {
				last = s3.getPredecessor();
				return s3;
			} else {
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class EClassDecl_5_0_Keyword_extends extends KeywordToken  {
	
	public EClassDecl_5_0_Keyword_extends(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEClassDecl().ele50KeywordExtends();
	}	
}

// not supported
protected class EClassDecl_5_1_Assignment_eGenericSuperTypes extends AssignmentToken  {
	
	public EClassDecl_5_1_Assignment_eGenericSuperTypes(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEClassDecl().ele51AssignmentEGenericSuperTypes();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eGenericSuperTypes",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eGenericSuperTypes");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEGenericTypeReferenceDecl().getRule().getType().getType())) {
				Solution s = new EGenericTypeReferenceDecl_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EClassDecl_5_2_Group extends GroupToken {
	
	public EClassDecl_5_2_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEClassDecl().ele52Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EClassDecl_5_2_1_Assignment_eGenericSuperTypes(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EClassDecl_5_2_0_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class EClassDecl_5_2_0_Keyword extends KeywordToken  {
	
	public EClassDecl_5_2_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEClassDecl().ele520KeywordComma();
	}	
}

// not supported
protected class EClassDecl_5_2_1_Assignment_eGenericSuperTypes extends AssignmentToken  {
	
	public EClassDecl_5_2_1_Assignment_eGenericSuperTypes(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEClassDecl().ele521AssignmentEGenericSuperTypes();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eGenericSuperTypes",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eGenericSuperTypes");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEGenericTypeReferenceDecl().getRule().getType().getType())) {
				Solution s = new EGenericTypeReferenceDecl_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}



// not supported
protected class EClassDecl_6_Group extends GroupToken {
	
	public EClassDecl_6_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEClassDecl().ele6Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EClassDecl_6_1_Assignment_instanceClassName(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EClassDecl_6_0_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class EClassDecl_6_0_Keyword extends KeywordToken  {
	
	public EClassDecl_6_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEClassDecl().ele60KeywordColon();
	}	
}

// not supported
protected class EClassDecl_6_1_Assignment_instanceClassName extends AssignmentToken  {
	
	public EClassDecl_6_1_Assignment_instanceClassName(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEClassDecl().ele61AssignmentInstanceClassName();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("instanceClassName",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("instanceClassName");

		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for datatype rule
			type = AssignmentType.PRC;
			element = grammarAccess.prEClassDecl().ele610ParserRuleCallSTRING_OR_QID();
			return new Solution(obj);
		}

		return null;
	}
}


// not supported
protected class EClassDecl_7_Keyword extends KeywordToken  {
	
	public EClassDecl_7_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEClassDecl().ele7KeywordLeftCurlyBracket();
	}	
}

// not supported
protected class EClassDecl_8_Alternatives extends AlternativesToken {

	public EClassDecl_8_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.prEClassDecl().ele8Alternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new EClassDecl_8_0_Assignment_eStructuralFeatures(current, this);
			case 1: return new EClassDecl_8_1_Assignment_eOperations(current, this);
			default: return null;
		}
	}
}

// not supported
protected class EClassDecl_8_0_Assignment_eStructuralFeatures extends AssignmentToken  {
	
	public EClassDecl_8_0_Assignment_eStructuralFeatures(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEClassDecl().ele80AssignmentEStructuralFeatures();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eStructuralFeatures",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eStructuralFeatures");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEStructuralFeatureDecl().getRule().getType().getType())) {
				Solution s = new EStructuralFeatureDecl_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EClassDecl_8_1_Assignment_eOperations extends AssignmentToken  {
	
	public EClassDecl_8_1_Assignment_eOperations(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEClassDecl().ele81AssignmentEOperations();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eOperations",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eOperations");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEOperationDecl().getRule().getType().getType())) {
				Solution s = new EOperationDecl_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}


// not supported
protected class EClassDecl_9_Keyword extends KeywordToken  {
	
	public EClassDecl_9_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEClassDecl().ele9KeywordRightCurlyBracket();
	}	
}


/************ end Rule EClassDecl ****************/


/************ begin Rule EStructuralFeatureDecl ****************
 *
 * not supported
 *
 **/


// not supported
protected class EStructuralFeatureDecl_Alternatives extends AlternativesToken {

	public EStructuralFeatureDecl_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.prEStructuralFeatureDecl().eleAlternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new EStructuralFeatureDecl_0_RuleCall_EAttributeDecl(current, this);
			case 1: return new EStructuralFeatureDecl_1_RuleCall_EReferenceDecl(current, this);
			default: return null;
		}
	}
}

// not supported
protected class EStructuralFeatureDecl_0_RuleCall_EAttributeDecl extends RuleCallToken {
	
	public EStructuralFeatureDecl_0_RuleCall_EAttributeDecl(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.prEStructuralFeatureDecl().ele0ParserRuleCallEAttributeDecl();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(EAttributeDecl_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.prEAttributeDecl().getRule().getType().getType())) return null;
		return new EAttributeDecl_Group(current, this).firstSolution();
	}
}

// not supported
protected class EStructuralFeatureDecl_1_RuleCall_EReferenceDecl extends RuleCallToken {
	
	public EStructuralFeatureDecl_1_RuleCall_EReferenceDecl(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.prEStructuralFeatureDecl().ele1ParserRuleCallEReferenceDecl();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(EReferenceDecl_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.prEReferenceDecl().getRule().getType().getType())) return null;
		return new EReferenceDecl_Group(current, this).firstSolution();
	}
}


/************ end Rule EStructuralFeatureDecl ****************/


/************ begin Rule EAttributeDecl ****************
 *
 * not supported
 *
 **/


// not supported
protected class EAttributeDecl_Group extends GroupToken {
	
	public EAttributeDecl_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEAttributeDecl().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EAttributeDecl_7_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EAttributeDecl_6_Group(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new EAttributeDecl_5_Assignment_name(s2.getCurrent(), s2.getPredecessor()).firstSolution();
		while(s3 != null) {
			Solution s4 = new EAttributeDecl_4_Group(s3.getCurrent(), s3.getPredecessor()).firstSolution();
		while(s4 != null) {
			Solution s5 = new EAttributeDecl_3_Assignment_eGenericType(s4.getCurrent(), s4.getPredecessor()).firstSolution();
		while(s5 != null) {
			Solution s6 = new EAttributeDecl_2_Keyword_attr(s5.getCurrent(), s5.getPredecessor()).firstSolution();
		while(s6 != null) {
			Solution s7 = new EAttributeDecl_1_Alternatives(s6.getCurrent(), s6.getPredecessor()).firstSolution();
		while(s7 != null) {
			Solution s8 = new EAttributeDecl_0_Assignment_eAnnotations(s7.getCurrent(), s7.getPredecessor()).firstSolution();
			if(s8 != null) {
				last = s8.getPredecessor();
				return s8;
			} else {
				s7 = s7.getPredecessor().nextSolution(this,s7);
			}
		}
			s6 = s6.getPredecessor().nextSolution(this,s6);
		}
			s5 = s5.getPredecessor().nextSolution(this,s5);
		}
			s4 = s4.getPredecessor().nextSolution(this,s4);
		}
			s3 = s3.getPredecessor().nextSolution(this,s3);
		}
			s2 = s2.getPredecessor().nextSolution(this,s2);
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class EAttributeDecl_0_Assignment_eAnnotations extends AssignmentToken  {
	
	public EAttributeDecl_0_Assignment_eAnnotations(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele0AssignmentEAnnotations();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eAnnotations",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eAnnotations");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEAnnotationDecl().getRule().getType().getType())) {
				Solution s = new EAnnotationDecl_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EAttributeDecl_1_Alternatives extends AlternativesToken {

	public EAttributeDecl_1_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele1Alternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new EAttributeDecl_1_0_Assignment_iD(current, this);
			case 1: return new EAttributeDecl_1_1_Assignment_unique(current, this);
			case 2: return new EAttributeDecl_1_2_Assignment_ordered(current, this);
			case 3: return new EAttributeDecl_1_3_Assignment_changeable(current, this);
			case 4: return new EAttributeDecl_1_4_Assignment_volatile(current, this);
			case 5: return new EAttributeDecl_1_5_Assignment_transient(current, this);
			case 6: return new EAttributeDecl_1_6_Assignment_unsettable(current, this);
			case 7: return new EAttributeDecl_1_7_Assignment_derived(current, this);
			default: return null;
		}
	}
}

// not supported
protected class EAttributeDecl_1_0_Assignment_iD extends AssignmentToken  {
	
	public EAttributeDecl_1_0_Assignment_iD(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele10AssignmentID();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("iD",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("iD");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prEAttributeDecl().ele100KeywordID();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class EAttributeDecl_1_1_Assignment_unique extends AssignmentToken  {
	
	public EAttributeDecl_1_1_Assignment_unique(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele11AssignmentUnique();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("unique",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unique");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prEAttributeDecl().ele110KeywordBag();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class EAttributeDecl_1_2_Assignment_ordered extends AssignmentToken  {
	
	public EAttributeDecl_1_2_Assignment_ordered(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele12AssignmentOrdered();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("ordered",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ordered");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prEAttributeDecl().ele120KeywordRandom();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class EAttributeDecl_1_3_Assignment_changeable extends AssignmentToken  {
	
	public EAttributeDecl_1_3_Assignment_changeable(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele13AssignmentChangeable();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("changeable",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("changeable");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prEAttributeDecl().ele130KeywordReadonly();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class EAttributeDecl_1_4_Assignment_volatile extends AssignmentToken  {
	
	public EAttributeDecl_1_4_Assignment_volatile(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele14AssignmentVolatile();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("volatile",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("volatile");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prEAttributeDecl().ele140KeywordVolatile();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class EAttributeDecl_1_5_Assignment_transient extends AssignmentToken  {
	
	public EAttributeDecl_1_5_Assignment_transient(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele15AssignmentTransient();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("transient",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("transient");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prEAttributeDecl().ele150KeywordTransient();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class EAttributeDecl_1_6_Assignment_unsettable extends AssignmentToken  {
	
	public EAttributeDecl_1_6_Assignment_unsettable(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele16AssignmentUnsettable();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("unsettable",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unsettable");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prEAttributeDecl().ele160KeywordUnsettable();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class EAttributeDecl_1_7_Assignment_derived extends AssignmentToken  {
	
	public EAttributeDecl_1_7_Assignment_derived(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele17AssignmentDerived();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("derived",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("derived");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prEAttributeDecl().ele170KeywordDerived();
			return new Solution(obj);
		}

		return null;
	}
}


// not supported
protected class EAttributeDecl_2_Keyword_attr extends KeywordToken  {
	
	public EAttributeDecl_2_Keyword_attr(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele2KeywordAttr();
	}	
}

// not supported
protected class EAttributeDecl_3_Assignment_eGenericType extends AssignmentToken  {
	
	public EAttributeDecl_3_Assignment_eGenericType(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele3AssignmentEGenericType();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eGenericType",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eGenericType");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEGenericTypeReferenceDecl().getRule().getType().getType())) {
				Solution s = new EGenericTypeReferenceDecl_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EAttributeDecl_4_Group extends GroupToken {
	
	public EAttributeDecl_4_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele4Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EAttributeDecl_4_3_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EAttributeDecl_4_2_Group(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new EAttributeDecl_4_1_Assignment_lowerBound(s2.getCurrent(), s2.getPredecessor()).firstSolution();
		while(s3 != null) {
			Solution s4 = new EAttributeDecl_4_0_Keyword(s3.getCurrent(), s3.getPredecessor()).firstSolution();
			if(s4 != null) {
				last = s4.getPredecessor();
				return s4;
			} else {
				s3 = s3.getPredecessor().nextSolution(this,s3);
			}
		}
			s2 = s2.getPredecessor().nextSolution(this,s2);
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class EAttributeDecl_4_0_Keyword extends KeywordToken  {
	
	public EAttributeDecl_4_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele40KeywordLeftSquareBracket();
	}	
}

// not supported
protected class EAttributeDecl_4_1_Assignment_lowerBound extends AssignmentToken  {
	
	public EAttributeDecl_4_1_Assignment_lowerBound(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele41AssignmentLowerBound();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("lowerBound",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("lowerBound");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prEAttributeDecl().ele410TerminalRuleCallINT();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class EAttributeDecl_4_2_Group extends GroupToken {
	
	public EAttributeDecl_4_2_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele42Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EAttributeDecl_4_2_1_Assignment_upperBound(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EAttributeDecl_4_2_0_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class EAttributeDecl_4_2_0_Keyword extends KeywordToken  {
	
	public EAttributeDecl_4_2_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele420KeywordFullStopFullStop();
	}	
}

// not supported
protected class EAttributeDecl_4_2_1_Assignment_upperBound extends AssignmentToken  {
	
	public EAttributeDecl_4_2_1_Assignment_upperBound(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele421AssignmentUpperBound();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("upperBound",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("upperBound");

		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for datatype rule
			type = AssignmentType.PRC;
			element = grammarAccess.prEAttributeDecl().ele4210ParserRuleCallSINT();
			return new Solution(obj);
		}

		return null;
	}
}


// not supported
protected class EAttributeDecl_4_3_Keyword extends KeywordToken  {
	
	public EAttributeDecl_4_3_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele43KeywordRightSquareBracket();
	}	
}


// not supported
protected class EAttributeDecl_5_Assignment_name extends AssignmentToken  {
	
	public EAttributeDecl_5_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele5AssignmentName();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prEAttributeDecl().ele50TerminalRuleCallID();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class EAttributeDecl_6_Group extends GroupToken {
	
	public EAttributeDecl_6_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele6Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EAttributeDecl_6_1_Assignment_defaultValueLiteral(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EAttributeDecl_6_0_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class EAttributeDecl_6_0_Keyword extends KeywordToken  {
	
	public EAttributeDecl_6_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele60KeywordEqualsSign();
	}	
}

// not supported
protected class EAttributeDecl_6_1_Assignment_defaultValueLiteral extends AssignmentToken  {
	
	public EAttributeDecl_6_1_Assignment_defaultValueLiteral(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele61AssignmentDefaultValueLiteral();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("defaultValueLiteral",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("defaultValueLiteral");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prEAttributeDecl().ele610TerminalRuleCallSTRING();
			return new Solution(obj);
		}
		return null;
	}
}


// not supported
protected class EAttributeDecl_7_Keyword extends KeywordToken  {
	
	public EAttributeDecl_7_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEAttributeDecl().ele7KeywordSemicolon();
	}	
}


/************ end Rule EAttributeDecl ****************/


/************ begin Rule EReferenceDecl ****************
 *
 * not supported
 *
 **/


// not supported
protected class EReferenceDecl_Group extends GroupToken {
	
	public EReferenceDecl_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEReferenceDecl().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EReferenceDecl_7_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EReferenceDecl_6_Assignment_name(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new EReferenceDecl_5_Group(s2.getCurrent(), s2.getPredecessor()).firstSolution();
		while(s3 != null) {
			Solution s4 = new EReferenceDecl_4_Group(s3.getCurrent(), s3.getPredecessor()).firstSolution();
		while(s4 != null) {
			Solution s5 = new EReferenceDecl_3_Assignment_eGenericType(s4.getCurrent(), s4.getPredecessor()).firstSolution();
		while(s5 != null) {
			Solution s6 = new EReferenceDecl_2_Alternatives(s5.getCurrent(), s5.getPredecessor()).firstSolution();
		while(s6 != null) {
			Solution s7 = new EReferenceDecl_1_Alternatives(s6.getCurrent(), s6.getPredecessor()).firstSolution();
		while(s7 != null) {
			Solution s8 = new EReferenceDecl_0_Assignment_eAnnotations(s7.getCurrent(), s7.getPredecessor()).firstSolution();
			if(s8 != null) {
				last = s8.getPredecessor();
				return s8;
			} else {
				s7 = s7.getPredecessor().nextSolution(this,s7);
			}
		}
			s6 = s6.getPredecessor().nextSolution(this,s6);
		}
			s5 = s5.getPredecessor().nextSolution(this,s5);
		}
			s4 = s4.getPredecessor().nextSolution(this,s4);
		}
			s3 = s3.getPredecessor().nextSolution(this,s3);
		}
			s2 = s2.getPredecessor().nextSolution(this,s2);
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class EReferenceDecl_0_Assignment_eAnnotations extends AssignmentToken  {
	
	public EReferenceDecl_0_Assignment_eAnnotations(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele0AssignmentEAnnotations();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eAnnotations",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eAnnotations");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEAnnotationDecl().getRule().getType().getType())) {
				Solution s = new EAnnotationDecl_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EReferenceDecl_1_Alternatives extends AlternativesToken {

	public EReferenceDecl_1_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele1Alternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new EReferenceDecl_1_0_Assignment_resolveProxies(current, this);
			case 1: return new EReferenceDecl_1_1_Assignment_unique(current, this);
			case 2: return new EReferenceDecl_1_2_Assignment_ordered(current, this);
			case 3: return new EReferenceDecl_1_3_Assignment_changeable(current, this);
			case 4: return new EReferenceDecl_1_4_Assignment_volatile(current, this);
			case 5: return new EReferenceDecl_1_5_Assignment_transient(current, this);
			case 6: return new EReferenceDecl_1_6_Assignment_unsettable(current, this);
			case 7: return new EReferenceDecl_1_7_Assignment_derived(current, this);
			default: return null;
		}
	}
}

// not supported
protected class EReferenceDecl_1_0_Assignment_resolveProxies extends AssignmentToken  {
	
	public EReferenceDecl_1_0_Assignment_resolveProxies(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele10AssignmentResolveProxies();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("resolveProxies",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("resolveProxies");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prEReferenceDecl().ele100KeywordLocal();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class EReferenceDecl_1_1_Assignment_unique extends AssignmentToken  {
	
	public EReferenceDecl_1_1_Assignment_unique(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele11AssignmentUnique();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("unique",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unique");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prEReferenceDecl().ele110KeywordBag();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class EReferenceDecl_1_2_Assignment_ordered extends AssignmentToken  {
	
	public EReferenceDecl_1_2_Assignment_ordered(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele12AssignmentOrdered();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("ordered",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ordered");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prEReferenceDecl().ele120KeywordRandom();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class EReferenceDecl_1_3_Assignment_changeable extends AssignmentToken  {
	
	public EReferenceDecl_1_3_Assignment_changeable(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele13AssignmentChangeable();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("changeable",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("changeable");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prEReferenceDecl().ele130KeywordReadonly();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class EReferenceDecl_1_4_Assignment_volatile extends AssignmentToken  {
	
	public EReferenceDecl_1_4_Assignment_volatile(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele14AssignmentVolatile();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("volatile",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("volatile");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prEReferenceDecl().ele140KeywordVolatile();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class EReferenceDecl_1_5_Assignment_transient extends AssignmentToken  {
	
	public EReferenceDecl_1_5_Assignment_transient(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele15AssignmentTransient();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("transient",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("transient");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prEReferenceDecl().ele150KeywordTransient();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class EReferenceDecl_1_6_Assignment_unsettable extends AssignmentToken  {
	
	public EReferenceDecl_1_6_Assignment_unsettable(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele16AssignmentUnsettable();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("unsettable",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unsettable");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prEReferenceDecl().ele160KeywordUnsettable();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class EReferenceDecl_1_7_Assignment_derived extends AssignmentToken  {
	
	public EReferenceDecl_1_7_Assignment_derived(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele17AssignmentDerived();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("derived",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("derived");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prEReferenceDecl().ele170KeywordDerived();
			return new Solution(obj);
		}

		return null;
	}
}


// not supported
protected class EReferenceDecl_2_Alternatives extends AlternativesToken {

	public EReferenceDecl_2_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele2Alternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new EReferenceDecl_2_0_Assignment_containment(current, this);
			case 1: return new EReferenceDecl_2_1_Keyword_ref(current, this);
			default: return null;
		}
	}
}

// not supported
protected class EReferenceDecl_2_0_Assignment_containment extends AssignmentToken  {
	
	public EReferenceDecl_2_0_Assignment_containment(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele20AssignmentContainment();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("containment",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("containment");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prEReferenceDecl().ele200KeywordVal();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class EReferenceDecl_2_1_Keyword_ref extends KeywordToken  {
	
	public EReferenceDecl_2_1_Keyword_ref(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele21KeywordRef();
	}	
}


// not supported
protected class EReferenceDecl_3_Assignment_eGenericType extends AssignmentToken  {
	
	public EReferenceDecl_3_Assignment_eGenericType(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele3AssignmentEGenericType();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eGenericType",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eGenericType");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEGenericTypeReferenceDecl().getRule().getType().getType())) {
				Solution s = new EGenericTypeReferenceDecl_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EReferenceDecl_4_Group extends GroupToken {
	
	public EReferenceDecl_4_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele4Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EReferenceDecl_4_3_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EReferenceDecl_4_2_Group(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new EReferenceDecl_4_1_Assignment_lowerBound(s2.getCurrent(), s2.getPredecessor()).firstSolution();
		while(s3 != null) {
			Solution s4 = new EReferenceDecl_4_0_Keyword(s3.getCurrent(), s3.getPredecessor()).firstSolution();
			if(s4 != null) {
				last = s4.getPredecessor();
				return s4;
			} else {
				s3 = s3.getPredecessor().nextSolution(this,s3);
			}
		}
			s2 = s2.getPredecessor().nextSolution(this,s2);
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class EReferenceDecl_4_0_Keyword extends KeywordToken  {
	
	public EReferenceDecl_4_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele40KeywordLeftSquareBracket();
	}	
}

// not supported
protected class EReferenceDecl_4_1_Assignment_lowerBound extends AssignmentToken  {
	
	public EReferenceDecl_4_1_Assignment_lowerBound(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele41AssignmentLowerBound();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("lowerBound",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("lowerBound");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prEReferenceDecl().ele410TerminalRuleCallINT();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class EReferenceDecl_4_2_Group extends GroupToken {
	
	public EReferenceDecl_4_2_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele42Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EReferenceDecl_4_2_1_Assignment_upperBound(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EReferenceDecl_4_2_0_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class EReferenceDecl_4_2_0_Keyword extends KeywordToken  {
	
	public EReferenceDecl_4_2_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele420KeywordFullStopFullStop();
	}	
}

// not supported
protected class EReferenceDecl_4_2_1_Assignment_upperBound extends AssignmentToken  {
	
	public EReferenceDecl_4_2_1_Assignment_upperBound(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele421AssignmentUpperBound();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("upperBound",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("upperBound");

		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for datatype rule
			type = AssignmentType.PRC;
			element = grammarAccess.prEReferenceDecl().ele4210ParserRuleCallSINT();
			return new Solution(obj);
		}

		return null;
	}
}


// not supported
protected class EReferenceDecl_4_3_Keyword extends KeywordToken  {
	
	public EReferenceDecl_4_3_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele43KeywordRightSquareBracket();
	}	
}


// not supported
protected class EReferenceDecl_5_Group extends GroupToken {
	
	public EReferenceDecl_5_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele5Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EReferenceDecl_5_1_Assignment_eOpposite(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EReferenceDecl_5_0_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class EReferenceDecl_5_0_Keyword extends KeywordToken  {
	
	public EReferenceDecl_5_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele50KeywordNumberSign();
	}	
}

// not supported
protected class EReferenceDecl_5_1_Assignment_eOpposite extends AssignmentToken  {
	
	public EReferenceDecl_5_1_Assignment_eOpposite(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele51AssignmentEOpposite();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eOpposite",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eOpposite");
		if(value instanceof EObject) { // xtext::CrossReference
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEReferenceDecl().ele510CrossReferenceEStringEReference().getType().getType())) {
				type = AssignmentType.CR;
				element = grammarAccess.prEReferenceDecl().ele510CrossReferenceEStringEReference(); 
				return new Solution(obj);
			}
		}
		return null;
	}
}


// not supported
protected class EReferenceDecl_6_Assignment_name extends AssignmentToken  {
	
	public EReferenceDecl_6_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele6AssignmentName();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prEReferenceDecl().ele60TerminalRuleCallID();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class EReferenceDecl_7_Keyword extends KeywordToken  {
	
	public EReferenceDecl_7_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEReferenceDecl().ele7KeywordSemicolon();
	}	
}


/************ end Rule EReferenceDecl ****************/


/************ begin Rule EEnumDecl ****************
 *
 * not supported
 *
 **/


// not supported
protected class EEnumDecl_Group extends GroupToken {
	
	public EEnumDecl_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEEnumDecl().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EEnumDecl_5_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EEnumDecl_4_Assignment_eLiterals(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new EEnumDecl_3_Keyword(s2.getCurrent(), s2.getPredecessor()).firstSolution();
		while(s3 != null) {
			Solution s4 = new EEnumDecl_2_Assignment_name(s3.getCurrent(), s3.getPredecessor()).firstSolution();
		while(s4 != null) {
			Solution s5 = new EEnumDecl_1_Keyword_enum(s4.getCurrent(), s4.getPredecessor()).firstSolution();
		while(s5 != null) {
			Solution s6 = new EEnumDecl_0_Assignment_eAnnotations(s5.getCurrent(), s5.getPredecessor()).firstSolution();
			if(s6 != null) {
				last = s6.getPredecessor();
				return s6;
			} else {
				s5 = s5.getPredecessor().nextSolution(this,s5);
			}
		}
			s4 = s4.getPredecessor().nextSolution(this,s4);
		}
			s3 = s3.getPredecessor().nextSolution(this,s3);
		}
			s2 = s2.getPredecessor().nextSolution(this,s2);
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class EEnumDecl_0_Assignment_eAnnotations extends AssignmentToken  {
	
	public EEnumDecl_0_Assignment_eAnnotations(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEEnumDecl().ele0AssignmentEAnnotations();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eAnnotations",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eAnnotations");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEAnnotationDecl().getRule().getType().getType())) {
				Solution s = new EAnnotationDecl_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EEnumDecl_1_Keyword_enum extends KeywordToken  {
	
	public EEnumDecl_1_Keyword_enum(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEEnumDecl().ele1KeywordEnum();
	}	
}

// not supported
protected class EEnumDecl_2_Assignment_name extends AssignmentToken  {
	
	public EEnumDecl_2_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEEnumDecl().ele2AssignmentName();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prEEnumDecl().ele20TerminalRuleCallID();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class EEnumDecl_3_Keyword extends KeywordToken  {
	
	public EEnumDecl_3_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEEnumDecl().ele3KeywordLeftCurlyBracket();
	}	
}

// not supported
protected class EEnumDecl_4_Assignment_eLiterals extends AssignmentToken  {
	
	public EEnumDecl_4_Assignment_eLiterals(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEEnumDecl().ele4AssignmentELiterals();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eLiterals",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eLiterals");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEEnumLiteralDecl().getRule().getType().getType())) {
				Solution s = new EEnumLiteralDecl_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EEnumDecl_5_Keyword extends KeywordToken  {
	
	public EEnumDecl_5_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEEnumDecl().ele5KeywordRightCurlyBracket();
	}	
}


/************ end Rule EEnumDecl ****************/


/************ begin Rule EEnumLiteralDecl ****************
 *
 * not supported
 *
 **/


// not supported
protected class EEnumLiteralDecl_Group extends GroupToken {
	
	public EEnumLiteralDecl_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEEnumLiteralDecl().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EEnumLiteralDecl_4_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EEnumLiteralDecl_3_Assignment_literal(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new EEnumLiteralDecl_2_Group(s2.getCurrent(), s2.getPredecessor()).firstSolution();
		while(s3 != null) {
			Solution s4 = new EEnumLiteralDecl_1_Assignment_name(s3.getCurrent(), s3.getPredecessor()).firstSolution();
		while(s4 != null) {
			Solution s5 = new EEnumLiteralDecl_0_Assignment_eAnnotations(s4.getCurrent(), s4.getPredecessor()).firstSolution();
			if(s5 != null) {
				last = s5.getPredecessor();
				return s5;
			} else {
				s4 = s4.getPredecessor().nextSolution(this,s4);
			}
		}
			s3 = s3.getPredecessor().nextSolution(this,s3);
		}
			s2 = s2.getPredecessor().nextSolution(this,s2);
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class EEnumLiteralDecl_0_Assignment_eAnnotations extends AssignmentToken  {
	
	public EEnumLiteralDecl_0_Assignment_eAnnotations(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEEnumLiteralDecl().ele0AssignmentEAnnotations();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eAnnotations",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eAnnotations");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEAnnotationDecl().getRule().getType().getType())) {
				Solution s = new EAnnotationDecl_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EEnumLiteralDecl_1_Assignment_name extends AssignmentToken  {
	
	public EEnumLiteralDecl_1_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEEnumLiteralDecl().ele1AssignmentName();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prEEnumLiteralDecl().ele10TerminalRuleCallID();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class EEnumLiteralDecl_2_Group extends GroupToken {
	
	public EEnumLiteralDecl_2_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEEnumLiteralDecl().ele2Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EEnumLiteralDecl_2_1_Assignment_value(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EEnumLiteralDecl_2_0_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class EEnumLiteralDecl_2_0_Keyword extends KeywordToken  {
	
	public EEnumLiteralDecl_2_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEEnumLiteralDecl().ele20KeywordEqualsSign();
	}	
}

// not supported
protected class EEnumLiteralDecl_2_1_Assignment_value extends AssignmentToken  {
	
	public EEnumLiteralDecl_2_1_Assignment_value(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEEnumLiteralDecl().ele21AssignmentValue();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("value",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prEEnumLiteralDecl().ele210TerminalRuleCallINT();
			return new Solution(obj);
		}
		return null;
	}
}


// not supported
protected class EEnumLiteralDecl_3_Assignment_literal extends AssignmentToken  {
	
	public EEnumLiteralDecl_3_Assignment_literal(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEEnumLiteralDecl().ele3AssignmentLiteral();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("literal",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("literal");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prEEnumLiteralDecl().ele30TerminalRuleCallSTRING();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class EEnumLiteralDecl_4_Keyword extends KeywordToken  {
	
	public EEnumLiteralDecl_4_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEEnumLiteralDecl().ele4KeywordSemicolon();
	}	
}


/************ end Rule EEnumLiteralDecl ****************/


/************ begin Rule ETypeParameterDecl ****************
 *
 * not supported
 *
 **/


// not supported
protected class ETypeParameterDecl_Group extends GroupToken {
	
	public ETypeParameterDecl_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prETypeParameterDecl().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new ETypeParameterDecl_1_Group(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new ETypeParameterDecl_0_Assignment_name(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class ETypeParameterDecl_0_Assignment_name extends AssignmentToken  {
	
	public ETypeParameterDecl_0_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prETypeParameterDecl().ele0AssignmentName();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prETypeParameterDecl().ele00TerminalRuleCallID();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class ETypeParameterDecl_1_Group extends GroupToken {
	
	public ETypeParameterDecl_1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prETypeParameterDecl().ele1Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new ETypeParameterDecl_1_1_Assignment_eBounds(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new ETypeParameterDecl_1_0_Keyword_extends(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class ETypeParameterDecl_1_0_Keyword_extends extends KeywordToken  {
	
	public ETypeParameterDecl_1_0_Keyword_extends(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prETypeParameterDecl().ele10KeywordExtends();
	}	
}

// not supported
protected class ETypeParameterDecl_1_1_Assignment_eBounds extends AssignmentToken  {
	
	public ETypeParameterDecl_1_1_Assignment_eBounds(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prETypeParameterDecl().ele11AssignmentEBounds();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eBounds",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eBounds");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEGenericTypeDecl().getRule().getType().getType())) {
				Solution s = new EGenericTypeDecl_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}



/************ end Rule ETypeParameterDecl ****************/


/************ begin Rule EGenericTypeReferenceDecl ****************
 *
 * not supported
 *
 **/


// not supported
protected class EGenericTypeReferenceDecl_Alternatives extends AlternativesToken {

	public EGenericTypeReferenceDecl_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.prEGenericTypeReferenceDecl().eleAlternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new EGenericTypeReferenceDecl_0_Group(current, this);
			case 1: return new EGenericTypeReferenceDecl_1_Group(current, this);
			default: return null;
		}
	}
}

// not supported
protected class EGenericTypeReferenceDecl_0_Group extends GroupToken {
	
	public EGenericTypeReferenceDecl_0_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEGenericTypeReferenceDecl().ele0Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EGenericTypeReferenceDecl_0_1_Group(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EGenericTypeReferenceDecl_0_0_Assignment_eClassifier(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class EGenericTypeReferenceDecl_0_0_Assignment_eClassifier extends AssignmentToken  {
	
	public EGenericTypeReferenceDecl_0_0_Assignment_eClassifier(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEGenericTypeReferenceDecl().ele00AssignmentEClassifier();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eClassifier",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eClassifier");
		if(value instanceof EObject) { // xtext::CrossReference
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEGenericTypeReferenceDecl().ele000CrossReferenceEStringEClassifier().getType().getType())) {
				type = AssignmentType.CR;
				element = grammarAccess.prEGenericTypeReferenceDecl().ele000CrossReferenceEStringEClassifier(); 
				return new Solution(obj);
			}
		}
		return null;
	}
}

// not supported
protected class EGenericTypeReferenceDecl_0_1_Group extends GroupToken {
	
	public EGenericTypeReferenceDecl_0_1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEGenericTypeReferenceDecl().ele01Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EGenericTypeReferenceDecl_0_1_3_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EGenericTypeReferenceDecl_0_1_2_Group(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new EGenericTypeReferenceDecl_0_1_1_Assignment_eTypeArguments(s2.getCurrent(), s2.getPredecessor()).firstSolution();
		while(s3 != null) {
			Solution s4 = new EGenericTypeReferenceDecl_0_1_0_Keyword(s3.getCurrent(), s3.getPredecessor()).firstSolution();
			if(s4 != null) {
				last = s4.getPredecessor();
				return s4;
			} else {
				s3 = s3.getPredecessor().nextSolution(this,s3);
			}
		}
			s2 = s2.getPredecessor().nextSolution(this,s2);
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class EGenericTypeReferenceDecl_0_1_0_Keyword extends KeywordToken  {
	
	public EGenericTypeReferenceDecl_0_1_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEGenericTypeReferenceDecl().ele010KeywordLessThanSign();
	}	
}

// not supported
protected class EGenericTypeReferenceDecl_0_1_1_Assignment_eTypeArguments extends AssignmentToken  {
	
	public EGenericTypeReferenceDecl_0_1_1_Assignment_eTypeArguments(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEGenericTypeReferenceDecl().ele011AssignmentETypeArguments();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eTypeArguments",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eTypeArguments");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEGenericTypeDecl().getRule().getType().getType())) {
				Solution s = new EGenericTypeDecl_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EGenericTypeReferenceDecl_0_1_2_Group extends GroupToken {
	
	public EGenericTypeReferenceDecl_0_1_2_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEGenericTypeReferenceDecl().ele012Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EGenericTypeReferenceDecl_0_1_2_1_Assignment_eTypeArguments(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EGenericTypeReferenceDecl_0_1_2_0_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class EGenericTypeReferenceDecl_0_1_2_0_Keyword extends KeywordToken  {
	
	public EGenericTypeReferenceDecl_0_1_2_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEGenericTypeReferenceDecl().ele0120KeywordComma();
	}	
}

// not supported
protected class EGenericTypeReferenceDecl_0_1_2_1_Assignment_eTypeArguments extends AssignmentToken  {
	
	public EGenericTypeReferenceDecl_0_1_2_1_Assignment_eTypeArguments(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEGenericTypeReferenceDecl().ele0121AssignmentETypeArguments();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eTypeArguments",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eTypeArguments");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEGenericTypeDecl().getRule().getType().getType())) {
				Solution s = new EGenericTypeDecl_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}


// not supported
protected class EGenericTypeReferenceDecl_0_1_3_Keyword extends KeywordToken  {
	
	public EGenericTypeReferenceDecl_0_1_3_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEGenericTypeReferenceDecl().ele013KeywordGreaterThanSign();
	}	
}



// not supported
protected class EGenericTypeReferenceDecl_1_Group extends GroupToken {
	
	public EGenericTypeReferenceDecl_1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEGenericTypeReferenceDecl().ele1Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EGenericTypeReferenceDecl_1_1_Assignment_eTypeParameter(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EGenericTypeReferenceDecl_1_0_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class EGenericTypeReferenceDecl_1_0_Keyword extends KeywordToken  {
	
	public EGenericTypeReferenceDecl_1_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEGenericTypeReferenceDecl().ele10KeywordNumberSign();
	}	
}

// not supported
protected class EGenericTypeReferenceDecl_1_1_Assignment_eTypeParameter extends AssignmentToken  {
	
	public EGenericTypeReferenceDecl_1_1_Assignment_eTypeParameter(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEGenericTypeReferenceDecl().ele11AssignmentETypeParameter();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eTypeParameter",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eTypeParameter");
		if(value instanceof EObject) { // xtext::CrossReference
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEGenericTypeReferenceDecl().ele110CrossReferenceEStringETypeParameter().getType().getType())) {
				type = AssignmentType.CR;
				element = grammarAccess.prEGenericTypeReferenceDecl().ele110CrossReferenceEStringETypeParameter(); 
				return new Solution(obj);
			}
		}
		return null;
	}
}



/************ end Rule EGenericTypeReferenceDecl ****************/


/************ begin Rule EGenericTypeDecl ****************
 *
 * not supported
 *
 **/


// not supported
protected class EGenericTypeDecl_Alternatives extends AlternativesToken {

	public EGenericTypeDecl_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.prEGenericTypeDecl().eleAlternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new EGenericTypeDecl_0_Group(current, this);
			case 1: return new EGenericTypeDecl_1_Group(current, this);
			case 2: return new EGenericTypeDecl_2_Group(current, this);
			default: return null;
		}
	}
}

// not supported
protected class EGenericTypeDecl_0_Group extends GroupToken {
	
	public EGenericTypeDecl_0_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEGenericTypeDecl().ele0Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EGenericTypeDecl_0_1_Group(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EGenericTypeDecl_0_0_Assignment_eClassifier(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class EGenericTypeDecl_0_0_Assignment_eClassifier extends AssignmentToken  {
	
	public EGenericTypeDecl_0_0_Assignment_eClassifier(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEGenericTypeDecl().ele00AssignmentEClassifier();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eClassifier",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eClassifier");
		if(value instanceof EObject) { // xtext::CrossReference
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEGenericTypeDecl().ele000CrossReferenceEStringEClassifier().getType().getType())) {
				type = AssignmentType.CR;
				element = grammarAccess.prEGenericTypeDecl().ele000CrossReferenceEStringEClassifier(); 
				return new Solution(obj);
			}
		}
		return null;
	}
}

// not supported
protected class EGenericTypeDecl_0_1_Group extends GroupToken {
	
	public EGenericTypeDecl_0_1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEGenericTypeDecl().ele01Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EGenericTypeDecl_0_1_3_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EGenericTypeDecl_0_1_2_Group(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new EGenericTypeDecl_0_1_1_Assignment_eTypeArguments(s2.getCurrent(), s2.getPredecessor()).firstSolution();
		while(s3 != null) {
			Solution s4 = new EGenericTypeDecl_0_1_0_Keyword(s3.getCurrent(), s3.getPredecessor()).firstSolution();
			if(s4 != null) {
				last = s4.getPredecessor();
				return s4;
			} else {
				s3 = s3.getPredecessor().nextSolution(this,s3);
			}
		}
			s2 = s2.getPredecessor().nextSolution(this,s2);
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class EGenericTypeDecl_0_1_0_Keyword extends KeywordToken  {
	
	public EGenericTypeDecl_0_1_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEGenericTypeDecl().ele010KeywordLessThanSign();
	}	
}

// not supported
protected class EGenericTypeDecl_0_1_1_Assignment_eTypeArguments extends AssignmentToken  {
	
	public EGenericTypeDecl_0_1_1_Assignment_eTypeArguments(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEGenericTypeDecl().ele011AssignmentETypeArguments();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eTypeArguments",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eTypeArguments");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEGenericTypeDecl().getRule().getType().getType())) {
				Solution s = new EGenericTypeDecl_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EGenericTypeDecl_0_1_2_Group extends GroupToken {
	
	public EGenericTypeDecl_0_1_2_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEGenericTypeDecl().ele012Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EGenericTypeDecl_0_1_2_1_Assignment_eTypeArguments(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EGenericTypeDecl_0_1_2_0_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class EGenericTypeDecl_0_1_2_0_Keyword extends KeywordToken  {
	
	public EGenericTypeDecl_0_1_2_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEGenericTypeDecl().ele0120KeywordComma();
	}	
}

// not supported
protected class EGenericTypeDecl_0_1_2_1_Assignment_eTypeArguments extends AssignmentToken  {
	
	public EGenericTypeDecl_0_1_2_1_Assignment_eTypeArguments(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEGenericTypeDecl().ele0121AssignmentETypeArguments();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eTypeArguments",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eTypeArguments");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEGenericTypeDecl().getRule().getType().getType())) {
				Solution s = new EGenericTypeDecl_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}


// not supported
protected class EGenericTypeDecl_0_1_3_Keyword extends KeywordToken  {
	
	public EGenericTypeDecl_0_1_3_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEGenericTypeDecl().ele013KeywordGreaterThanSign();
	}	
}



// not supported
protected class EGenericTypeDecl_1_Group extends GroupToken {
	
	public EGenericTypeDecl_1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEGenericTypeDecl().ele1Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EGenericTypeDecl_1_1_Assignment_eTypeParameter(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EGenericTypeDecl_1_0_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class EGenericTypeDecl_1_0_Keyword extends KeywordToken  {
	
	public EGenericTypeDecl_1_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEGenericTypeDecl().ele10KeywordNumberSign();
	}	
}

// not supported
protected class EGenericTypeDecl_1_1_Assignment_eTypeParameter extends AssignmentToken  {
	
	public EGenericTypeDecl_1_1_Assignment_eTypeParameter(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEGenericTypeDecl().ele11AssignmentETypeParameter();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eTypeParameter",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eTypeParameter");
		if(value instanceof EObject) { // xtext::CrossReference
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEGenericTypeDecl().ele110CrossReferenceEStringETypeParameter().getType().getType())) {
				type = AssignmentType.CR;
				element = grammarAccess.prEGenericTypeDecl().ele110CrossReferenceEStringETypeParameter(); 
				return new Solution(obj);
			}
		}
		return null;
	}
}


// not supported
protected class EGenericTypeDecl_2_Group extends GroupToken {
	
	public EGenericTypeDecl_2_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEGenericTypeDecl().ele2Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EGenericTypeDecl_2_1_Alternatives(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EGenericTypeDecl_2_0_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class EGenericTypeDecl_2_0_Keyword extends KeywordToken  {
	
	public EGenericTypeDecl_2_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEGenericTypeDecl().ele20KeywordQuestionMark();
	}	
}

// not supported
protected class EGenericTypeDecl_2_1_Alternatives extends AlternativesToken {

	public EGenericTypeDecl_2_1_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.prEGenericTypeDecl().ele21Alternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new EGenericTypeDecl_2_1_0_Group(current, this);
			case 1: return new EGenericTypeDecl_2_1_1_Group(current, this);
			default: return null;
		}
	}
}

// not supported
protected class EGenericTypeDecl_2_1_0_Group extends GroupToken {
	
	public EGenericTypeDecl_2_1_0_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEGenericTypeDecl().ele210Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EGenericTypeDecl_2_1_0_1_Assignment_eUpperBound(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EGenericTypeDecl_2_1_0_0_Keyword_extends(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class EGenericTypeDecl_2_1_0_0_Keyword_extends extends KeywordToken  {
	
	public EGenericTypeDecl_2_1_0_0_Keyword_extends(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEGenericTypeDecl().ele2100KeywordExtends();
	}	
}

// not supported
protected class EGenericTypeDecl_2_1_0_1_Assignment_eUpperBound extends AssignmentToken  {
	
	public EGenericTypeDecl_2_1_0_1_Assignment_eUpperBound(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEGenericTypeDecl().ele2101AssignmentEUpperBound();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eUpperBound",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eUpperBound");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEGenericTypeDecl().getRule().getType().getType())) {
				Solution s = new EGenericTypeDecl_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}


// not supported
protected class EGenericTypeDecl_2_1_1_Group extends GroupToken {
	
	public EGenericTypeDecl_2_1_1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEGenericTypeDecl().ele211Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EGenericTypeDecl_2_1_1_1_Assignment_eLowerBound(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EGenericTypeDecl_2_1_1_0_Keyword_super(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class EGenericTypeDecl_2_1_1_0_Keyword_super extends KeywordToken  {
	
	public EGenericTypeDecl_2_1_1_0_Keyword_super(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEGenericTypeDecl().ele2110KeywordSuper();
	}	
}

// not supported
protected class EGenericTypeDecl_2_1_1_1_Assignment_eLowerBound extends AssignmentToken  {
	
	public EGenericTypeDecl_2_1_1_1_Assignment_eLowerBound(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEGenericTypeDecl().ele2111AssignmentELowerBound();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eLowerBound",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eLowerBound");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEGenericTypeDecl().getRule().getType().getType())) {
				Solution s = new EGenericTypeDecl_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}





/************ end Rule EGenericTypeDecl ****************/


/************ begin Rule EOperationDecl ****************
 *
 * not supported
 *
 **/


// not supported
protected class EOperationDecl_Group extends GroupToken {
	
	public EOperationDecl_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEOperationDecl().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EOperationDecl_10_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EOperationDecl_9_Group(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new EOperationDecl_8_Keyword(s2.getCurrent(), s2.getPredecessor()).firstSolution();
		while(s3 != null) {
			Solution s4 = new EOperationDecl_7_Group(s3.getCurrent(), s3.getPredecessor()).firstSolution();
		while(s4 != null) {
			Solution s5 = new EOperationDecl_6_Keyword(s4.getCurrent(), s4.getPredecessor()).firstSolution();
		while(s5 != null) {
			Solution s6 = new EOperationDecl_5_Group(s5.getCurrent(), s5.getPredecessor()).firstSolution();
		while(s6 != null) {
			Solution s7 = new EOperationDecl_4_Assignment_name(s6.getCurrent(), s6.getPredecessor()).firstSolution();
		while(s7 != null) {
			Solution s8 = new EOperationDecl_3_Alternatives(s7.getCurrent(), s7.getPredecessor()).firstSolution();
		while(s8 != null) {
			Solution s9 = new EOperationDecl_2_Keyword_op(s8.getCurrent(), s8.getPredecessor()).firstSolution();
		while(s9 != null) {
			Solution s10 = new EOperationDecl_1_Alternatives(s9.getCurrent(), s9.getPredecessor()).firstSolution();
		while(s10 != null) {
			Solution s11 = new EOperationDecl_0_Assignment_eAnnotations(s10.getCurrent(), s10.getPredecessor()).firstSolution();
			if(s11 != null) {
				last = s11.getPredecessor();
				return s11;
			} else {
				s10 = s10.getPredecessor().nextSolution(this,s10);
			}
		}
			s9 = s9.getPredecessor().nextSolution(this,s9);
		}
			s8 = s8.getPredecessor().nextSolution(this,s8);
		}
			s7 = s7.getPredecessor().nextSolution(this,s7);
		}
			s6 = s6.getPredecessor().nextSolution(this,s6);
		}
			s5 = s5.getPredecessor().nextSolution(this,s5);
		}
			s4 = s4.getPredecessor().nextSolution(this,s4);
		}
			s3 = s3.getPredecessor().nextSolution(this,s3);
		}
			s2 = s2.getPredecessor().nextSolution(this,s2);
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class EOperationDecl_0_Assignment_eAnnotations extends AssignmentToken  {
	
	public EOperationDecl_0_Assignment_eAnnotations(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele0AssignmentEAnnotations();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eAnnotations",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eAnnotations");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEAnnotationDecl().getRule().getType().getType())) {
				Solution s = new EAnnotationDecl_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EOperationDecl_1_Alternatives extends AlternativesToken {

	public EOperationDecl_1_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele1Alternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new EOperationDecl_1_0_Assignment_unique(current, this);
			case 1: return new EOperationDecl_1_1_Assignment_ordered(current, this);
			default: return null;
		}
	}
}

// not supported
protected class EOperationDecl_1_0_Assignment_unique extends AssignmentToken  {
	
	public EOperationDecl_1_0_Assignment_unique(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele10AssignmentUnique();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("unique",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unique");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prEOperationDecl().ele100KeywordBag();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class EOperationDecl_1_1_Assignment_ordered extends AssignmentToken  {
	
	public EOperationDecl_1_1_Assignment_ordered(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele11AssignmentOrdered();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("ordered",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ordered");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prEOperationDecl().ele110KeywordRandom();
			return new Solution(obj);
		}

		return null;
	}
}


// not supported
protected class EOperationDecl_2_Keyword_op extends KeywordToken  {
	
	public EOperationDecl_2_Keyword_op(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele2KeywordOp();
	}	
}

// not supported
protected class EOperationDecl_3_Alternatives extends AlternativesToken {

	public EOperationDecl_3_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele3Alternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new EOperationDecl_3_0_Assignment_eGenericType(current, this);
			case 1: return new EOperationDecl_3_1_Keyword_void(current, this);
			default: return null;
		}
	}
}

// not supported
protected class EOperationDecl_3_0_Assignment_eGenericType extends AssignmentToken  {
	
	public EOperationDecl_3_0_Assignment_eGenericType(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele30AssignmentEGenericType();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eGenericType",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eGenericType");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEGenericTypeReferenceDecl().getRule().getType().getType())) {
				Solution s = new EGenericTypeReferenceDecl_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EOperationDecl_3_1_Keyword_void extends KeywordToken  {
	
	public EOperationDecl_3_1_Keyword_void(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele31KeywordVoid();
	}	
}


// not supported
protected class EOperationDecl_4_Assignment_name extends AssignmentToken  {
	
	public EOperationDecl_4_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele4AssignmentName();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prEOperationDecl().ele40TerminalRuleCallID();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class EOperationDecl_5_Group extends GroupToken {
	
	public EOperationDecl_5_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele5Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EOperationDecl_5_3_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EOperationDecl_5_2_Group(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new EOperationDecl_5_1_Assignment_eTypeParameters(s2.getCurrent(), s2.getPredecessor()).firstSolution();
		while(s3 != null) {
			Solution s4 = new EOperationDecl_5_0_Keyword(s3.getCurrent(), s3.getPredecessor()).firstSolution();
			if(s4 != null) {
				last = s4.getPredecessor();
				return s4;
			} else {
				s3 = s3.getPredecessor().nextSolution(this,s3);
			}
		}
			s2 = s2.getPredecessor().nextSolution(this,s2);
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class EOperationDecl_5_0_Keyword extends KeywordToken  {
	
	public EOperationDecl_5_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele50KeywordLessThanSign();
	}	
}

// not supported
protected class EOperationDecl_5_1_Assignment_eTypeParameters extends AssignmentToken  {
	
	public EOperationDecl_5_1_Assignment_eTypeParameters(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele51AssignmentETypeParameters();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eTypeParameters",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eTypeParameters");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prETypeParameterDecl().getRule().getType().getType())) {
				Solution s = new ETypeParameterDecl_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EOperationDecl_5_2_Group extends GroupToken {
	
	public EOperationDecl_5_2_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele52Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EOperationDecl_5_2_1_Assignment_eTypeParameters(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EOperationDecl_5_2_0_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class EOperationDecl_5_2_0_Keyword extends KeywordToken  {
	
	public EOperationDecl_5_2_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele520KeywordComma();
	}	
}

// not supported
protected class EOperationDecl_5_2_1_Assignment_eTypeParameters extends AssignmentToken  {
	
	public EOperationDecl_5_2_1_Assignment_eTypeParameters(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele521AssignmentETypeParameters();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eTypeParameters",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eTypeParameters");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prETypeParameterDecl().getRule().getType().getType())) {
				Solution s = new ETypeParameterDecl_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}


// not supported
protected class EOperationDecl_5_3_Keyword extends KeywordToken  {
	
	public EOperationDecl_5_3_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele53KeywordGreaterThanSign();
	}	
}


// not supported
protected class EOperationDecl_6_Keyword extends KeywordToken  {
	
	public EOperationDecl_6_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele6KeywordLeftParenthesis();
	}	
}

// not supported
protected class EOperationDecl_7_Group extends GroupToken {
	
	public EOperationDecl_7_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele7Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EOperationDecl_7_1_Group(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EOperationDecl_7_0_Assignment_eParameters(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class EOperationDecl_7_0_Assignment_eParameters extends AssignmentToken  {
	
	public EOperationDecl_7_0_Assignment_eParameters(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele70AssignmentEParameters();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eParameters",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eParameters");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEParameterDecl().getRule().getType().getType())) {
				Solution s = new EParameterDecl_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EOperationDecl_7_1_Group extends GroupToken {
	
	public EOperationDecl_7_1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele71Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EOperationDecl_7_1_1_Assignment_eParameters(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EOperationDecl_7_1_0_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class EOperationDecl_7_1_0_Keyword extends KeywordToken  {
	
	public EOperationDecl_7_1_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele710KeywordComma();
	}	
}

// not supported
protected class EOperationDecl_7_1_1_Assignment_eParameters extends AssignmentToken  {
	
	public EOperationDecl_7_1_1_Assignment_eParameters(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele711AssignmentEParameters();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eParameters",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eParameters");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEParameterDecl().getRule().getType().getType())) {
				Solution s = new EParameterDecl_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}



// not supported
protected class EOperationDecl_8_Keyword extends KeywordToken  {
	
	public EOperationDecl_8_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele8KeywordRightParenthesis();
	}	
}

// not supported
protected class EOperationDecl_9_Group extends GroupToken {
	
	public EOperationDecl_9_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele9Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EOperationDecl_9_2_Group(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EOperationDecl_9_1_Assignment_eGenericExceptions(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new EOperationDecl_9_0_Keyword_throws(s2.getCurrent(), s2.getPredecessor()).firstSolution();
			if(s3 != null) {
				last = s3.getPredecessor();
				return s3;
			} else {
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class EOperationDecl_9_0_Keyword_throws extends KeywordToken  {
	
	public EOperationDecl_9_0_Keyword_throws(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele90KeywordThrows();
	}	
}

// not supported
protected class EOperationDecl_9_1_Assignment_eGenericExceptions extends AssignmentToken  {
	
	public EOperationDecl_9_1_Assignment_eGenericExceptions(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele91AssignmentEGenericExceptions();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eGenericExceptions",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eGenericExceptions");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEGenericTypeReferenceDecl().getRule().getType().getType())) {
				Solution s = new EGenericTypeReferenceDecl_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EOperationDecl_9_2_Group extends GroupToken {
	
	public EOperationDecl_9_2_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele92Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EOperationDecl_9_2_1_Assignment_eGenericExceptions(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EOperationDecl_9_2_0_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class EOperationDecl_9_2_0_Keyword extends KeywordToken  {
	
	public EOperationDecl_9_2_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele920KeywordComma();
	}	
}

// not supported
protected class EOperationDecl_9_2_1_Assignment_eGenericExceptions extends AssignmentToken  {
	
	public EOperationDecl_9_2_1_Assignment_eGenericExceptions(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele921AssignmentEGenericExceptions();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eGenericExceptions",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eGenericExceptions");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEGenericTypeReferenceDecl().getRule().getType().getType())) {
				Solution s = new EGenericTypeReferenceDecl_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}



// not supported
protected class EOperationDecl_10_Keyword extends KeywordToken  {
	
	public EOperationDecl_10_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prEOperationDecl().ele10KeywordSemicolon();
	}	
}


/************ end Rule EOperationDecl ****************/


/************ begin Rule EParameterDecl ****************
 *
 * not supported
 *
 **/


// not supported
protected class EParameterDecl_Group extends GroupToken {
	
	public EParameterDecl_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prEParameterDecl().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EParameterDecl_2_Assignment_name(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EParameterDecl_1_Assignment_eGenericType(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new EParameterDecl_0_Assignment_eAnnotations(s2.getCurrent(), s2.getPredecessor()).firstSolution();
			if(s3 != null) {
				last = s3.getPredecessor();
				return s3;
			} else {
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class EParameterDecl_0_Assignment_eAnnotations extends AssignmentToken  {
	
	public EParameterDecl_0_Assignment_eAnnotations(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEParameterDecl().ele0AssignmentEAnnotations();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eAnnotations",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eAnnotations");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEAnnotationDecl().getRule().getType().getType())) {
				Solution s = new EAnnotationDecl_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EParameterDecl_1_Assignment_eGenericType extends AssignmentToken  {
	
	public EParameterDecl_1_Assignment_eGenericType(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEParameterDecl().ele1AssignmentEGenericType();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("eGenericType",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eGenericType");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prEGenericTypeReferenceDecl().getRule().getType().getType())) {
				Solution s = new EGenericTypeReferenceDecl_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class EParameterDecl_2_Assignment_name extends AssignmentToken  {
	
	public EParameterDecl_2_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEParameterDecl().ele2AssignmentName();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prEParameterDecl().ele20TerminalRuleCallID();
			return new Solution(obj);
		}
		return null;
	}
}


/************ end Rule EParameterDecl ****************/


/************ begin Rule MapEntrySuper ****************
 *
 * not supported
 *
 **/


// not supported
protected class MapEntrySuper_RuleCall_MapEntry extends RuleCallToken {
	
	public MapEntrySuper_RuleCall_MapEntry(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.prMapEntrySuper().eleParserRuleCallMapEntry();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(MapEntry_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.prMapEntry().getRule().getType().getType())) return null;
		return new MapEntry_Group(current, this).firstSolution();
	}
}

/************ end Rule MapEntrySuper ****************/


/************ begin Rule MapEntry ****************
 *
 * not supported
 *
 **/


// not supported
protected class MapEntry_Group extends GroupToken {
	
	public MapEntry_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prMapEntry().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new MapEntry_2_Assignment_detailValue(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new MapEntry_1_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new MapEntry_0_Assignment_detailKey(s2.getCurrent(), s2.getPredecessor()).firstSolution();
			if(s3 != null) {
				last = s3.getPredecessor();
				return s3;
			} else {
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class MapEntry_0_Assignment_detailKey extends AssignmentToken  {
	
	public MapEntry_0_Assignment_detailKey(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prMapEntry().ele0AssignmentDetailKey();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("detailKey",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("detailKey");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prMapEntry().ele00TerminalRuleCallID();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class MapEntry_1_Keyword extends KeywordToken  {
	
	public MapEntry_1_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prMapEntry().ele1KeywordEqualsSign();
	}	
}

// not supported
protected class MapEntry_2_Assignment_detailValue extends AssignmentToken  {
	
	public MapEntry_2_Assignment_detailValue(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prMapEntry().ele2AssignmentDetailValue();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("detailValue",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("detailValue");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prMapEntry().ele20TerminalRuleCallSTRING();
			return new Solution(obj);
		}
		return null;
	}
}


/************ end Rule MapEntry ****************/


/************ begin Rule MultiplicityExpr ****************
 *
 * not supported
 *
 **/


// not supported
protected class MultiplicityExpr_Alternatives extends AlternativesToken {

	public MultiplicityExpr_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.prMultiplicityExpr().eleAlternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new MultiplicityExpr_0_Keyword(current, this);
			case 1: return new MultiplicityExpr_1_Keyword(current, this);
			case 2: return new MultiplicityExpr_2_Keyword(current, this);
			default: return null;
		}
	}
}

// not supported
protected class MultiplicityExpr_0_Keyword extends KeywordToken  {
	
	public MultiplicityExpr_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prMultiplicityExpr().ele0KeywordPlusSign();
	}	
}

// not supported
protected class MultiplicityExpr_1_Keyword extends KeywordToken  {
	
	public MultiplicityExpr_1_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prMultiplicityExpr().ele1KeywordQuestionMark();
	}	
}

// not supported
protected class MultiplicityExpr_2_Keyword extends KeywordToken  {
	
	public MultiplicityExpr_2_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prMultiplicityExpr().ele2KeywordAsterisk();
	}	
}


/************ end Rule MultiplicityExpr ****************/




}
