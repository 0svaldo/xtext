/*
* generated by Xtext
*/
package org.eclipse.xtext.example.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;

import org.eclipse.xtext.example.services.EcoreDslGrammarAccess.MapEntrySuperElements;

public final class EcoreDslMapEntrySuperConsumer extends NonTerminalConsumer {

	private MapEntrySuperElements rule;	

	private INonTerminalConsumer mapEntryConsumer;

	private IElementConsumer ruleCall$1$Consumer;

	protected class RuleCall$1$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$1$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(mapEntryConsumer, null, false, false, false, getElement());
		}
	}

	public EcoreDslMapEntrySuperConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
	}
	
	@Override
	protected int doConsume() throws Exception {
		return ruleCall$1$Consumer.consume();
	}

	public MapEntrySuperElements getRule() {
		return rule;
	}
	
	public void setRule(MapEntrySuperElements rule) {
		this.rule = rule;
		
		ruleCall$1$Consumer = new RuleCall$1$Consumer(rule.eleParserRuleCallMapEntry());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setMapEntryConsumer(INonTerminalConsumer mapEntryConsumer) {
		this.mapEntryConsumer = mapEntryConsumer;
	}
	
}
