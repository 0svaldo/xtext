/*
* generated by Xtext
*/
package org.eclipse.xtext.example.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.example.services.EcoreDslGrammarAccess.EReferenceDeclElements;

public final class EcoreDslEReferenceDeclConsumer extends NonTerminalConsumer {

	private EReferenceDeclElements rule;	

	private INonTerminalConsumer eAnnotationDeclConsumer;

	private INonTerminalConsumer eGenericTypeReferenceDeclConsumer;

	private ITerminalConsumer idConsumer;

	private ITerminalConsumer intConsumer;

	private INonTerminalConsumer sintConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer assignment$8$Consumer;

	private IElementConsumer ruleCall$9$Consumer;

	private IElementConsumer alternatives$10$Consumer;

	private IElementConsumer assignment$17$Consumer;

	private IElementConsumer keyword$18$Consumer;

	private IElementConsumer assignment$19$Consumer;

	private IElementConsumer keyword$20$Consumer;

	private IElementConsumer assignment$21$Consumer;

	private IElementConsumer keyword$22$Consumer;

	private IElementConsumer assignment$23$Consumer;

	private IElementConsumer keyword$24$Consumer;

	private IElementConsumer assignment$25$Consumer;

	private IElementConsumer keyword$26$Consumer;

	private IElementConsumer assignment$27$Consumer;

	private IElementConsumer keyword$28$Consumer;

	private IElementConsumer assignment$29$Consumer;

	private IElementConsumer keyword$30$Consumer;

	private IElementConsumer assignment$31$Consumer;

	private IElementConsumer keyword$32$Consumer;

	private IElementConsumer alternatives$33$Consumer;

	private IElementConsumer assignment$34$Consumer;

	private IElementConsumer keyword$35$Consumer;

	private IElementConsumer keyword$36$Consumer;

	private IElementConsumer assignment$37$Consumer;

	private IElementConsumer ruleCall$38$Consumer;

	private IElementConsumer group$39$Consumer;

	private IElementConsumer keyword$42$Consumer;

	private IElementConsumer assignment$43$Consumer;

	private IElementConsumer ruleCall$44$Consumer;

	private IElementConsumer group$45$Consumer;

	private IElementConsumer keyword$46$Consumer;

	private IElementConsumer assignment$47$Consumer;

	private IElementConsumer ruleCall$48$Consumer;

	private IElementConsumer keyword$49$Consumer;

	private IElementConsumer group$50$Consumer;

	private IElementConsumer keyword$51$Consumer;

	private IElementConsumer assignment$52$Consumer;

	private IElementConsumer crossReference$53$Consumer;

	private IElementConsumer assignment$55$Consumer;

	private IElementConsumer ruleCall$56$Consumer;

	private IElementConsumer keyword$57$Consumer;

	private ISequenceMatcher crossReference$53$Delimiter;

	private ICharacterClass keyword$18$Delimiter;

	private ICharacterClass keyword$20$Delimiter;

	private ICharacterClass keyword$22$Delimiter;

	private ICharacterClass keyword$24$Delimiter;

	private ICharacterClass keyword$26$Delimiter;

	private ICharacterClass keyword$28$Delimiter;

	private ICharacterClass keyword$30$Delimiter;

	private ICharacterClass keyword$32$Delimiter;

	private ICharacterClass keyword$35$Delimiter;

	private ICharacterClass keyword$36$Delimiter;

	private ICharacterClass keyword$42$Delimiter;

	private ICharacterClass keyword$46$Delimiter;

	private ICharacterClass keyword$49$Delimiter;

	private ICharacterClass keyword$51$Delimiter;

	private ICharacterClass keyword$57$Delimiter;

	private ISequenceMatcher ruleCall$44$Delimiter;

	private ISequenceMatcher ruleCall$56$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$8$Consumer);
			acceptor.accept(alternatives$10$Consumer);
			acceptor.accept(alternatives$33$Consumer);
			acceptor.accept(assignment$37$Consumer);
			acceptor.accept(group$39$Consumer);
			acceptor.accept(group$50$Consumer);
			acceptor.accept(assignment$55$Consumer);
			acceptor.accept(keyword$57$Consumer);
		}
	}

	protected class Assignment$8$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$8$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$9$Consumer;
		}
	}

	protected class RuleCall$9$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$9$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eAnnotationDeclConsumer, "eAnnotations", true, false, false, getElement(), optional);
		}
	}

	protected class Alternatives$10$Consumer extends LoopAlternativesConsumer {
		
		protected Alternatives$10$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$17$Consumer);
			acceptor.accept(assignment$19$Consumer);
			acceptor.accept(assignment$21$Consumer);
			acceptor.accept(assignment$23$Consumer);
			acceptor.accept(assignment$25$Consumer);
			acceptor.accept(assignment$27$Consumer);
			acceptor.accept(assignment$29$Consumer);
			acceptor.accept(assignment$31$Consumer);
		}
	}

	protected class Assignment$17$Consumer extends AssignmentConsumer {
		
		protected Assignment$17$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$18$Consumer;
		}
	}

	protected class Keyword$18$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$18$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "resolveProxies", false, true, getKeyword$18$Delimiter(), optional);
		}
	}

	protected class Assignment$19$Consumer extends AssignmentConsumer {
		
		protected Assignment$19$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$20$Consumer;
		}
	}

	protected class Keyword$20$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$20$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "unique", false, true, getKeyword$20$Delimiter(), optional);
		}
	}

	protected class Assignment$21$Consumer extends AssignmentConsumer {
		
		protected Assignment$21$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$22$Consumer;
		}
	}

	protected class Keyword$22$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$22$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "ordered", false, true, getKeyword$22$Delimiter(), optional);
		}
	}

	protected class Assignment$23$Consumer extends AssignmentConsumer {
		
		protected Assignment$23$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$24$Consumer;
		}
	}

	protected class Keyword$24$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$24$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "changeable", false, true, getKeyword$24$Delimiter(), optional);
		}
	}

	protected class Assignment$25$Consumer extends AssignmentConsumer {
		
		protected Assignment$25$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$26$Consumer;
		}
	}

	protected class Keyword$26$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$26$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "volatile", false, true, getKeyword$26$Delimiter(), optional);
		}
	}

	protected class Assignment$27$Consumer extends AssignmentConsumer {
		
		protected Assignment$27$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$28$Consumer;
		}
	}

	protected class Keyword$28$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$28$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "transient", false, true, getKeyword$28$Delimiter(), optional);
		}
	}

	protected class Assignment$29$Consumer extends AssignmentConsumer {
		
		protected Assignment$29$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$30$Consumer;
		}
	}

	protected class Keyword$30$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$30$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "unsettable", false, true, getKeyword$30$Delimiter(), optional);
		}
	}

	protected class Assignment$31$Consumer extends AssignmentConsumer {
		
		protected Assignment$31$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$32$Consumer;
		}
	}

	protected class Keyword$32$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$32$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "derived", false, true, getKeyword$32$Delimiter(), optional);
		}
	}

	protected class Alternatives$33$Consumer extends AlternativesConsumer {
		
		protected Alternatives$33$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$34$Consumer);
			acceptor.accept(keyword$36$Consumer);
		}
	}

	protected class Assignment$34$Consumer extends AssignmentConsumer {
		
		protected Assignment$34$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$35$Consumer;
		}
	}

	protected class Keyword$35$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$35$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "containment", false, true, getKeyword$35$Delimiter(), optional);
		}
	}

	protected class Keyword$36$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$36$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$36$Delimiter(), optional);
		}
	}

	protected class Assignment$37$Consumer extends AssignmentConsumer {
		
		protected Assignment$37$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$38$Consumer;
		}
	}

	protected class RuleCall$38$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$38$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eGenericTypeReferenceDeclConsumer, "eGenericType", false, false, false, getElement(), optional);
		}
	}

	protected class Group$39$Consumer extends OptionalGroupConsumer {
		
		protected Group$39$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$42$Consumer);
			acceptor.accept(assignment$43$Consumer);
			acceptor.accept(group$45$Consumer);
			acceptor.accept(keyword$49$Consumer);
		}
	}

	protected class Keyword$42$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$42$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$42$Delimiter(), optional);
		}
	}

	protected class Assignment$43$Consumer extends AssignmentConsumer {
		
		protected Assignment$43$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$44$Consumer;
		}
	}

	protected class RuleCall$44$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$44$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(intConsumer, "lowerBound", false, false, getElement(), getRuleCall$44$Delimiter(), optional);
		}
	}

	protected class Group$45$Consumer extends OptionalGroupConsumer {
		
		protected Group$45$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$46$Consumer);
			acceptor.accept(assignment$47$Consumer);
		}
	}

	protected class Keyword$46$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$46$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$46$Delimiter(), optional);
		}
	}

	protected class Assignment$47$Consumer extends AssignmentConsumer {
		
		protected Assignment$47$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$48$Consumer;
		}
	}

	protected class RuleCall$48$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$48$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(sintConsumer, "upperBound", false, true, false, getElement(), optional);
		}
	}

	protected class Keyword$49$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$49$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$49$Delimiter(), optional);
		}
	}

	protected class Group$50$Consumer extends OptionalGroupConsumer {
		
		protected Group$50$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$51$Consumer);
			acceptor.accept(assignment$52$Consumer);
		}
	}

	protected class Keyword$51$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$51$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$51$Delimiter(), optional);
		}
	}

	protected class Assignment$52$Consumer extends AssignmentConsumer {
		
		protected Assignment$52$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$53$Consumer;
		}
	}

	protected class CrossReference$53$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$53$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "eOpposite", false, false, getElement(), getCrossReference$53$Delimiter(), optional);
		}
	}

	protected class Assignment$55$Consumer extends AssignmentConsumer {
		
		protected Assignment$55$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$56$Consumer;
		}
	}

	protected class RuleCall$56$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$56$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "name", false, false, getElement(), getRuleCall$56$Delimiter(), optional);
		}
	}

	protected class Keyword$57$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$57$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$57$Delimiter(), optional);
		}
	}

	public EcoreDslEReferenceDeclConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		crossReference$53$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		keyword$18$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$20$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$22$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$24$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$26$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$28$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$30$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$32$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$35$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$36$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$42$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$46$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$49$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$51$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$57$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$44$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$56$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public EReferenceDeclElements getRule() {
		return rule;
	}
	
	public void setRule(EReferenceDeclElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		assignment$8$Consumer = new Assignment$8$Consumer(rule.ele0000000AssignmentEAnnotations());
		ruleCall$9$Consumer = new RuleCall$9$Consumer(rule.ele00000000ParserRuleCallEAnnotationDecl());
		alternatives$10$Consumer = new Alternatives$10$Consumer(rule.ele0000001Alternatives());
		assignment$17$Consumer = new Assignment$17$Consumer(rule.ele00000010000000AssignmentResolveProxies());
		keyword$18$Consumer = new Keyword$18$Consumer(rule.ele000000100000000KeywordLocal());
		assignment$19$Consumer = new Assignment$19$Consumer(rule.ele00000010000001AssignmentUnique());
		keyword$20$Consumer = new Keyword$20$Consumer(rule.ele000000100000010KeywordBag());
		assignment$21$Consumer = new Assignment$21$Consumer(rule.ele0000001000001AssignmentOrdered());
		keyword$22$Consumer = new Keyword$22$Consumer(rule.ele00000010000010KeywordRandom());
		assignment$23$Consumer = new Assignment$23$Consumer(rule.ele000000100001AssignmentChangeable());
		keyword$24$Consumer = new Keyword$24$Consumer(rule.ele0000001000010KeywordReadonly());
		assignment$25$Consumer = new Assignment$25$Consumer(rule.ele00000010001AssignmentVolatile());
		keyword$26$Consumer = new Keyword$26$Consumer(rule.ele000000100010KeywordVolatile());
		assignment$27$Consumer = new Assignment$27$Consumer(rule.ele0000001001AssignmentTransient());
		keyword$28$Consumer = new Keyword$28$Consumer(rule.ele00000010010KeywordTransient());
		assignment$29$Consumer = new Assignment$29$Consumer(rule.ele000000101AssignmentUnsettable());
		keyword$30$Consumer = new Keyword$30$Consumer(rule.ele0000001010KeywordUnsettable());
		assignment$31$Consumer = new Assignment$31$Consumer(rule.ele00000011AssignmentDerived());
		keyword$32$Consumer = new Keyword$32$Consumer(rule.ele000000110KeywordDerived());
		alternatives$33$Consumer = new Alternatives$33$Consumer(rule.ele000001Alternatives());
		assignment$34$Consumer = new Assignment$34$Consumer(rule.ele0000010AssignmentContainment());
		keyword$35$Consumer = new Keyword$35$Consumer(rule.ele00000100KeywordVal());
		keyword$36$Consumer = new Keyword$36$Consumer(rule.ele0000011KeywordRef());
		assignment$37$Consumer = new Assignment$37$Consumer(rule.ele00001AssignmentEGenericType());
		ruleCall$38$Consumer = new RuleCall$38$Consumer(rule.ele000010ParserRuleCallEGenericTypeReferenceDecl());
		group$39$Consumer = new Group$39$Consumer(rule.ele0001Group());
		keyword$42$Consumer = new Keyword$42$Consumer(rule.ele0001000KeywordLeftSquareBracket());
		assignment$43$Consumer = new Assignment$43$Consumer(rule.ele0001001AssignmentLowerBound());
		ruleCall$44$Consumer = new RuleCall$44$Consumer(rule.ele00010010ParserRuleCallINT());
		group$45$Consumer = new Group$45$Consumer(rule.ele000101Group());
		keyword$46$Consumer = new Keyword$46$Consumer(rule.ele0001010KeywordFullStopFullStop());
		assignment$47$Consumer = new Assignment$47$Consumer(rule.ele0001011AssignmentUpperBound());
		ruleCall$48$Consumer = new RuleCall$48$Consumer(rule.ele00010110ParserRuleCallSINT());
		keyword$49$Consumer = new Keyword$49$Consumer(rule.ele00011KeywordRightSquareBracket());
		group$50$Consumer = new Group$50$Consumer(rule.ele001Group());
		keyword$51$Consumer = new Keyword$51$Consumer(rule.ele0010KeywordNumberSign());
		assignment$52$Consumer = new Assignment$52$Consumer(rule.ele0011AssignmentEOpposite());
		crossReference$53$Consumer = new CrossReference$53$Consumer(rule.ele00110CrossReferenceEStringEReference());
		assignment$55$Consumer = new Assignment$55$Consumer(rule.ele01AssignmentName());
		ruleCall$56$Consumer = new RuleCall$56$Consumer(rule.ele010ParserRuleCallID());
		keyword$57$Consumer = new Keyword$57$Consumer(rule.ele1KeywordSemicolon());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setEAnnotationDeclConsumer(INonTerminalConsumer eAnnotationDeclConsumer) {
		this.eAnnotationDeclConsumer = eAnnotationDeclConsumer;
	}
	
	public void setEGenericTypeReferenceDeclConsumer(INonTerminalConsumer eGenericTypeReferenceDeclConsumer) {
		this.eGenericTypeReferenceDeclConsumer = eGenericTypeReferenceDeclConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setIntConsumer(ITerminalConsumer intConsumer) {
		this.intConsumer = intConsumer;
	}
	
	public void setSintConsumer(INonTerminalConsumer sintConsumer) {
		this.sintConsumer = sintConsumer;
	}
	
	public ISequenceMatcher getCrossReference$53$Delimiter() {
		return crossReference$53$Delimiter;
	}
	
	public void setCrossReference$53$Delimiter(ISequenceMatcher matcher) {
		crossReference$53$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ICharacterClass getKeyword$18$Delimiter() {
		return keyword$18$Delimiter;
	}
	
	public void setKeyword$18$Delimiter(ICharacterClass characterClass) {
		keyword$18$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$20$Delimiter() {
		return keyword$20$Delimiter;
	}
	
	public void setKeyword$20$Delimiter(ICharacterClass characterClass) {
		keyword$20$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$22$Delimiter() {
		return keyword$22$Delimiter;
	}
	
	public void setKeyword$22$Delimiter(ICharacterClass characterClass) {
		keyword$22$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$24$Delimiter() {
		return keyword$24$Delimiter;
	}
	
	public void setKeyword$24$Delimiter(ICharacterClass characterClass) {
		keyword$24$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$26$Delimiter() {
		return keyword$26$Delimiter;
	}
	
	public void setKeyword$26$Delimiter(ICharacterClass characterClass) {
		keyword$26$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$28$Delimiter() {
		return keyword$28$Delimiter;
	}
	
	public void setKeyword$28$Delimiter(ICharacterClass characterClass) {
		keyword$28$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$30$Delimiter() {
		return keyword$30$Delimiter;
	}
	
	public void setKeyword$30$Delimiter(ICharacterClass characterClass) {
		keyword$30$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$32$Delimiter() {
		return keyword$32$Delimiter;
	}
	
	public void setKeyword$32$Delimiter(ICharacterClass characterClass) {
		keyword$32$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$35$Delimiter() {
		return keyword$35$Delimiter;
	}
	
	public void setKeyword$35$Delimiter(ICharacterClass characterClass) {
		keyword$35$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$36$Delimiter() {
		return keyword$36$Delimiter;
	}
	
	public void setKeyword$36$Delimiter(ICharacterClass characterClass) {
		keyword$36$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$42$Delimiter() {
		return keyword$42$Delimiter;
	}
	
	public void setKeyword$42$Delimiter(ICharacterClass characterClass) {
		keyword$42$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$46$Delimiter() {
		return keyword$46$Delimiter;
	}
	
	public void setKeyword$46$Delimiter(ICharacterClass characterClass) {
		keyword$46$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$49$Delimiter() {
		return keyword$49$Delimiter;
	}
	
	public void setKeyword$49$Delimiter(ICharacterClass characterClass) {
		keyword$49$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$51$Delimiter() {
		return keyword$51$Delimiter;
	}
	
	public void setKeyword$51$Delimiter(ICharacterClass characterClass) {
		keyword$51$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$57$Delimiter() {
		return keyword$57$Delimiter;
	}
	
	public void setKeyword$57$Delimiter(ICharacterClass characterClass) {
		keyword$57$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$44$Delimiter() {
		return ruleCall$44$Delimiter;
	}
	
	public void setRuleCall$44$Delimiter(ISequenceMatcher matcher) {
		ruleCall$44$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$56$Delimiter() {
		return ruleCall$56$Delimiter;
	}
	
	public void setRuleCall$56$Delimiter(ISequenceMatcher matcher) {
		ruleCall$56$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
