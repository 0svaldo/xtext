/*
* generated by Xtext
*/
package org.eclipse.xtext.example.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.example.services.EcoreDslGrammarAccess.EReferenceDeclElements;

public final class EcoreDslEReferenceDeclConsumer extends NonTerminalConsumer {

	private EReferenceDeclElements rule;	

	private ITerminalConsumer bagConsumer;

	private INonTerminalConsumer eAnnotationDeclConsumer;

	private INonTerminalConsumer eGenericTypeReferenceDeclConsumer;

	private ITerminalConsumer idConsumer;

	private ITerminalConsumer intConsumer;

	private ITerminalConsumer localConsumer;

	private ITerminalConsumer randomConsumer;

	private ITerminalConsumer readonlyConsumer;

	private INonTerminalConsumer sintConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer assignment$2$Consumer;

	private IElementConsumer ruleCall$3$Consumer;

	private IElementConsumer alternatives$4$Consumer;

	private IElementConsumer assignment$5$Consumer;

	private IElementConsumer ruleCall$6$Consumer;

	private IElementConsumer assignment$7$Consumer;

	private IElementConsumer ruleCall$8$Consumer;

	private IElementConsumer assignment$9$Consumer;

	private IElementConsumer ruleCall$10$Consumer;

	private IElementConsumer assignment$11$Consumer;

	private IElementConsumer ruleCall$12$Consumer;

	private IElementConsumer assignment$13$Consumer;

	private IElementConsumer keyword$14$Consumer;

	private IElementConsumer assignment$15$Consumer;

	private IElementConsumer keyword$16$Consumer;

	private IElementConsumer assignment$17$Consumer;

	private IElementConsumer keyword$18$Consumer;

	private IElementConsumer assignment$19$Consumer;

	private IElementConsumer keyword$20$Consumer;

	private IElementConsumer alternatives$21$Consumer;

	private IElementConsumer assignment$22$Consumer;

	private IElementConsumer keyword$23$Consumer;

	private IElementConsumer keyword$24$Consumer;

	private IElementConsumer assignment$25$Consumer;

	private IElementConsumer ruleCall$26$Consumer;

	private IElementConsumer group$27$Consumer;

	private IElementConsumer keyword$28$Consumer;

	private IElementConsumer assignment$29$Consumer;

	private IElementConsumer ruleCall$30$Consumer;

	private IElementConsumer group$31$Consumer;

	private IElementConsumer keyword$32$Consumer;

	private IElementConsumer assignment$33$Consumer;

	private IElementConsumer ruleCall$34$Consumer;

	private IElementConsumer keyword$35$Consumer;

	private IElementConsumer group$36$Consumer;

	private IElementConsumer keyword$37$Consumer;

	private IElementConsumer assignment$38$Consumer;

	private IElementConsumer crossReference$39$Consumer;

	private IElementConsumer assignment$42$Consumer;

	private IElementConsumer ruleCall$43$Consumer;

	private IElementConsumer keyword$44$Consumer;

	private ICharacterClass keyword$14$Delimiter;

	private ICharacterClass keyword$16$Delimiter;

	private ICharacterClass keyword$18$Delimiter;

	private ICharacterClass keyword$20$Delimiter;

	private ICharacterClass keyword$23$Delimiter;

	private ICharacterClass keyword$24$Delimiter;

	private ICharacterClass keyword$28$Delimiter;

	private ICharacterClass keyword$32$Delimiter;

	private ICharacterClass keyword$35$Delimiter;

	private ICharacterClass keyword$37$Delimiter;

	private ICharacterClass keyword$44$Delimiter;

	private ISequenceMatcher ruleCall$6$Delimiter;

	private ISequenceMatcher ruleCall$8$Delimiter;

	private ISequenceMatcher ruleCall$10$Delimiter;

	private ISequenceMatcher ruleCall$12$Delimiter;

	private ISequenceMatcher ruleCall$30$Delimiter;

	private ISequenceMatcher ruleCall$41$Delimiter;

	private ISequenceMatcher ruleCall$43$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$2$Consumer);
			acceptor.accept(alternatives$4$Consumer);
			acceptor.accept(alternatives$21$Consumer);
			acceptor.accept(assignment$25$Consumer);
			acceptor.accept(group$27$Consumer);
			acceptor.accept(group$36$Consumer);
			acceptor.accept(assignment$42$Consumer);
			acceptor.accept(keyword$44$Consumer);
		}
	}

	protected class Assignment$2$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$2$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$3$Consumer;
		}
	}

	protected class RuleCall$3$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$3$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eAnnotationDeclConsumer, "eAnnotations", true, false, false, getElement(), optional);
		}
	}

	protected class Alternatives$4$Consumer extends LoopAlternativesConsumer {
		
		protected Alternatives$4$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$5$Consumer);
			acceptor.accept(assignment$7$Consumer);
			acceptor.accept(assignment$9$Consumer);
			acceptor.accept(assignment$11$Consumer);
			acceptor.accept(assignment$13$Consumer);
			acceptor.accept(assignment$15$Consumer);
			acceptor.accept(assignment$17$Consumer);
			acceptor.accept(assignment$19$Consumer);
		}
	}

	protected class Assignment$5$Consumer extends AssignmentConsumer {
		
		protected Assignment$5$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$6$Consumer;
		}
	}

	protected class RuleCall$6$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$6$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(localConsumer, "resolveProxies", false, false, getElement(), getRuleCall$6$Delimiter(), optional);
		}
	}

	protected class Assignment$7$Consumer extends AssignmentConsumer {
		
		protected Assignment$7$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$8$Consumer;
		}
	}

	protected class RuleCall$8$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$8$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(bagConsumer, "unique", false, false, getElement(), getRuleCall$8$Delimiter(), optional);
		}
	}

	protected class Assignment$9$Consumer extends AssignmentConsumer {
		
		protected Assignment$9$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$10$Consumer;
		}
	}

	protected class RuleCall$10$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$10$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(randomConsumer, "ordered", false, false, getElement(), getRuleCall$10$Delimiter(), optional);
		}
	}

	protected class Assignment$11$Consumer extends AssignmentConsumer {
		
		protected Assignment$11$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$12$Consumer;
		}
	}

	protected class RuleCall$12$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$12$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(readonlyConsumer, "changeable", false, false, getElement(), getRuleCall$12$Delimiter(), optional);
		}
	}

	protected class Assignment$13$Consumer extends AssignmentConsumer {
		
		protected Assignment$13$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$14$Consumer;
		}
	}

	protected class Keyword$14$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$14$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "volatile", false, true, getKeyword$14$Delimiter(), optional);
		}
	}

	protected class Assignment$15$Consumer extends AssignmentConsumer {
		
		protected Assignment$15$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$16$Consumer;
		}
	}

	protected class Keyword$16$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$16$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "transient", false, true, getKeyword$16$Delimiter(), optional);
		}
	}

	protected class Assignment$17$Consumer extends AssignmentConsumer {
		
		protected Assignment$17$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$18$Consumer;
		}
	}

	protected class Keyword$18$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$18$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "unsettable", false, true, getKeyword$18$Delimiter(), optional);
		}
	}

	protected class Assignment$19$Consumer extends AssignmentConsumer {
		
		protected Assignment$19$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$20$Consumer;
		}
	}

	protected class Keyword$20$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$20$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "derived", false, true, getKeyword$20$Delimiter(), optional);
		}
	}

	protected class Alternatives$21$Consumer extends AlternativesConsumer {
		
		protected Alternatives$21$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$22$Consumer);
			acceptor.accept(keyword$24$Consumer);
		}
	}

	protected class Assignment$22$Consumer extends AssignmentConsumer {
		
		protected Assignment$22$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$23$Consumer;
		}
	}

	protected class Keyword$23$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$23$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "containment", false, true, getKeyword$23$Delimiter(), optional);
		}
	}

	protected class Keyword$24$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$24$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$24$Delimiter(), optional);
		}
	}

	protected class Assignment$25$Consumer extends AssignmentConsumer {
		
		protected Assignment$25$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$26$Consumer;
		}
	}

	protected class RuleCall$26$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$26$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eGenericTypeReferenceDeclConsumer, "eGenericType", false, false, false, getElement(), optional);
		}
	}

	protected class Group$27$Consumer extends OptionalGroupConsumer {
		
		protected Group$27$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$28$Consumer);
			acceptor.accept(assignment$29$Consumer);
			acceptor.accept(group$31$Consumer);
			acceptor.accept(keyword$35$Consumer);
		}
	}

	protected class Keyword$28$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$28$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$28$Delimiter(), optional);
		}
	}

	protected class Assignment$29$Consumer extends AssignmentConsumer {
		
		protected Assignment$29$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$30$Consumer;
		}
	}

	protected class RuleCall$30$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$30$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(intConsumer, "lowerBound", false, false, getElement(), getRuleCall$30$Delimiter(), optional);
		}
	}

	protected class Group$31$Consumer extends OptionalGroupConsumer {
		
		protected Group$31$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$32$Consumer);
			acceptor.accept(assignment$33$Consumer);
		}
	}

	protected class Keyword$32$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$32$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$32$Delimiter(), optional);
		}
	}

	protected class Assignment$33$Consumer extends AssignmentConsumer {
		
		protected Assignment$33$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$34$Consumer;
		}
	}

	protected class RuleCall$34$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$34$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(sintConsumer, "upperBound", false, true, false, getElement(), optional);
		}
	}

	protected class Keyword$35$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$35$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$35$Delimiter(), optional);
		}
	}

	protected class Group$36$Consumer extends OptionalGroupConsumer {
		
		protected Group$36$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$37$Consumer);
			acceptor.accept(assignment$38$Consumer);
		}
	}

	protected class Keyword$37$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$37$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$37$Delimiter(), optional);
		}
	}

	protected class Assignment$38$Consumer extends AssignmentConsumer {
		
		protected Assignment$38$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$39$Consumer;
		}
	}

	protected class CrossReference$39$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$39$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "eOpposite", false, false, getElement(), getRuleCall$41$Delimiter(), optional);
		}
	}

	protected class Assignment$42$Consumer extends AssignmentConsumer {
		
		protected Assignment$42$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$43$Consumer;
		}
	}

	protected class RuleCall$43$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$43$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "name", false, false, getElement(), getRuleCall$43$Delimiter(), optional);
		}
	}

	protected class Keyword$44$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$44$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$44$Delimiter(), optional);
		}
	}

	public EcoreDslEReferenceDeclConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$14$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$16$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$18$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$20$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$23$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$24$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$28$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$32$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$35$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$37$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$44$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$6$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$8$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$10$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$12$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$30$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$41$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$43$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public EReferenceDeclElements getRule() {
		return rule;
	}
	
	public void setRule(EReferenceDeclElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		assignment$2$Consumer = new Assignment$2$Consumer(rule.ele0AssignmentEAnnotations());
		ruleCall$3$Consumer = new RuleCall$3$Consumer(rule.ele00ParserRuleCallEAnnotationDecl());
		alternatives$4$Consumer = new Alternatives$4$Consumer(rule.ele1Alternatives());
		assignment$5$Consumer = new Assignment$5$Consumer(rule.ele10AssignmentResolveProxies());
		ruleCall$6$Consumer = new RuleCall$6$Consumer(rule.ele100TerminalRuleCallLocal());
		assignment$7$Consumer = new Assignment$7$Consumer(rule.ele11AssignmentUnique());
		ruleCall$8$Consumer = new RuleCall$8$Consumer(rule.ele110TerminalRuleCallBag());
		assignment$9$Consumer = new Assignment$9$Consumer(rule.ele12AssignmentOrdered());
		ruleCall$10$Consumer = new RuleCall$10$Consumer(rule.ele120TerminalRuleCallRandom());
		assignment$11$Consumer = new Assignment$11$Consumer(rule.ele13AssignmentChangeable());
		ruleCall$12$Consumer = new RuleCall$12$Consumer(rule.ele130TerminalRuleCallReadonly());
		assignment$13$Consumer = new Assignment$13$Consumer(rule.ele14AssignmentVolatile());
		keyword$14$Consumer = new Keyword$14$Consumer(rule.ele140KeywordVolatile());
		assignment$15$Consumer = new Assignment$15$Consumer(rule.ele15AssignmentTransient());
		keyword$16$Consumer = new Keyword$16$Consumer(rule.ele150KeywordTransient());
		assignment$17$Consumer = new Assignment$17$Consumer(rule.ele16AssignmentUnsettable());
		keyword$18$Consumer = new Keyword$18$Consumer(rule.ele160KeywordUnsettable());
		assignment$19$Consumer = new Assignment$19$Consumer(rule.ele17AssignmentDerived());
		keyword$20$Consumer = new Keyword$20$Consumer(rule.ele170KeywordDerived());
		alternatives$21$Consumer = new Alternatives$21$Consumer(rule.ele2Alternatives());
		assignment$22$Consumer = new Assignment$22$Consumer(rule.ele20AssignmentContainment());
		keyword$23$Consumer = new Keyword$23$Consumer(rule.ele200KeywordVal());
		keyword$24$Consumer = new Keyword$24$Consumer(rule.ele21KeywordRef());
		assignment$25$Consumer = new Assignment$25$Consumer(rule.ele3AssignmentEGenericType());
		ruleCall$26$Consumer = new RuleCall$26$Consumer(rule.ele30ParserRuleCallEGenericTypeReferenceDecl());
		group$27$Consumer = new Group$27$Consumer(rule.ele4Group());
		keyword$28$Consumer = new Keyword$28$Consumer(rule.ele40KeywordLeftSquareBracket());
		assignment$29$Consumer = new Assignment$29$Consumer(rule.ele41AssignmentLowerBound());
		ruleCall$30$Consumer = new RuleCall$30$Consumer(rule.ele410TerminalRuleCallINT());
		group$31$Consumer = new Group$31$Consumer(rule.ele42Group());
		keyword$32$Consumer = new Keyword$32$Consumer(rule.ele420KeywordFullStopFullStop());
		assignment$33$Consumer = new Assignment$33$Consumer(rule.ele421AssignmentUpperBound());
		ruleCall$34$Consumer = new RuleCall$34$Consumer(rule.ele4210ParserRuleCallSINT());
		keyword$35$Consumer = new Keyword$35$Consumer(rule.ele43KeywordRightSquareBracket());
		group$36$Consumer = new Group$36$Consumer(rule.ele5Group());
		keyword$37$Consumer = new Keyword$37$Consumer(rule.ele50KeywordNumberSign());
		assignment$38$Consumer = new Assignment$38$Consumer(rule.ele51AssignmentEOpposite());
		crossReference$39$Consumer = new CrossReference$39$Consumer(rule.ele510CrossReferenceIDEReference());
		assignment$42$Consumer = new Assignment$42$Consumer(rule.ele6AssignmentName());
		ruleCall$43$Consumer = new RuleCall$43$Consumer(rule.ele60TerminalRuleCallID());
		keyword$44$Consumer = new Keyword$44$Consumer(rule.ele7KeywordSemicolon());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setBagConsumer(ITerminalConsumer bagConsumer) {
		this.bagConsumer = bagConsumer;
	}
	
	public void setEAnnotationDeclConsumer(INonTerminalConsumer eAnnotationDeclConsumer) {
		this.eAnnotationDeclConsumer = eAnnotationDeclConsumer;
	}
	
	public void setEGenericTypeReferenceDeclConsumer(INonTerminalConsumer eGenericTypeReferenceDeclConsumer) {
		this.eGenericTypeReferenceDeclConsumer = eGenericTypeReferenceDeclConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setIntConsumer(ITerminalConsumer intConsumer) {
		this.intConsumer = intConsumer;
	}
	
	public void setLocalConsumer(ITerminalConsumer localConsumer) {
		this.localConsumer = localConsumer;
	}
	
	public void setRandomConsumer(ITerminalConsumer randomConsumer) {
		this.randomConsumer = randomConsumer;
	}
	
	public void setReadonlyConsumer(ITerminalConsumer readonlyConsumer) {
		this.readonlyConsumer = readonlyConsumer;
	}
	
	public void setSintConsumer(INonTerminalConsumer sintConsumer) {
		this.sintConsumer = sintConsumer;
	}
	
	public ICharacterClass getKeyword$14$Delimiter() {
		return keyword$14$Delimiter;
	}
	
	public void setKeyword$14$Delimiter(ICharacterClass characterClass) {
		keyword$14$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$16$Delimiter() {
		return keyword$16$Delimiter;
	}
	
	public void setKeyword$16$Delimiter(ICharacterClass characterClass) {
		keyword$16$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$18$Delimiter() {
		return keyword$18$Delimiter;
	}
	
	public void setKeyword$18$Delimiter(ICharacterClass characterClass) {
		keyword$18$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$20$Delimiter() {
		return keyword$20$Delimiter;
	}
	
	public void setKeyword$20$Delimiter(ICharacterClass characterClass) {
		keyword$20$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$23$Delimiter() {
		return keyword$23$Delimiter;
	}
	
	public void setKeyword$23$Delimiter(ICharacterClass characterClass) {
		keyword$23$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$24$Delimiter() {
		return keyword$24$Delimiter;
	}
	
	public void setKeyword$24$Delimiter(ICharacterClass characterClass) {
		keyword$24$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$28$Delimiter() {
		return keyword$28$Delimiter;
	}
	
	public void setKeyword$28$Delimiter(ICharacterClass characterClass) {
		keyword$28$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$32$Delimiter() {
		return keyword$32$Delimiter;
	}
	
	public void setKeyword$32$Delimiter(ICharacterClass characterClass) {
		keyword$32$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$35$Delimiter() {
		return keyword$35$Delimiter;
	}
	
	public void setKeyword$35$Delimiter(ICharacterClass characterClass) {
		keyword$35$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$37$Delimiter() {
		return keyword$37$Delimiter;
	}
	
	public void setKeyword$37$Delimiter(ICharacterClass characterClass) {
		keyword$37$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$44$Delimiter() {
		return keyword$44$Delimiter;
	}
	
	public void setKeyword$44$Delimiter(ICharacterClass characterClass) {
		keyword$44$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$6$Delimiter() {
		return ruleCall$6$Delimiter;
	}
	
	public void setRuleCall$6$Delimiter(ISequenceMatcher matcher) {
		ruleCall$6$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$8$Delimiter() {
		return ruleCall$8$Delimiter;
	}
	
	public void setRuleCall$8$Delimiter(ISequenceMatcher matcher) {
		ruleCall$8$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$10$Delimiter() {
		return ruleCall$10$Delimiter;
	}
	
	public void setRuleCall$10$Delimiter(ISequenceMatcher matcher) {
		ruleCall$10$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$12$Delimiter() {
		return ruleCall$12$Delimiter;
	}
	
	public void setRuleCall$12$Delimiter(ISequenceMatcher matcher) {
		ruleCall$12$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$30$Delimiter() {
		return ruleCall$30$Delimiter;
	}
	
	public void setRuleCall$30$Delimiter(ISequenceMatcher matcher) {
		ruleCall$30$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$41$Delimiter() {
		return ruleCall$41$Delimiter;
	}
	
	public void setRuleCall$41$Delimiter(ISequenceMatcher matcher) {
		ruleCall$41$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$43$Delimiter() {
		return ruleCall$43$Delimiter;
	}
	
	public void setRuleCall$43$Delimiter(ISequenceMatcher matcher) {
		ruleCall$43$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
