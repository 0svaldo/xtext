/*
* generated by Xtext
*/
package org.eclipse.xtext.example.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.example.services.EcoreDslGrammarAccess.EGenericTypeReferenceDeclElements;

public final class EcoreDslEGenericTypeReferenceDeclConsumer extends NonTerminalConsumer {

	private EGenericTypeReferenceDeclElements rule;	

	private INonTerminalConsumer eGenericTypeDeclConsumer;

	private ITerminalConsumer idConsumer;

	private IElementConsumer alternatives$1$Consumer;

	private IElementConsumer group$2$Consumer;

	private IElementConsumer assignment$3$Consumer;

	private IElementConsumer crossReference$4$Consumer;

	private IElementConsumer group$7$Consumer;

	private IElementConsumer keyword$8$Consumer;

	private IElementConsumer assignment$9$Consumer;

	private IElementConsumer ruleCall$10$Consumer;

	private IElementConsumer group$11$Consumer;

	private IElementConsumer keyword$12$Consumer;

	private IElementConsumer assignment$13$Consumer;

	private IElementConsumer ruleCall$14$Consumer;

	private IElementConsumer keyword$15$Consumer;

	private IElementConsumer group$16$Consumer;

	private IElementConsumer keyword$17$Consumer;

	private IElementConsumer assignment$18$Consumer;

	private IElementConsumer crossReference$19$Consumer;

	private ICharacterClass keyword$8$Delimiter;

	private ICharacterClass keyword$12$Delimiter;

	private ICharacterClass keyword$15$Delimiter;

	private ICharacterClass keyword$17$Delimiter;

	private ISequenceMatcher ruleCall$6$Delimiter;

	private ISequenceMatcher ruleCall$21$Delimiter;

	protected class Alternatives$1$Consumer extends AlternativesConsumer {
		
		protected Alternatives$1$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$2$Consumer);
			acceptor.accept(group$16$Consumer);
		}
	}

	protected class Group$2$Consumer extends GroupConsumer {
		
		protected Group$2$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$3$Consumer);
			acceptor.accept(group$7$Consumer);
		}
	}

	protected class Assignment$3$Consumer extends AssignmentConsumer {
		
		protected Assignment$3$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$4$Consumer;
		}
	}

	protected class CrossReference$4$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$4$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "eClassifier", false, false, getElement(), getRuleCall$6$Delimiter(), optional);
		}
	}

	protected class Group$7$Consumer extends OptionalGroupConsumer {
		
		protected Group$7$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$8$Consumer);
			acceptor.accept(assignment$9$Consumer);
			acceptor.accept(group$11$Consumer);
			acceptor.accept(keyword$15$Consumer);
		}
	}

	protected class Keyword$8$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$8$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$8$Delimiter(), optional);
		}
	}

	protected class Assignment$9$Consumer extends AssignmentConsumer {
		
		protected Assignment$9$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$10$Consumer;
		}
	}

	protected class RuleCall$10$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$10$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eGenericTypeDeclConsumer, "eTypeArguments", true, false, false, getElement(), optional);
		}
	}

	protected class Group$11$Consumer extends LoopGroupConsumer {
		
		protected Group$11$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$12$Consumer);
			acceptor.accept(assignment$13$Consumer);
		}
	}

	protected class Keyword$12$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$12$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$12$Delimiter(), optional);
		}
	}

	protected class Assignment$13$Consumer extends AssignmentConsumer {
		
		protected Assignment$13$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$14$Consumer;
		}
	}

	protected class RuleCall$14$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$14$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eGenericTypeDeclConsumer, "eTypeArguments", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$15$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$15$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$15$Delimiter(), optional);
		}
	}

	protected class Group$16$Consumer extends GroupConsumer {
		
		protected Group$16$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$17$Consumer);
			acceptor.accept(assignment$18$Consumer);
		}
	}

	protected class Keyword$17$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$17$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$17$Delimiter(), optional);
		}
	}

	protected class Assignment$18$Consumer extends AssignmentConsumer {
		
		protected Assignment$18$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$19$Consumer;
		}
	}

	protected class CrossReference$19$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$19$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "eTypeParameter", false, false, getElement(), getRuleCall$21$Delimiter(), optional);
		}
	}

	public EcoreDslEGenericTypeReferenceDeclConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$8$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$12$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$15$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$17$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$6$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$21$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return alternatives$1$Consumer.consume();
	}

	public EGenericTypeReferenceDeclElements getRule() {
		return rule;
	}
	
	public void setRule(EGenericTypeReferenceDeclElements rule) {
		this.rule = rule;
		
		alternatives$1$Consumer = new Alternatives$1$Consumer(rule.getAlternatives());
		group$2$Consumer = new Group$2$Consumer(rule.getGroup_0());
		assignment$3$Consumer = new Assignment$3$Consumer(rule.getEClassifierAssignment_0_0());
		crossReference$4$Consumer = new CrossReference$4$Consumer(rule.getEClassifierEClassifierCrossReference_0_0_0());
		group$7$Consumer = new Group$7$Consumer(rule.getGroup_0_1());
		keyword$8$Consumer = new Keyword$8$Consumer(rule.getLessThanSignKeyword_0_1_0());
		assignment$9$Consumer = new Assignment$9$Consumer(rule.getETypeArgumentsAssignment_0_1_1());
		ruleCall$10$Consumer = new RuleCall$10$Consumer(rule.getETypeArgumentsEGenericTypeDeclParserRuleCall_0_1_1_0());
		group$11$Consumer = new Group$11$Consumer(rule.getGroup_0_1_2());
		keyword$12$Consumer = new Keyword$12$Consumer(rule.getCommaKeyword_0_1_2_0());
		assignment$13$Consumer = new Assignment$13$Consumer(rule.getETypeArgumentsAssignment_0_1_2_1());
		ruleCall$14$Consumer = new RuleCall$14$Consumer(rule.getETypeArgumentsEGenericTypeDeclParserRuleCall_0_1_2_1_0());
		keyword$15$Consumer = new Keyword$15$Consumer(rule.getGreaterThanSignKeyword_0_1_3());
		group$16$Consumer = new Group$16$Consumer(rule.getGroup_1());
		keyword$17$Consumer = new Keyword$17$Consumer(rule.getNumberSignKeyword_1_0());
		assignment$18$Consumer = new Assignment$18$Consumer(rule.getETypeParameterAssignment_1_1());
		crossReference$19$Consumer = new CrossReference$19$Consumer(rule.getETypeParameterETypeParameterCrossReference_1_1_0());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setEGenericTypeDeclConsumer(INonTerminalConsumer eGenericTypeDeclConsumer) {
		this.eGenericTypeDeclConsumer = eGenericTypeDeclConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public ICharacterClass getKeyword$8$Delimiter() {
		return keyword$8$Delimiter;
	}
	
	public void setKeyword$8$Delimiter(ICharacterClass characterClass) {
		keyword$8$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$12$Delimiter() {
		return keyword$12$Delimiter;
	}
	
	public void setKeyword$12$Delimiter(ICharacterClass characterClass) {
		keyword$12$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$15$Delimiter() {
		return keyword$15$Delimiter;
	}
	
	public void setKeyword$15$Delimiter(ICharacterClass characterClass) {
		keyword$15$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$17$Delimiter() {
		return keyword$17$Delimiter;
	}
	
	public void setKeyword$17$Delimiter(ICharacterClass characterClass) {
		keyword$17$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$6$Delimiter() {
		return ruleCall$6$Delimiter;
	}
	
	public void setRuleCall$6$Delimiter(ISequenceMatcher matcher) {
		ruleCall$6$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$21$Delimiter() {
		return ruleCall$21$Delimiter;
	}
	
	public void setRuleCall$21$Delimiter(ISequenceMatcher matcher) {
		ruleCall$21$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
