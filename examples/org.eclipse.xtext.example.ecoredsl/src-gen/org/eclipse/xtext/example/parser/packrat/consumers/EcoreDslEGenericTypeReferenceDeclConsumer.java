/*
* generated by Xtext
*/
package org.eclipse.xtext.example.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.example.services.EcoreDslGrammarAccess.EGenericTypeReferenceDeclElements;

public final class EcoreDslEGenericTypeReferenceDeclConsumer extends NonTerminalConsumer {

	private EGenericTypeReferenceDeclElements rule;	

	private INonTerminalConsumer eGenericTypeDeclConsumer;

	private ITerminalConsumer idConsumer;

	private IElementConsumer alternatives$1$Consumer;

	private IElementConsumer group$2$Consumer;

	private IElementConsumer assignment$3$Consumer;

	private IElementConsumer crossReference$4$Consumer;

	private IElementConsumer group$6$Consumer;

	private IElementConsumer keyword$9$Consumer;

	private IElementConsumer assignment$10$Consumer;

	private IElementConsumer ruleCall$11$Consumer;

	private IElementConsumer group$12$Consumer;

	private IElementConsumer keyword$13$Consumer;

	private IElementConsumer assignment$14$Consumer;

	private IElementConsumer ruleCall$15$Consumer;

	private IElementConsumer keyword$16$Consumer;

	private IElementConsumer group$17$Consumer;

	private IElementConsumer keyword$18$Consumer;

	private IElementConsumer assignment$19$Consumer;

	private IElementConsumer crossReference$20$Consumer;

	private ISequenceMatcher crossReference$4$Delimiter;

	private ISequenceMatcher crossReference$20$Delimiter;

	private ICharacterClass keyword$9$Delimiter;

	private ICharacterClass keyword$13$Delimiter;

	private ICharacterClass keyword$16$Delimiter;

	private ICharacterClass keyword$18$Delimiter;

	protected class Alternatives$1$Consumer extends AlternativesConsumer {
		
		protected Alternatives$1$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$2$Consumer);
			acceptor.accept(group$17$Consumer);
		}
	}

	protected class Group$2$Consumer extends GroupConsumer {
		
		protected Group$2$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$3$Consumer);
			acceptor.accept(group$6$Consumer);
		}
	}

	protected class Assignment$3$Consumer extends AssignmentConsumer {
		
		protected Assignment$3$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$4$Consumer;
		}
	}

	protected class CrossReference$4$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$4$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeTerminal(idConsumer, "eClassifier", false, false, getElement(), getCrossReference$4$Delimiter());
		}
	}

	protected class Group$6$Consumer extends OptionalGroupConsumer {
		
		protected Group$6$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$9$Consumer);
			acceptor.accept(assignment$10$Consumer);
			acceptor.accept(group$12$Consumer);
			acceptor.accept(keyword$16$Consumer);
		}
	}

	protected class Keyword$9$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$9$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$9$Delimiter());
		}
	}

	protected class Assignment$10$Consumer extends AssignmentConsumer {
		
		protected Assignment$10$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$11$Consumer;
		}
	}

	protected class RuleCall$11$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$11$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(eGenericTypeDeclConsumer, "eTypeArguments", true, false, false, getElement());
		}
	}

	protected class Group$12$Consumer extends LoopGroupConsumer {
		
		protected Group$12$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$13$Consumer);
			acceptor.accept(assignment$14$Consumer);
		}
	}

	protected class Keyword$13$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$13$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$13$Delimiter());
		}
	}

	protected class Assignment$14$Consumer extends AssignmentConsumer {
		
		protected Assignment$14$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$15$Consumer;
		}
	}

	protected class RuleCall$15$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$15$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(eGenericTypeDeclConsumer, "eTypeArguments", true, false, false, getElement());
		}
	}

	protected class Keyword$16$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$16$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$16$Delimiter());
		}
	}

	protected class Group$17$Consumer extends GroupConsumer {
		
		protected Group$17$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$18$Consumer);
			acceptor.accept(assignment$19$Consumer);
		}
	}

	protected class Keyword$18$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$18$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$18$Delimiter());
		}
	}

	protected class Assignment$19$Consumer extends AssignmentConsumer {
		
		protected Assignment$19$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$20$Consumer;
		}
	}

	protected class CrossReference$20$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$20$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeTerminal(idConsumer, "eTypeParameter", false, false, getElement(), getCrossReference$20$Delimiter());
		}
	}

	public EcoreDslEGenericTypeReferenceDeclConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		crossReference$4$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		crossReference$20$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		keyword$9$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$13$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$16$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$18$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return alternatives$1$Consumer.consume();
	}

	public EGenericTypeReferenceDeclElements getRule() {
		return rule;
	}
	
	public void setRule(EGenericTypeReferenceDeclElements rule) {
		this.rule = rule;
		
		alternatives$1$Consumer = new Alternatives$1$Consumer(rule.eleAlternatives());
		group$2$Consumer = new Group$2$Consumer(rule.ele0Group());
		assignment$3$Consumer = new Assignment$3$Consumer(rule.ele00AssignmentEClassifier());
		crossReference$4$Consumer = new CrossReference$4$Consumer(rule.ele000CrossReferenceEStringEClassifier());
		group$6$Consumer = new Group$6$Consumer(rule.ele01Group());
		keyword$9$Consumer = new Keyword$9$Consumer(rule.ele01000KeywordLessThanSign());
		assignment$10$Consumer = new Assignment$10$Consumer(rule.ele01001AssignmentETypeArguments());
		ruleCall$11$Consumer = new RuleCall$11$Consumer(rule.ele010010ParserRuleCallEGenericTypeDecl());
		group$12$Consumer = new Group$12$Consumer(rule.ele0101Group());
		keyword$13$Consumer = new Keyword$13$Consumer(rule.ele01010KeywordComma());
		assignment$14$Consumer = new Assignment$14$Consumer(rule.ele01011AssignmentETypeArguments());
		ruleCall$15$Consumer = new RuleCall$15$Consumer(rule.ele010110ParserRuleCallEGenericTypeDecl());
		keyword$16$Consumer = new Keyword$16$Consumer(rule.ele011KeywordGreaterThanSign());
		group$17$Consumer = new Group$17$Consumer(rule.ele1Group());
		keyword$18$Consumer = new Keyword$18$Consumer(rule.ele10KeywordNumberSign());
		assignment$19$Consumer = new Assignment$19$Consumer(rule.ele11AssignmentETypeParameter());
		crossReference$20$Consumer = new CrossReference$20$Consumer(rule.ele110CrossReferenceEStringETypeParameter());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setEGenericTypeDeclConsumer(INonTerminalConsumer eGenericTypeDeclConsumer) {
		this.eGenericTypeDeclConsumer = eGenericTypeDeclConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public ISequenceMatcher getCrossReference$4$Delimiter() {
		return crossReference$4$Delimiter;
	}
	
	public void setCrossReference$4$Delimiter(ISequenceMatcher matcher) {
		crossReference$4$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getCrossReference$20$Delimiter() {
		return crossReference$20$Delimiter;
	}
	
	public void setCrossReference$20$Delimiter(ISequenceMatcher matcher) {
		crossReference$20$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ICharacterClass getKeyword$9$Delimiter() {
		return keyword$9$Delimiter;
	}
	
	public void setKeyword$9$Delimiter(ICharacterClass characterClass) {
		keyword$9$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$13$Delimiter() {
		return keyword$13$Delimiter;
	}
	
	public void setKeyword$13$Delimiter(ICharacterClass characterClass) {
		keyword$13$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$16$Delimiter() {
		return keyword$16$Delimiter;
	}
	
	public void setKeyword$16$Delimiter(ICharacterClass characterClass) {
		keyword$16$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$18$Delimiter() {
		return keyword$18$Delimiter;
	}
	
	public void setKeyword$18$Delimiter(ICharacterClass characterClass) {
		keyword$18$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
