/*
* generated by Xtext
*/
package org.eclipse.xtext.example.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.example.services.EcoreDslGrammarAccess.EGenericTypeDeclElements;

public final class EcoreDslEGenericTypeDeclConsumer extends NonTerminalConsumer {

	private EGenericTypeDeclElements rule;	

	private INonTerminalConsumer eGenericTypeDeclConsumer;

	private ITerminalConsumer idConsumer;

	private IElementConsumer alternatives$1$Consumer;

	private IElementConsumer group$3$Consumer;

	private IElementConsumer assignment$4$Consumer;

	private IElementConsumer crossReference$5$Consumer;

	private IElementConsumer group$7$Consumer;

	private IElementConsumer keyword$10$Consumer;

	private IElementConsumer assignment$11$Consumer;

	private IElementConsumer ruleCall$12$Consumer;

	private IElementConsumer group$13$Consumer;

	private IElementConsumer keyword$14$Consumer;

	private IElementConsumer assignment$15$Consumer;

	private IElementConsumer ruleCall$16$Consumer;

	private IElementConsumer keyword$17$Consumer;

	private IElementConsumer group$18$Consumer;

	private IElementConsumer keyword$19$Consumer;

	private IElementConsumer assignment$20$Consumer;

	private IElementConsumer crossReference$21$Consumer;

	private IElementConsumer group$23$Consumer;

	private IElementConsumer keyword$24$Consumer;

	private IElementConsumer alternatives$25$Consumer;

	private IElementConsumer group$26$Consumer;

	private IElementConsumer keyword$27$Consumer;

	private IElementConsumer assignment$28$Consumer;

	private IElementConsumer ruleCall$29$Consumer;

	private IElementConsumer group$30$Consumer;

	private IElementConsumer keyword$31$Consumer;

	private IElementConsumer assignment$32$Consumer;

	private IElementConsumer ruleCall$33$Consumer;

	private ISequenceMatcher crossReference$5$Delimiter;

	private ISequenceMatcher crossReference$21$Delimiter;

	private ICharacterClass keyword$10$Delimiter;

	private ICharacterClass keyword$14$Delimiter;

	private ICharacterClass keyword$17$Delimiter;

	private ICharacterClass keyword$19$Delimiter;

	private ICharacterClass keyword$24$Delimiter;

	private ICharacterClass keyword$27$Delimiter;

	private ICharacterClass keyword$31$Delimiter;

	protected class Alternatives$1$Consumer extends AlternativesConsumer {
		
		protected Alternatives$1$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$3$Consumer);
			acceptor.accept(group$18$Consumer);
			acceptor.accept(group$23$Consumer);
		}
	}

	protected class Group$3$Consumer extends GroupConsumer {
		
		protected Group$3$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$4$Consumer);
			acceptor.accept(group$7$Consumer);
		}
	}

	protected class Assignment$4$Consumer extends AssignmentConsumer {
		
		protected Assignment$4$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$5$Consumer;
		}
	}

	protected class CrossReference$5$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$5$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeTerminal(idConsumer, "eClassifier", false, false, getElement(), getCrossReference$5$Delimiter());
		}
	}

	protected class Group$7$Consumer extends OptionalGroupConsumer {
		
		protected Group$7$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$10$Consumer);
			acceptor.accept(assignment$11$Consumer);
			acceptor.accept(group$13$Consumer);
			acceptor.accept(keyword$17$Consumer);
		}
	}

	protected class Keyword$10$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$10$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$10$Delimiter());
		}
	}

	protected class Assignment$11$Consumer extends AssignmentConsumer {
		
		protected Assignment$11$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$12$Consumer;
		}
	}

	protected class RuleCall$12$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$12$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(eGenericTypeDeclConsumer, "eTypeArguments", true, false, false, getElement());
		}
	}

	protected class Group$13$Consumer extends LoopGroupConsumer {
		
		protected Group$13$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$14$Consumer);
			acceptor.accept(assignment$15$Consumer);
		}
	}

	protected class Keyword$14$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$14$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$14$Delimiter());
		}
	}

	protected class Assignment$15$Consumer extends AssignmentConsumer {
		
		protected Assignment$15$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$16$Consumer;
		}
	}

	protected class RuleCall$16$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$16$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(eGenericTypeDeclConsumer, "eTypeArguments", true, false, false, getElement());
		}
	}

	protected class Keyword$17$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$17$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$17$Delimiter());
		}
	}

	protected class Group$18$Consumer extends GroupConsumer {
		
		protected Group$18$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$19$Consumer);
			acceptor.accept(assignment$20$Consumer);
		}
	}

	protected class Keyword$19$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$19$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$19$Delimiter());
		}
	}

	protected class Assignment$20$Consumer extends AssignmentConsumer {
		
		protected Assignment$20$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$21$Consumer;
		}
	}

	protected class CrossReference$21$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$21$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeTerminal(idConsumer, "eTypeParameter", false, false, getElement(), getCrossReference$21$Delimiter());
		}
	}

	protected class Group$23$Consumer extends GroupConsumer {
		
		protected Group$23$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$24$Consumer);
			acceptor.accept(alternatives$25$Consumer);
		}
	}

	protected class Keyword$24$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$24$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$24$Delimiter());
		}
	}

	protected class Alternatives$25$Consumer extends AlternativesConsumer {
		
		protected Alternatives$25$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$26$Consumer);
			acceptor.accept(group$30$Consumer);
		}
	}

	protected class Group$26$Consumer extends GroupConsumer {
		
		protected Group$26$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$27$Consumer);
			acceptor.accept(assignment$28$Consumer);
		}
	}

	protected class Keyword$27$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$27$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$27$Delimiter());
		}
	}

	protected class Assignment$28$Consumer extends AssignmentConsumer {
		
		protected Assignment$28$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$29$Consumer;
		}
	}

	protected class RuleCall$29$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$29$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(eGenericTypeDeclConsumer, "eUpperBound", false, false, false, getElement());
		}
	}

	protected class Group$30$Consumer extends GroupConsumer {
		
		protected Group$30$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$31$Consumer);
			acceptor.accept(assignment$32$Consumer);
		}
	}

	protected class Keyword$31$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$31$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$31$Delimiter());
		}
	}

	protected class Assignment$32$Consumer extends AssignmentConsumer {
		
		protected Assignment$32$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$33$Consumer;
		}
	}

	protected class RuleCall$33$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$33$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(eGenericTypeDeclConsumer, "eLowerBound", false, false, false, getElement());
		}
	}

	public EcoreDslEGenericTypeDeclConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		crossReference$5$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		crossReference$21$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		keyword$10$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$14$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$17$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$19$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$24$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$27$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$31$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return alternatives$1$Consumer.consume();
	}

	public EGenericTypeDeclElements getRule() {
		return rule;
	}
	
	public void setRule(EGenericTypeDeclElements rule) {
		this.rule = rule;
		
		alternatives$1$Consumer = new Alternatives$1$Consumer(rule.eleAlternatives());
		group$3$Consumer = new Group$3$Consumer(rule.ele00Group());
		assignment$4$Consumer = new Assignment$4$Consumer(rule.ele000AssignmentEClassifier());
		crossReference$5$Consumer = new CrossReference$5$Consumer(rule.ele0000CrossReferenceEStringEClassifier());
		group$7$Consumer = new Group$7$Consumer(rule.ele001Group());
		keyword$10$Consumer = new Keyword$10$Consumer(rule.ele001000KeywordLessThanSign());
		assignment$11$Consumer = new Assignment$11$Consumer(rule.ele001001AssignmentETypeArguments());
		ruleCall$12$Consumer = new RuleCall$12$Consumer(rule.ele0010010ParserRuleCallEGenericTypeDecl());
		group$13$Consumer = new Group$13$Consumer(rule.ele00101Group());
		keyword$14$Consumer = new Keyword$14$Consumer(rule.ele001010KeywordComma());
		assignment$15$Consumer = new Assignment$15$Consumer(rule.ele001011AssignmentETypeArguments());
		ruleCall$16$Consumer = new RuleCall$16$Consumer(rule.ele0010110ParserRuleCallEGenericTypeDecl());
		keyword$17$Consumer = new Keyword$17$Consumer(rule.ele0011KeywordGreaterThanSign());
		group$18$Consumer = new Group$18$Consumer(rule.ele01Group());
		keyword$19$Consumer = new Keyword$19$Consumer(rule.ele010KeywordNumberSign());
		assignment$20$Consumer = new Assignment$20$Consumer(rule.ele011AssignmentETypeParameter());
		crossReference$21$Consumer = new CrossReference$21$Consumer(rule.ele0110CrossReferenceEStringETypeParameter());
		group$23$Consumer = new Group$23$Consumer(rule.ele1Group());
		keyword$24$Consumer = new Keyword$24$Consumer(rule.ele10KeywordQuestionMark());
		alternatives$25$Consumer = new Alternatives$25$Consumer(rule.ele11Alternatives());
		group$26$Consumer = new Group$26$Consumer(rule.ele110Group());
		keyword$27$Consumer = new Keyword$27$Consumer(rule.ele1100KeywordExtends());
		assignment$28$Consumer = new Assignment$28$Consumer(rule.ele1101AssignmentEUpperBound());
		ruleCall$29$Consumer = new RuleCall$29$Consumer(rule.ele11010ParserRuleCallEGenericTypeDecl());
		group$30$Consumer = new Group$30$Consumer(rule.ele111Group());
		keyword$31$Consumer = new Keyword$31$Consumer(rule.ele1110KeywordSuper());
		assignment$32$Consumer = new Assignment$32$Consumer(rule.ele1111AssignmentELowerBound());
		ruleCall$33$Consumer = new RuleCall$33$Consumer(rule.ele11110ParserRuleCallEGenericTypeDecl());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setEGenericTypeDeclConsumer(INonTerminalConsumer eGenericTypeDeclConsumer) {
		this.eGenericTypeDeclConsumer = eGenericTypeDeclConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public ISequenceMatcher getCrossReference$5$Delimiter() {
		return crossReference$5$Delimiter;
	}
	
	public void setCrossReference$5$Delimiter(ISequenceMatcher matcher) {
		crossReference$5$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getCrossReference$21$Delimiter() {
		return crossReference$21$Delimiter;
	}
	
	public void setCrossReference$21$Delimiter(ISequenceMatcher matcher) {
		crossReference$21$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ICharacterClass getKeyword$10$Delimiter() {
		return keyword$10$Delimiter;
	}
	
	public void setKeyword$10$Delimiter(ICharacterClass characterClass) {
		keyword$10$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$14$Delimiter() {
		return keyword$14$Delimiter;
	}
	
	public void setKeyword$14$Delimiter(ICharacterClass characterClass) {
		keyword$14$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$17$Delimiter() {
		return keyword$17$Delimiter;
	}
	
	public void setKeyword$17$Delimiter(ICharacterClass characterClass) {
		keyword$17$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$19$Delimiter() {
		return keyword$19$Delimiter;
	}
	
	public void setKeyword$19$Delimiter(ICharacterClass characterClass) {
		keyword$19$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$24$Delimiter() {
		return keyword$24$Delimiter;
	}
	
	public void setKeyword$24$Delimiter(ICharacterClass characterClass) {
		keyword$24$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$27$Delimiter() {
		return keyword$27$Delimiter;
	}
	
	public void setKeyword$27$Delimiter(ICharacterClass characterClass) {
		keyword$27$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$31$Delimiter() {
		return keyword$31$Delimiter;
	}
	
	public void setKeyword$31$Delimiter(ICharacterClass characterClass) {
		keyword$31$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
