/*
* generated by Xtext
*/
package org.eclipse.xtext.example.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;

import org.eclipse.xtext.AbstractRule;

import org.eclipse.xtext.parser.packrat.IMarkerFactory.IMarker;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ConsumeResult;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.example.services.EcoreDslGrammarAccess.EParameterDeclElements;

import org.eclipse.xtext.example.parser.packrat.consumers.EcoreDslEAnnotationDeclConsumer;
import org.eclipse.xtext.example.parser.packrat.consumers.EcoreDslEGenericTypeReferenceDeclConsumer;
import org.eclipse.xtext.builtin.parser.packrat.consumers.XtextBuiltinIDConsumer;

@SuppressWarnings("unused")
public final class EcoreDslEParameterDeclConsumer extends NonTerminalConsumer {

	private EParameterDeclElements rule;
	
	private INonTerminalConsumer eAnnotationDeclConsumer;
	private INonTerminalConsumer eGenericTypeReferenceDeclConsumer;
	private ITerminalConsumer idConsumer;

	private ISequenceMatcher ruleCall$8$Delimiter;
	
	public EcoreDslEParameterDeclConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		ruleCall$8$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume(int entryPoint) throws Exception {
		return consumeGroup$1(entryPoint);
	}

	protected int consumeGroup$1(int entryPoint) throws Exception {
		GroupResult result = createGroupResult(getRule().eleGroup());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$3(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00AssignmentEAnnotations());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$5(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele01AssignmentEGenericType());
					return result.getResult();
				}
			case 2:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$7(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele1AssignmentName());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeAssignment$3(int entryPoint) throws Exception {
		IMarker marker = mark();
		while(doConsumeAssignment$3(entryPoint) == ConsumeResult.SUCCESS) {
			marker.flush();
		}
		marker.rollback();
		skipped(getRule().ele00AssignmentEAnnotations());
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeAssignment$3(int entryPoint) throws Exception {
		return consumeRuleCall$4(entryPoint);
	}

	protected int consumeRuleCall$4(int entryPoint) throws Exception {
		return consumeNonTerminal(eAnnotationDeclConsumer, "eAnnotations", true, false, false, getRule().ele000ParserRuleCallEAnnotationDecl());
	}

	protected int consumeAssignment$5(int entryPoint) throws Exception {
		return consumeRuleCall$6(entryPoint);
	}

	protected int consumeRuleCall$6(int entryPoint) throws Exception {
		return consumeNonTerminal(eGenericTypeReferenceDeclConsumer, "eGenericType", false, false, false, getRule().ele010ParserRuleCallEGenericTypeReferenceDecl());
	}

	protected int consumeAssignment$7(int entryPoint) throws Exception {
		return consumeRuleCall$8(entryPoint);
	}

	protected int consumeRuleCall$8(int entryPoint) throws Exception {
		return consumeTerminal(idConsumer, "name", false, false, getRule().ele10LexerRuleCallID(), getRuleCall$8$Delimiter());
	}

	public EParameterDeclElements getRule() {
		return rule;
	}
	
	public void setRule(EParameterDeclElements rule) {
		this.rule = rule;
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setEAnnotationDeclConsumer(INonTerminalConsumer eAnnotationDeclConsumer) {
		this.eAnnotationDeclConsumer = eAnnotationDeclConsumer;
	}
	
	public void setEGenericTypeReferenceDeclConsumer(INonTerminalConsumer eGenericTypeReferenceDeclConsumer) {
		this.eGenericTypeReferenceDeclConsumer = eGenericTypeReferenceDeclConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public ISequenceMatcher getRuleCall$8$Delimiter() {
		return ruleCall$8$Delimiter;
	}
	
	public void setRuleCall$8$Delimiter(ISequenceMatcher matcher) {
		ruleCall$8$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
