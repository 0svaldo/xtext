/*
* generated by Xtext
*/
package org.eclipse.xtext.example.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;

import org.eclipse.xtext.AbstractRule;

import org.eclipse.xtext.parser.packrat.IMarkerFactory.IMarker;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ConsumeResult;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.example.services.EcoreDslGrammarAccess.EPackageDeclElements;

import org.eclipse.xtext.example.parser.packrat.consumers.EcoreDslEAnnotationDeclConsumer;
import org.eclipse.xtext.example.parser.packrat.consumers.EcoreDslEClassifierDeclConsumer;
import org.eclipse.xtext.example.parser.packrat.consumers.EcoreDslQIDConsumer;
import org.eclipse.xtext.builtin.parser.packrat.consumers.XtextBuiltinSTRINGConsumer;
import org.eclipse.xtext.example.parser.packrat.consumers.EcoreDslSubEPackageDeclConsumer;

@SuppressWarnings("unused")
public final class EcoreDslEPackageDeclConsumer extends NonTerminalConsumer {

	private EPackageDeclElements rule;
	
	private INonTerminalConsumer eAnnotationDeclConsumer;
	private INonTerminalConsumer eClassifierDeclConsumer;
	private INonTerminalConsumer qidConsumer;
	private ITerminalConsumer stringConsumer;
	private INonTerminalConsumer subEPackageDeclConsumer;

	private ICharacterClass keyword$14$Delimiter;
	
	private ICharacterClass keyword$17$Delimiter;
	
	private ICharacterClass keyword$18$Delimiter;
	
	private ICharacterClass keyword$21$Delimiter;
	
	private ICharacterClass keyword$22$Delimiter;
	
	private ICharacterClass keyword$25$Delimiter;
	
	private ICharacterClass keyword$31$Delimiter;
	
	private ISequenceMatcher ruleCall$20$Delimiter;
	
	public EcoreDslEPackageDeclConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$14$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$17$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$18$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$21$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$22$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$25$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$31$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$20$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume(int entryPoint) throws Exception {
		return consumeGroup$1(entryPoint);
	}

	protected int consumeGroup$1(int entryPoint) throws Exception {
		int result = doConsumeGroup$1(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeGroup$1(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeGroup$1(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().eleGroup());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$12(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00000000000AssignmentEAnnotations());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$14(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00000000001KeywordPackage());
					return result.getResult();
				}
			case 2:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$15(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0000000001AssignmentName());
					return result.getResult();
				}
			case 3:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$17(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele000000001KeywordNsURI());
					return result.getResult();
				}
			case 4:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$18(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00000001KeywordEqualsSign());
					return result.getResult();
				}
			case 5:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$19(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0000001AssignmentNsURI());
					return result.getResult();
				}
			case 6:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$21(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele000001KeywordNsPrefix());
					return result.getResult();
				}
			case 7:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$22(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00001KeywordEqualsSign());
					return result.getResult();
				}
			case 8:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$23(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0001AssignmentNsPrefix());
					return result.getResult();
				}
			case 9:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$25(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele001KeywordLeftCurlyBracket());
					return result.getResult();
				}
			case 10:
				result.nextStep();
				if (result.didGroupFail(consumeAlternatives$26(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele01Alternatives());
					return result.getResult();
				}
			case 11:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$31(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele1KeywordRightCurlyBracket());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeAssignment$12(int entryPoint) throws Exception {
		IMarker marker = mark();
		while(doConsumeAssignment$12(entryPoint) == ConsumeResult.SUCCESS) {
			marker.flush();
		}
		marker.rollback();
		skipped(getRule().ele00000000000AssignmentEAnnotations());
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeAssignment$12(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele00000000000AssignmentEAnnotations());
		return result.getResult(consumeRuleCall$13(entryPoint));
	}

	protected int consumeRuleCall$13(int entryPoint) throws Exception {
		return consumeNonTerminal(eAnnotationDeclConsumer, "eAnnotations", true, false, false, getRule().ele000000000000ParserRuleCallEAnnotationDecl());
	}

	protected int consumeKeyword$14(int entryPoint) throws Exception {
		int result = doConsumeKeyword$14(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$14(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$14(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele00000000001KeywordPackage(), null, false, false, getKeyword$14$Delimiter());
	}

	protected int consumeAssignment$15(int entryPoint) throws Exception {
		int result = doConsumeAssignment$15(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$15(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$15(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele0000000001AssignmentName());
		return result.getResult(consumeRuleCall$16(entryPoint));
	}

	protected int consumeRuleCall$16(int entryPoint) throws Exception {
		return consumeNonTerminal(qidConsumer, "name", false, true, false, getRule().ele00000000010ParserRuleCallQID());
	}

	protected int consumeKeyword$17(int entryPoint) throws Exception {
		int result = doConsumeKeyword$17(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$17(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$17(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele000000001KeywordNsURI(), null, false, false, getKeyword$17$Delimiter());
	}

	protected int consumeKeyword$18(int entryPoint) throws Exception {
		int result = doConsumeKeyword$18(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$18(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$18(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele00000001KeywordEqualsSign(), null, false, false, getKeyword$18$Delimiter());
	}

	protected int consumeAssignment$19(int entryPoint) throws Exception {
		int result = doConsumeAssignment$19(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$19(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$19(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele0000001AssignmentNsURI());
		return result.getResult(consumeRuleCall$20(entryPoint));
	}

	protected int consumeRuleCall$20(int entryPoint) throws Exception {
		return consumeTerminal(stringConsumer, "nsURI", false, false, getRule().ele00000010LexerRuleCallSTRING(), getRuleCall$20$Delimiter());
	}

	protected int consumeKeyword$21(int entryPoint) throws Exception {
		int result = doConsumeKeyword$21(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$21(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$21(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele000001KeywordNsPrefix(), null, false, false, getKeyword$21$Delimiter());
	}

	protected int consumeKeyword$22(int entryPoint) throws Exception {
		int result = doConsumeKeyword$22(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$22(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$22(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele00001KeywordEqualsSign(), null, false, false, getKeyword$22$Delimiter());
	}

	protected int consumeAssignment$23(int entryPoint) throws Exception {
		int result = doConsumeAssignment$23(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$23(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$23(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele0001AssignmentNsPrefix());
		return result.getResult(consumeRuleCall$24(entryPoint));
	}

	protected int consumeRuleCall$24(int entryPoint) throws Exception {
		return consumeNonTerminal(qidConsumer, "nsPrefix", false, true, false, getRule().ele00010ParserRuleCallQID());
	}

	protected int consumeKeyword$25(int entryPoint) throws Exception {
		int result = doConsumeKeyword$25(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$25(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$25(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele001KeywordLeftCurlyBracket(), null, false, false, getKeyword$25$Delimiter());
	}

	protected int consumeAlternatives$26(int entryPoint) throws Exception {
		IMarker marker = mark();
		while(doConsumeAlternatives$26(entryPoint) == ConsumeResult.SUCCESS) {
			marker.flush();
		}
		marker.rollback();
		skipped(getRule().ele01Alternatives());
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeAlternatives$26(int entryPoint) throws Exception {
		final AlternativesResult result = createAlternativesResult(getRule().ele01Alternatives());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextAlternative();
				if (result.isAlternativeDone(consumeAssignment$27(nextEntryPoint()))) { 
					return result.getResult(); 
				}
			case 1:
				result.nextAlternative();
				if (result.isAlternativeDone(consumeAssignment$29(nextEntryPoint()))) { 
					return result.getResult(); 
				}
		}
		return result.getResult();
	}

	protected int consumeAssignment$27(int entryPoint) throws Exception {
		int result = doConsumeAssignment$27(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$27(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$27(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele010AssignmentESubpackages());
		return result.getResult(consumeRuleCall$28(entryPoint));
	}

	protected int consumeRuleCall$28(int entryPoint) throws Exception {
		return consumeNonTerminal(subEPackageDeclConsumer, "eSubpackages", true, false, false, getRule().ele0100ParserRuleCallSubEPackageDecl());
	}

	protected int consumeAssignment$29(int entryPoint) throws Exception {
		int result = doConsumeAssignment$29(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$29(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$29(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele011AssignmentEClassifiers());
		return result.getResult(consumeRuleCall$30(entryPoint));
	}

	protected int consumeRuleCall$30(int entryPoint) throws Exception {
		return consumeNonTerminal(eClassifierDeclConsumer, "eClassifiers", true, false, false, getRule().ele0110ParserRuleCallEClassifierDecl());
	}

	protected int consumeKeyword$31(int entryPoint) throws Exception {
		int result = doConsumeKeyword$31(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$31(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$31(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele1KeywordRightCurlyBracket(), null, false, false, getKeyword$31$Delimiter());
	}

	public EPackageDeclElements getRule() {
		return rule;
	}
	
	public void setRule(EPackageDeclElements rule) {
		this.rule = rule;
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setEAnnotationDeclConsumer(INonTerminalConsumer eAnnotationDeclConsumer) {
		this.eAnnotationDeclConsumer = eAnnotationDeclConsumer;
	}
	
	public void setEClassifierDeclConsumer(INonTerminalConsumer eClassifierDeclConsumer) {
		this.eClassifierDeclConsumer = eClassifierDeclConsumer;
	}
	
	public void setQidConsumer(INonTerminalConsumer qidConsumer) {
		this.qidConsumer = qidConsumer;
	}
	
	public void setStringConsumer(ITerminalConsumer stringConsumer) {
		this.stringConsumer = stringConsumer;
	}
	
	public void setSubEPackageDeclConsumer(INonTerminalConsumer subEPackageDeclConsumer) {
		this.subEPackageDeclConsumer = subEPackageDeclConsumer;
	}
	
	public ICharacterClass getKeyword$14$Delimiter() {
		return keyword$14$Delimiter;
	}
	
	public void setKeyword$14$Delimiter(ICharacterClass characterClass) {
		keyword$14$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$17$Delimiter() {
		return keyword$17$Delimiter;
	}
	
	public void setKeyword$17$Delimiter(ICharacterClass characterClass) {
		keyword$17$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$18$Delimiter() {
		return keyword$18$Delimiter;
	}
	
	public void setKeyword$18$Delimiter(ICharacterClass characterClass) {
		keyword$18$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$21$Delimiter() {
		return keyword$21$Delimiter;
	}
	
	public void setKeyword$21$Delimiter(ICharacterClass characterClass) {
		keyword$21$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$22$Delimiter() {
		return keyword$22$Delimiter;
	}
	
	public void setKeyword$22$Delimiter(ICharacterClass characterClass) {
		keyword$22$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$25$Delimiter() {
		return keyword$25$Delimiter;
	}
	
	public void setKeyword$25$Delimiter(ICharacterClass characterClass) {
		keyword$25$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$31$Delimiter() {
		return keyword$31$Delimiter;
	}
	
	public void setKeyword$31$Delimiter(ICharacterClass characterClass) {
		keyword$31$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$20$Delimiter() {
		return ruleCall$20$Delimiter;
	}
	
	public void setRuleCall$20$Delimiter(ISequenceMatcher matcher) {
		ruleCall$20$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
