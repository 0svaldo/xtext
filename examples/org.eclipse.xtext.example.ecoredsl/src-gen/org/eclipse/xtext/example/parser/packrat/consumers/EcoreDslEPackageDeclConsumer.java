/*
* generated by Xtext
*/
package org.eclipse.xtext.example.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.example.services.EcoreDslGrammarAccess.EPackageDeclElements;

public final class EcoreDslEPackageDeclConsumer extends NonTerminalConsumer {

	private EPackageDeclElements rule;	

	private INonTerminalConsumer eAnnotationDeclConsumer;

	private INonTerminalConsumer eClassifierDeclConsumer;

	private INonTerminalConsumer qidConsumer;

	private ITerminalConsumer stringConsumer;

	private INonTerminalConsumer subEPackageDeclConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer assignment$12$Consumer;

	private IElementConsumer ruleCall$13$Consumer;

	private IElementConsumer keyword$14$Consumer;

	private IElementConsumer assignment$15$Consumer;

	private IElementConsumer ruleCall$16$Consumer;

	private IElementConsumer keyword$17$Consumer;

	private IElementConsumer keyword$18$Consumer;

	private IElementConsumer assignment$19$Consumer;

	private IElementConsumer ruleCall$20$Consumer;

	private IElementConsumer keyword$21$Consumer;

	private IElementConsumer keyword$22$Consumer;

	private IElementConsumer assignment$23$Consumer;

	private IElementConsumer ruleCall$24$Consumer;

	private IElementConsumer keyword$25$Consumer;

	private IElementConsumer alternatives$26$Consumer;

	private IElementConsumer assignment$27$Consumer;

	private IElementConsumer ruleCall$28$Consumer;

	private IElementConsumer assignment$29$Consumer;

	private IElementConsumer ruleCall$30$Consumer;

	private IElementConsumer keyword$31$Consumer;

	private ICharacterClass keyword$14$Delimiter;

	private ICharacterClass keyword$17$Delimiter;

	private ICharacterClass keyword$18$Delimiter;

	private ICharacterClass keyword$21$Delimiter;

	private ICharacterClass keyword$22$Delimiter;

	private ICharacterClass keyword$25$Delimiter;

	private ICharacterClass keyword$31$Delimiter;

	private ISequenceMatcher ruleCall$20$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$12$Consumer);
			acceptor.accept(keyword$14$Consumer);
			acceptor.accept(assignment$15$Consumer);
			acceptor.accept(keyword$17$Consumer);
			acceptor.accept(keyword$18$Consumer);
			acceptor.accept(assignment$19$Consumer);
			acceptor.accept(keyword$21$Consumer);
			acceptor.accept(keyword$22$Consumer);
			acceptor.accept(assignment$23$Consumer);
			acceptor.accept(keyword$25$Consumer);
			acceptor.accept(alternatives$26$Consumer);
			acceptor.accept(keyword$31$Consumer);
		}
	}

	protected class Assignment$12$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$12$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$13$Consumer;
		}
	}

	protected class RuleCall$13$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$13$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eAnnotationDeclConsumer, "eAnnotations", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$14$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$14$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$14$Delimiter(), optional);
		}
	}

	protected class Assignment$15$Consumer extends AssignmentConsumer {
		
		protected Assignment$15$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$16$Consumer;
		}
	}

	protected class RuleCall$16$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$16$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(qidConsumer, "name", false, true, false, getElement(), optional);
		}
	}

	protected class Keyword$17$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$17$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$17$Delimiter(), optional);
		}
	}

	protected class Keyword$18$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$18$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$18$Delimiter(), optional);
		}
	}

	protected class Assignment$19$Consumer extends AssignmentConsumer {
		
		protected Assignment$19$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$20$Consumer;
		}
	}

	protected class RuleCall$20$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$20$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "nsURI", false, false, getElement(), getRuleCall$20$Delimiter(), optional);
		}
	}

	protected class Keyword$21$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$21$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$21$Delimiter(), optional);
		}
	}

	protected class Keyword$22$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$22$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$22$Delimiter(), optional);
		}
	}

	protected class Assignment$23$Consumer extends AssignmentConsumer {
		
		protected Assignment$23$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$24$Consumer;
		}
	}

	protected class RuleCall$24$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$24$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(qidConsumer, "nsPrefix", false, true, false, getElement(), optional);
		}
	}

	protected class Keyword$25$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$25$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$25$Delimiter(), optional);
		}
	}

	protected class Alternatives$26$Consumer extends LoopAlternativesConsumer {
		
		protected Alternatives$26$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$27$Consumer);
			acceptor.accept(assignment$29$Consumer);
		}
	}

	protected class Assignment$27$Consumer extends AssignmentConsumer {
		
		protected Assignment$27$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$28$Consumer;
		}
	}

	protected class RuleCall$28$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$28$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(subEPackageDeclConsumer, "eSubpackages", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$29$Consumer extends AssignmentConsumer {
		
		protected Assignment$29$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$30$Consumer;
		}
	}

	protected class RuleCall$30$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$30$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eClassifierDeclConsumer, "eClassifiers", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$31$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$31$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$31$Delimiter(), optional);
		}
	}

	public EcoreDslEPackageDeclConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$14$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$17$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$18$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$21$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$22$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$25$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$31$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$20$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public EPackageDeclElements getRule() {
		return rule;
	}
	
	public void setRule(EPackageDeclElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		assignment$12$Consumer = new Assignment$12$Consumer(rule.ele00000000000AssignmentEAnnotations());
		ruleCall$13$Consumer = new RuleCall$13$Consumer(rule.ele000000000000ParserRuleCallEAnnotationDecl());
		keyword$14$Consumer = new Keyword$14$Consumer(rule.ele00000000001KeywordPackage());
		assignment$15$Consumer = new Assignment$15$Consumer(rule.ele0000000001AssignmentName());
		ruleCall$16$Consumer = new RuleCall$16$Consumer(rule.ele00000000010ParserRuleCallQID());
		keyword$17$Consumer = new Keyword$17$Consumer(rule.ele000000001KeywordNsURI());
		keyword$18$Consumer = new Keyword$18$Consumer(rule.ele00000001KeywordEqualsSign());
		assignment$19$Consumer = new Assignment$19$Consumer(rule.ele0000001AssignmentNsURI());
		ruleCall$20$Consumer = new RuleCall$20$Consumer(rule.ele00000010ParserRuleCallSTRING());
		keyword$21$Consumer = new Keyword$21$Consumer(rule.ele000001KeywordNsPrefix());
		keyword$22$Consumer = new Keyword$22$Consumer(rule.ele00001KeywordEqualsSign());
		assignment$23$Consumer = new Assignment$23$Consumer(rule.ele0001AssignmentNsPrefix());
		ruleCall$24$Consumer = new RuleCall$24$Consumer(rule.ele00010ParserRuleCallQID());
		keyword$25$Consumer = new Keyword$25$Consumer(rule.ele001KeywordLeftCurlyBracket());
		alternatives$26$Consumer = new Alternatives$26$Consumer(rule.ele01Alternatives());
		assignment$27$Consumer = new Assignment$27$Consumer(rule.ele010AssignmentESubpackages());
		ruleCall$28$Consumer = new RuleCall$28$Consumer(rule.ele0100ParserRuleCallSubEPackageDecl());
		assignment$29$Consumer = new Assignment$29$Consumer(rule.ele011AssignmentEClassifiers());
		ruleCall$30$Consumer = new RuleCall$30$Consumer(rule.ele0110ParserRuleCallEClassifierDecl());
		keyword$31$Consumer = new Keyword$31$Consumer(rule.ele1KeywordRightCurlyBracket());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setEAnnotationDeclConsumer(INonTerminalConsumer eAnnotationDeclConsumer) {
		this.eAnnotationDeclConsumer = eAnnotationDeclConsumer;
	}
	
	public void setEClassifierDeclConsumer(INonTerminalConsumer eClassifierDeclConsumer) {
		this.eClassifierDeclConsumer = eClassifierDeclConsumer;
	}
	
	public void setQidConsumer(INonTerminalConsumer qidConsumer) {
		this.qidConsumer = qidConsumer;
	}
	
	public void setStringConsumer(ITerminalConsumer stringConsumer) {
		this.stringConsumer = stringConsumer;
	}
	
	public void setSubEPackageDeclConsumer(INonTerminalConsumer subEPackageDeclConsumer) {
		this.subEPackageDeclConsumer = subEPackageDeclConsumer;
	}
	
	public ICharacterClass getKeyword$14$Delimiter() {
		return keyword$14$Delimiter;
	}
	
	public void setKeyword$14$Delimiter(ICharacterClass characterClass) {
		keyword$14$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$17$Delimiter() {
		return keyword$17$Delimiter;
	}
	
	public void setKeyword$17$Delimiter(ICharacterClass characterClass) {
		keyword$17$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$18$Delimiter() {
		return keyword$18$Delimiter;
	}
	
	public void setKeyword$18$Delimiter(ICharacterClass characterClass) {
		keyword$18$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$21$Delimiter() {
		return keyword$21$Delimiter;
	}
	
	public void setKeyword$21$Delimiter(ICharacterClass characterClass) {
		keyword$21$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$22$Delimiter() {
		return keyword$22$Delimiter;
	}
	
	public void setKeyword$22$Delimiter(ICharacterClass characterClass) {
		keyword$22$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$25$Delimiter() {
		return keyword$25$Delimiter;
	}
	
	public void setKeyword$25$Delimiter(ICharacterClass characterClass) {
		keyword$25$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$31$Delimiter() {
		return keyword$31$Delimiter;
	}
	
	public void setKeyword$31$Delimiter(ICharacterClass characterClass) {
		keyword$31$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$20$Delimiter() {
		return ruleCall$20$Delimiter;
	}
	
	public void setRuleCall$20$Delimiter(ISequenceMatcher matcher) {
		ruleCall$20$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
