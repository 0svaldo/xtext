/*
* generated by Xtext
*/
package org.eclipse.xtext.example.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.example.services.EcoreDslGrammarAccess.EOperationDeclElements;

public final class EcoreDslEOperationDeclConsumer extends NonTerminalConsumer {

	private EOperationDeclElements rule;	

	private INonTerminalConsumer eAnnotationDeclConsumer;

	private INonTerminalConsumer eGenericTypeReferenceDeclConsumer;

	private INonTerminalConsumer eParameterDeclConsumer;

	private INonTerminalConsumer eTypeParameterDeclConsumer;

	private ITerminalConsumer idConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer assignment$11$Consumer;

	private IElementConsumer ruleCall$12$Consumer;

	private IElementConsumer alternatives$13$Consumer;

	private IElementConsumer assignment$14$Consumer;

	private IElementConsumer keyword$15$Consumer;

	private IElementConsumer assignment$16$Consumer;

	private IElementConsumer keyword$17$Consumer;

	private IElementConsumer keyword$18$Consumer;

	private IElementConsumer alternatives$19$Consumer;

	private IElementConsumer assignment$20$Consumer;

	private IElementConsumer ruleCall$21$Consumer;

	private IElementConsumer keyword$22$Consumer;

	private IElementConsumer assignment$23$Consumer;

	private IElementConsumer ruleCall$24$Consumer;

	private IElementConsumer group$25$Consumer;

	private IElementConsumer keyword$28$Consumer;

	private IElementConsumer assignment$29$Consumer;

	private IElementConsumer ruleCall$30$Consumer;

	private IElementConsumer group$31$Consumer;

	private IElementConsumer keyword$32$Consumer;

	private IElementConsumer assignment$33$Consumer;

	private IElementConsumer ruleCall$34$Consumer;

	private IElementConsumer keyword$35$Consumer;

	private IElementConsumer keyword$36$Consumer;

	private IElementConsumer group$37$Consumer;

	private IElementConsumer assignment$38$Consumer;

	private IElementConsumer ruleCall$39$Consumer;

	private IElementConsumer group$40$Consumer;

	private IElementConsumer keyword$41$Consumer;

	private IElementConsumer assignment$42$Consumer;

	private IElementConsumer ruleCall$43$Consumer;

	private IElementConsumer keyword$44$Consumer;

	private IElementConsumer group$45$Consumer;

	private IElementConsumer keyword$47$Consumer;

	private IElementConsumer assignment$48$Consumer;

	private IElementConsumer ruleCall$49$Consumer;

	private IElementConsumer group$50$Consumer;

	private IElementConsumer keyword$51$Consumer;

	private IElementConsumer assignment$52$Consumer;

	private IElementConsumer ruleCall$53$Consumer;

	private IElementConsumer keyword$54$Consumer;

	private ICharacterClass keyword$15$Delimiter;

	private ICharacterClass keyword$17$Delimiter;

	private ICharacterClass keyword$18$Delimiter;

	private ICharacterClass keyword$22$Delimiter;

	private ICharacterClass keyword$28$Delimiter;

	private ICharacterClass keyword$32$Delimiter;

	private ICharacterClass keyword$35$Delimiter;

	private ICharacterClass keyword$36$Delimiter;

	private ICharacterClass keyword$41$Delimiter;

	private ICharacterClass keyword$44$Delimiter;

	private ICharacterClass keyword$47$Delimiter;

	private ICharacterClass keyword$51$Delimiter;

	private ICharacterClass keyword$54$Delimiter;

	private ISequenceMatcher ruleCall$24$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$11$Consumer);
			acceptor.accept(alternatives$13$Consumer);
			acceptor.accept(keyword$18$Consumer);
			acceptor.accept(alternatives$19$Consumer);
			acceptor.accept(assignment$23$Consumer);
			acceptor.accept(group$25$Consumer);
			acceptor.accept(keyword$36$Consumer);
			acceptor.accept(group$37$Consumer);
			acceptor.accept(keyword$44$Consumer);
			acceptor.accept(group$45$Consumer);
			acceptor.accept(keyword$54$Consumer);
		}
	}

	protected class Assignment$11$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$11$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$12$Consumer;
		}
	}

	protected class RuleCall$12$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$12$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eAnnotationDeclConsumer, "eAnnotations", true, false, false, getElement(), optional);
		}
	}

	protected class Alternatives$13$Consumer extends LoopAlternativesConsumer {
		
		protected Alternatives$13$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$14$Consumer);
			acceptor.accept(assignment$16$Consumer);
		}
	}

	protected class Assignment$14$Consumer extends AssignmentConsumer {
		
		protected Assignment$14$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$15$Consumer;
		}
	}

	protected class Keyword$15$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$15$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "unique", false, true, getKeyword$15$Delimiter(), optional);
		}
	}

	protected class Assignment$16$Consumer extends AssignmentConsumer {
		
		protected Assignment$16$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$17$Consumer;
		}
	}

	protected class Keyword$17$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$17$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "ordered", false, true, getKeyword$17$Delimiter(), optional);
		}
	}

	protected class Keyword$18$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$18$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$18$Delimiter(), optional);
		}
	}

	protected class Alternatives$19$Consumer extends AlternativesConsumer {
		
		protected Alternatives$19$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$20$Consumer);
			acceptor.accept(keyword$22$Consumer);
		}
	}

	protected class Assignment$20$Consumer extends AssignmentConsumer {
		
		protected Assignment$20$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$21$Consumer;
		}
	}

	protected class RuleCall$21$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$21$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eGenericTypeReferenceDeclConsumer, "eGenericType", false, false, false, getElement(), optional);
		}
	}

	protected class Keyword$22$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$22$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$22$Delimiter(), optional);
		}
	}

	protected class Assignment$23$Consumer extends AssignmentConsumer {
		
		protected Assignment$23$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$24$Consumer;
		}
	}

	protected class RuleCall$24$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$24$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "name", false, false, getElement(), getRuleCall$24$Delimiter(), optional);
		}
	}

	protected class Group$25$Consumer extends OptionalGroupConsumer {
		
		protected Group$25$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$28$Consumer);
			acceptor.accept(assignment$29$Consumer);
			acceptor.accept(group$31$Consumer);
			acceptor.accept(keyword$35$Consumer);
		}
	}

	protected class Keyword$28$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$28$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$28$Delimiter(), optional);
		}
	}

	protected class Assignment$29$Consumer extends AssignmentConsumer {
		
		protected Assignment$29$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$30$Consumer;
		}
	}

	protected class RuleCall$30$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$30$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eTypeParameterDeclConsumer, "eTypeParameters", true, false, false, getElement(), optional);
		}
	}

	protected class Group$31$Consumer extends LoopGroupConsumer {
		
		protected Group$31$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$32$Consumer);
			acceptor.accept(assignment$33$Consumer);
		}
	}

	protected class Keyword$32$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$32$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$32$Delimiter(), optional);
		}
	}

	protected class Assignment$33$Consumer extends AssignmentConsumer {
		
		protected Assignment$33$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$34$Consumer;
		}
	}

	protected class RuleCall$34$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$34$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eTypeParameterDeclConsumer, "eTypeParameters", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$35$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$35$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$35$Delimiter(), optional);
		}
	}

	protected class Keyword$36$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$36$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$36$Delimiter(), optional);
		}
	}

	protected class Group$37$Consumer extends OptionalGroupConsumer {
		
		protected Group$37$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$38$Consumer);
			acceptor.accept(group$40$Consumer);
		}
	}

	protected class Assignment$38$Consumer extends AssignmentConsumer {
		
		protected Assignment$38$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$39$Consumer;
		}
	}

	protected class RuleCall$39$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$39$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eParameterDeclConsumer, "eParameters", true, false, false, getElement(), optional);
		}
	}

	protected class Group$40$Consumer extends LoopGroupConsumer {
		
		protected Group$40$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$41$Consumer);
			acceptor.accept(assignment$42$Consumer);
		}
	}

	protected class Keyword$41$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$41$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$41$Delimiter(), optional);
		}
	}

	protected class Assignment$42$Consumer extends AssignmentConsumer {
		
		protected Assignment$42$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$43$Consumer;
		}
	}

	protected class RuleCall$43$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$43$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eParameterDeclConsumer, "eParameters", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$44$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$44$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$44$Delimiter(), optional);
		}
	}

	protected class Group$45$Consumer extends OptionalGroupConsumer {
		
		protected Group$45$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$47$Consumer);
			acceptor.accept(assignment$48$Consumer);
			acceptor.accept(group$50$Consumer);
		}
	}

	protected class Keyword$47$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$47$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$47$Delimiter(), optional);
		}
	}

	protected class Assignment$48$Consumer extends AssignmentConsumer {
		
		protected Assignment$48$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$49$Consumer;
		}
	}

	protected class RuleCall$49$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$49$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eGenericTypeReferenceDeclConsumer, "eGenericExceptions", true, false, false, getElement(), optional);
		}
	}

	protected class Group$50$Consumer extends LoopGroupConsumer {
		
		protected Group$50$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$51$Consumer);
			acceptor.accept(assignment$52$Consumer);
		}
	}

	protected class Keyword$51$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$51$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$51$Delimiter(), optional);
		}
	}

	protected class Assignment$52$Consumer extends AssignmentConsumer {
		
		protected Assignment$52$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$53$Consumer;
		}
	}

	protected class RuleCall$53$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$53$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eGenericTypeReferenceDeclConsumer, "eGenericExceptions", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$54$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$54$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$54$Delimiter(), optional);
		}
	}

	public EcoreDslEOperationDeclConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$15$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$17$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$18$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$22$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$28$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$32$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$35$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$36$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$41$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$44$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$47$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$51$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$54$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$24$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public EOperationDeclElements getRule() {
		return rule;
	}
	
	public void setRule(EOperationDeclElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		assignment$11$Consumer = new Assignment$11$Consumer(rule.ele0000000000AssignmentEAnnotations());
		ruleCall$12$Consumer = new RuleCall$12$Consumer(rule.ele00000000000ParserRuleCallEAnnotationDecl());
		alternatives$13$Consumer = new Alternatives$13$Consumer(rule.ele0000000001Alternatives());
		assignment$14$Consumer = new Assignment$14$Consumer(rule.ele00000000010AssignmentUnique());
		keyword$15$Consumer = new Keyword$15$Consumer(rule.ele000000000100KeywordBag());
		assignment$16$Consumer = new Assignment$16$Consumer(rule.ele00000000011AssignmentOrdered());
		keyword$17$Consumer = new Keyword$17$Consumer(rule.ele000000000110KeywordRandom());
		keyword$18$Consumer = new Keyword$18$Consumer(rule.ele000000001KeywordOp());
		alternatives$19$Consumer = new Alternatives$19$Consumer(rule.ele00000001Alternatives());
		assignment$20$Consumer = new Assignment$20$Consumer(rule.ele000000010AssignmentEGenericType());
		ruleCall$21$Consumer = new RuleCall$21$Consumer(rule.ele0000000100ParserRuleCallEGenericTypeReferenceDecl());
		keyword$22$Consumer = new Keyword$22$Consumer(rule.ele000000011KeywordVoid());
		assignment$23$Consumer = new Assignment$23$Consumer(rule.ele0000001AssignmentName());
		ruleCall$24$Consumer = new RuleCall$24$Consumer(rule.ele00000010LexerRuleCallID());
		group$25$Consumer = new Group$25$Consumer(rule.ele000001Group());
		keyword$28$Consumer = new Keyword$28$Consumer(rule.ele000001000KeywordLessThanSign());
		assignment$29$Consumer = new Assignment$29$Consumer(rule.ele000001001AssignmentETypeParameters());
		ruleCall$30$Consumer = new RuleCall$30$Consumer(rule.ele0000010010ParserRuleCallETypeParameterDecl());
		group$31$Consumer = new Group$31$Consumer(rule.ele00000101Group());
		keyword$32$Consumer = new Keyword$32$Consumer(rule.ele000001010KeywordComma());
		assignment$33$Consumer = new Assignment$33$Consumer(rule.ele000001011AssignmentETypeParameters());
		ruleCall$34$Consumer = new RuleCall$34$Consumer(rule.ele0000010110ParserRuleCallETypeParameterDecl());
		keyword$35$Consumer = new Keyword$35$Consumer(rule.ele0000011KeywordGreaterThanSign());
		keyword$36$Consumer = new Keyword$36$Consumer(rule.ele00001KeywordLeftParenthesis());
		group$37$Consumer = new Group$37$Consumer(rule.ele0001Group());
		assignment$38$Consumer = new Assignment$38$Consumer(rule.ele00010AssignmentEParameters());
		ruleCall$39$Consumer = new RuleCall$39$Consumer(rule.ele000100ParserRuleCallEParameterDecl());
		group$40$Consumer = new Group$40$Consumer(rule.ele00011Group());
		keyword$41$Consumer = new Keyword$41$Consumer(rule.ele000110KeywordComma());
		assignment$42$Consumer = new Assignment$42$Consumer(rule.ele000111AssignmentEParameters());
		ruleCall$43$Consumer = new RuleCall$43$Consumer(rule.ele0001110ParserRuleCallEParameterDecl());
		keyword$44$Consumer = new Keyword$44$Consumer(rule.ele001KeywordRightParenthesis());
		group$45$Consumer = new Group$45$Consumer(rule.ele01Group());
		keyword$47$Consumer = new Keyword$47$Consumer(rule.ele0100KeywordThrows());
		assignment$48$Consumer = new Assignment$48$Consumer(rule.ele0101AssignmentEGenericExceptions());
		ruleCall$49$Consumer = new RuleCall$49$Consumer(rule.ele01010ParserRuleCallEGenericTypeReferenceDecl());
		group$50$Consumer = new Group$50$Consumer(rule.ele011Group());
		keyword$51$Consumer = new Keyword$51$Consumer(rule.ele0110KeywordComma());
		assignment$52$Consumer = new Assignment$52$Consumer(rule.ele0111AssignmentEGenericExceptions());
		ruleCall$53$Consumer = new RuleCall$53$Consumer(rule.ele01110ParserRuleCallEGenericTypeReferenceDecl());
		keyword$54$Consumer = new Keyword$54$Consumer(rule.ele1KeywordSemicolon());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setEAnnotationDeclConsumer(INonTerminalConsumer eAnnotationDeclConsumer) {
		this.eAnnotationDeclConsumer = eAnnotationDeclConsumer;
	}
	
	public void setEGenericTypeReferenceDeclConsumer(INonTerminalConsumer eGenericTypeReferenceDeclConsumer) {
		this.eGenericTypeReferenceDeclConsumer = eGenericTypeReferenceDeclConsumer;
	}
	
	public void setEParameterDeclConsumer(INonTerminalConsumer eParameterDeclConsumer) {
		this.eParameterDeclConsumer = eParameterDeclConsumer;
	}
	
	public void setETypeParameterDeclConsumer(INonTerminalConsumer eTypeParameterDeclConsumer) {
		this.eTypeParameterDeclConsumer = eTypeParameterDeclConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public ICharacterClass getKeyword$15$Delimiter() {
		return keyword$15$Delimiter;
	}
	
	public void setKeyword$15$Delimiter(ICharacterClass characterClass) {
		keyword$15$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$17$Delimiter() {
		return keyword$17$Delimiter;
	}
	
	public void setKeyword$17$Delimiter(ICharacterClass characterClass) {
		keyword$17$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$18$Delimiter() {
		return keyword$18$Delimiter;
	}
	
	public void setKeyword$18$Delimiter(ICharacterClass characterClass) {
		keyword$18$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$22$Delimiter() {
		return keyword$22$Delimiter;
	}
	
	public void setKeyword$22$Delimiter(ICharacterClass characterClass) {
		keyword$22$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$28$Delimiter() {
		return keyword$28$Delimiter;
	}
	
	public void setKeyword$28$Delimiter(ICharacterClass characterClass) {
		keyword$28$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$32$Delimiter() {
		return keyword$32$Delimiter;
	}
	
	public void setKeyword$32$Delimiter(ICharacterClass characterClass) {
		keyword$32$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$35$Delimiter() {
		return keyword$35$Delimiter;
	}
	
	public void setKeyword$35$Delimiter(ICharacterClass characterClass) {
		keyword$35$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$36$Delimiter() {
		return keyword$36$Delimiter;
	}
	
	public void setKeyword$36$Delimiter(ICharacterClass characterClass) {
		keyword$36$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$41$Delimiter() {
		return keyword$41$Delimiter;
	}
	
	public void setKeyword$41$Delimiter(ICharacterClass characterClass) {
		keyword$41$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$44$Delimiter() {
		return keyword$44$Delimiter;
	}
	
	public void setKeyword$44$Delimiter(ICharacterClass characterClass) {
		keyword$44$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$47$Delimiter() {
		return keyword$47$Delimiter;
	}
	
	public void setKeyword$47$Delimiter(ICharacterClass characterClass) {
		keyword$47$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$51$Delimiter() {
		return keyword$51$Delimiter;
	}
	
	public void setKeyword$51$Delimiter(ICharacterClass characterClass) {
		keyword$51$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$54$Delimiter() {
		return keyword$54$Delimiter;
	}
	
	public void setKeyword$54$Delimiter(ICharacterClass characterClass) {
		keyword$54$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$24$Delimiter() {
		return ruleCall$24$Delimiter;
	}
	
	public void setRuleCall$24$Delimiter(ISequenceMatcher matcher) {
		ruleCall$24$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
