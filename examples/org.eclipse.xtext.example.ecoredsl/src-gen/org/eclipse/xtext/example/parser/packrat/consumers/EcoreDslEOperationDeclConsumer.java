/*
* generated by Xtext
*/
package org.eclipse.xtext.example.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.example.services.EcoreDslGrammarAccess.EOperationDeclElements;

public final class EcoreDslEOperationDeclConsumer extends NonTerminalConsumer {

	private EOperationDeclElements rule;	

	private INonTerminalConsumer eAnnotationDeclConsumer;

	private INonTerminalConsumer eGenericTypeReferenceDeclConsumer;

	private INonTerminalConsumer eParameterDeclConsumer;

	private INonTerminalConsumer eTypeParameterDeclConsumer;

	private ITerminalConsumer idConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer assignment$2$Consumer;

	private IElementConsumer ruleCall$3$Consumer;

	private IElementConsumer alternatives$4$Consumer;

	private IElementConsumer assignment$5$Consumer;

	private IElementConsumer keyword$6$Consumer;

	private IElementConsumer assignment$7$Consumer;

	private IElementConsumer keyword$8$Consumer;

	private IElementConsumer keyword$9$Consumer;

	private IElementConsumer alternatives$10$Consumer;

	private IElementConsumer assignment$11$Consumer;

	private IElementConsumer ruleCall$12$Consumer;

	private IElementConsumer keyword$13$Consumer;

	private IElementConsumer assignment$14$Consumer;

	private IElementConsumer ruleCall$15$Consumer;

	private IElementConsumer group$16$Consumer;

	private IElementConsumer keyword$17$Consumer;

	private IElementConsumer assignment$18$Consumer;

	private IElementConsumer ruleCall$19$Consumer;

	private IElementConsumer group$20$Consumer;

	private IElementConsumer keyword$21$Consumer;

	private IElementConsumer assignment$22$Consumer;

	private IElementConsumer ruleCall$23$Consumer;

	private IElementConsumer keyword$24$Consumer;

	private IElementConsumer keyword$25$Consumer;

	private IElementConsumer group$26$Consumer;

	private IElementConsumer assignment$27$Consumer;

	private IElementConsumer ruleCall$28$Consumer;

	private IElementConsumer group$29$Consumer;

	private IElementConsumer keyword$30$Consumer;

	private IElementConsumer assignment$31$Consumer;

	private IElementConsumer ruleCall$32$Consumer;

	private IElementConsumer keyword$33$Consumer;

	private IElementConsumer group$34$Consumer;

	private IElementConsumer keyword$35$Consumer;

	private IElementConsumer assignment$36$Consumer;

	private IElementConsumer ruleCall$37$Consumer;

	private IElementConsumer group$38$Consumer;

	private IElementConsumer keyword$39$Consumer;

	private IElementConsumer assignment$40$Consumer;

	private IElementConsumer ruleCall$41$Consumer;

	private IElementConsumer keyword$42$Consumer;

	private ICharacterClass keyword$6$Delimiter;

	private ICharacterClass keyword$8$Delimiter;

	private ICharacterClass keyword$9$Delimiter;

	private ICharacterClass keyword$13$Delimiter;

	private ICharacterClass keyword$17$Delimiter;

	private ICharacterClass keyword$21$Delimiter;

	private ICharacterClass keyword$24$Delimiter;

	private ICharacterClass keyword$25$Delimiter;

	private ICharacterClass keyword$30$Delimiter;

	private ICharacterClass keyword$33$Delimiter;

	private ICharacterClass keyword$35$Delimiter;

	private ICharacterClass keyword$39$Delimiter;

	private ICharacterClass keyword$42$Delimiter;

	private ISequenceMatcher ruleCall$15$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$2$Consumer);
			acceptor.accept(alternatives$4$Consumer);
			acceptor.accept(keyword$9$Consumer);
			acceptor.accept(alternatives$10$Consumer);
			acceptor.accept(assignment$14$Consumer);
			acceptor.accept(group$16$Consumer);
			acceptor.accept(keyword$25$Consumer);
			acceptor.accept(group$26$Consumer);
			acceptor.accept(keyword$33$Consumer);
			acceptor.accept(group$34$Consumer);
			acceptor.accept(keyword$42$Consumer);
		}
	}

	protected class Assignment$2$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$2$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$3$Consumer;
		}
	}

	protected class RuleCall$3$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$3$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eAnnotationDeclConsumer, "eAnnotations", true, false, false, getElement(), optional);
		}
	}

	protected class Alternatives$4$Consumer extends LoopAlternativesConsumer {
		
		protected Alternatives$4$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$5$Consumer);
			acceptor.accept(assignment$7$Consumer);
		}
	}

	protected class Assignment$5$Consumer extends AssignmentConsumer {
		
		protected Assignment$5$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$6$Consumer;
		}
	}

	protected class Keyword$6$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$6$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "unique", false, true, getKeyword$6$Delimiter(), optional);
		}
	}

	protected class Assignment$7$Consumer extends AssignmentConsumer {
		
		protected Assignment$7$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$8$Consumer;
		}
	}

	protected class Keyword$8$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$8$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "ordered", false, true, getKeyword$8$Delimiter(), optional);
		}
	}

	protected class Keyword$9$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$9$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$9$Delimiter(), optional);
		}
	}

	protected class Alternatives$10$Consumer extends AlternativesConsumer {
		
		protected Alternatives$10$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$11$Consumer);
			acceptor.accept(keyword$13$Consumer);
		}
	}

	protected class Assignment$11$Consumer extends AssignmentConsumer {
		
		protected Assignment$11$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$12$Consumer;
		}
	}

	protected class RuleCall$12$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$12$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eGenericTypeReferenceDeclConsumer, "eGenericType", false, false, false, getElement(), optional);
		}
	}

	protected class Keyword$13$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$13$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$13$Delimiter(), optional);
		}
	}

	protected class Assignment$14$Consumer extends AssignmentConsumer {
		
		protected Assignment$14$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$15$Consumer;
		}
	}

	protected class RuleCall$15$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$15$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "name", false, false, getElement(), getRuleCall$15$Delimiter(), optional);
		}
	}

	protected class Group$16$Consumer extends OptionalGroupConsumer {
		
		protected Group$16$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$17$Consumer);
			acceptor.accept(assignment$18$Consumer);
			acceptor.accept(group$20$Consumer);
			acceptor.accept(keyword$24$Consumer);
		}
	}

	protected class Keyword$17$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$17$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$17$Delimiter(), optional);
		}
	}

	protected class Assignment$18$Consumer extends AssignmentConsumer {
		
		protected Assignment$18$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$19$Consumer;
		}
	}

	protected class RuleCall$19$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$19$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eTypeParameterDeclConsumer, "eTypeParameters", true, false, false, getElement(), optional);
		}
	}

	protected class Group$20$Consumer extends LoopGroupConsumer {
		
		protected Group$20$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$21$Consumer);
			acceptor.accept(assignment$22$Consumer);
		}
	}

	protected class Keyword$21$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$21$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$21$Delimiter(), optional);
		}
	}

	protected class Assignment$22$Consumer extends AssignmentConsumer {
		
		protected Assignment$22$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$23$Consumer;
		}
	}

	protected class RuleCall$23$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$23$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eTypeParameterDeclConsumer, "eTypeParameters", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$24$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$24$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$24$Delimiter(), optional);
		}
	}

	protected class Keyword$25$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$25$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$25$Delimiter(), optional);
		}
	}

	protected class Group$26$Consumer extends OptionalGroupConsumer {
		
		protected Group$26$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$27$Consumer);
			acceptor.accept(group$29$Consumer);
		}
	}

	protected class Assignment$27$Consumer extends AssignmentConsumer {
		
		protected Assignment$27$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$28$Consumer;
		}
	}

	protected class RuleCall$28$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$28$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eParameterDeclConsumer, "eParameters", true, false, false, getElement(), optional);
		}
	}

	protected class Group$29$Consumer extends LoopGroupConsumer {
		
		protected Group$29$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$30$Consumer);
			acceptor.accept(assignment$31$Consumer);
		}
	}

	protected class Keyword$30$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$30$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$30$Delimiter(), optional);
		}
	}

	protected class Assignment$31$Consumer extends AssignmentConsumer {
		
		protected Assignment$31$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$32$Consumer;
		}
	}

	protected class RuleCall$32$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$32$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eParameterDeclConsumer, "eParameters", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$33$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$33$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$33$Delimiter(), optional);
		}
	}

	protected class Group$34$Consumer extends OptionalGroupConsumer {
		
		protected Group$34$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$35$Consumer);
			acceptor.accept(assignment$36$Consumer);
			acceptor.accept(group$38$Consumer);
		}
	}

	protected class Keyword$35$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$35$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$35$Delimiter(), optional);
		}
	}

	protected class Assignment$36$Consumer extends AssignmentConsumer {
		
		protected Assignment$36$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$37$Consumer;
		}
	}

	protected class RuleCall$37$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$37$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eGenericTypeReferenceDeclConsumer, "eGenericExceptions", true, false, false, getElement(), optional);
		}
	}

	protected class Group$38$Consumer extends LoopGroupConsumer {
		
		protected Group$38$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$39$Consumer);
			acceptor.accept(assignment$40$Consumer);
		}
	}

	protected class Keyword$39$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$39$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$39$Delimiter(), optional);
		}
	}

	protected class Assignment$40$Consumer extends AssignmentConsumer {
		
		protected Assignment$40$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$41$Consumer;
		}
	}

	protected class RuleCall$41$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$41$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eGenericTypeReferenceDeclConsumer, "eGenericExceptions", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$42$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$42$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$42$Delimiter(), optional);
		}
	}

	public EcoreDslEOperationDeclConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$6$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$8$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$9$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$13$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$17$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$21$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$24$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$25$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$30$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$33$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$35$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$39$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$42$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$15$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public EOperationDeclElements getRule() {
		return rule;
	}
	
	public void setRule(EOperationDeclElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		assignment$2$Consumer = new Assignment$2$Consumer(rule.ele0AssignmentEAnnotations());
		ruleCall$3$Consumer = new RuleCall$3$Consumer(rule.ele00ParserRuleCallEAnnotationDecl());
		alternatives$4$Consumer = new Alternatives$4$Consumer(rule.ele1Alternatives());
		assignment$5$Consumer = new Assignment$5$Consumer(rule.ele10AssignmentUnique());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.ele100KeywordBag());
		assignment$7$Consumer = new Assignment$7$Consumer(rule.ele11AssignmentOrdered());
		keyword$8$Consumer = new Keyword$8$Consumer(rule.ele110KeywordRandom());
		keyword$9$Consumer = new Keyword$9$Consumer(rule.ele2KeywordOp());
		alternatives$10$Consumer = new Alternatives$10$Consumer(rule.ele3Alternatives());
		assignment$11$Consumer = new Assignment$11$Consumer(rule.ele30AssignmentEGenericType());
		ruleCall$12$Consumer = new RuleCall$12$Consumer(rule.ele300ParserRuleCallEGenericTypeReferenceDecl());
		keyword$13$Consumer = new Keyword$13$Consumer(rule.ele31KeywordVoid());
		assignment$14$Consumer = new Assignment$14$Consumer(rule.ele4AssignmentName());
		ruleCall$15$Consumer = new RuleCall$15$Consumer(rule.ele40TerminalRuleCallID());
		group$16$Consumer = new Group$16$Consumer(rule.ele5Group());
		keyword$17$Consumer = new Keyword$17$Consumer(rule.ele50KeywordLessThanSign());
		assignment$18$Consumer = new Assignment$18$Consumer(rule.ele51AssignmentETypeParameters());
		ruleCall$19$Consumer = new RuleCall$19$Consumer(rule.ele510ParserRuleCallETypeParameterDecl());
		group$20$Consumer = new Group$20$Consumer(rule.ele52Group());
		keyword$21$Consumer = new Keyword$21$Consumer(rule.ele520KeywordComma());
		assignment$22$Consumer = new Assignment$22$Consumer(rule.ele521AssignmentETypeParameters());
		ruleCall$23$Consumer = new RuleCall$23$Consumer(rule.ele5210ParserRuleCallETypeParameterDecl());
		keyword$24$Consumer = new Keyword$24$Consumer(rule.ele53KeywordGreaterThanSign());
		keyword$25$Consumer = new Keyword$25$Consumer(rule.ele6KeywordLeftParenthesis());
		group$26$Consumer = new Group$26$Consumer(rule.ele7Group());
		assignment$27$Consumer = new Assignment$27$Consumer(rule.ele70AssignmentEParameters());
		ruleCall$28$Consumer = new RuleCall$28$Consumer(rule.ele700ParserRuleCallEParameterDecl());
		group$29$Consumer = new Group$29$Consumer(rule.ele71Group());
		keyword$30$Consumer = new Keyword$30$Consumer(rule.ele710KeywordComma());
		assignment$31$Consumer = new Assignment$31$Consumer(rule.ele711AssignmentEParameters());
		ruleCall$32$Consumer = new RuleCall$32$Consumer(rule.ele7110ParserRuleCallEParameterDecl());
		keyword$33$Consumer = new Keyword$33$Consumer(rule.ele8KeywordRightParenthesis());
		group$34$Consumer = new Group$34$Consumer(rule.ele9Group());
		keyword$35$Consumer = new Keyword$35$Consumer(rule.ele90KeywordThrows());
		assignment$36$Consumer = new Assignment$36$Consumer(rule.ele91AssignmentEGenericExceptions());
		ruleCall$37$Consumer = new RuleCall$37$Consumer(rule.ele910ParserRuleCallEGenericTypeReferenceDecl());
		group$38$Consumer = new Group$38$Consumer(rule.ele92Group());
		keyword$39$Consumer = new Keyword$39$Consumer(rule.ele920KeywordComma());
		assignment$40$Consumer = new Assignment$40$Consumer(rule.ele921AssignmentEGenericExceptions());
		ruleCall$41$Consumer = new RuleCall$41$Consumer(rule.ele9210ParserRuleCallEGenericTypeReferenceDecl());
		keyword$42$Consumer = new Keyword$42$Consumer(rule.ele10KeywordSemicolon());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setEAnnotationDeclConsumer(INonTerminalConsumer eAnnotationDeclConsumer) {
		this.eAnnotationDeclConsumer = eAnnotationDeclConsumer;
	}
	
	public void setEGenericTypeReferenceDeclConsumer(INonTerminalConsumer eGenericTypeReferenceDeclConsumer) {
		this.eGenericTypeReferenceDeclConsumer = eGenericTypeReferenceDeclConsumer;
	}
	
	public void setEParameterDeclConsumer(INonTerminalConsumer eParameterDeclConsumer) {
		this.eParameterDeclConsumer = eParameterDeclConsumer;
	}
	
	public void setETypeParameterDeclConsumer(INonTerminalConsumer eTypeParameterDeclConsumer) {
		this.eTypeParameterDeclConsumer = eTypeParameterDeclConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public ICharacterClass getKeyword$6$Delimiter() {
		return keyword$6$Delimiter;
	}
	
	public void setKeyword$6$Delimiter(ICharacterClass characterClass) {
		keyword$6$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$8$Delimiter() {
		return keyword$8$Delimiter;
	}
	
	public void setKeyword$8$Delimiter(ICharacterClass characterClass) {
		keyword$8$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$9$Delimiter() {
		return keyword$9$Delimiter;
	}
	
	public void setKeyword$9$Delimiter(ICharacterClass characterClass) {
		keyword$9$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$13$Delimiter() {
		return keyword$13$Delimiter;
	}
	
	public void setKeyword$13$Delimiter(ICharacterClass characterClass) {
		keyword$13$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$17$Delimiter() {
		return keyword$17$Delimiter;
	}
	
	public void setKeyword$17$Delimiter(ICharacterClass characterClass) {
		keyword$17$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$21$Delimiter() {
		return keyword$21$Delimiter;
	}
	
	public void setKeyword$21$Delimiter(ICharacterClass characterClass) {
		keyword$21$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$24$Delimiter() {
		return keyword$24$Delimiter;
	}
	
	public void setKeyword$24$Delimiter(ICharacterClass characterClass) {
		keyword$24$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$25$Delimiter() {
		return keyword$25$Delimiter;
	}
	
	public void setKeyword$25$Delimiter(ICharacterClass characterClass) {
		keyword$25$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$30$Delimiter() {
		return keyword$30$Delimiter;
	}
	
	public void setKeyword$30$Delimiter(ICharacterClass characterClass) {
		keyword$30$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$33$Delimiter() {
		return keyword$33$Delimiter;
	}
	
	public void setKeyword$33$Delimiter(ICharacterClass characterClass) {
		keyword$33$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$35$Delimiter() {
		return keyword$35$Delimiter;
	}
	
	public void setKeyword$35$Delimiter(ICharacterClass characterClass) {
		keyword$35$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$39$Delimiter() {
		return keyword$39$Delimiter;
	}
	
	public void setKeyword$39$Delimiter(ICharacterClass characterClass) {
		keyword$39$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$42$Delimiter() {
		return keyword$42$Delimiter;
	}
	
	public void setKeyword$42$Delimiter(ICharacterClass characterClass) {
		keyword$42$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$15$Delimiter() {
		return ruleCall$15$Delimiter;
	}
	
	public void setRuleCall$15$Delimiter(ISequenceMatcher matcher) {
		ruleCall$15$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
