/*
* generated by Xtext
*/
package org.eclipse.xtext.example.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.example.services.EcoreDslGrammarAccess.EClassDeclElements;

public final class EcoreDslEClassDeclConsumer extends NonTerminalConsumer {

	private EClassDeclElements rule;	

	private INonTerminalConsumer eAnnotationDeclConsumer;

	private INonTerminalConsumer eGenericTypeReferenceDeclConsumer;

	private INonTerminalConsumer eOperationDeclConsumer;

	private INonTerminalConsumer eStructuralFeatureDeclConsumer;

	private INonTerminalConsumer eTypeParameterDeclConsumer;

	private ITerminalConsumer idConsumer;

	private INonTerminalConsumer stringOrQidConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer assignment$10$Consumer;

	private IElementConsumer ruleCall$11$Consumer;

	private IElementConsumer assignment$12$Consumer;

	private IElementConsumer keyword$13$Consumer;

	private IElementConsumer alternatives$14$Consumer;

	private IElementConsumer assignment$15$Consumer;

	private IElementConsumer keyword$16$Consumer;

	private IElementConsumer keyword$17$Consumer;

	private IElementConsumer assignment$18$Consumer;

	private IElementConsumer ruleCall$19$Consumer;

	private IElementConsumer group$20$Consumer;

	private IElementConsumer keyword$23$Consumer;

	private IElementConsumer assignment$24$Consumer;

	private IElementConsumer ruleCall$25$Consumer;

	private IElementConsumer group$26$Consumer;

	private IElementConsumer keyword$27$Consumer;

	private IElementConsumer assignment$28$Consumer;

	private IElementConsumer ruleCall$29$Consumer;

	private IElementConsumer keyword$30$Consumer;

	private IElementConsumer group$31$Consumer;

	private IElementConsumer keyword$33$Consumer;

	private IElementConsumer assignment$34$Consumer;

	private IElementConsumer ruleCall$35$Consumer;

	private IElementConsumer group$36$Consumer;

	private IElementConsumer keyword$37$Consumer;

	private IElementConsumer assignment$38$Consumer;

	private IElementConsumer ruleCall$39$Consumer;

	private IElementConsumer group$40$Consumer;

	private IElementConsumer keyword$41$Consumer;

	private IElementConsumer assignment$42$Consumer;

	private IElementConsumer ruleCall$43$Consumer;

	private IElementConsumer keyword$44$Consumer;

	private IElementConsumer alternatives$45$Consumer;

	private IElementConsumer assignment$46$Consumer;

	private IElementConsumer ruleCall$47$Consumer;

	private IElementConsumer assignment$48$Consumer;

	private IElementConsumer ruleCall$49$Consumer;

	private IElementConsumer keyword$50$Consumer;

	private ICharacterClass keyword$13$Delimiter;

	private ICharacterClass keyword$16$Delimiter;

	private ICharacterClass keyword$17$Delimiter;

	private ICharacterClass keyword$23$Delimiter;

	private ICharacterClass keyword$27$Delimiter;

	private ICharacterClass keyword$30$Delimiter;

	private ICharacterClass keyword$33$Delimiter;

	private ICharacterClass keyword$37$Delimiter;

	private ICharacterClass keyword$41$Delimiter;

	private ICharacterClass keyword$44$Delimiter;

	private ICharacterClass keyword$50$Delimiter;

	private ISequenceMatcher ruleCall$19$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$10$Consumer);
			acceptor.accept(assignment$12$Consumer);
			acceptor.accept(alternatives$14$Consumer);
			acceptor.accept(assignment$18$Consumer);
			acceptor.accept(group$20$Consumer);
			acceptor.accept(group$31$Consumer);
			acceptor.accept(group$40$Consumer);
			acceptor.accept(keyword$44$Consumer);
			acceptor.accept(alternatives$45$Consumer);
			acceptor.accept(keyword$50$Consumer);
		}
	}

	protected class Assignment$10$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$10$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$11$Consumer;
		}
	}

	protected class RuleCall$11$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$11$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eAnnotationDeclConsumer, "eAnnotations", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$12$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$12$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$13$Consumer;
		}
	}

	protected class Keyword$13$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$13$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "abstract", false, true, getKeyword$13$Delimiter(), optional);
		}
	}

	protected class Alternatives$14$Consumer extends AlternativesConsumer {
		
		protected Alternatives$14$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$15$Consumer);
			acceptor.accept(keyword$17$Consumer);
		}
	}

	protected class Assignment$15$Consumer extends AssignmentConsumer {
		
		protected Assignment$15$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$16$Consumer;
		}
	}

	protected class Keyword$16$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$16$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "interface", false, true, getKeyword$16$Delimiter(), optional);
		}
	}

	protected class Keyword$17$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$17$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$17$Delimiter(), optional);
		}
	}

	protected class Assignment$18$Consumer extends AssignmentConsumer {
		
		protected Assignment$18$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$19$Consumer;
		}
	}

	protected class RuleCall$19$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$19$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "name", false, false, getElement(), getRuleCall$19$Delimiter(), optional);
		}
	}

	protected class Group$20$Consumer extends OptionalGroupConsumer {
		
		protected Group$20$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$23$Consumer);
			acceptor.accept(assignment$24$Consumer);
			acceptor.accept(group$26$Consumer);
			acceptor.accept(keyword$30$Consumer);
		}
	}

	protected class Keyword$23$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$23$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$23$Delimiter(), optional);
		}
	}

	protected class Assignment$24$Consumer extends AssignmentConsumer {
		
		protected Assignment$24$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$25$Consumer;
		}
	}

	protected class RuleCall$25$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$25$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eTypeParameterDeclConsumer, "eTypeParameters", true, false, false, getElement(), optional);
		}
	}

	protected class Group$26$Consumer extends LoopGroupConsumer {
		
		protected Group$26$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$27$Consumer);
			acceptor.accept(assignment$28$Consumer);
		}
	}

	protected class Keyword$27$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$27$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$27$Delimiter(), optional);
		}
	}

	protected class Assignment$28$Consumer extends AssignmentConsumer {
		
		protected Assignment$28$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$29$Consumer;
		}
	}

	protected class RuleCall$29$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$29$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eTypeParameterDeclConsumer, "eTypeParameters", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$30$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$30$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$30$Delimiter(), optional);
		}
	}

	protected class Group$31$Consumer extends OptionalGroupConsumer {
		
		protected Group$31$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$33$Consumer);
			acceptor.accept(assignment$34$Consumer);
			acceptor.accept(group$36$Consumer);
		}
	}

	protected class Keyword$33$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$33$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$33$Delimiter(), optional);
		}
	}

	protected class Assignment$34$Consumer extends AssignmentConsumer {
		
		protected Assignment$34$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$35$Consumer;
		}
	}

	protected class RuleCall$35$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$35$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eGenericTypeReferenceDeclConsumer, "eGenericSuperTypes", true, false, false, getElement(), optional);
		}
	}

	protected class Group$36$Consumer extends LoopGroupConsumer {
		
		protected Group$36$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$37$Consumer);
			acceptor.accept(assignment$38$Consumer);
		}
	}

	protected class Keyword$37$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$37$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$37$Delimiter(), optional);
		}
	}

	protected class Assignment$38$Consumer extends AssignmentConsumer {
		
		protected Assignment$38$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$39$Consumer;
		}
	}

	protected class RuleCall$39$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$39$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eGenericTypeReferenceDeclConsumer, "eGenericSuperTypes", true, false, false, getElement(), optional);
		}
	}

	protected class Group$40$Consumer extends OptionalGroupConsumer {
		
		protected Group$40$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$41$Consumer);
			acceptor.accept(assignment$42$Consumer);
		}
	}

	protected class Keyword$41$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$41$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$41$Delimiter(), optional);
		}
	}

	protected class Assignment$42$Consumer extends AssignmentConsumer {
		
		protected Assignment$42$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$43$Consumer;
		}
	}

	protected class RuleCall$43$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$43$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(stringOrQidConsumer, "instanceClassName", false, true, false, getElement(), optional);
		}
	}

	protected class Keyword$44$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$44$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$44$Delimiter(), optional);
		}
	}

	protected class Alternatives$45$Consumer extends LoopAlternativesConsumer {
		
		protected Alternatives$45$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$46$Consumer);
			acceptor.accept(assignment$48$Consumer);
		}
	}

	protected class Assignment$46$Consumer extends AssignmentConsumer {
		
		protected Assignment$46$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$47$Consumer;
		}
	}

	protected class RuleCall$47$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$47$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eStructuralFeatureDeclConsumer, "eStructuralFeatures", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$48$Consumer extends AssignmentConsumer {
		
		protected Assignment$48$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$49$Consumer;
		}
	}

	protected class RuleCall$49$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$49$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(eOperationDeclConsumer, "eOperations", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$50$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$50$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$50$Delimiter(), optional);
		}
	}

	public EcoreDslEClassDeclConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$13$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$16$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$17$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$23$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$27$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$30$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$33$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$37$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$41$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$44$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$50$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$19$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public EClassDeclElements getRule() {
		return rule;
	}
	
	public void setRule(EClassDeclElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		assignment$10$Consumer = new Assignment$10$Consumer(rule.ele000000000AssignmentEAnnotations());
		ruleCall$11$Consumer = new RuleCall$11$Consumer(rule.ele0000000000ParserRuleCallEAnnotationDecl());
		assignment$12$Consumer = new Assignment$12$Consumer(rule.ele000000001AssignmentAbstract());
		keyword$13$Consumer = new Keyword$13$Consumer(rule.ele0000000010KeywordAbstract());
		alternatives$14$Consumer = new Alternatives$14$Consumer(rule.ele00000001Alternatives());
		assignment$15$Consumer = new Assignment$15$Consumer(rule.ele000000010AssignmentInterface());
		keyword$16$Consumer = new Keyword$16$Consumer(rule.ele0000000100KeywordInterface());
		keyword$17$Consumer = new Keyword$17$Consumer(rule.ele000000011KeywordClass());
		assignment$18$Consumer = new Assignment$18$Consumer(rule.ele0000001AssignmentName());
		ruleCall$19$Consumer = new RuleCall$19$Consumer(rule.ele00000010TerminalRuleCallID());
		group$20$Consumer = new Group$20$Consumer(rule.ele000001Group());
		keyword$23$Consumer = new Keyword$23$Consumer(rule.ele000001000KeywordLessThanSign());
		assignment$24$Consumer = new Assignment$24$Consumer(rule.ele000001001AssignmentETypeParameters());
		ruleCall$25$Consumer = new RuleCall$25$Consumer(rule.ele0000010010ParserRuleCallETypeParameterDecl());
		group$26$Consumer = new Group$26$Consumer(rule.ele00000101Group());
		keyword$27$Consumer = new Keyword$27$Consumer(rule.ele000001010KeywordComma());
		assignment$28$Consumer = new Assignment$28$Consumer(rule.ele000001011AssignmentETypeParameters());
		ruleCall$29$Consumer = new RuleCall$29$Consumer(rule.ele0000010110ParserRuleCallETypeParameterDecl());
		keyword$30$Consumer = new Keyword$30$Consumer(rule.ele0000011KeywordGreaterThanSign());
		group$31$Consumer = new Group$31$Consumer(rule.ele00001Group());
		keyword$33$Consumer = new Keyword$33$Consumer(rule.ele0000100KeywordExtends());
		assignment$34$Consumer = new Assignment$34$Consumer(rule.ele0000101AssignmentEGenericSuperTypes());
		ruleCall$35$Consumer = new RuleCall$35$Consumer(rule.ele00001010ParserRuleCallEGenericTypeReferenceDecl());
		group$36$Consumer = new Group$36$Consumer(rule.ele000011Group());
		keyword$37$Consumer = new Keyword$37$Consumer(rule.ele0000110KeywordComma());
		assignment$38$Consumer = new Assignment$38$Consumer(rule.ele0000111AssignmentEGenericSuperTypes());
		ruleCall$39$Consumer = new RuleCall$39$Consumer(rule.ele00001110ParserRuleCallEGenericTypeReferenceDecl());
		group$40$Consumer = new Group$40$Consumer(rule.ele0001Group());
		keyword$41$Consumer = new Keyword$41$Consumer(rule.ele00010KeywordColon());
		assignment$42$Consumer = new Assignment$42$Consumer(rule.ele00011AssignmentInstanceClassName());
		ruleCall$43$Consumer = new RuleCall$43$Consumer(rule.ele000110ParserRuleCallSTRING_OR_QID());
		keyword$44$Consumer = new Keyword$44$Consumer(rule.ele001KeywordLeftCurlyBracket());
		alternatives$45$Consumer = new Alternatives$45$Consumer(rule.ele01Alternatives());
		assignment$46$Consumer = new Assignment$46$Consumer(rule.ele010AssignmentEStructuralFeatures());
		ruleCall$47$Consumer = new RuleCall$47$Consumer(rule.ele0100ParserRuleCallEStructuralFeatureDecl());
		assignment$48$Consumer = new Assignment$48$Consumer(rule.ele011AssignmentEOperations());
		ruleCall$49$Consumer = new RuleCall$49$Consumer(rule.ele0110ParserRuleCallEOperationDecl());
		keyword$50$Consumer = new Keyword$50$Consumer(rule.ele1KeywordRightCurlyBracket());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setEAnnotationDeclConsumer(INonTerminalConsumer eAnnotationDeclConsumer) {
		this.eAnnotationDeclConsumer = eAnnotationDeclConsumer;
	}
	
	public void setEGenericTypeReferenceDeclConsumer(INonTerminalConsumer eGenericTypeReferenceDeclConsumer) {
		this.eGenericTypeReferenceDeclConsumer = eGenericTypeReferenceDeclConsumer;
	}
	
	public void setEOperationDeclConsumer(INonTerminalConsumer eOperationDeclConsumer) {
		this.eOperationDeclConsumer = eOperationDeclConsumer;
	}
	
	public void setEStructuralFeatureDeclConsumer(INonTerminalConsumer eStructuralFeatureDeclConsumer) {
		this.eStructuralFeatureDeclConsumer = eStructuralFeatureDeclConsumer;
	}
	
	public void setETypeParameterDeclConsumer(INonTerminalConsumer eTypeParameterDeclConsumer) {
		this.eTypeParameterDeclConsumer = eTypeParameterDeclConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setStringOrQidConsumer(INonTerminalConsumer stringOrQidConsumer) {
		this.stringOrQidConsumer = stringOrQidConsumer;
	}
	
	public ICharacterClass getKeyword$13$Delimiter() {
		return keyword$13$Delimiter;
	}
	
	public void setKeyword$13$Delimiter(ICharacterClass characterClass) {
		keyword$13$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$16$Delimiter() {
		return keyword$16$Delimiter;
	}
	
	public void setKeyword$16$Delimiter(ICharacterClass characterClass) {
		keyword$16$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$17$Delimiter() {
		return keyword$17$Delimiter;
	}
	
	public void setKeyword$17$Delimiter(ICharacterClass characterClass) {
		keyword$17$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$23$Delimiter() {
		return keyword$23$Delimiter;
	}
	
	public void setKeyword$23$Delimiter(ICharacterClass characterClass) {
		keyword$23$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$27$Delimiter() {
		return keyword$27$Delimiter;
	}
	
	public void setKeyword$27$Delimiter(ICharacterClass characterClass) {
		keyword$27$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$30$Delimiter() {
		return keyword$30$Delimiter;
	}
	
	public void setKeyword$30$Delimiter(ICharacterClass characterClass) {
		keyword$30$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$33$Delimiter() {
		return keyword$33$Delimiter;
	}
	
	public void setKeyword$33$Delimiter(ICharacterClass characterClass) {
		keyword$33$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$37$Delimiter() {
		return keyword$37$Delimiter;
	}
	
	public void setKeyword$37$Delimiter(ICharacterClass characterClass) {
		keyword$37$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$41$Delimiter() {
		return keyword$41$Delimiter;
	}
	
	public void setKeyword$41$Delimiter(ICharacterClass characterClass) {
		keyword$41$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$44$Delimiter() {
		return keyword$44$Delimiter;
	}
	
	public void setKeyword$44$Delimiter(ICharacterClass characterClass) {
		keyword$44$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$50$Delimiter() {
		return keyword$50$Delimiter;
	}
	
	public void setKeyword$50$Delimiter(ICharacterClass characterClass) {
		keyword$50$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$19$Delimiter() {
		return ruleCall$19$Delimiter;
	}
	
	public void setRuleCall$19$Delimiter(ISequenceMatcher matcher) {
		ruleCall$19$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
