/*
* generated by Xtext
*/
package org.eclipse.xtext.example.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;

import org.eclipse.xtext.AbstractRule;

import org.eclipse.xtext.parser.packrat.IMarkerFactory.IMarker;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ConsumeResult;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.example.services.EcoreDslGrammarAccess.EClassDeclElements;

import org.eclipse.xtext.example.parser.packrat.consumers.EcoreDslEAnnotationDeclConsumer;
import org.eclipse.xtext.example.parser.packrat.consumers.EcoreDslEGenericTypeReferenceDeclConsumer;
import org.eclipse.xtext.example.parser.packrat.consumers.EcoreDslEOperationDeclConsumer;
import org.eclipse.xtext.example.parser.packrat.consumers.EcoreDslEStructuralFeatureDeclConsumer;
import org.eclipse.xtext.example.parser.packrat.consumers.EcoreDslETypeParameterDeclConsumer;
import org.eclipse.xtext.builtin.parser.packrat.consumers.XtextBuiltinIDConsumer;
import org.eclipse.xtext.example.parser.packrat.consumers.EcoreDslSTRING_OR_QIDConsumer;

@SuppressWarnings("unused")
public final class EcoreDslEClassDeclConsumer extends NonTerminalConsumer {

	private EClassDeclElements rule;
	
	private INonTerminalConsumer eAnnotationDeclConsumer;
	private INonTerminalConsumer eGenericTypeReferenceDeclConsumer;
	private INonTerminalConsumer eOperationDeclConsumer;
	private INonTerminalConsumer eStructuralFeatureDeclConsumer;
	private INonTerminalConsumer eTypeParameterDeclConsumer;
	private ITerminalConsumer idConsumer;
	private INonTerminalConsumer stringOrQidConsumer;

	private ICharacterClass keyword$13$Delimiter;
	
	private ICharacterClass keyword$16$Delimiter;
	
	private ICharacterClass keyword$17$Delimiter;
	
	private ICharacterClass keyword$23$Delimiter;
	
	private ICharacterClass keyword$27$Delimiter;
	
	private ICharacterClass keyword$30$Delimiter;
	
	private ICharacterClass keyword$33$Delimiter;
	
	private ICharacterClass keyword$37$Delimiter;
	
	private ICharacterClass keyword$41$Delimiter;
	
	private ICharacterClass keyword$44$Delimiter;
	
	private ICharacterClass keyword$50$Delimiter;
	
	private ISequenceMatcher ruleCall$19$Delimiter;
	
	public EcoreDslEClassDeclConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$13$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$16$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$17$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$23$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$27$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$30$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$33$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$37$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$41$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$44$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$50$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$19$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume(int entryPoint) throws Exception {
		return consumeGroup$1(entryPoint);
	}

	protected int consumeGroup$1(int entryPoint) throws Exception {
		int result = doConsumeGroup$1(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeGroup$1(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeGroup$1(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().eleGroup());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$10(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele000000000AssignmentEAnnotations());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$12(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele000000001AssignmentAbstract());
					return result.getResult();
				}
			case 2:
				result.nextStep();
				if (result.didGroupFail(consumeAlternatives$14(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00000001Alternatives());
					return result.getResult();
				}
			case 3:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$18(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0000001AssignmentName());
					return result.getResult();
				}
			case 4:
				result.nextStep();
				if (result.didGroupFail(consumeGroup$20(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele000001Group());
					return result.getResult();
				}
			case 5:
				result.nextStep();
				if (result.didGroupFail(consumeGroup$31(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00001Group());
					return result.getResult();
				}
			case 6:
				result.nextStep();
				if (result.didGroupFail(consumeGroup$40(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0001Group());
					return result.getResult();
				}
			case 7:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$44(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele001KeywordLeftCurlyBracket());
					return result.getResult();
				}
			case 8:
				result.nextStep();
				if (result.didGroupFail(consumeAlternatives$45(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele01Alternatives());
					return result.getResult();
				}
			case 9:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$50(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele1KeywordRightCurlyBracket());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeAssignment$10(int entryPoint) throws Exception {
		IMarker marker = mark();
		while(doConsumeAssignment$10(entryPoint) == ConsumeResult.SUCCESS) {
			marker.flush();
		}
		marker.rollback();
		skipped(getRule().ele000000000AssignmentEAnnotations());
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeAssignment$10(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele000000000AssignmentEAnnotations());
		return result.getResult(consumeRuleCall$11(entryPoint));
	}

	protected int consumeRuleCall$11(int entryPoint) throws Exception {
		return consumeNonTerminal(eAnnotationDeclConsumer, "eAnnotations", true, false, false, getRule().ele0000000000ParserRuleCallEAnnotationDecl());
	}

	protected int consumeAssignment$12(int entryPoint) throws Exception {
		IMarker marker = mark();
		int result = doConsumeAssignment$12(entryPoint);
		if (result != ConsumeResult.SUCCESS) {
			marker.rollback();
			skipped(getRule().ele000000001AssignmentAbstract());
		} else
			marker.commit();
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeAssignment$12(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele000000001AssignmentAbstract());
		return result.getResult(consumeKeyword$13(entryPoint));
	}

	protected int consumeKeyword$13(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele0000000010KeywordAbstract(), "abstract", false, true, getKeyword$13$Delimiter());
	}

	protected int consumeAlternatives$14(int entryPoint) throws Exception {
		int result = doConsumeAlternatives$14(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAlternatives$14(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAlternatives$14(int entryPoint) throws Exception {
		final AlternativesResult result = createAlternativesResult(getRule().ele00000001Alternatives());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextAlternative();
				if (result.isAlternativeDone(consumeAssignment$15(nextEntryPoint()))) { 
					return result.getResult(); 
				}
			case 1:
				result.nextAlternative();
				if (result.isAlternativeDone(consumeKeyword$17(nextEntryPoint()))) { 
					return result.getResult(); 
				}
		}
		return result.getResult();
	}

	protected int consumeAssignment$15(int entryPoint) throws Exception {
		int result = doConsumeAssignment$15(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$15(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$15(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele000000010AssignmentInterface());
		return result.getResult(consumeKeyword$16(entryPoint));
	}

	protected int consumeKeyword$16(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele0000000100KeywordInterface(), "interface", false, true, getKeyword$16$Delimiter());
	}

	protected int consumeKeyword$17(int entryPoint) throws Exception {
		int result = doConsumeKeyword$17(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$17(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$17(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele000000011KeywordClass(), null, false, false, getKeyword$17$Delimiter());
	}

	protected int consumeAssignment$18(int entryPoint) throws Exception {
		int result = doConsumeAssignment$18(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$18(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$18(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele0000001AssignmentName());
		return result.getResult(consumeRuleCall$19(entryPoint));
	}

	protected int consumeRuleCall$19(int entryPoint) throws Exception {
		return consumeTerminal(idConsumer, "name", false, false, getRule().ele00000010LexerRuleCallID(), getRuleCall$19$Delimiter());
	}

	protected int consumeGroup$20(int entryPoint) throws Exception {
		IMarker marker = mark();
		int result = doConsumeGroup$20(entryPoint);
		if (result != ConsumeResult.SUCCESS) {
			marker.rollback();
			skipped(getRule().ele000001Group());
		} else
			marker.commit();
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeGroup$20(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().ele000001Group());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$23(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele000001000KeywordLessThanSign());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$24(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele000001001AssignmentETypeParameters());
					return result.getResult();
				}
			case 2:
				result.nextStep();
				if (result.didGroupFail(consumeGroup$26(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00000101Group());
					return result.getResult();
				}
			case 3:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$30(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0000011KeywordGreaterThanSign());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeKeyword$23(int entryPoint) throws Exception {
		int result = doConsumeKeyword$23(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$23(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$23(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele000001000KeywordLessThanSign(), null, false, false, getKeyword$23$Delimiter());
	}

	protected int consumeAssignment$24(int entryPoint) throws Exception {
		int result = doConsumeAssignment$24(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$24(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$24(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele000001001AssignmentETypeParameters());
		return result.getResult(consumeRuleCall$25(entryPoint));
	}

	protected int consumeRuleCall$25(int entryPoint) throws Exception {
		return consumeNonTerminal(eTypeParameterDeclConsumer, "eTypeParameters", true, false, false, getRule().ele0000010010ParserRuleCallETypeParameterDecl());
	}

	protected int consumeGroup$26(int entryPoint) throws Exception {
		IMarker marker = mark();
		while(doConsumeGroup$26(entryPoint) == ConsumeResult.SUCCESS) {
			marker.flush();
		}
		marker.rollback();
		skipped(getRule().ele00000101Group());
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeGroup$26(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().ele00000101Group());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$27(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele000001010KeywordComma());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$28(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele000001011AssignmentETypeParameters());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeKeyword$27(int entryPoint) throws Exception {
		int result = doConsumeKeyword$27(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$27(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$27(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele000001010KeywordComma(), null, false, false, getKeyword$27$Delimiter());
	}

	protected int consumeAssignment$28(int entryPoint) throws Exception {
		int result = doConsumeAssignment$28(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$28(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$28(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele000001011AssignmentETypeParameters());
		return result.getResult(consumeRuleCall$29(entryPoint));
	}

	protected int consumeRuleCall$29(int entryPoint) throws Exception {
		return consumeNonTerminal(eTypeParameterDeclConsumer, "eTypeParameters", true, false, false, getRule().ele0000010110ParserRuleCallETypeParameterDecl());
	}

	protected int consumeKeyword$30(int entryPoint) throws Exception {
		int result = doConsumeKeyword$30(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$30(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$30(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele0000011KeywordGreaterThanSign(), null, false, false, getKeyword$30$Delimiter());
	}

	protected int consumeGroup$31(int entryPoint) throws Exception {
		IMarker marker = mark();
		int result = doConsumeGroup$31(entryPoint);
		if (result != ConsumeResult.SUCCESS) {
			marker.rollback();
			skipped(getRule().ele00001Group());
		} else
			marker.commit();
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeGroup$31(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().ele00001Group());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$33(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0000100KeywordExtends());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$34(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0000101AssignmentEGenericSuperTypes());
					return result.getResult();
				}
			case 2:
				result.nextStep();
				if (result.didGroupFail(consumeGroup$36(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele000011Group());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeKeyword$33(int entryPoint) throws Exception {
		int result = doConsumeKeyword$33(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$33(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$33(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele0000100KeywordExtends(), null, false, false, getKeyword$33$Delimiter());
	}

	protected int consumeAssignment$34(int entryPoint) throws Exception {
		int result = doConsumeAssignment$34(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$34(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$34(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele0000101AssignmentEGenericSuperTypes());
		return result.getResult(consumeRuleCall$35(entryPoint));
	}

	protected int consumeRuleCall$35(int entryPoint) throws Exception {
		return consumeNonTerminal(eGenericTypeReferenceDeclConsumer, "eGenericSuperTypes", true, false, false, getRule().ele00001010ParserRuleCallEGenericTypeReferenceDecl());
	}

	protected int consumeGroup$36(int entryPoint) throws Exception {
		IMarker marker = mark();
		while(doConsumeGroup$36(entryPoint) == ConsumeResult.SUCCESS) {
			marker.flush();
		}
		marker.rollback();
		skipped(getRule().ele000011Group());
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeGroup$36(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().ele000011Group());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$37(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0000110KeywordComma());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$38(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0000111AssignmentEGenericSuperTypes());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeKeyword$37(int entryPoint) throws Exception {
		int result = doConsumeKeyword$37(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$37(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$37(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele0000110KeywordComma(), null, false, false, getKeyword$37$Delimiter());
	}

	protected int consumeAssignment$38(int entryPoint) throws Exception {
		int result = doConsumeAssignment$38(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$38(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$38(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele0000111AssignmentEGenericSuperTypes());
		return result.getResult(consumeRuleCall$39(entryPoint));
	}

	protected int consumeRuleCall$39(int entryPoint) throws Exception {
		return consumeNonTerminal(eGenericTypeReferenceDeclConsumer, "eGenericSuperTypes", true, false, false, getRule().ele00001110ParserRuleCallEGenericTypeReferenceDecl());
	}

	protected int consumeGroup$40(int entryPoint) throws Exception {
		IMarker marker = mark();
		int result = doConsumeGroup$40(entryPoint);
		if (result != ConsumeResult.SUCCESS) {
			marker.rollback();
			skipped(getRule().ele0001Group());
		} else
			marker.commit();
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeGroup$40(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().ele0001Group());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$41(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00010KeywordColon());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$42(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00011AssignmentInstanceClassName());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeKeyword$41(int entryPoint) throws Exception {
		int result = doConsumeKeyword$41(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$41(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$41(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele00010KeywordColon(), null, false, false, getKeyword$41$Delimiter());
	}

	protected int consumeAssignment$42(int entryPoint) throws Exception {
		int result = doConsumeAssignment$42(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$42(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$42(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele00011AssignmentInstanceClassName());
		return result.getResult(consumeRuleCall$43(entryPoint));
	}

	protected int consumeRuleCall$43(int entryPoint) throws Exception {
		return consumeNonTerminal(stringOrQidConsumer, "instanceClassName", false, true, false, getRule().ele000110ParserRuleCallSTRING_OR_QID());
	}

	protected int consumeKeyword$44(int entryPoint) throws Exception {
		int result = doConsumeKeyword$44(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$44(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$44(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele001KeywordLeftCurlyBracket(), null, false, false, getKeyword$44$Delimiter());
	}

	protected int consumeAlternatives$45(int entryPoint) throws Exception {
		IMarker marker = mark();
		while(doConsumeAlternatives$45(entryPoint) == ConsumeResult.SUCCESS) {
			marker.flush();
		}
		marker.rollback();
		skipped(getRule().ele01Alternatives());
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeAlternatives$45(int entryPoint) throws Exception {
		final AlternativesResult result = createAlternativesResult(getRule().ele01Alternatives());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextAlternative();
				if (result.isAlternativeDone(consumeAssignment$46(nextEntryPoint()))) { 
					return result.getResult(); 
				}
			case 1:
				result.nextAlternative();
				if (result.isAlternativeDone(consumeAssignment$48(nextEntryPoint()))) { 
					return result.getResult(); 
				}
		}
		return result.getResult();
	}

	protected int consumeAssignment$46(int entryPoint) throws Exception {
		int result = doConsumeAssignment$46(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$46(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$46(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele010AssignmentEStructuralFeatures());
		return result.getResult(consumeRuleCall$47(entryPoint));
	}

	protected int consumeRuleCall$47(int entryPoint) throws Exception {
		return consumeNonTerminal(eStructuralFeatureDeclConsumer, "eStructuralFeatures", true, false, false, getRule().ele0100ParserRuleCallEStructuralFeatureDecl());
	}

	protected int consumeAssignment$48(int entryPoint) throws Exception {
		int result = doConsumeAssignment$48(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$48(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$48(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele011AssignmentEOperations());
		return result.getResult(consumeRuleCall$49(entryPoint));
	}

	protected int consumeRuleCall$49(int entryPoint) throws Exception {
		return consumeNonTerminal(eOperationDeclConsumer, "eOperations", true, false, false, getRule().ele0110ParserRuleCallEOperationDecl());
	}

	protected int consumeKeyword$50(int entryPoint) throws Exception {
		int result = doConsumeKeyword$50(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$50(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$50(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele1KeywordRightCurlyBracket(), null, false, false, getKeyword$50$Delimiter());
	}

	public EClassDeclElements getRule() {
		return rule;
	}
	
	public void setRule(EClassDeclElements rule) {
		this.rule = rule;
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setEAnnotationDeclConsumer(INonTerminalConsumer eAnnotationDeclConsumer) {
		this.eAnnotationDeclConsumer = eAnnotationDeclConsumer;
	}
	
	public void setEGenericTypeReferenceDeclConsumer(INonTerminalConsumer eGenericTypeReferenceDeclConsumer) {
		this.eGenericTypeReferenceDeclConsumer = eGenericTypeReferenceDeclConsumer;
	}
	
	public void setEOperationDeclConsumer(INonTerminalConsumer eOperationDeclConsumer) {
		this.eOperationDeclConsumer = eOperationDeclConsumer;
	}
	
	public void setEStructuralFeatureDeclConsumer(INonTerminalConsumer eStructuralFeatureDeclConsumer) {
		this.eStructuralFeatureDeclConsumer = eStructuralFeatureDeclConsumer;
	}
	
	public void setETypeParameterDeclConsumer(INonTerminalConsumer eTypeParameterDeclConsumer) {
		this.eTypeParameterDeclConsumer = eTypeParameterDeclConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setStringOrQidConsumer(INonTerminalConsumer stringOrQidConsumer) {
		this.stringOrQidConsumer = stringOrQidConsumer;
	}
	
	public ICharacterClass getKeyword$13$Delimiter() {
		return keyword$13$Delimiter;
	}
	
	public void setKeyword$13$Delimiter(ICharacterClass characterClass) {
		keyword$13$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$16$Delimiter() {
		return keyword$16$Delimiter;
	}
	
	public void setKeyword$16$Delimiter(ICharacterClass characterClass) {
		keyword$16$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$17$Delimiter() {
		return keyword$17$Delimiter;
	}
	
	public void setKeyword$17$Delimiter(ICharacterClass characterClass) {
		keyword$17$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$23$Delimiter() {
		return keyword$23$Delimiter;
	}
	
	public void setKeyword$23$Delimiter(ICharacterClass characterClass) {
		keyword$23$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$27$Delimiter() {
		return keyword$27$Delimiter;
	}
	
	public void setKeyword$27$Delimiter(ICharacterClass characterClass) {
		keyword$27$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$30$Delimiter() {
		return keyword$30$Delimiter;
	}
	
	public void setKeyword$30$Delimiter(ICharacterClass characterClass) {
		keyword$30$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$33$Delimiter() {
		return keyword$33$Delimiter;
	}
	
	public void setKeyword$33$Delimiter(ICharacterClass characterClass) {
		keyword$33$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$37$Delimiter() {
		return keyword$37$Delimiter;
	}
	
	public void setKeyword$37$Delimiter(ICharacterClass characterClass) {
		keyword$37$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$41$Delimiter() {
		return keyword$41$Delimiter;
	}
	
	public void setKeyword$41$Delimiter(ICharacterClass characterClass) {
		keyword$41$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$44$Delimiter() {
		return keyword$44$Delimiter;
	}
	
	public void setKeyword$44$Delimiter(ICharacterClass characterClass) {
		keyword$44$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$50$Delimiter() {
		return keyword$50$Delimiter;
	}
	
	public void setKeyword$50$Delimiter(ICharacterClass characterClass) {
		keyword$50$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$19$Delimiter() {
		return ruleCall$19$Delimiter;
	}
	
	public void setRuleCall$19$Delimiter(ISequenceMatcher matcher) {
		ruleCall$19$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
