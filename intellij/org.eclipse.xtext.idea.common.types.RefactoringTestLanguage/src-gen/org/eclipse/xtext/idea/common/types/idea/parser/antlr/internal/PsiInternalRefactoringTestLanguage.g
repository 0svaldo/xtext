/*
* generated by Xtext
*/
grammar PsiInternalRefactoringTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.idea.common.types.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.idea.common.types.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.idea.common.types.idea.lang.RefactoringTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;

import com.intellij.lang.PsiBuilder;
}

@parser::members {
public RefactoringTestLanguageElementTypeProvider elementTypeProvider;

public PsiInternalRefactoringTestLanguageParser(PsiBuilder builder, TokenStream input, TokenTypeProvider tokenTypeProvider, RefactoringTestLanguageElementTypeProvider elementTypeProvider) {
	super(builder, input, tokenTypeProvider);
	this.elementTypeProvider = elementTypeProvider;
}

@Override
protected String getFirstRuleName() {
	return "Model";
}

}

//Entry rule entryRuleModel
entryRuleModel:
	{ markComposite(); }
	ruleModel
	{ doneComposite(elementTypeProvider.getModelElementType()); }
	EOF;
finally {
}

// Rule Model
ruleModel:
	(
		(
			{
				markComposite();
			}
			lv_referenceHolder_0_0=ruleReferenceHolder
			{
				doneComposite(elementTypeProvider.getModel_ReferenceHolderReferenceHolderParserRuleCall_0ElementType());
			}
		)
	)*
;

//Entry rule entryRuleReferenceHolder
entryRuleReferenceHolder:
	{ markComposite(); }
	ruleReferenceHolder
	{ doneComposite(elementTypeProvider.getReferenceHolderElementType()); }
	EOF;
finally {
}

// Rule ReferenceHolder
ruleReferenceHolder:
	(
		(
			(
				{
					markLeaf();
				}
				lv_name_0_0=RULE_ID
				{
					doneLeaf(lv_name_0_0, elementTypeProvider.getReferenceHolder_NameIDTerminalRuleCall_0_0ElementType());
				}
			)
		)
		(
			(
				{
					markComposite();
				}
				ruleFQN
				{
					doneComposite(elementTypeProvider.getReferenceHolder_DefaultReferenceJvmTypeCrossReference_1_0ElementType());
				}
			)
		)
	)
;

//Entry rule entryRuleFQN
entryRuleFQN:
	{ markComposite(); }
	ruleFQN
	{ doneComposite(elementTypeProvider.getFQNElementType()); }
	EOF;
finally {
}

// Rule FQN
ruleFQN:
	(
		{
			markLeaf();
		}
		this_ID_0=RULE_ID
		{
			doneLeaf(this_ID_0, elementTypeProvider.getFQN_IDTerminalRuleCall_0ElementType());
		}
		(
			{
				markLeaf();
			}
			kw='.'
			{
				doneLeaf(kw, elementTypeProvider.getFQN_FullStopKeyword_1_0ElementType());
			}
			{
				markLeaf();
			}
			this_ID_2=RULE_ID
			{
				doneLeaf(this_ID_2, elementTypeProvider.getFQN_IDTerminalRuleCall_1_1ElementType());
			}
		)*
		(
			{
				markLeaf();
			}
			kw='$'
			{
				doneLeaf(kw, elementTypeProvider.getFQN_DollarSignKeyword_2_0ElementType());
			}
			{
				markLeaf();
			}
			this_ID_4=RULE_ID
			{
				doneLeaf(this_ID_4, elementTypeProvider.getFQN_IDTerminalRuleCall_2_1ElementType());
			}
		)*
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
