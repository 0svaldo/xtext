/*
 * generated by Xtext
 */
grammar PsiInternalEnumRulesTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.enumrules.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.enumrules.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.enumrules.idea.lang.EnumRulesTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.enumrules.services.EnumRulesTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

private EnumRulesTestLanguageGrammarAccess grammarAccess;

private EnumRulesTestLanguageElementTypeProvider elementTypeProvider;

public PsiInternalEnumRulesTestLanguageParser(PsiBuilder builder, TokenStream input, TokenTypeProvider tokenTypeProvider, EnumRulesTestLanguageElementTypeProvider elementTypeProvider, EnumRulesTestLanguageGrammarAccess grammarAccess) {
	super(builder, input, tokenTypeProvider);
    this.grammarAccess = grammarAccess;
	this.elementTypeProvider = elementTypeProvider;
}

@Override
protected String getFirstRuleName() {
	return "Model";
}

}

//Entry rule entryRuleModel
entryRuleModel:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	ruleModel
	{ doneComposite(); }
	EOF;
finally {
}

// Rule Model
ruleModel:
	(
		(
			{
				markLeaf();
			}
			otherlv_0='existing'
			{
				doneLeaf(otherlv_0, elementTypeProvider.getModel_ExistingKeyword_0_0ElementType());
			}
			(
				(
					{
						markComposite(elementTypeProvider.getModel_ExistingExistingEnumEnumRuleCall_0_1_0ElementType());
					}
					lv_existing_1_0=ruleExistingEnum
					{
						doneComposite();
					}
				)
			)
			(
				{
					markLeaf();
				}
				otherlv_2='generated'
				{
					doneLeaf(otherlv_2, elementTypeProvider.getModel_GeneratedKeyword_0_2_0ElementType());
				}
				(
					(
						{
							markComposite(elementTypeProvider.getModel_GeneratedGeneratedEnumEnumRuleCall_0_2_1_0ElementType());
						}
						lv_generated_3_0=ruleGeneratedEnum
						{
							doneComposite();
						}
					)
				)
			)?
		)
		    |
		(
			{
				markLeaf();
			}
			otherlv_4='generated'
			{
				doneLeaf(otherlv_4, elementTypeProvider.getModel_GeneratedKeyword_1_0ElementType());
			}
			(
				(
					{
						markComposite(elementTypeProvider.getModel_GeneratedGeneratedEnumEnumRuleCall_1_1_0ElementType());
					}
					lv_generated_5_0=ruleGeneratedEnum
					{
						doneComposite();
					}
				)
			)
		)
	)
;

// Rule ExistingEnum
ruleExistingEnum:
	(
		(
			{
				markLeaf();
			}
			enumLiteral_0='SameName'
			{
				doneLeaf(enumLiteral_0, elementTypeProvider.getExistingEnum_SameNameEnumLiteralDeclaration_0ElementType());
			}
		)
		    |
		(
			{
				markLeaf();
			}
			enumLiteral_1='overridden'
			{
				doneLeaf(enumLiteral_1, elementTypeProvider.getExistingEnum_OverriddenLiteralEnumLiteralDeclaration_1ElementType());
			}
		)
		    |
		(
			{
				markLeaf();
			}
			enumLiteral_2='DifferentLiteral'
			{
				doneLeaf(enumLiteral_2, elementTypeProvider.getExistingEnum_DifferentNameEnumLiteralDeclaration_2ElementType());
			}
		)
	)
;

// Rule GeneratedEnum
ruleGeneratedEnum:
	(
		(
			{
				markLeaf();
			}
			enumLiteral_0='SameName'
			{
				doneLeaf(enumLiteral_0, elementTypeProvider.getGeneratedEnum_SameNameEnumLiteralDeclaration_0ElementType());
			}
		)
		    |
		(
			{
				markLeaf();
			}
			enumLiteral_1='DifferentLiteral'
			{
				doneLeaf(enumLiteral_1, elementTypeProvider.getGeneratedEnum_DifferentNameEnumLiteralDeclaration_1ElementType());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
