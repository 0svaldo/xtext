/*
 * generated by Xtext
 */
grammar PsiInternalLookaheadTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.testlanguages.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.testlanguages.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.testlanguages.idea.lang.LookaheadTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.testlanguages.services.LookaheadTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected LookaheadTestLanguageGrammarAccess grammarAccess;

	protected LookaheadTestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalLookaheadTestLanguageParser(PsiBuilder builder, TokenStream input, LookaheadTestLanguageElementTypeProvider elementTypeProvider, LookaheadTestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Entry";
	}

}

//Entry rule entryRuleEntry
entryRuleEntry:
	{ markComposite(elementTypeProvider.getEntryElementType()); }
	ruleEntry
	{ doneComposite(); }
	EOF;

// Rule Entry
ruleEntry:
	(
		(
			{
				markComposite(elementTypeProvider.getEntry_ContentsAltsParserRuleCall_0ElementType());
			}
			lv_contents_0_0=ruleAlts
			{
				doneComposite();
			}
		)
	)*
;

//Entry rule entryRuleAlts
entryRuleAlts:
	{ markComposite(elementTypeProvider.getAltsElementType()); }
	ruleAlts
	{ doneComposite(); }
	EOF;

// Rule Alts
ruleAlts:
	(
		{
			markComposite(elementTypeProvider.getAlts_LookAhead0ParserRuleCall_0ElementType());
		}
		ruleLookAhead0
		{
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getAlts_LookAhead1ParserRuleCall_1ElementType());
		}
		ruleLookAhead1
		{
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getAlts_LookAhead3ParserRuleCall_2ElementType());
		}
		ruleLookAhead3
		{
			doneComposite();
		}
	)
;

//Entry rule entryRuleLookAhead0
entryRuleLookAhead0:
	{ markComposite(elementTypeProvider.getLookAhead0ElementType()); }
	ruleLookAhead0
	{ doneComposite(); }
	EOF;

// Rule LookAhead0
ruleLookAhead0:
	(
		{
			markLeaf();
		}
		otherlv_0='bar'
		{
			doneLeaf(otherlv_0, elementTypeProvider.getLookAhead0_BarKeyword_0ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				lv_x_1_0='a'
				{
					doneLeaf(lv_x_1_0, elementTypeProvider.getLookAhead0_XAKeyword_1_0ElementType());
				}
			)
		)
	)
;

//Entry rule entryRuleLookAhead1
entryRuleLookAhead1:
	{ markComposite(elementTypeProvider.getLookAhead1ElementType()); }
	ruleLookAhead1
	{ doneComposite(); }
	EOF;

// Rule LookAhead1
ruleLookAhead1:
	(
		{
			markLeaf();
		}
		otherlv_0='foo'
		{
			doneLeaf(otherlv_0, elementTypeProvider.getLookAhead1_FooKeyword_0ElementType());
		}
		(
			(
				{
					markComposite(elementTypeProvider.getLookAhead1_YLookAhead2ParserRuleCall_1_0ElementType());
				}
				lv_y_1_0=ruleLookAhead2
				{
					doneComposite();
				}
			)
		)
		(
			(
				{
					markLeaf();
				}
				lv_x_2_0='b'
				{
					doneLeaf(lv_x_2_0, elementTypeProvider.getLookAhead1_XBKeyword_2_0ElementType());
				}
			)
		)
		(
			(
				{
					markLeaf();
				}
				lv_z_3_0='d'
				{
					doneLeaf(lv_z_3_0, elementTypeProvider.getLookAhead1_ZDKeyword_3_0ElementType());
				}
			)
		)
	)
;

//Entry rule entryRuleLookAhead2
entryRuleLookAhead2:
	{ markComposite(elementTypeProvider.getLookAhead2ElementType()); }
	ruleLookAhead2
	{ doneComposite(); }
	EOF;

// Rule LookAhead2
ruleLookAhead2:
	(
		(
			(
				(
					{
						markLeaf();
					}
					lv_z_0_0='foo'
					{
						doneLeaf(lv_z_0_0, elementTypeProvider.getLookAhead2_ZFooKeyword_0_0_0ElementType());
					}
				)
			)
			    |
			(
				(
					{
						markLeaf();
					}
					lv_z_1_0='bar'
					{
						doneLeaf(lv_z_1_0, elementTypeProvider.getLookAhead2_ZBarKeyword_0_1_0ElementType());
					}
				)
			)
		)
		{
			markLeaf();
		}
		otherlv_2='c'
		{
			doneLeaf(otherlv_2, elementTypeProvider.getLookAhead2_CKeyword_1ElementType());
		}
	)
;

//Entry rule entryRuleLookAhead3
entryRuleLookAhead3:
	{ markComposite(elementTypeProvider.getLookAhead3ElementType()); }
	ruleLookAhead3
	{ doneComposite(); }
	EOF;

// Rule LookAhead3
ruleLookAhead3:
	(
		{
			markLeaf();
		}
		otherlv_0='foo'
		{
			doneLeaf(otherlv_0, elementTypeProvider.getLookAhead3_FooKeyword_0ElementType());
		}
		{
			markLeaf();
		}
		otherlv_1='bar'
		{
			doneLeaf(otherlv_1, elementTypeProvider.getLookAhead3_BarKeyword_1ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				lv_x_2_0='b'
				{
					doneLeaf(lv_x_2_0, elementTypeProvider.getLookAhead3_XBKeyword_2_0ElementType());
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getLookAhead3_ZLookAhead4ParserRuleCall_3_0ElementType());
				}
				lv_z_3_0=ruleLookAhead4
				{
					doneComposite();
				}
			)
		)
	)
;

//Entry rule entryRuleLookAhead4
entryRuleLookAhead4:
	{ markComposite(elementTypeProvider.getLookAhead4ElementType()); }
	ruleLookAhead4
	{ doneComposite(); }
	EOF;

// Rule LookAhead4
ruleLookAhead4:
	(
		(
			(
				{
					markLeaf();
				}
				lv_x_0_0='c'
				{
					doneLeaf(lv_x_0_0, elementTypeProvider.getLookAhead4_XCKeyword_0_0ElementType());
				}
			)
		)
		    |
		(
			(
				{
					markLeaf();
				}
				lv_x_1_0='d'
				{
					doneLeaf(lv_x_1_0, elementTypeProvider.getLookAhead4_XDKeyword_1_0ElementType());
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
