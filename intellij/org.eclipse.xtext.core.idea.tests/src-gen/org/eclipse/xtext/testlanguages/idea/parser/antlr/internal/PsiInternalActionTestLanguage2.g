/*
 * generated by Xtext
 */
grammar PsiInternalActionTestLanguage2;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.testlanguages.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.testlanguages.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.testlanguages.idea.lang.ActionTestLanguage2ElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.testlanguages.services.ActionTestLanguage2GrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

private ActionTestLanguage2GrammarAccess grammarAccess;

private ActionTestLanguage2ElementTypeProvider elementTypeProvider;

public PsiInternalActionTestLanguage2Parser(PsiBuilder builder, TokenStream input, TokenTypeProvider tokenTypeProvider, ActionTestLanguage2ElementTypeProvider elementTypeProvider, ActionTestLanguage2GrammarAccess grammarAccess) {
	super(builder, input, tokenTypeProvider);
    this.grammarAccess = grammarAccess;
	this.elementTypeProvider = elementTypeProvider;
}

@Override
protected String getFirstRuleName() {
	return "ORing";
}

}

//Entry rule entryRuleORing
entryRuleORing:
	{ markComposite(elementTypeProvider.getORingElementType()); }
	ruleORing
	{ doneComposite(); }
	EOF;
finally {
}

// Rule ORing
ruleORing:
	(
		{
			markComposite(elementTypeProvider.getORing_ValueParserRuleCall_0ElementType());
		}
		ruleValue
		{
			doneComposite();
		}
		(
			(
				{
					precedeComposite(elementTypeProvider.getORing_ORingDisjunctsAction_1_0ElementType());
					doneComposite();
				}
			)
			{
				markLeaf();
			}
			otherlv_2='|'
			{
				doneLeaf(otherlv_2, elementTypeProvider.getORing_VerticalLineKeyword_1_1ElementType());
			}
			(
				(
					{
						markComposite(elementTypeProvider.getORing_DisjunctsValueParserRuleCall_1_2_0ElementType());
					}
					lv_disjuncts_3_0=ruleValue
					{
						doneComposite();
					}
				)
			)
		)*
	)
;

//Entry rule entryRuleValue
entryRuleValue:
	{ markComposite(elementTypeProvider.getValueElementType()); }
	ruleValue
	{ doneComposite(); }
	EOF;
finally {
}

// Rule Value
ruleValue:
	(
		(
			{
				markLeaf();
			}
			lv_value_0_0='a'
			{
				doneLeaf(lv_value_0_0, elementTypeProvider.getValue_ValueAKeyword_0ElementType());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
