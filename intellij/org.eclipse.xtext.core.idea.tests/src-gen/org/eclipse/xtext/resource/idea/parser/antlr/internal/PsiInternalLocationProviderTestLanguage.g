/*
 * generated by Xtext
 */
grammar PsiInternalLocationProviderTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.resource.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.resource.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.resource.idea.lang.LocationProviderTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.resource.services.LocationProviderTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected LocationProviderTestLanguageGrammarAccess grammarAccess;

	protected LocationProviderTestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalLocationProviderTestLanguageParser(PsiBuilder builder, TokenStream input, LocationProviderTestLanguageElementTypeProvider elementTypeProvider, LocationProviderTestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Model";
	}

}

//Entry rule entryRuleModel
entryRuleModel:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	ruleModel
	{ doneComposite(); }
	EOF;

// Rule Model
ruleModel:
	(
		(
			(
				{
					markComposite(elementTypeProvider.getModel_ElementsElementParserRuleCall_0_0ElementType());
				}
				lv_elements_0_0=ruleElement
				{
					doneComposite();
				}
			)
		)*
		(
			(
				{
					markComposite(elementTypeProvider.getModel_ComponentsComponentParserRuleCall_1_0ElementType());
				}
				lv_components_1_0=ruleComponent
				{
					doneComposite();
				}
			)
		)*
	)
;

//Entry rule entryRuleElement
entryRuleElement:
	{ markComposite(elementTypeProvider.getElementElementType()); }
	ruleElement
	{ doneComposite(); }
	EOF;

// Rule Element
ruleElement:
	(
		{
			markLeaf();
		}
		otherlv_0='element'
		{
			doneLeaf(otherlv_0, elementTypeProvider.getElement_ElementKeyword_0ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				lv_name_1_0=RULE_ID
				{
					doneLeaf(lv_name_1_0, elementTypeProvider.getElement_NameIDTerminalRuleCall_1_0ElementType());
				}
			)
		)
		(
			{
				markLeaf();
			}
			otherlv_2='singleref'
			{
				doneLeaf(otherlv_2, elementTypeProvider.getElement_SinglerefKeyword_2_0ElementType());
			}
			(
				(
					{
						markLeaf();
					}
					otherlv_3=RULE_ID
					{
						doneLeaf(otherlv_3, elementTypeProvider.getElement_SinglerefElementCrossReference_2_1_0ElementType());
					}
				)
			)
		)?
		(
			{
				markLeaf();
			}
			otherlv_4='multiref'
			{
				doneLeaf(otherlv_4, elementTypeProvider.getElement_MultirefKeyword_3_0ElementType());
			}
			(
				(
					{
						markLeaf();
					}
					otherlv_5=RULE_ID
					{
						doneLeaf(otherlv_5, elementTypeProvider.getElement_MultirefsElementCrossReference_3_1_0ElementType());
					}
				)
			)
		)*
	)
;

//Entry rule entryRuleComponent
entryRuleComponent:
	{ markComposite(elementTypeProvider.getComponentElementType()); }
	ruleComponent
	{ doneComposite(); }
	EOF;

// Rule Component
ruleComponent:
	(
		(
			{
				markComposite(elementTypeProvider.getComponent_BusParserRuleCall_0_0ElementType());
			}
			ruleBus
			{
				doneComposite();
			}
			    |
			{
				markComposite(elementTypeProvider.getComponent_ProcessorParserRuleCall_0_1ElementType());
			}
			ruleProcessor
			{
				doneComposite();
			}
		)
		(
			{
				markLeaf();
			}
			otherlv_2='modes'
			{
				doneLeaf(otherlv_2, elementTypeProvider.getComponent_ModesKeyword_1_0ElementType());
			}
			(
				(
					(
						{
							markComposite(elementTypeProvider.getComponent_ModeModeParserRuleCall_1_1_0_0ElementType());
						}
						lv_mode_3_0=ruleMode
						{
							doneComposite();
						}
					)
				)
				    |
				(
					(
						{
							markComposite(elementTypeProvider.getComponent_TransitionTransitionParserRuleCall_1_1_1_0ElementType());
						}
						lv_transition_4_0=ruleTransition
						{
							doneComposite();
						}
					)
				)
			)+
		)?
		{
			markLeaf();
		}
		otherlv_5='end'
		{
			doneLeaf(otherlv_5, elementTypeProvider.getComponent_EndKeyword_2ElementType());
		}
		{
			markLeaf();
		}
		otherlv_6=';'
		{
			doneLeaf(otherlv_6, elementTypeProvider.getComponent_SemicolonKeyword_3ElementType());
		}
	)
;

//Entry rule entryRuleBus
entryRuleBus:
	{ markComposite(elementTypeProvider.getBusElementType()); }
	ruleBus
	{ doneComposite(); }
	EOF;

// Rule Bus
ruleBus:
	(
		{
			markLeaf();
		}
		otherlv_0='bus'
		{
			doneLeaf(otherlv_0, elementTypeProvider.getBus_BusKeyword_0ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				lv_name_1_0=RULE_ID
				{
					doneLeaf(lv_name_1_0, elementTypeProvider.getBus_NameIDTerminalRuleCall_1_0ElementType());
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getBus_PortPortParserRuleCall_2_0ElementType());
				}
				lv_port_2_0=rulePort
				{
					doneComposite();
				}
			)
		)*
	)
;

//Entry rule entryRuleProcessor
entryRuleProcessor:
	{ markComposite(elementTypeProvider.getProcessorElementType()); }
	ruleProcessor
	{ doneComposite(); }
	EOF;

// Rule Processor
ruleProcessor:
	(
		{
			markLeaf();
		}
		otherlv_0='processor'
		{
			doneLeaf(otherlv_0, elementTypeProvider.getProcessor_ProcessorKeyword_0ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				lv_name_1_0=RULE_ID
				{
					doneLeaf(lv_name_1_0, elementTypeProvider.getProcessor_NameIDTerminalRuleCall_1_0ElementType());
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getProcessor_DataDataParserRuleCall_2_0ElementType());
				}
				lv_data_2_0=ruleData
				{
					doneComposite();
				}
			)
		)*
	)
;

//Entry rule entryRuleMode
entryRuleMode:
	{ markComposite(elementTypeProvider.getModeElementType()); }
	ruleMode
	{ doneComposite(); }
	EOF;

// Rule Mode
ruleMode:
	(
		{
			markLeaf();
		}
		otherlv_0='mode'
		{
			doneLeaf(otherlv_0, elementTypeProvider.getMode_ModeKeyword_0ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				lv_name_1_0=RULE_ID
				{
					doneLeaf(lv_name_1_0, elementTypeProvider.getMode_NameIDTerminalRuleCall_1_0ElementType());
				}
			)
		)
		{
			markLeaf();
		}
		otherlv_2=';'
		{
			doneLeaf(otherlv_2, elementTypeProvider.getMode_SemicolonKeyword_2ElementType());
		}
	)
;

//Entry rule entryRuleTransition
entryRuleTransition:
	{ markComposite(elementTypeProvider.getTransitionElementType()); }
	ruleTransition
	{ doneComposite(); }
	EOF;

// Rule Transition
ruleTransition:
	(
		(
			(
				{
					markLeaf();
				}
				lv_name_0_0=RULE_ID
				{
					doneLeaf(lv_name_0_0, elementTypeProvider.getTransition_NameIDTerminalRuleCall_0_0ElementType());
				}
			)
		)
		{
			markLeaf();
		}
		otherlv_1=':'
		{
			doneLeaf(otherlv_1, elementTypeProvider.getTransition_ColonKeyword_1ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				otherlv_2=RULE_ID
				{
					doneLeaf(otherlv_2, elementTypeProvider.getTransition_SourceModeCrossReference_2_0ElementType());
				}
			)
		)
		{
			markLeaf();
		}
		otherlv_3='->'
		{
			doneLeaf(otherlv_3, elementTypeProvider.getTransition_HyphenMinusGreaterThanSignKeyword_3ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				otherlv_4=RULE_ID
				{
					doneLeaf(otherlv_4, elementTypeProvider.getTransition_DestinationModeCrossReference_4_0ElementType());
				}
			)
		)
		{
			markLeaf();
		}
		otherlv_5=';'
		{
			doneLeaf(otherlv_5, elementTypeProvider.getTransition_SemicolonKeyword_5ElementType());
		}
	)
;

//Entry rule entryRulePort
entryRulePort:
	{ markComposite(elementTypeProvider.getPortElementType()); }
	rulePort
	{ doneComposite(); }
	EOF;

// Rule Port
rulePort:
	(
		{
			markLeaf();
		}
		otherlv_0='port'
		{
			doneLeaf(otherlv_0, elementTypeProvider.getPort_PortKeyword_0ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				lv_name_1_0=RULE_ID
				{
					doneLeaf(lv_name_1_0, elementTypeProvider.getPort_NameIDTerminalRuleCall_1_0ElementType());
				}
			)
		)
		{
			markLeaf();
		}
		otherlv_2=';'
		{
			doneLeaf(otherlv_2, elementTypeProvider.getPort_SemicolonKeyword_2ElementType());
		}
	)
;

//Entry rule entryRuleData
entryRuleData:
	{ markComposite(elementTypeProvider.getDataElementType()); }
	ruleData
	{ doneComposite(); }
	EOF;

// Rule Data
ruleData:
	(
		{
			markLeaf();
		}
		otherlv_0='data'
		{
			doneLeaf(otherlv_0, elementTypeProvider.getData_DataKeyword_0ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				lv_name_1_0=RULE_ID
				{
					doneLeaf(lv_name_1_0, elementTypeProvider.getData_NameIDTerminalRuleCall_1_0ElementType());
				}
			)
		)
		{
			markLeaf();
		}
		otherlv_2=';'
		{
			doneLeaf(otherlv_2, elementTypeProvider.getData_SemicolonKeyword_2ElementType());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
