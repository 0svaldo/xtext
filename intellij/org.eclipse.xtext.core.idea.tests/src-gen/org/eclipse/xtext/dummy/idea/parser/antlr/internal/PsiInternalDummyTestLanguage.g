/*
 * generated by Xtext
 */
grammar PsiInternalDummyTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.dummy.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.dummy.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.dummy.idea.lang.DummyTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.dummy.services.DummyTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

private DummyTestLanguageGrammarAccess grammarAccess;

private DummyTestLanguageElementTypeProvider elementTypeProvider;

public PsiInternalDummyTestLanguageParser(PsiBuilder builder, TokenStream input, TokenTypeProvider tokenTypeProvider, DummyTestLanguageElementTypeProvider elementTypeProvider, DummyTestLanguageGrammarAccess grammarAccess) {
	super(builder, input, tokenTypeProvider);
    this.grammarAccess = grammarAccess;
	this.elementTypeProvider = elementTypeProvider;
}

@Override
protected String getFirstRuleName() {
	return "Model";
}

}

//Entry rule entryRuleModel
entryRuleModel:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	ruleModel
	{ doneComposite(); }
	EOF;
finally {
}

// Rule Model
ruleModel:
	(
		(
			{
				markComposite(elementTypeProvider.getModel_ElementsElementParserRuleCall_0ElementType());
			}
			lv_elements_0_0=ruleElement
			{
				doneComposite();
			}
		)
	)*
;

//Entry rule entryRuleElement
entryRuleElement:
	{ markComposite(elementTypeProvider.getElementElementType()); }
	ruleElement
	{ doneComposite(); }
	EOF;
finally {
}

// Rule Element
ruleElement:
	(
		(
			(
				{
					markLeaf();
				}
				lv_optional_0_0='optional'
				{
					doneLeaf(lv_optional_0_0, elementTypeProvider.getElement_OptionalOptionalKeyword_0_0ElementType());
				}
			)
		)?
		{
			markLeaf();
		}
		otherlv_1='element'
		{
			doneLeaf(otherlv_1, elementTypeProvider.getElement_ElementKeyword_1ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				lv_name_2_0=RULE_ID
				{
					doneLeaf(lv_name_2_0, elementTypeProvider.getElement_NameIDTerminalRuleCall_2_0ElementType());
				}
			)
		)
		(
			(
				{
					markLeaf();
				}
				lv_descriptions_3_0=RULE_STRING
				{
					doneLeaf(lv_descriptions_3_0, elementTypeProvider.getElement_DescriptionsSTRINGTerminalRuleCall_3_0ElementType());
				}
			)
		)*
		{
			markLeaf();
		}
		otherlv_4=';'
		{
			doneLeaf(otherlv_4, elementTypeProvider.getElement_SemicolonKeyword_4ElementType());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
