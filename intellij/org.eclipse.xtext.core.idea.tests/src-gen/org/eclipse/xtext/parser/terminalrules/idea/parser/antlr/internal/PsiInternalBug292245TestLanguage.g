/*
 * generated by Xtext
 */
grammar PsiInternalBug292245TestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.parser.terminalrules.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parser.terminalrules.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.parser.terminalrules.idea.lang.Bug292245TestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.terminalrules.services.Bug292245TestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected Bug292245TestLanguageGrammarAccess grammarAccess;

	protected Bug292245TestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalBug292245TestLanguageParser(PsiBuilder builder, TokenStream input, Bug292245TestLanguageElementTypeProvider elementTypeProvider, Bug292245TestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Model";
	}

}

//Entry rule entryRuleModel
entryRuleModel:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	ruleModel
	{ doneComposite(); }
	EOF;
finally {
}

// Rule Model
ruleModel:
	(
		(
			{
				markLeaf();
			}
			otherlv_0='FIX'
			{
				doneLeaf(otherlv_0, elementTypeProvider.getModel_FIXKeyword_0_0ElementType());
			}
			(
				(
					{
						markComposite(elementTypeProvider.getModel_FixFixParserRuleCall_0_1_0ElementType());
					}
					lv_fix_1_0=ruleFix
					{
						doneComposite();
					}
				)
			)+
		)
		    |
		(
			{
				markLeaf();
			}
			otherlv_2='ERROR'
			{
				doneLeaf(otherlv_2, elementTypeProvider.getModel_ERRORKeyword_1_0ElementType());
			}
			(
				(
					{
						markComposite(elementTypeProvider.getModel_ErrorErrorParserRuleCall_1_1_0ElementType());
					}
					lv_error_3_0=ruleError
					{
						doneComposite();
					}
				)
			)+
		)
		    |
		(
			{
				markLeaf();
			}
			otherlv_4='TICK'
			{
				doneLeaf(otherlv_4, elementTypeProvider.getModel_TICKKeyword_2_0ElementType());
			}
			(
				(
					{
						markComposite(elementTypeProvider.getModel_TickApostropheParserRuleCall_2_1_0ElementType());
					}
					lv_tick_5_0=ruleApostrophe
					{
						doneComposite();
					}
				)
			)+
		)
	)*
;

//Entry rule entryRuleError
entryRuleError:
	{ markComposite(elementTypeProvider.getErrorElementType()); }
	ruleError
	{ doneComposite(); }
	EOF;
finally {
}

// Rule Error
ruleError:
	(
		{
			markLeaf();
		}
		this_APOSTROPHE_CHAR_0=RULE_APOSTROPHE_CHAR
		{
			doneLeaf(this_APOSTROPHE_CHAR_0, elementTypeProvider.getError_APOSTROPHE_CHARTerminalRuleCall_0ElementType());
		}
		{
			markComposite(elementTypeProvider.getError_GraphicalParserRuleCall_1ElementType());
		}
		ruleGraphical
		{
			doneComposite();
		}
		{
			markLeaf();
		}
		this_APOSTROPHE_CHAR_2=RULE_APOSTROPHE_CHAR
		{
			doneLeaf(this_APOSTROPHE_CHAR_2, elementTypeProvider.getError_APOSTROPHE_CHARTerminalRuleCall_2ElementType());
		}
	)
;

//Entry rule entryRuleFix
entryRuleFix:
	{ markComposite(elementTypeProvider.getFixElementType()); }
	ruleFix
	{ doneComposite(); }
	EOF;
finally {
}

// Rule Fix
ruleFix:
	(
		{
			markLeaf();
		}
		this_APOSTROPHE_CHAR_0=RULE_APOSTROPHE_CHAR
		{
			doneLeaf(this_APOSTROPHE_CHAR_0, elementTypeProvider.getFix_APOSTROPHE_CHARTerminalRuleCall_0ElementType());
		}
		{
			markComposite(elementTypeProvider.getFix_GraphicalParserRuleCall_1ElementType());
		}
		ruleGraphical
		{
			doneComposite();
		}
		{
			markLeaf();
		}
		this_APOSTROPHE_CHAR_2=RULE_APOSTROPHE_CHAR
		{
			doneLeaf(this_APOSTROPHE_CHAR_2, elementTypeProvider.getFix_APOSTROPHE_CHARTerminalRuleCall_2ElementType());
		}
		{
			markComposite(elementTypeProvider.getFix_RehideParserRuleCall_3ElementType());
		}
		ruleRehide
		{
			doneComposite();
		}
	)
;

//Entry rule entryRuleApostrophe
entryRuleApostrophe:
	{ markComposite(elementTypeProvider.getApostropheElementType()); }
	ruleApostrophe
	{ doneComposite(); }
	EOF;
finally {
}

// Rule Apostrophe
ruleApostrophe:
	{
		markLeaf();
	}
	this_APOSTROPHE_CHAR_0=RULE_APOSTROPHE_CHAR
	{
		doneLeaf(this_APOSTROPHE_CHAR_0, elementTypeProvider.getApostrophe_APOSTROPHE_CHARTerminalRuleCallElementType());
	}
;

//Entry rule entryRuleRehide
entryRuleRehide:
	{ markComposite(elementTypeProvider.getRehideElementType()); }
	ruleRehide
	{ doneComposite(); }
	EOF;
finally {
}

// Rule Rehide
ruleRehide:
	(
		{
			markLeaf();
		}
		kw='^'
		{
			doneLeaf(kw, elementTypeProvider.getRehide_CircumflexAccentKeywordElementType());
		}
	)?
;

//Entry rule entryRuleGraphical
entryRuleGraphical:
	{ markComposite(elementTypeProvider.getGraphicalElementType()); }
	ruleGraphical
	{ doneComposite(); }
	EOF;
finally {
}

// Rule Graphical
ruleGraphical:
	(
		{
			markLeaf();
		}
		this_CHAR_0=RULE_CHAR
		{
			doneLeaf(this_CHAR_0, elementTypeProvider.getGraphical_CHARTerminalRuleCall_0ElementType());
		}
		    |
		{
			markLeaf();
		}
		this_WS_1=RULE_WS
		{
			doneLeaf(this_WS_1, elementTypeProvider.getGraphical_WSTerminalRuleCall_1ElementType());
		}
	)
;

RULE_APOSTROPHE_CHAR : '\'';

RULE_CHAR : ('A'..'Z'|'0'..'9');

RULE_WS : (' '|'\t'|'\r'|'\n')+;
