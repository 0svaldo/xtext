/*
 * generated by Xtext
 */
grammar PsiInternalBug289515TestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.parser.antlr.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parser.antlr.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.parser.antlr.idea.lang.Bug289515TestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.services.Bug289515TestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

private Bug289515TestLanguageGrammarAccess grammarAccess;

private Bug289515TestLanguageElementTypeProvider elementTypeProvider;

public PsiInternalBug289515TestLanguageParser(PsiBuilder builder, TokenStream input, TokenTypeProvider tokenTypeProvider, Bug289515TestLanguageElementTypeProvider elementTypeProvider, Bug289515TestLanguageGrammarAccess grammarAccess) {
	super(builder, input, tokenTypeProvider);
    this.grammarAccess = grammarAccess;
	this.elementTypeProvider = elementTypeProvider;
}

@Override
protected String getFirstRuleName() {
	return "Model";
}

}

//Entry rule entryRuleModel
entryRuleModel:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	ruleModel
	{ doneComposite(); }
	EOF;
finally {
}

// Rule Model
ruleModel:
	(
		(
			{
				markLeaf();
			}
			otherlv_0='1'
			{
				doneLeaf(otherlv_0, elementTypeProvider.getModel_DigitOneKeyword_0_0ElementType());
			}
			(
				(
					{
						markLeaf();
					}
					lv_value_1_0='%'
					{
						doneLeaf(lv_value_1_0, elementTypeProvider.getModel_ValuePercentSignKeyword_0_1_0ElementType());
					}
				)
			)
		)
		    |
		(
			{
				markLeaf();
			}
			otherlv_2='2'
			{
				doneLeaf(otherlv_2, elementTypeProvider.getModel_DigitTwoKeyword_1_0ElementType());
			}
			(
				(
					{
						markLeaf();
					}
					lv_value_3_0='%'
					{
						doneLeaf(lv_value_3_0, elementTypeProvider.getModel_ValuePercentSignKeyword_1_1_0ElementType());
					}
				)
			)
		)
		    |
		(
			{
				markLeaf();
			}
			otherlv_4='3'
			{
				doneLeaf(otherlv_4, elementTypeProvider.getModel_DigitThreeKeyword_2_0ElementType());
			}
			(
				(
					{
						markLeaf();
					}
					lv_value_5_0='\\%'
					{
						doneLeaf(lv_value_5_0, elementTypeProvider.getModel_ValueReverseSolidusPercentSignKeyword_2_1_0ElementType());
					}
				)
			)
		)
		    |
		(
			{
				markLeaf();
			}
			otherlv_6='4'
			{
				doneLeaf(otherlv_6, elementTypeProvider.getModel_DigitFourKeyword_3_0ElementType());
			}
			(
				(
					{
						markLeaf();
					}
					lv_value_7_0='\\%'
					{
						doneLeaf(lv_value_7_0, elementTypeProvider.getModel_ValueReverseSolidusPercentSignKeyword_3_1_0ElementType());
					}
				)
			)
		)
		    |
		(
			{
				markLeaf();
			}
			otherlv_8='5'
			{
				doneLeaf(otherlv_8, elementTypeProvider.getModel_DigitFiveKeyword_4_0ElementType());
			}
			(
				(
					{
						markLeaf();
					}
					lv_value_9_0='%%'
					{
						doneLeaf(lv_value_9_0, elementTypeProvider.getModel_ValuePercentSignPercentSignKeyword_4_1_0ElementType());
					}
				)
			)
		)
		    |
		(
			{
				markLeaf();
			}
			otherlv_10='6'
			{
				doneLeaf(otherlv_10, elementTypeProvider.getModel_DigitSixKeyword_5_0ElementType());
			}
			(
				(
					{
						markLeaf();
					}
					lv_value_11_0='%%'
					{
						doneLeaf(lv_value_11_0, elementTypeProvider.getModel_ValuePercentSignPercentSignKeyword_5_1_0ElementType());
					}
				)
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
