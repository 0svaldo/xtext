/*
 * generated by Xtext
 */
grammar PsiInternalAbstractTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.grammarinheritance.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.grammarinheritance.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.grammarinheritance.idea.lang.AbstractTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.grammarinheritance.services.AbstractTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected AbstractTestLanguageGrammarAccess grammarAccess;

	protected AbstractTestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalAbstractTestLanguageParser(PsiBuilder builder, TokenStream input, AbstractTestLanguageElementTypeProvider elementTypeProvider, AbstractTestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "InheritedParserRule";
	}

}

//Entry rule entryRuleInheritedParserRule
entryRuleInheritedParserRule:
	{ markComposite(elementTypeProvider.getInheritedParserRuleElementType()); }
	ruleInheritedParserRule
	{ doneComposite(); }
	EOF;
finally {
}

// Rule InheritedParserRule
ruleInheritedParserRule:
	(
		{
			markLeaf();
		}
		otherlv_0='element'
		{
			doneLeaf(otherlv_0, elementTypeProvider.getInheritedParserRule_ElementKeyword_0ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				lv_name_1_0=RULE_ID
				{
					doneLeaf(lv_name_1_0, elementTypeProvider.getInheritedParserRule_NameIDTerminalRuleCall_1_0ElementType());
				}
			)
		)
	)
;

//Entry rule entryRuleOverridableParserRule
entryRuleOverridableParserRule:
	{ markComposite(elementTypeProvider.getOverridableParserRuleElementType()); }
	ruleOverridableParserRule
	{ doneComposite(); }
	EOF;
finally {
}

// Rule OverridableParserRule
ruleOverridableParserRule:
	(
		{
			markLeaf();
		}
		otherlv_0='element'
		{
			doneLeaf(otherlv_0, elementTypeProvider.getOverridableParserRule_ElementKeyword_0ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				lv_name_1_0=RULE_ID
				{
					doneLeaf(lv_name_1_0, elementTypeProvider.getOverridableParserRule_NameIDTerminalRuleCall_1_0ElementType());
				}
			)
		)
	)
;

//Entry rule entryRuleExtendableParserRule
entryRuleExtendableParserRule:
	{ markComposite(elementTypeProvider.getExtendableParserRuleElementType()); }
	ruleExtendableParserRule
	{ doneComposite(); }
	EOF;
finally {
}

// Rule ExtendableParserRule
ruleExtendableParserRule:
	(
		{
			markLeaf();
		}
		otherlv_0='element'
		{
			doneLeaf(otherlv_0, elementTypeProvider.getExtendableParserRule_ElementKeyword_0ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				lv_name_1_0=RULE_ID
				{
					doneLeaf(lv_name_1_0, elementTypeProvider.getExtendableParserRule_NameIDTerminalRuleCall_1_0ElementType());
				}
			)
		)
	)
;

RULE_REAL : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'\u00F6'|'\u00E4'|'\u00FC'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
