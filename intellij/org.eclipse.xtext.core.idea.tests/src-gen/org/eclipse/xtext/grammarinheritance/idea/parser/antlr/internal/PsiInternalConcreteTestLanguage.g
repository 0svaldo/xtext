/*
 * generated by Xtext
 */
grammar PsiInternalConcreteTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.grammarinheritance.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.grammarinheritance.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.grammarinheritance.idea.lang.ConcreteTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.grammarinheritance.services.ConcreteTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected ConcreteTestLanguageGrammarAccess grammarAccess;

	protected ConcreteTestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalConcreteTestLanguageParser(PsiBuilder builder, TokenStream input, ConcreteTestLanguageElementTypeProvider elementTypeProvider, ConcreteTestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "RootRule";
	}

}

//Entry rule entryRuleRootRule
entryRuleRootRule:
	{ markComposite(elementTypeProvider.getRootRuleElementType()); }
	ruleRootRule
	{ doneComposite(); }
	EOF;

// Rule RootRule
ruleRootRule@init {
}
@after {
}:
	(
		{
			markComposite(elementTypeProvider.getRootRule_ConcreteParserRuleParserRuleCall_0ElementType());
		}
		ruleConcreteParserRule
		{
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getRootRule_CallOverridenParserRuleParserRuleCall_1ElementType());
		}
		ruleCallOverridenParserRule
		{
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getRootRule_CallExtendedParserRuleParserRuleCall_2ElementType());
		}
		ruleCallExtendedParserRule
		{
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getRootRule_OverridableParserRule2ParserRuleCall_3ElementType());
		}
		ruleOverridableParserRule2
		{
			doneComposite();
		}
	)
;

//Entry rule entryRuleConcreteParserRule
entryRuleConcreteParserRule:
	{ markComposite(elementTypeProvider.getConcreteParserRuleElementType()); }
	ruleConcreteParserRule
	{ doneComposite(); }
	EOF;

// Rule ConcreteParserRule
ruleConcreteParserRule@init {
}
@after {
}:
	(
		{
			markLeaf();
		}
		otherlv_0='model'
		{
			doneLeaf(otherlv_0, elementTypeProvider.getConcreteParserRule_ModelKeyword_0ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				lv_magicNumber_1_0=RULE_REAL
				{
					doneLeaf(lv_magicNumber_1_0, elementTypeProvider.getConcreteParserRule_MagicNumberREALTerminalRuleCall_1_0ElementType());
				}
			)
		)
		{
			markLeaf();
		}
		otherlv_2=':'
		{
			doneLeaf(otherlv_2, elementTypeProvider.getConcreteParserRule_ColonKeyword_2ElementType());
		}
		(
			(
				{
					markComposite(elementTypeProvider.getConcreteParserRule_ElementsInheritedParserRuleParserRuleCall_3_0ElementType());
				}
				lv_elements_3_0=ruleInheritedParserRule
				{
					doneComposite();
				}
			)
		)*
	)
;

//Entry rule entryRuleOverridableParserRule
entryRuleOverridableParserRule:
	{ markComposite(elementTypeProvider.getOverridableParserRuleElementType()); }
	ruleOverridableParserRule
	{ doneComposite(); }
	EOF;

// Rule OverridableParserRule
ruleOverridableParserRule@init {
}
@after {
}:
	(
		{
			markLeaf();
		}
		otherlv_0='overriddenelement'
		{
			doneLeaf(otherlv_0, elementTypeProvider.getOverridableParserRule_OverriddenelementKeyword_0ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				lv_name_1_0=RULE_ID
				{
					doneLeaf(lv_name_1_0, elementTypeProvider.getOverridableParserRule_NameIDTerminalRuleCall_1_0ElementType());
				}
			)
		)
	)
;

//Entry rule entryRuleCallOverridenParserRule
entryRuleCallOverridenParserRule:
	{ markComposite(elementTypeProvider.getCallOverridenParserRuleElementType()); }
	ruleCallOverridenParserRule
	{ doneComposite(); }
	EOF;

// Rule CallOverridenParserRule
ruleCallOverridenParserRule@init {
}
@after {
}:
	(
		(
			{
				markComposite(elementTypeProvider.getCallOverridenParserRule_CallAbstractCallOverridenParserRuleParserRuleCall_0ElementType());
			}
			lv_call_0_0=ruleAbstractCallOverridenParserRule
			{
				doneComposite();
			}
		)
	)
;

//Entry rule entryRuleOverridableParserRule2
entryRuleOverridableParserRule2:
	{ markComposite(elementTypeProvider.getOverridableParserRule2ElementType()); }
	ruleOverridableParserRule2
	{ doneComposite(); }
	EOF;

// Rule OverridableParserRule2
ruleOverridableParserRule2@init {
}
@after {
}:
	(
		{
			markLeaf();
		}
		otherlv_0='overridden other element'
		{
			doneLeaf(otherlv_0, elementTypeProvider.getOverridableParserRule2_OverriddenOtherElementKeyword_0ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				lv_name_1_0=RULE_ID
				{
					doneLeaf(lv_name_1_0, elementTypeProvider.getOverridableParserRule2_NameIDTerminalRuleCall_1_0ElementType());
				}
			)
		)
		{
			markLeaf();
		}
		otherlv_2='-'
		{
			doneLeaf(otherlv_2, elementTypeProvider.getOverridableParserRule2_HyphenMinusKeyword_2ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				lv_age_3_0=RULE_INT
				{
					doneLeaf(lv_age_3_0, elementTypeProvider.getOverridableParserRule2_AgeINTTerminalRuleCall_3_0ElementType());
				}
			)
		)
	)
;

//Entry rule entryRuleExtendableParserRule
entryRuleExtendableParserRule:
	{ markComposite(elementTypeProvider.getExtendableParserRuleElementType()); }
	ruleExtendableParserRule
	{ doneComposite(); }
	EOF;

// Rule ExtendableParserRule
ruleExtendableParserRule@init {
}
@after {
}:
	(
		{
			markComposite(elementTypeProvider.getExtendableParserRule_Subrule1ParserRuleCall_0ElementType());
		}
		ruleSubrule1
		{
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getExtendableParserRule_Subrule2ParserRuleCall_1ElementType());
		}
		ruleSubrule2
		{
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getExtendableParserRule_Subrule3ParserRuleCall_2ElementType());
		}
		ruleSubrule3
		{
			doneComposite();
		}
	)
;

//Entry rule entryRuleSubrule1
entryRuleSubrule1:
	{ markComposite(elementTypeProvider.getSubrule1ElementType()); }
	ruleSubrule1
	{ doneComposite(); }
	EOF;

// Rule Subrule1
ruleSubrule1@init {
}
@after {
}:
	(
		{
			markLeaf();
		}
		otherlv_0='subrule1'
		{
			doneLeaf(otherlv_0, elementTypeProvider.getSubrule1_Subrule1Keyword_0ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				lv_name_1_0=RULE_ID
				{
					doneLeaf(lv_name_1_0, elementTypeProvider.getSubrule1_NameIDTerminalRuleCall_1_0ElementType());
				}
			)
		)
		(
			(
				{
					markLeaf();
				}
				lv_sub1_2_0=RULE_ID
				{
					doneLeaf(lv_sub1_2_0, elementTypeProvider.getSubrule1_Sub1IDTerminalRuleCall_2_0ElementType());
				}
			)
		)
	)
;

//Entry rule entryRuleSubrule2
entryRuleSubrule2:
	{ markComposite(elementTypeProvider.getSubrule2ElementType()); }
	ruleSubrule2
	{ doneComposite(); }
	EOF;

// Rule Subrule2
ruleSubrule2@init {
}
@after {
}:
	(
		{
			markLeaf();
		}
		otherlv_0='subrule3'
		{
			doneLeaf(otherlv_0, elementTypeProvider.getSubrule2_Subrule3Keyword_0ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				lv_name_1_0=RULE_ID
				{
					doneLeaf(lv_name_1_0, elementTypeProvider.getSubrule2_NameIDTerminalRuleCall_1_0ElementType());
				}
			)
		)
		(
			(
				{
					markLeaf();
				}
				lv_sub2_2_0=RULE_STRING
				{
					doneLeaf(lv_sub2_2_0, elementTypeProvider.getSubrule2_Sub2STRINGTerminalRuleCall_2_0ElementType());
				}
			)
		)
	)
;

//Entry rule entryRuleSubrule3
entryRuleSubrule3:
	{ markComposite(elementTypeProvider.getSubrule3ElementType()); }
	ruleSubrule3
	{ doneComposite(); }
	EOF;

// Rule Subrule3
ruleSubrule3@init {
}
@after {
}:
	(
		{
			markLeaf();
		}
		otherlv_0='subrule3'
		{
			doneLeaf(otherlv_0, elementTypeProvider.getSubrule3_Subrule3Keyword_0ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				lv_name_1_0=RULE_ID
				{
					doneLeaf(lv_name_1_0, elementTypeProvider.getSubrule3_NameIDTerminalRuleCall_1_0ElementType());
				}
			)
		)
		(
			(
				{
					markLeaf();
				}
				lv_sub1_2_0=RULE_INT
				{
					doneLeaf(lv_sub1_2_0, elementTypeProvider.getSubrule3_Sub1INTTerminalRuleCall_2_0ElementType());
				}
			)
		)
	)
;

//Entry rule entryRuleCallExtendedParserRule
entryRuleCallExtendedParserRule:
	{ markComposite(elementTypeProvider.getCallExtendedParserRuleElementType()); }
	ruleCallExtendedParserRule
	{ doneComposite(); }
	EOF;

// Rule CallExtendedParserRule
ruleCallExtendedParserRule@init {
}
@after {
}:
	(
		(
			{
				markComposite(elementTypeProvider.getCallExtendedParserRule_CallAbstractCallExtendedParserRuleParserRuleCall_0ElementType());
			}
			lv_call_0_0=ruleAbstractCallExtendedParserRule
			{
				doneComposite();
			}
		)
	)
;

//Entry rule entryRuleInheritedParserRule
entryRuleInheritedParserRule:
	{ markComposite(elementTypeProvider.getInheritedParserRuleElementType()); }
	ruleInheritedParserRule
	{ doneComposite(); }
	EOF;

// Rule InheritedParserRule
ruleInheritedParserRule@init {
}
@after {
}:
	(
		{
			markLeaf();
		}
		otherlv_0='element'
		{
			doneLeaf(otherlv_0, elementTypeProvider.getInheritedParserRule_ElementKeyword_0ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				lv_name_1_0=RULE_ID
				{
					doneLeaf(lv_name_1_0, elementTypeProvider.getInheritedParserRule_NameIDTerminalRuleCall_1_0ElementType());
				}
			)
		)
	)
;

//Entry rule entryRuleAbstractCallOverridenParserRule
entryRuleAbstractCallOverridenParserRule:
	{ markComposite(elementTypeProvider.getAbstractCallOverridenParserRuleElementType()); }
	ruleAbstractCallOverridenParserRule
	{ doneComposite(); }
	EOF;

// Rule AbstractCallOverridenParserRule
ruleAbstractCallOverridenParserRule@init {
}
@after {
}:
	(
		{
			markLeaf();
		}
		otherlv_0='overridemodel'
		{
			doneLeaf(otherlv_0, elementTypeProvider.getAbstractCallOverridenParserRule_OverridemodelKeyword_0ElementType());
		}
		(
			(
				{
					markComposite(elementTypeProvider.getAbstractCallOverridenParserRule_ElementsOverridableParserRuleParserRuleCall_1_0ElementType());
				}
				lv_elements_1_0=ruleOverridableParserRule
				{
					doneComposite();
				}
			)
		)*
	)
;

//Entry rule entryRuleAbstractCallExtendedParserRule
entryRuleAbstractCallExtendedParserRule:
	{ markComposite(elementTypeProvider.getAbstractCallExtendedParserRuleElementType()); }
	ruleAbstractCallExtendedParserRule
	{ doneComposite(); }
	EOF;

// Rule AbstractCallExtendedParserRule
ruleAbstractCallExtendedParserRule@init {
}
@after {
}:
	(
		{
			markLeaf();
		}
		otherlv_0='extendedmodel'
		{
			doneLeaf(otherlv_0, elementTypeProvider.getAbstractCallExtendedParserRule_ExtendedmodelKeyword_0ElementType());
		}
		(
			(
				{
					markComposite(elementTypeProvider.getAbstractCallExtendedParserRule_ElementsExtendableParserRuleParserRuleCall_1_0ElementType());
				}
				lv_elements_1_0=ruleExtendableParserRule
				{
					doneComposite();
				}
			)
		)*
	)
;

RULE_REAL : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'\u00F6'|'\u00E4'|'\u00FC'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
