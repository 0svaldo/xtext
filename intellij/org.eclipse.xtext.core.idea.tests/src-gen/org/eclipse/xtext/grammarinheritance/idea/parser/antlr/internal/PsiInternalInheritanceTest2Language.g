/*
 * generated by Xtext
 */
grammar PsiInternalInheritanceTest2Language;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.grammarinheritance.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.grammarinheritance.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.grammarinheritance.idea.lang.InheritanceTest2LanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.grammarinheritance.services.InheritanceTest2LanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected InheritanceTest2LanguageGrammarAccess grammarAccess;

	protected InheritanceTest2LanguageElementTypeProvider elementTypeProvider;

	public PsiInternalInheritanceTest2LanguageParser(PsiBuilder builder, TokenStream input, InheritanceTest2LanguageElementTypeProvider elementTypeProvider, InheritanceTest2LanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Model";
	}

}

//Entry rule entryRuleModel
entryRuleModel:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	ruleModel
	{ doneComposite(); }
	EOF;

// Rule Model
ruleModel@init {
}
@after {
}:
	(
		{
			markLeaf();
		}
		otherlv_0='model'
		{
			doneLeaf(otherlv_0, elementTypeProvider.getModel_ModelKeyword_0ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				lv_name_1_0=RULE_ID
				{
					doneLeaf(lv_name_1_0, elementTypeProvider.getModel_NameIDTerminalRuleCall_1_0ElementType());
				}
			)
		)
		{
			markLeaf();
		}
		otherlv_2='{'
		{
			doneLeaf(otherlv_2, elementTypeProvider.getModel_LeftCurlyBracketKeyword_2ElementType());
		}
		(
			(
				{
					markComposite(elementTypeProvider.getModel_ElementsElementParserRuleCall_3_0ElementType());
				}
				lv_elements_3_0=ruleElement
				{
					doneComposite();
				}
			)
		)*
		(
			(
				{
					markComposite(elementTypeProvider.getModel_IdsFQNParserRuleCall_4_0ElementType());
				}
				lv_ids_4_0=ruleFQN
				{
					doneComposite();
				}
			)
		)
		{
			markLeaf();
		}
		otherlv_5='}'
		{
			doneLeaf(otherlv_5, elementTypeProvider.getModel_RightCurlyBracketKeyword_5ElementType());
		}
	)
;

//Entry rule entryRuleElement
entryRuleElement:
	{ markComposite(elementTypeProvider.getElementElementType()); }
	ruleElement
	{ doneComposite(); }
	EOF;

// Rule Element
ruleElement@init {
}
@after {
}:
	(
		{
			markLeaf();
		}
		otherlv_0='element'
		{
			doneLeaf(otherlv_0, elementTypeProvider.getElement_ElementKeyword_0ElementType());
		}
		(
			(
				{
					markLeaf();
				}
				lv_name_1_0=RULE_ID
				{
					doneLeaf(lv_name_1_0, elementTypeProvider.getElement_NameIDTerminalRuleCall_1_0ElementType());
				}
			)
		)
	)
;

//Entry rule entryRuleFQN
entryRuleFQN:
	{ markComposite(elementTypeProvider.getFQNElementType()); }
	ruleFQN
	{ doneComposite(); }
	EOF;

// Rule FQN
ruleFQN@init {
}
@after {
}:
	(
		{
			markLeaf();
		}
		this_ID_0=RULE_ID
		{
			doneLeaf(this_ID_0, elementTypeProvider.getFQN_IDTerminalRuleCall_0ElementType());
		}
		(
			{
				markLeaf();
			}
			kw='.'
			{
				doneLeaf(kw, elementTypeProvider.getFQN_FullStopKeyword_1_0ElementType());
			}
			{
				markLeaf();
			}
			this_ID_2=RULE_ID
			{
				doneLeaf(this_ID_2, elementTypeProvider.getFQN_IDTerminalRuleCall_1_1ElementType());
			}
		)*
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
