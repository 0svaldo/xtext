package generator.xtend;

import generator.xtend.AbstractXtendWebsite;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class Index extends AbstractXtendWebsite {
  public String path() {
    return "index.html";
  }
  
  protected boolean isPrettyPrint() {
    return true;
  }
  
  public CharSequence quickLinksAndTweets() {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _quickLinksAndTweets = super.quickLinksAndTweets();
    _builder.append(_quickLinksAndTweets, "");
    _builder.newLineIfNotEmpty();
    _builder.append("<a href=\"http://dryicons.com/\">Icons by http://dryicons.com</a>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contents() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!--Container-->");
    _builder.newLine();
    _builder.newLine();
    _builder.append("<div id=\"header_wrapper\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<div class=\"container\"> ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<div class=\"flexslider image-slider\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<div class=\"span5 slide\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<h2>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("It\'s just Java");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</h2>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<br />");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<p>Xtend is a little language that compiles ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("into idiomatic Java source code. ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("You can use any existing Java library seamlessly ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("from Xtend (and vice-versa). The compiled output is readable ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("and pretty-printed, and tends to run as fast or faster than the equivalent");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("handwritten Java code.</p>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<a href=\"download.html\" class=\"btn_download\"></a>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<a href=\"documentation.html\" class=\"btn_documentation\"></a>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<div class=\"span6\">");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<div class=\"introduction\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<a href=\"#\"><img src=\"images/title-screenshot.png\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("alt=\"Xtend Screencast\" style=\"margin:40pt;\"/></a> ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<a href=\"http://vimeo.com/31248257\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("data-rel=\"prettyPhoto\" title=\"Introduction\" class=\"zoom zoom_icon\"></a>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("<div id=\"intro\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<div class=\"container\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<h1>What is Xtend?</h1>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<p>Xtend is a statically-typed programming language which <strong>compiles to comprehensible Java source code</strong>.</p>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<p>It is designed to work great with existing Java APIs and idioms, yet introduces new features to modernize Java applications.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("It\'s <strong>faster than Groovy</strong>, <strong>simpler than Scala</strong> and incorporates all <strong>benefits of Java</strong> such as <strong>great tool support</strong>.</p>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<p>Xtend is implemented on top of <a href=\"http://xtext.org\" style=\" color : white; \">Xtext</a></p>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("<div id=\"features\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<div class=\"container\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<div class=\"span12\">");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<br /> <br />");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<h1>6 Good Reasons to use Xtend</h1>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<br />");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t\t\t");
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("<p>");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("Xtend removes all the unnecessary syntactical noise: No semicolons, ");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("no empty parentheses, good default visibility.<br/><br/>");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("<strong>Whitespace can be so beautiful!</strong>");
    _builder_1.newLine();
    _builder_1.append("</p>");
    _builder_1.newLine();
    CharSequence _entry = this.entry("Less Noise", _builder_1.toString(), 
      "images/icon-noise.png", 
      "http://vimeo.com/12824833");
    _builder.append(_entry, "			");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("<p>");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("Learn how to enhance existing Java APIs through <a href=\"documentation.html#extensionMethods\">extension methods</a> and <a href=\"documentation.html#lambdas\">lambda expressions</a>.");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("Make use of <a href=\"documentation.html#operators\">operators</a> where you always wanted and <a href=\"documentation.html#switchExpression\">get rid of lengthy instanceof / casting orgies</a> in");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("your existing code.");
    _builder_2.newLine();
    _builder_2.append("</p>");
    _builder_2.newLine();
    CharSequence _entry_1 = this.entry("More Power", _builder_2.toString(), 
      "images/icon-expressive.png", 
      "http://vimeo.com/12824833");
    _builder.append(_entry_1, "			");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("<p>");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("Unlike <strong>all</strong> other JVM-languages, Xtend resembles Java\'s type system without any compromises");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("or cheap short-cuts. This guarantees that <strong>you won\'t run into any interoperability caveats</strong>. Integration with Java");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("works as expected in both directions and the generated code runs as fast as or faster than hand-written Java.");
    _builder_3.newLine();
    _builder_3.append("</p>");
    _builder_3.newLine();
    CharSequence _entry_2 = this.entry("100% Java Compatible", _builder_3.toString(), 
      "images/icon_interop.png", 
      "http://vimeo.com/12824833");
    _builder.append(_entry_2, "			");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("<p>");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("Static typing is not only important for early error detection but even more so for top-notch IDE support.");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("To ensure a great and holistic user experience, the IDE and the language has been designed side by side. And of course");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("the tools integrate tightly with Eclipse\'s existing Java IDE.");
    _builder_4.newLine();
    _builder_4.append("</p>");
    _builder_4.newLine();
    CharSequence _entry_3 = this.entry("Better Tooling", _builder_4.toString(), 
      "images/icon-tools.png", 
      "http://vimeo.com/12824833");
    _builder.append(_entry_3, "			");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append("<p>");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("Xtend leverages existing Java concepts and adds modern language features on top.");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("Unlike other JVM-Languages like Scala, Xtend doesn\'t add a whole new type system because this");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("would cause interoperability issues and make the language harder to learn for Java developers.");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("If you know Java you already know most of Xtend. ");
    _builder_5.newLine();
    _builder_5.append("</p>");
    _builder_5.newLine();
    CharSequence _entry_4 = this.entry("Easy to Learn", _builder_5.toString(), 
      "images/icon_simple.png", 
      "http://vimeo.com/12824833");
    _builder.append(_entry_4, "			");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    StringConcatenation _builder_6 = new StringConcatenation();
    _builder_6.append("<p>");
    _builder_6.newLine();
    _builder_6.append("\t");
    _builder_6.append("Xtend not only resembles the type system to ensure 100% interoperability, it also generates comprehensible Java source code.");
    _builder_6.newLine();
    _builder_6.append("\t");
    _builder_6.append("This not only allows to run the code on platforms such as GWT, which doesn\'t understand bytecode, but also lets you see how certain language");
    _builder_6.newLine();
    _builder_6.append("\t");
    _builder_6.append("constructs are translated to idiomatic Java source code.");
    _builder_6.newLine();
    _builder_6.append("</p>");
    _builder_6.newLine();
    CharSequence _entry_5 = this.entry("Still Java", _builder_6.toString(), 
      "images/icon-java.png", 
      "http://vimeo.com/12824833");
    _builder.append(_entry_5, "			");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence comparison() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div id=\"comparison\">");
    _builder.newLine();
    _builder.append("<div class=\"container\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<div class=\"span12\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<br/> <br/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<h1 align=\"center\">Code Comparison</h1>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<br/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<table class=\"span12 table table-striped\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<thead>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<tr>");
    _builder.newLine();
    _builder.append("\t\t\t  ");
    _builder.append("<th style=\"width:20%;\"></th>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<th style=\"width:40%;\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<h2 style=\"text-align:center;\">Xtend</h2>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("</th>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<th style=\"width:40%;\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<h2 style=\"text-align:center;\">Java</h2>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("</th>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</tr>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</thead>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<tbody>");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("myStrings.filter[ length > 5 ]");
    _builder_1.newLine();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("Iterables.filter(myStrings, new Predicate<String>() {");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("public boolean apply(String it) {");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("return it.length() > 5;");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("});");
    _builder_2.newLine();
    CharSequence _compare = this.compare("Google Guava", _builder_1.toString(), _builder_2.toString());
    _builder.append(_compare, "");
    _builder.newLineIfNotEmpty();
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("myStrings.filter[ length > 5 ]");
    _builder_3.newLine();
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("Iterables.filter(myStrings, new Predicate<String>() {");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("public boolean apply(String it) {");
    _builder_4.newLine();
    _builder_4.append("\t\t");
    _builder_4.append("return it.length() > 5;");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.append("}");
    _builder_4.newLine();
    CharSequence _compare_1 = this.compare("Java FX", _builder_3.toString(), _builder_4.toString());
    _builder.append(_compare_1, "");
    _builder.newLineIfNotEmpty();
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append("myStrings.filter[ length > 5 ]");
    _builder_5.newLine();
    StringConcatenation _builder_6 = new StringConcatenation();
    _builder_6.append("Iterables.filter(myStrings, new Predicate<String>() {");
    _builder_6.newLine();
    _builder_6.append("\t");
    _builder_6.append("public boolean apply(String it) {");
    _builder_6.newLine();
    _builder_6.append("\t\t");
    _builder_6.append("return it.length() > 5;");
    _builder_6.newLine();
    _builder_6.append("\t");
    _builder_6.append("}");
    _builder_6.newLine();
    _builder_6.append("}");
    _builder_6.newLine();
    CharSequence _compare_2 = this.compare("Android", _builder_5.toString(), _builder_6.toString());
    _builder.append(_compare_2, "");
    _builder.newLineIfNotEmpty();
    StringConcatenation _builder_7 = new StringConcatenation();
    _builder_7.append("myStrings.filter[ length > 5 ]");
    _builder_7.newLine();
    StringConcatenation _builder_8 = new StringConcatenation();
    _builder_8.append("Iterables.filter(myStrings, new Predicate<String>() {");
    _builder_8.newLine();
    _builder_8.append("\t");
    _builder_8.append("public boolean apply(String it) {");
    _builder_8.newLine();
    _builder_8.append("\t\t");
    _builder_8.append("return it.length() > 5;");
    _builder_8.newLine();
    _builder_8.append("\t");
    _builder_8.append("}");
    _builder_8.newLine();
    _builder_8.append("}");
    _builder_8.newLine();
    CharSequence _compare_3 = this.compare("GWT", _builder_7.toString(), _builder_8.toString());
    _builder.append(_compare_3, "");
    _builder.newLineIfNotEmpty();
    StringConcatenation _builder_9 = new StringConcatenation();
    _builder_9.append("myStrings.filter[ length > 5 ]");
    _builder_9.newLine();
    StringConcatenation _builder_10 = new StringConcatenation();
    _builder_10.append("Iterables.filter(myStrings, new Predicate<String>() {");
    _builder_10.newLine();
    _builder_10.append("\t");
    _builder_10.append("public boolean apply(String it) {");
    _builder_10.newLine();
    _builder_10.append("\t\t");
    _builder_10.append("return it.length() > 5;");
    _builder_10.newLine();
    _builder_10.append("\t");
    _builder_10.append("}");
    _builder_10.newLine();
    _builder_10.append("});");
    _builder_10.newLine();
    CharSequence _compare_4 = this.compare("Java EE", _builder_9.toString(), _builder_10.toString());
    _builder.append(_compare_4, "");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("</tbody>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</table>");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compare(final String framework, final String xtendCode, final String javaCode) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<tr>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<td><h2>");
    _builder.append(framework, "		");
    _builder.append("</h2></td>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("<td class=\"code\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<pre class=\"prettyprint lang-Xtend\" >");
    _builder.newLine();
    String _trim = xtendCode.trim();
    _builder.append(_trim, "");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</td>");
    _builder.newLine();
    _builder.append("\t \t");
    _builder.append("<td class=\"code\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<pre class=\"prettyprint lang-Java\" >");
    _builder.newLine();
    String _trim_1 = javaCode.trim();
    _builder.append(_trim_1, "");
    _builder.append("</pre>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t \t");
    _builder.append("</td>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</tr>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence entry(final String title, final String description, final String imgSrc, final String imgRef) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div class=\"span6 float\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<div class=\"thumb\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<img class=\"screenshot\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("src=\"");
    _builder.append(imgSrc, "			");
    _builder.append("\" alt=\"Image\" />");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<h4>");
    _builder.append(title, "	");
    _builder.append("</h4>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append(description, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("</div>");
    _builder.newLine();
    return _builder;
  }
}
