/*
* generated by Xtext
*/
package org.eclipse.xtext.crossrefs.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.crossrefs.services.LangATestLanguageGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 

import org.eclipse.xtext.crossrefs.parser.packrat.consumers.LangATestLanguageMainConsumer;
import org.eclipse.xtext.crossrefs.parser.packrat.consumers.LangATestLanguageImportConsumer;
import org.eclipse.xtext.crossrefs.parser.packrat.consumers.LangATestLanguageTypeConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class LangATestLanguageParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 

    private LangATestLanguageMainConsumer mainConsumer;
    private LangATestLanguageImportConsumer importConsumer;
    private LangATestLanguageTypeConsumer typeConsumer;

	private LangATestLanguageGrammarAccess grammarAccess;

	public LangATestLanguageParserConfiguration(IInternalParserConfiguration configuration, LangATestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public LangATestLanguageMainConsumer getRootConsumer() {
		return mainConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		mainConsumer = new LangATestLanguageMainConsumer(
    		this, null
    	);
		importConsumer = new LangATestLanguageImportConsumer(
    		this, null
    	);
		typeConsumer = new LangATestLanguageTypeConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getMainConsumer().setRule(grammarAccess.prMain());
		getImportConsumer().setRule(grammarAccess.prImport());
		getTypeConsumer().setRule(grammarAccess.prType());
		getIdConsumer().setRule(grammarAccess.prID());
		getIntConsumer().setRule(grammarAccess.prINT());
		getStringConsumer().setRule(grammarAccess.prSTRING());
		getMlCommentConsumer().setRule(grammarAccess.prML_COMMENT());
		getSlCommentConsumer().setRule(grammarAccess.prSL_COMMENT());
		getWsConsumer().setRule(grammarAccess.prWS());
		getAnyOtherConsumer().setRule(grammarAccess.prANY_OTHER());


		getMainConsumer().setImportConsumer(getImportConsumer());
		getMainConsumer().setTypeConsumer(getTypeConsumer());

		getImportConsumer().setStringConsumer(getStringConsumer());

		getTypeConsumer().setIdConsumer(getIdConsumer());

		getImportConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.crossrefs.parser.packrat.LangATestLanguageDelimiters.keyword$11$Delimiter);
		getImportConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.crossrefs.parser.packrat.LangATestLanguageDelimiters.ruleCall$13$Delimiter);
		getTypeConsumer().setCrossReference$9$Delimiter(org.eclipse.xtext.crossrefs.parser.packrat.LangATestLanguageDelimiters.ruleCall$21$Delimiter);
		getTypeConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.crossrefs.parser.packrat.LangATestLanguageDelimiters.keyword$11$Delimiter);
		getTypeConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.crossrefs.parser.packrat.LangATestLanguageDelimiters.keyword$11$Delimiter);
		getTypeConsumer().setRuleCall$6$Delimiter(org.eclipse.xtext.crossrefs.parser.packrat.LangATestLanguageDelimiters.ruleCall$21$Delimiter);
	}
	
	// TODO collect superGrammars transitive
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public LangATestLanguageMainConsumer getMainConsumer() {
    	return mainConsumer;
    }

    public LangATestLanguageImportConsumer getImportConsumer() {
    	return importConsumer;
    }

    public LangATestLanguageTypeConsumer getTypeConsumer() {
    	return typeConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
