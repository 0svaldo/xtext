/*
* generated by Xtext
*/
package org.eclipse.xtext.crossrefs.lazy.parseTreeConstruction;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;
import org.eclipse.xtext.crossrefs.lazy.services.LazyLinkingTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class LazyLinkingTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private LazyLinkingTestLanguageGrammarAccess grammarAccess;
	
	@Override
	protected Solution internalSerialize(EObject obj) {
		IInstanceDescription inst = getDescr(obj);
		Solution s;
		if(inst.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier()) && (s = new Model_Assignment_types(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier()) && (s = new Type_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getPropertyRule().getType().getClassifier()) && (s = new Property_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		return null;
	}
	

/************ begin Rule Model ****************
 *
 * Model:
 *   (types+=Type)*;
 *
 **/

// (types+=Type)*
protected class Model_Assignment_types extends AssignmentToken  {
	
	public Model_Assignment_types(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getTypesAssignment();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("types",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("types");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) {
				Solution s = new Type_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

/************ end Rule Model ****************/


/************ begin Rule Type ****************
 *
 * Type:
 *   "type" name=ID ("extends" extends=[Type] "." parentId=[Property])? ("for" parentId=[Property] "in" extends=[Type])? "{" (properties+=Property)* "}";
 *
 **/

// "type" name=ID ("extends" extends=[Type] "." parentId=[Property])? ("for" parentId=[Property] "in" extends=[Type])? "{" (properties+=Property)* "}"
protected class Type_Group extends GroupToken {
	
	public Type_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTypeAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Type_6_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Type_5_Assignment_properties(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new Type_4_Keyword(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				while(s3 != null) {
					Solution s4 = new Type_3_Group(s3.getCurrent(), s3.getPredecessor()).firstSolution();
					while(s4 != null) {
						Solution s5 = new Type_2_Group(s4.getCurrent(), s4.getPredecessor()).firstSolution();
						while(s5 != null) {
							Solution s6 = new Type_1_Assignment_name(s5.getCurrent(), s5.getPredecessor()).firstSolution();
							while(s6 != null) {
								Solution s7 = new Type_0_Keyword_type(s6.getCurrent(), s6.getPredecessor()).firstSolution();
								if(s7 != null) {
									last = s7.getPredecessor();
									return s7;
								} else {
									s6 = s6.getPredecessor().nextSolution(this,s6);
								}
							}
							s5 = s5.getPredecessor().nextSolution(this,s5);
						}
						s4 = s4.getPredecessor().nextSolution(this,s4);
					}
					s3 = s3.getPredecessor().nextSolution(this,s3);
				}
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "type"
protected class Type_0_Keyword_type extends KeywordToken  {
	
	public Type_0_Keyword_type(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeAccess().getTypeKeyword_0();
	}	
}

// name=ID
protected class Type_1_Assignment_name extends AssignmentToken  {
	
	public Type_1_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeAccess().getNameAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_1_0();
			return new Solution(obj);
		}
		return null;
	}
}

// ("extends" extends=[Type] "." parentId=[Property])?
protected class Type_2_Group extends GroupToken {
	
	public Type_2_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTypeAccess().getGroup_2();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Type_2_3_Assignment_parentId(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Type_2_2_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new Type_2_1_Assignment_extends(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				while(s3 != null) {
					Solution s4 = new Type_2_0_Keyword_extends(s3.getCurrent(), s3.getPredecessor()).firstSolution();
					if(s4 != null) {
						last = s4.getPredecessor();
						return s4;
					} else {
						s3 = s3.getPredecessor().nextSolution(this,s3);
					}
				}
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "extends"
protected class Type_2_0_Keyword_extends extends KeywordToken  {
	
	public Type_2_0_Keyword_extends(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeAccess().getExtendsKeyword_2_0();
	}	
}

// extends=[Type]
protected class Type_2_1_Assignment_extends extends AssignmentToken  {
	
	public Type_2_1_Assignment_extends(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeAccess().getExtendsAssignment_2_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("extends",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("extends");
		if(value instanceof EObject) { // xtext::CrossReference
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeAccess().getExtendsTypeCrossReference_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getTypeAccess().getExtendsTypeCrossReference_2_1_0(); 
				return new Solution(obj);
			}
		}
		return null;
	}
}

// "."
protected class Type_2_2_Keyword extends KeywordToken  {
	
	public Type_2_2_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeAccess().getFullStopKeyword_2_2();
	}	
}

// parentId=[Property]
protected class Type_2_3_Assignment_parentId extends AssignmentToken  {
	
	public Type_2_3_Assignment_parentId(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeAccess().getParentIdAssignment_2_3();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("parentId",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parentId");
		if(value instanceof EObject) { // xtext::CrossReference
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeAccess().getParentIdPropertyCrossReference_2_3_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getTypeAccess().getParentIdPropertyCrossReference_2_3_0(); 
				return new Solution(obj);
			}
		}
		return null;
	}
}


// ("for" parentId=[Property] "in" extends=[Type])?
protected class Type_3_Group extends GroupToken {
	
	public Type_3_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTypeAccess().getGroup_3();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Type_3_3_Assignment_extends(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Type_3_2_Keyword_in(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new Type_3_1_Assignment_parentId(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				while(s3 != null) {
					Solution s4 = new Type_3_0_Keyword_for(s3.getCurrent(), s3.getPredecessor()).firstSolution();
					if(s4 != null) {
						last = s4.getPredecessor();
						return s4;
					} else {
						s3 = s3.getPredecessor().nextSolution(this,s3);
					}
				}
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "for"
protected class Type_3_0_Keyword_for extends KeywordToken  {
	
	public Type_3_0_Keyword_for(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeAccess().getForKeyword_3_0();
	}	
}

// parentId=[Property]
protected class Type_3_1_Assignment_parentId extends AssignmentToken  {
	
	public Type_3_1_Assignment_parentId(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeAccess().getParentIdAssignment_3_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("parentId",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parentId");
		if(value instanceof EObject) { // xtext::CrossReference
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeAccess().getParentIdPropertyCrossReference_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getTypeAccess().getParentIdPropertyCrossReference_3_1_0(); 
				return new Solution(obj);
			}
		}
		return null;
	}
}

// "in"
protected class Type_3_2_Keyword_in extends KeywordToken  {
	
	public Type_3_2_Keyword_in(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeAccess().getInKeyword_3_2();
	}	
}

// extends=[Type]
protected class Type_3_3_Assignment_extends extends AssignmentToken  {
	
	public Type_3_3_Assignment_extends(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeAccess().getExtendsAssignment_3_3();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("extends",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("extends");
		if(value instanceof EObject) { // xtext::CrossReference
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeAccess().getExtendsTypeCrossReference_3_3_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getTypeAccess().getExtendsTypeCrossReference_3_3_0(); 
				return new Solution(obj);
			}
		}
		return null;
	}
}


// "{"
protected class Type_4_Keyword extends KeywordToken  {
	
	public Type_4_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeAccess().getLeftCurlyBracketKeyword_4();
	}	
}

// (properties+=Property)*
protected class Type_5_Assignment_properties extends AssignmentToken  {
	
	public Type_5_Assignment_properties(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeAccess().getPropertiesAssignment_5();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("properties",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("properties");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyRule().getType().getClassifier())) {
				Solution s = new Property_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// "}"
protected class Type_6_Keyword extends KeywordToken  {
	
	public Type_6_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeAccess().getRightCurlyBracketKeyword_6();
	}	
}


/************ end Rule Type ****************/


/************ begin Rule Property ****************
 *
 * Property:
 *   type=[Type] name=ID;
 *
 **/

// type=[Type] name=ID
protected class Property_Group extends GroupToken {
	
	public Property_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPropertyAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Property_1_Assignment_name(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Property_0_Assignment_type(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// type=[Type]
protected class Property_0_Assignment_type extends AssignmentToken  {
	
	public Property_0_Assignment_type(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyAccess().getTypeAssignment_0();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("type",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // xtext::CrossReference
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyAccess().getTypeTypeCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getPropertyAccess().getTypeTypeCrossReference_0_0(); 
				return new Solution(obj);
			}
		}
		return null;
	}
}

// name=ID
protected class Property_1_Assignment_name extends AssignmentToken  {
	
	public Property_1_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyAccess().getNameAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_1_0();
			return new Solution(obj);
		}
		return null;
	}
}


/************ end Rule Property ****************/

}
