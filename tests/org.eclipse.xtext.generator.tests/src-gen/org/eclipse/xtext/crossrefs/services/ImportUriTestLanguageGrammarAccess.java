/*
* generated by Xtext
*/

package org.eclipse.xtext.crossrefs.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ImportUriTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class MainElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment c0AssignmentImports = (Assignment)cGroup.eContents().get(0);
		private final RuleCall c00ParserRuleCallImport = (RuleCall)c0AssignmentImports.eContents().get(0);
		private final Assignment c1AssignmentTypes = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallType = (RuleCall)c1AssignmentTypes.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Assignment ele0AssignmentImports() { return c0AssignmentImports; }

		// not supported
		public RuleCall ele00ParserRuleCallImport() { return c00ParserRuleCallImport; }

		// not supported
		public Assignment ele1AssignmentTypes() { return c1AssignmentTypes; }

		// not supported
		public RuleCall ele10ParserRuleCallType() { return c10ParserRuleCallType; }
	}

	public class ImportElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordImport = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentImportURI = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallSTRING = (RuleCall)c1AssignmentImportURI.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordImport() { return c0KeywordImport; }

		// not supported
		public Assignment ele1AssignmentImportURI() { return c1AssignmentImportURI; }

		// not supported
		public RuleCall ele10TerminalRuleCallSTRING() { return c10TerminalRuleCallSTRING; }
	}

	public class TypeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Keyword c000KeywordType = (Keyword)c00Group.eContents().get(0);
		private final Assignment c001AssignmentName = (Assignment)c00Group.eContents().get(1);
		private final RuleCall c0010TerminalRuleCallID = (RuleCall)c001AssignmentName.eContents().get(0);
		private final Keyword c01KeywordExtends = (Keyword)c0Group.eContents().get(1);
		private final Assignment c1AssignmentExtends = (Assignment)cGroup.eContents().get(1);
		private final CrossReference c10CrossReferenceEStringType = (CrossReference)c1AssignmentExtends.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Keyword ele000KeywordType() { return c000KeywordType; }

		// not supported
		public Assignment ele001AssignmentName() { return c001AssignmentName; }

		// not supported
		public RuleCall ele0010TerminalRuleCallID() { return c0010TerminalRuleCallID; }

		// not supported
		public Keyword ele01KeywordExtends() { return c01KeywordExtends; }

		// not supported
		public Assignment ele1AssignmentExtends() { return c1AssignmentExtends; }

		// not supported
		public CrossReference ele10CrossReferenceEStringType() { return c10CrossReferenceEStringType; }
	}
	
	private MainElements pMain;
	private ImportElements pImport;
	private TypeElements pType;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess terminalsGrammarAccess;

	@Inject
	public ImportUriTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess terminalsGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.terminalsGrammarAccess = terminalsGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return terminalsGrammarAccess;
	}

	
	// not supported
	public MainElements prMain() {
		return (pMain != null) ? pMain : (pMain = new MainElements());
	} 

	// not supported
	public ImportElements prImport() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	} 

	// not supported
	public TypeElements prType() {
		return (pType != null) ? pType : (pType = new TypeElements());
	} 

	// not supported
	public TerminalRule trID() {
		return terminalsGrammarAccess.trID();
	} 

	// not supported
	public TerminalRule trINT() {
		return terminalsGrammarAccess.trINT();
	} 

	// not supported
	public TerminalRule trSTRING() {
		return terminalsGrammarAccess.trSTRING();
	} 

	// not supported
	public TerminalRule trML_COMMENT() {
		return terminalsGrammarAccess.trML_COMMENT();
	} 

	// not supported
	public TerminalRule trSL_COMMENT() {
		return terminalsGrammarAccess.trSL_COMMENT();
	} 

	// not supported
	public TerminalRule trWS() {
		return terminalsGrammarAccess.trWS();
	} 

	// not supported
	public TerminalRule trANY_OTHER() {
		return terminalsGrammarAccess.trANY_OTHER();
	} 
}
