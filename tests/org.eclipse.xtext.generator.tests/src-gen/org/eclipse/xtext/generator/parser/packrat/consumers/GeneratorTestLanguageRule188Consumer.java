/*
* generated by Xtext
*/
package org.eclipse.xtext.generator.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;

import org.eclipse.xtext.generator.services.GeneratorTestLanguageGrammarAccess.Rule188Elements;

public final class GeneratorTestLanguageRule188Consumer extends NonTerminalConsumer {

	private Rule188Elements rule;	

	private INonTerminalConsumer ruleBConsumer;

	private IElementConsumer ruleCall$1$Consumer;

	protected class RuleCall$1$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$1$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(ruleBConsumer, null, false, false, false, getElement(), optional);
		}
	}

	public GeneratorTestLanguageRule188Consumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
	}
	
	@Override
	protected int doConsume() throws Exception {
		return ruleCall$1$Consumer.consume();
	}

	public Rule188Elements getRule() {
		return rule;
	}
	
	public void setRule(Rule188Elements rule) {
		this.rule = rule;
		
		ruleCall$1$Consumer = new RuleCall$1$Consumer(rule.getRuleBParserRuleCall());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setRuleBConsumer(INonTerminalConsumer ruleBConsumer) {
		this.ruleBConsumer = ruleBConsumer;
	}
	
}
