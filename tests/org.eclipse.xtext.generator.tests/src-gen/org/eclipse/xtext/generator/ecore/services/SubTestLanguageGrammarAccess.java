/*
* generated by Xtext
*/

package org.eclipse.xtext.generator.ecore.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.generator.ecore.services.SuperTestLanguageGrammarAccess;

@Singleton
public class SubTestLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SubMainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubMain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSuperMainsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSuperMainsSuperMainParserRuleCall_1_0 = (RuleCall)cSuperMainsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SubMain:
		//  "{" superMains+=SuperMain "}";
		public ParserRule getRule() { return rule; }

		//"{" superMains+=SuperMain "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//superMains+=SuperMain
		public Assignment getSuperMainsAssignment_1() { return cSuperMainsAssignment_1; }

		//SuperMain
		public RuleCall getSuperMainsSuperMainParserRuleCall_1_0() { return cSuperMainsSuperMainParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	
	
	private SubMainElements pSubMain;
	
	private final GrammarProvider grammarProvider;

	private SuperTestLanguageGrammarAccess gaSuperTestLanguage;

	@Inject
	public SubTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		SuperTestLanguageGrammarAccess gaSuperTestLanguage) {
		this.grammarProvider = grammarProvider;
		this.gaSuperTestLanguage = gaSuperTestLanguage;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public SuperTestLanguageGrammarAccess getSuperTestLanguageGrammarAccess() {
		return gaSuperTestLanguage;
	}

	
	//SubMain:
	//  "{" superMains+=SuperMain "}";
	public SubMainElements getSubMainAccess() {
		return (pSubMain != null) ? pSubMain : (pSubMain = new SubMainElements());
	}
	
	public ParserRule getSubMainRule() {
		return getSubMainAccess().getRule();
	}

	//SuperMain:
	//  "super" name=ID;
	public SuperTestLanguageGrammarAccess.SuperMainElements getSuperMainAccess() {
		return gaSuperTestLanguage.getSuperMainAccess();
	}
	
	public ParserRule getSuperMainRule() {
		return getSuperMainAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaSuperTestLanguage.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaSuperTestLanguage.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaSuperTestLanguage.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaSuperTestLanguage.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaSuperTestLanguage.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaSuperTestLanguage.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaSuperTestLanguage.getANY_OTHERRule();
	} 
}
