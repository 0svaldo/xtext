/*
* generated by Xtext
*/
package org.eclipse.xtext.generator.parseTreeConstruction;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor2;

import org.eclipse.xtext.generator.services.GeneratorTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class GeneratorTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor2 {
		
	@Inject
	private GeneratorTestLanguageGrammarAccess grammarAccess;
		
	public GeneratorTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken2 getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			case 1: return new RuleB_YKeyword(this, this, 1, inst);
			case 2: return new Rule1_RuleParserRuleCall(this, this, 2, inst);
			case 3: return new Rule2_RuleParserRuleCall(this, this, 3, inst);
			case 4: return new Rule3_RuleParserRuleCall(this, this, 4, inst);
			case 5: return new Rule4_RuleParserRuleCall(this, this, 5, inst);
			case 6: return new Rule5_RuleParserRuleCall(this, this, 6, inst);
			case 7: return new Rule6_RuleParserRuleCall(this, this, 7, inst);
			case 8: return new Rule7_RuleParserRuleCall(this, this, 8, inst);
			case 9: return new Rule8_RuleParserRuleCall(this, this, 9, inst);
			case 10: return new Rule9_RuleParserRuleCall(this, this, 10, inst);
			case 11: return new Rule10_RuleParserRuleCall(this, this, 11, inst);
			case 12: return new Rule11_RuleParserRuleCall(this, this, 12, inst);
			case 13: return new Rule12_RuleParserRuleCall(this, this, 13, inst);
			case 14: return new Rule13_RuleParserRuleCall(this, this, 14, inst);
			case 15: return new Rule14_RuleParserRuleCall(this, this, 15, inst);
			case 16: return new Rule15_RuleParserRuleCall(this, this, 16, inst);
			case 17: return new Rule16_RuleParserRuleCall(this, this, 17, inst);
			case 18: return new Rule17_RuleParserRuleCall(this, this, 18, inst);
			case 19: return new Rule18_RuleParserRuleCall(this, this, 19, inst);
			case 20: return new Rule19_RuleParserRuleCall(this, this, 20, inst);
			case 21: return new Rule20_RuleParserRuleCall(this, this, 21, inst);
			case 22: return new Rule21_RuleParserRuleCall(this, this, 22, inst);
			case 23: return new Rule22_RuleParserRuleCall(this, this, 23, inst);
			case 24: return new Rule23_RuleParserRuleCall(this, this, 24, inst);
			case 25: return new Rule24_RuleParserRuleCall(this, this, 25, inst);
			case 26: return new Rule25_RuleParserRuleCall(this, this, 26, inst);
			case 27: return new Rule26_RuleParserRuleCall(this, this, 27, inst);
			case 28: return new Rule27_RuleParserRuleCall(this, this, 28, inst);
			case 29: return new Rule28_RuleParserRuleCall(this, this, 29, inst);
			case 30: return new Rule29_RuleParserRuleCall(this, this, 30, inst);
			case 31: return new Rule30_RuleParserRuleCall(this, this, 31, inst);
			case 32: return new Rule31_RuleParserRuleCall(this, this, 32, inst);
			case 33: return new Rule32_RuleParserRuleCall(this, this, 33, inst);
			case 34: return new Rule33_RuleParserRuleCall(this, this, 34, inst);
			case 35: return new Rule34_RuleParserRuleCall(this, this, 35, inst);
			case 36: return new Rule35_RuleParserRuleCall(this, this, 36, inst);
			case 37: return new Rule36_RuleParserRuleCall(this, this, 37, inst);
			case 38: return new Rule37_RuleParserRuleCall(this, this, 38, inst);
			case 39: return new Rule38_RuleParserRuleCall(this, this, 39, inst);
			case 40: return new Rule39_RuleParserRuleCall(this, this, 40, inst);
			case 41: return new Rule40_RuleParserRuleCall(this, this, 41, inst);
			case 42: return new Rule41_RuleParserRuleCall(this, this, 42, inst);
			case 43: return new Rule42_RuleParserRuleCall(this, this, 43, inst);
			case 44: return new Rule43_RuleParserRuleCall(this, this, 44, inst);
			case 45: return new Rule44_RuleParserRuleCall(this, this, 45, inst);
			case 46: return new Rule45_RuleParserRuleCall(this, this, 46, inst);
			case 47: return new Rule46_RuleParserRuleCall(this, this, 47, inst);
			case 48: return new Rule47_RuleParserRuleCall(this, this, 48, inst);
			case 49: return new Rule48_RuleParserRuleCall(this, this, 49, inst);
			case 50: return new Rule49_RuleParserRuleCall(this, this, 50, inst);
			case 51: return new Rule50_RuleParserRuleCall(this, this, 51, inst);
			case 52: return new Rule51_RuleParserRuleCall(this, this, 52, inst);
			case 53: return new Rule52_RuleParserRuleCall(this, this, 53, inst);
			case 54: return new Rule53_RuleParserRuleCall(this, this, 54, inst);
			case 55: return new Rule54_RuleParserRuleCall(this, this, 55, inst);
			case 56: return new Rule55_RuleParserRuleCall(this, this, 56, inst);
			case 57: return new Rule56_RuleParserRuleCall(this, this, 57, inst);
			case 58: return new Rule57_RuleParserRuleCall(this, this, 58, inst);
			case 59: return new Rule58_RuleParserRuleCall(this, this, 59, inst);
			case 60: return new Rule59_RuleParserRuleCall(this, this, 60, inst);
			case 61: return new Rule60_RuleParserRuleCall(this, this, 61, inst);
			case 62: return new Rule61_RuleParserRuleCall(this, this, 62, inst);
			case 63: return new Rule62_RuleParserRuleCall(this, this, 63, inst);
			case 64: return new Rule63_RuleParserRuleCall(this, this, 64, inst);
			case 65: return new Rule64_RuleParserRuleCall(this, this, 65, inst);
			case 66: return new Rule65_RuleParserRuleCall(this, this, 66, inst);
			case 67: return new Rule66_RuleParserRuleCall(this, this, 67, inst);
			case 68: return new Rule67_RuleParserRuleCall(this, this, 68, inst);
			case 69: return new Rule68_RuleParserRuleCall(this, this, 69, inst);
			case 70: return new Rule69_RuleParserRuleCall(this, this, 70, inst);
			case 71: return new Rule70_RuleParserRuleCall(this, this, 71, inst);
			case 72: return new Rule71_RuleParserRuleCall(this, this, 72, inst);
			case 73: return new Rule72_RuleParserRuleCall(this, this, 73, inst);
			case 74: return new Rule73_RuleParserRuleCall(this, this, 74, inst);
			case 75: return new Rule74_RuleParserRuleCall(this, this, 75, inst);
			case 76: return new Rule75_RuleParserRuleCall(this, this, 76, inst);
			case 77: return new Rule76_RuleParserRuleCall(this, this, 77, inst);
			case 78: return new Rule77_RuleParserRuleCall(this, this, 78, inst);
			case 79: return new Rule78_RuleParserRuleCall(this, this, 79, inst);
			case 80: return new Rule79_RuleParserRuleCall(this, this, 80, inst);
			case 81: return new Rule80_RuleParserRuleCall(this, this, 81, inst);
			case 82: return new Rule81_RuleParserRuleCall(this, this, 82, inst);
			case 83: return new Rule82_RuleParserRuleCall(this, this, 83, inst);
			case 84: return new Rule83_RuleParserRuleCall(this, this, 84, inst);
			case 85: return new Rule84_RuleParserRuleCall(this, this, 85, inst);
			case 86: return new Rule85_RuleParserRuleCall(this, this, 86, inst);
			case 87: return new Rule86_RuleParserRuleCall(this, this, 87, inst);
			case 88: return new Rule87_RuleParserRuleCall(this, this, 88, inst);
			case 89: return new Rule88_RuleParserRuleCall(this, this, 89, inst);
			case 90: return new Rule89_RuleParserRuleCall(this, this, 90, inst);
			case 91: return new Rule90_RuleParserRuleCall(this, this, 91, inst);
			case 92: return new Rule91_RuleParserRuleCall(this, this, 92, inst);
			case 93: return new Rule92_RuleParserRuleCall(this, this, 93, inst);
			case 94: return new Rule93_RuleParserRuleCall(this, this, 94, inst);
			case 95: return new Rule94_RuleParserRuleCall(this, this, 95, inst);
			case 96: return new Rule95_RuleParserRuleCall(this, this, 96, inst);
			case 97: return new Rule96_RuleParserRuleCall(this, this, 97, inst);
			case 98: return new Rule97_RuleParserRuleCall(this, this, 98, inst);
			case 99: return new Rule98_RuleParserRuleCall(this, this, 99, inst);
			case 100: return new Rule99_RuleParserRuleCall(this, this, 100, inst);
			case 101: return new Rule100_RuleParserRuleCall(this, this, 101, inst);
			case 102: return new Rule101_RuleParserRuleCall(this, this, 102, inst);
			case 103: return new Rule102_RuleParserRuleCall(this, this, 103, inst);
			case 104: return new Rule103_RuleParserRuleCall(this, this, 104, inst);
			case 105: return new Rule104_RuleParserRuleCall(this, this, 105, inst);
			case 106: return new Rule105_RuleParserRuleCall(this, this, 106, inst);
			case 107: return new Rule106_RuleParserRuleCall(this, this, 107, inst);
			case 108: return new Rule107_RuleParserRuleCall(this, this, 108, inst);
			case 109: return new Rule108_RuleParserRuleCall(this, this, 109, inst);
			case 110: return new Rule109_RuleParserRuleCall(this, this, 110, inst);
			case 111: return new Rule110_RuleParserRuleCall(this, this, 111, inst);
			case 112: return new Rule111_RuleParserRuleCall(this, this, 112, inst);
			case 113: return new Rule112_RuleParserRuleCall(this, this, 113, inst);
			case 114: return new Rule113_RuleParserRuleCall(this, this, 114, inst);
			case 115: return new Rule114_RuleParserRuleCall(this, this, 115, inst);
			case 116: return new Rule115_RuleParserRuleCall(this, this, 116, inst);
			case 117: return new Rule116_RuleParserRuleCall(this, this, 117, inst);
			case 118: return new Rule117_RuleParserRuleCall(this, this, 118, inst);
			case 119: return new Rule118_RuleParserRuleCall(this, this, 119, inst);
			case 120: return new Rule119_RuleParserRuleCall(this, this, 120, inst);
			case 121: return new Rule120_RuleParserRuleCall(this, this, 121, inst);
			case 122: return new Rule121_RuleParserRuleCall(this, this, 122, inst);
			case 123: return new Rule122_RuleParserRuleCall(this, this, 123, inst);
			case 124: return new Rule123_RuleParserRuleCall(this, this, 124, inst);
			case 125: return new Rule124_RuleParserRuleCall(this, this, 125, inst);
			case 126: return new Rule125_RuleBParserRuleCall(this, this, 126, inst);
			case 127: return new Rule126_RuleBParserRuleCall(this, this, 127, inst);
			case 128: return new Rule127_RuleBParserRuleCall(this, this, 128, inst);
			case 129: return new Rule128_RuleBParserRuleCall(this, this, 129, inst);
			case 130: return new Rule129_RuleBParserRuleCall(this, this, 130, inst);
			case 131: return new Rule130_RuleBParserRuleCall(this, this, 131, inst);
			case 132: return new Rule131_RuleBParserRuleCall(this, this, 132, inst);
			case 133: return new Rule132_RuleBParserRuleCall(this, this, 133, inst);
			case 134: return new Rule133_RuleBParserRuleCall(this, this, 134, inst);
			case 135: return new Rule134_RuleBParserRuleCall(this, this, 135, inst);
			case 136: return new Rule135_RuleBParserRuleCall(this, this, 136, inst);
			case 137: return new Rule136_RuleBParserRuleCall(this, this, 137, inst);
			case 138: return new Rule137_RuleBParserRuleCall(this, this, 138, inst);
			case 139: return new Rule138_RuleBParserRuleCall(this, this, 139, inst);
			case 140: return new Rule139_RuleBParserRuleCall(this, this, 140, inst);
			case 141: return new Rule140_RuleBParserRuleCall(this, this, 141, inst);
			case 142: return new Rule141_RuleBParserRuleCall(this, this, 142, inst);
			case 143: return new Rule142_RuleBParserRuleCall(this, this, 143, inst);
			case 144: return new Rule143_RuleBParserRuleCall(this, this, 144, inst);
			case 145: return new Rule144_RuleBParserRuleCall(this, this, 145, inst);
			case 146: return new Rule145_RuleBParserRuleCall(this, this, 146, inst);
			case 147: return new Rule146_RuleBParserRuleCall(this, this, 147, inst);
			case 148: return new Rule147_RuleBParserRuleCall(this, this, 148, inst);
			case 149: return new Rule148_RuleBParserRuleCall(this, this, 149, inst);
			case 150: return new Rule149_RuleBParserRuleCall(this, this, 150, inst);
			case 151: return new Rule150_RuleBParserRuleCall(this, this, 151, inst);
			case 152: return new Rule151_RuleBParserRuleCall(this, this, 152, inst);
			case 153: return new Rule152_RuleBParserRuleCall(this, this, 153, inst);
			case 154: return new Rule153_RuleBParserRuleCall(this, this, 154, inst);
			case 155: return new Rule154_RuleBParserRuleCall(this, this, 155, inst);
			case 156: return new Rule155_RuleBParserRuleCall(this, this, 156, inst);
			case 157: return new Rule156_RuleBParserRuleCall(this, this, 157, inst);
			case 158: return new Rule157_RuleBParserRuleCall(this, this, 158, inst);
			case 159: return new Rule158_RuleBParserRuleCall(this, this, 159, inst);
			case 160: return new Rule159_RuleBParserRuleCall(this, this, 160, inst);
			case 161: return new Rule160_RuleBParserRuleCall(this, this, 161, inst);
			case 162: return new Rule161_RuleBParserRuleCall(this, this, 162, inst);
			case 163: return new Rule162_RuleBParserRuleCall(this, this, 163, inst);
			case 164: return new Rule163_RuleBParserRuleCall(this, this, 164, inst);
			case 165: return new Rule164_RuleBParserRuleCall(this, this, 165, inst);
			case 166: return new Rule165_RuleBParserRuleCall(this, this, 166, inst);
			case 167: return new Rule166_RuleBParserRuleCall(this, this, 167, inst);
			case 168: return new Rule167_RuleBParserRuleCall(this, this, 168, inst);
			case 169: return new Rule168_RuleBParserRuleCall(this, this, 169, inst);
			case 170: return new Rule169_RuleBParserRuleCall(this, this, 170, inst);
			case 171: return new Rule170_RuleBParserRuleCall(this, this, 171, inst);
			case 172: return new Rule171_RuleBParserRuleCall(this, this, 172, inst);
			case 173: return new Rule172_RuleBParserRuleCall(this, this, 173, inst);
			case 174: return new Rule173_RuleBParserRuleCall(this, this, 174, inst);
			case 175: return new Rule174_RuleBParserRuleCall(this, this, 175, inst);
			case 176: return new Rule175_RuleBParserRuleCall(this, this, 176, inst);
			case 177: return new Rule176_RuleBParserRuleCall(this, this, 177, inst);
			case 178: return new Rule177_RuleBParserRuleCall(this, this, 178, inst);
			case 179: return new Rule178_RuleBParserRuleCall(this, this, 179, inst);
			case 180: return new Rule179_RuleBParserRuleCall(this, this, 180, inst);
			case 181: return new Rule180_RuleBParserRuleCall(this, this, 181, inst);
			case 182: return new Rule181_RuleBParserRuleCall(this, this, 182, inst);
			case 183: return new Rule182_RuleBParserRuleCall(this, this, 183, inst);
			case 184: return new Rule183_RuleBParserRuleCall(this, this, 184, inst);
			case 185: return new Rule184_RuleBParserRuleCall(this, this, 185, inst);
			case 186: return new Rule185_RuleBParserRuleCall(this, this, 186, inst);
			case 187: return new Rule186_RuleBParserRuleCall(this, this, 187, inst);
			case 188: return new Rule187_RuleBParserRuleCall(this, this, 188, inst);
			case 189: return new Rule188_RuleBParserRuleCall(this, this, 189, inst);
			case 190: return new Rule189_RuleBParserRuleCall(this, this, 190, inst);
			case 191: return new Rule190_RuleBParserRuleCall(this, this, 191, inst);
			case 192: return new Rule191_RuleBParserRuleCall(this, this, 192, inst);
			case 193: return new Rule192_RuleBParserRuleCall(this, this, 193, inst);
			case 194: return new Rule193_RuleBParserRuleCall(this, this, 194, inst);
			case 195: return new Rule194_RuleBParserRuleCall(this, this, 195, inst);
			case 196: return new Rule195_RuleBParserRuleCall(this, this, 196, inst);
			case 197: return new Rule196_RuleBParserRuleCall(this, this, 197, inst);
			case 198: return new Rule197_RuleBParserRuleCall(this, this, 198, inst);
			case 199: return new Rule198_RuleBParserRuleCall(this, this, 199, inst);
			case 200: return new Rule199_RuleBParserRuleCall(this, this, 200, inst);
			case 201: return new Rule200_RuleBParserRuleCall(this, this, 201, inst);
			case 202: return new Rule201_RuleBParserRuleCall(this, this, 202, inst);
			case 203: return new Rule202_RuleBParserRuleCall(this, this, 203, inst);
			case 204: return new Rule203_RuleBParserRuleCall(this, this, 204, inst);
			case 205: return new Rule204_RuleBParserRuleCall(this, this, 205, inst);
			case 206: return new Rule205_RuleBParserRuleCall(this, this, 206, inst);
			case 207: return new Rule206_RuleBParserRuleCall(this, this, 207, inst);
			case 208: return new Rule207_RuleBParserRuleCall(this, this, 208, inst);
			case 209: return new Rule208_RuleBParserRuleCall(this, this, 209, inst);
			case 210: return new Rule209_RuleBParserRuleCall(this, this, 210, inst);
			case 211: return new Rule210_RuleBParserRuleCall(this, this, 211, inst);
			case 212: return new Rule211_RuleBParserRuleCall(this, this, 212, inst);
			case 213: return new Rule212_RuleBParserRuleCall(this, this, 213, inst);
			case 214: return new Rule213_RuleBParserRuleCall(this, this, 214, inst);
			case 215: return new Rule214_RuleBParserRuleCall(this, this, 215, inst);
			case 216: return new Rule215_RuleBParserRuleCall(this, this, 216, inst);
			case 217: return new Rule216_RuleBParserRuleCall(this, this, 217, inst);
			case 218: return new Rule217_RuleBParserRuleCall(this, this, 218, inst);
			case 219: return new Rule218_RuleBParserRuleCall(this, this, 219, inst);
			case 220: return new Rule219_RuleBParserRuleCall(this, this, 220, inst);
			case 221: return new Rule220_RuleBParserRuleCall(this, this, 221, inst);
			case 222: return new Rule221_RuleBParserRuleCall(this, this, 222, inst);
			case 223: return new Rule222_RuleBParserRuleCall(this, this, 223, inst);
			case 224: return new Rule223_RuleBParserRuleCall(this, this, 224, inst);
			case 225: return new Rule224_RuleBParserRuleCall(this, this, 225, inst);
			case 226: return new Rule225_RuleBParserRuleCall(this, this, 226, inst);
			case 227: return new Rule226_RuleBParserRuleCall(this, this, 227, inst);
			case 228: return new Rule227_RuleBParserRuleCall(this, this, 228, inst);
			case 229: return new Rule228_RuleBParserRuleCall(this, this, 229, inst);
			case 230: return new Rule229_RuleBParserRuleCall(this, this, 230, inst);
			case 231: return new Rule230_RuleBParserRuleCall(this, this, 231, inst);
			case 232: return new Rule231_RuleBParserRuleCall(this, this, 232, inst);
			case 233: return new Rule232_RuleBParserRuleCall(this, this, 233, inst);
			case 234: return new Rule233_RuleBParserRuleCall(this, this, 234, inst);
			case 235: return new Rule234_RuleBParserRuleCall(this, this, 235, inst);
			case 236: return new Rule235_RuleBParserRuleCall(this, this, 236, inst);
			case 237: return new Rule236_RuleBParserRuleCall(this, this, 237, inst);
			case 238: return new Rule237_RuleBParserRuleCall(this, this, 238, inst);
			case 239: return new Rule238_RuleBParserRuleCall(this, this, 239, inst);
			case 240: return new Rule239_RuleBParserRuleCall(this, this, 240, inst);
			case 241: return new Rule240_RuleBParserRuleCall(this, this, 241, inst);
			case 242: return new Rule241_RuleBParserRuleCall(this, this, 242, inst);
			case 243: return new Rule242_RuleBParserRuleCall(this, this, 243, inst);
			case 244: return new Rule243_RuleBParserRuleCall(this, this, 244, inst);
			case 245: return new Rule244_RuleBParserRuleCall(this, this, 245, inst);
			case 246: return new Rule245_RuleBParserRuleCall(this, this, 246, inst);
			case 247: return new Rule246_RuleBParserRuleCall(this, this, 247, inst);
			case 248: return new Rule247_RuleBParserRuleCall(this, this, 248, inst);
			case 249: return new Rule248_RuleBParserRuleCall(this, this, 249, inst);
			case 250: return new Rule249_RuleBParserRuleCall(this, this, 250, inst);
			case 251: return new Rule250_RuleBParserRuleCall(this, this, 251, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Rule ****************
 *
 * Rule:
 *   "x";
 *
 **/

// "x"
protected class Rule_XKeyword extends KeywordToken  {
	
	public Rule_XKeyword(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleAccess().getXKeyword();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index - 0, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		IInstanceDescription inst = tryConsumeVal();
		if(!inst.isConsumed()) return null;
		return inst; 
	}
}

/************ end Rule Rule ****************/


/************ begin Rule RuleB ****************
 *
 * RuleB:
 *   "y";
 *
 **/

// "y"
protected class RuleB_YKeyword extends KeywordToken  {
	
	public RuleB_YKeyword(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleBAccess().getYKeyword();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index - 0, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		IInstanceDescription inst = tryConsumeVal();
		if(!inst.isConsumed()) return null;
		return inst; 
	}
}

/************ end Rule RuleB ****************/


/************ begin Rule Rule1 ****************
 *
 * Rule1:
 *   Rule;
 *
 **/

// Rule
protected class Rule1_RuleParserRuleCall extends RuleCallToken {
	
	public Rule1_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule1Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule1Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule1 ****************/


/************ begin Rule Rule2 ****************
 *
 * Rule2:
 *   Rule;
 *
 **/

// Rule
protected class Rule2_RuleParserRuleCall extends RuleCallToken {
	
	public Rule2_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule2Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule2Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule2 ****************/


/************ begin Rule Rule3 ****************
 *
 * Rule3:
 *   Rule;
 *
 **/

// Rule
protected class Rule3_RuleParserRuleCall extends RuleCallToken {
	
	public Rule3_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule3Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule3Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule3 ****************/


/************ begin Rule Rule4 ****************
 *
 * Rule4:
 *   Rule;
 *
 **/

// Rule
protected class Rule4_RuleParserRuleCall extends RuleCallToken {
	
	public Rule4_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule4Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule4Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule4 ****************/


/************ begin Rule Rule5 ****************
 *
 * Rule5:
 *   Rule;
 *
 **/

// Rule
protected class Rule5_RuleParserRuleCall extends RuleCallToken {
	
	public Rule5_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule5Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule5Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule5 ****************/


/************ begin Rule Rule6 ****************
 *
 * Rule6:
 *   Rule;
 *
 **/

// Rule
protected class Rule6_RuleParserRuleCall extends RuleCallToken {
	
	public Rule6_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule6Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule6Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule6 ****************/


/************ begin Rule Rule7 ****************
 *
 * Rule7:
 *   Rule;
 *
 **/

// Rule
protected class Rule7_RuleParserRuleCall extends RuleCallToken {
	
	public Rule7_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule7Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule7Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule7 ****************/


/************ begin Rule Rule8 ****************
 *
 * Rule8:
 *   Rule;
 *
 **/

// Rule
protected class Rule8_RuleParserRuleCall extends RuleCallToken {
	
	public Rule8_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule8Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule8Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule8 ****************/


/************ begin Rule Rule9 ****************
 *
 * Rule9:
 *   Rule;
 *
 **/

// Rule
protected class Rule9_RuleParserRuleCall extends RuleCallToken {
	
	public Rule9_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule9Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule9Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule9 ****************/


/************ begin Rule Rule10 ****************
 *
 * Rule10:
 *   Rule;
 *
 **/

// Rule
protected class Rule10_RuleParserRuleCall extends RuleCallToken {
	
	public Rule10_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule10Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule10Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule10 ****************/


/************ begin Rule Rule11 ****************
 *
 * Rule11:
 *   Rule;
 *
 **/

// Rule
protected class Rule11_RuleParserRuleCall extends RuleCallToken {
	
	public Rule11_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule11Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule11Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule11 ****************/


/************ begin Rule Rule12 ****************
 *
 * Rule12:
 *   Rule;
 *
 **/

// Rule
protected class Rule12_RuleParserRuleCall extends RuleCallToken {
	
	public Rule12_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule12Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule12Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule12 ****************/


/************ begin Rule Rule13 ****************
 *
 * Rule13:
 *   Rule;
 *
 **/

// Rule
protected class Rule13_RuleParserRuleCall extends RuleCallToken {
	
	public Rule13_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule13Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule13Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule13 ****************/


/************ begin Rule Rule14 ****************
 *
 * Rule14:
 *   Rule;
 *
 **/

// Rule
protected class Rule14_RuleParserRuleCall extends RuleCallToken {
	
	public Rule14_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule14Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule14Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule14 ****************/


/************ begin Rule Rule15 ****************
 *
 * Rule15:
 *   Rule;
 *
 **/

// Rule
protected class Rule15_RuleParserRuleCall extends RuleCallToken {
	
	public Rule15_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule15Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule15Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule15 ****************/


/************ begin Rule Rule16 ****************
 *
 * Rule16:
 *   Rule;
 *
 **/

// Rule
protected class Rule16_RuleParserRuleCall extends RuleCallToken {
	
	public Rule16_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule16Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule16Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule16 ****************/


/************ begin Rule Rule17 ****************
 *
 * Rule17:
 *   Rule;
 *
 **/

// Rule
protected class Rule17_RuleParserRuleCall extends RuleCallToken {
	
	public Rule17_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule17Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule17Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule17 ****************/


/************ begin Rule Rule18 ****************
 *
 * Rule18:
 *   Rule;
 *
 **/

// Rule
protected class Rule18_RuleParserRuleCall extends RuleCallToken {
	
	public Rule18_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule18Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule18Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule18 ****************/


/************ begin Rule Rule19 ****************
 *
 * Rule19:
 *   Rule;
 *
 **/

// Rule
protected class Rule19_RuleParserRuleCall extends RuleCallToken {
	
	public Rule19_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule19Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule19Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule19 ****************/


/************ begin Rule Rule20 ****************
 *
 * Rule20:
 *   Rule;
 *
 **/

// Rule
protected class Rule20_RuleParserRuleCall extends RuleCallToken {
	
	public Rule20_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule20Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule20Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule20 ****************/


/************ begin Rule Rule21 ****************
 *
 * Rule21:
 *   Rule;
 *
 **/

// Rule
protected class Rule21_RuleParserRuleCall extends RuleCallToken {
	
	public Rule21_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule21Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule21Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule21 ****************/


/************ begin Rule Rule22 ****************
 *
 * Rule22:
 *   Rule;
 *
 **/

// Rule
protected class Rule22_RuleParserRuleCall extends RuleCallToken {
	
	public Rule22_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule22Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule22Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule22 ****************/


/************ begin Rule Rule23 ****************
 *
 * Rule23:
 *   Rule;
 *
 **/

// Rule
protected class Rule23_RuleParserRuleCall extends RuleCallToken {
	
	public Rule23_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule23Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule23Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule23 ****************/


/************ begin Rule Rule24 ****************
 *
 * Rule24:
 *   Rule;
 *
 **/

// Rule
protected class Rule24_RuleParserRuleCall extends RuleCallToken {
	
	public Rule24_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule24Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule24Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule24 ****************/


/************ begin Rule Rule25 ****************
 *
 * Rule25:
 *   Rule;
 *
 **/

// Rule
protected class Rule25_RuleParserRuleCall extends RuleCallToken {
	
	public Rule25_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule25Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule25Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule25 ****************/


/************ begin Rule Rule26 ****************
 *
 * Rule26:
 *   Rule;
 *
 **/

// Rule
protected class Rule26_RuleParserRuleCall extends RuleCallToken {
	
	public Rule26_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule26Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule26Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule26 ****************/


/************ begin Rule Rule27 ****************
 *
 * Rule27:
 *   Rule;
 *
 **/

// Rule
protected class Rule27_RuleParserRuleCall extends RuleCallToken {
	
	public Rule27_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule27Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule27Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule27 ****************/


/************ begin Rule Rule28 ****************
 *
 * Rule28:
 *   Rule;
 *
 **/

// Rule
protected class Rule28_RuleParserRuleCall extends RuleCallToken {
	
	public Rule28_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule28Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule28Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule28 ****************/


/************ begin Rule Rule29 ****************
 *
 * Rule29:
 *   Rule;
 *
 **/

// Rule
protected class Rule29_RuleParserRuleCall extends RuleCallToken {
	
	public Rule29_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule29Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule29Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule29 ****************/


/************ begin Rule Rule30 ****************
 *
 * Rule30:
 *   Rule;
 *
 **/

// Rule
protected class Rule30_RuleParserRuleCall extends RuleCallToken {
	
	public Rule30_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule30Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule30Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule30 ****************/


/************ begin Rule Rule31 ****************
 *
 * Rule31:
 *   Rule;
 *
 **/

// Rule
protected class Rule31_RuleParserRuleCall extends RuleCallToken {
	
	public Rule31_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule31Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule31Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule31 ****************/


/************ begin Rule Rule32 ****************
 *
 * Rule32:
 *   Rule;
 *
 **/

// Rule
protected class Rule32_RuleParserRuleCall extends RuleCallToken {
	
	public Rule32_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule32Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule32Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule32 ****************/


/************ begin Rule Rule33 ****************
 *
 * Rule33:
 *   Rule;
 *
 **/

// Rule
protected class Rule33_RuleParserRuleCall extends RuleCallToken {
	
	public Rule33_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule33Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule33Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule33 ****************/


/************ begin Rule Rule34 ****************
 *
 * Rule34:
 *   Rule;
 *
 **/

// Rule
protected class Rule34_RuleParserRuleCall extends RuleCallToken {
	
	public Rule34_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule34Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule34Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule34 ****************/


/************ begin Rule Rule35 ****************
 *
 * Rule35:
 *   Rule;
 *
 **/

// Rule
protected class Rule35_RuleParserRuleCall extends RuleCallToken {
	
	public Rule35_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule35Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule35Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule35 ****************/


/************ begin Rule Rule36 ****************
 *
 * Rule36:
 *   Rule;
 *
 **/

// Rule
protected class Rule36_RuleParserRuleCall extends RuleCallToken {
	
	public Rule36_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule36Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule36Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule36 ****************/


/************ begin Rule Rule37 ****************
 *
 * Rule37:
 *   Rule;
 *
 **/

// Rule
protected class Rule37_RuleParserRuleCall extends RuleCallToken {
	
	public Rule37_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule37Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule37Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule37 ****************/


/************ begin Rule Rule38 ****************
 *
 * Rule38:
 *   Rule;
 *
 **/

// Rule
protected class Rule38_RuleParserRuleCall extends RuleCallToken {
	
	public Rule38_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule38Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule38Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule38 ****************/


/************ begin Rule Rule39 ****************
 *
 * Rule39:
 *   Rule;
 *
 **/

// Rule
protected class Rule39_RuleParserRuleCall extends RuleCallToken {
	
	public Rule39_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule39Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule39Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule39 ****************/


/************ begin Rule Rule40 ****************
 *
 * Rule40:
 *   Rule;
 *
 **/

// Rule
protected class Rule40_RuleParserRuleCall extends RuleCallToken {
	
	public Rule40_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule40Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule40Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule40 ****************/


/************ begin Rule Rule41 ****************
 *
 * Rule41:
 *   Rule;
 *
 **/

// Rule
protected class Rule41_RuleParserRuleCall extends RuleCallToken {
	
	public Rule41_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule41Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule41Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule41 ****************/


/************ begin Rule Rule42 ****************
 *
 * Rule42:
 *   Rule;
 *
 **/

// Rule
protected class Rule42_RuleParserRuleCall extends RuleCallToken {
	
	public Rule42_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule42Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule42Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule42 ****************/


/************ begin Rule Rule43 ****************
 *
 * Rule43:
 *   Rule;
 *
 **/

// Rule
protected class Rule43_RuleParserRuleCall extends RuleCallToken {
	
	public Rule43_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule43Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule43Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule43 ****************/


/************ begin Rule Rule44 ****************
 *
 * Rule44:
 *   Rule;
 *
 **/

// Rule
protected class Rule44_RuleParserRuleCall extends RuleCallToken {
	
	public Rule44_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule44Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule44Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule44 ****************/


/************ begin Rule Rule45 ****************
 *
 * Rule45:
 *   Rule;
 *
 **/

// Rule
protected class Rule45_RuleParserRuleCall extends RuleCallToken {
	
	public Rule45_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule45Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule45Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule45 ****************/


/************ begin Rule Rule46 ****************
 *
 * Rule46:
 *   Rule;
 *
 **/

// Rule
protected class Rule46_RuleParserRuleCall extends RuleCallToken {
	
	public Rule46_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule46Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule46Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule46 ****************/


/************ begin Rule Rule47 ****************
 *
 * Rule47:
 *   Rule;
 *
 **/

// Rule
protected class Rule47_RuleParserRuleCall extends RuleCallToken {
	
	public Rule47_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule47Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule47Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule47 ****************/


/************ begin Rule Rule48 ****************
 *
 * Rule48:
 *   Rule;
 *
 **/

// Rule
protected class Rule48_RuleParserRuleCall extends RuleCallToken {
	
	public Rule48_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule48Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule48Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule48 ****************/


/************ begin Rule Rule49 ****************
 *
 * Rule49:
 *   Rule;
 *
 **/

// Rule
protected class Rule49_RuleParserRuleCall extends RuleCallToken {
	
	public Rule49_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule49Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule49Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule49 ****************/


/************ begin Rule Rule50 ****************
 *
 * Rule50:
 *   Rule;
 *
 **/

// Rule
protected class Rule50_RuleParserRuleCall extends RuleCallToken {
	
	public Rule50_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule50Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule50Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule50 ****************/


/************ begin Rule Rule51 ****************
 *
 * Rule51:
 *   Rule;
 *
 **/

// Rule
protected class Rule51_RuleParserRuleCall extends RuleCallToken {
	
	public Rule51_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule51Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule51Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule51 ****************/


/************ begin Rule Rule52 ****************
 *
 * Rule52:
 *   Rule;
 *
 **/

// Rule
protected class Rule52_RuleParserRuleCall extends RuleCallToken {
	
	public Rule52_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule52Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule52Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule52 ****************/


/************ begin Rule Rule53 ****************
 *
 * Rule53:
 *   Rule;
 *
 **/

// Rule
protected class Rule53_RuleParserRuleCall extends RuleCallToken {
	
	public Rule53_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule53Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule53Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule53 ****************/


/************ begin Rule Rule54 ****************
 *
 * Rule54:
 *   Rule;
 *
 **/

// Rule
protected class Rule54_RuleParserRuleCall extends RuleCallToken {
	
	public Rule54_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule54Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule54Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule54 ****************/


/************ begin Rule Rule55 ****************
 *
 * Rule55:
 *   Rule;
 *
 **/

// Rule
protected class Rule55_RuleParserRuleCall extends RuleCallToken {
	
	public Rule55_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule55Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule55Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule55 ****************/


/************ begin Rule Rule56 ****************
 *
 * Rule56:
 *   Rule;
 *
 **/

// Rule
protected class Rule56_RuleParserRuleCall extends RuleCallToken {
	
	public Rule56_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule56Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule56Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule56 ****************/


/************ begin Rule Rule57 ****************
 *
 * Rule57:
 *   Rule;
 *
 **/

// Rule
protected class Rule57_RuleParserRuleCall extends RuleCallToken {
	
	public Rule57_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule57Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule57Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule57 ****************/


/************ begin Rule Rule58 ****************
 *
 * Rule58:
 *   Rule;
 *
 **/

// Rule
protected class Rule58_RuleParserRuleCall extends RuleCallToken {
	
	public Rule58_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule58Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule58Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule58 ****************/


/************ begin Rule Rule59 ****************
 *
 * Rule59:
 *   Rule;
 *
 **/

// Rule
protected class Rule59_RuleParserRuleCall extends RuleCallToken {
	
	public Rule59_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule59Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule59Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule59 ****************/


/************ begin Rule Rule60 ****************
 *
 * Rule60:
 *   Rule;
 *
 **/

// Rule
protected class Rule60_RuleParserRuleCall extends RuleCallToken {
	
	public Rule60_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule60Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule60Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule60 ****************/


/************ begin Rule Rule61 ****************
 *
 * Rule61:
 *   Rule;
 *
 **/

// Rule
protected class Rule61_RuleParserRuleCall extends RuleCallToken {
	
	public Rule61_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule61Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule61Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule61 ****************/


/************ begin Rule Rule62 ****************
 *
 * Rule62:
 *   Rule;
 *
 **/

// Rule
protected class Rule62_RuleParserRuleCall extends RuleCallToken {
	
	public Rule62_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule62Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule62Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule62 ****************/


/************ begin Rule Rule63 ****************
 *
 * Rule63:
 *   Rule;
 *
 **/

// Rule
protected class Rule63_RuleParserRuleCall extends RuleCallToken {
	
	public Rule63_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule63Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule63Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule63 ****************/


/************ begin Rule Rule64 ****************
 *
 * Rule64:
 *   Rule;
 *
 **/

// Rule
protected class Rule64_RuleParserRuleCall extends RuleCallToken {
	
	public Rule64_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule64Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule64Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule64 ****************/


/************ begin Rule Rule65 ****************
 *
 * Rule65:
 *   Rule;
 *
 **/

// Rule
protected class Rule65_RuleParserRuleCall extends RuleCallToken {
	
	public Rule65_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule65Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule65Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule65 ****************/


/************ begin Rule Rule66 ****************
 *
 * Rule66:
 *   Rule;
 *
 **/

// Rule
protected class Rule66_RuleParserRuleCall extends RuleCallToken {
	
	public Rule66_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule66Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule66Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule66 ****************/


/************ begin Rule Rule67 ****************
 *
 * Rule67:
 *   Rule;
 *
 **/

// Rule
protected class Rule67_RuleParserRuleCall extends RuleCallToken {
	
	public Rule67_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule67Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule67Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule67 ****************/


/************ begin Rule Rule68 ****************
 *
 * Rule68:
 *   Rule;
 *
 **/

// Rule
protected class Rule68_RuleParserRuleCall extends RuleCallToken {
	
	public Rule68_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule68Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule68Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule68 ****************/


/************ begin Rule Rule69 ****************
 *
 * Rule69:
 *   Rule;
 *
 **/

// Rule
protected class Rule69_RuleParserRuleCall extends RuleCallToken {
	
	public Rule69_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule69Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule69Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule69 ****************/


/************ begin Rule Rule70 ****************
 *
 * Rule70:
 *   Rule;
 *
 **/

// Rule
protected class Rule70_RuleParserRuleCall extends RuleCallToken {
	
	public Rule70_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule70Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule70Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule70 ****************/


/************ begin Rule Rule71 ****************
 *
 * Rule71:
 *   Rule;
 *
 **/

// Rule
protected class Rule71_RuleParserRuleCall extends RuleCallToken {
	
	public Rule71_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule71Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule71Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule71 ****************/


/************ begin Rule Rule72 ****************
 *
 * Rule72:
 *   Rule;
 *
 **/

// Rule
protected class Rule72_RuleParserRuleCall extends RuleCallToken {
	
	public Rule72_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule72Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule72Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule72 ****************/


/************ begin Rule Rule73 ****************
 *
 * Rule73:
 *   Rule;
 *
 **/

// Rule
protected class Rule73_RuleParserRuleCall extends RuleCallToken {
	
	public Rule73_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule73Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule73Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule73 ****************/


/************ begin Rule Rule74 ****************
 *
 * Rule74:
 *   Rule;
 *
 **/

// Rule
protected class Rule74_RuleParserRuleCall extends RuleCallToken {
	
	public Rule74_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule74Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule74Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule74 ****************/


/************ begin Rule Rule75 ****************
 *
 * Rule75:
 *   Rule;
 *
 **/

// Rule
protected class Rule75_RuleParserRuleCall extends RuleCallToken {
	
	public Rule75_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule75Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule75Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule75 ****************/


/************ begin Rule Rule76 ****************
 *
 * Rule76:
 *   Rule;
 *
 **/

// Rule
protected class Rule76_RuleParserRuleCall extends RuleCallToken {
	
	public Rule76_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule76Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule76Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule76 ****************/


/************ begin Rule Rule77 ****************
 *
 * Rule77:
 *   Rule;
 *
 **/

// Rule
protected class Rule77_RuleParserRuleCall extends RuleCallToken {
	
	public Rule77_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule77Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule77Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule77 ****************/


/************ begin Rule Rule78 ****************
 *
 * Rule78:
 *   Rule;
 *
 **/

// Rule
protected class Rule78_RuleParserRuleCall extends RuleCallToken {
	
	public Rule78_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule78Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule78Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule78 ****************/


/************ begin Rule Rule79 ****************
 *
 * Rule79:
 *   Rule;
 *
 **/

// Rule
protected class Rule79_RuleParserRuleCall extends RuleCallToken {
	
	public Rule79_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule79Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule79Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule79 ****************/


/************ begin Rule Rule80 ****************
 *
 * Rule80:
 *   Rule;
 *
 **/

// Rule
protected class Rule80_RuleParserRuleCall extends RuleCallToken {
	
	public Rule80_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule80Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule80Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule80 ****************/


/************ begin Rule Rule81 ****************
 *
 * Rule81:
 *   Rule;
 *
 **/

// Rule
protected class Rule81_RuleParserRuleCall extends RuleCallToken {
	
	public Rule81_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule81Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule81Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule81 ****************/


/************ begin Rule Rule82 ****************
 *
 * Rule82:
 *   Rule;
 *
 **/

// Rule
protected class Rule82_RuleParserRuleCall extends RuleCallToken {
	
	public Rule82_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule82Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule82Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule82 ****************/


/************ begin Rule Rule83 ****************
 *
 * Rule83:
 *   Rule;
 *
 **/

// Rule
protected class Rule83_RuleParserRuleCall extends RuleCallToken {
	
	public Rule83_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule83Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule83Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule83 ****************/


/************ begin Rule Rule84 ****************
 *
 * Rule84:
 *   Rule;
 *
 **/

// Rule
protected class Rule84_RuleParserRuleCall extends RuleCallToken {
	
	public Rule84_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule84Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule84Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule84 ****************/


/************ begin Rule Rule85 ****************
 *
 * Rule85:
 *   Rule;
 *
 **/

// Rule
protected class Rule85_RuleParserRuleCall extends RuleCallToken {
	
	public Rule85_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule85Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule85Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule85 ****************/


/************ begin Rule Rule86 ****************
 *
 * Rule86:
 *   Rule;
 *
 **/

// Rule
protected class Rule86_RuleParserRuleCall extends RuleCallToken {
	
	public Rule86_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule86Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule86Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule86 ****************/


/************ begin Rule Rule87 ****************
 *
 * Rule87:
 *   Rule;
 *
 **/

// Rule
protected class Rule87_RuleParserRuleCall extends RuleCallToken {
	
	public Rule87_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule87Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule87Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule87 ****************/


/************ begin Rule Rule88 ****************
 *
 * Rule88:
 *   Rule;
 *
 **/

// Rule
protected class Rule88_RuleParserRuleCall extends RuleCallToken {
	
	public Rule88_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule88Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule88Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule88 ****************/


/************ begin Rule Rule89 ****************
 *
 * Rule89:
 *   Rule;
 *
 **/

// Rule
protected class Rule89_RuleParserRuleCall extends RuleCallToken {
	
	public Rule89_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule89Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule89Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule89 ****************/


/************ begin Rule Rule90 ****************
 *
 * Rule90:
 *   Rule;
 *
 **/

// Rule
protected class Rule90_RuleParserRuleCall extends RuleCallToken {
	
	public Rule90_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule90Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule90Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule90 ****************/


/************ begin Rule Rule91 ****************
 *
 * Rule91:
 *   Rule;
 *
 **/

// Rule
protected class Rule91_RuleParserRuleCall extends RuleCallToken {
	
	public Rule91_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule91Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule91Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule91 ****************/


/************ begin Rule Rule92 ****************
 *
 * Rule92:
 *   Rule;
 *
 **/

// Rule
protected class Rule92_RuleParserRuleCall extends RuleCallToken {
	
	public Rule92_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule92Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule92Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule92 ****************/


/************ begin Rule Rule93 ****************
 *
 * Rule93:
 *   Rule;
 *
 **/

// Rule
protected class Rule93_RuleParserRuleCall extends RuleCallToken {
	
	public Rule93_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule93Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule93Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule93 ****************/


/************ begin Rule Rule94 ****************
 *
 * Rule94:
 *   Rule;
 *
 **/

// Rule
protected class Rule94_RuleParserRuleCall extends RuleCallToken {
	
	public Rule94_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule94Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule94Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule94 ****************/


/************ begin Rule Rule95 ****************
 *
 * Rule95:
 *   Rule;
 *
 **/

// Rule
protected class Rule95_RuleParserRuleCall extends RuleCallToken {
	
	public Rule95_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule95Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule95Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule95 ****************/


/************ begin Rule Rule96 ****************
 *
 * Rule96:
 *   Rule;
 *
 **/

// Rule
protected class Rule96_RuleParserRuleCall extends RuleCallToken {
	
	public Rule96_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule96Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule96Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule96 ****************/


/************ begin Rule Rule97 ****************
 *
 * Rule97:
 *   Rule;
 *
 **/

// Rule
protected class Rule97_RuleParserRuleCall extends RuleCallToken {
	
	public Rule97_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule97Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule97Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule97 ****************/


/************ begin Rule Rule98 ****************
 *
 * Rule98:
 *   Rule;
 *
 **/

// Rule
protected class Rule98_RuleParserRuleCall extends RuleCallToken {
	
	public Rule98_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule98Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule98Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule98 ****************/


/************ begin Rule Rule99 ****************
 *
 * Rule99:
 *   Rule;
 *
 **/

// Rule
protected class Rule99_RuleParserRuleCall extends RuleCallToken {
	
	public Rule99_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule99Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule99Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule99 ****************/


/************ begin Rule Rule100 ****************
 *
 * Rule100:
 *   Rule;
 *
 **/

// Rule
protected class Rule100_RuleParserRuleCall extends RuleCallToken {
	
	public Rule100_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule100Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule100Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule100 ****************/


/************ begin Rule Rule101 ****************
 *
 * Rule101:
 *   Rule;
 *
 **/

// Rule
protected class Rule101_RuleParserRuleCall extends RuleCallToken {
	
	public Rule101_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule101Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule101Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule101 ****************/


/************ begin Rule Rule102 ****************
 *
 * Rule102:
 *   Rule;
 *
 **/

// Rule
protected class Rule102_RuleParserRuleCall extends RuleCallToken {
	
	public Rule102_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule102Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule102Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule102 ****************/


/************ begin Rule Rule103 ****************
 *
 * Rule103:
 *   Rule;
 *
 **/

// Rule
protected class Rule103_RuleParserRuleCall extends RuleCallToken {
	
	public Rule103_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule103Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule103Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule103 ****************/


/************ begin Rule Rule104 ****************
 *
 * Rule104:
 *   Rule;
 *
 **/

// Rule
protected class Rule104_RuleParserRuleCall extends RuleCallToken {
	
	public Rule104_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule104Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule104Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule104 ****************/


/************ begin Rule Rule105 ****************
 *
 * Rule105:
 *   Rule;
 *
 **/

// Rule
protected class Rule105_RuleParserRuleCall extends RuleCallToken {
	
	public Rule105_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule105Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule105Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule105 ****************/


/************ begin Rule Rule106 ****************
 *
 * Rule106:
 *   Rule;
 *
 **/

// Rule
protected class Rule106_RuleParserRuleCall extends RuleCallToken {
	
	public Rule106_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule106Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule106Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule106 ****************/


/************ begin Rule Rule107 ****************
 *
 * Rule107:
 *   Rule;
 *
 **/

// Rule
protected class Rule107_RuleParserRuleCall extends RuleCallToken {
	
	public Rule107_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule107Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule107Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule107 ****************/


/************ begin Rule Rule108 ****************
 *
 * Rule108:
 *   Rule;
 *
 **/

// Rule
protected class Rule108_RuleParserRuleCall extends RuleCallToken {
	
	public Rule108_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule108Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule108Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule108 ****************/


/************ begin Rule Rule109 ****************
 *
 * Rule109:
 *   Rule;
 *
 **/

// Rule
protected class Rule109_RuleParserRuleCall extends RuleCallToken {
	
	public Rule109_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule109Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule109Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule109 ****************/


/************ begin Rule Rule110 ****************
 *
 * Rule110:
 *   Rule;
 *
 **/

// Rule
protected class Rule110_RuleParserRuleCall extends RuleCallToken {
	
	public Rule110_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule110Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule110Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule110 ****************/


/************ begin Rule Rule111 ****************
 *
 * Rule111:
 *   Rule;
 *
 **/

// Rule
protected class Rule111_RuleParserRuleCall extends RuleCallToken {
	
	public Rule111_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule111Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule111Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule111 ****************/


/************ begin Rule Rule112 ****************
 *
 * Rule112:
 *   Rule;
 *
 **/

// Rule
protected class Rule112_RuleParserRuleCall extends RuleCallToken {
	
	public Rule112_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule112Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule112Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule112 ****************/


/************ begin Rule Rule113 ****************
 *
 * Rule113:
 *   Rule;
 *
 **/

// Rule
protected class Rule113_RuleParserRuleCall extends RuleCallToken {
	
	public Rule113_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule113Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule113Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule113 ****************/


/************ begin Rule Rule114 ****************
 *
 * Rule114:
 *   Rule;
 *
 **/

// Rule
protected class Rule114_RuleParserRuleCall extends RuleCallToken {
	
	public Rule114_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule114Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule114Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule114 ****************/


/************ begin Rule Rule115 ****************
 *
 * Rule115:
 *   Rule;
 *
 **/

// Rule
protected class Rule115_RuleParserRuleCall extends RuleCallToken {
	
	public Rule115_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule115Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule115Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule115 ****************/


/************ begin Rule Rule116 ****************
 *
 * Rule116:
 *   Rule;
 *
 **/

// Rule
protected class Rule116_RuleParserRuleCall extends RuleCallToken {
	
	public Rule116_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule116Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule116Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule116 ****************/


/************ begin Rule Rule117 ****************
 *
 * Rule117:
 *   Rule;
 *
 **/

// Rule
protected class Rule117_RuleParserRuleCall extends RuleCallToken {
	
	public Rule117_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule117Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule117Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule117 ****************/


/************ begin Rule Rule118 ****************
 *
 * Rule118:
 *   Rule;
 *
 **/

// Rule
protected class Rule118_RuleParserRuleCall extends RuleCallToken {
	
	public Rule118_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule118Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule118Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule118 ****************/


/************ begin Rule Rule119 ****************
 *
 * Rule119:
 *   Rule;
 *
 **/

// Rule
protected class Rule119_RuleParserRuleCall extends RuleCallToken {
	
	public Rule119_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule119Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule119Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule119 ****************/


/************ begin Rule Rule120 ****************
 *
 * Rule120:
 *   Rule;
 *
 **/

// Rule
protected class Rule120_RuleParserRuleCall extends RuleCallToken {
	
	public Rule120_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule120Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule120Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule120 ****************/


/************ begin Rule Rule121 ****************
 *
 * Rule121:
 *   Rule;
 *
 **/

// Rule
protected class Rule121_RuleParserRuleCall extends RuleCallToken {
	
	public Rule121_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule121Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule121Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule121 ****************/


/************ begin Rule Rule122 ****************
 *
 * Rule122:
 *   Rule;
 *
 **/

// Rule
protected class Rule122_RuleParserRuleCall extends RuleCallToken {
	
	public Rule122_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule122Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule122Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule122 ****************/


/************ begin Rule Rule123 ****************
 *
 * Rule123:
 *   Rule;
 *
 **/

// Rule
protected class Rule123_RuleParserRuleCall extends RuleCallToken {
	
	public Rule123_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule123Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule123Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule123 ****************/


/************ begin Rule Rule124 ****************
 *
 * Rule124:
 *   Rule;
 *
 **/

// Rule
protected class Rule124_RuleParserRuleCall extends RuleCallToken {
	
	public Rule124_RuleParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule124Access().getRuleParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_XKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule124Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Rule_XKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule124 ****************/


/************ begin Rule Rule125 ****************
 *
 * Rule125:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule125_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule125_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule125Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule125Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule125 ****************/


/************ begin Rule Rule126 ****************
 *
 * Rule126:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule126_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule126_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule126Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule126Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule126 ****************/


/************ begin Rule Rule127 ****************
 *
 * Rule127:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule127_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule127_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule127Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule127Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule127 ****************/


/************ begin Rule Rule128 ****************
 *
 * Rule128:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule128_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule128_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule128Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule128Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule128 ****************/


/************ begin Rule Rule129 ****************
 *
 * Rule129:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule129_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule129_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule129Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule129Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule129 ****************/


/************ begin Rule Rule130 ****************
 *
 * Rule130:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule130_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule130_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule130Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule130Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule130 ****************/


/************ begin Rule Rule131 ****************
 *
 * Rule131:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule131_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule131_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule131Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule131Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule131 ****************/


/************ begin Rule Rule132 ****************
 *
 * Rule132:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule132_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule132_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule132Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule132Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule132 ****************/


/************ begin Rule Rule133 ****************
 *
 * Rule133:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule133_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule133_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule133Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule133Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule133 ****************/


/************ begin Rule Rule134 ****************
 *
 * Rule134:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule134_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule134_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule134Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule134Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule134 ****************/


/************ begin Rule Rule135 ****************
 *
 * Rule135:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule135_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule135_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule135Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule135Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule135 ****************/


/************ begin Rule Rule136 ****************
 *
 * Rule136:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule136_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule136_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule136Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule136Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule136 ****************/


/************ begin Rule Rule137 ****************
 *
 * Rule137:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule137_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule137_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule137Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule137Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule137 ****************/


/************ begin Rule Rule138 ****************
 *
 * Rule138:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule138_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule138_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule138Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule138Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule138 ****************/


/************ begin Rule Rule139 ****************
 *
 * Rule139:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule139_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule139_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule139Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule139Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule139 ****************/


/************ begin Rule Rule140 ****************
 *
 * Rule140:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule140_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule140_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule140Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule140Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule140 ****************/


/************ begin Rule Rule141 ****************
 *
 * Rule141:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule141_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule141_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule141Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule141Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule141 ****************/


/************ begin Rule Rule142 ****************
 *
 * Rule142:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule142_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule142_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule142Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule142Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule142 ****************/


/************ begin Rule Rule143 ****************
 *
 * Rule143:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule143_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule143_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule143Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule143Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule143 ****************/


/************ begin Rule Rule144 ****************
 *
 * Rule144:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule144_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule144_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule144Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule144Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule144 ****************/


/************ begin Rule Rule145 ****************
 *
 * Rule145:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule145_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule145_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule145Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule145Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule145 ****************/


/************ begin Rule Rule146 ****************
 *
 * Rule146:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule146_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule146_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule146Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule146Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule146 ****************/


/************ begin Rule Rule147 ****************
 *
 * Rule147:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule147_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule147_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule147Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule147Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule147 ****************/


/************ begin Rule Rule148 ****************
 *
 * Rule148:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule148_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule148_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule148Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule148Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule148 ****************/


/************ begin Rule Rule149 ****************
 *
 * Rule149:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule149_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule149_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule149Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule149Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule149 ****************/


/************ begin Rule Rule150 ****************
 *
 * Rule150:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule150_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule150_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule150Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule150Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule150 ****************/


/************ begin Rule Rule151 ****************
 *
 * Rule151:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule151_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule151_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule151Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule151Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule151 ****************/


/************ begin Rule Rule152 ****************
 *
 * Rule152:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule152_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule152_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule152Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule152Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule152 ****************/


/************ begin Rule Rule153 ****************
 *
 * Rule153:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule153_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule153_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule153Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule153Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule153 ****************/


/************ begin Rule Rule154 ****************
 *
 * Rule154:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule154_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule154_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule154Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule154Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule154 ****************/


/************ begin Rule Rule155 ****************
 *
 * Rule155:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule155_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule155_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule155Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule155Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule155 ****************/


/************ begin Rule Rule156 ****************
 *
 * Rule156:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule156_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule156_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule156Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule156Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule156 ****************/


/************ begin Rule Rule157 ****************
 *
 * Rule157:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule157_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule157_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule157Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule157Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule157 ****************/


/************ begin Rule Rule158 ****************
 *
 * Rule158:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule158_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule158_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule158Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule158Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule158 ****************/


/************ begin Rule Rule159 ****************
 *
 * Rule159:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule159_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule159_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule159Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule159Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule159 ****************/


/************ begin Rule Rule160 ****************
 *
 * Rule160:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule160_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule160_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule160Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule160Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule160 ****************/


/************ begin Rule Rule161 ****************
 *
 * Rule161:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule161_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule161_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule161Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule161Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule161 ****************/


/************ begin Rule Rule162 ****************
 *
 * Rule162:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule162_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule162_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule162Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule162Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule162 ****************/


/************ begin Rule Rule163 ****************
 *
 * Rule163:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule163_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule163_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule163Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule163Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule163 ****************/


/************ begin Rule Rule164 ****************
 *
 * Rule164:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule164_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule164_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule164Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule164Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule164 ****************/


/************ begin Rule Rule165 ****************
 *
 * Rule165:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule165_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule165_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule165Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule165Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule165 ****************/


/************ begin Rule Rule166 ****************
 *
 * Rule166:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule166_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule166_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule166Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule166Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule166 ****************/


/************ begin Rule Rule167 ****************
 *
 * Rule167:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule167_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule167_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule167Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule167Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule167 ****************/


/************ begin Rule Rule168 ****************
 *
 * Rule168:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule168_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule168_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule168Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule168Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule168 ****************/


/************ begin Rule Rule169 ****************
 *
 * Rule169:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule169_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule169_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule169Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule169Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule169 ****************/


/************ begin Rule Rule170 ****************
 *
 * Rule170:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule170_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule170_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule170Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule170Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule170 ****************/


/************ begin Rule Rule171 ****************
 *
 * Rule171:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule171_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule171_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule171Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule171Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule171 ****************/


/************ begin Rule Rule172 ****************
 *
 * Rule172:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule172_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule172_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule172Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule172Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule172 ****************/


/************ begin Rule Rule173 ****************
 *
 * Rule173:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule173_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule173_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule173Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule173Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule173 ****************/


/************ begin Rule Rule174 ****************
 *
 * Rule174:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule174_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule174_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule174Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule174Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule174 ****************/


/************ begin Rule Rule175 ****************
 *
 * Rule175:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule175_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule175_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule175Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule175Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule175 ****************/


/************ begin Rule Rule176 ****************
 *
 * Rule176:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule176_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule176_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule176Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule176Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule176 ****************/


/************ begin Rule Rule177 ****************
 *
 * Rule177:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule177_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule177_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule177Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule177Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule177 ****************/


/************ begin Rule Rule178 ****************
 *
 * Rule178:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule178_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule178_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule178Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule178Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule178 ****************/


/************ begin Rule Rule179 ****************
 *
 * Rule179:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule179_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule179_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule179Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule179Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule179 ****************/


/************ begin Rule Rule180 ****************
 *
 * Rule180:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule180_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule180_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule180Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule180Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule180 ****************/


/************ begin Rule Rule181 ****************
 *
 * Rule181:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule181_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule181_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule181Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule181Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule181 ****************/


/************ begin Rule Rule182 ****************
 *
 * Rule182:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule182_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule182_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule182Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule182Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule182 ****************/


/************ begin Rule Rule183 ****************
 *
 * Rule183:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule183_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule183_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule183Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule183Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule183 ****************/


/************ begin Rule Rule184 ****************
 *
 * Rule184:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule184_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule184_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule184Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule184Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule184 ****************/


/************ begin Rule Rule185 ****************
 *
 * Rule185:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule185_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule185_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule185Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule185Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule185 ****************/


/************ begin Rule Rule186 ****************
 *
 * Rule186:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule186_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule186_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule186Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule186Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule186 ****************/


/************ begin Rule Rule187 ****************
 *
 * Rule187:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule187_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule187_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule187Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule187Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule187 ****************/


/************ begin Rule Rule188 ****************
 *
 * Rule188:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule188_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule188_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule188Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule188Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule188 ****************/


/************ begin Rule Rule189 ****************
 *
 * Rule189:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule189_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule189_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule189Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule189Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule189 ****************/


/************ begin Rule Rule190 ****************
 *
 * Rule190:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule190_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule190_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule190Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule190Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule190 ****************/


/************ begin Rule Rule191 ****************
 *
 * Rule191:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule191_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule191_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule191Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule191Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule191 ****************/


/************ begin Rule Rule192 ****************
 *
 * Rule192:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule192_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule192_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule192Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule192Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule192 ****************/


/************ begin Rule Rule193 ****************
 *
 * Rule193:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule193_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule193_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule193Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule193Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule193 ****************/


/************ begin Rule Rule194 ****************
 *
 * Rule194:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule194_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule194_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule194Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule194Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule194 ****************/


/************ begin Rule Rule195 ****************
 *
 * Rule195:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule195_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule195_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule195Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule195Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule195 ****************/


/************ begin Rule Rule196 ****************
 *
 * Rule196:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule196_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule196_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule196Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule196Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule196 ****************/


/************ begin Rule Rule197 ****************
 *
 * Rule197:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule197_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule197_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule197Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule197Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule197 ****************/


/************ begin Rule Rule198 ****************
 *
 * Rule198:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule198_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule198_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule198Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule198Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule198 ****************/


/************ begin Rule Rule199 ****************
 *
 * Rule199:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule199_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule199_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule199Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule199Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule199 ****************/


/************ begin Rule Rule200 ****************
 *
 * Rule200:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule200_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule200_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule200Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule200Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule200 ****************/


/************ begin Rule Rule201 ****************
 *
 * Rule201:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule201_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule201_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule201Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule201Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule201 ****************/


/************ begin Rule Rule202 ****************
 *
 * Rule202:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule202_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule202_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule202Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule202Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule202 ****************/


/************ begin Rule Rule203 ****************
 *
 * Rule203:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule203_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule203_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule203Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule203Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule203 ****************/


/************ begin Rule Rule204 ****************
 *
 * Rule204:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule204_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule204_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule204Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule204Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule204 ****************/


/************ begin Rule Rule205 ****************
 *
 * Rule205:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule205_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule205_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule205Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule205Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule205 ****************/


/************ begin Rule Rule206 ****************
 *
 * Rule206:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule206_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule206_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule206Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule206Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule206 ****************/


/************ begin Rule Rule207 ****************
 *
 * Rule207:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule207_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule207_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule207Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule207Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule207 ****************/


/************ begin Rule Rule208 ****************
 *
 * Rule208:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule208_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule208_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule208Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule208Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule208 ****************/


/************ begin Rule Rule209 ****************
 *
 * Rule209:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule209_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule209_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule209Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule209Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule209 ****************/


/************ begin Rule Rule210 ****************
 *
 * Rule210:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule210_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule210_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule210Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule210Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule210 ****************/


/************ begin Rule Rule211 ****************
 *
 * Rule211:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule211_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule211_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule211Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule211Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule211 ****************/


/************ begin Rule Rule212 ****************
 *
 * Rule212:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule212_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule212_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule212Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule212Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule212 ****************/


/************ begin Rule Rule213 ****************
 *
 * Rule213:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule213_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule213_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule213Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule213Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule213 ****************/


/************ begin Rule Rule214 ****************
 *
 * Rule214:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule214_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule214_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule214Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule214Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule214 ****************/


/************ begin Rule Rule215 ****************
 *
 * Rule215:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule215_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule215_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule215Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule215Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule215 ****************/


/************ begin Rule Rule216 ****************
 *
 * Rule216:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule216_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule216_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule216Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule216Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule216 ****************/


/************ begin Rule Rule217 ****************
 *
 * Rule217:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule217_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule217_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule217Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule217Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule217 ****************/


/************ begin Rule Rule218 ****************
 *
 * Rule218:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule218_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule218_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule218Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule218Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule218 ****************/


/************ begin Rule Rule219 ****************
 *
 * Rule219:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule219_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule219_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule219Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule219Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule219 ****************/


/************ begin Rule Rule220 ****************
 *
 * Rule220:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule220_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule220_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule220Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule220Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule220 ****************/


/************ begin Rule Rule221 ****************
 *
 * Rule221:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule221_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule221_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule221Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule221Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule221 ****************/


/************ begin Rule Rule222 ****************
 *
 * Rule222:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule222_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule222_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule222Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule222Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule222 ****************/


/************ begin Rule Rule223 ****************
 *
 * Rule223:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule223_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule223_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule223Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule223Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule223 ****************/


/************ begin Rule Rule224 ****************
 *
 * Rule224:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule224_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule224_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule224Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule224Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule224 ****************/


/************ begin Rule Rule225 ****************
 *
 * Rule225:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule225_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule225_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule225Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule225Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule225 ****************/


/************ begin Rule Rule226 ****************
 *
 * Rule226:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule226_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule226_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule226Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule226Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule226 ****************/


/************ begin Rule Rule227 ****************
 *
 * Rule227:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule227_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule227_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule227Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule227Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule227 ****************/


/************ begin Rule Rule228 ****************
 *
 * Rule228:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule228_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule228_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule228Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule228Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule228 ****************/


/************ begin Rule Rule229 ****************
 *
 * Rule229:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule229_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule229_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule229Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule229Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule229 ****************/


/************ begin Rule Rule230 ****************
 *
 * Rule230:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule230_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule230_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule230Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule230Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule230 ****************/


/************ begin Rule Rule231 ****************
 *
 * Rule231:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule231_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule231_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule231Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule231Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule231 ****************/


/************ begin Rule Rule232 ****************
 *
 * Rule232:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule232_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule232_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule232Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule232Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule232 ****************/


/************ begin Rule Rule233 ****************
 *
 * Rule233:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule233_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule233_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule233Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule233Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule233 ****************/


/************ begin Rule Rule234 ****************
 *
 * Rule234:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule234_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule234_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule234Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule234Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule234 ****************/


/************ begin Rule Rule235 ****************
 *
 * Rule235:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule235_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule235_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule235Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule235Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule235 ****************/


/************ begin Rule Rule236 ****************
 *
 * Rule236:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule236_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule236_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule236Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule236Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule236 ****************/


/************ begin Rule Rule237 ****************
 *
 * Rule237:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule237_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule237_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule237Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule237Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule237 ****************/


/************ begin Rule Rule238 ****************
 *
 * Rule238:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule238_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule238_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule238Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule238Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule238 ****************/


/************ begin Rule Rule239 ****************
 *
 * Rule239:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule239_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule239_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule239Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule239Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule239 ****************/


/************ begin Rule Rule240 ****************
 *
 * Rule240:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule240_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule240_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule240Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule240Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule240 ****************/


/************ begin Rule Rule241 ****************
 *
 * Rule241:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule241_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule241_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule241Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule241Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule241 ****************/


/************ begin Rule Rule242 ****************
 *
 * Rule242:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule242_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule242_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule242Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule242Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule242 ****************/


/************ begin Rule Rule243 ****************
 *
 * Rule243:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule243_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule243_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule243Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule243Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule243 ****************/


/************ begin Rule Rule244 ****************
 *
 * Rule244:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule244_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule244_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule244Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule244Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule244 ****************/


/************ begin Rule Rule245 ****************
 *
 * Rule245:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule245_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule245_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule245Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule245Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule245 ****************/


/************ begin Rule Rule246 ****************
 *
 * Rule246:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule246_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule246_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule246Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule246Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule246 ****************/


/************ begin Rule Rule247 ****************
 *
 * Rule247:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule247_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule247_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule247Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule247Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule247 ****************/


/************ begin Rule Rule248 ****************
 *
 * Rule248:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule248_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule248_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule248Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule248Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule248 ****************/


/************ begin Rule Rule249 ****************
 *
 * Rule249:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule249_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule249_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule249Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule249Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule249 ****************/


/************ begin Rule Rule250 ****************
 *
 * Rule250:
 *   RuleB;
 *
 **/

// RuleB
protected class Rule250_RuleBParserRuleCall extends RuleCallToken {
	
	public Rule250_RuleBParserRuleCall(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRule250Access().getRuleBParserRuleCall();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RuleB_YKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRule250Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RuleB_YKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRuleBRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

/************ end Rule Rule250 ****************/

}
