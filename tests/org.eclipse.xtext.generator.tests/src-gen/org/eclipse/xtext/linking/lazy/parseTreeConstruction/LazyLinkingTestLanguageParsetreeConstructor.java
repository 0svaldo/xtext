/*
* generated by Xtext
*/
package org.eclipse.xtext.linking.lazy.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor2;

import org.eclipse.xtext.linking.lazy.services.LazyLinkingTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class LazyLinkingTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor2 {
		
	@Inject
	private LazyLinkingTestLanguageGrammarAccess grammarAccess;
		
	public LazyLinkingTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken2 getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_TypesAssignment(this, this, 0, inst);
			case 1: return new Type_Group(this, this, 1, inst);
			case 2: return new Property_Group(this, this, 2, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 *   types+=Type*;
 *
 **/

// types+=Type*
protected class Model_TypesAssignment extends AssignmentToken  {
	
	public Model_TypesAssignment(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getTypesAssignment();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("types",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("types");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getTypesTypeParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_TypesAssignment(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

/************ end Rule Model ****************/


/************ begin Rule Type ****************
 *
 * Type:
 *   "type" name=ID ("extends" extends=[Type] "." parentId=[Property])? ("for" parentId=[Property] "in" extends=[Type])? "{" properties+=Property* "}";
 *
 **/

// "type" name=ID ("extends" extends=[Type] "." parentId=[Property])? ("for" parentId=[Property] "in" extends=[Type])? "{" properties+=Property* "}"
protected class Type_Group extends GroupToken {
	
	public Type_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTypeAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_RightCurlyBracketKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "type"
protected class Type_TypeKeyword_0 extends KeywordToken  {
	
	public Type_TypeKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeAccess().getTypeKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Type_NameAssignment_1 extends AssignmentToken  {
	
	public Type_NameAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeAccess().getNameAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_TypeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("extends" extends=[Type] "." parentId=[Property])?
protected class Type_Group_2 extends GroupToken {
	
	public Type_Group_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTypeAccess().getGroup_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_ParentIdAssignment_2_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "extends"
protected class Type_ExtendsKeyword_2_0 extends KeywordToken  {
	
	public Type_ExtendsKeyword_2_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeAccess().getExtendsKeyword_2_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// extends=[Type]
protected class Type_ExtendsAssignment_2_1 extends AssignmentToken  {
	
	public Type_ExtendsAssignment_2_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeAccess().getExtendsAssignment_2_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_ExtendsKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("extends",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("extends");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeAccess().getExtendsTypeCrossReference_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getTypeAccess().getExtendsTypeCrossReference_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "."
protected class Type_FullStopKeyword_2_2 extends KeywordToken  {
	
	public Type_FullStopKeyword_2_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeAccess().getFullStopKeyword_2_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_ExtendsAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// parentId=[Property]
protected class Type_ParentIdAssignment_2_3 extends AssignmentToken  {
	
	public Type_ParentIdAssignment_2_3(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeAccess().getParentIdAssignment_2_3();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_FullStopKeyword_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parentId",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parentId");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeAccess().getParentIdPropertyCrossReference_2_3_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getTypeAccess().getParentIdPropertyCrossReference_2_3_0(); 
				return obj;
			}
		}
		return null;
	}

}


// ("for" parentId=[Property] "in" extends=[Type])?
protected class Type_Group_3 extends GroupToken {
	
	public Type_Group_3(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTypeAccess().getGroup_3();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_ExtendsAssignment_3_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "for"
protected class Type_ForKeyword_3_0 extends KeywordToken  {
	
	public Type_ForKeyword_3_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeAccess().getForKeyword_3_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_Group_2(parent, this, 0, inst);
			case 1: return new Type_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// parentId=[Property]
protected class Type_ParentIdAssignment_3_1 extends AssignmentToken  {
	
	public Type_ParentIdAssignment_3_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeAccess().getParentIdAssignment_3_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_ForKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parentId",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parentId");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeAccess().getParentIdPropertyCrossReference_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getTypeAccess().getParentIdPropertyCrossReference_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "in"
protected class Type_InKeyword_3_2 extends KeywordToken  {
	
	public Type_InKeyword_3_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeAccess().getInKeyword_3_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_ParentIdAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// extends=[Type]
protected class Type_ExtendsAssignment_3_3 extends AssignmentToken  {
	
	public Type_ExtendsAssignment_3_3(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeAccess().getExtendsAssignment_3_3();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_InKeyword_3_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("extends",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("extends");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeAccess().getExtendsTypeCrossReference_3_3_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getTypeAccess().getExtendsTypeCrossReference_3_3_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "{"
protected class Type_LeftCurlyBracketKeyword_4 extends KeywordToken  {
	
	public Type_LeftCurlyBracketKeyword_4(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeAccess().getLeftCurlyBracketKeyword_4();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_Group_3(parent, this, 0, inst);
			case 1: return new Type_Group_2(parent, this, 1, inst);
			case 2: return new Type_NameAssignment_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// properties+=Property*
protected class Type_PropertiesAssignment_5 extends AssignmentToken  {
	
	public Type_PropertiesAssignment_5(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeAccess().getPropertiesAssignment_5();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Property_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("properties",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("properties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTypeAccess().getPropertiesPropertyParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Type_PropertiesAssignment_5(parent, next, actIndex, consumed);
			case 1: return new Type_LeftCurlyBracketKeyword_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Type_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public Type_RightCurlyBracketKeyword_6(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeAccess().getRightCurlyBracketKeyword_6();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_PropertiesAssignment_5(parent, this, 0, inst);
			case 1: return new Type_LeftCurlyBracketKeyword_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Type ****************/


/************ begin Rule Property ****************
 *
 * Property:
 *   type+=[Type]+ name=ID ";";
 *
 **/

// type+=[Type]+ name=ID ";"
protected class Property_Group extends GroupToken {
	
	public Property_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPropertyAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Property_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// type+=[Type]+
protected class Property_TypeAssignment_0 extends AssignmentToken  {
	
	public Property_TypeAssignment_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyAccess().getTypeAssignment_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Property_TypeAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyAccess().getTypeTypeCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getPropertyAccess().getTypeTypeCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// name=ID
protected class Property_NameAssignment_1 extends AssignmentToken  {
	
	public Property_NameAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyAccess().getNameAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Property_TypeAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Property_SemicolonKeyword_2 extends KeywordToken  {
	
	public Property_SemicolonKeyword_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPropertyAccess().getSemicolonKeyword_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Property_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Property ****************/

}
