/*
* generated by Xtext
*/
package org.eclipse.xtext.linking.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.linking.services.ImportUriTestLanguageGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 
import org.eclipse.xtext.linking.parser.packrat.consumers.ImportUriTestLanguageMainConsumer;
import org.eclipse.xtext.linking.parser.packrat.consumers.ImportUriTestLanguageImportConsumer;
import org.eclipse.xtext.linking.parser.packrat.consumers.ImportUriTestLanguageTypeConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class ImportUriTestLanguageParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 
    private ImportUriTestLanguageMainConsumer mainConsumer;
    private ImportUriTestLanguageImportConsumer importConsumer;
    private ImportUriTestLanguageTypeConsumer typeConsumer;

	private ImportUriTestLanguageGrammarAccess grammarAccess;

	public ImportUriTestLanguageParserConfiguration(IInternalParserConfiguration configuration, ImportUriTestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public ImportUriTestLanguageMainConsumer getRootConsumer() {
		return mainConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		mainConsumer = new ImportUriTestLanguageMainConsumer(
    		this, null
    	);
		importConsumer = new ImportUriTestLanguageImportConsumer(
    		this, null
    	);
		typeConsumer = new ImportUriTestLanguageTypeConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getMainConsumer().setRule(grammarAccess.getMainAccess());
		getImportConsumer().setRule(grammarAccess.getImportAccess());
		getTypeConsumer().setRule(grammarAccess.getTypeAccess());
		getIdConsumer().setRule(grammarAccess.getIDRule());
		getIntConsumer().setRule(grammarAccess.getINTRule());
		getStringConsumer().setRule(grammarAccess.getSTRINGRule());
		getMlCommentConsumer().setRule(grammarAccess.getML_COMMENTRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getAnyOtherConsumer().setRule(grammarAccess.getANY_OTHERRule());


		getMainConsumer().setImportConsumer(getImportConsumer());
		getMainConsumer().setTypeConsumer(getTypeConsumer());

		getImportConsumer().setStringConsumer(getStringConsumer());

		getTypeConsumer().setIdConsumer(getIdConsumer());

		getImportConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.linking.parser.packrat.ImportUriTestLanguageDelimiters.keyword$11$Delimiter);
		getImportConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.linking.parser.packrat.ImportUriTestLanguageDelimiters.ruleCall$13$Delimiter);
		getTypeConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.linking.parser.packrat.ImportUriTestLanguageDelimiters.keyword$11$Delimiter);
		getTypeConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.linking.parser.packrat.ImportUriTestLanguageDelimiters.keyword$11$Delimiter);
		getTypeConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.linking.parser.packrat.ImportUriTestLanguageDelimiters.ruleCall$19$Delimiter);
		getTypeConsumer().setRuleCall$9$Delimiter(org.eclipse.xtext.linking.parser.packrat.ImportUriTestLanguageDelimiters.ruleCall$19$Delimiter);
	}
	
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public ImportUriTestLanguageMainConsumer getMainConsumer() {
    	return mainConsumer;
    }

    public ImportUriTestLanguageImportConsumer getImportConsumer() {
    	return importConsumer;
    }

    public ImportUriTestLanguageTypeConsumer getTypeConsumer() {
    	return typeConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
