/*
* generated by Xtext
*/
package org.eclipse.xtext.index.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.index.services.IndexTestLanguageGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 
import org.eclipse.xtext.index.parser.packrat.consumers.IndexTestLanguageFileConsumer;
import org.eclipse.xtext.index.parser.packrat.consumers.IndexTestLanguageImportConsumer;
import org.eclipse.xtext.index.parser.packrat.consumers.IndexTestLanguageQualifiedNameConsumer;
import org.eclipse.xtext.index.parser.packrat.consumers.IndexTestLanguageNamespaceConsumer;
import org.eclipse.xtext.index.parser.packrat.consumers.IndexTestLanguageNamedElementConsumer;
import org.eclipse.xtext.index.parser.packrat.consumers.IndexTestLanguageTypeConsumer;
import org.eclipse.xtext.index.parser.packrat.consumers.IndexTestLanguageEntityConsumer;
import org.eclipse.xtext.index.parser.packrat.consumers.IndexTestLanguageDatatypeConsumer;
import org.eclipse.xtext.index.parser.packrat.consumers.IndexTestLanguagePropertyConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class IndexTestLanguageParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 
    private IndexTestLanguageFileConsumer fileConsumer;
    private IndexTestLanguageImportConsumer importConsumer;
    private IndexTestLanguageQualifiedNameConsumer qualifiedNameConsumer;
    private IndexTestLanguageNamespaceConsumer namespaceConsumer;
    private IndexTestLanguageNamedElementConsumer namedElementConsumer;
    private IndexTestLanguageTypeConsumer typeConsumer;
    private IndexTestLanguageEntityConsumer entityConsumer;
    private IndexTestLanguageDatatypeConsumer datatypeConsumer;
    private IndexTestLanguagePropertyConsumer propertyConsumer;

	private IndexTestLanguageGrammarAccess grammarAccess;

	public IndexTestLanguageParserConfiguration(IInternalParserConfiguration configuration, IndexTestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public IndexTestLanguageFileConsumer getRootConsumer() {
		return fileConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		fileConsumer = new IndexTestLanguageFileConsumer(
    		this, null
    	);
		importConsumer = new IndexTestLanguageImportConsumer(
    		this, null
    	);
		qualifiedNameConsumer = new IndexTestLanguageQualifiedNameConsumer(
    		this, null
    	);
		namespaceConsumer = new IndexTestLanguageNamespaceConsumer(
    		this, null
    	);
		namedElementConsumer = new IndexTestLanguageNamedElementConsumer(
    		this, null
    	);
		typeConsumer = new IndexTestLanguageTypeConsumer(
    		this, null
    	);
		entityConsumer = new IndexTestLanguageEntityConsumer(
    		this, null
    	);
		datatypeConsumer = new IndexTestLanguageDatatypeConsumer(
    		this, null
    	);
		propertyConsumer = new IndexTestLanguagePropertyConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getFileConsumer().setRule(grammarAccess.getFileAccess());
		getImportConsumer().setRule(grammarAccess.getImportAccess());
		getQualifiedNameConsumer().setRule(grammarAccess.getQualifiedNameAccess());
		getNamespaceConsumer().setRule(grammarAccess.getNamespaceAccess());
		getNamedElementConsumer().setRule(grammarAccess.getNamedElementAccess());
		getTypeConsumer().setRule(grammarAccess.getTypeAccess());
		getEntityConsumer().setRule(grammarAccess.getEntityAccess());
		getDatatypeConsumer().setRule(grammarAccess.getDatatypeAccess());
		getPropertyConsumer().setRule(grammarAccess.getPropertyAccess());
		getIdConsumer().setRule(grammarAccess.getIDRule());
		getIntConsumer().setRule(grammarAccess.getINTRule());
		getStringConsumer().setRule(grammarAccess.getSTRINGRule());
		getMlCommentConsumer().setRule(grammarAccess.getML_COMMENTRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getAnyOtherConsumer().setRule(grammarAccess.getANY_OTHERRule());


		getFileConsumer().setImportConsumer(getImportConsumer());
		getFileConsumer().setNamespaceConsumer(getNamespaceConsumer());

		getImportConsumer().setQualifiedNameConsumer(getQualifiedNameConsumer());

		getQualifiedNameConsumer().setIdConsumer(getIdConsumer());

		getNamespaceConsumer().setNamedElementConsumer(getNamedElementConsumer());
		getNamespaceConsumer().setQualifiedNameConsumer(getQualifiedNameConsumer());

		getNamedElementConsumer().setNamespaceConsumer(getNamespaceConsumer());
		getNamedElementConsumer().setTypeConsumer(getTypeConsumer());

		getTypeConsumer().setDatatypeConsumer(getDatatypeConsumer());
		getTypeConsumer().setEntityConsumer(getEntityConsumer());

		getEntityConsumer().setIdConsumer(getIdConsumer());
		getEntityConsumer().setPropertyConsumer(getPropertyConsumer());

		getDatatypeConsumer().setIdConsumer(getIdConsumer());

		getPropertyConsumer().setIdConsumer(getIdConsumer());

		getImportConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.index.parser.packrat.IndexTestLanguageDelimiters.keyword$11$Delimiter);
		getQualifiedNameConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.index.parser.packrat.IndexTestLanguageDelimiters.keyword$19$Delimiter);
		getQualifiedNameConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.index.parser.packrat.IndexTestLanguageDelimiters.ruleCall$17$Delimiter);
		getQualifiedNameConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.index.parser.packrat.IndexTestLanguageDelimiters.ruleCall$17$Delimiter);
		getNamespaceConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.index.parser.packrat.IndexTestLanguageDelimiters.keyword$19$Delimiter);
		getNamespaceConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.index.parser.packrat.IndexTestLanguageDelimiters.keyword$19$Delimiter);
		getEntityConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.index.parser.packrat.IndexTestLanguageDelimiters.keyword$11$Delimiter);
		getEntityConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.index.parser.packrat.IndexTestLanguageDelimiters.keyword$19$Delimiter);
		getEntityConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.index.parser.packrat.IndexTestLanguageDelimiters.keyword$19$Delimiter);
		getEntityConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.index.parser.packrat.IndexTestLanguageDelimiters.ruleCall$17$Delimiter);
		getDatatypeConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.index.parser.packrat.IndexTestLanguageDelimiters.keyword$11$Delimiter);
		getDatatypeConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.index.parser.packrat.IndexTestLanguageDelimiters.ruleCall$17$Delimiter);
		getPropertyConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.index.parser.packrat.IndexTestLanguageDelimiters.ruleCall$17$Delimiter);
		getPropertyConsumer().setRuleCall$7$Delimiter(org.eclipse.xtext.index.parser.packrat.IndexTestLanguageDelimiters.ruleCall$17$Delimiter);
	}
	
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public IndexTestLanguageFileConsumer getFileConsumer() {
    	return fileConsumer;
    }

    public IndexTestLanguageImportConsumer getImportConsumer() {
    	return importConsumer;
    }

    public IndexTestLanguageQualifiedNameConsumer getQualifiedNameConsumer() {
    	return qualifiedNameConsumer;
    }

    public IndexTestLanguageNamespaceConsumer getNamespaceConsumer() {
    	return namespaceConsumer;
    }

    public IndexTestLanguageNamedElementConsumer getNamedElementConsumer() {
    	return namedElementConsumer;
    }

    public IndexTestLanguageTypeConsumer getTypeConsumer() {
    	return typeConsumer;
    }

    public IndexTestLanguageEntityConsumer getEntityConsumer() {
    	return entityConsumer;
    }

    public IndexTestLanguageDatatypeConsumer getDatatypeConsumer() {
    	return datatypeConsumer;
    }

    public IndexTestLanguagePropertyConsumer getPropertyConsumer() {
    	return propertyConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
