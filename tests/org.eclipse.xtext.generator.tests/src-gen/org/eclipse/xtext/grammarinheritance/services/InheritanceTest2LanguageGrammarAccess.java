/*
* generated by Xtext
*/

package org.eclipse.xtext.grammarinheritance.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.grammarinheritance.services.InheritanceTestLanguageGrammarAccess;
import org.eclipse.xtext.grammarinheritance.services.BaseInheritanceTestLanguageGrammarAccess;

@Singleton
public class InheritanceTest2LanguageGrammarAccess implements IGrammarAccess {
	
	
	public class ElementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElements2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElements2ElementParserRuleCall_3_0 = (RuleCall)cElements2Assignment_3.eContents().get(0);
		private final Assignment cIdsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdsFQNParserRuleCall_4_0 = (RuleCall)cIdsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Element returns ModelX:
		//  "model" name=ID "{" elements2+=Element* ids+=FQN "}";
		public ParserRule getRule() { return rule; }

		//"model" name=ID "{" elements2+=Element* ids+=FQN "}"
		public Group getGroup() { return cGroup; }

		//"model"
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//elements2+=Element*
		public Assignment getElements2Assignment_3() { return cElements2Assignment_3; }

		//Element
		public RuleCall getElements2ElementParserRuleCall_3_0() { return cElements2ElementParserRuleCall_3_0; }

		//ids+=FQN
		public Assignment getIdsAssignment_4() { return cIdsAssignment_4; }

		//FQN
		public RuleCall getIdsFQNParserRuleCall_4_0() { return cIdsFQNParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	
	
	private ElementElements pElement;
	
	private final GrammarProvider grammarProvider;

	private InheritanceTestLanguageGrammarAccess gaInheritanceTestLanguage;

	@Inject
	public InheritanceTest2LanguageGrammarAccess(GrammarProvider grammarProvider,
		InheritanceTestLanguageGrammarAccess gaInheritanceTestLanguage) {
		this.grammarProvider = grammarProvider;
		this.gaInheritanceTestLanguage = gaInheritanceTestLanguage;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public InheritanceTestLanguageGrammarAccess getInheritanceTestLanguageGrammarAccess() {
		return gaInheritanceTestLanguage;
	}

	
	//Element returns ModelX:
	//  "model" name=ID "{" elements2+=Element* ids+=FQN "}";
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//Model:
	//  "model" name=ID "{" elements+=Element* "}";
	public InheritanceTestLanguageGrammarAccess.ModelElements getModelAccess() {
		return gaInheritanceTestLanguage.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//FQN returns ecore::EString:
	//  ID ("." ID)*;
	public BaseInheritanceTestLanguageGrammarAccess.FQNElements getFQNAccess() {
		return gaInheritanceTestLanguage.getFQNAccess();
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//terminal ID:
	//  "^" ? ( "a" .. "z" | "A" .. "Z" | "_" ) ( "a" .. "z" | "A" .. "Z" | "_" | "0" .. "9" ) *;
	public TerminalRule getIDRule() {
		return gaInheritanceTestLanguage.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0" .. "9" +;
	public TerminalRule getINTRule() {
		return gaInheritanceTestLanguage.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ( "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" ) | ! ( "\\" | "\"" ) ) * "\"" | "\'" ( "\\" ( "b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" ) | ! ( "\\" | "\'" ) ) * "\'";
	public TerminalRule getSTRINGRule() {
		return gaInheritanceTestLanguage.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *" -> "* /";
	public TerminalRule getML_COMMENTRule() {
		return gaInheritanceTestLanguage.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" ! ( "\n" | "\r" ) * ( "\r" ? "\n" ) ?;
	public TerminalRule getSL_COMMENTRule() {
		return gaInheritanceTestLanguage.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  ( " " | "\t" | "\r" | "\n" ) +;
	public TerminalRule getWSRule() {
		return gaInheritanceTestLanguage.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaInheritanceTestLanguage.getANY_OTHERRule();
	} 
}
