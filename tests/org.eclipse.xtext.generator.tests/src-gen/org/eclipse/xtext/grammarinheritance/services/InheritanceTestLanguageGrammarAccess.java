/*
* generated by Xtext
*/

package org.eclipse.xtext.grammarinheritance.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.grammarinheritance.services.BaseInheritanceTestLanguageGrammarAccess;

@Singleton
public class InheritanceTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class ModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Group c000Group = (Group)c00Group.eContents().get(0);
		private final Keyword c0000KeywordModel = (Keyword)c000Group.eContents().get(0);
		private final Assignment c0001AssignmentName = (Assignment)c000Group.eContents().get(1);
		private final RuleCall c00010TerminalRuleCallID = (RuleCall)c0001AssignmentName.eContents().get(0);
		private final Keyword c001KeywordLeftCurlyBracket = (Keyword)c00Group.eContents().get(1);
		private final Assignment c01AssignmentElements = (Assignment)c0Group.eContents().get(1);
		private final RuleCall c010ParserRuleCallElement = (RuleCall)c01AssignmentElements.eContents().get(0);
		private final Keyword c1KeywordRightCurlyBracket = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Group ele000Group() { return c000Group; }

		// not supported
		public Keyword ele0000KeywordModel() { return c0000KeywordModel; }

		// not supported
		public Assignment ele0001AssignmentName() { return c0001AssignmentName; }

		// not supported
		public RuleCall ele00010TerminalRuleCallID() { return c00010TerminalRuleCallID; }

		// not supported
		public Keyword ele001KeywordLeftCurlyBracket() { return c001KeywordLeftCurlyBracket; }

		// not supported
		public Assignment ele01AssignmentElements() { return c01AssignmentElements; }

		// not supported
		public RuleCall ele010ParserRuleCallElement() { return c010ParserRuleCallElement; }

		// not supported
		public Keyword ele1KeywordRightCurlyBracket() { return c1KeywordRightCurlyBracket; }
	}

	public class ElementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordElement = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallID = (RuleCall)c1AssignmentName.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordElement() { return c0KeywordElement; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10TerminalRuleCallID() { return c10TerminalRuleCallID; }
	}
	
	private ModelElements pModel;
	private ElementElements pElement;
	
	private final GrammarProvider grammarProvider;

	private BaseInheritanceTestLanguageGrammarAccess superGrammarAccess;

	@Inject
	public InheritanceTestLanguageGrammarAccess(GrammarProvider grammarProvider, BaseInheritanceTestLanguageGrammarAccess superGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.superGrammarAccess = superGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public BaseInheritanceTestLanguageGrammarAccess getSuperGrammarAccess() {
		return superGrammarAccess;
	}

	
	// not supported
	public ModelElements prModel() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	} 

	// not supported
	public ElementElements prElement() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	} 

	// not supported
	public TerminalRule trID() {
		return superGrammarAccess.trID();
	} 

	// not supported
	public TerminalRule trINT() {
		return superGrammarAccess.trINT();
	} 

	// not supported
	public TerminalRule trSTRING() {
		return superGrammarAccess.trSTRING();
	} 

	// not supported
	public TerminalRule trML_COMMENT() {
		return superGrammarAccess.trML_COMMENT();
	} 

	// not supported
	public TerminalRule trSL_COMMENT() {
		return superGrammarAccess.trSL_COMMENT();
	} 

	// not supported
	public TerminalRule trWS() {
		return superGrammarAccess.trWS();
	} 

	// not supported
	public TerminalRule trANY_OTHER() {
		return superGrammarAccess.trANY_OTHER();
	} 
}
