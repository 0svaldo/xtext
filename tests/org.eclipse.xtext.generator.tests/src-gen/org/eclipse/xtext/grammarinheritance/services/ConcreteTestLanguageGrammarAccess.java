/*
* generated by Xtext
*/

package org.eclipse.xtext.grammarinheritance.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.grammarinheritance.services.AbstractTestLanguageGrammarAccess;

@Singleton
public class ConcreteTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class RootRuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RootRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallConcreteParserRule = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallCallOverridenParserRule = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall c2ParserRuleCallCallExtendedParserRule = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall c3ParserRuleCallOverridableParserRule2 = (RuleCall)cAlternatives.eContents().get(3);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallConcreteParserRule() { return c0ParserRuleCallConcreteParserRule; }

		// not supported
		public RuleCall ele1ParserRuleCallCallOverridenParserRule() { return c1ParserRuleCallCallOverridenParserRule; }

		// not supported
		public RuleCall ele2ParserRuleCallCallExtendedParserRule() { return c2ParserRuleCallCallExtendedParserRule; }

		// not supported
		public RuleCall ele3ParserRuleCallOverridableParserRule2() { return c3ParserRuleCallOverridableParserRule2; }
	}

	public class ConcreteParserRuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConcreteParserRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordModel = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentMagicNumber = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallREAL = (RuleCall)c1AssignmentMagicNumber.eContents().get(0);
		private final Keyword c2KeywordColon = (Keyword)cGroup.eContents().get(2);
		private final Assignment c3AssignmentElements = (Assignment)cGroup.eContents().get(3);
		private final RuleCall c30ParserRuleCallInheritedParserRule = (RuleCall)c3AssignmentElements.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordModel() { return c0KeywordModel; }

		// not supported
		public Assignment ele1AssignmentMagicNumber() { return c1AssignmentMagicNumber; }

		// not supported
		public RuleCall ele10TerminalRuleCallREAL() { return c10TerminalRuleCallREAL; }

		// not supported
		public Keyword ele2KeywordColon() { return c2KeywordColon; }

		// not supported
		public Assignment ele3AssignmentElements() { return c3AssignmentElements; }

		// not supported
		public RuleCall ele30ParserRuleCallInheritedParserRule() { return c30ParserRuleCallInheritedParserRule; }
	}

	public class OverridableParserRuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OverridableParserRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordOverriddenelement = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallID = (RuleCall)c1AssignmentName.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordOverriddenelement() { return c0KeywordOverriddenelement; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10TerminalRuleCallID() { return c10TerminalRuleCallID; }
	}

	public class CallOverridenParserRuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CallOverridenParserRule");
		private final Assignment cAssignmentCall = (Assignment)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallAbstractCallOverridenParserRule = (RuleCall)cAssignmentCall.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Assignment eleAssignmentCall() { return cAssignmentCall; }

		// not supported
		public RuleCall ele0ParserRuleCallAbstractCallOverridenParserRule() { return c0ParserRuleCallAbstractCallOverridenParserRule; }
	}

	public class OverridableParserRule2Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OverridableParserRule2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordOverriddenOtherElement = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallID = (RuleCall)c1AssignmentName.eContents().get(0);
		private final Keyword c2KeywordHyphenMinus = (Keyword)cGroup.eContents().get(2);
		private final Assignment c3AssignmentAge = (Assignment)cGroup.eContents().get(3);
		private final RuleCall c30TerminalRuleCallINT = (RuleCall)c3AssignmentAge.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordOverriddenOtherElement() { return c0KeywordOverriddenOtherElement; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10TerminalRuleCallID() { return c10TerminalRuleCallID; }

		// not supported
		public Keyword ele2KeywordHyphenMinus() { return c2KeywordHyphenMinus; }

		// not supported
		public Assignment ele3AssignmentAge() { return c3AssignmentAge; }

		// not supported
		public RuleCall ele30TerminalRuleCallINT() { return c30TerminalRuleCallINT; }
	}

	public class ExtendableParserRuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtendableParserRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallSubrule1 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallSubrule2 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall c2ParserRuleCallSubrule3 = (RuleCall)cAlternatives.eContents().get(2);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallSubrule1() { return c0ParserRuleCallSubrule1; }

		// not supported
		public RuleCall ele1ParserRuleCallSubrule2() { return c1ParserRuleCallSubrule2; }

		// not supported
		public RuleCall ele2ParserRuleCallSubrule3() { return c2ParserRuleCallSubrule3; }
	}

	public class Subrule1Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subrule1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordSubrule1 = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallID = (RuleCall)c1AssignmentName.eContents().get(0);
		private final Assignment c2AssignmentSub1 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall c20TerminalRuleCallID = (RuleCall)c2AssignmentSub1.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordSubrule1() { return c0KeywordSubrule1; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10TerminalRuleCallID() { return c10TerminalRuleCallID; }

		// not supported
		public Assignment ele2AssignmentSub1() { return c2AssignmentSub1; }

		// not supported
		public RuleCall ele20TerminalRuleCallID() { return c20TerminalRuleCallID; }
	}

	public class Subrule2Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subrule2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordSubrule3 = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallID = (RuleCall)c1AssignmentName.eContents().get(0);
		private final Assignment c2AssignmentSub2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall c20TerminalRuleCallSTRING = (RuleCall)c2AssignmentSub2.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordSubrule3() { return c0KeywordSubrule3; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10TerminalRuleCallID() { return c10TerminalRuleCallID; }

		// not supported
		public Assignment ele2AssignmentSub2() { return c2AssignmentSub2; }

		// not supported
		public RuleCall ele20TerminalRuleCallSTRING() { return c20TerminalRuleCallSTRING; }
	}

	public class Subrule3Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subrule3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordSubrule3 = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallID = (RuleCall)c1AssignmentName.eContents().get(0);
		private final Assignment c2AssignmentSub1 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall c20TerminalRuleCallINT = (RuleCall)c2AssignmentSub1.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordSubrule3() { return c0KeywordSubrule3; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10TerminalRuleCallID() { return c10TerminalRuleCallID; }

		// not supported
		public Assignment ele2AssignmentSub1() { return c2AssignmentSub1; }

		// not supported
		public RuleCall ele20TerminalRuleCallINT() { return c20TerminalRuleCallINT; }
	}

	public class CallExtendedParserRuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CallExtendedParserRule");
		private final Assignment cAssignmentCall = (Assignment)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallAbstractCallExtendedParserRule = (RuleCall)cAssignmentCall.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Assignment eleAssignmentCall() { return cAssignmentCall; }

		// not supported
		public RuleCall ele0ParserRuleCallAbstractCallExtendedParserRule() { return c0ParserRuleCallAbstractCallExtendedParserRule; }
	}
	
	private RootRuleElements pRootRule;
	private ConcreteParserRuleElements pConcreteParserRule;
	private OverridableParserRuleElements pOverridableParserRule;
	private CallOverridenParserRuleElements pCallOverridenParserRule;
	private OverridableParserRule2Elements pOverridableParserRule2;
	private ExtendableParserRuleElements pExtendableParserRule;
	private Subrule1Elements pSubrule1;
	private Subrule2Elements pSubrule2;
	private Subrule3Elements pSubrule3;
	private CallExtendedParserRuleElements pCallExtendedParserRule;
	
	private final GrammarProvider grammarProvider;

	private AbstractTestLanguageGrammarAccess abstractTestLanguageGrammarAccess;

	@Inject
	public ConcreteTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		AbstractTestLanguageGrammarAccess abstractTestLanguageGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.abstractTestLanguageGrammarAccess = abstractTestLanguageGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public AbstractTestLanguageGrammarAccess getAbstractTestLanguageGrammarAccess() {
		return abstractTestLanguageGrammarAccess;
	}

	
	// not supported
	public RootRuleElements prRootRule() {
		return (pRootRule != null) ? pRootRule : (pRootRule = new RootRuleElements());
	} 

	// not supported
	public ConcreteParserRuleElements prConcreteParserRule() {
		return (pConcreteParserRule != null) ? pConcreteParserRule : (pConcreteParserRule = new ConcreteParserRuleElements());
	} 

	// not supported
	public OverridableParserRuleElements prOverridableParserRule() {
		return (pOverridableParserRule != null) ? pOverridableParserRule : (pOverridableParserRule = new OverridableParserRuleElements());
	} 

	// not supported
	public CallOverridenParserRuleElements prCallOverridenParserRule() {
		return (pCallOverridenParserRule != null) ? pCallOverridenParserRule : (pCallOverridenParserRule = new CallOverridenParserRuleElements());
	} 

	// not supported
	public OverridableParserRule2Elements prOverridableParserRule2() {
		return (pOverridableParserRule2 != null) ? pOverridableParserRule2 : (pOverridableParserRule2 = new OverridableParserRule2Elements());
	} 

	// not supported
	public ExtendableParserRuleElements prExtendableParserRule() {
		return (pExtendableParserRule != null) ? pExtendableParserRule : (pExtendableParserRule = new ExtendableParserRuleElements());
	} 

	// not supported
	public Subrule1Elements prSubrule1() {
		return (pSubrule1 != null) ? pSubrule1 : (pSubrule1 = new Subrule1Elements());
	} 

	// not supported
	public Subrule2Elements prSubrule2() {
		return (pSubrule2 != null) ? pSubrule2 : (pSubrule2 = new Subrule2Elements());
	} 

	// not supported
	public Subrule3Elements prSubrule3() {
		return (pSubrule3 != null) ? pSubrule3 : (pSubrule3 = new Subrule3Elements());
	} 

	// not supported
	public CallExtendedParserRuleElements prCallExtendedParserRule() {
		return (pCallExtendedParserRule != null) ? pCallExtendedParserRule : (pCallExtendedParserRule = new CallExtendedParserRuleElements());
	} 

	// not supported
	public org.eclipse.xtext.grammarinheritance.services.AbstractTestLanguageGrammarAccess.InheritedParserRuleElements prInheritedParserRule() {
		return abstractTestLanguageGrammarAccess.prInheritedParserRule();
	} 

	// not supported
	public org.eclipse.xtext.grammarinheritance.services.AbstractTestLanguageGrammarAccess.AbstractCallOverridenParserRuleElements prAbstractCallOverridenParserRule() {
		return abstractTestLanguageGrammarAccess.prAbstractCallOverridenParserRule();
	} 

	// not supported
	public org.eclipse.xtext.grammarinheritance.services.AbstractTestLanguageGrammarAccess.AbstractCallExtendedParserRuleElements prAbstractCallExtendedParserRule() {
		return abstractTestLanguageGrammarAccess.prAbstractCallExtendedParserRule();
	} 

	// not supported
	public TerminalRule trREAL() {
		return abstractTestLanguageGrammarAccess.trREAL();
	} 

	// not supported
	public TerminalRule trID() {
		return abstractTestLanguageGrammarAccess.trID();
	} 

	// not supported
	public TerminalRule trINT() {
		return abstractTestLanguageGrammarAccess.trINT();
	} 

	// not supported
	public TerminalRule trSTRING() {
		return abstractTestLanguageGrammarAccess.trSTRING();
	} 

	// not supported
	public TerminalRule trML_COMMENT() {
		return abstractTestLanguageGrammarAccess.trML_COMMENT();
	} 

	// not supported
	public TerminalRule trSL_COMMENT() {
		return abstractTestLanguageGrammarAccess.trSL_COMMENT();
	} 

	// not supported
	public TerminalRule trWS() {
		return abstractTestLanguageGrammarAccess.trWS();
	} 

	// not supported
	public TerminalRule trANY_OTHER() {
		return abstractTestLanguageGrammarAccess.trANY_OTHER();
	} 
}
