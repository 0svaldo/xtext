/*
* generated by Xtext
*/
grammar InternalConcreteTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.grammarinheritance.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.grammarinheritance.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.grammarinheritance.services.ConcreteTestLanguageGrammarAccess;

}

@parser::members {
 
 	private ConcreteTestLanguageGrammarAccess grammarAccess;
 	
    public InternalConcreteTestLanguageParser(TokenStream input, IAstFactory factory, ConcreteTestLanguageGrammarAccess grammarAccess) {
        super(input, factory, grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/xtext/grammarinheritance/parser/antlr/internal/InternalConcreteTestLanguage.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "RootRule";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRootRule
entryRuleRootRule returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prRootRule().getRule(), currentNode); }
	 iv_ruleRootRule=ruleRootRule 
	 { $current=$iv_ruleRootRule.current; } 
	 EOF 
;

// Rule RootRule
ruleRootRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.prRootRule().ele0ParserRuleCallConcreteParserRule(), currentNode); 
    }
    this_ConcreteParserRule_0=ruleConcreteParserRule
    { 
        $current = $this_ConcreteParserRule_0.current; 
        currentNode = currentNode.getParent();
    }

    { 
    createLeafNode(grammarAccess.prRootRule().ele0ParserRuleCallConcreteParserRule(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.prRootRule().ele1ParserRuleCallCallOverridenParserRule(), currentNode); 
    }
    this_CallOverridenParserRule_1=ruleCallOverridenParserRule
    { 
        $current = $this_CallOverridenParserRule_1.current; 
        currentNode = currentNode.getParent();
    }

    { 
    createLeafNode(grammarAccess.prRootRule().ele1ParserRuleCallCallOverridenParserRule(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.prRootRule().ele2ParserRuleCallCallExtendedParserRule(), currentNode); 
    }
    this_CallExtendedParserRule_2=ruleCallExtendedParserRule
    { 
        $current = $this_CallExtendedParserRule_2.current; 
        currentNode = currentNode.getParent();
    }

    { 
    createLeafNode(grammarAccess.prRootRule().ele2ParserRuleCallCallExtendedParserRule(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.prRootRule().ele3ParserRuleCallOverridableParserRule2(), currentNode); 
    }
    this_OverridableParserRule2_3=ruleOverridableParserRule2
    { 
        $current = $this_OverridableParserRule2_3.current; 
        currentNode = currentNode.getParent();
    }

    { 
    createLeafNode(grammarAccess.prRootRule().ele3ParserRuleCallOverridableParserRule2(), null); 
    }
);





// Entry rule entryRuleConcreteParserRule
entryRuleConcreteParserRule returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prConcreteParserRule().getRule(), currentNode); }
	 iv_ruleConcreteParserRule=ruleConcreteParserRule 
	 { $current=$iv_ruleConcreteParserRule.current; } 
	 EOF 
;

// Rule ConcreteParserRule
ruleConcreteParserRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('model' 
    {
        createLeafNode(grammarAccess.prConcreteParserRule().ele0KeywordModel(), null); 
    }
(	
	
	    lv_magicNumber_1=	RULE_REAL
	{
		createLeafNode(grammarAccess.prConcreteParserRule().ele10TerminalRuleCallREAL(), "magicNumber"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prConcreteParserRule().getRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "magicNumber", lv_magicNumber_1, "REAL", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)':' 
    {
        createLeafNode(grammarAccess.prConcreteParserRule().ele2KeywordColon(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prConcreteParserRule().ele30ParserRuleCallInheritedParserRule(), currentNode); 
	    }
	    lv_elements_3=ruleInheritedParserRule 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prConcreteParserRule().getRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "elements", lv_elements_3, "InheritedParserRule", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*);





// Entry rule entryRuleOverridableParserRule
entryRuleOverridableParserRule returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prOverridableParserRule().getRule(), currentNode); }
	 iv_ruleOverridableParserRule=ruleOverridableParserRule 
	 { $current=$iv_ruleOverridableParserRule.current; } 
	 EOF 
;

// Rule OverridableParserRule
ruleOverridableParserRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('overriddenelement' 
    {
        createLeafNode(grammarAccess.prOverridableParserRule().ele0KeywordOverriddenelement(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.prOverridableParserRule().ele10TerminalRuleCallID(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prOverridableParserRule().getRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleCallOverridenParserRule
entryRuleCallOverridenParserRule returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prCallOverridenParserRule().getRule(), currentNode); }
	 iv_ruleCallOverridenParserRule=ruleCallOverridenParserRule 
	 { $current=$iv_ruleCallOverridenParserRule.current; } 
	 EOF 
;

// Rule CallOverridenParserRule
ruleCallOverridenParserRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prCallOverridenParserRule().ele0ParserRuleCallAbstractCallOverridenParserRule(), currentNode); 
	    }
	    lv_call_0=ruleAbstractCallOverridenParserRule 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prCallOverridenParserRule().getRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "call", lv_call_0, "AbstractCallOverridenParserRule", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
);





// Entry rule entryRuleOverridableParserRule2
entryRuleOverridableParserRule2 returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prOverridableParserRule2().getRule(), currentNode); }
	 iv_ruleOverridableParserRule2=ruleOverridableParserRule2 
	 { $current=$iv_ruleOverridableParserRule2.current; } 
	 EOF 
;

// Rule OverridableParserRule2
ruleOverridableParserRule2 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('overridden other element' 
    {
        createLeafNode(grammarAccess.prOverridableParserRule2().ele0KeywordOverriddenOtherElement(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.prOverridableParserRule2().ele10TerminalRuleCallID(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prOverridableParserRule2().getRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'-' 
    {
        createLeafNode(grammarAccess.prOverridableParserRule2().ele2KeywordHyphenMinus(), null); 
    }
(	
	
	    lv_age_3=	RULE_INT
	{
		createLeafNode(grammarAccess.prOverridableParserRule2().ele30TerminalRuleCallINT(), "age"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prOverridableParserRule2().getRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "age", lv_age_3, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleExtendableParserRule
entryRuleExtendableParserRule returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prExtendableParserRule().getRule(), currentNode); }
	 iv_ruleExtendableParserRule=ruleExtendableParserRule 
	 { $current=$iv_ruleExtendableParserRule.current; } 
	 EOF 
;

// Rule ExtendableParserRule
ruleExtendableParserRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.prExtendableParserRule().ele0ParserRuleCallSubrule1(), currentNode); 
    }
    this_Subrule1_0=ruleSubrule1
    { 
        $current = $this_Subrule1_0.current; 
        currentNode = currentNode.getParent();
    }

    { 
    createLeafNode(grammarAccess.prExtendableParserRule().ele0ParserRuleCallSubrule1(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.prExtendableParserRule().ele1ParserRuleCallSubrule2(), currentNode); 
    }
    this_Subrule2_1=ruleSubrule2
    { 
        $current = $this_Subrule2_1.current; 
        currentNode = currentNode.getParent();
    }

    { 
    createLeafNode(grammarAccess.prExtendableParserRule().ele1ParserRuleCallSubrule2(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.prExtendableParserRule().ele2ParserRuleCallSubrule3(), currentNode); 
    }
    this_Subrule3_2=ruleSubrule3
    { 
        $current = $this_Subrule3_2.current; 
        currentNode = currentNode.getParent();
    }

    { 
    createLeafNode(grammarAccess.prExtendableParserRule().ele2ParserRuleCallSubrule3(), null); 
    }
);





// Entry rule entryRuleSubrule1
entryRuleSubrule1 returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prSubrule1().getRule(), currentNode); }
	 iv_ruleSubrule1=ruleSubrule1 
	 { $current=$iv_ruleSubrule1.current; } 
	 EOF 
;

// Rule Subrule1
ruleSubrule1 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('subrule1' 
    {
        createLeafNode(grammarAccess.prSubrule1().ele0KeywordSubrule1(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.prSubrule1().ele10TerminalRuleCallID(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prSubrule1().getRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_sub1_2=	RULE_ID
	{
		createLeafNode(grammarAccess.prSubrule1().ele20TerminalRuleCallID(), "sub1"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prSubrule1().getRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "sub1", lv_sub1_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleSubrule2
entryRuleSubrule2 returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prSubrule2().getRule(), currentNode); }
	 iv_ruleSubrule2=ruleSubrule2 
	 { $current=$iv_ruleSubrule2.current; } 
	 EOF 
;

// Rule Subrule2
ruleSubrule2 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('subrule3' 
    {
        createLeafNode(grammarAccess.prSubrule2().ele0KeywordSubrule3(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.prSubrule2().ele10TerminalRuleCallID(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prSubrule2().getRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_sub2_2=	RULE_STRING
	{
		createLeafNode(grammarAccess.prSubrule2().ele20TerminalRuleCallSTRING(), "sub2"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prSubrule2().getRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "sub2", lv_sub2_2, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleSubrule3
entryRuleSubrule3 returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prSubrule3().getRule(), currentNode); }
	 iv_ruleSubrule3=ruleSubrule3 
	 { $current=$iv_ruleSubrule3.current; } 
	 EOF 
;

// Rule Subrule3
ruleSubrule3 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('subrule3' 
    {
        createLeafNode(grammarAccess.prSubrule3().ele0KeywordSubrule3(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.prSubrule3().ele10TerminalRuleCallID(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prSubrule3().getRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_sub1_2=	RULE_INT
	{
		createLeafNode(grammarAccess.prSubrule3().ele20TerminalRuleCallINT(), "sub1"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prSubrule3().getRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "sub1", lv_sub1_2, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleCallExtendedParserRule
entryRuleCallExtendedParserRule returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prCallExtendedParserRule().getRule(), currentNode); }
	 iv_ruleCallExtendedParserRule=ruleCallExtendedParserRule 
	 { $current=$iv_ruleCallExtendedParserRule.current; } 
	 EOF 
;

// Rule CallExtendedParserRule
ruleCallExtendedParserRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prCallExtendedParserRule().ele0ParserRuleCallAbstractCallExtendedParserRule(), currentNode); 
	    }
	    lv_call_0=ruleAbstractCallExtendedParserRule 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prCallExtendedParserRule().getRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "call", lv_call_0, "AbstractCallExtendedParserRule", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
);





// Entry rule entryRuleInheritedParserRule
entryRuleInheritedParserRule returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prInheritedParserRule().getRule(), currentNode); }
	 iv_ruleInheritedParserRule=ruleInheritedParserRule 
	 { $current=$iv_ruleInheritedParserRule.current; } 
	 EOF 
;

// Rule InheritedParserRule
ruleInheritedParserRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('element' 
    {
        createLeafNode(grammarAccess.prInheritedParserRule().ele0KeywordElement(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.prInheritedParserRule().ele10TerminalRuleCallID(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prInheritedParserRule().getRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleAbstractCallOverridenParserRule
entryRuleAbstractCallOverridenParserRule returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prAbstractCallOverridenParserRule().getRule(), currentNode); }
	 iv_ruleAbstractCallOverridenParserRule=ruleAbstractCallOverridenParserRule 
	 { $current=$iv_ruleAbstractCallOverridenParserRule.current; } 
	 EOF 
;

// Rule AbstractCallOverridenParserRule
ruleAbstractCallOverridenParserRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('overridemodel' 
    {
        createLeafNode(grammarAccess.prAbstractCallOverridenParserRule().ele0KeywordOverridemodel(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prAbstractCallOverridenParserRule().ele10ParserRuleCallOverridableParserRule(), currentNode); 
	    }
	    lv_elements_1=ruleOverridableParserRule 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prAbstractCallOverridenParserRule().getRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "elements", lv_elements_1, "OverridableParserRule", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*);





// Entry rule entryRuleAbstractCallExtendedParserRule
entryRuleAbstractCallExtendedParserRule returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prAbstractCallExtendedParserRule().getRule(), currentNode); }
	 iv_ruleAbstractCallExtendedParserRule=ruleAbstractCallExtendedParserRule 
	 { $current=$iv_ruleAbstractCallExtendedParserRule.current; } 
	 EOF 
;

// Rule AbstractCallExtendedParserRule
ruleAbstractCallExtendedParserRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('extendedmodel' 
    {
        createLeafNode(grammarAccess.prAbstractCallExtendedParserRule().ele0KeywordExtendedmodel(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prAbstractCallExtendedParserRule().ele10ParserRuleCallExtendableParserRule(), currentNode); 
	    }
	    lv_elements_1=ruleExtendableParserRule 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prAbstractCallExtendedParserRule().getRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "elements", lv_elements_1, "ExtendableParserRule", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*);




RULE_REAL : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'\u00F6'|'\u00E4'|'\u00FC'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('\"' ('\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')|~(('\\'|'\"')))* '\"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


