/*
* generated by Xtext
*/
package org.eclipse.xtext.grammarinheritance.parseTreeConstruction;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;
import org.eclipse.xtext.grammarinheritance.services.ConcreteTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class ConcreteTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private ConcreteTestLanguageGrammarAccess grammarAccess;
	
	@Override
	protected Solution internalSerialize(EObject obj) {
		IInstanceDescription inst = getDescr(obj);
		Solution s;
		if(inst.isInstanceOf(grammarAccess.getRootRuleRule().getType().getClassifier()) && (s = new RootRule_Alternatives(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getConcreteParserRuleRule().getType().getClassifier()) && (s = new ConcreteParserRule_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getOverridableParserRuleRule().getType().getClassifier()) && (s = new OverridableParserRule_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getCallOverridenParserRuleRule().getType().getClassifier()) && (s = new CallOverridenParserRule_Assignment_call(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getOverridableParserRule2Rule().getType().getClassifier()) && (s = new OverridableParserRule2_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getExtendableParserRuleRule().getType().getClassifier()) && (s = new ExtendableParserRule_Alternatives(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getSubrule1Rule().getType().getClassifier()) && (s = new Subrule1_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getSubrule2Rule().getType().getClassifier()) && (s = new Subrule2_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getSubrule3Rule().getType().getClassifier()) && (s = new Subrule3_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getCallExtendedParserRuleRule().getType().getClassifier()) && (s = new CallExtendedParserRule_Assignment_call(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getInheritedParserRuleRule().getType().getClassifier()) && (s = new InheritedParserRule_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getAbstractCallOverridenParserRuleRule().getType().getClassifier()) && (s = new AbstractCallOverridenParserRule_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getAbstractCallExtendedParserRuleRule().getType().getClassifier()) && (s = new AbstractCallExtendedParserRule_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		return null;
	}
	

/************ begin Rule RootRule ****************
 *
 * RootRule:
 *   ConcreteParserRule|CallOverridenParserRule|CallExtendedParserRule|OverridableParserRule2;
 *
 **/

// ConcreteParserRule|CallOverridenParserRule|CallExtendedParserRule|OverridableParserRule2
protected class RootRule_Alternatives extends AlternativesToken {

	public RootRule_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRootRuleAccess().getAlternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new RootRule_0_RuleCall_ConcreteParserRule(current, this);
			case 1: return new RootRule_1_RuleCall_CallOverridenParserRule(current, this);
			case 2: return new RootRule_2_RuleCall_CallExtendedParserRule(current, this);
			case 3: return new RootRule_3_RuleCall_OverridableParserRule2(current, this);
			default: return null;
		}
	}
}

// ConcreteParserRule
protected class RootRule_0_RuleCall_ConcreteParserRule extends RuleCallToken {
	
	public RootRule_0_RuleCall_ConcreteParserRule(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRootRuleAccess().getConcreteParserRuleParserRuleCall_0();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(ConcreteParserRule_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getConcreteParserRuleRule().getType().getClassifier())) return null;
		return new ConcreteParserRule_Group(current, this).firstSolution();
	}
}

// CallOverridenParserRule
protected class RootRule_1_RuleCall_CallOverridenParserRule extends RuleCallToken {
	
	public RootRule_1_RuleCall_CallOverridenParserRule(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRootRuleAccess().getCallOverridenParserRuleParserRuleCall_1();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(CallOverridenParserRule_Assignment_call.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCallOverridenParserRuleRule().getType().getClassifier())) return null;
		return new CallOverridenParserRule_Assignment_call(current, this).firstSolution();
	}
}

// CallExtendedParserRule
protected class RootRule_2_RuleCall_CallExtendedParserRule extends RuleCallToken {
	
	public RootRule_2_RuleCall_CallExtendedParserRule(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRootRuleAccess().getCallExtendedParserRuleParserRuleCall_2();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(CallExtendedParserRule_Assignment_call.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCallExtendedParserRuleRule().getType().getClassifier())) return null;
		return new CallExtendedParserRule_Assignment_call(current, this).firstSolution();
	}
}

// OverridableParserRule2
protected class RootRule_3_RuleCall_OverridableParserRule2 extends RuleCallToken {
	
	public RootRule_3_RuleCall_OverridableParserRule2(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRootRuleAccess().getOverridableParserRule2ParserRuleCall_3();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(OverridableParserRule2_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getOverridableParserRule2Rule().getType().getClassifier())) return null;
		return new OverridableParserRule2_Group(current, this).firstSolution();
	}
}


/************ end Rule RootRule ****************/


/************ begin Rule ConcreteParserRule ****************
 *
 * ConcreteParserRule:
 *   "model" magicNumber=REAL ":" (elements+=InheritedParserRule)*;
 *
 **/

// "model" magicNumber=REAL ":" (elements+=InheritedParserRule)*
protected class ConcreteParserRule_Group extends GroupToken {
	
	public ConcreteParserRule_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConcreteParserRuleAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new ConcreteParserRule_3_Assignment_elements(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new ConcreteParserRule_2_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new ConcreteParserRule_1_Assignment_magicNumber(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				while(s3 != null) {
					Solution s4 = new ConcreteParserRule_0_Keyword_model(s3.getCurrent(), s3.getPredecessor()).firstSolution();
					if(s4 != null) {
						last = s4.getPredecessor();
						return s4;
					} else {
						s3 = s3.getPredecessor().nextSolution(this,s3);
					}
				}
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "model"
protected class ConcreteParserRule_0_Keyword_model extends KeywordToken  {
	
	public ConcreteParserRule_0_Keyword_model(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConcreteParserRuleAccess().getModelKeyword_0();
	}	
}

// magicNumber=REAL
protected class ConcreteParserRule_1_Assignment_magicNumber extends AssignmentToken  {
	
	public ConcreteParserRule_1_Assignment_magicNumber(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConcreteParserRuleAccess().getMagicNumberAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("magicNumber",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("magicNumber");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getConcreteParserRuleAccess().getMagicNumberREALTerminalRuleCall_1_0();
			return new Solution(obj);
		}
		return null;
	}
}

// ":"
protected class ConcreteParserRule_2_Keyword extends KeywordToken  {
	
	public ConcreteParserRule_2_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConcreteParserRuleAccess().getColonKeyword_2();
	}	
}

// (elements+=InheritedParserRule)*
protected class ConcreteParserRule_3_Assignment_elements extends AssignmentToken  {
	
	public ConcreteParserRule_3_Assignment_elements(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConcreteParserRuleAccess().getElementsAssignment_3();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("elements",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");

		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInheritedParserRuleRule().getType().getClassifier())) {
				Solution s = new InheritedParserRule_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}


/************ end Rule ConcreteParserRule ****************/


/************ begin Rule OverridableParserRule ****************
 *
 * OverridableParserRule returns mm::AType:
 *   "overriddenelement" name=ID;
 *
 **/

// "overriddenelement" name=ID
protected class OverridableParserRule_Group extends GroupToken {
	
	public OverridableParserRule_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOverridableParserRuleAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new OverridableParserRule_1_Assignment_name(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new OverridableParserRule_0_Keyword_overriddenelement(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// "overriddenelement"
protected class OverridableParserRule_0_Keyword_overriddenelement extends KeywordToken  {
	
	public OverridableParserRule_0_Keyword_overriddenelement(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOverridableParserRuleAccess().getOverriddenelementKeyword_0();
	}	
}

// name=ID
protected class OverridableParserRule_1_Assignment_name extends AssignmentToken  {
	
	public OverridableParserRule_1_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOverridableParserRuleAccess().getNameAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getOverridableParserRuleAccess().getNameIDTerminalRuleCall_1_0();
			return new Solution(obj);
		}
		return null;
	}
}


/************ end Rule OverridableParserRule ****************/


/************ begin Rule CallOverridenParserRule ****************
 *
 * CallOverridenParserRule:
 *   call=AbstractCallOverridenParserRule;
 *
 **/

// call=AbstractCallOverridenParserRule
protected class CallOverridenParserRule_Assignment_call extends AssignmentToken  {
	
	public CallOverridenParserRule_Assignment_call(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCallOverridenParserRuleAccess().getCallAssignment();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("call",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("call");

		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbstractCallOverridenParserRuleRule().getType().getClassifier())) {
				Solution s = new AbstractCallOverridenParserRule_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

/************ end Rule CallOverridenParserRule ****************/


/************ begin Rule OverridableParserRule2 ****************
 *
 * OverridableParserRule2 returns AType2:
 *   "overridden other element" name=ID "-" age=INT;
 *
 **/

// "overridden other element" name=ID "-" age=INT
protected class OverridableParserRule2_Group extends GroupToken {
	
	public OverridableParserRule2_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOverridableParserRule2Access().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new OverridableParserRule2_3_Assignment_age(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new OverridableParserRule2_2_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new OverridableParserRule2_1_Assignment_name(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				while(s3 != null) {
					Solution s4 = new OverridableParserRule2_0_Keyword_overriddenotherelement(s3.getCurrent(), s3.getPredecessor()).firstSolution();
					if(s4 != null) {
						last = s4.getPredecessor();
						return s4;
					} else {
						s3 = s3.getPredecessor().nextSolution(this,s3);
					}
				}
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "overridden other element"
protected class OverridableParserRule2_0_Keyword_overriddenotherelement extends KeywordToken  {
	
	public OverridableParserRule2_0_Keyword_overriddenotherelement(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOverridableParserRule2Access().getOverriddenOtherElementKeyword_0();
	}	
}

// name=ID
protected class OverridableParserRule2_1_Assignment_name extends AssignmentToken  {
	
	public OverridableParserRule2_1_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOverridableParserRule2Access().getNameAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getOverridableParserRule2Access().getNameIDTerminalRuleCall_1_0();
			return new Solution(obj);
		}
		return null;
	}
}

// "-"
protected class OverridableParserRule2_2_Keyword extends KeywordToken  {
	
	public OverridableParserRule2_2_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOverridableParserRule2Access().getHyphenMinusKeyword_2();
	}	
}

// age=INT
protected class OverridableParserRule2_3_Assignment_age extends AssignmentToken  {
	
	public OverridableParserRule2_3_Assignment_age(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOverridableParserRule2Access().getAgeAssignment_3();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("age",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("age");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getOverridableParserRule2Access().getAgeINTTerminalRuleCall_3_0();
			return new Solution(obj);
		}
		return null;
	}
}


/************ end Rule OverridableParserRule2 ****************/


/************ begin Rule ExtendableParserRule ****************
 *
 * ExtendableParserRule returns mm::AType:
 *   Subrule1|Subrule2|Subrule3;
 *
 **/

// Subrule1|Subrule2|Subrule3
protected class ExtendableParserRule_Alternatives extends AlternativesToken {

	public ExtendableParserRule_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getExtendableParserRuleAccess().getAlternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new ExtendableParserRule_0_RuleCall_Subrule1(current, this);
			case 1: return new ExtendableParserRule_1_RuleCall_Subrule2(current, this);
			case 2: return new ExtendableParserRule_2_RuleCall_Subrule3(current, this);
			default: return null;
		}
	}
}

// Subrule1
protected class ExtendableParserRule_0_RuleCall_Subrule1 extends RuleCallToken {
	
	public ExtendableParserRule_0_RuleCall_Subrule1(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExtendableParserRuleAccess().getSubrule1ParserRuleCall_0();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(Subrule1_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSubrule1Rule().getType().getClassifier())) return null;
		return new Subrule1_Group(current, this).firstSolution();
	}
}

// Subrule2
protected class ExtendableParserRule_1_RuleCall_Subrule2 extends RuleCallToken {
	
	public ExtendableParserRule_1_RuleCall_Subrule2(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExtendableParserRuleAccess().getSubrule2ParserRuleCall_1();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(Subrule2_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSubrule2Rule().getType().getClassifier())) return null;
		return new Subrule2_Group(current, this).firstSolution();
	}
}

// Subrule3
protected class ExtendableParserRule_2_RuleCall_Subrule3 extends RuleCallToken {
	
	public ExtendableParserRule_2_RuleCall_Subrule3(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExtendableParserRuleAccess().getSubrule3ParserRuleCall_2();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(Subrule3_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSubrule3Rule().getType().getClassifier())) return null;
		return new Subrule3_Group(current, this).firstSolution();
	}
}


/************ end Rule ExtendableParserRule ****************/


/************ begin Rule Subrule1 ****************
 *
 * Subrule1:
 *   "subrule1" name=ID sub1=ID;
 *
 **/

// "subrule1" name=ID sub1=ID
protected class Subrule1_Group extends GroupToken {
	
	public Subrule1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSubrule1Access().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Subrule1_2_Assignment_sub1(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Subrule1_1_Assignment_name(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new Subrule1_0_Keyword_subrule1(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				if(s3 != null) {
					last = s3.getPredecessor();
					return s3;
				} else {
					s2 = s2.getPredecessor().nextSolution(this,s2);
				}
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "subrule1"
protected class Subrule1_0_Keyword_subrule1 extends KeywordToken  {
	
	public Subrule1_0_Keyword_subrule1(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSubrule1Access().getSubrule1Keyword_0();
	}	
}

// name=ID
protected class Subrule1_1_Assignment_name extends AssignmentToken  {
	
	public Subrule1_1_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSubrule1Access().getNameAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSubrule1Access().getNameIDTerminalRuleCall_1_0();
			return new Solution(obj);
		}
		return null;
	}
}

// sub1=ID
protected class Subrule1_2_Assignment_sub1 extends AssignmentToken  {
	
	public Subrule1_2_Assignment_sub1(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSubrule1Access().getSub1Assignment_2();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("sub1",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sub1");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSubrule1Access().getSub1IDTerminalRuleCall_2_0();
			return new Solution(obj);
		}
		return null;
	}
}


/************ end Rule Subrule1 ****************/


/************ begin Rule Subrule2 ****************
 *
 * Subrule2:
 *   "subrule3" name=ID sub2=STRING;
 *
 **/

// "subrule3" name=ID sub2=STRING
protected class Subrule2_Group extends GroupToken {
	
	public Subrule2_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSubrule2Access().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Subrule2_2_Assignment_sub2(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Subrule2_1_Assignment_name(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new Subrule2_0_Keyword_subrule3(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				if(s3 != null) {
					last = s3.getPredecessor();
					return s3;
				} else {
					s2 = s2.getPredecessor().nextSolution(this,s2);
				}
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "subrule3"
protected class Subrule2_0_Keyword_subrule3 extends KeywordToken  {
	
	public Subrule2_0_Keyword_subrule3(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSubrule2Access().getSubrule3Keyword_0();
	}	
}

// name=ID
protected class Subrule2_1_Assignment_name extends AssignmentToken  {
	
	public Subrule2_1_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSubrule2Access().getNameAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSubrule2Access().getNameIDTerminalRuleCall_1_0();
			return new Solution(obj);
		}
		return null;
	}
}

// sub2=STRING
protected class Subrule2_2_Assignment_sub2 extends AssignmentToken  {
	
	public Subrule2_2_Assignment_sub2(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSubrule2Access().getSub2Assignment_2();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("sub2",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sub2");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSubrule2Access().getSub2STRINGTerminalRuleCall_2_0();
			return new Solution(obj);
		}
		return null;
	}
}


/************ end Rule Subrule2 ****************/


/************ begin Rule Subrule3 ****************
 *
 * Subrule3:
 *   "subrule3" name=ID sub1=INT;
 *
 **/

// "subrule3" name=ID sub1=INT
protected class Subrule3_Group extends GroupToken {
	
	public Subrule3_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSubrule3Access().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Subrule3_2_Assignment_sub1(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Subrule3_1_Assignment_name(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new Subrule3_0_Keyword_subrule3(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				if(s3 != null) {
					last = s3.getPredecessor();
					return s3;
				} else {
					s2 = s2.getPredecessor().nextSolution(this,s2);
				}
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "subrule3"
protected class Subrule3_0_Keyword_subrule3 extends KeywordToken  {
	
	public Subrule3_0_Keyword_subrule3(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSubrule3Access().getSubrule3Keyword_0();
	}	
}

// name=ID
protected class Subrule3_1_Assignment_name extends AssignmentToken  {
	
	public Subrule3_1_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSubrule3Access().getNameAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSubrule3Access().getNameIDTerminalRuleCall_1_0();
			return new Solution(obj);
		}
		return null;
	}
}

// sub1=INT
protected class Subrule3_2_Assignment_sub1 extends AssignmentToken  {
	
	public Subrule3_2_Assignment_sub1(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSubrule3Access().getSub1Assignment_2();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("sub1",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sub1");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSubrule3Access().getSub1INTTerminalRuleCall_2_0();
			return new Solution(obj);
		}
		return null;
	}
}


/************ end Rule Subrule3 ****************/


/************ begin Rule CallExtendedParserRule ****************
 *
 * CallExtendedParserRule:
 *   call=AbstractCallExtendedParserRule;
 *
 **/

// call=AbstractCallExtendedParserRule
protected class CallExtendedParserRule_Assignment_call extends AssignmentToken  {
	
	public CallExtendedParserRule_Assignment_call(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCallExtendedParserRuleAccess().getCallAssignment();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("call",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("call");

		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbstractCallExtendedParserRuleRule().getType().getClassifier())) {
				Solution s = new AbstractCallExtendedParserRule_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

/************ end Rule CallExtendedParserRule ****************/


/************ begin Rule InheritedParserRule ****************
 *
 * InheritedParserRule returns mm::AType:
 *   "element" name=ID;
 *
 **/

// "element" name=ID
protected class InheritedParserRule_Group extends GroupToken {
	
	public InheritedParserRule_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInheritedParserRuleAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new InheritedParserRule_1_Assignment_name(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new InheritedParserRule_0_Keyword_element(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// "element"
protected class InheritedParserRule_0_Keyword_element extends KeywordToken  {
	
	public InheritedParserRule_0_Keyword_element(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInheritedParserRuleAccess().getElementKeyword_0();
	}	
}

// name=ID
protected class InheritedParserRule_1_Assignment_name extends AssignmentToken  {
	
	public InheritedParserRule_1_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInheritedParserRuleAccess().getNameAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getInheritedParserRuleAccess().getNameIDTerminalRuleCall_1_0();
			return new Solution(obj);
		}
		return null;
	}
}


/************ end Rule InheritedParserRule ****************/


/************ begin Rule AbstractCallOverridenParserRule ****************
 *
 * AbstractCallOverridenParserRule returns mm::AModel:
 *   "overridemodel" (elements+=OverridableParserRule)*;
 *
 **/

// "overridemodel" (elements+=OverridableParserRule)*
protected class AbstractCallOverridenParserRule_Group extends GroupToken {
	
	public AbstractCallOverridenParserRule_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAbstractCallOverridenParserRuleAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new AbstractCallOverridenParserRule_1_Assignment_elements(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new AbstractCallOverridenParserRule_0_Keyword_overridemodel(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// "overridemodel"
protected class AbstractCallOverridenParserRule_0_Keyword_overridemodel extends KeywordToken  {
	
	public AbstractCallOverridenParserRule_0_Keyword_overridemodel(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAbstractCallOverridenParserRuleAccess().getOverridemodelKeyword_0();
	}	
}

// (elements+=OverridableParserRule)*
protected class AbstractCallOverridenParserRule_1_Assignment_elements extends AssignmentToken  {
	
	public AbstractCallOverridenParserRule_1_Assignment_elements(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAbstractCallOverridenParserRuleAccess().getElementsAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("elements",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");

		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOverridableParserRuleRule().getType().getClassifier())) {
				Solution s = new OverridableParserRule_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}


/************ end Rule AbstractCallOverridenParserRule ****************/


/************ begin Rule AbstractCallExtendedParserRule ****************
 *
 * AbstractCallExtendedParserRule returns mm::AModel:
 *   "extendedmodel" (elements+=ExtendableParserRule)*;
 *
 **/

// "extendedmodel" (elements+=ExtendableParserRule)*
protected class AbstractCallExtendedParserRule_Group extends GroupToken {
	
	public AbstractCallExtendedParserRule_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAbstractCallExtendedParserRuleAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new AbstractCallExtendedParserRule_1_Assignment_elements(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new AbstractCallExtendedParserRule_0_Keyword_extendedmodel(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// "extendedmodel"
protected class AbstractCallExtendedParserRule_0_Keyword_extendedmodel extends KeywordToken  {
	
	public AbstractCallExtendedParserRule_0_Keyword_extendedmodel(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAbstractCallExtendedParserRuleAccess().getExtendedmodelKeyword_0();
	}	
}

// (elements+=ExtendableParserRule)*
protected class AbstractCallExtendedParserRule_1_Assignment_elements extends AssignmentToken  {
	
	public AbstractCallExtendedParserRule_1_Assignment_elements(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAbstractCallExtendedParserRuleAccess().getElementsAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("elements",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");

		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendableParserRuleRule().getType().getClassifier())) {
				Solution s = new ExtendableParserRule_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}


/************ end Rule AbstractCallExtendedParserRule ****************/

}
