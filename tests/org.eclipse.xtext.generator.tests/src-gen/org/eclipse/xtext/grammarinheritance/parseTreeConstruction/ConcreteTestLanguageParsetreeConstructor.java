/*
* generated by Xtext
*/
package org.eclipse.xtext.grammarinheritance.parseTreeConstruction;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor2;

import org.eclipse.xtext.grammarinheritance.services.ConcreteTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class ConcreteTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor2 {
		
	@Inject
	private ConcreteTestLanguageGrammarAccess grammarAccess;
		
	public ConcreteTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken2 getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RootRule_Alternatives(this, this, 0, inst);
			case 1: return new ConcreteParserRule_Group(this, this, 1, inst);
			case 2: return new OverridableParserRule_Group(this, this, 2, inst);
			case 3: return new CallOverridenParserRule_CallAssignment(this, this, 3, inst);
			case 4: return new OverridableParserRule2_Group(this, this, 4, inst);
			case 5: return new ExtendableParserRule_Alternatives(this, this, 5, inst);
			case 6: return new Subrule1_Group(this, this, 6, inst);
			case 7: return new Subrule2_Group(this, this, 7, inst);
			case 8: return new Subrule3_Group(this, this, 8, inst);
			case 9: return new CallExtendedParserRule_CallAssignment(this, this, 9, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule RootRule ****************
 *
 * RootRule:
 *   ConcreteParserRule|CallOverridenParserRule|CallExtendedParserRule|OverridableParserRule2;
 *
 **/

// ConcreteParserRule|CallOverridenParserRule|CallExtendedParserRule|OverridableParserRule2
protected class RootRule_Alternatives extends AlternativesToken {

	public RootRule_Alternatives(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getRootRuleAccess().getAlternatives();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RootRule_ConcreteParserRuleParserRuleCall_0(parent, this, 0, inst);
			case 1: return new RootRule_CallOverridenParserRuleParserRuleCall_1(parent, this, 1, inst);
			case 2: return new RootRule_CallExtendedParserRuleParserRuleCall_2(parent, this, 2, inst);
			case 3: return new RootRule_OverridableParserRule2ParserRuleCall_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRootRuleRule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// ConcreteParserRule
protected class RootRule_ConcreteParserRuleParserRuleCall_0 extends RuleCallToken {
	
	public RootRule_ConcreteParserRuleParserRuleCall_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRootRuleAccess().getConcreteParserRuleParserRuleCall_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcreteParserRule_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ConcreteParserRule_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getConcreteParserRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {	
		switch(index) {
			//default: return (inst.isConsumed()) ? parent.createParentFollower(next,actIndex , index - 0, inst) : null;
			default: return parent.createParentFollower(next,actIndex , index - 0, inst);
		}	
	}	
}

// CallOverridenParserRule
protected class RootRule_CallOverridenParserRuleParserRuleCall_1 extends RuleCallToken {
	
	public RootRule_CallOverridenParserRuleParserRuleCall_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRootRuleAccess().getCallOverridenParserRuleParserRuleCall_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CallOverridenParserRule_CallAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CallOverridenParserRule_CallAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCallOverridenParserRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {	
		switch(index) {
			//default: return (inst.isConsumed()) ? parent.createParentFollower(next,actIndex , index - 0, inst) : null;
			default: return parent.createParentFollower(next,actIndex , index - 0, inst);
		}	
	}	
}

// CallExtendedParserRule
protected class RootRule_CallExtendedParserRuleParserRuleCall_2 extends RuleCallToken {
	
	public RootRule_CallExtendedParserRuleParserRuleCall_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRootRuleAccess().getCallExtendedParserRuleParserRuleCall_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CallExtendedParserRule_CallAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CallExtendedParserRule_CallAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCallExtendedParserRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {	
		switch(index) {
			//default: return (inst.isConsumed()) ? parent.createParentFollower(next,actIndex , index - 0, inst) : null;
			default: return parent.createParentFollower(next,actIndex , index - 0, inst);
		}	
	}	
}

// OverridableParserRule2
protected class RootRule_OverridableParserRule2ParserRuleCall_3 extends RuleCallToken {
	
	public RootRule_OverridableParserRule2ParserRuleCall_3(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRootRuleAccess().getOverridableParserRule2ParserRuleCall_3();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OverridableParserRule2_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(OverridableParserRule2_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getOverridableParserRule2Rule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {	
		switch(index) {
			//default: return (inst.isConsumed()) ? parent.createParentFollower(next,actIndex , index - 0, inst) : null;
			default: return parent.createParentFollower(next,actIndex , index - 0, inst);
		}	
	}	
}


/************ end Rule RootRule ****************/


/************ begin Rule ConcreteParserRule ****************
 *
 * ConcreteParserRule:
 *   "model" magicNumber=REAL ":" elements+=InheritedParserRule*;
 *
 **/

// "model" magicNumber=REAL ":" elements+=InheritedParserRule*
protected class ConcreteParserRule_Group extends GroupToken {
	
	public ConcreteParserRule_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConcreteParserRuleAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcreteParserRule_ElementsAssignment_3(parent, this, 0, inst);
			case 1: return new ConcreteParserRule_ColonKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConcreteParserRuleRule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// "model"
protected class ConcreteParserRule_ModelKeyword_0 extends KeywordToken  {
	
	public ConcreteParserRule_ModelKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConcreteParserRuleAccess().getModelKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			//default: return (inst.isConsumed()) ? parent.createParentFollower(this,index , index - 0, inst) : null;
			default: return parent.createParentFollower(this,index , index - 0, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
}

// magicNumber=REAL
protected class ConcreteParserRule_MagicNumberAssignment_1 extends AssignmentToken  {
	
	public ConcreteParserRule_MagicNumberAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConcreteParserRuleAccess().getMagicNumberAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcreteParserRule_ModelKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("magicNumber",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("magicNumber");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getConcreteParserRuleAccess().getMagicNumberREALTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class ConcreteParserRule_ColonKeyword_2 extends KeywordToken  {
	
	public ConcreteParserRule_ColonKeyword_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConcreteParserRuleAccess().getColonKeyword_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcreteParserRule_MagicNumberAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// elements+=InheritedParserRule*
protected class ConcreteParserRule_ElementsAssignment_3 extends AssignmentToken  {
	
	public ConcreteParserRule_ElementsAssignment_3(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConcreteParserRuleAccess().getElementsAssignment_3();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InheritedParserRule_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInheritedParserRuleRule().getType().getClassifier())) {
				type = AssignmentType.PRC; 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {	
		switch(index) {
			case 0: return new ConcreteParserRule_ElementsAssignment_3(parent, next, actIndex, consumed);
			case 1: return new ConcreteParserRule_ColonKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ConcreteParserRule ****************/


/************ begin Rule OverridableParserRule ****************
 *
 * OverridableParserRule returns mm::AType:
 *   "overriddenelement" name=ID;
 *
 **/

// "overriddenelement" name=ID
protected class OverridableParserRule_Group extends GroupToken {
	
	public OverridableParserRule_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOverridableParserRuleAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OverridableParserRule_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOverridableParserRuleRule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// "overriddenelement"
protected class OverridableParserRule_OverriddenelementKeyword_0 extends KeywordToken  {
	
	public OverridableParserRule_OverriddenelementKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOverridableParserRuleAccess().getOverriddenelementKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			//default: return (inst.isConsumed()) ? parent.createParentFollower(this,index , index - 0, inst) : null;
			default: return parent.createParentFollower(this,index , index - 0, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
}

// name=ID
protected class OverridableParserRule_NameAssignment_1 extends AssignmentToken  {
	
	public OverridableParserRule_NameAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOverridableParserRuleAccess().getNameAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OverridableParserRule_OverriddenelementKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getOverridableParserRuleAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule OverridableParserRule ****************/


/************ begin Rule CallOverridenParserRule ****************
 *
 * CallOverridenParserRule:
 *   call=AbstractCallOverridenParserRule;
 *
 **/

// call=AbstractCallOverridenParserRule
protected class CallOverridenParserRule_CallAssignment extends AssignmentToken  {
	
	public CallOverridenParserRule_CallAssignment(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCallOverridenParserRuleAccess().getCallAssignment();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbstractCallOverridenParserRule_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCallOverridenParserRuleRule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("call",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("call");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbstractCallOverridenParserRuleRule().getType().getClassifier())) {
				type = AssignmentType.PRC; 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {	
		switch(index) {
			//default: return (consumed.isConsumed()) ? parent.createParentFollower(next,actIndex , index - 0, consumed) : null;
			default: return parent.createParentFollower(next,actIndex , index - 0, consumed);
		}	
	}	
}

/************ end Rule CallOverridenParserRule ****************/


/************ begin Rule OverridableParserRule2 ****************
 *
 * OverridableParserRule2 returns AType2:
 *   "overridden other element" name=ID "-" age=INT;
 *
 **/

// "overridden other element" name=ID "-" age=INT
protected class OverridableParserRule2_Group extends GroupToken {
	
	public OverridableParserRule2_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOverridableParserRule2Access().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OverridableParserRule2_AgeAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOverridableParserRule2Rule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// "overridden other element"
protected class OverridableParserRule2_OverriddenOtherElementKeyword_0 extends KeywordToken  {
	
	public OverridableParserRule2_OverriddenOtherElementKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOverridableParserRule2Access().getOverriddenOtherElementKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			//default: return (inst.isConsumed()) ? parent.createParentFollower(this,index , index - 0, inst) : null;
			default: return parent.createParentFollower(this,index , index - 0, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
}

// name=ID
protected class OverridableParserRule2_NameAssignment_1 extends AssignmentToken  {
	
	public OverridableParserRule2_NameAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOverridableParserRule2Access().getNameAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OverridableParserRule2_OverriddenOtherElementKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getOverridableParserRule2Access().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "-"
protected class OverridableParserRule2_HyphenMinusKeyword_2 extends KeywordToken  {
	
	public OverridableParserRule2_HyphenMinusKeyword_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOverridableParserRule2Access().getHyphenMinusKeyword_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OverridableParserRule2_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// age=INT
protected class OverridableParserRule2_AgeAssignment_3 extends AssignmentToken  {
	
	public OverridableParserRule2_AgeAssignment_3(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOverridableParserRule2Access().getAgeAssignment_3();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OverridableParserRule2_HyphenMinusKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("age",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("age");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getOverridableParserRule2Access().getAgeINTTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule OverridableParserRule2 ****************/


/************ begin Rule ExtendableParserRule ****************
 *
 * ExtendableParserRule returns mm::AType:
 *   Subrule1|Subrule2|Subrule3;
 *
 **/

// Subrule1|Subrule2|Subrule3
protected class ExtendableParserRule_Alternatives extends AlternativesToken {

	public ExtendableParserRule_Alternatives(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getExtendableParserRuleAccess().getAlternatives();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExtendableParserRule_Subrule1ParserRuleCall_0(parent, this, 0, inst);
			case 1: return new ExtendableParserRule_Subrule2ParserRuleCall_1(parent, this, 1, inst);
			case 2: return new ExtendableParserRule_Subrule3ParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExtendableParserRuleRule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// Subrule1
protected class ExtendableParserRule_Subrule1ParserRuleCall_0 extends RuleCallToken {
	
	public ExtendableParserRule_Subrule1ParserRuleCall_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExtendableParserRuleAccess().getSubrule1ParserRuleCall_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Subrule1_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Subrule1_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSubrule1Rule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {	
		switch(index) {
			//default: return (inst.isConsumed()) ? parent.createParentFollower(next,actIndex , index - 0, inst) : null;
			default: return parent.createParentFollower(next,actIndex , index - 0, inst);
		}	
	}	
}

// Subrule2
protected class ExtendableParserRule_Subrule2ParserRuleCall_1 extends RuleCallToken {
	
	public ExtendableParserRule_Subrule2ParserRuleCall_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExtendableParserRuleAccess().getSubrule2ParserRuleCall_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Subrule2_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Subrule2_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSubrule2Rule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {	
		switch(index) {
			//default: return (inst.isConsumed()) ? parent.createParentFollower(next,actIndex , index - 0, inst) : null;
			default: return parent.createParentFollower(next,actIndex , index - 0, inst);
		}	
	}	
}

// Subrule3
protected class ExtendableParserRule_Subrule3ParserRuleCall_2 extends RuleCallToken {
	
	public ExtendableParserRule_Subrule3ParserRuleCall_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExtendableParserRuleAccess().getSubrule3ParserRuleCall_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Subrule3_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Subrule3_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSubrule3Rule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {	
		switch(index) {
			//default: return (inst.isConsumed()) ? parent.createParentFollower(next,actIndex , index - 0, inst) : null;
			default: return parent.createParentFollower(next,actIndex , index - 0, inst);
		}	
	}	
}


/************ end Rule ExtendableParserRule ****************/


/************ begin Rule Subrule1 ****************
 *
 * Subrule1:
 *   "subrule1" name=ID sub1=ID;
 *
 **/

// "subrule1" name=ID sub1=ID
protected class Subrule1_Group extends GroupToken {
	
	public Subrule1_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSubrule1Access().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Subrule1_Sub1Assignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSubrule1Rule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// "subrule1"
protected class Subrule1_Subrule1Keyword_0 extends KeywordToken  {
	
	public Subrule1_Subrule1Keyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSubrule1Access().getSubrule1Keyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			//default: return (inst.isConsumed()) ? parent.createParentFollower(this,index , index - 0, inst) : null;
			default: return parent.createParentFollower(this,index , index - 0, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
}

// name=ID
protected class Subrule1_NameAssignment_1 extends AssignmentToken  {
	
	public Subrule1_NameAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSubrule1Access().getNameAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Subrule1_Subrule1Keyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSubrule1Access().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// sub1=ID
protected class Subrule1_Sub1Assignment_2 extends AssignmentToken  {
	
	public Subrule1_Sub1Assignment_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSubrule1Access().getSub1Assignment_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Subrule1_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sub1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sub1");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSubrule1Access().getSub1IDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Subrule1 ****************/


/************ begin Rule Subrule2 ****************
 *
 * Subrule2:
 *   "subrule3" name=ID sub2=STRING;
 *
 **/

// "subrule3" name=ID sub2=STRING
protected class Subrule2_Group extends GroupToken {
	
	public Subrule2_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSubrule2Access().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Subrule2_Sub2Assignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSubrule2Rule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// "subrule3"
protected class Subrule2_Subrule3Keyword_0 extends KeywordToken  {
	
	public Subrule2_Subrule3Keyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSubrule2Access().getSubrule3Keyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			//default: return (inst.isConsumed()) ? parent.createParentFollower(this,index , index - 0, inst) : null;
			default: return parent.createParentFollower(this,index , index - 0, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
}

// name=ID
protected class Subrule2_NameAssignment_1 extends AssignmentToken  {
	
	public Subrule2_NameAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSubrule2Access().getNameAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Subrule2_Subrule3Keyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSubrule2Access().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// sub2=STRING
protected class Subrule2_Sub2Assignment_2 extends AssignmentToken  {
	
	public Subrule2_Sub2Assignment_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSubrule2Access().getSub2Assignment_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Subrule2_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sub2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sub2");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSubrule2Access().getSub2STRINGTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Subrule2 ****************/


/************ begin Rule Subrule3 ****************
 *
 * Subrule3:
 *   "subrule3" name=ID sub1=INT;
 *
 **/

// "subrule3" name=ID sub1=INT
protected class Subrule3_Group extends GroupToken {
	
	public Subrule3_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSubrule3Access().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Subrule3_Sub1Assignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSubrule3Rule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// "subrule3"
protected class Subrule3_Subrule3Keyword_0 extends KeywordToken  {
	
	public Subrule3_Subrule3Keyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSubrule3Access().getSubrule3Keyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			//default: return (inst.isConsumed()) ? parent.createParentFollower(this,index , index - 0, inst) : null;
			default: return parent.createParentFollower(this,index , index - 0, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
}

// name=ID
protected class Subrule3_NameAssignment_1 extends AssignmentToken  {
	
	public Subrule3_NameAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSubrule3Access().getNameAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Subrule3_Subrule3Keyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSubrule3Access().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// sub1=INT
protected class Subrule3_Sub1Assignment_2 extends AssignmentToken  {
	
	public Subrule3_Sub1Assignment_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSubrule3Access().getSub1Assignment_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Subrule3_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sub1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sub1");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSubrule3Access().getSub1INTTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Subrule3 ****************/


/************ begin Rule CallExtendedParserRule ****************
 *
 * CallExtendedParserRule:
 *   call=AbstractCallExtendedParserRule;
 *
 **/

// call=AbstractCallExtendedParserRule
protected class CallExtendedParserRule_CallAssignment extends AssignmentToken  {
	
	public CallExtendedParserRule_CallAssignment(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCallExtendedParserRuleAccess().getCallAssignment();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbstractCallExtendedParserRule_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCallExtendedParserRuleRule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("call",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("call");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbstractCallExtendedParserRuleRule().getType().getClassifier())) {
				type = AssignmentType.PRC; 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {	
		switch(index) {
			//default: return (consumed.isConsumed()) ? parent.createParentFollower(next,actIndex , index - 0, consumed) : null;
			default: return parent.createParentFollower(next,actIndex , index - 0, consumed);
		}	
	}	
}

/************ end Rule CallExtendedParserRule ****************/


/************ begin Rule InheritedParserRule ****************
 *
 * InheritedParserRule returns mm::AType:
 *   "element" name=ID;
 *
 **/

// "element" name=ID
protected class InheritedParserRule_Group extends GroupToken {
	
	public InheritedParserRule_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInheritedParserRuleAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InheritedParserRule_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getInheritedParserRuleRule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// "element"
protected class InheritedParserRule_ElementKeyword_0 extends KeywordToken  {
	
	public InheritedParserRule_ElementKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInheritedParserRuleAccess().getElementKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			//default: return (inst.isConsumed()) ? parent.createParentFollower(this,index , index - 0, inst) : null;
			default: return parent.createParentFollower(this,index , index - 0, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
}

// name=ID
protected class InheritedParserRule_NameAssignment_1 extends AssignmentToken  {
	
	public InheritedParserRule_NameAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInheritedParserRuleAccess().getNameAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InheritedParserRule_ElementKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getInheritedParserRuleAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule InheritedParserRule ****************/


/************ begin Rule AbstractCallOverridenParserRule ****************
 *
 * AbstractCallOverridenParserRule returns mm::AModel:
 *   "overridemodel" elements+=OverridableParserRule*;
 *
 **/

// "overridemodel" elements+=OverridableParserRule*
protected class AbstractCallOverridenParserRule_Group extends GroupToken {
	
	public AbstractCallOverridenParserRule_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAbstractCallOverridenParserRuleAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbstractCallOverridenParserRule_ElementsAssignment_1(parent, this, 0, inst);
			case 1: return new AbstractCallOverridenParserRule_OverridemodelKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAbstractCallOverridenParserRuleRule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// "overridemodel"
protected class AbstractCallOverridenParserRule_OverridemodelKeyword_0 extends KeywordToken  {
	
	public AbstractCallOverridenParserRule_OverridemodelKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAbstractCallOverridenParserRuleAccess().getOverridemodelKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			//default: return (inst.isConsumed()) ? parent.createParentFollower(this,index , index - 0, inst) : null;
			default: return parent.createParentFollower(this,index , index - 0, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
}

// elements+=OverridableParserRule*
protected class AbstractCallOverridenParserRule_ElementsAssignment_1 extends AssignmentToken  {
	
	public AbstractCallOverridenParserRule_ElementsAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAbstractCallOverridenParserRuleAccess().getElementsAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OverridableParserRule_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOverridableParserRuleRule().getType().getClassifier())) {
				type = AssignmentType.PRC; 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {	
		switch(index) {
			case 0: return new AbstractCallOverridenParserRule_ElementsAssignment_1(parent, next, actIndex, consumed);
			case 1: return new AbstractCallOverridenParserRule_OverridemodelKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule AbstractCallOverridenParserRule ****************/


/************ begin Rule AbstractCallExtendedParserRule ****************
 *
 * AbstractCallExtendedParserRule returns mm::AModel:
 *   "extendedmodel" elements+=ExtendableParserRule*;
 *
 **/

// "extendedmodel" elements+=ExtendableParserRule*
protected class AbstractCallExtendedParserRule_Group extends GroupToken {
	
	public AbstractCallExtendedParserRule_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAbstractCallExtendedParserRuleAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbstractCallExtendedParserRule_ElementsAssignment_1(parent, this, 0, inst);
			case 1: return new AbstractCallExtendedParserRule_ExtendedmodelKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAbstractCallExtendedParserRuleRule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// "extendedmodel"
protected class AbstractCallExtendedParserRule_ExtendedmodelKeyword_0 extends KeywordToken  {
	
	public AbstractCallExtendedParserRule_ExtendedmodelKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAbstractCallExtendedParserRuleAccess().getExtendedmodelKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			//default: return (inst.isConsumed()) ? parent.createParentFollower(this,index , index - 0, inst) : null;
			default: return parent.createParentFollower(this,index , index - 0, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
}

// elements+=ExtendableParserRule*
protected class AbstractCallExtendedParserRule_ElementsAssignment_1 extends AssignmentToken  {
	
	public AbstractCallExtendedParserRule_ElementsAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAbstractCallExtendedParserRuleAccess().getElementsAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExtendableParserRule_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendableParserRuleRule().getType().getClassifier())) {
				type = AssignmentType.PRC; 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {	
		switch(index) {
			case 0: return new AbstractCallExtendedParserRule_ElementsAssignment_1(parent, next, actIndex, consumed);
			case 1: return new AbstractCallExtendedParserRule_ExtendedmodelKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule AbstractCallExtendedParserRule ****************/

}
