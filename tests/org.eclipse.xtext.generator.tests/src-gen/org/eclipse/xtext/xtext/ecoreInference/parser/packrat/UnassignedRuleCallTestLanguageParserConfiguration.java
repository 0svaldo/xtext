/*
* generated by Xtext
*/
package org.eclipse.xtext.xtext.ecoreInference.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.xtext.ecoreInference.services.UnassignedRuleCallTestLanguageGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 
import org.eclipse.xtext.xtext.ecoreInference.parser.packrat.consumers.UnassignedRuleCallTestLanguageModelConsumer;
import org.eclipse.xtext.xtext.ecoreInference.parser.packrat.consumers.UnassignedRuleCallTestLanguageModelFeaturesConsumer;
import org.eclipse.xtext.xtext.ecoreInference.parser.packrat.consumers.UnassignedRuleCallTestLanguageDataTypeRuleConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class UnassignedRuleCallTestLanguageParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 
    private UnassignedRuleCallTestLanguageModelConsumer modelConsumer;
    private UnassignedRuleCallTestLanguageModelFeaturesConsumer modelFeaturesConsumer;
    private UnassignedRuleCallTestLanguageDataTypeRuleConsumer dataTypeRuleConsumer;

	private UnassignedRuleCallTestLanguageGrammarAccess grammarAccess;

	public UnassignedRuleCallTestLanguageParserConfiguration(IInternalParserConfiguration configuration, UnassignedRuleCallTestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public UnassignedRuleCallTestLanguageModelConsumer getRootConsumer() {
		return modelConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		modelConsumer = new UnassignedRuleCallTestLanguageModelConsumer(
    		this, null
    	);
		modelFeaturesConsumer = new UnassignedRuleCallTestLanguageModelFeaturesConsumer(
    		this, null
    	);
		dataTypeRuleConsumer = new UnassignedRuleCallTestLanguageDataTypeRuleConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getModelConsumer().setRule(grammarAccess.getModelAccess());
		getModelFeaturesConsumer().setRule(grammarAccess.getModelFeaturesAccess());
		getDataTypeRuleConsumer().setRule(grammarAccess.getDataTypeRuleAccess());
		getIdConsumer().setRule(grammarAccess.getIDRule());
		getIntConsumer().setRule(grammarAccess.getINTRule());
		getStringConsumer().setRule(grammarAccess.getSTRINGRule());
		getMlCommentConsumer().setRule(grammarAccess.getML_COMMENTRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getAnyOtherConsumer().setRule(grammarAccess.getANY_OTHERRule());


		getModelConsumer().setIntConsumer(getIntConsumer());
		getModelConsumer().setModelFeaturesConsumer(getModelFeaturesConsumer());

		getModelFeaturesConsumer().setDataTypeRuleConsumer(getDataTypeRuleConsumer());
		getModelFeaturesConsumer().setIdConsumer(getIdConsumer());

		getDataTypeRuleConsumer().setIntConsumer(getIntConsumer());
		getDataTypeRuleConsumer().setStringConsumer(getStringConsumer());

		getModelConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.xtext.ecoreInference.parser.packrat.UnassignedRuleCallTestLanguageDelimiters.keyword$4$Delimiter);
		getModelConsumer().setRuleCall$3$Delimiter(org.eclipse.xtext.xtext.ecoreInference.parser.packrat.UnassignedRuleCallTestLanguageDelimiters.ruleCall$5$Delimiter);
		getModelFeaturesConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.xtext.ecoreInference.parser.packrat.UnassignedRuleCallTestLanguageDelimiters.keyword$4$Delimiter);
		getModelFeaturesConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.xtext.ecoreInference.parser.packrat.UnassignedRuleCallTestLanguageDelimiters.keyword$15$Delimiter);
		getModelFeaturesConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.xtext.ecoreInference.parser.packrat.UnassignedRuleCallTestLanguageDelimiters.ruleCall$13$Delimiter);
		getDataTypeRuleConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.xtext.ecoreInference.parser.packrat.UnassignedRuleCallTestLanguageDelimiters.keyword$4$Delimiter);
		getDataTypeRuleConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.xtext.ecoreInference.parser.packrat.UnassignedRuleCallTestLanguageDelimiters.ruleCall$5$Delimiter);
		getDataTypeRuleConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.xtext.ecoreInference.parser.packrat.UnassignedRuleCallTestLanguageDelimiters.ruleCall$5$Delimiter);
		getDataTypeRuleConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.xtext.ecoreInference.parser.packrat.UnassignedRuleCallTestLanguageDelimiters.ruleCall$5$Delimiter);
	}
	
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public UnassignedRuleCallTestLanguageModelConsumer getModelConsumer() {
    	return modelConsumer;
    }

    public UnassignedRuleCallTestLanguageModelFeaturesConsumer getModelFeaturesConsumer() {
    	return modelFeaturesConsumer;
    }

    public UnassignedRuleCallTestLanguageDataTypeRuleConsumer getDataTypeRuleConsumer() {
    	return dataTypeRuleConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
