/*
* generated by Xtext
*/
package org.eclipse.xtext.xtext.ecoreInference.parseTreeConstruction;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor2;

import org.eclipse.xtext.xtext.ecoreInference.services.UnassignedRuleCallTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class UnassignedRuleCallTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor2 {
		
	@Inject
	private UnassignedRuleCallTestLanguageGrammarAccess grammarAccess;
		
	public UnassignedRuleCallTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken2 getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Group(this, this, 0, inst);
			case 1: return new ModelFeatures_Group(this, this, 1, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 *   "model" INT+ modelFeatures=ModelFeatures;
 *
 **/

// "model" INT+ modelFeatures=ModelFeatures
protected class Model_Group extends GroupToken {
	
	public Model_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_ModelFeaturesAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// "model"
protected class Model_ModelKeyword_0 extends KeywordToken  {
	
	public Model_ModelKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getModelKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
}

// INT+
protected class Model_INTTerminalRuleCall_1 extends RuleCallToken {
	
	public Model_INTTerminalRuleCall_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelAccess().getINTTerminalRuleCall_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_INTTerminalRuleCall_1(parent, this, 0, inst);
			case 1: return new Model_ModelKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		// FIXME: terminal or datatype rule call
		return current;
	}
	
}

// modelFeatures=ModelFeatures
protected class Model_ModelFeaturesAssignment_2 extends AssignmentToken  {
	
	public Model_ModelFeaturesAssignment_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getModelFeaturesAssignment_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModelFeatures_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modelFeatures",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modelFeatures");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModelFeaturesRule().getType().getClassifier())) {
				type = AssignmentType.PRC; 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_INTTerminalRuleCall_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Model ****************/


/************ begin Rule ModelFeatures ****************
 *
 * ModelFeatures:
 *   "feature" name=ID DataTypeRule ";";
 *
 **/

// "feature" name=ID DataTypeRule ";"
protected class ModelFeatures_Group extends GroupToken {
	
	public ModelFeatures_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getModelFeaturesAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModelFeatures_SemicolonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModelFeaturesRule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// "feature"
protected class ModelFeatures_FeatureKeyword_0 extends KeywordToken  {
	
	public ModelFeatures_FeatureKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getModelFeaturesAccess().getFeatureKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
}

// name=ID
protected class ModelFeatures_NameAssignment_1 extends AssignmentToken  {
	
	public ModelFeatures_NameAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getModelFeaturesAccess().getNameAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModelFeatures_FeatureKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getModelFeaturesAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// DataTypeRule
protected class ModelFeatures_DataTypeRuleParserRuleCall_2 extends RuleCallToken {
	
	public ModelFeatures_DataTypeRuleParserRuleCall_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelFeaturesAccess().getDataTypeRuleParserRuleCall_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModelFeatures_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		// FIXME: terminal or datatype rule call
		return current;
	}
	
}

// ";"
protected class ModelFeatures_SemicolonKeyword_3 extends KeywordToken  {
	
	public ModelFeatures_SemicolonKeyword_3(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getModelFeaturesAccess().getSemicolonKeyword_3();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModelFeatures_DataTypeRuleParserRuleCall_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ModelFeatures ****************/


}
