/*
* generated by Xtext
*/
package org.eclipse.xtext.xtext.ecoreInference.parseTreeConstruction;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;
import org.eclipse.xtext.xtext.ecoreInference.services.UnassignedRuleCallTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class UnassignedRuleCallTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private UnassignedRuleCallTestLanguageGrammarAccess grammarAccess;
	
	@Override
	protected Solution internalSerialize(EObject obj) {
		IInstanceDescription inst = getDescr(obj);
		if(inst.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier())) {
			final AbstractToken t = new Model_Group(inst, null);
			Solution s = t.firstSolution();
			while(s != null && !isConsumed(s, t)) s = s.getPredecessor().nextSolution(null, s);
			if(s != null) return s;
		}
		if(inst.isInstanceOf(grammarAccess.getModelFeaturesRule().getType().getClassifier())) {
			final AbstractToken t = new ModelFeatures_Group(inst, null);
			Solution s = t.firstSolution();
			while(s != null && !isConsumed(s, t)) s = s.getPredecessor().nextSolution(null, s);
			if(s != null) return s;
		}
		return null;
	}
	

/************ begin Rule Model ****************
 *
 * Model:
 *   "model" INT+ modelFeatures=ModelFeatures;
 *
 **/

// "model" INT+ modelFeatures=ModelFeatures
protected class Model_Group extends GroupToken {
	
	public Model_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Model_2_Assignment_modelFeatures(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Model_1_RuleCall_INT(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new Model_0_Keyword_model(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				if(s3 != null) {
					last = s3.getPredecessor();
					return s3;
				} else {
					s2 = s2.getPredecessor().nextSolution(this,s2);
				}
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "model"
protected class Model_0_Keyword_model extends KeywordToken  {
	
	public Model_0_Keyword_model(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getModelKeyword_0();
	}	
}

// INT+
protected class Model_1_RuleCall_INT extends RuleCallToken {
	
	public Model_1_RuleCall_INT(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelAccess().getINTTerminalRuleCall_1();
	}
	
	@Override
	protected Solution createSolution() {
		// FIXME: terminal or datatype rule call
		return null;
	}
}

// modelFeatures=ModelFeatures
protected class Model_2_Assignment_modelFeatures extends AssignmentToken  {
	
	public Model_2_Assignment_modelFeatures(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getModelFeaturesAssignment_2();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("modelFeatures",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modelFeatures");

		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModelFeaturesRule().getType().getClassifier())) {
				Solution s = new ModelFeatures_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}


/************ end Rule Model ****************/


/************ begin Rule ModelFeatures ****************
 *
 * ModelFeatures:
 *   "feature" name=ID DataTypeRule ";";
 *
 **/

// "feature" name=ID DataTypeRule ";"
protected class ModelFeatures_Group extends GroupToken {
	
	public ModelFeatures_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelFeaturesAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new ModelFeatures_3_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new ModelFeatures_2_RuleCall_DataTypeRule(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new ModelFeatures_1_Assignment_name(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				while(s3 != null) {
					Solution s4 = new ModelFeatures_0_Keyword_feature(s3.getCurrent(), s3.getPredecessor()).firstSolution();
					if(s4 != null) {
						last = s4.getPredecessor();
						return s4;
					} else {
						s3 = s3.getPredecessor().nextSolution(this,s3);
					}
				}
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "feature"
protected class ModelFeatures_0_Keyword_feature extends KeywordToken  {
	
	public ModelFeatures_0_Keyword_feature(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getModelFeaturesAccess().getFeatureKeyword_0();
	}	
}

// name=ID
protected class ModelFeatures_1_Assignment_name extends AssignmentToken  {
	
	public ModelFeatures_1_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelFeaturesAccess().getNameAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getModelFeaturesAccess().getNameIDTerminalRuleCall_1_0();
			return new Solution(obj);
		}
		return null;
	}
}

// DataTypeRule
protected class ModelFeatures_2_RuleCall_DataTypeRule extends RuleCallToken {
	
	public ModelFeatures_2_RuleCall_DataTypeRule(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelFeaturesAccess().getDataTypeRuleParserRuleCall_2();
	}
	
	@Override
	protected Solution createSolution() {
		// FIXME: terminal or datatype rule call
		return null;
	}
}

// ";"
protected class ModelFeatures_3_Keyword extends KeywordToken  {
	
	public ModelFeatures_3_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getModelFeaturesAccess().getSemicolonKeyword_3();
	}	
}


/************ end Rule ModelFeatures ****************/


}
