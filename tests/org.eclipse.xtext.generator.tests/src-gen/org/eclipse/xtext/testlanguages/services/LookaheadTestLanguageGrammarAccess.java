/*
* generated by Xtext
*/

package org.eclipse.xtext.testlanguages.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LookaheadTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class EntryElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entry");
		private final Assignment cAssignmentContents = (Assignment)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallAlts = (RuleCall)cAssignmentContents.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Assignment eleAssignmentContents() { return cAssignmentContents; }

		// not supported
		public RuleCall ele0ParserRuleCallAlts() { return c0ParserRuleCallAlts; }
	}

	public class AltsElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alts");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives c0Alternatives = (Alternatives)cAlternatives.eContents().get(0);
		private final RuleCall c00ParserRuleCallLookAhead0 = (RuleCall)c0Alternatives.eContents().get(0);
		private final RuleCall c01ParserRuleCallLookAhead1 = (RuleCall)c0Alternatives.eContents().get(1);
		private final RuleCall c1ParserRuleCallLookAhead3 = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public Alternatives ele0Alternatives() { return c0Alternatives; }

		// not supported
		public RuleCall ele00ParserRuleCallLookAhead0() { return c00ParserRuleCallLookAhead0; }

		// not supported
		public RuleCall ele01ParserRuleCallLookAhead1() { return c01ParserRuleCallLookAhead1; }

		// not supported
		public RuleCall ele1ParserRuleCallLookAhead3() { return c1ParserRuleCallLookAhead3; }
	}

	public class LookAhead0Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LookAhead0");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordBar = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentX = (Assignment)cGroup.eContents().get(1);
		private final Keyword c10KeywordA = (Keyword)c1AssignmentX.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordBar() { return c0KeywordBar; }

		// not supported
		public Assignment ele1AssignmentX() { return c1AssignmentX; }

		// not supported
		public Keyword ele10KeywordA() { return c10KeywordA; }
	}

	public class LookAhead1Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LookAhead1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Keyword c000KeywordFoo = (Keyword)c00Group.eContents().get(0);
		private final Assignment c001AssignmentY = (Assignment)c00Group.eContents().get(1);
		private final RuleCall c0010ParserRuleCallLookAhead2 = (RuleCall)c001AssignmentY.eContents().get(0);
		private final Assignment c01AssignmentX = (Assignment)c0Group.eContents().get(1);
		private final Keyword c010KeywordB = (Keyword)c01AssignmentX.eContents().get(0);
		private final Assignment c1AssignmentX = (Assignment)cGroup.eContents().get(1);
		private final Keyword c10KeywordD = (Keyword)c1AssignmentX.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Keyword ele000KeywordFoo() { return c000KeywordFoo; }

		// not supported
		public Assignment ele001AssignmentY() { return c001AssignmentY; }

		// not supported
		public RuleCall ele0010ParserRuleCallLookAhead2() { return c0010ParserRuleCallLookAhead2; }

		// not supported
		public Assignment ele01AssignmentX() { return c01AssignmentX; }

		// not supported
		public Keyword ele010KeywordB() { return c010KeywordB; }

		// not supported
		public Assignment ele1AssignmentX() { return c1AssignmentX; }

		// not supported
		public Keyword ele10KeywordD() { return c10KeywordD; }
	}

	public class LookAhead2Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LookAhead2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives c0Alternatives = (Alternatives)cGroup.eContents().get(0);
		private final Assignment c00AssignmentZ = (Assignment)c0Alternatives.eContents().get(0);
		private final Keyword c000KeywordFoo = (Keyword)c00AssignmentZ.eContents().get(0);
		private final Assignment c01AssignmentZ = (Assignment)c0Alternatives.eContents().get(1);
		private final Keyword c010KeywordBar = (Keyword)c01AssignmentZ.eContents().get(0);
		private final Keyword c1KeywordC = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Alternatives ele0Alternatives() { return c0Alternatives; }

		// not supported
		public Assignment ele00AssignmentZ() { return c00AssignmentZ; }

		// not supported
		public Keyword ele000KeywordFoo() { return c000KeywordFoo; }

		// not supported
		public Assignment ele01AssignmentZ() { return c01AssignmentZ; }

		// not supported
		public Keyword ele010KeywordBar() { return c010KeywordBar; }

		// not supported
		public Keyword ele1KeywordC() { return c1KeywordC; }
	}

	public class LookAhead3Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LookAhead3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Keyword c000KeywordFoo = (Keyword)c00Group.eContents().get(0);
		private final Keyword c001KeywordBar = (Keyword)c00Group.eContents().get(1);
		private final Assignment c01AssignmentX = (Assignment)c0Group.eContents().get(1);
		private final Keyword c010KeywordB = (Keyword)c01AssignmentX.eContents().get(0);
		private final Assignment c1AssignmentZ = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallLookAhead4 = (RuleCall)c1AssignmentZ.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Keyword ele000KeywordFoo() { return c000KeywordFoo; }

		// not supported
		public Keyword ele001KeywordBar() { return c001KeywordBar; }

		// not supported
		public Assignment ele01AssignmentX() { return c01AssignmentX; }

		// not supported
		public Keyword ele010KeywordB() { return c010KeywordB; }

		// not supported
		public Assignment ele1AssignmentZ() { return c1AssignmentZ; }

		// not supported
		public RuleCall ele10ParserRuleCallLookAhead4() { return c10ParserRuleCallLookAhead4; }
	}

	public class LookAhead4Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LookAhead4");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment c0AssignmentX = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword c00KeywordC = (Keyword)c0AssignmentX.eContents().get(0);
		private final Assignment c1AssignmentX = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword c10KeywordD = (Keyword)c1AssignmentX.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public Assignment ele0AssignmentX() { return c0AssignmentX; }

		// not supported
		public Keyword ele00KeywordC() { return c00KeywordC; }

		// not supported
		public Assignment ele1AssignmentX() { return c1AssignmentX; }

		// not supported
		public Keyword ele10KeywordD() { return c10KeywordD; }
	}
	
	private EntryElements pEntry;
	private AltsElements pAlts;
	private LookAhead0Elements pLookAhead0;
	private LookAhead1Elements pLookAhead1;
	private LookAhead2Elements pLookAhead2;
	private LookAhead3Elements pLookAhead3;
	private LookAhead4Elements pLookAhead4;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess terminalsGrammarAccess;

	@Inject
	public LookaheadTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess terminalsGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.terminalsGrammarAccess = terminalsGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return terminalsGrammarAccess;
	}

	
	// not supported
	public EntryElements prEntry() {
		return (pEntry != null) ? pEntry : (pEntry = new EntryElements());
	} 

	// not supported
	public AltsElements prAlts() {
		return (pAlts != null) ? pAlts : (pAlts = new AltsElements());
	} 

	// not supported
	public LookAhead0Elements prLookAhead0() {
		return (pLookAhead0 != null) ? pLookAhead0 : (pLookAhead0 = new LookAhead0Elements());
	} 

	// not supported
	public LookAhead1Elements prLookAhead1() {
		return (pLookAhead1 != null) ? pLookAhead1 : (pLookAhead1 = new LookAhead1Elements());
	} 

	// not supported
	public LookAhead2Elements prLookAhead2() {
		return (pLookAhead2 != null) ? pLookAhead2 : (pLookAhead2 = new LookAhead2Elements());
	} 

	// not supported
	public LookAhead3Elements prLookAhead3() {
		return (pLookAhead3 != null) ? pLookAhead3 : (pLookAhead3 = new LookAhead3Elements());
	} 

	// not supported
	public LookAhead4Elements prLookAhead4() {
		return (pLookAhead4 != null) ? pLookAhead4 : (pLookAhead4 = new LookAhead4Elements());
	} 

	// not supported
	public TerminalRule trID() {
		return terminalsGrammarAccess.trID();
	} 

	// not supported
	public TerminalRule trINT() {
		return terminalsGrammarAccess.trINT();
	} 

	// not supported
	public TerminalRule trSTRING() {
		return terminalsGrammarAccess.trSTRING();
	} 

	// not supported
	public TerminalRule trML_COMMENT() {
		return terminalsGrammarAccess.trML_COMMENT();
	} 

	// not supported
	public TerminalRule trSL_COMMENT() {
		return terminalsGrammarAccess.trSL_COMMENT();
	} 

	// not supported
	public TerminalRule trWS() {
		return terminalsGrammarAccess.trWS();
	} 

	// not supported
	public TerminalRule trANY_OTHER() {
		return terminalsGrammarAccess.trANY_OTHER();
	} 
}
