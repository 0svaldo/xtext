/*
* generated by Xtext
*/

package org.eclipse.xtext.testlanguages.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FowlerDslTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class StatemachineElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statemachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Group c000Group = (Group)c00Group.eContents().get(0);
		private final Group c0000Group = (Group)c000Group.eContents().get(0);
		private final Group c00000Group = (Group)c0000Group.eContents().get(0);
		private final Keyword c000000KeywordEvents = (Keyword)c00000Group.eContents().get(0);
		private final Assignment c000001AssignmentEvents = (Assignment)c00000Group.eContents().get(1);
		private final RuleCall c0000010ParserRuleCallEvent = (RuleCall)c000001AssignmentEvents.eContents().get(0);
		private final Keyword c00001KeywordEnd = (Keyword)c0000Group.eContents().get(1);
		private final Keyword c0001KeywordCommands = (Keyword)c000Group.eContents().get(1);
		private final Assignment c001AssignmentCommands = (Assignment)c00Group.eContents().get(1);
		private final RuleCall c0010ParserRuleCallCommand = (RuleCall)c001AssignmentCommands.eContents().get(0);
		private final Keyword c01KeywordEnd = (Keyword)c0Group.eContents().get(1);
		private final Assignment c1AssignmentStates = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallState = (RuleCall)c1AssignmentStates.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Group ele000Group() { return c000Group; }

		// not supported
		public Group ele0000Group() { return c0000Group; }

		// not supported
		public Group ele00000Group() { return c00000Group; }

		// not supported
		public Keyword ele000000KeywordEvents() { return c000000KeywordEvents; }

		// not supported
		public Assignment ele000001AssignmentEvents() { return c000001AssignmentEvents; }

		// not supported
		public RuleCall ele0000010ParserRuleCallEvent() { return c0000010ParserRuleCallEvent; }

		// not supported
		public Keyword ele00001KeywordEnd() { return c00001KeywordEnd; }

		// not supported
		public Keyword ele0001KeywordCommands() { return c0001KeywordCommands; }

		// not supported
		public Assignment ele001AssignmentCommands() { return c001AssignmentCommands; }

		// not supported
		public RuleCall ele0010ParserRuleCallCommand() { return c0010ParserRuleCallCommand; }

		// not supported
		public Keyword ele01KeywordEnd() { return c01KeywordEnd; }

		// not supported
		public Assignment ele1AssignmentStates() { return c1AssignmentStates; }

		// not supported
		public RuleCall ele10ParserRuleCallState() { return c10ParserRuleCallState; }
	}

	public class EventElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Assignment c00AssignmentResetting = (Assignment)c0Group.eContents().get(0);
		private final Keyword c000KeywordResetting = (Keyword)c00AssignmentResetting.eContents().get(0);
		private final Assignment c01AssignmentName = (Assignment)c0Group.eContents().get(1);
		private final RuleCall c010TerminalRuleCallID = (RuleCall)c01AssignmentName.eContents().get(0);
		private final Assignment c1AssignmentCode = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallID = (RuleCall)c1AssignmentCode.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Assignment ele00AssignmentResetting() { return c00AssignmentResetting; }

		// not supported
		public Keyword ele000KeywordResetting() { return c000KeywordResetting; }

		// not supported
		public Assignment ele01AssignmentName() { return c01AssignmentName; }

		// not supported
		public RuleCall ele010TerminalRuleCallID() { return c010TerminalRuleCallID; }

		// not supported
		public Assignment ele1AssignmentCode() { return c1AssignmentCode; }

		// not supported
		public RuleCall ele10TerminalRuleCallID() { return c10TerminalRuleCallID; }
	}

	public class CommandElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment c0AssignmentName = (Assignment)cGroup.eContents().get(0);
		private final RuleCall c00TerminalRuleCallID = (RuleCall)c0AssignmentName.eContents().get(0);
		private final Assignment c1AssignmentCode = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallID = (RuleCall)c1AssignmentCode.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Assignment ele0AssignmentName() { return c0AssignmentName; }

		// not supported
		public RuleCall ele00TerminalRuleCallID() { return c00TerminalRuleCallID; }

		// not supported
		public Assignment ele1AssignmentCode() { return c1AssignmentCode; }

		// not supported
		public RuleCall ele10TerminalRuleCallID() { return c10TerminalRuleCallID; }
	}

	public class StateElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Group c000Group = (Group)c00Group.eContents().get(0);
		private final Keyword c0000KeywordState = (Keyword)c000Group.eContents().get(0);
		private final Assignment c0001AssignmentName = (Assignment)c000Group.eContents().get(1);
		private final RuleCall c00010TerminalRuleCallID = (RuleCall)c0001AssignmentName.eContents().get(0);
		private final Group c001Group = (Group)c00Group.eContents().get(1);
		private final Group c0010Group = (Group)c001Group.eContents().get(0);
		private final Group c00100Group = (Group)c0010Group.eContents().get(0);
		private final Keyword c001000KeywordActions = (Keyword)c00100Group.eContents().get(0);
		private final Keyword c001001KeywordLeftCurlyBracket = (Keyword)c00100Group.eContents().get(1);
		private final Assignment c00101AssignmentActions = (Assignment)c0010Group.eContents().get(1);
		private final CrossReference c001010CrossReferenceEStringCommand = (CrossReference)c00101AssignmentActions.eContents().get(0);
		private final Keyword c0011KeywordRightCurlyBracket = (Keyword)c001Group.eContents().get(1);
		private final Assignment c01AssignmentTransitions = (Assignment)c0Group.eContents().get(1);
		private final RuleCall c010ParserRuleCallTransition = (RuleCall)c01AssignmentTransitions.eContents().get(0);
		private final Keyword c1KeywordEnd = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Group ele000Group() { return c000Group; }

		// not supported
		public Keyword ele0000KeywordState() { return c0000KeywordState; }

		// not supported
		public Assignment ele0001AssignmentName() { return c0001AssignmentName; }

		// not supported
		public RuleCall ele00010TerminalRuleCallID() { return c00010TerminalRuleCallID; }

		// not supported
		public Group ele001Group() { return c001Group; }

		// not supported
		public Group ele0010Group() { return c0010Group; }

		// not supported
		public Group ele00100Group() { return c00100Group; }

		// not supported
		public Keyword ele001000KeywordActions() { return c001000KeywordActions; }

		// not supported
		public Keyword ele001001KeywordLeftCurlyBracket() { return c001001KeywordLeftCurlyBracket; }

		// not supported
		public Assignment ele00101AssignmentActions() { return c00101AssignmentActions; }

		// not supported
		public CrossReference ele001010CrossReferenceEStringCommand() { return c001010CrossReferenceEStringCommand; }

		// not supported
		public Keyword ele0011KeywordRightCurlyBracket() { return c0011KeywordRightCurlyBracket; }

		// not supported
		public Assignment ele01AssignmentTransitions() { return c01AssignmentTransitions; }

		// not supported
		public RuleCall ele010ParserRuleCallTransition() { return c010ParserRuleCallTransition; }

		// not supported
		public Keyword ele1KeywordEnd() { return c1KeywordEnd; }
	}

	public class TransitionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Assignment c00AssignmentEvent = (Assignment)c0Group.eContents().get(0);
		private final CrossReference c000CrossReferenceEStringEvent = (CrossReference)c00AssignmentEvent.eContents().get(0);
		private final Keyword c01KeywordEqualsSignGreaterThanSign = (Keyword)c0Group.eContents().get(1);
		private final Assignment c1AssignmentState = (Assignment)cGroup.eContents().get(1);
		private final CrossReference c10CrossReferenceEStringState = (CrossReference)c1AssignmentState.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Assignment ele00AssignmentEvent() { return c00AssignmentEvent; }

		// not supported
		public CrossReference ele000CrossReferenceEStringEvent() { return c000CrossReferenceEStringEvent; }

		// not supported
		public Keyword ele01KeywordEqualsSignGreaterThanSign() { return c01KeywordEqualsSignGreaterThanSign; }

		// not supported
		public Assignment ele1AssignmentState() { return c1AssignmentState; }

		// not supported
		public CrossReference ele10CrossReferenceEStringState() { return c10CrossReferenceEStringState; }
	}
	
	private StatemachineElements pStatemachine;
	private EventElements pEvent;
	private CommandElements pCommand;
	private StateElements pState;
	private TransitionElements pTransition;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess terminalsGrammarAccess;

	@Inject
	public FowlerDslTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess terminalsGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.terminalsGrammarAccess = terminalsGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return terminalsGrammarAccess;
	}

	
	// not supported
	public StatemachineElements prStatemachine() {
		return (pStatemachine != null) ? pStatemachine : (pStatemachine = new StatemachineElements());
	} 

	// not supported
	public EventElements prEvent() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	} 

	// not supported
	public CommandElements prCommand() {
		return (pCommand != null) ? pCommand : (pCommand = new CommandElements());
	} 

	// not supported
	public StateElements prState() {
		return (pState != null) ? pState : (pState = new StateElements());
	} 

	// not supported
	public TransitionElements prTransition() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	} 

	// not supported
	public TerminalRule trID() {
		return terminalsGrammarAccess.trID();
	} 

	// not supported
	public TerminalRule trINT() {
		return terminalsGrammarAccess.trINT();
	} 

	// not supported
	public TerminalRule trSTRING() {
		return terminalsGrammarAccess.trSTRING();
	} 

	// not supported
	public TerminalRule trML_COMMENT() {
		return terminalsGrammarAccess.trML_COMMENT();
	} 

	// not supported
	public TerminalRule trSL_COMMENT() {
		return terminalsGrammarAccess.trSL_COMMENT();
	} 

	// not supported
	public TerminalRule trWS() {
		return terminalsGrammarAccess.trWS();
	} 

	// not supported
	public TerminalRule trANY_OTHER() {
		return terminalsGrammarAccess.trANY_OTHER();
	} 
}
