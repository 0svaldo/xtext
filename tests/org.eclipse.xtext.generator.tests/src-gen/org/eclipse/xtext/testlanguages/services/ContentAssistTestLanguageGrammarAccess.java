/*
* generated by Xtext
*/

package org.eclipse.xtext.testlanguages.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ContentAssistTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class StartElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Start");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordAbstractRules = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentRules = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallAbstractRule = (RuleCall)c1AssignmentRules.eContents().get(0);
		private final Keyword c2KeywordEnd = (Keyword)cGroup.eContents().get(2);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordAbstractRules() { return c0KeywordAbstractRules; }

		// not supported
		public Assignment ele1AssignmentRules() { return c1AssignmentRules; }

		// not supported
		public RuleCall ele10ParserRuleCallAbstractRule() { return c10ParserRuleCallAbstractRule; }

		// not supported
		public Keyword ele2KeywordEnd() { return c2KeywordEnd; }
	}

	public class AbstractRuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallFirstAbstractRuleChild = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallSecondAbstractRuleChild = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallFirstAbstractRuleChild() { return c0ParserRuleCallFirstAbstractRuleChild; }

		// not supported
		public RuleCall ele1ParserRuleCallSecondAbstractRuleChild() { return c1ParserRuleCallSecondAbstractRuleChild; }
	}

	public class FirstAbstractRuleChildElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FirstAbstractRuleChild");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment c0AssignmentName = (Assignment)cGroup.eContents().get(0);
		private final RuleCall c00TerminalRuleCallID = (RuleCall)c0AssignmentName.eContents().get(0);
		private final Keyword c1KeywordLeftParenthesis = (Keyword)cGroup.eContents().get(1);
		private final Assignment c2AssignmentElements = (Assignment)cGroup.eContents().get(2);
		private final RuleCall c20ParserRuleCallAbstractRule = (RuleCall)c2AssignmentElements.eContents().get(0);
		private final Keyword c3KeywordRightParenthesis = (Keyword)cGroup.eContents().get(3);
		private final Keyword c4KeywordSemicolon = (Keyword)cGroup.eContents().get(4);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Assignment ele0AssignmentName() { return c0AssignmentName; }

		// not supported
		public RuleCall ele00TerminalRuleCallID() { return c00TerminalRuleCallID; }

		// not supported
		public Keyword ele1KeywordLeftParenthesis() { return c1KeywordLeftParenthesis; }

		// not supported
		public Assignment ele2AssignmentElements() { return c2AssignmentElements; }

		// not supported
		public RuleCall ele20ParserRuleCallAbstractRule() { return c20ParserRuleCallAbstractRule; }

		// not supported
		public Keyword ele3KeywordRightParenthesis() { return c3KeywordRightParenthesis; }

		// not supported
		public Keyword ele4KeywordSemicolon() { return c4KeywordSemicolon; }
	}

	public class SecondAbstractRuleChildElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SecondAbstractRuleChild");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment c0AssignmentName = (Assignment)cGroup.eContents().get(0);
		private final RuleCall c00TerminalRuleCallID = (RuleCall)c0AssignmentName.eContents().get(0);
		private final Keyword c1KeywordRule = (Keyword)cGroup.eContents().get(1);
		private final Keyword c2KeywordColon = (Keyword)cGroup.eContents().get(2);
		private final Assignment c3AssignmentRule = (Assignment)cGroup.eContents().get(3);
		private final RuleCall c30ParserRuleCallAbstractRuleCall = (RuleCall)c3AssignmentRule.eContents().get(0);
		private final Keyword c4KeywordSemicolon = (Keyword)cGroup.eContents().get(4);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Assignment ele0AssignmentName() { return c0AssignmentName; }

		// not supported
		public RuleCall ele00TerminalRuleCallID() { return c00TerminalRuleCallID; }

		// not supported
		public Keyword ele1KeywordRule() { return c1KeywordRule; }

		// not supported
		public Keyword ele2KeywordColon() { return c2KeywordColon; }

		// not supported
		public Assignment ele3AssignmentRule() { return c3AssignmentRule; }

		// not supported
		public RuleCall ele30ParserRuleCallAbstractRuleCall() { return c30ParserRuleCallAbstractRuleCall; }

		// not supported
		public Keyword ele4KeywordSemicolon() { return c4KeywordSemicolon; }
	}

	public class AbstractRuleCallElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractRuleCall");
		private final Assignment cAssignmentRule = (Assignment)rule.eContents().get(1);
		private final CrossReference c0CrossReferenceIDAbstractRule = (CrossReference)cAssignmentRule.eContents().get(0);
		private final RuleCall c01TerminalRuleCallID = (RuleCall)c0CrossReferenceIDAbstractRule.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Assignment eleAssignmentRule() { return cAssignmentRule; }

		// not supported
		public CrossReference ele0CrossReferenceIDAbstractRule() { return c0CrossReferenceIDAbstractRule; }

		// not supported
		public RuleCall ele01TerminalRuleCallID() { return c01TerminalRuleCallID; }
	}
	
	private StartElements pStart;
	private AbstractRuleElements pAbstractRule;
	private FirstAbstractRuleChildElements pFirstAbstractRuleChild;
	private SecondAbstractRuleChildElements pSecondAbstractRuleChild;
	private AbstractRuleCallElements pAbstractRuleCall;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess terminalsGrammarAccess;

	@Inject
	public ContentAssistTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess terminalsGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.terminalsGrammarAccess = terminalsGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return terminalsGrammarAccess;
	}

	
	// not supported
	public StartElements prStart() {
		return (pStart != null) ? pStart : (pStart = new StartElements());
	} 

	// not supported
	public AbstractRuleElements prAbstractRule() {
		return (pAbstractRule != null) ? pAbstractRule : (pAbstractRule = new AbstractRuleElements());
	} 

	// not supported
	public FirstAbstractRuleChildElements prFirstAbstractRuleChild() {
		return (pFirstAbstractRuleChild != null) ? pFirstAbstractRuleChild : (pFirstAbstractRuleChild = new FirstAbstractRuleChildElements());
	} 

	// not supported
	public SecondAbstractRuleChildElements prSecondAbstractRuleChild() {
		return (pSecondAbstractRuleChild != null) ? pSecondAbstractRuleChild : (pSecondAbstractRuleChild = new SecondAbstractRuleChildElements());
	} 

	// not supported
	public AbstractRuleCallElements prAbstractRuleCall() {
		return (pAbstractRuleCall != null) ? pAbstractRuleCall : (pAbstractRuleCall = new AbstractRuleCallElements());
	} 

	// not supported
	public TerminalRule trID() {
		return terminalsGrammarAccess.trID();
	} 

	// not supported
	public TerminalRule trINT() {
		return terminalsGrammarAccess.trINT();
	} 

	// not supported
	public TerminalRule trSTRING() {
		return terminalsGrammarAccess.trSTRING();
	} 

	// not supported
	public TerminalRule trML_COMMENT() {
		return terminalsGrammarAccess.trML_COMMENT();
	} 

	// not supported
	public TerminalRule trSL_COMMENT() {
		return terminalsGrammarAccess.trSL_COMMENT();
	} 

	// not supported
	public TerminalRule trWS() {
		return terminalsGrammarAccess.trWS();
	} 

	// not supported
	public TerminalRule trANY_OTHER() {
		return terminalsGrammarAccess.trANY_OTHER();
	} 
}
