/*
* generated by Xtext
*/

package org.eclipse.xtext.testlanguages.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class OptionalEmptyTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class ModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cAssignmentChild = (Assignment)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallGreeting = (RuleCall)cAssignmentChild.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Assignment eleAssignmentChild() { return cAssignmentChild; }

		// not supported
		public RuleCall ele0ParserRuleCallGreeting() { return c0ParserRuleCallGreeting; }
	}

	public class GreetingElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Greeting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordHallo = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallID = (RuleCall)c1AssignmentName.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordHallo() { return c0KeywordHallo; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10ParserRuleCallID() { return c10ParserRuleCallID; }
	}
	
	private ModelElements pModel;
	private GreetingElements pGreeting;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess superGrammarAccess;

	@Inject
	public OptionalEmptyTestLanguageGrammarAccess(GrammarProvider grammarProvider, TerminalsGrammarAccess superGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.superGrammarAccess = superGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getSuperGrammarAccess() {
		return superGrammarAccess;
	}

	
	// not supported
	public ModelElements prModel() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	} 

	// not supported
	public GreetingElements prGreeting() {
		return (pGreeting != null) ? pGreeting : (pGreeting = new GreetingElements());
	} 

	// not supported
	public org.eclipse.xtext.common.services.TerminalsGrammarAccess.IDElements prID() {
		return superGrammarAccess.prID();
	} 

	// not supported
	public org.eclipse.xtext.common.services.TerminalsGrammarAccess.INTElements prINT() {
		return superGrammarAccess.prINT();
	} 

	// not supported
	public org.eclipse.xtext.common.services.TerminalsGrammarAccess.STRINGElements prSTRING() {
		return superGrammarAccess.prSTRING();
	} 

	// not supported
	public org.eclipse.xtext.common.services.TerminalsGrammarAccess.ML_COMMENTElements prML_COMMENT() {
		return superGrammarAccess.prML_COMMENT();
	} 

	// not supported
	public org.eclipse.xtext.common.services.TerminalsGrammarAccess.SL_COMMENTElements prSL_COMMENT() {
		return superGrammarAccess.prSL_COMMENT();
	} 

	// not supported
	public org.eclipse.xtext.common.services.TerminalsGrammarAccess.WSElements prWS() {
		return superGrammarAccess.prWS();
	} 

	// not supported
	public org.eclipse.xtext.common.services.TerminalsGrammarAccess.ANY_OTHERElements prANY_OTHER() {
		return superGrammarAccess.prANY_OTHER();
	} 
}
