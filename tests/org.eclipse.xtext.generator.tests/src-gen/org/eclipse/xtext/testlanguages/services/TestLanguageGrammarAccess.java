/*
* generated by Xtext
*/

package org.eclipse.xtext.testlanguages.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class EntryRuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntryRule");
		private final Assignment cAssignmentMultiFeature = (Assignment)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallAbstractRule = (RuleCall)cAssignmentMultiFeature.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Assignment eleAssignmentMultiFeature() { return cAssignmentMultiFeature; }

		// not supported
		public RuleCall ele0ParserRuleCallAbstractRule() { return c0ParserRuleCallAbstractRule; }
	}

	public class AbstractRuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallChoiceRule = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallReducibleRule = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallChoiceRule() { return c0ParserRuleCallChoiceRule; }

		// not supported
		public RuleCall ele1ParserRuleCallReducibleRule() { return c1ParserRuleCallReducibleRule; }
	}

	public class ChoiceRuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChoiceRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordChoice = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentOptionalKeyword = (Assignment)cGroup.eContents().get(1);
		private final Keyword c10KeywordOptional = (Keyword)c1AssignmentOptionalKeyword.eContents().get(0);
		private final Assignment c2AssignmentName = (Assignment)cGroup.eContents().get(2);
		private final RuleCall c20TerminalRuleCallID = (RuleCall)c2AssignmentName.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordChoice() { return c0KeywordChoice; }

		// not supported
		public Assignment ele1AssignmentOptionalKeyword() { return c1AssignmentOptionalKeyword; }

		// not supported
		public Keyword ele10KeywordOptional() { return c10KeywordOptional; }

		// not supported
		public Assignment ele2AssignmentName() { return c2AssignmentName; }

		// not supported
		public RuleCall ele20TerminalRuleCallID() { return c20TerminalRuleCallID; }
	}

	public class ReducibleRuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReducibleRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordReducible = (Keyword)cGroup.eContents().get(0);
		private final RuleCall c1ParserRuleCallTerminalRule = (RuleCall)cGroup.eContents().get(1);
		private final Group c2Group = (Group)cGroup.eContents().get(2);
		private final Action c20ActionReducibleCompositeactionFeature = (Action)c2Group.eContents().get(0);
		private final Assignment c21AssignmentActionFeature = (Assignment)c2Group.eContents().get(1);
		private final RuleCall c210ParserRuleCallTerminalRule = (RuleCall)c21AssignmentActionFeature.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordReducible() { return c0KeywordReducible; }

		// not supported
		public RuleCall ele1ParserRuleCallTerminalRule() { return c1ParserRuleCallTerminalRule; }

		// not supported
		public Group ele2Group() { return c2Group; }

		// not supported
		public Action ele20ActionReducibleCompositeactionFeature() { return c20ActionReducibleCompositeactionFeature; }

		// not supported
		public Assignment ele21AssignmentActionFeature() { return c21AssignmentActionFeature; }

		// not supported
		public RuleCall ele210ParserRuleCallTerminalRule() { return c210ParserRuleCallTerminalRule; }
	}

	public class TerminalRuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalRule");
		private final Assignment cAssignmentStringFeature = (Assignment)rule.eContents().get(1);
		private final RuleCall c0TerminalRuleCallSTRING = (RuleCall)cAssignmentStringFeature.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Assignment eleAssignmentStringFeature() { return cAssignmentStringFeature; }

		// not supported
		public RuleCall ele0TerminalRuleCallSTRING() { return c0TerminalRuleCallSTRING; }
	}
	
	private EntryRuleElements pEntryRule;
	private AbstractRuleElements pAbstractRule;
	private ChoiceRuleElements pChoiceRule;
	private ReducibleRuleElements pReducibleRule;
	private TerminalRuleElements pTerminalRule;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess terminalsGrammarAccess;

	@Inject
	public TestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess terminalsGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.terminalsGrammarAccess = terminalsGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return terminalsGrammarAccess;
	}

	
	// not supported
	public EntryRuleElements prEntryRule() {
		return (pEntryRule != null) ? pEntryRule : (pEntryRule = new EntryRuleElements());
	} 

	// not supported
	public AbstractRuleElements prAbstractRule() {
		return (pAbstractRule != null) ? pAbstractRule : (pAbstractRule = new AbstractRuleElements());
	} 

	// not supported
	public ChoiceRuleElements prChoiceRule() {
		return (pChoiceRule != null) ? pChoiceRule : (pChoiceRule = new ChoiceRuleElements());
	} 

	// not supported
	public ReducibleRuleElements prReducibleRule() {
		return (pReducibleRule != null) ? pReducibleRule : (pReducibleRule = new ReducibleRuleElements());
	} 

	// not supported
	public TerminalRuleElements prTerminalRule() {
		return (pTerminalRule != null) ? pTerminalRule : (pTerminalRule = new TerminalRuleElements());
	} 

	// not supported
	public TerminalRule trID() {
		return terminalsGrammarAccess.trID();
	} 

	// not supported
	public TerminalRule trINT() {
		return terminalsGrammarAccess.trINT();
	} 

	// not supported
	public TerminalRule trSTRING() {
		return terminalsGrammarAccess.trSTRING();
	} 

	// not supported
	public TerminalRule trML_COMMENT() {
		return terminalsGrammarAccess.trML_COMMENT();
	} 

	// not supported
	public TerminalRule trSL_COMMENT() {
		return terminalsGrammarAccess.trSL_COMMENT();
	} 

	// not supported
	public TerminalRule trWS() {
		return terminalsGrammarAccess.trWS();
	} 

	// not supported
	public TerminalRule trANY_OTHER() {
		return terminalsGrammarAccess.trANY_OTHER();
	} 
}
