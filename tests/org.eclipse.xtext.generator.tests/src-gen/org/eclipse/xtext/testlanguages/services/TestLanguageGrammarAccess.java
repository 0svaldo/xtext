/*
* generated by Xtext
*/

package org.eclipse.xtext.testlanguages.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.builtin.XtextBuiltinGrammarAccess;

@Singleton
public class TestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class EntryRuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntryRule");
		private final Assignment cAssignmentMultiFeature = (Assignment)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallAbstractRule = (RuleCall)cAssignmentMultiFeature.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Assignment eleAssignmentMultiFeature() { return cAssignmentMultiFeature; }

		// not supported
		public RuleCall ele0ParserRuleCallAbstractRule() { return c0ParserRuleCallAbstractRule; }
	}

	public class AbstractRuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallChoiceRule = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallReducibleRule = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallChoiceRule() { return c0ParserRuleCallChoiceRule; }

		// not supported
		public RuleCall ele1ParserRuleCallReducibleRule() { return c1ParserRuleCallReducibleRule; }
	}

	public class ChoiceRuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChoiceRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Keyword c00KeywordChoice = (Keyword)c0Group.eContents().get(0);
		private final Assignment c01AssignmentOptionalKeyword = (Assignment)c0Group.eContents().get(1);
		private final Keyword c010KeywordOptional = (Keyword)c01AssignmentOptionalKeyword.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10LexerRuleCallID = (RuleCall)c1AssignmentName.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Keyword ele00KeywordChoice() { return c00KeywordChoice; }

		// not supported
		public Assignment ele01AssignmentOptionalKeyword() { return c01AssignmentOptionalKeyword; }

		// not supported
		public Keyword ele010KeywordOptional() { return c010KeywordOptional; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10LexerRuleCallID() { return c10LexerRuleCallID; }
	}

	public class ReducibleRuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReducibleRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Keyword c00KeywordReducible = (Keyword)c0Group.eContents().get(0);
		private final RuleCall c01ParserRuleCallTerminalRule = (RuleCall)c0Group.eContents().get(1);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Action c10ActionReducibleCompositeactionFeature = (Action)c1Group.eContents().get(0);
		private final Assignment c11AssignmentActionFeature = (Assignment)c1Group.eContents().get(1);
		private final RuleCall c110ParserRuleCallTerminalRule = (RuleCall)c11AssignmentActionFeature.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Keyword ele00KeywordReducible() { return c00KeywordReducible; }

		// not supported
		public RuleCall ele01ParserRuleCallTerminalRule() { return c01ParserRuleCallTerminalRule; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Action ele10ActionReducibleCompositeactionFeature() { return c10ActionReducibleCompositeactionFeature; }

		// not supported
		public Assignment ele11AssignmentActionFeature() { return c11AssignmentActionFeature; }

		// not supported
		public RuleCall ele110ParserRuleCallTerminalRule() { return c110ParserRuleCallTerminalRule; }
	}

	public class TerminalRuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalRule");
		private final Assignment cAssignmentStringFeature = (Assignment)rule.eContents().get(1);
		private final RuleCall c0LexerRuleCallSTRING = (RuleCall)cAssignmentStringFeature.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Assignment eleAssignmentStringFeature() { return cAssignmentStringFeature; }

		// not supported
		public RuleCall ele0LexerRuleCallSTRING() { return c0LexerRuleCallSTRING; }
	}
	
	private EntryRuleElements pEntryRule;
	private AbstractRuleElements pAbstractRule;
	private ChoiceRuleElements pChoiceRule;
	private ReducibleRuleElements pReducibleRule;
	private TerminalRuleElements pTerminalRule;
	
	private final GrammarProvider grammarProvider;

	private XtextBuiltinGrammarAccess superGrammarAccess;

	@Inject
	public TestLanguageGrammarAccess(GrammarProvider grammarProvider, XtextBuiltinGrammarAccess superGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.superGrammarAccess = superGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public XtextBuiltinGrammarAccess getSuperGrammarAccess() {
		return superGrammarAccess;
	}

	
	// not supported
	public EntryRuleElements prEntryRule() {
		return (pEntryRule != null) ? pEntryRule : (pEntryRule = new EntryRuleElements());
	} 

	// not supported
	public AbstractRuleElements prAbstractRule() {
		return (pAbstractRule != null) ? pAbstractRule : (pAbstractRule = new AbstractRuleElements());
	} 

	// not supported
	public ChoiceRuleElements prChoiceRule() {
		return (pChoiceRule != null) ? pChoiceRule : (pChoiceRule = new ChoiceRuleElements());
	} 

	// not supported
	public ReducibleRuleElements prReducibleRule() {
		return (pReducibleRule != null) ? pReducibleRule : (pReducibleRule = new ReducibleRuleElements());
	} 

	// not supported
	public TerminalRuleElements prTerminalRule() {
		return (pTerminalRule != null) ? pTerminalRule : (pTerminalRule = new TerminalRuleElements());
	} 

	// not supported
	public LexerRule lrID() {
		return superGrammarAccess.lrID();
	} 

	// not supported
	public LexerRule lrINT() {
		return superGrammarAccess.lrINT();
	} 

	// not supported
	public LexerRule lrSTRING() {
		return superGrammarAccess.lrSTRING();
	} 

	// not supported
	public LexerRule lrML_COMMENT() {
		return superGrammarAccess.lrML_COMMENT();
	} 

	// not supported
	public LexerRule lrSL_COMMENT() {
		return superGrammarAccess.lrSL_COMMENT();
	} 

	// not supported
	public LexerRule lrWS() {
		return superGrammarAccess.lrWS();
	} 

	// not supported
	public LexerRule lrANY_OTHER() {
		return superGrammarAccess.lrANY_OTHER();
	} 
}
