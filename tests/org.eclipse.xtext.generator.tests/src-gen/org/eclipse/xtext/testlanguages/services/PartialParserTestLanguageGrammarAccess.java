/*
* generated by Xtext
*/

package org.eclipse.xtext.testlanguages.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PartialParserTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class SomeContainerElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SomeContainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Group c000Group = (Group)c00Group.eContents().get(0);
		private final Keyword c0000KeywordContainer = (Keyword)c000Group.eContents().get(0);
		private final Assignment c0001AssignmentName = (Assignment)c000Group.eContents().get(1);
		private final RuleCall c00010TerminalRuleCallID = (RuleCall)c0001AssignmentName.eContents().get(0);
		private final Keyword c001KeywordLeftCurlyBracket = (Keyword)c00Group.eContents().get(1);
		private final Alternatives c01Alternatives = (Alternatives)c0Group.eContents().get(1);
		private final Assignment c010AssignmentNested = (Assignment)c01Alternatives.eContents().get(0);
		private final RuleCall c0100ParserRuleCallNested = (RuleCall)c010AssignmentNested.eContents().get(0);
		private final Assignment c011AssignmentContent = (Assignment)c01Alternatives.eContents().get(1);
		private final RuleCall c0110ParserRuleCallContent = (RuleCall)c011AssignmentContent.eContents().get(0);
		private final Keyword c1KeywordRightCurlyBracket = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Group ele000Group() { return c000Group; }

		// not supported
		public Keyword ele0000KeywordContainer() { return c0000KeywordContainer; }

		// not supported
		public Assignment ele0001AssignmentName() { return c0001AssignmentName; }

		// not supported
		public RuleCall ele00010TerminalRuleCallID() { return c00010TerminalRuleCallID; }

		// not supported
		public Keyword ele001KeywordLeftCurlyBracket() { return c001KeywordLeftCurlyBracket; }

		// not supported
		public Alternatives ele01Alternatives() { return c01Alternatives; }

		// not supported
		public Assignment ele010AssignmentNested() { return c010AssignmentNested; }

		// not supported
		public RuleCall ele0100ParserRuleCallNested() { return c0100ParserRuleCallNested; }

		// not supported
		public Assignment ele011AssignmentContent() { return c011AssignmentContent; }

		// not supported
		public RuleCall ele0110ParserRuleCallContent() { return c0110ParserRuleCallContent; }

		// not supported
		public Keyword ele1KeywordRightCurlyBracket() { return c1KeywordRightCurlyBracket; }
	}

	public class NestedElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Nested");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Keyword c000KeywordNested = (Keyword)c00Group.eContents().get(0);
		private final Keyword c001KeywordLeftCurlyBracket = (Keyword)c00Group.eContents().get(1);
		private final Assignment c01AssignmentNested = (Assignment)c0Group.eContents().get(1);
		private final RuleCall c010ParserRuleCallSomeContainer = (RuleCall)c01AssignmentNested.eContents().get(0);
		private final Keyword c1KeywordRightCurlyBracket = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Keyword ele000KeywordNested() { return c000KeywordNested; }

		// not supported
		public Keyword ele001KeywordLeftCurlyBracket() { return c001KeywordLeftCurlyBracket; }

		// not supported
		public Assignment ele01AssignmentNested() { return c01AssignmentNested; }

		// not supported
		public RuleCall ele010ParserRuleCallSomeContainer() { return c010ParserRuleCallSomeContainer; }

		// not supported
		public Keyword ele1KeywordRightCurlyBracket() { return c1KeywordRightCurlyBracket; }
	}

	public class ContentElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Content");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallChildren = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallAbstractChildren = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallChildren() { return c0ParserRuleCallChildren; }

		// not supported
		public RuleCall ele1ParserRuleCallAbstractChildren() { return c1ParserRuleCallAbstractChildren; }
	}

	public class ChildrenElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Children");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Group c000Group = (Group)c00Group.eContents().get(0);
		private final Keyword c0000KeywordChildren = (Keyword)c000Group.eContents().get(0);
		private final Keyword c0001KeywordLeftCurlyBracket = (Keyword)c000Group.eContents().get(1);
		private final Assignment c001AssignmentChildren = (Assignment)c00Group.eContents().get(1);
		private final RuleCall c0010ParserRuleCallChild = (RuleCall)c001AssignmentChildren.eContents().get(0);
		private final Group c01Group = (Group)c0Group.eContents().get(1);
		private final Keyword c010KeywordComma = (Keyword)c01Group.eContents().get(0);
		private final Assignment c011AssignmentChildren = (Assignment)c01Group.eContents().get(1);
		private final RuleCall c0110ParserRuleCallChild = (RuleCall)c011AssignmentChildren.eContents().get(0);
		private final Keyword c1KeywordRightCurlyBracket = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Group ele000Group() { return c000Group; }

		// not supported
		public Keyword ele0000KeywordChildren() { return c0000KeywordChildren; }

		// not supported
		public Keyword ele0001KeywordLeftCurlyBracket() { return c0001KeywordLeftCurlyBracket; }

		// not supported
		public Assignment ele001AssignmentChildren() { return c001AssignmentChildren; }

		// not supported
		public RuleCall ele0010ParserRuleCallChild() { return c0010ParserRuleCallChild; }

		// not supported
		public Group ele01Group() { return c01Group; }

		// not supported
		public Keyword ele010KeywordComma() { return c010KeywordComma; }

		// not supported
		public Assignment ele011AssignmentChildren() { return c011AssignmentChildren; }

		// not supported
		public RuleCall ele0110ParserRuleCallChild() { return c0110ParserRuleCallChild; }

		// not supported
		public Keyword ele1KeywordRightCurlyBracket() { return c1KeywordRightCurlyBracket; }
	}

	public class ChildElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Child");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Group c000Group = (Group)c00Group.eContents().get(0);
		private final Keyword c0000KeywordHyphenMinusGreaterThanSign = (Keyword)c000Group.eContents().get(0);
		private final Keyword c0001KeywordC = (Keyword)c000Group.eContents().get(1);
		private final Keyword c001KeywordLeftParenthesis = (Keyword)c00Group.eContents().get(1);
		private final Assignment c01AssignmentValue = (Assignment)c0Group.eContents().get(1);
		private final RuleCall c010ParserRuleCallNamed = (RuleCall)c01AssignmentValue.eContents().get(0);
		private final Keyword c1KeywordRightParenthesis = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Group ele000Group() { return c000Group; }

		// not supported
		public Keyword ele0000KeywordHyphenMinusGreaterThanSign() { return c0000KeywordHyphenMinusGreaterThanSign; }

		// not supported
		public Keyword ele0001KeywordC() { return c0001KeywordC; }

		// not supported
		public Keyword ele001KeywordLeftParenthesis() { return c001KeywordLeftParenthesis; }

		// not supported
		public Assignment ele01AssignmentValue() { return c01AssignmentValue; }

		// not supported
		public RuleCall ele010ParserRuleCallNamed() { return c010ParserRuleCallNamed; }

		// not supported
		public Keyword ele1KeywordRightParenthesis() { return c1KeywordRightParenthesis; }
	}

	public class AbstractChildrenElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractChildren");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Keyword c000KeywordAbstractChildren = (Keyword)c00Group.eContents().get(0);
		private final Keyword c001KeywordLeftCurlyBracket = (Keyword)c00Group.eContents().get(1);
		private final Assignment c01AssignmentAbstractChildren = (Assignment)c0Group.eContents().get(1);
		private final RuleCall c010ParserRuleCallAbstractChild = (RuleCall)c01AssignmentAbstractChildren.eContents().get(0);
		private final Keyword c1KeywordRightCurlyBracket = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Keyword ele000KeywordAbstractChildren() { return c000KeywordAbstractChildren; }

		// not supported
		public Keyword ele001KeywordLeftCurlyBracket() { return c001KeywordLeftCurlyBracket; }

		// not supported
		public Assignment ele01AssignmentAbstractChildren() { return c01AssignmentAbstractChildren; }

		// not supported
		public RuleCall ele010ParserRuleCallAbstractChild() { return c010ParserRuleCallAbstractChild; }

		// not supported
		public Keyword ele1KeywordRightCurlyBracket() { return c1KeywordRightCurlyBracket; }
	}

	public class AbstractChildElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractChild");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallFirstConcrete = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallSecondConcrete = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallFirstConcrete() { return c0ParserRuleCallFirstConcrete; }

		// not supported
		public RuleCall ele1ParserRuleCallSecondConcrete() { return c1ParserRuleCallSecondConcrete; }
	}

	public class FirstConcreteElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FirstConcrete");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Group c000Group = (Group)c00Group.eContents().get(0);
		private final Group c0000Group = (Group)c000Group.eContents().get(0);
		private final Keyword c00000KeywordHyphenMinusGreaterThanSign = (Keyword)c0000Group.eContents().get(0);
		private final Keyword c00001KeywordF = (Keyword)c0000Group.eContents().get(1);
		private final Keyword c0001KeywordLeftParenthesis = (Keyword)c000Group.eContents().get(1);
		private final Assignment c001AssignmentValue = (Assignment)c00Group.eContents().get(1);
		private final RuleCall c0010ParserRuleCallNamed = (RuleCall)c001AssignmentValue.eContents().get(0);
		private final Assignment c01AssignmentReferencedContainer = (Assignment)c0Group.eContents().get(1);
		private final CrossReference c010CrossReferenceEStringSomeContainer = (CrossReference)c01AssignmentReferencedContainer.eContents().get(0);
		private final Keyword c1KeywordRightParenthesis = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Group ele000Group() { return c000Group; }

		// not supported
		public Group ele0000Group() { return c0000Group; }

		// not supported
		public Keyword ele00000KeywordHyphenMinusGreaterThanSign() { return c00000KeywordHyphenMinusGreaterThanSign; }

		// not supported
		public Keyword ele00001KeywordF() { return c00001KeywordF; }

		// not supported
		public Keyword ele0001KeywordLeftParenthesis() { return c0001KeywordLeftParenthesis; }

		// not supported
		public Assignment ele001AssignmentValue() { return c001AssignmentValue; }

		// not supported
		public RuleCall ele0010ParserRuleCallNamed() { return c0010ParserRuleCallNamed; }

		// not supported
		public Assignment ele01AssignmentReferencedContainer() { return c01AssignmentReferencedContainer; }

		// not supported
		public CrossReference ele010CrossReferenceEStringSomeContainer() { return c010CrossReferenceEStringSomeContainer; }

		// not supported
		public Keyword ele1KeywordRightParenthesis() { return c1KeywordRightParenthesis; }
	}

	public class SecondConcreteElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SecondConcrete");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Group c000Group = (Group)c00Group.eContents().get(0);
		private final Group c0000Group = (Group)c000Group.eContents().get(0);
		private final Group c00000Group = (Group)c0000Group.eContents().get(0);
		private final Keyword c000000KeywordHyphenMinusGreaterThanSign = (Keyword)c00000Group.eContents().get(0);
		private final Keyword c000001KeywordF = (Keyword)c00000Group.eContents().get(1);
		private final Keyword c00001KeywordS = (Keyword)c0000Group.eContents().get(1);
		private final Keyword c0001KeywordLeftParenthesis = (Keyword)c000Group.eContents().get(1);
		private final Assignment c001AssignmentValue = (Assignment)c00Group.eContents().get(1);
		private final RuleCall c0010ParserRuleCallNamed = (RuleCall)c001AssignmentValue.eContents().get(0);
		private final Assignment c01AssignmentReferencedChildren = (Assignment)c0Group.eContents().get(1);
		private final CrossReference c010CrossReferenceEStringChild = (CrossReference)c01AssignmentReferencedChildren.eContents().get(0);
		private final Keyword c1KeywordRightParenthesis = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Group ele000Group() { return c000Group; }

		// not supported
		public Group ele0000Group() { return c0000Group; }

		// not supported
		public Group ele00000Group() { return c00000Group; }

		// not supported
		public Keyword ele000000KeywordHyphenMinusGreaterThanSign() { return c000000KeywordHyphenMinusGreaterThanSign; }

		// not supported
		public Keyword ele000001KeywordF() { return c000001KeywordF; }

		// not supported
		public Keyword ele00001KeywordS() { return c00001KeywordS; }

		// not supported
		public Keyword ele0001KeywordLeftParenthesis() { return c0001KeywordLeftParenthesis; }

		// not supported
		public Assignment ele001AssignmentValue() { return c001AssignmentValue; }

		// not supported
		public RuleCall ele0010ParserRuleCallNamed() { return c0010ParserRuleCallNamed; }

		// not supported
		public Assignment ele01AssignmentReferencedChildren() { return c01AssignmentReferencedChildren; }

		// not supported
		public CrossReference ele010CrossReferenceEStringChild() { return c010CrossReferenceEStringChild; }

		// not supported
		public Keyword ele1KeywordRightParenthesis() { return c1KeywordRightParenthesis; }
	}

	public class NamedElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Named");
		private final Assignment cAssignmentName = (Assignment)rule.eContents().get(1);
		private final RuleCall c0TerminalRuleCallID = (RuleCall)cAssignmentName.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Assignment eleAssignmentName() { return cAssignmentName; }

		// not supported
		public RuleCall ele0TerminalRuleCallID() { return c0TerminalRuleCallID; }
	}
	
	private SomeContainerElements pSomeContainer;
	private NestedElements pNested;
	private ContentElements pContent;
	private ChildrenElements pChildren;
	private ChildElements pChild;
	private AbstractChildrenElements pAbstractChildren;
	private AbstractChildElements pAbstractChild;
	private FirstConcreteElements pFirstConcrete;
	private SecondConcreteElements pSecondConcrete;
	private NamedElements pNamed;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess superGrammarAccess;

	@Inject
	public PartialParserTestLanguageGrammarAccess(GrammarProvider grammarProvider, TerminalsGrammarAccess superGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.superGrammarAccess = superGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getSuperGrammarAccess() {
		return superGrammarAccess;
	}

	
	// not supported
	public SomeContainerElements prSomeContainer() {
		return (pSomeContainer != null) ? pSomeContainer : (pSomeContainer = new SomeContainerElements());
	} 

	// not supported
	public NestedElements prNested() {
		return (pNested != null) ? pNested : (pNested = new NestedElements());
	} 

	// not supported
	public ContentElements prContent() {
		return (pContent != null) ? pContent : (pContent = new ContentElements());
	} 

	// not supported
	public ChildrenElements prChildren() {
		return (pChildren != null) ? pChildren : (pChildren = new ChildrenElements());
	} 

	// not supported
	public ChildElements prChild() {
		return (pChild != null) ? pChild : (pChild = new ChildElements());
	} 

	// not supported
	public AbstractChildrenElements prAbstractChildren() {
		return (pAbstractChildren != null) ? pAbstractChildren : (pAbstractChildren = new AbstractChildrenElements());
	} 

	// not supported
	public AbstractChildElements prAbstractChild() {
		return (pAbstractChild != null) ? pAbstractChild : (pAbstractChild = new AbstractChildElements());
	} 

	// not supported
	public FirstConcreteElements prFirstConcrete() {
		return (pFirstConcrete != null) ? pFirstConcrete : (pFirstConcrete = new FirstConcreteElements());
	} 

	// not supported
	public SecondConcreteElements prSecondConcrete() {
		return (pSecondConcrete != null) ? pSecondConcrete : (pSecondConcrete = new SecondConcreteElements());
	} 

	// not supported
	public NamedElements prNamed() {
		return (pNamed != null) ? pNamed : (pNamed = new NamedElements());
	} 

	// not supported
	public TerminalRule trID() {
		return superGrammarAccess.trID();
	} 

	// not supported
	public TerminalRule trINT() {
		return superGrammarAccess.trINT();
	} 

	// not supported
	public TerminalRule trSTRING() {
		return superGrammarAccess.trSTRING();
	} 

	// not supported
	public TerminalRule trML_COMMENT() {
		return superGrammarAccess.trML_COMMENT();
	} 

	// not supported
	public TerminalRule trSL_COMMENT() {
		return superGrammarAccess.trSL_COMMENT();
	} 

	// not supported
	public TerminalRule trWS() {
		return superGrammarAccess.trWS();
	} 

	// not supported
	public TerminalRule trANY_OTHER() {
		return superGrammarAccess.trANY_OTHER();
	} 
}
