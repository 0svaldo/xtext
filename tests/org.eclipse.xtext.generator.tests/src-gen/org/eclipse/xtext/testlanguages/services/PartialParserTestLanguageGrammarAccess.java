/*
* generated by Xtext
*/

package org.eclipse.xtext.testlanguages.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PartialParserTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class SomeContainerElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SomeContainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordContainer = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallID = (RuleCall)c1AssignmentName.eContents().get(0);
		private final Keyword c2KeywordLeftCurlyBracket = (Keyword)cGroup.eContents().get(2);
		private final Alternatives c3Alternatives = (Alternatives)cGroup.eContents().get(3);
		private final Assignment c30AssignmentNested = (Assignment)c3Alternatives.eContents().get(0);
		private final RuleCall c300ParserRuleCallNested = (RuleCall)c30AssignmentNested.eContents().get(0);
		private final Assignment c31AssignmentContent = (Assignment)c3Alternatives.eContents().get(1);
		private final RuleCall c310ParserRuleCallContent = (RuleCall)c31AssignmentContent.eContents().get(0);
		private final Keyword c4KeywordRightCurlyBracket = (Keyword)cGroup.eContents().get(4);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordContainer() { return c0KeywordContainer; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10TerminalRuleCallID() { return c10TerminalRuleCallID; }

		// not supported
		public Keyword ele2KeywordLeftCurlyBracket() { return c2KeywordLeftCurlyBracket; }

		// not supported
		public Alternatives ele3Alternatives() { return c3Alternatives; }

		// not supported
		public Assignment ele30AssignmentNested() { return c30AssignmentNested; }

		// not supported
		public RuleCall ele300ParserRuleCallNested() { return c300ParserRuleCallNested; }

		// not supported
		public Assignment ele31AssignmentContent() { return c31AssignmentContent; }

		// not supported
		public RuleCall ele310ParserRuleCallContent() { return c310ParserRuleCallContent; }

		// not supported
		public Keyword ele4KeywordRightCurlyBracket() { return c4KeywordRightCurlyBracket; }
	}

	public class NestedElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Nested");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordNested = (Keyword)cGroup.eContents().get(0);
		private final Keyword c1KeywordLeftCurlyBracket = (Keyword)cGroup.eContents().get(1);
		private final Assignment c2AssignmentNested = (Assignment)cGroup.eContents().get(2);
		private final RuleCall c20ParserRuleCallSomeContainer = (RuleCall)c2AssignmentNested.eContents().get(0);
		private final Keyword c3KeywordRightCurlyBracket = (Keyword)cGroup.eContents().get(3);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordNested() { return c0KeywordNested; }

		// not supported
		public Keyword ele1KeywordLeftCurlyBracket() { return c1KeywordLeftCurlyBracket; }

		// not supported
		public Assignment ele2AssignmentNested() { return c2AssignmentNested; }

		// not supported
		public RuleCall ele20ParserRuleCallSomeContainer() { return c20ParserRuleCallSomeContainer; }

		// not supported
		public Keyword ele3KeywordRightCurlyBracket() { return c3KeywordRightCurlyBracket; }
	}

	public class ContentElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Content");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallChildren = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallAbstractChildren = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallChildren() { return c0ParserRuleCallChildren; }

		// not supported
		public RuleCall ele1ParserRuleCallAbstractChildren() { return c1ParserRuleCallAbstractChildren; }
	}

	public class ChildrenElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Children");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordChildren = (Keyword)cGroup.eContents().get(0);
		private final Keyword c1KeywordLeftCurlyBracket = (Keyword)cGroup.eContents().get(1);
		private final Assignment c2AssignmentChildren = (Assignment)cGroup.eContents().get(2);
		private final RuleCall c20ParserRuleCallChild = (RuleCall)c2AssignmentChildren.eContents().get(0);
		private final Group c3Group = (Group)cGroup.eContents().get(3);
		private final Keyword c30KeywordComma = (Keyword)c3Group.eContents().get(0);
		private final Assignment c31AssignmentChildren = (Assignment)c3Group.eContents().get(1);
		private final RuleCall c310ParserRuleCallChild = (RuleCall)c31AssignmentChildren.eContents().get(0);
		private final Keyword c4KeywordRightCurlyBracket = (Keyword)cGroup.eContents().get(4);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordChildren() { return c0KeywordChildren; }

		// not supported
		public Keyword ele1KeywordLeftCurlyBracket() { return c1KeywordLeftCurlyBracket; }

		// not supported
		public Assignment ele2AssignmentChildren() { return c2AssignmentChildren; }

		// not supported
		public RuleCall ele20ParserRuleCallChild() { return c20ParserRuleCallChild; }

		// not supported
		public Group ele3Group() { return c3Group; }

		// not supported
		public Keyword ele30KeywordComma() { return c30KeywordComma; }

		// not supported
		public Assignment ele31AssignmentChildren() { return c31AssignmentChildren; }

		// not supported
		public RuleCall ele310ParserRuleCallChild() { return c310ParserRuleCallChild; }

		// not supported
		public Keyword ele4KeywordRightCurlyBracket() { return c4KeywordRightCurlyBracket; }
	}

	public class ChildElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Child");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordHyphenMinusGreaterThanSign = (Keyword)cGroup.eContents().get(0);
		private final Keyword c1KeywordC = (Keyword)cGroup.eContents().get(1);
		private final Keyword c2KeywordLeftParenthesis = (Keyword)cGroup.eContents().get(2);
		private final Assignment c3AssignmentValue = (Assignment)cGroup.eContents().get(3);
		private final RuleCall c30ParserRuleCallNamed = (RuleCall)c3AssignmentValue.eContents().get(0);
		private final Keyword c4KeywordRightParenthesis = (Keyword)cGroup.eContents().get(4);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordHyphenMinusGreaterThanSign() { return c0KeywordHyphenMinusGreaterThanSign; }

		// not supported
		public Keyword ele1KeywordC() { return c1KeywordC; }

		// not supported
		public Keyword ele2KeywordLeftParenthesis() { return c2KeywordLeftParenthesis; }

		// not supported
		public Assignment ele3AssignmentValue() { return c3AssignmentValue; }

		// not supported
		public RuleCall ele30ParserRuleCallNamed() { return c30ParserRuleCallNamed; }

		// not supported
		public Keyword ele4KeywordRightParenthesis() { return c4KeywordRightParenthesis; }
	}

	public class AbstractChildrenElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractChildren");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordAbstractChildren = (Keyword)cGroup.eContents().get(0);
		private final Keyword c1KeywordLeftCurlyBracket = (Keyword)cGroup.eContents().get(1);
		private final Assignment c2AssignmentAbstractChildren = (Assignment)cGroup.eContents().get(2);
		private final RuleCall c20ParserRuleCallAbstractChild = (RuleCall)c2AssignmentAbstractChildren.eContents().get(0);
		private final Keyword c3KeywordRightCurlyBracket = (Keyword)cGroup.eContents().get(3);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordAbstractChildren() { return c0KeywordAbstractChildren; }

		// not supported
		public Keyword ele1KeywordLeftCurlyBracket() { return c1KeywordLeftCurlyBracket; }

		// not supported
		public Assignment ele2AssignmentAbstractChildren() { return c2AssignmentAbstractChildren; }

		// not supported
		public RuleCall ele20ParserRuleCallAbstractChild() { return c20ParserRuleCallAbstractChild; }

		// not supported
		public Keyword ele3KeywordRightCurlyBracket() { return c3KeywordRightCurlyBracket; }
	}

	public class AbstractChildElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractChild");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallFirstConcrete = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallSecondConcrete = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallFirstConcrete() { return c0ParserRuleCallFirstConcrete; }

		// not supported
		public RuleCall ele1ParserRuleCallSecondConcrete() { return c1ParserRuleCallSecondConcrete; }
	}

	public class FirstConcreteElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FirstConcrete");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordHyphenMinusGreaterThanSign = (Keyword)cGroup.eContents().get(0);
		private final Keyword c1KeywordF = (Keyword)cGroup.eContents().get(1);
		private final Keyword c2KeywordLeftParenthesis = (Keyword)cGroup.eContents().get(2);
		private final Assignment c3AssignmentValue = (Assignment)cGroup.eContents().get(3);
		private final RuleCall c30ParserRuleCallNamed = (RuleCall)c3AssignmentValue.eContents().get(0);
		private final Assignment c4AssignmentReferencedContainer = (Assignment)cGroup.eContents().get(4);
		private final CrossReference c40CrossReferenceEStringSomeContainer = (CrossReference)c4AssignmentReferencedContainer.eContents().get(0);
		private final Keyword c5KeywordRightParenthesis = (Keyword)cGroup.eContents().get(5);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordHyphenMinusGreaterThanSign() { return c0KeywordHyphenMinusGreaterThanSign; }

		// not supported
		public Keyword ele1KeywordF() { return c1KeywordF; }

		// not supported
		public Keyword ele2KeywordLeftParenthesis() { return c2KeywordLeftParenthesis; }

		// not supported
		public Assignment ele3AssignmentValue() { return c3AssignmentValue; }

		// not supported
		public RuleCall ele30ParserRuleCallNamed() { return c30ParserRuleCallNamed; }

		// not supported
		public Assignment ele4AssignmentReferencedContainer() { return c4AssignmentReferencedContainer; }

		// not supported
		public CrossReference ele40CrossReferenceEStringSomeContainer() { return c40CrossReferenceEStringSomeContainer; }

		// not supported
		public Keyword ele5KeywordRightParenthesis() { return c5KeywordRightParenthesis; }
	}

	public class SecondConcreteElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SecondConcrete");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordHyphenMinusGreaterThanSign = (Keyword)cGroup.eContents().get(0);
		private final Keyword c1KeywordF = (Keyword)cGroup.eContents().get(1);
		private final Keyword c2KeywordS = (Keyword)cGroup.eContents().get(2);
		private final Keyword c3KeywordLeftParenthesis = (Keyword)cGroup.eContents().get(3);
		private final Assignment c4AssignmentValue = (Assignment)cGroup.eContents().get(4);
		private final RuleCall c40ParserRuleCallNamed = (RuleCall)c4AssignmentValue.eContents().get(0);
		private final Assignment c5AssignmentReferencedChildren = (Assignment)cGroup.eContents().get(5);
		private final CrossReference c50CrossReferenceEStringChild = (CrossReference)c5AssignmentReferencedChildren.eContents().get(0);
		private final Keyword c6KeywordRightParenthesis = (Keyword)cGroup.eContents().get(6);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordHyphenMinusGreaterThanSign() { return c0KeywordHyphenMinusGreaterThanSign; }

		// not supported
		public Keyword ele1KeywordF() { return c1KeywordF; }

		// not supported
		public Keyword ele2KeywordS() { return c2KeywordS; }

		// not supported
		public Keyword ele3KeywordLeftParenthesis() { return c3KeywordLeftParenthesis; }

		// not supported
		public Assignment ele4AssignmentValue() { return c4AssignmentValue; }

		// not supported
		public RuleCall ele40ParserRuleCallNamed() { return c40ParserRuleCallNamed; }

		// not supported
		public Assignment ele5AssignmentReferencedChildren() { return c5AssignmentReferencedChildren; }

		// not supported
		public CrossReference ele50CrossReferenceEStringChild() { return c50CrossReferenceEStringChild; }

		// not supported
		public Keyword ele6KeywordRightParenthesis() { return c6KeywordRightParenthesis; }
	}

	public class NamedElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Named");
		private final Assignment cAssignmentName = (Assignment)rule.eContents().get(1);
		private final RuleCall c0TerminalRuleCallID = (RuleCall)cAssignmentName.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Assignment eleAssignmentName() { return cAssignmentName; }

		// not supported
		public RuleCall ele0TerminalRuleCallID() { return c0TerminalRuleCallID; }
	}
	
	private SomeContainerElements pSomeContainer;
	private NestedElements pNested;
	private ContentElements pContent;
	private ChildrenElements pChildren;
	private ChildElements pChild;
	private AbstractChildrenElements pAbstractChildren;
	private AbstractChildElements pAbstractChild;
	private FirstConcreteElements pFirstConcrete;
	private SecondConcreteElements pSecondConcrete;
	private NamedElements pNamed;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess terminalsGrammarAccess;

	@Inject
	public PartialParserTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess terminalsGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.terminalsGrammarAccess = terminalsGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return terminalsGrammarAccess;
	}

	
	// not supported
	public SomeContainerElements prSomeContainer() {
		return (pSomeContainer != null) ? pSomeContainer : (pSomeContainer = new SomeContainerElements());
	} 

	// not supported
	public NestedElements prNested() {
		return (pNested != null) ? pNested : (pNested = new NestedElements());
	} 

	// not supported
	public ContentElements prContent() {
		return (pContent != null) ? pContent : (pContent = new ContentElements());
	} 

	// not supported
	public ChildrenElements prChildren() {
		return (pChildren != null) ? pChildren : (pChildren = new ChildrenElements());
	} 

	// not supported
	public ChildElements prChild() {
		return (pChild != null) ? pChild : (pChild = new ChildElements());
	} 

	// not supported
	public AbstractChildrenElements prAbstractChildren() {
		return (pAbstractChildren != null) ? pAbstractChildren : (pAbstractChildren = new AbstractChildrenElements());
	} 

	// not supported
	public AbstractChildElements prAbstractChild() {
		return (pAbstractChild != null) ? pAbstractChild : (pAbstractChild = new AbstractChildElements());
	} 

	// not supported
	public FirstConcreteElements prFirstConcrete() {
		return (pFirstConcrete != null) ? pFirstConcrete : (pFirstConcrete = new FirstConcreteElements());
	} 

	// not supported
	public SecondConcreteElements prSecondConcrete() {
		return (pSecondConcrete != null) ? pSecondConcrete : (pSecondConcrete = new SecondConcreteElements());
	} 

	// not supported
	public NamedElements prNamed() {
		return (pNamed != null) ? pNamed : (pNamed = new NamedElements());
	} 

	// not supported
	public TerminalRule trID() {
		return terminalsGrammarAccess.trID();
	} 

	// not supported
	public TerminalRule trINT() {
		return terminalsGrammarAccess.trINT();
	} 

	// not supported
	public TerminalRule trSTRING() {
		return terminalsGrammarAccess.trSTRING();
	} 

	// not supported
	public TerminalRule trML_COMMENT() {
		return terminalsGrammarAccess.trML_COMMENT();
	} 

	// not supported
	public TerminalRule trSL_COMMENT() {
		return terminalsGrammarAccess.trSL_COMMENT();
	} 

	// not supported
	public TerminalRule trWS() {
		return terminalsGrammarAccess.trWS();
	} 

	// not supported
	public TerminalRule trANY_OTHER() {
		return terminalsGrammarAccess.trANY_OTHER();
	} 
}
