/*
* generated by Xtext
*/

package org.eclipse.xtext.testlanguages.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SimpleExpressionsTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class SequenceElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallAddition = (RuleCall)cGroup.eContents().get(0);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Action c10ActionSequenceexpressions = (Action)c1Group.eContents().get(0);
		private final Assignment c11AssignmentExpressions = (Assignment)c1Group.eContents().get(1);
		private final RuleCall c110ParserRuleCallAddition = (RuleCall)c11AssignmentExpressions.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public RuleCall ele0ParserRuleCallAddition() { return c0ParserRuleCallAddition; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Action ele10ActionSequenceexpressions() { return c10ActionSequenceexpressions; }

		// not supported
		public Assignment ele11AssignmentExpressions() { return c11AssignmentExpressions; }

		// not supported
		public RuleCall ele110ParserRuleCallAddition() { return c110ParserRuleCallAddition; }
	}

	public class AdditionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallMultiplication = (RuleCall)cGroup.eContents().get(0);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Group c10Group = (Group)c1Group.eContents().get(0);
		private final Action c100ActionOpvalues = (Action)c10Group.eContents().get(0);
		private final Assignment c101AssignmentOperator = (Assignment)c10Group.eContents().get(1);
		private final Alternatives c1010Alternatives = (Alternatives)c101AssignmentOperator.eContents().get(0);
		private final Keyword c10100KeywordPlusSign = (Keyword)c1010Alternatives.eContents().get(0);
		private final Keyword c10101KeywordHyphenMinus = (Keyword)c1010Alternatives.eContents().get(1);
		private final Assignment c11AssignmentValues = (Assignment)c1Group.eContents().get(1);
		private final RuleCall c110ParserRuleCallMultiplication = (RuleCall)c11AssignmentValues.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public RuleCall ele0ParserRuleCallMultiplication() { return c0ParserRuleCallMultiplication; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Group ele10Group() { return c10Group; }

		// not supported
		public Action ele100ActionOpvalues() { return c100ActionOpvalues; }

		// not supported
		public Assignment ele101AssignmentOperator() { return c101AssignmentOperator; }

		// not supported
		public Alternatives ele1010Alternatives() { return c1010Alternatives; }

		// not supported
		public Keyword ele10100KeywordPlusSign() { return c10100KeywordPlusSign; }

		// not supported
		public Keyword ele10101KeywordHyphenMinus() { return c10101KeywordHyphenMinus; }

		// not supported
		public Assignment ele11AssignmentValues() { return c11AssignmentValues; }

		// not supported
		public RuleCall ele110ParserRuleCallMultiplication() { return c110ParserRuleCallMultiplication; }
	}

	public class MultiplicationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallTerm = (RuleCall)cGroup.eContents().get(0);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Group c10Group = (Group)c1Group.eContents().get(0);
		private final Action c100ActionOpvalues = (Action)c10Group.eContents().get(0);
		private final Assignment c101AssignmentOperator = (Assignment)c10Group.eContents().get(1);
		private final Alternatives c1010Alternatives = (Alternatives)c101AssignmentOperator.eContents().get(0);
		private final Keyword c10100KeywordAsterisk = (Keyword)c1010Alternatives.eContents().get(0);
		private final Keyword c10101KeywordSolidus = (Keyword)c1010Alternatives.eContents().get(1);
		private final Assignment c11AssignmentValues = (Assignment)c1Group.eContents().get(1);
		private final RuleCall c110ParserRuleCallTerm = (RuleCall)c11AssignmentValues.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public RuleCall ele0ParserRuleCallTerm() { return c0ParserRuleCallTerm; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Group ele10Group() { return c10Group; }

		// not supported
		public Action ele100ActionOpvalues() { return c100ActionOpvalues; }

		// not supported
		public Assignment ele101AssignmentOperator() { return c101AssignmentOperator; }

		// not supported
		public Alternatives ele1010Alternatives() { return c1010Alternatives; }

		// not supported
		public Keyword ele10100KeywordAsterisk() { return c10100KeywordAsterisk; }

		// not supported
		public Keyword ele10101KeywordSolidus() { return c10101KeywordSolidus; }

		// not supported
		public Assignment ele11AssignmentValues() { return c11AssignmentValues; }

		// not supported
		public RuleCall ele110ParserRuleCallTerm() { return c110ParserRuleCallTerm; }
	}

	public class TermElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallAtom = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallParens = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallAtom() { return c0ParserRuleCallAtom; }

		// not supported
		public RuleCall ele1ParserRuleCallParens() { return c1ParserRuleCallParens; }
	}

	public class AtomElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atom");
		private final Assignment cAssignmentName = (Assignment)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallID = (RuleCall)cAssignmentName.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Assignment eleAssignmentName() { return cAssignmentName; }

		// not supported
		public RuleCall ele0ParserRuleCallID() { return c0ParserRuleCallID; }
	}

	public class ParensElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Keyword c00KeywordLeftParenthesis = (Keyword)c0Group.eContents().get(0);
		private final RuleCall c01ParserRuleCallAddition = (RuleCall)c0Group.eContents().get(1);
		private final Keyword c1KeywordRightParenthesis = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Keyword ele00KeywordLeftParenthesis() { return c00KeywordLeftParenthesis; }

		// not supported
		public RuleCall ele01ParserRuleCallAddition() { return c01ParserRuleCallAddition; }

		// not supported
		public Keyword ele1KeywordRightParenthesis() { return c1KeywordRightParenthesis; }
	}
	
	private SequenceElements pSequence;
	private AdditionElements pAddition;
	private MultiplicationElements pMultiplication;
	private TermElements pTerm;
	private AtomElements pAtom;
	private ParensElements pParens;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess superGrammarAccess;

	@Inject
	public SimpleExpressionsTestLanguageGrammarAccess(GrammarProvider grammarProvider, TerminalsGrammarAccess superGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.superGrammarAccess = superGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getSuperGrammarAccess() {
		return superGrammarAccess;
	}

	
	// not supported
	public SequenceElements prSequence() {
		return (pSequence != null) ? pSequence : (pSequence = new SequenceElements());
	} 

	// not supported
	public AdditionElements prAddition() {
		return (pAddition != null) ? pAddition : (pAddition = new AdditionElements());
	} 

	// not supported
	public MultiplicationElements prMultiplication() {
		return (pMultiplication != null) ? pMultiplication : (pMultiplication = new MultiplicationElements());
	} 

	// not supported
	public TermElements prTerm() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	} 

	// not supported
	public AtomElements prAtom() {
		return (pAtom != null) ? pAtom : (pAtom = new AtomElements());
	} 

	// not supported
	public ParensElements prParens() {
		return (pParens != null) ? pParens : (pParens = new ParensElements());
	} 

	// not supported
	public org.eclipse.xtext.common.services.TerminalsGrammarAccess.IDElements prID() {
		return superGrammarAccess.prID();
	} 

	// not supported
	public org.eclipse.xtext.common.services.TerminalsGrammarAccess.INTElements prINT() {
		return superGrammarAccess.prINT();
	} 

	// not supported
	public org.eclipse.xtext.common.services.TerminalsGrammarAccess.STRINGElements prSTRING() {
		return superGrammarAccess.prSTRING();
	} 

	// not supported
	public org.eclipse.xtext.common.services.TerminalsGrammarAccess.ML_COMMENTElements prML_COMMENT() {
		return superGrammarAccess.prML_COMMENT();
	} 

	// not supported
	public org.eclipse.xtext.common.services.TerminalsGrammarAccess.SL_COMMENTElements prSL_COMMENT() {
		return superGrammarAccess.prSL_COMMENT();
	} 

	// not supported
	public org.eclipse.xtext.common.services.TerminalsGrammarAccess.WSElements prWS() {
		return superGrammarAccess.prWS();
	} 

	// not supported
	public org.eclipse.xtext.common.services.TerminalsGrammarAccess.ANY_OTHERElements prANY_OTHER() {
		return superGrammarAccess.prANY_OTHER();
	} 
}
