/*
* generated by Xtext
*/
package org.eclipse.xtext.testlanguages.parseTreeConstruction;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor2;

import org.eclipse.xtext.testlanguages.services.PartialParserTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class PartialParserTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor2 {
		
	@Inject
	private PartialParserTestLanguageGrammarAccess grammarAccess;
		
	public PartialParserTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken2 getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SomeContainer_Group(this, this, 0, inst);
			case 1: return new Nested_Group(this, this, 1, inst);
			case 2: return new Content_Alternatives(this, this, 2, inst);
			case 3: return new Children_Group(this, this, 3, inst);
			case 4: return new Child_Group(this, this, 4, inst);
			case 5: return new AbstractChildren_Group(this, this, 5, inst);
			case 6: return new AbstractChild_Alternatives(this, this, 6, inst);
			case 7: return new FirstConcrete_Group(this, this, 7, inst);
			case 8: return new SecondConcrete_Group(this, this, 8, inst);
			case 9: return new Named_NameAssignment(this, this, 9, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule SomeContainer ****************
 *
 * SomeContainer:
 *   "container" name=ID "{" (nested+=Nested|content+=Content)* "}";
 *
 **/

// "container" name=ID "{" (nested+=Nested|content+=Content)* "}"
protected class SomeContainer_Group extends GroupToken {
	
	public SomeContainer_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSomeContainerAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SomeContainer_RightCurlyBracketKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSomeContainerRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "container"
protected class SomeContainer_ContainerKeyword_0 extends KeywordToken  {
	
	public SomeContainer_ContainerKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSomeContainerAccess().getContainerKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index - 0, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		IInstanceDescription inst = tryConsumeVal();
		if(!inst.isConsumed()) return null;
		return inst; 
	}
}

// name=ID
protected class SomeContainer_NameAssignment_1 extends AssignmentToken  {
	
	public SomeContainer_NameAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSomeContainerAccess().getNameAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SomeContainer_ContainerKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSomeContainerAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class SomeContainer_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public SomeContainer_LeftCurlyBracketKeyword_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSomeContainerAccess().getLeftCurlyBracketKeyword_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SomeContainer_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (nested+=Nested|content+=Content)*
protected class SomeContainer_Alternatives_3 extends AlternativesToken {

	public SomeContainer_Alternatives_3(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getSomeContainerAccess().getAlternatives_3();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SomeContainer_NestedAssignment_3_0(parent, this, 0, inst);
			case 1: return new SomeContainer_ContentAssignment_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// nested+=Nested
protected class SomeContainer_NestedAssignment_3_0 extends AssignmentToken  {
	
	public SomeContainer_NestedAssignment_3_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSomeContainerAccess().getNestedAssignment_3_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Nested_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("nested",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("nested");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNestedRule().getType().getClassifier())) {
				type = AssignmentType.PRC; 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			case 0: return new SomeContainer_Alternatives_3(parent, next, 0, consumed);
			case 1: return new SomeContainer_LeftCurlyBracketKeyword_2(parent, next, 1, consumed);
			default: return null;
		}	
	}	
}

// content+=Content
protected class SomeContainer_ContentAssignment_3_1 extends AssignmentToken  {
	
	public SomeContainer_ContentAssignment_3_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSomeContainerAccess().getContentAssignment_3_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Content_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("content",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("content");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContentRule().getType().getClassifier())) {
				type = AssignmentType.PRC; 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			case 0: return new SomeContainer_Alternatives_3(parent, next, 0, consumed);
			case 1: return new SomeContainer_LeftCurlyBracketKeyword_2(parent, next, 1, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class SomeContainer_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public SomeContainer_RightCurlyBracketKeyword_4(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSomeContainerAccess().getRightCurlyBracketKeyword_4();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SomeContainer_Alternatives_3(parent, this, 0, inst);
			case 1: return new SomeContainer_LeftCurlyBracketKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule SomeContainer ****************/


/************ begin Rule Nested ****************
 *
 * Nested:
 *   "nested" "{" (nested+=SomeContainer)+ "}";
 *
 **/

// "nested" "{" (nested+=SomeContainer)+ "}"
protected class Nested_Group extends GroupToken {
	
	public Nested_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getNestedAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Nested_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNestedRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "nested"
protected class Nested_NestedKeyword_0 extends KeywordToken  {
	
	public Nested_NestedKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getNestedAccess().getNestedKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index - 0, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		IInstanceDescription inst = tryConsumeVal();
		if(!inst.isConsumed()) return null;
		return inst; 
	}
}

// "{"
protected class Nested_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public Nested_LeftCurlyBracketKeyword_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getNestedAccess().getLeftCurlyBracketKeyword_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Nested_NestedKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (nested+=SomeContainer)+
protected class Nested_NestedAssignment_2 extends AssignmentToken  {
	
	public Nested_NestedAssignment_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNestedAccess().getNestedAssignment_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SomeContainer_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("nested",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("nested");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSomeContainerRule().getType().getClassifier())) {
				type = AssignmentType.PRC; 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			case 0: return new Nested_NestedAssignment_2(parent, next, 0, consumed);
			case 1: return new Nested_LeftCurlyBracketKeyword_1(parent, next, 1, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Nested_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public Nested_RightCurlyBracketKeyword_3(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getNestedAccess().getRightCurlyBracketKeyword_3();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Nested_NestedAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Nested ****************/


/************ begin Rule Content ****************
 *
 * Content:
 *   Children|AbstractChildren;
 *
 **/

// Children|AbstractChildren
protected class Content_Alternatives extends AlternativesToken {

	public Content_Alternatives(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getContentAccess().getAlternatives();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Content_ChildrenParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Content_AbstractChildrenParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getContentRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Children
protected class Content_ChildrenParserRuleCall_0 extends RuleCallToken {
	
	public Content_ChildrenParserRuleCall_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getContentAccess().getChildrenParserRuleCall_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Children_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Children_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getChildrenRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

// AbstractChildren
protected class Content_AbstractChildrenParserRuleCall_1 extends RuleCallToken {
	
	public Content_AbstractChildrenParserRuleCall_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getContentAccess().getAbstractChildrenParserRuleCall_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbstractChildren_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AbstractChildren_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAbstractChildrenRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}


/************ end Rule Content ****************/


/************ begin Rule Children ****************
 *
 * Children:
 *   "children" "{" children+=Child ("," children+=Child)* "}";
 *
 **/

// "children" "{" children+=Child ("," children+=Child)* "}"
protected class Children_Group extends GroupToken {
	
	public Children_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getChildrenAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Children_RightCurlyBracketKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getChildrenRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "children"
protected class Children_ChildrenKeyword_0 extends KeywordToken  {
	
	public Children_ChildrenKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getChildrenAccess().getChildrenKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index - 0, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		IInstanceDescription inst = tryConsumeVal();
		if(!inst.isConsumed()) return null;
		return inst; 
	}
}

// "{"
protected class Children_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public Children_LeftCurlyBracketKeyword_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getChildrenAccess().getLeftCurlyBracketKeyword_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Children_ChildrenKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// children+=Child
protected class Children_ChildrenAssignment_2 extends AssignmentToken  {
	
	public Children_ChildrenAssignment_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getChildrenAccess().getChildrenAssignment_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Child_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("children",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("children");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getChildRule().getType().getClassifier())) {
				type = AssignmentType.PRC; 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			case 0: return new Children_LeftCurlyBracketKeyword_1(parent, next, 0, consumed);
			default: return null;
		}	
	}	
}

// ("," children+=Child)*
protected class Children_Group_3 extends GroupToken {
	
	public Children_Group_3(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getChildrenAccess().getGroup_3();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Children_ChildrenAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Children_CommaKeyword_3_0 extends KeywordToken  {
	
	public Children_CommaKeyword_3_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getChildrenAccess().getCommaKeyword_3_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Children_Group_3(parent, this, 0, inst);
			case 1: return new Children_ChildrenAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// children+=Child
protected class Children_ChildrenAssignment_3_1 extends AssignmentToken  {
	
	public Children_ChildrenAssignment_3_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getChildrenAccess().getChildrenAssignment_3_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Child_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("children",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("children");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getChildRule().getType().getClassifier())) {
				type = AssignmentType.PRC; 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			case 0: return new Children_CommaKeyword_3_0(parent, next, 0, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class Children_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public Children_RightCurlyBracketKeyword_4(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getChildrenAccess().getRightCurlyBracketKeyword_4();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Children_Group_3(parent, this, 0, inst);
			case 1: return new Children_ChildrenAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Children ****************/


/************ begin Rule Child ****************
 *
 * Child:
 *   "->" "C" "(" value=Named ")";
 *
 **/

// "->" "C" "(" value=Named ")"
protected class Child_Group extends GroupToken {
	
	public Child_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getChildAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Child_RightParenthesisKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getChildRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "->"
protected class Child_HyphenMinusGreaterThanSignKeyword_0 extends KeywordToken  {
	
	public Child_HyphenMinusGreaterThanSignKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getChildAccess().getHyphenMinusGreaterThanSignKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index - 0, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		IInstanceDescription inst = tryConsumeVal();
		if(!inst.isConsumed()) return null;
		return inst; 
	}
}

// "C"
protected class Child_CKeyword_1 extends KeywordToken  {
	
	public Child_CKeyword_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getChildAccess().getCKeyword_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Child_HyphenMinusGreaterThanSignKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class Child_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public Child_LeftParenthesisKeyword_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getChildAccess().getLeftParenthesisKeyword_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Child_CKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=Named
protected class Child_ValueAssignment_3 extends AssignmentToken  {
	
	public Child_ValueAssignment_3(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getChildAccess().getValueAssignment_3();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Named_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNamedRule().getType().getClassifier())) {
				type = AssignmentType.PRC; 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			case 0: return new Child_LeftParenthesisKeyword_2(parent, next, 0, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Child_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public Child_RightParenthesisKeyword_4(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getChildAccess().getRightParenthesisKeyword_4();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Child_ValueAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Child ****************/


/************ begin Rule AbstractChildren ****************
 *
 * AbstractChildren:
 *   "abstract children" "{" (abstractChildren+=AbstractChild)+ "}";
 *
 **/

// "abstract children" "{" (abstractChildren+=AbstractChild)+ "}"
protected class AbstractChildren_Group extends GroupToken {
	
	public AbstractChildren_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAbstractChildrenAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbstractChildren_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAbstractChildrenRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "abstract children"
protected class AbstractChildren_AbstractChildrenKeyword_0 extends KeywordToken  {
	
	public AbstractChildren_AbstractChildrenKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAbstractChildrenAccess().getAbstractChildrenKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index - 0, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		IInstanceDescription inst = tryConsumeVal();
		if(!inst.isConsumed()) return null;
		return inst; 
	}
}

// "{"
protected class AbstractChildren_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public AbstractChildren_LeftCurlyBracketKeyword_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAbstractChildrenAccess().getLeftCurlyBracketKeyword_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbstractChildren_AbstractChildrenKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (abstractChildren+=AbstractChild)+
protected class AbstractChildren_AbstractChildrenAssignment_2 extends AssignmentToken  {
	
	public AbstractChildren_AbstractChildrenAssignment_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAbstractChildrenAccess().getAbstractChildrenAssignment_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbstractChild_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("abstractChildren",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("abstractChildren");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbstractChildRule().getType().getClassifier())) {
				type = AssignmentType.PRC; 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			case 0: return new AbstractChildren_AbstractChildrenAssignment_2(parent, next, 0, consumed);
			case 1: return new AbstractChildren_LeftCurlyBracketKeyword_1(parent, next, 1, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class AbstractChildren_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public AbstractChildren_RightCurlyBracketKeyword_3(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAbstractChildrenAccess().getRightCurlyBracketKeyword_3();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbstractChildren_AbstractChildrenAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule AbstractChildren ****************/


/************ begin Rule AbstractChild ****************
 *
 * AbstractChild:
 *   FirstConcrete|SecondConcrete;
 *
 **/

// FirstConcrete|SecondConcrete
protected class AbstractChild_Alternatives extends AlternativesToken {

	public AbstractChild_Alternatives(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getAbstractChildAccess().getAlternatives();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbstractChild_FirstConcreteParserRuleCall_0(parent, this, 0, inst);
			case 1: return new AbstractChild_SecondConcreteParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAbstractChildRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// FirstConcrete
protected class AbstractChild_FirstConcreteParserRuleCall_0 extends RuleCallToken {
	
	public AbstractChild_FirstConcreteParserRuleCall_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractChildAccess().getFirstConcreteParserRuleCall_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FirstConcrete_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(FirstConcrete_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFirstConcreteRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}

// SecondConcrete
protected class AbstractChild_SecondConcreteParserRuleCall_1 extends RuleCallToken {
	
	public AbstractChild_SecondConcreteParserRuleCall_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractChildAccess().getSecondConcreteParserRuleCall_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SecondConcrete_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(SecondConcrete_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSecondConcreteRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			default: return parent.createParentFollower(next, index - 0, inst);
		}	
	}	
}


/************ end Rule AbstractChild ****************/


/************ begin Rule FirstConcrete ****************
 *
 * FirstConcrete:
 *   "->" "F" "(" value=Named (referencedContainer=[SomeContainer])? ")";
 *
 **/

// "->" "F" "(" value=Named (referencedContainer=[SomeContainer])? ")"
protected class FirstConcrete_Group extends GroupToken {
	
	public FirstConcrete_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFirstConcreteAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FirstConcrete_RightParenthesisKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFirstConcreteRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "->"
protected class FirstConcrete_HyphenMinusGreaterThanSignKeyword_0 extends KeywordToken  {
	
	public FirstConcrete_HyphenMinusGreaterThanSignKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFirstConcreteAccess().getHyphenMinusGreaterThanSignKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index - 0, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		IInstanceDescription inst = tryConsumeVal();
		if(!inst.isConsumed()) return null;
		return inst; 
	}
}

// "F"
protected class FirstConcrete_FKeyword_1 extends KeywordToken  {
	
	public FirstConcrete_FKeyword_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFirstConcreteAccess().getFKeyword_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FirstConcrete_HyphenMinusGreaterThanSignKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class FirstConcrete_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public FirstConcrete_LeftParenthesisKeyword_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFirstConcreteAccess().getLeftParenthesisKeyword_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FirstConcrete_FKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=Named
protected class FirstConcrete_ValueAssignment_3 extends AssignmentToken  {
	
	public FirstConcrete_ValueAssignment_3(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFirstConcreteAccess().getValueAssignment_3();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Named_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNamedRule().getType().getClassifier())) {
				type = AssignmentType.PRC; 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			case 0: return new FirstConcrete_LeftParenthesisKeyword_2(parent, next, 0, consumed);
			default: return null;
		}	
	}	
}

// (referencedContainer=[SomeContainer])?
protected class FirstConcrete_ReferencedContainerAssignment_4 extends AssignmentToken  {
	
	public FirstConcrete_ReferencedContainerAssignment_4(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFirstConcreteAccess().getReferencedContainerAssignment_4();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FirstConcrete_ValueAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("referencedContainer",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("referencedContainer");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFirstConcreteAccess().getReferencedContainerSomeContainerCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getFirstConcreteAccess().getReferencedContainerSomeContainerCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ")"
protected class FirstConcrete_RightParenthesisKeyword_5 extends KeywordToken  {
	
	public FirstConcrete_RightParenthesisKeyword_5(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFirstConcreteAccess().getRightParenthesisKeyword_5();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FirstConcrete_ReferencedContainerAssignment_4(parent, this, 0, inst);
			case 1: return new FirstConcrete_ValueAssignment_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule FirstConcrete ****************/


/************ begin Rule SecondConcrete ****************
 *
 * SecondConcrete:
 *   "->" "F" "S" "(" value=Named (referencedChildren+=[Child])? ")";
 *
 **/

// "->" "F" "S" "(" value=Named (referencedChildren+=[Child])? ")"
protected class SecondConcrete_Group extends GroupToken {
	
	public SecondConcrete_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSecondConcreteAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SecondConcrete_RightParenthesisKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSecondConcreteRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "->"
protected class SecondConcrete_HyphenMinusGreaterThanSignKeyword_0 extends KeywordToken  {
	
	public SecondConcrete_HyphenMinusGreaterThanSignKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSecondConcreteAccess().getHyphenMinusGreaterThanSignKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index - 0, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		IInstanceDescription inst = tryConsumeVal();
		if(!inst.isConsumed()) return null;
		return inst; 
	}
}

// "F"
protected class SecondConcrete_FKeyword_1 extends KeywordToken  {
	
	public SecondConcrete_FKeyword_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSecondConcreteAccess().getFKeyword_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SecondConcrete_HyphenMinusGreaterThanSignKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "S"
protected class SecondConcrete_SKeyword_2 extends KeywordToken  {
	
	public SecondConcrete_SKeyword_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSecondConcreteAccess().getSKeyword_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SecondConcrete_FKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class SecondConcrete_LeftParenthesisKeyword_3 extends KeywordToken  {
	
	public SecondConcrete_LeftParenthesisKeyword_3(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSecondConcreteAccess().getLeftParenthesisKeyword_3();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SecondConcrete_SKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=Named
protected class SecondConcrete_ValueAssignment_4 extends AssignmentToken  {
	
	public SecondConcrete_ValueAssignment_4(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSecondConcreteAccess().getValueAssignment_4();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Named_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNamedRule().getType().getClassifier())) {
				type = AssignmentType.PRC; 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next, int index, IInstanceDescription inst) {	
		switch(index) {
			case 0: return new SecondConcrete_LeftParenthesisKeyword_3(parent, next, 0, consumed);
			default: return null;
		}	
	}	
}

// (referencedChildren+=[Child])?
protected class SecondConcrete_ReferencedChildrenAssignment_5 extends AssignmentToken  {
	
	public SecondConcrete_ReferencedChildrenAssignment_5(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSecondConcreteAccess().getReferencedChildrenAssignment_5();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SecondConcrete_ValueAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("referencedChildren",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("referencedChildren");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSecondConcreteAccess().getReferencedChildrenChildCrossReference_5_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getSecondConcreteAccess().getReferencedChildrenChildCrossReference_5_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ")"
protected class SecondConcrete_RightParenthesisKeyword_6 extends KeywordToken  {
	
	public SecondConcrete_RightParenthesisKeyword_6(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSecondConcreteAccess().getRightParenthesisKeyword_6();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SecondConcrete_ReferencedChildrenAssignment_5(parent, this, 0, inst);
			case 1: return new SecondConcrete_ValueAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule SecondConcrete ****************/


/************ begin Rule Named ****************
 *
 * Named:
 *   name=ID;
 *
 **/

// name=ID
protected class Named_NameAssignment extends AssignmentToken  {
	
	public Named_NameAssignment(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedAccess().getNameAssignment();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index - 0, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNamedRule().getType().getClassifier())) return null;
		IInstanceDescription inst = tryConsumeVal();
		if(!inst.isConsumed()) return null;
		return inst; 
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getNamedAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule Named ****************/

}
