/*
* generated by Xtext
*/
package org.eclipse.xtext.testlanguages.parseTreeConstruction;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;
import org.eclipse.xtext.testlanguages.services.ContentAssistTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class ContentAssistTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private ContentAssistTestLanguageGrammarAccess grammarAccess;
	
	@Override
	protected Solution internalSerialize(EObject obj) {
		IInstanceDescription inst = getDescr(obj);
		Solution s;
		if(inst.isInstanceOf(grammarAccess.getStartRule().getType().getClassifier()) && (s = new Start_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getAbstractRuleRule().getType().getClassifier()) && (s = new AbstractRule_Alternatives(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getFirstAbstractRuleChildRule().getType().getClassifier()) && (s = new FirstAbstractRuleChild_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getSecondAbstractRuleChildRule().getType().getClassifier()) && (s = new SecondAbstractRuleChild_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getAbstractRuleCallRule().getType().getClassifier()) && (s = new AbstractRuleCall_Assignment_rule(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		return null;
	}
	

/************ begin Rule Start ****************
 *
 * Start:
 *   "abstract rules" (rules+=AbstractRule)+ "end";
 *
 **/

// "abstract rules" (rules+=AbstractRule)+ "end"
protected class Start_Group extends GroupToken {
	
	public Start_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStartAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Start_2_Keyword_end(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Start_1_Assignment_rules(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new Start_0_Keyword_abstractrules(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				if(s3 != null) {
					last = s3.getPredecessor();
					return s3;
				} else {
					s2 = s2.getPredecessor().nextSolution(this,s2);
				}
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "abstract rules"
protected class Start_0_Keyword_abstractrules extends KeywordToken  {
	
	public Start_0_Keyword_abstractrules(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStartAccess().getAbstractRulesKeyword_0();
	}	
}

// (rules+=AbstractRule)+
protected class Start_1_Assignment_rules extends AssignmentToken  {
	
	public Start_1_Assignment_rules(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStartAccess().getRulesAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("rules",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("rules");

		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbstractRuleRule().getType().getClassifier())) {
				Solution s = new AbstractRule_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// "end"
protected class Start_2_Keyword_end extends KeywordToken  {
	
	public Start_2_Keyword_end(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStartAccess().getEndKeyword_2();
	}	
}


/************ end Rule Start ****************/


/************ begin Rule AbstractRule ****************
 *
 * AbstractRule:
 *   FirstAbstractRuleChild|SecondAbstractRuleChild;
 *
 **/

// FirstAbstractRuleChild|SecondAbstractRuleChild
protected class AbstractRule_Alternatives extends AlternativesToken {

	public AbstractRule_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAbstractRuleAccess().getAlternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new AbstractRule_0_RuleCall_FirstAbstractRuleChild(current, this);
			case 1: return new AbstractRule_1_RuleCall_SecondAbstractRuleChild(current, this);
			default: return null;
		}
	}
}

// FirstAbstractRuleChild
protected class AbstractRule_0_RuleCall_FirstAbstractRuleChild extends RuleCallToken {
	
	public AbstractRule_0_RuleCall_FirstAbstractRuleChild(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractRuleAccess().getFirstAbstractRuleChildParserRuleCall_0();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(FirstAbstractRuleChild_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFirstAbstractRuleChildRule().getType().getClassifier())) return null;
		return new FirstAbstractRuleChild_Group(current, this).firstSolution();
	}
}

// SecondAbstractRuleChild
protected class AbstractRule_1_RuleCall_SecondAbstractRuleChild extends RuleCallToken {
	
	public AbstractRule_1_RuleCall_SecondAbstractRuleChild(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractRuleAccess().getSecondAbstractRuleChildParserRuleCall_1();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(SecondAbstractRuleChild_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSecondAbstractRuleChildRule().getType().getClassifier())) return null;
		return new SecondAbstractRuleChild_Group(current, this).firstSolution();
	}
}


/************ end Rule AbstractRule ****************/


/************ begin Rule FirstAbstractRuleChild ****************
 *
 * FirstAbstractRuleChild:
 *   name=ID "(" (elements+=AbstractRule)+ ")" ";";
 *
 **/

// name=ID "(" (elements+=AbstractRule)+ ")" ";"
protected class FirstAbstractRuleChild_Group extends GroupToken {
	
	public FirstAbstractRuleChild_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFirstAbstractRuleChildAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new FirstAbstractRuleChild_4_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new FirstAbstractRuleChild_3_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new FirstAbstractRuleChild_2_Assignment_elements(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				while(s3 != null) {
					Solution s4 = new FirstAbstractRuleChild_1_Keyword(s3.getCurrent(), s3.getPredecessor()).firstSolution();
					while(s4 != null) {
						Solution s5 = new FirstAbstractRuleChild_0_Assignment_name(s4.getCurrent(), s4.getPredecessor()).firstSolution();
						if(s5 != null) {
							last = s5.getPredecessor();
							return s5;
						} else {
							s4 = s4.getPredecessor().nextSolution(this,s4);
						}
					}
					s3 = s3.getPredecessor().nextSolution(this,s3);
				}
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// name=ID
protected class FirstAbstractRuleChild_0_Assignment_name extends AssignmentToken  {
	
	public FirstAbstractRuleChild_0_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFirstAbstractRuleChildAccess().getNameAssignment_0();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFirstAbstractRuleChildAccess().getNameIDTerminalRuleCall_0_0();
			return new Solution(obj);
		}
		return null;
	}
}

// "("
protected class FirstAbstractRuleChild_1_Keyword extends KeywordToken  {
	
	public FirstAbstractRuleChild_1_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFirstAbstractRuleChildAccess().getLeftParenthesisKeyword_1();
	}	
}

// (elements+=AbstractRule)+
protected class FirstAbstractRuleChild_2_Assignment_elements extends AssignmentToken  {
	
	public FirstAbstractRuleChild_2_Assignment_elements(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFirstAbstractRuleChildAccess().getElementsAssignment_2();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("elements",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");

		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbstractRuleRule().getType().getClassifier())) {
				Solution s = new AbstractRule_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// ")"
protected class FirstAbstractRuleChild_3_Keyword extends KeywordToken  {
	
	public FirstAbstractRuleChild_3_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFirstAbstractRuleChildAccess().getRightParenthesisKeyword_3();
	}	
}

// ";"
protected class FirstAbstractRuleChild_4_Keyword extends KeywordToken  {
	
	public FirstAbstractRuleChild_4_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFirstAbstractRuleChildAccess().getSemicolonKeyword_4();
	}	
}


/************ end Rule FirstAbstractRuleChild ****************/


/************ begin Rule SecondAbstractRuleChild ****************
 *
 * SecondAbstractRuleChild:
 *   name=ID "rule" ":" rule=AbstractRuleCall ";";
 *
 **/

// name=ID "rule" ":" rule=AbstractRuleCall ";"
protected class SecondAbstractRuleChild_Group extends GroupToken {
	
	public SecondAbstractRuleChild_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSecondAbstractRuleChildAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new SecondAbstractRuleChild_4_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new SecondAbstractRuleChild_3_Assignment_rule(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new SecondAbstractRuleChild_2_Keyword(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				while(s3 != null) {
					Solution s4 = new SecondAbstractRuleChild_1_Keyword_rule(s3.getCurrent(), s3.getPredecessor()).firstSolution();
					while(s4 != null) {
						Solution s5 = new SecondAbstractRuleChild_0_Assignment_name(s4.getCurrent(), s4.getPredecessor()).firstSolution();
						if(s5 != null) {
							last = s5.getPredecessor();
							return s5;
						} else {
							s4 = s4.getPredecessor().nextSolution(this,s4);
						}
					}
					s3 = s3.getPredecessor().nextSolution(this,s3);
				}
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// name=ID
protected class SecondAbstractRuleChild_0_Assignment_name extends AssignmentToken  {
	
	public SecondAbstractRuleChild_0_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSecondAbstractRuleChildAccess().getNameAssignment_0();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSecondAbstractRuleChildAccess().getNameIDTerminalRuleCall_0_0();
			return new Solution(obj);
		}
		return null;
	}
}

// "rule"
protected class SecondAbstractRuleChild_1_Keyword_rule extends KeywordToken  {
	
	public SecondAbstractRuleChild_1_Keyword_rule(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSecondAbstractRuleChildAccess().getRuleKeyword_1();
	}	
}

// ":"
protected class SecondAbstractRuleChild_2_Keyword extends KeywordToken  {
	
	public SecondAbstractRuleChild_2_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSecondAbstractRuleChildAccess().getColonKeyword_2();
	}	
}

// rule=AbstractRuleCall
protected class SecondAbstractRuleChild_3_Assignment_rule extends AssignmentToken  {
	
	public SecondAbstractRuleChild_3_Assignment_rule(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSecondAbstractRuleChildAccess().getRuleAssignment_3();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("rule",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("rule");

		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbstractRuleCallRule().getType().getClassifier())) {
				Solution s = new AbstractRuleCall_Assignment_rule(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// ";"
protected class SecondAbstractRuleChild_4_Keyword extends KeywordToken  {
	
	public SecondAbstractRuleChild_4_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSecondAbstractRuleChildAccess().getSemicolonKeyword_4();
	}	
}


/************ end Rule SecondAbstractRuleChild ****************/


/************ begin Rule AbstractRuleCall ****************
 *
 * AbstractRuleCall:
 *   rule=[AbstractRule];
 *
 **/

// rule=[AbstractRule]
protected class AbstractRuleCall_Assignment_rule extends AssignmentToken  {
	
	public AbstractRuleCall_Assignment_rule(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAbstractRuleCallAccess().getRuleAssignment();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("rule",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("rule");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbstractRuleCallAccess().getRuleAbstractRuleCrossReference_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAbstractRuleCallAccess().getRuleAbstractRuleCrossReference_0(); 
				return new Solution(obj);
			}
		}
		return null;
	}
}

/************ end Rule AbstractRuleCall ****************/

}
