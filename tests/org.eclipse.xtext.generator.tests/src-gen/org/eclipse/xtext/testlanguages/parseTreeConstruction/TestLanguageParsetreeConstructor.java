/*
* generated by Xtext
*/
package org.eclipse.xtext.testlanguages.parseTreeConstruction;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;
import org.eclipse.xtext.testlanguages.services.TestLanguageGrammarAccess;

import com.google.inject.Inject;

public class TestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private TestLanguageGrammarAccess grammarAccess;
	
	@Override
	protected Solution internalSerialize(EObject obj) {
		IInstanceDescription inst = getDescr(obj);
		Solution s;
		if(inst.isInstanceOf(grammarAccess.prEntryRule().getRule().getType().getType()) && (s = new EntryRule_Assignment_multiFeature(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prAbstractRule().getRule().getType().getType()) && (s = new AbstractRule_Alternatives(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prChoiceRule().getRule().getType().getType()) && (s = new ChoiceRule_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prReducibleRule().getRule().getType().getType()) && (s = new ReducibleRule_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prTerminalRule().getRule().getType().getType()) && (s = new TerminalRule_Assignment_stringFeature(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		return null;
	}
	

/************ begin Rule EntryRule ****************
 *
 * not supported
 *
 **/


// not supported
protected class EntryRule_Assignment_multiFeature extends AssignmentToken  {
	
	public EntryRule_Assignment_multiFeature(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prEntryRule().eleAssignmentMultiFeature();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("multiFeature",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("multiFeature");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prAbstractRule().getRule().getType().getType())) {
				Solution s = new AbstractRule_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

/************ end Rule EntryRule ****************/


/************ begin Rule AbstractRule ****************
 *
 * not supported
 *
 **/


// not supported
protected class AbstractRule_Alternatives extends AlternativesToken {

	public AbstractRule_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.prAbstractRule().eleAlternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new AbstractRule_0_RuleCall_ChoiceRule(current, this);
			case 1: return new AbstractRule_1_RuleCall_ReducibleRule(current, this);
			default: return null;
		}
	}
}

// not supported
protected class AbstractRule_0_RuleCall_ChoiceRule extends RuleCallToken {
	
	public AbstractRule_0_RuleCall_ChoiceRule(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.prAbstractRule().ele0ParserRuleCallChoiceRule();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(ChoiceRule_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.prChoiceRule().getRule().getType().getType())) return null;
		return new ChoiceRule_Group(current, this).firstSolution();
	}
}

// not supported
protected class AbstractRule_1_RuleCall_ReducibleRule extends RuleCallToken {
	
	public AbstractRule_1_RuleCall_ReducibleRule(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.prAbstractRule().ele1ParserRuleCallReducibleRule();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(ReducibleRule_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.prReducibleRule().getRule().getType().getType())) return null;
		return new ReducibleRule_Group(current, this).firstSolution();
	}
}


/************ end Rule AbstractRule ****************/


/************ begin Rule ChoiceRule ****************
 *
 * not supported
 *
 **/


// not supported
protected class ChoiceRule_Group extends GroupToken {
	
	public ChoiceRule_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prChoiceRule().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new ChoiceRule_2_Assignment_name(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new ChoiceRule_1_Assignment_optionalKeyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new ChoiceRule_0_Keyword_choice(s2.getCurrent(), s2.getPredecessor()).firstSolution();
			if(s3 != null) {
				last = s3.getPredecessor();
				return s3;
			} else {
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class ChoiceRule_0_Keyword_choice extends KeywordToken  {
	
	public ChoiceRule_0_Keyword_choice(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prChoiceRule().ele0KeywordChoice();
	}	
}

// not supported
protected class ChoiceRule_1_Assignment_optionalKeyword extends AssignmentToken  {
	
	public ChoiceRule_1_Assignment_optionalKeyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prChoiceRule().ele1AssignmentOptionalKeyword();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("optionalKeyword",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("optionalKeyword");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prChoiceRule().ele10KeywordOptional();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class ChoiceRule_2_Assignment_name extends AssignmentToken  {
	
	public ChoiceRule_2_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prChoiceRule().ele2AssignmentName();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prChoiceRule().ele20TerminalRuleCallID();
			return new Solution(obj);
		}
		return null;
	}
}


/************ end Rule ChoiceRule ****************/


/************ begin Rule ReducibleRule ****************
 *
 * not supported
 *
 **/


// not supported
protected class ReducibleRule_Group extends GroupToken {
	
	public ReducibleRule_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prReducibleRule().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new ReducibleRule_2_Group(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new ReducibleRule_1_RuleCall_TerminalRule(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new ReducibleRule_0_Keyword_reducible(s2.getCurrent(), s2.getPredecessor()).firstSolution();
			if(s3 != null) {
				last = s3.getPredecessor();
				return s3;
			} else {
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class ReducibleRule_0_Keyword_reducible extends KeywordToken  {
	
	public ReducibleRule_0_Keyword_reducible(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prReducibleRule().ele0KeywordReducible();
	}	
}

// not supported
protected class ReducibleRule_1_RuleCall_TerminalRule extends RuleCallToken {
	
	public ReducibleRule_1_RuleCall_TerminalRule(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.prReducibleRule().ele1ParserRuleCallTerminalRule();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(TerminalRule_Assignment_stringFeature.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.prTerminalRule().getRule().getType().getType())) return null;
		return new TerminalRule_Assignment_stringFeature(current, this).firstSolution();
	}
}

// not supported
protected class ReducibleRule_2_Group extends GroupToken {
	
	public ReducibleRule_2_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prReducibleRule().ele2Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new ReducibleRule_2_1_Assignment_actionFeature(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new ReducibleRule_2_0_Action_ReducibleComposite_actionFeature(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class ReducibleRule_2_0_Action_ReducibleComposite_actionFeature extends ActionToken  {

	public ReducibleRule_2_0_Action_ReducibleComposite_actionFeature(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.prReducibleRule().ele20ActionReducibleCompositeactionFeature();
	}
	
	@Override
	protected Solution createSolution() {
		if(!current.isInstanceOf(grammarAccess.prReducibleRule().ele20ActionReducibleCompositeactionFeature().getTypeName().getType())) return null;
		Object val = current.getConsumable("actionFeature", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("actionFeature")) return null;
		return new Solution(getDescr((EObject)val));
	}
}

// not supported
protected class ReducibleRule_2_1_Assignment_actionFeature extends AssignmentToken  {
	
	public ReducibleRule_2_1_Assignment_actionFeature(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prReducibleRule().ele21AssignmentActionFeature();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("actionFeature",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("actionFeature");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prTerminalRule().getRule().getType().getType())) {
				Solution s = new TerminalRule_Assignment_stringFeature(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}



/************ end Rule ReducibleRule ****************/


/************ begin Rule TerminalRule ****************
 *
 * not supported
 *
 **/


// not supported
protected class TerminalRule_Assignment_stringFeature extends AssignmentToken  {
	
	public TerminalRule_Assignment_stringFeature(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prTerminalRule().eleAssignmentStringFeature();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("stringFeature",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("stringFeature");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prTerminalRule().ele0TerminalRuleCallSTRING();
			return new Solution(obj);
		}
		return null;
	}
}

/************ end Rule TerminalRule ****************/

}
