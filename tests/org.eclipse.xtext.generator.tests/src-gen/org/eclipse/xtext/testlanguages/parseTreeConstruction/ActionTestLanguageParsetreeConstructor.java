/*
* generated by Xtext
*/
package org.eclipse.xtext.testlanguages.parseTreeConstruction;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;
import org.eclipse.xtext.testlanguages.services.ActionTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class ActionTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private ActionTestLanguageGrammarAccess grammarAccess;
	
	@Override
	protected Solution internalSerialize(EObject obj) {
		IInstanceDescription inst = getDescr(obj);
		Solution s;
		if(inst.isInstanceOf(grammarAccess.prModel().getRule().getType().getClassifier()) && (s = new Model_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prChild().getRule().getType().getClassifier()) && (s = new Child_Assignment_name(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		return null;
	}
	

/************ begin Rule Model ****************
 *
 * not supported
 *
 **/


// not supported
protected class Model_Group extends GroupToken {
	
	public Model_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prModel().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Model_1_Group(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Model_0_RuleCall_Child(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class Model_0_RuleCall_Child extends RuleCallToken {
	
	public Model_0_RuleCall_Child(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.prModel().ele0ParserRuleCallChild();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(Child_Assignment_name.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.prChild().getRule().getType().getClassifier())) return null;
		return new Child_Assignment_name(current, this).firstSolution();
	}
}

// not supported
protected class Model_1_Group extends GroupToken {
	
	public Model_1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prModel().ele1Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Model_1_1_Assignment_right(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Model_1_0_Action_Parent_left(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class Model_1_0_Action_Parent_left extends ActionToken  {

	public Model_1_0_Action_Parent_left(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.prModel().ele10ActionParentleft();
	}
	
	@Override
	protected Solution createSolution() {
		if(!current.isInstanceOf(grammarAccess.prModel().ele10ActionParentleft().getType().getClassifier())) return null;
		Object val = current.getConsumable("left", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("left")) return null;
		return new Solution(getDescr((EObject)val));
	}
}

// not supported
protected class Model_1_1_Assignment_right extends AssignmentToken  {
	
	public Model_1_1_Assignment_right(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prModel().ele11AssignmentRight();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("right",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("right");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prChild().getRule().getType().getClassifier())) {
				Solution s = new Child_Assignment_name(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}



/************ end Rule Model ****************/


/************ begin Rule Child ****************
 *
 * not supported
 *
 **/


// not supported
protected class Child_Assignment_name extends AssignmentToken  {
	
	public Child_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prChild().eleAssignmentName();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prChild().ele0TerminalRuleCallID();
			return new Solution(obj);
		}
		return null;
	}
}

/************ end Rule Child ****************/

}
