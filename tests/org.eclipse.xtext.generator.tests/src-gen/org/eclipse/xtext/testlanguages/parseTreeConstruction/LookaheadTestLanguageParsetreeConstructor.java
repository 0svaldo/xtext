/*
* generated by Xtext
*/
package org.eclipse.xtext.testlanguages.parseTreeConstruction;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor2;

import org.eclipse.xtext.testlanguages.services.LookaheadTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class LookaheadTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor2 {
		
	@Inject
	private LookaheadTestLanguageGrammarAccess grammarAccess;
		
	public LookaheadTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken2 getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Entry_ContentsAssignment(this, this, 0, inst);
			case 1: return new Alts_Alternatives(this, this, 1, inst);
			case 2: return new LookAhead0_Group(this, this, 2, inst);
			case 3: return new LookAhead1_Group(this, this, 3, inst);
			case 4: return new LookAhead2_Group(this, this, 4, inst);
			case 5: return new LookAhead3_Group(this, this, 5, inst);
			case 6: return new LookAhead4_Alternatives(this, this, 6, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Entry ****************
 *
 * Entry:
 *   contents+=Alts*;
 *
 **/

// contents+=Alts*
protected class Entry_ContentsAssignment extends AssignmentToken  {
	
	public Entry_ContentsAssignment(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEntryAccess().getContentsAssignment();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Alts_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEntryRule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contents",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contents");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAltsRule().getType().getClassifier())) {
				type = AssignmentType.PRC; 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Entry_ContentsAssignment(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

/************ end Rule Entry ****************/


/************ begin Rule Alts ****************
 *
 * Alts:
 *   LookAhead0|LookAhead1|LookAhead3;
 *
 **/

// LookAhead0|LookAhead1|LookAhead3
protected class Alts_Alternatives extends AlternativesToken {

	public Alts_Alternatives(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getAltsAccess().getAlternatives();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Alts_LookAhead0ParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Alts_LookAhead1ParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Alts_LookAhead3ParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAltsRule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// LookAhead0
protected class Alts_LookAhead0ParserRuleCall_0 extends RuleCallToken {
	
	public Alts_LookAhead0ParserRuleCall_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAltsAccess().getLookAhead0ParserRuleCall_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LookAhead0_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(LookAhead0_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLookAhead0Rule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// LookAhead1
protected class Alts_LookAhead1ParserRuleCall_1 extends RuleCallToken {
	
	public Alts_LookAhead1ParserRuleCall_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAltsAccess().getLookAhead1ParserRuleCall_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LookAhead1_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(LookAhead1_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLookAhead1Rule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// LookAhead3
protected class Alts_LookAhead3ParserRuleCall_2 extends RuleCallToken {
	
	public Alts_LookAhead3ParserRuleCall_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAltsAccess().getLookAhead3ParserRuleCall_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LookAhead3_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(LookAhead3_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLookAhead3Rule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Alts ****************/


/************ begin Rule LookAhead0 ****************
 *
 * LookAhead0:
 *   "bar" x="a";
 *
 **/

// "bar" x="a"
protected class LookAhead0_Group extends GroupToken {
	
	public LookAhead0_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLookAhead0Access().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LookAhead0_XAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLookAhead0Rule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// "bar"
protected class LookAhead0_BarKeyword_0 extends KeywordToken  {
	
	public LookAhead0_BarKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLookAhead0Access().getBarKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
}

// x="a"
protected class LookAhead0_XAssignment_1 extends AssignmentToken  {
	
	public LookAhead0_XAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLookAhead0Access().getXAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LookAhead0_BarKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x");
		if("a".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getLookAhead0Access().getXAKeyword_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule LookAhead0 ****************/


/************ begin Rule LookAhead1 ****************
 *
 * LookAhead1:
 *   "foo" y=LookAhead2 x="b" x="d";
 *
 **/

// "foo" y=LookAhead2 x="b" x="d"
protected class LookAhead1_Group extends GroupToken {
	
	public LookAhead1_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLookAhead1Access().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LookAhead1_XAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLookAhead1Rule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// "foo"
protected class LookAhead1_FooKeyword_0 extends KeywordToken  {
	
	public LookAhead1_FooKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLookAhead1Access().getFooKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
}

// y=LookAhead2
protected class LookAhead1_YAssignment_1 extends AssignmentToken  {
	
	public LookAhead1_YAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLookAhead1Access().getYAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LookAhead2_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("y",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("y");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLookAhead2Rule().getType().getClassifier())) {
				type = AssignmentType.PRC; 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LookAhead1_FooKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// x="b"
protected class LookAhead1_XAssignment_2 extends AssignmentToken  {
	
	public LookAhead1_XAssignment_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLookAhead1Access().getXAssignment_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LookAhead1_YAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x");
		if("b".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getLookAhead1Access().getXBKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// x="d"
protected class LookAhead1_XAssignment_3 extends AssignmentToken  {
	
	public LookAhead1_XAssignment_3(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLookAhead1Access().getXAssignment_3();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LookAhead1_XAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x");
		if("d".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getLookAhead1Access().getXDKeyword_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule LookAhead1 ****************/


/************ begin Rule LookAhead2 ****************
 *
 * LookAhead2:
 *   (z="foo"|z="bar") "c";
 *
 **/

// (z="foo"|z="bar") "c"
protected class LookAhead2_Group extends GroupToken {
	
	public LookAhead2_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLookAhead2Access().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LookAhead2_CKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLookAhead2Rule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// z="foo"|z="bar"
protected class LookAhead2_Alternatives_0 extends AlternativesToken {

	public LookAhead2_Alternatives_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getLookAhead2Access().getAlternatives_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LookAhead2_ZAssignment_0_0(parent, this, 0, inst);
			case 1: return new LookAhead2_ZAssignment_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// z="foo"
protected class LookAhead2_ZAssignment_0_0 extends AssignmentToken  {
	
	public LookAhead2_ZAssignment_0_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLookAhead2Access().getZAssignment_0_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("z",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("z");
		if("foo".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getLookAhead2Access().getZFooKeyword_0_0_0();
			return obj;
		}
		return null;
	}

}

// z="bar"
protected class LookAhead2_ZAssignment_0_1 extends AssignmentToken  {
	
	public LookAhead2_ZAssignment_0_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLookAhead2Access().getZAssignment_0_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("z",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("z");
		if("bar".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getLookAhead2Access().getZBarKeyword_0_1_0();
			return obj;
		}
		return null;
	}

}


// "c"
protected class LookAhead2_CKeyword_1 extends KeywordToken  {
	
	public LookAhead2_CKeyword_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLookAhead2Access().getCKeyword_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LookAhead2_Alternatives_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule LookAhead2 ****************/


/************ begin Rule LookAhead3 ****************
 *
 * LookAhead3:
 *   "foo" "bar" x="b" z=LookAhead4;
 *
 **/

// "foo" "bar" x="b" z=LookAhead4
protected class LookAhead3_Group extends GroupToken {
	
	public LookAhead3_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLookAhead3Access().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LookAhead3_ZAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLookAhead3Rule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// "foo"
protected class LookAhead3_FooKeyword_0 extends KeywordToken  {
	
	public LookAhead3_FooKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLookAhead3Access().getFooKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
}

// "bar"
protected class LookAhead3_BarKeyword_1 extends KeywordToken  {
	
	public LookAhead3_BarKeyword_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLookAhead3Access().getBarKeyword_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LookAhead3_FooKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// x="b"
protected class LookAhead3_XAssignment_2 extends AssignmentToken  {
	
	public LookAhead3_XAssignment_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLookAhead3Access().getXAssignment_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LookAhead3_BarKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x");
		if("b".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getLookAhead3Access().getXBKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// z=LookAhead4
protected class LookAhead3_ZAssignment_3 extends AssignmentToken  {
	
	public LookAhead3_ZAssignment_3(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLookAhead3Access().getZAssignment_3();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LookAhead4_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("z",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("z");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLookAhead4Rule().getType().getClassifier())) {
				type = AssignmentType.PRC; 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LookAhead3_XAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule LookAhead3 ****************/


/************ begin Rule LookAhead4 ****************
 *
 * LookAhead4:
 *   x="c"|x="d";
 *
 **/

// x="c"|x="d"
protected class LookAhead4_Alternatives extends AlternativesToken {

	public LookAhead4_Alternatives(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getLookAhead4Access().getAlternatives();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LookAhead4_XAssignment_0(parent, this, 0, inst);
			case 1: return new LookAhead4_XAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLookAhead4Rule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// x="c"
protected class LookAhead4_XAssignment_0 extends AssignmentToken  {
	
	public LookAhead4_XAssignment_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLookAhead4Access().getXAssignment_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x");
		if("c".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getLookAhead4Access().getXCKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// x="d"
protected class LookAhead4_XAssignment_1 extends AssignmentToken  {
	
	public LookAhead4_XAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLookAhead4Access().getXAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x");
		if("d".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getLookAhead4Access().getXDKeyword_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule LookAhead4 ****************/

}
