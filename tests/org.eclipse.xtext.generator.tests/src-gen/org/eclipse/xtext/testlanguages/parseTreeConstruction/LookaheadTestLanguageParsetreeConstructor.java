/*
* generated by Xtext
*/
package org.eclipse.xtext.testlanguages.parseTreeConstruction;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;
import org.eclipse.xtext.testlanguages.services.LookaheadTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class LookaheadTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private LookaheadTestLanguageGrammarAccess grammarAccess;
	
	@Override
	protected Solution internalSerialize(EObject obj) {
		IInstanceDescription inst = getDescr(obj);
		Solution s;
		if(inst.isInstanceOf(grammarAccess.getEntryRule().getType().getClassifier()) && (s = new Entry_Assignment_contents(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getAltsRule().getType().getClassifier()) && (s = new Alts_Alternatives(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getLookAhead0Rule().getType().getClassifier()) && (s = new LookAhead0_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getLookAhead1Rule().getType().getClassifier()) && (s = new LookAhead1_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getLookAhead2Rule().getType().getClassifier()) && (s = new LookAhead2_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getLookAhead3Rule().getType().getClassifier()) && (s = new LookAhead3_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getLookAhead4Rule().getType().getClassifier()) && (s = new LookAhead4_Alternatives(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		return null;
	}
	

/************ begin Rule Entry ****************
 *
 * Entry:
 *   (contents+=Alts)*;
 *
 **/

// (contents+=Alts)*
protected class Entry_Assignment_contents extends AssignmentToken  {
	
	public Entry_Assignment_contents(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEntryAccess().getContentsAssignment();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("contents",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contents");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAltsRule().getType().getClassifier())) {
				Solution s = new Alts_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

/************ end Rule Entry ****************/


/************ begin Rule Alts ****************
 *
 * Alts:
 *   LookAhead0|LookAhead1|LookAhead3;
 *
 **/

// LookAhead0|LookAhead1|LookAhead3
protected class Alts_Alternatives extends AlternativesToken {

	public Alts_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAltsAccess().getAlternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new Alts_0_RuleCall_LookAhead0(current, this);
			case 1: return new Alts_1_RuleCall_LookAhead1(current, this);
			case 2: return new Alts_2_RuleCall_LookAhead3(current, this);
			default: return null;
		}
	}
}

// LookAhead0
protected class Alts_0_RuleCall_LookAhead0 extends RuleCallToken {
	
	public Alts_0_RuleCall_LookAhead0(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAltsAccess().getLookAhead0ParserRuleCall_0();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(LookAhead0_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLookAhead0Rule().getType().getClassifier())) return null;
		return new LookAhead0_Group(current, this).firstSolution();
	}
}

// LookAhead1
protected class Alts_1_RuleCall_LookAhead1 extends RuleCallToken {
	
	public Alts_1_RuleCall_LookAhead1(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAltsAccess().getLookAhead1ParserRuleCall_1();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(LookAhead1_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLookAhead1Rule().getType().getClassifier())) return null;
		return new LookAhead1_Group(current, this).firstSolution();
	}
}

// LookAhead3
protected class Alts_2_RuleCall_LookAhead3 extends RuleCallToken {
	
	public Alts_2_RuleCall_LookAhead3(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAltsAccess().getLookAhead3ParserRuleCall_2();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(LookAhead3_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLookAhead3Rule().getType().getClassifier())) return null;
		return new LookAhead3_Group(current, this).firstSolution();
	}
}


/************ end Rule Alts ****************/


/************ begin Rule LookAhead0 ****************
 *
 * LookAhead0:
 *   "bar" x="a";
 *
 **/

// "bar" x="a"
protected class LookAhead0_Group extends GroupToken {
	
	public LookAhead0_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLookAhead0Access().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new LookAhead0_1_Assignment_x(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new LookAhead0_0_Keyword_bar(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// "bar"
protected class LookAhead0_0_Keyword_bar extends KeywordToken  {
	
	public LookAhead0_0_Keyword_bar(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLookAhead0Access().getBarKeyword_0();
	}	
}

// x="a"
protected class LookAhead0_1_Assignment_x extends AssignmentToken  {
	
	public LookAhead0_1_Assignment_x(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLookAhead0Access().getXAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("x",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x");

		if("a".equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.getLookAhead0Access().getXAKeyword_1_0();
			return new Solution(obj);
		}

		return null;
	}
}


/************ end Rule LookAhead0 ****************/


/************ begin Rule LookAhead1 ****************
 *
 * LookAhead1:
 *   "foo" y=LookAhead2 x="b" x="d";
 *
 **/

// "foo" y=LookAhead2 x="b" x="d"
protected class LookAhead1_Group extends GroupToken {
	
	public LookAhead1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLookAhead1Access().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new LookAhead1_3_Assignment_x(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new LookAhead1_2_Assignment_x(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new LookAhead1_1_Assignment_y(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				while(s3 != null) {
					Solution s4 = new LookAhead1_0_Keyword_foo(s3.getCurrent(), s3.getPredecessor()).firstSolution();
					if(s4 != null) {
						last = s4.getPredecessor();
						return s4;
					} else {
						s3 = s3.getPredecessor().nextSolution(this,s3);
					}
				}
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "foo"
protected class LookAhead1_0_Keyword_foo extends KeywordToken  {
	
	public LookAhead1_0_Keyword_foo(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLookAhead1Access().getFooKeyword_0();
	}	
}

// y=LookAhead2
protected class LookAhead1_1_Assignment_y extends AssignmentToken  {
	
	public LookAhead1_1_Assignment_y(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLookAhead1Access().getYAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("y",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("y");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLookAhead2Rule().getType().getClassifier())) {
				Solution s = new LookAhead2_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// x="b"
protected class LookAhead1_2_Assignment_x extends AssignmentToken  {
	
	public LookAhead1_2_Assignment_x(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLookAhead1Access().getXAssignment_2();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("x",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x");

		if("b".equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.getLookAhead1Access().getXBKeyword_2_0();
			return new Solution(obj);
		}

		return null;
	}
}

// x="d"
protected class LookAhead1_3_Assignment_x extends AssignmentToken  {
	
	public LookAhead1_3_Assignment_x(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLookAhead1Access().getXAssignment_3();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("x",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x");

		if("d".equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.getLookAhead1Access().getXDKeyword_3_0();
			return new Solution(obj);
		}

		return null;
	}
}


/************ end Rule LookAhead1 ****************/


/************ begin Rule LookAhead2 ****************
 *
 * LookAhead2:
 *   (z="foo"|z="bar") "c";
 *
 **/

// (z="foo"|z="bar") "c"
protected class LookAhead2_Group extends GroupToken {
	
	public LookAhead2_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLookAhead2Access().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new LookAhead2_1_Keyword_c(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new LookAhead2_0_Alternatives(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// z="foo"|z="bar"
protected class LookAhead2_0_Alternatives extends AlternativesToken {

	public LookAhead2_0_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getLookAhead2Access().getAlternatives_0();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new LookAhead2_0_0_Assignment_z(current, this);
			case 1: return new LookAhead2_0_1_Assignment_z(current, this);
			default: return null;
		}
	}
}

// z="foo"
protected class LookAhead2_0_0_Assignment_z extends AssignmentToken  {
	
	public LookAhead2_0_0_Assignment_z(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLookAhead2Access().getZAssignment_0_0();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("z",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("z");

		if("foo".equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.getLookAhead2Access().getZFooKeyword_0_0_0();
			return new Solution(obj);
		}

		return null;
	}
}

// z="bar"
protected class LookAhead2_0_1_Assignment_z extends AssignmentToken  {
	
	public LookAhead2_0_1_Assignment_z(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLookAhead2Access().getZAssignment_0_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("z",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("z");

		if("bar".equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.getLookAhead2Access().getZBarKeyword_0_1_0();
			return new Solution(obj);
		}

		return null;
	}
}


// "c"
protected class LookAhead2_1_Keyword_c extends KeywordToken  {
	
	public LookAhead2_1_Keyword_c(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLookAhead2Access().getCKeyword_1();
	}	
}


/************ end Rule LookAhead2 ****************/


/************ begin Rule LookAhead3 ****************
 *
 * LookAhead3:
 *   "foo" "bar" x="b" z=LookAhead4;
 *
 **/

// "foo" "bar" x="b" z=LookAhead4
protected class LookAhead3_Group extends GroupToken {
	
	public LookAhead3_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLookAhead3Access().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new LookAhead3_3_Assignment_z(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new LookAhead3_2_Assignment_x(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new LookAhead3_1_Keyword_bar(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				while(s3 != null) {
					Solution s4 = new LookAhead3_0_Keyword_foo(s3.getCurrent(), s3.getPredecessor()).firstSolution();
					if(s4 != null) {
						last = s4.getPredecessor();
						return s4;
					} else {
						s3 = s3.getPredecessor().nextSolution(this,s3);
					}
				}
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "foo"
protected class LookAhead3_0_Keyword_foo extends KeywordToken  {
	
	public LookAhead3_0_Keyword_foo(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLookAhead3Access().getFooKeyword_0();
	}	
}

// "bar"
protected class LookAhead3_1_Keyword_bar extends KeywordToken  {
	
	public LookAhead3_1_Keyword_bar(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLookAhead3Access().getBarKeyword_1();
	}	
}

// x="b"
protected class LookAhead3_2_Assignment_x extends AssignmentToken  {
	
	public LookAhead3_2_Assignment_x(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLookAhead3Access().getXAssignment_2();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("x",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x");

		if("b".equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.getLookAhead3Access().getXBKeyword_2_0();
			return new Solution(obj);
		}

		return null;
	}
}

// z=LookAhead4
protected class LookAhead3_3_Assignment_z extends AssignmentToken  {
	
	public LookAhead3_3_Assignment_z(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLookAhead3Access().getZAssignment_3();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("z",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("z");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLookAhead4Rule().getType().getClassifier())) {
				Solution s = new LookAhead4_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}


/************ end Rule LookAhead3 ****************/


/************ begin Rule LookAhead4 ****************
 *
 * LookAhead4:
 *   x="c"|x="d";
 *
 **/

// x="c"|x="d"
protected class LookAhead4_Alternatives extends AlternativesToken {

	public LookAhead4_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getLookAhead4Access().getAlternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new LookAhead4_0_Assignment_x(current, this);
			case 1: return new LookAhead4_1_Assignment_x(current, this);
			default: return null;
		}
	}
}

// x="c"
protected class LookAhead4_0_Assignment_x extends AssignmentToken  {
	
	public LookAhead4_0_Assignment_x(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLookAhead4Access().getXAssignment_0();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("x",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x");

		if("c".equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.getLookAhead4Access().getXCKeyword_0_0();
			return new Solution(obj);
		}

		return null;
	}
}

// x="d"
protected class LookAhead4_1_Assignment_x extends AssignmentToken  {
	
	public LookAhead4_1_Assignment_x(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLookAhead4Access().getXAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("x",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x");

		if("d".equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.getLookAhead4Access().getXDKeyword_1_0();
			return new Solution(obj);
		}

		return null;
	}
}


/************ end Rule LookAhead4 ****************/

}
