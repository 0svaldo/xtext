/*
* generated by Xtext
*/
grammar InternalPartialParserTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.testlanguages.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.testlanguages.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.testlanguages.services.PartialParserTestLanguageGrammarAccess;

}

@parser::members {
 
 	private PartialParserTestLanguageGrammarAccess grammarAccess;
 	
    public InternalPartialParserTestLanguageParser(TokenStream input, IAstFactory factory, PartialParserTestLanguageGrammarAccess grammarAccess) {
        super(input, factory, grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/xtext/testlanguages/parser/antlr/internal/InternalPartialParserTestLanguage.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "SomeContainer";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSomeContainer
entryRuleSomeContainer returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prSomeContainer().getRule(), currentNode); }
	 iv_ruleSomeContainer=ruleSomeContainer 
	 { $current=$iv_ruleSomeContainer.current; } 
	 EOF 
;

// Rule SomeContainer
ruleSomeContainer returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((('container' 
    {
        createLeafNode(grammarAccess.prSomeContainer().ele0000KeywordContainer(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.prSomeContainer().ele00010TerminalRuleCallID(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prSomeContainer().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))'{' 
    {
        createLeafNode(grammarAccess.prSomeContainer().ele001KeywordLeftCurlyBracket(), null); 
    }
)((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prSomeContainer().ele0100ParserRuleCallNested(), currentNode); 
	    }
	    lv_nested_3=ruleNested 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prSomeContainer().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "nested", lv_nested_3, "Nested", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prSomeContainer().ele0110ParserRuleCallContent(), currentNode); 
	    }
	    lv_content_4=ruleContent 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prSomeContainer().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "content", lv_content_4, "Content", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)'}' 
    {
        createLeafNode(grammarAccess.prSomeContainer().ele1KeywordRightCurlyBracket(), null); 
    }
);





// Entry rule entryRuleNested
entryRuleNested returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prNested().getRule(), currentNode); }
	 iv_ruleNested=ruleNested 
	 { $current=$iv_ruleNested.current; } 
	 EOF 
;

// Rule Nested
ruleNested returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((('nested' 
    {
        createLeafNode(grammarAccess.prNested().ele000KeywordNested(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.prNested().ele001KeywordLeftCurlyBracket(), null); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prNested().ele010ParserRuleCallSomeContainer(), currentNode); 
	    }
	    lv_nested_2=ruleSomeContainer 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prNested().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "nested", lv_nested_2, "SomeContainer", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)+)'}' 
    {
        createLeafNode(grammarAccess.prNested().ele1KeywordRightCurlyBracket(), null); 
    }
);





// Entry rule entryRuleContent
entryRuleContent returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prContent().getRule(), currentNode); }
	 iv_ruleContent=ruleContent 
	 { $current=$iv_ruleContent.current; } 
	 EOF 
;

// Rule Content
ruleContent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.prContent().ele0ParserRuleCallChildren(), currentNode); 
    }
    this_Children_0=ruleChildren
    { 
        $current = $this_Children_0.current; 
        currentNode = currentNode.getParent();
    }

    { 
    createLeafNode(grammarAccess.prContent().ele0ParserRuleCallChildren(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.prContent().ele1ParserRuleCallAbstractChildren(), currentNode); 
    }
    this_AbstractChildren_1=ruleAbstractChildren
    { 
        $current = $this_AbstractChildren_1.current; 
        currentNode = currentNode.getParent();
    }

    { 
    createLeafNode(grammarAccess.prContent().ele1ParserRuleCallAbstractChildren(), null); 
    }
);





// Entry rule entryRuleChildren
entryRuleChildren returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prChildren().getRule(), currentNode); }
	 iv_ruleChildren=ruleChildren 
	 { $current=$iv_ruleChildren.current; } 
	 EOF 
;

// Rule Children
ruleChildren returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((('children' 
    {
        createLeafNode(grammarAccess.prChildren().ele0000KeywordChildren(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.prChildren().ele0001KeywordLeftCurlyBracket(), null); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prChildren().ele0010ParserRuleCallChild(), currentNode); 
	    }
	    lv_children_2=ruleChild 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prChildren().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "children", lv_children_2, "Child", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))(',' 
    {
        createLeafNode(grammarAccess.prChildren().ele010KeywordComma(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prChildren().ele0110ParserRuleCallChild(), currentNode); 
	    }
	    lv_children_4=ruleChild 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prChildren().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "children", lv_children_4, "Child", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)'}' 
    {
        createLeafNode(grammarAccess.prChildren().ele1KeywordRightCurlyBracket(), null); 
    }
);





// Entry rule entryRuleChild
entryRuleChild returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prChild().getRule(), currentNode); }
	 iv_ruleChild=ruleChild 
	 { $current=$iv_ruleChild.current; } 
	 EOF 
;

// Rule Child
ruleChild returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((('->' 
    {
        createLeafNode(grammarAccess.prChild().ele0000KeywordHyphenMinusGreaterThanSign(), null); 
    }
'C' 
    {
        createLeafNode(grammarAccess.prChild().ele0001KeywordC(), null); 
    }
)'(' 
    {
        createLeafNode(grammarAccess.prChild().ele001KeywordLeftParenthesis(), null); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prChild().ele010ParserRuleCallNamed(), currentNode); 
	    }
	    lv_value_3=ruleNamed 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prChild().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_3, "Named", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))')' 
    {
        createLeafNode(grammarAccess.prChild().ele1KeywordRightParenthesis(), null); 
    }
);





// Entry rule entryRuleAbstractChildren
entryRuleAbstractChildren returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prAbstractChildren().getRule(), currentNode); }
	 iv_ruleAbstractChildren=ruleAbstractChildren 
	 { $current=$iv_ruleAbstractChildren.current; } 
	 EOF 
;

// Rule AbstractChildren
ruleAbstractChildren returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((('abstract children' 
    {
        createLeafNode(grammarAccess.prAbstractChildren().ele000KeywordAbstractChildren(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.prAbstractChildren().ele001KeywordLeftCurlyBracket(), null); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prAbstractChildren().ele010ParserRuleCallAbstractChild(), currentNode); 
	    }
	    lv_abstractChildren_2=ruleAbstractChild 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prAbstractChildren().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "abstractChildren", lv_abstractChildren_2, "AbstractChild", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)+)'}' 
    {
        createLeafNode(grammarAccess.prAbstractChildren().ele1KeywordRightCurlyBracket(), null); 
    }
);





// Entry rule entryRuleAbstractChild
entryRuleAbstractChild returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prAbstractChild().getRule(), currentNode); }
	 iv_ruleAbstractChild=ruleAbstractChild 
	 { $current=$iv_ruleAbstractChild.current; } 
	 EOF 
;

// Rule AbstractChild
ruleAbstractChild returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.prAbstractChild().ele0ParserRuleCallFirstConcrete(), currentNode); 
    }
    this_FirstConcrete_0=ruleFirstConcrete
    { 
        $current = $this_FirstConcrete_0.current; 
        currentNode = currentNode.getParent();
    }

    { 
    createLeafNode(grammarAccess.prAbstractChild().ele0ParserRuleCallFirstConcrete(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.prAbstractChild().ele1ParserRuleCallSecondConcrete(), currentNode); 
    }
    this_SecondConcrete_1=ruleSecondConcrete
    { 
        $current = $this_SecondConcrete_1.current; 
        currentNode = currentNode.getParent();
    }

    { 
    createLeafNode(grammarAccess.prAbstractChild().ele1ParserRuleCallSecondConcrete(), null); 
    }
);





// Entry rule entryRuleFirstConcrete
entryRuleFirstConcrete returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prFirstConcrete().getRule(), currentNode); }
	 iv_ruleFirstConcrete=ruleFirstConcrete 
	 { $current=$iv_ruleFirstConcrete.current; } 
	 EOF 
;

// Rule FirstConcrete
ruleFirstConcrete returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((((('->' 
    {
        createLeafNode(grammarAccess.prFirstConcrete().ele00000KeywordHyphenMinusGreaterThanSign(), null); 
    }
'F' 
    {
        createLeafNode(grammarAccess.prFirstConcrete().ele00001KeywordF(), null); 
    }
)'(' 
    {
        createLeafNode(grammarAccess.prFirstConcrete().ele0001KeywordLeftParenthesis(), null); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prFirstConcrete().ele0010ParserRuleCallNamed(), currentNode); 
	    }
	    lv_value_3=ruleNamed 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prFirstConcrete().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_3, "Named", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.prFirstConcrete().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.prFirstConcrete().ele010CrossReferenceEStringSomeContainer(), "referencedContainer"); 
	}

		// TODO assign feature to currentNode
	
)?)')' 
    {
        createLeafNode(grammarAccess.prFirstConcrete().ele1KeywordRightParenthesis(), null); 
    }
);





// Entry rule entryRuleSecondConcrete
entryRuleSecondConcrete returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prSecondConcrete().getRule(), currentNode); }
	 iv_ruleSecondConcrete=ruleSecondConcrete 
	 { $current=$iv_ruleSecondConcrete.current; } 
	 EOF 
;

// Rule SecondConcrete
ruleSecondConcrete returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((((('->' 
    {
        createLeafNode(grammarAccess.prSecondConcrete().ele000000KeywordHyphenMinusGreaterThanSign(), null); 
    }
'F' 
    {
        createLeafNode(grammarAccess.prSecondConcrete().ele000001KeywordF(), null); 
    }
)'S' 
    {
        createLeafNode(grammarAccess.prSecondConcrete().ele00001KeywordS(), null); 
    }
)'(' 
    {
        createLeafNode(grammarAccess.prSecondConcrete().ele0001KeywordLeftParenthesis(), null); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prSecondConcrete().ele0010ParserRuleCallNamed(), currentNode); 
	    }
	    lv_value_4=ruleNamed 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prSecondConcrete().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_4, "Named", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.prSecondConcrete().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.prSecondConcrete().ele010CrossReferenceEStringChild(), "referencedChildren"); 
	}

		// TODO assign feature to currentNode
	
)?)')' 
    {
        createLeafNode(grammarAccess.prSecondConcrete().ele1KeywordRightParenthesis(), null); 
    }
);





// Entry rule entryRuleNamed
entryRuleNamed returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prNamed().getRule(), currentNode); }
	 iv_ruleNamed=ruleNamed 
	 { $current=$iv_ruleNamed.current; } 
	 EOF 
;

// Rule Named
ruleNamed returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.prNamed().ele0TerminalRuleCallID(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prNamed().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);




RULE_ID : '^'? (('a'..'z'|'A'..'Z')|'_') ((('a'..'z'|'A'..'Z')|'_')|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('\"' ('\\' ((((((('b'|'t')|'n')|'f')|'r')|'\"')|'\'')|'\\')|~(('\\'|'\"')))* '\"'|'\'' ('\\' ((((((('b'|'t')|'n')|'f')|'r')|'\"')|'\'')|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (((' '|'\t')|'\r')|'\n')+;

RULE_ANY_OTHER : .;


