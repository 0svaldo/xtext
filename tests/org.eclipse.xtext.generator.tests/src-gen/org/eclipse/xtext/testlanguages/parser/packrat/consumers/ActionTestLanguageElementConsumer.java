/*
* generated by Xtext
*/
package org.eclipse.xtext.testlanguages.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;

import org.eclipse.xtext.AbstractRule;

import org.eclipse.xtext.parser.packrat.IMarkerFactory.IMarker;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ConsumeResult;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.testlanguages.services.ActionTestLanguageGrammarAccess.ElementElements;

import org.eclipse.xtext.testlanguages.parser.packrat.consumers.ActionTestLanguageItemConsumer;

@SuppressWarnings("unused")
public final class ActionTestLanguageElementConsumer extends NonTerminalConsumer {

	private ElementElements rule;
	
	private INonTerminalConsumer itemConsumer;

	public ActionTestLanguageElementConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
	}
	
	@Override
	protected int doConsume(int entryPoint) throws Exception {
		return consumeGroup$1(entryPoint);
	}

	protected int consumeGroup$1(int entryPoint) throws Exception {
		GroupResult result = createGroupResult(getRule().eleGroup());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeRuleCall$2(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0ParserRuleCallItem());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeAction$4(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele10ActionItemitems());
					return result.getResult();
				}
			case 2:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$6(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele11AssignmentItems());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeRuleCall$2(int entryPoint) throws Exception {
		return consumeNonTerminal(itemConsumer, null, false, false, false, getRule().ele0ParserRuleCallItem());
	}
	protected int consumeAction$4(int entryPoint) {
		consumeAction(getRule().ele10ActionItemitems(), true);
		return ConsumeResult.SUCCESS;	
	}

	protected int consumeAssignment$6(int entryPoint) throws Exception {
		return consumeRuleCall$7(entryPoint);
	}

	protected int consumeRuleCall$7(int entryPoint) throws Exception {
		return consumeNonTerminal(itemConsumer, "items", true, false, false, getRule().ele110ParserRuleCallItem());
	}

	public ElementElements getRule() {
		return rule;
	}
	
	public void setRule(ElementElements rule) {
		this.rule = rule;
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setItemConsumer(INonTerminalConsumer itemConsumer) {
		this.itemConsumer = itemConsumer;
	}
	
}
