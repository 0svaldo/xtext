/*
* generated by Xtext
*/
package org.eclipse.xtext.testlanguages.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;

import org.eclipse.xtext.testlanguages.services.LookaheadTestLanguageGrammarAccess.LookAhead1Elements;

public final class LookaheadTestLanguageLookAhead1Consumer extends NonTerminalConsumer {

	private LookAhead1Elements rule;	

	private INonTerminalConsumer lookAhead2Consumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer keyword$4$Consumer;

	private IElementConsumer assignment$5$Consumer;

	private IElementConsumer ruleCall$6$Consumer;

	private IElementConsumer assignment$7$Consumer;

	private IElementConsumer keyword$8$Consumer;

	private IElementConsumer assignment$9$Consumer;

	private IElementConsumer keyword$10$Consumer;

	private ICharacterClass keyword$4$Delimiter;

	private ICharacterClass keyword$8$Delimiter;

	private ICharacterClass keyword$10$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$4$Consumer);
			acceptor.accept(assignment$5$Consumer);
			acceptor.accept(assignment$7$Consumer);
			acceptor.accept(assignment$9$Consumer);
		}
	}

	protected class Keyword$4$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$4$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$4$Delimiter());
		}
	}

	protected class Assignment$5$Consumer extends AssignmentConsumer {
		
		protected Assignment$5$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$6$Consumer;
		}
	}

	protected class RuleCall$6$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$6$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(lookAhead2Consumer, "y", false, false, false, getElement());
		}
	}

	protected class Assignment$7$Consumer extends AssignmentConsumer {
		
		protected Assignment$7$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$8$Consumer;
		}
	}

	protected class Keyword$8$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$8$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), "x", false, false, getKeyword$8$Delimiter());
		}
	}

	protected class Assignment$9$Consumer extends AssignmentConsumer {
		
		protected Assignment$9$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$10$Consumer;
		}
	}

	protected class Keyword$10$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$10$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), "x", false, false, getKeyword$10$Delimiter());
		}
	}

	public LookaheadTestLanguageLookAhead1Consumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$4$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$8$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$10$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public LookAhead1Elements getRule() {
		return rule;
	}
	
	public void setRule(LookAhead1Elements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		keyword$4$Consumer = new Keyword$4$Consumer(rule.ele000KeywordFoo());
		assignment$5$Consumer = new Assignment$5$Consumer(rule.ele001AssignmentY());
		ruleCall$6$Consumer = new RuleCall$6$Consumer(rule.ele0010ParserRuleCallLookAhead2());
		assignment$7$Consumer = new Assignment$7$Consumer(rule.ele01AssignmentX());
		keyword$8$Consumer = new Keyword$8$Consumer(rule.ele010KeywordB());
		assignment$9$Consumer = new Assignment$9$Consumer(rule.ele1AssignmentX());
		keyword$10$Consumer = new Keyword$10$Consumer(rule.ele10KeywordD());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setLookAhead2Consumer(INonTerminalConsumer lookAhead2Consumer) {
		this.lookAhead2Consumer = lookAhead2Consumer;
	}
	
	public ICharacterClass getKeyword$4$Delimiter() {
		return keyword$4$Delimiter;
	}
	
	public void setKeyword$4$Delimiter(ICharacterClass characterClass) {
		keyword$4$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$8$Delimiter() {
		return keyword$8$Delimiter;
	}
	
	public void setKeyword$8$Delimiter(ICharacterClass characterClass) {
		keyword$8$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$10$Delimiter() {
		return keyword$10$Delimiter;
	}
	
	public void setKeyword$10$Delimiter(ICharacterClass characterClass) {
		keyword$10$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
