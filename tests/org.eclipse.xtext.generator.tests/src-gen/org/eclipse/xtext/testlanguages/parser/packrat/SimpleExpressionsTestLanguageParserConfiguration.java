/*
* generated by Xtext
*/
package org.eclipse.xtext.testlanguages.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.testlanguages.services.SimpleExpressionsTestLanguageGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 

import org.eclipse.xtext.testlanguages.parser.packrat.consumers.SimpleExpressionsTestLanguageSequenceConsumer;
import org.eclipse.xtext.testlanguages.parser.packrat.consumers.SimpleExpressionsTestLanguageAdditionConsumer;
import org.eclipse.xtext.testlanguages.parser.packrat.consumers.SimpleExpressionsTestLanguageMultiplicationConsumer;
import org.eclipse.xtext.testlanguages.parser.packrat.consumers.SimpleExpressionsTestLanguageTermConsumer;
import org.eclipse.xtext.testlanguages.parser.packrat.consumers.SimpleExpressionsTestLanguageAtomConsumer;
import org.eclipse.xtext.testlanguages.parser.packrat.consumers.SimpleExpressionsTestLanguageParensConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class SimpleExpressionsTestLanguageParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 

    private SimpleExpressionsTestLanguageSequenceConsumer sequenceConsumer;
    private SimpleExpressionsTestLanguageAdditionConsumer additionConsumer;
    private SimpleExpressionsTestLanguageMultiplicationConsumer multiplicationConsumer;
    private SimpleExpressionsTestLanguageTermConsumer termConsumer;
    private SimpleExpressionsTestLanguageAtomConsumer atomConsumer;
    private SimpleExpressionsTestLanguageParensConsumer parensConsumer;

	private SimpleExpressionsTestLanguageGrammarAccess grammarAccess;

	public SimpleExpressionsTestLanguageParserConfiguration(IInternalParserConfiguration configuration, SimpleExpressionsTestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public SimpleExpressionsTestLanguageSequenceConsumer getRootConsumer() {
		return sequenceConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		sequenceConsumer = new SimpleExpressionsTestLanguageSequenceConsumer(
    		this, null
    	);
		additionConsumer = new SimpleExpressionsTestLanguageAdditionConsumer(
    		this, null
    	);
		multiplicationConsumer = new SimpleExpressionsTestLanguageMultiplicationConsumer(
    		this, null
    	);
		termConsumer = new SimpleExpressionsTestLanguageTermConsumer(
    		this, null
    	);
		atomConsumer = new SimpleExpressionsTestLanguageAtomConsumer(
    		this, null
    	);
		parensConsumer = new SimpleExpressionsTestLanguageParensConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getSequenceConsumer().setRule(grammarAccess.prSequence());
		getAdditionConsumer().setRule(grammarAccess.prAddition());
		getMultiplicationConsumer().setRule(grammarAccess.prMultiplication());
		getTermConsumer().setRule(grammarAccess.prTerm());
		getAtomConsumer().setRule(grammarAccess.prAtom());
		getParensConsumer().setRule(grammarAccess.prParens());
		getIdConsumer().setRule(grammarAccess.trID());
		getIntConsumer().setRule(grammarAccess.trINT());
		getStringConsumer().setRule(grammarAccess.trSTRING());
		getMlCommentConsumer().setRule(grammarAccess.trML_COMMENT());
		getSlCommentConsumer().setRule(grammarAccess.trSL_COMMENT());
		getWsConsumer().setRule(grammarAccess.trWS());
		getAnyOtherConsumer().setRule(grammarAccess.trANY_OTHER());


		getSequenceConsumer().setAdditionConsumer(getAdditionConsumer());

		getAdditionConsumer().setMultiplicationConsumer(getMultiplicationConsumer());

		getMultiplicationConsumer().setTermConsumer(getTermConsumer());

		getTermConsumer().setAtomConsumer(getAtomConsumer());
		getTermConsumer().setParensConsumer(getParensConsumer());

		getAtomConsumer().setIdConsumer(getIdConsumer());

		getParensConsumer().setAdditionConsumer(getAdditionConsumer());

		getAdditionConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.SimpleExpressionsTestLanguageDelimiters.keyword$20$Delimiter);
		getAdditionConsumer().setKeyword$10$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.SimpleExpressionsTestLanguageDelimiters.keyword$20$Delimiter);
		getMultiplicationConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.SimpleExpressionsTestLanguageDelimiters.keyword$20$Delimiter);
		getMultiplicationConsumer().setKeyword$10$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.SimpleExpressionsTestLanguageDelimiters.keyword$20$Delimiter);
		getAtomConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.SimpleExpressionsTestLanguageDelimiters.ruleCall$46$Delimiter);
		getParensConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.SimpleExpressionsTestLanguageDelimiters.keyword$20$Delimiter);
		getParensConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.SimpleExpressionsTestLanguageDelimiters.keyword$20$Delimiter);
	}
	
	// TODO collect superGrammars transitive
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public SimpleExpressionsTestLanguageSequenceConsumer getSequenceConsumer() {
    	return sequenceConsumer;
    }

    public SimpleExpressionsTestLanguageAdditionConsumer getAdditionConsumer() {
    	return additionConsumer;
    }

    public SimpleExpressionsTestLanguageMultiplicationConsumer getMultiplicationConsumer() {
    	return multiplicationConsumer;
    }

    public SimpleExpressionsTestLanguageTermConsumer getTermConsumer() {
    	return termConsumer;
    }

    public SimpleExpressionsTestLanguageAtomConsumer getAtomConsumer() {
    	return atomConsumer;
    }

    public SimpleExpressionsTestLanguageParensConsumer getParensConsumer() {
    	return parensConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
