/*
* generated by Xtext
*/
package org.eclipse.xtext.testlanguages.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;

import org.eclipse.xtext.testlanguages.services.SimpleExpressionsTestLanguageGrammarAccess;

import org.eclipse.xtext.builtin.parser.packrat.XtextBuiltinParserConfiguration; 

import org.eclipse.xtext.testlanguages.parser.packrat.consumers.SimpleExpressionsTestLanguageSequenceConsumer;
import org.eclipse.xtext.testlanguages.parser.packrat.consumers.SimpleExpressionsTestLanguageAdditionConsumer;
import org.eclipse.xtext.testlanguages.parser.packrat.consumers.SimpleExpressionsTestLanguageMultiplicationConsumer;
import org.eclipse.xtext.testlanguages.parser.packrat.consumers.SimpleExpressionsTestLanguageTermConsumer;
import org.eclipse.xtext.testlanguages.parser.packrat.consumers.SimpleExpressionsTestLanguageAtomConsumer;
import org.eclipse.xtext.testlanguages.parser.packrat.consumers.SimpleExpressionsTestLanguageParensConsumer;
import org.eclipse.xtext.builtin.parser.packrat.consumers.XtextBuiltinIDConsumer;
import org.eclipse.xtext.builtin.parser.packrat.consumers.XtextBuiltinINTConsumer;
import org.eclipse.xtext.builtin.parser.packrat.consumers.XtextBuiltinSTRINGConsumer;
import org.eclipse.xtext.builtin.parser.packrat.consumers.XtextBuiltinML_COMMENTConsumer;
import org.eclipse.xtext.builtin.parser.packrat.consumers.XtextBuiltinSL_COMMENTConsumer;
import org.eclipse.xtext.builtin.parser.packrat.consumers.XtextBuiltinWSConsumer;
import org.eclipse.xtext.builtin.parser.packrat.consumers.XtextBuiltinANY_OTHERConsumer;

@SuppressWarnings("unused")
public class SimpleExpressionsTestLanguageParserConfiguration extends AbstractParserConfiguration {

	private XtextBuiltinParserConfiguration xtextBuiltinConfiguration; 

    private SimpleExpressionsTestLanguageSequenceConsumer sequenceConsumer;
    private SimpleExpressionsTestLanguageAdditionConsumer additionConsumer;
    private SimpleExpressionsTestLanguageMultiplicationConsumer multiplicationConsumer;
    private SimpleExpressionsTestLanguageTermConsumer termConsumer;
    private SimpleExpressionsTestLanguageAtomConsumer atomConsumer;
    private SimpleExpressionsTestLanguageParensConsumer parensConsumer;

	private SimpleExpressionsTestLanguageGrammarAccess grammarAccess;

	public SimpleExpressionsTestLanguageParserConfiguration(IInternalParserConfiguration configuration, SimpleExpressionsTestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.xtextBuiltinConfiguration = new XtextBuiltinParserConfiguration(configuration, null);
	}

	public SimpleExpressionsTestLanguageSequenceConsumer getRootConsumer() {
		return sequenceConsumer;
	} 

	public void createNonTerminalConsumers() {
		getXtextBuiltinConfiguration().createNonTerminalConsumers();
		sequenceConsumer = new SimpleExpressionsTestLanguageSequenceConsumer(
    		this, null
    	);
		additionConsumer = new SimpleExpressionsTestLanguageAdditionConsumer(
    		this, null
    	);
		multiplicationConsumer = new SimpleExpressionsTestLanguageMultiplicationConsumer(
    		this, null
    	);
		termConsumer = new SimpleExpressionsTestLanguageTermConsumer(
    		this, null
    	);
		atomConsumer = new SimpleExpressionsTestLanguageAtomConsumer(
    		this, null
    	);
		parensConsumer = new SimpleExpressionsTestLanguageParensConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getXtextBuiltinConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getSequenceConsumer().setRule(grammarAccess.prSequence());
		getAdditionConsumer().setRule(grammarAccess.prAddition());
		getMultiplicationConsumer().setRule(grammarAccess.prMultiplication());
		getTermConsumer().setRule(grammarAccess.prTerm());
		getAtomConsumer().setRule(grammarAccess.prAtom());
		getParensConsumer().setRule(grammarAccess.prParens());
		getIdConsumer().setRule(grammarAccess.lrID());
		getIntConsumer().setRule(grammarAccess.lrINT());
		getStringConsumer().setRule(grammarAccess.lrSTRING());
		getMlCommentConsumer().setRule(grammarAccess.lrML_COMMENT());
		getSlCommentConsumer().setRule(grammarAccess.lrSL_COMMENT());
		getWsConsumer().setRule(grammarAccess.lrWS());
		getAnyOtherConsumer().setRule(grammarAccess.lrANY_OTHER());


		getSequenceConsumer().setAdditionConsumer(getAdditionConsumer());

		getAdditionConsumer().setMultiplicationConsumer(getMultiplicationConsumer());

		getMultiplicationConsumer().setTermConsumer(getTermConsumer());

		getTermConsumer().setAtomConsumer(getAtomConsumer());
		getTermConsumer().setParensConsumer(getParensConsumer());

		getAtomConsumer().setIdConsumer(getIdConsumer());

		getParensConsumer().setAdditionConsumer(getAdditionConsumer());

		getAdditionConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.SimpleExpressionsTestLanguageDelimiters.keyword$20$Delimiter);
		getAdditionConsumer().setKeyword$10$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.SimpleExpressionsTestLanguageDelimiters.keyword$20$Delimiter);
		getMultiplicationConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.SimpleExpressionsTestLanguageDelimiters.keyword$20$Delimiter);
		getMultiplicationConsumer().setKeyword$10$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.SimpleExpressionsTestLanguageDelimiters.keyword$20$Delimiter);
		getAtomConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.SimpleExpressionsTestLanguageDelimiters.ruleCall$46$Delimiter);
		getParensConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.SimpleExpressionsTestLanguageDelimiters.keyword$20$Delimiter);
		getParensConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.SimpleExpressionsTestLanguageDelimiters.keyword$20$Delimiter);
	}
	
	// TODO collect superGrammars transitive
	public XtextBuiltinParserConfiguration getXtextBuiltinConfiguration() {
		return xtextBuiltinConfiguration;
	} 
	
    public SimpleExpressionsTestLanguageSequenceConsumer getSequenceConsumer() {
    	return sequenceConsumer;
    }

    public SimpleExpressionsTestLanguageAdditionConsumer getAdditionConsumer() {
    	return additionConsumer;
    }

    public SimpleExpressionsTestLanguageMultiplicationConsumer getMultiplicationConsumer() {
    	return multiplicationConsumer;
    }

    public SimpleExpressionsTestLanguageTermConsumer getTermConsumer() {
    	return termConsumer;
    }

    public SimpleExpressionsTestLanguageAtomConsumer getAtomConsumer() {
    	return atomConsumer;
    }

    public SimpleExpressionsTestLanguageParensConsumer getParensConsumer() {
    	return parensConsumer;
    }

    public XtextBuiltinIDConsumer getIdConsumer() {
    	return getXtextBuiltinConfiguration().getIdConsumer();
    }

    public XtextBuiltinINTConsumer getIntConsumer() {
    	return getXtextBuiltinConfiguration().getIntConsumer();
    }

    public XtextBuiltinSTRINGConsumer getStringConsumer() {
    	return getXtextBuiltinConfiguration().getStringConsumer();
    }

    public XtextBuiltinML_COMMENTConsumer getMlCommentConsumer() {
    	return getXtextBuiltinConfiguration().getMlCommentConsumer();
    }

    public XtextBuiltinSL_COMMENTConsumer getSlCommentConsumer() {
    	return getXtextBuiltinConfiguration().getSlCommentConsumer();
    }

    public XtextBuiltinWSConsumer getWsConsumer() {
    	return getXtextBuiltinConfiguration().getWsConsumer();
    }

    public XtextBuiltinANY_OTHERConsumer getAnyOtherConsumer() {
    	return getXtextBuiltinConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getXtextBuiltinConfiguration().getInitialHiddenTerminals();
	}
	
}
