/*
* generated by Xtext
*/
package org.eclipse.xtext.testlanguages.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.testlanguages.services.ContentAssistTestLanguageGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 
import org.eclipse.xtext.testlanguages.parser.packrat.consumers.ContentAssistTestLanguageStartConsumer;
import org.eclipse.xtext.testlanguages.parser.packrat.consumers.ContentAssistTestLanguageAbstractRuleConsumer;
import org.eclipse.xtext.testlanguages.parser.packrat.consumers.ContentAssistTestLanguageFirstAbstractRuleChildConsumer;
import org.eclipse.xtext.testlanguages.parser.packrat.consumers.ContentAssistTestLanguageSecondAbstractRuleChildConsumer;
import org.eclipse.xtext.testlanguages.parser.packrat.consumers.ContentAssistTestLanguageAbstractRuleCallConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class ContentAssistTestLanguageParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 
    private ContentAssistTestLanguageStartConsumer startConsumer;
    private ContentAssistTestLanguageAbstractRuleConsumer abstractRuleConsumer;
    private ContentAssistTestLanguageFirstAbstractRuleChildConsumer firstAbstractRuleChildConsumer;
    private ContentAssistTestLanguageSecondAbstractRuleChildConsumer secondAbstractRuleChildConsumer;
    private ContentAssistTestLanguageAbstractRuleCallConsumer abstractRuleCallConsumer;

	private ContentAssistTestLanguageGrammarAccess grammarAccess;

	public ContentAssistTestLanguageParserConfiguration(IInternalParserConfiguration configuration, ContentAssistTestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public ContentAssistTestLanguageStartConsumer getRootConsumer() {
		return startConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		startConsumer = new ContentAssistTestLanguageStartConsumer(
    		this, null
    	);
		abstractRuleConsumer = new ContentAssistTestLanguageAbstractRuleConsumer(
    		this, null
    	);
		firstAbstractRuleChildConsumer = new ContentAssistTestLanguageFirstAbstractRuleChildConsumer(
    		this, null
    	);
		secondAbstractRuleChildConsumer = new ContentAssistTestLanguageSecondAbstractRuleChildConsumer(
    		this, null
    	);
		abstractRuleCallConsumer = new ContentAssistTestLanguageAbstractRuleCallConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getStartConsumer().setRule(grammarAccess.getStartAccess());
		getAbstractRuleConsumer().setRule(grammarAccess.getAbstractRuleAccess());
		getFirstAbstractRuleChildConsumer().setRule(grammarAccess.getFirstAbstractRuleChildAccess());
		getSecondAbstractRuleChildConsumer().setRule(grammarAccess.getSecondAbstractRuleChildAccess());
		getAbstractRuleCallConsumer().setRule(grammarAccess.getAbstractRuleCallAccess());
		getIdConsumer().setRule(grammarAccess.getIDRule());
		getIntConsumer().setRule(grammarAccess.getINTRule());
		getStringConsumer().setRule(grammarAccess.getSTRINGRule());
		getMlCommentConsumer().setRule(grammarAccess.getML_COMMENTRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getAnyOtherConsumer().setRule(grammarAccess.getANY_OTHERRule());


		getStartConsumer().setAbstractRuleConsumer(getAbstractRuleConsumer());

		getAbstractRuleConsumer().setFirstAbstractRuleChildConsumer(getFirstAbstractRuleChildConsumer());
		getAbstractRuleConsumer().setSecondAbstractRuleChildConsumer(getSecondAbstractRuleChildConsumer());

		getFirstAbstractRuleChildConsumer().setAbstractRuleConsumer(getAbstractRuleConsumer());
		getFirstAbstractRuleChildConsumer().setIdConsumer(getIdConsumer());

		getSecondAbstractRuleChildConsumer().setAbstractRuleCallConsumer(getAbstractRuleCallConsumer());
		getSecondAbstractRuleChildConsumer().setIdConsumer(getIdConsumer());

		getAbstractRuleCallConsumer().setIdConsumer(getIdConsumer());

		getStartConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.ContentAssistTestLanguageDelimiters.keyword$4$Delimiter);
		getStartConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.ContentAssistTestLanguageDelimiters.keyword$4$Delimiter);
		getFirstAbstractRuleChildConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.ContentAssistTestLanguageDelimiters.keyword$18$Delimiter);
		getFirstAbstractRuleChildConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.ContentAssistTestLanguageDelimiters.keyword$18$Delimiter);
		getFirstAbstractRuleChildConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.ContentAssistTestLanguageDelimiters.keyword$18$Delimiter);
		getFirstAbstractRuleChildConsumer().setRuleCall$3$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.ContentAssistTestLanguageDelimiters.ruleCall$17$Delimiter);
		getSecondAbstractRuleChildConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.ContentAssistTestLanguageDelimiters.keyword$4$Delimiter);
		getSecondAbstractRuleChildConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.ContentAssistTestLanguageDelimiters.keyword$18$Delimiter);
		getSecondAbstractRuleChildConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.ContentAssistTestLanguageDelimiters.keyword$18$Delimiter);
		getSecondAbstractRuleChildConsumer().setRuleCall$3$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.ContentAssistTestLanguageDelimiters.ruleCall$17$Delimiter);
		getAbstractRuleCallConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.ContentAssistTestLanguageDelimiters.ruleCall$17$Delimiter);
	}
	
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public ContentAssistTestLanguageStartConsumer getStartConsumer() {
    	return startConsumer;
    }

    public ContentAssistTestLanguageAbstractRuleConsumer getAbstractRuleConsumer() {
    	return abstractRuleConsumer;
    }

    public ContentAssistTestLanguageFirstAbstractRuleChildConsumer getFirstAbstractRuleChildConsumer() {
    	return firstAbstractRuleChildConsumer;
    }

    public ContentAssistTestLanguageSecondAbstractRuleChildConsumer getSecondAbstractRuleChildConsumer() {
    	return secondAbstractRuleChildConsumer;
    }

    public ContentAssistTestLanguageAbstractRuleCallConsumer getAbstractRuleCallConsumer() {
    	return abstractRuleCallConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
