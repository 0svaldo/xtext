/*
* generated by Xtext
*/
package org.eclipse.xtext.testlanguages.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;

import org.eclipse.xtext.testlanguages.services.SimpleExpressionsTestLanguageGrammarAccess.MultiplicationElements;

public final class SimpleExpressionsTestLanguageMultiplicationConsumer extends NonTerminalConsumer {

	private MultiplicationElements rule;	

	private INonTerminalConsumer termConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer ruleCall$2$Consumer;

	private IElementConsumer group$3$Consumer;

	private IElementConsumer action$5$Consumer;

	private IElementConsumer assignment$7$Consumer;

	private IElementConsumer alternatives$8$Consumer;

	private IElementConsumer keyword$9$Consumer;

	private IElementConsumer keyword$10$Consumer;

	private IElementConsumer assignment$11$Consumer;

	private IElementConsumer ruleCall$12$Consumer;

	private ICharacterClass keyword$9$Delimiter;

	private ICharacterClass keyword$10$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(ruleCall$2$Consumer);
			acceptor.accept(group$3$Consumer);
		}
	}

	protected class RuleCall$2$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$2$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(termConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class Group$3$Consumer extends LoopGroupConsumer {
		
		protected Group$3$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(action$5$Consumer);
			acceptor.accept(assignment$7$Consumer);
			acceptor.accept(assignment$11$Consumer);
		}
	}

	protected class Action$5$Consumer extends ElementConsumer<Action> {
		
		protected Action$5$Consumer(final Action action) {
			super(action);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			consumeAction(getElement(), true);
			return SUCCESS;
		}
	}

	protected class Assignment$7$Consumer extends AssignmentConsumer {
		
		protected Assignment$7$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return alternatives$8$Consumer;
		}
	}

	protected class Alternatives$8$Consumer extends AlternativesConsumer {
		
		protected Alternatives$8$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$9$Consumer);
			acceptor.accept(keyword$10$Consumer);
		}
	}

	protected class Keyword$9$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$9$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "operator", false, false, getKeyword$9$Delimiter(), optional);
		}
	}

	protected class Keyword$10$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$10$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "operator", false, false, getKeyword$10$Delimiter(), optional);
		}
	}

	protected class Assignment$11$Consumer extends AssignmentConsumer {
		
		protected Assignment$11$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$12$Consumer;
		}
	}

	protected class RuleCall$12$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$12$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(termConsumer, "values", true, false, false, getElement(), optional);
		}
	}

	public SimpleExpressionsTestLanguageMultiplicationConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$9$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$10$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public MultiplicationElements getRule() {
		return rule;
	}
	
	public void setRule(MultiplicationElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		ruleCall$2$Consumer = new RuleCall$2$Consumer(rule.ele0ParserRuleCallTerm());
		group$3$Consumer = new Group$3$Consumer(rule.ele1Group());
		action$5$Consumer = new Action$5$Consumer(rule.ele100ActionOpvalues());
		assignment$7$Consumer = new Assignment$7$Consumer(rule.ele101AssignmentOperator());
		alternatives$8$Consumer = new Alternatives$8$Consumer(rule.ele1010Alternatives());
		keyword$9$Consumer = new Keyword$9$Consumer(rule.ele10100KeywordAsterisk());
		keyword$10$Consumer = new Keyword$10$Consumer(rule.ele10101KeywordSolidus());
		keyword$9$Consumer = new Keyword$9$Consumer(rule.ele10100KeywordAsterisk());
		keyword$10$Consumer = new Keyword$10$Consumer(rule.ele10101KeywordSolidus());
		assignment$11$Consumer = new Assignment$11$Consumer(rule.ele11AssignmentValues());
		ruleCall$12$Consumer = new RuleCall$12$Consumer(rule.ele110ParserRuleCallTerm());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setTermConsumer(INonTerminalConsumer termConsumer) {
		this.termConsumer = termConsumer;
	}
	
	public ICharacterClass getKeyword$9$Delimiter() {
		return keyword$9$Delimiter;
	}
	
	public void setKeyword$9$Delimiter(ICharacterClass characterClass) {
		keyword$9$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$10$Delimiter() {
		return keyword$10$Delimiter;
	}
	
	public void setKeyword$10$Delimiter(ICharacterClass characterClass) {
		keyword$10$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
