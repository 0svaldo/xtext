/*
* generated by Xtext
*/
package org.eclipse.xtext.testlanguages.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;

import org.eclipse.xtext.testlanguages.services.LookaheadTestLanguageGrammarAccess.AltsElements;

public final class LookaheadTestLanguageAltsConsumer extends NonTerminalConsumer {

	private AltsElements rule;	

	private INonTerminalConsumer lookAhead0Consumer;

	private INonTerminalConsumer lookAhead1Consumer;

	private INonTerminalConsumer lookAhead3Consumer;

	private IElementConsumer alternatives$1$Consumer;

	private IElementConsumer ruleCall$3$Consumer;

	private IElementConsumer ruleCall$4$Consumer;

	private IElementConsumer ruleCall$5$Consumer;

	protected class Alternatives$1$Consumer extends AlternativesConsumer {
		
		protected Alternatives$1$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(ruleCall$3$Consumer);
			acceptor.accept(ruleCall$4$Consumer);
			acceptor.accept(ruleCall$5$Consumer);
		}
	}

	protected class RuleCall$3$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$3$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(lookAhead0Consumer, null, false, false, false, getElement());
		}
	}

	protected class RuleCall$4$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$4$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(lookAhead1Consumer, null, false, false, false, getElement());
		}
	}

	protected class RuleCall$5$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$5$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(lookAhead3Consumer, null, false, false, false, getElement());
		}
	}

	public LookaheadTestLanguageAltsConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
	}
	
	@Override
	protected int doConsume() throws Exception {
		return alternatives$1$Consumer.consume();
	}

	public AltsElements getRule() {
		return rule;
	}
	
	public void setRule(AltsElements rule) {
		this.rule = rule;
		
		alternatives$1$Consumer = new Alternatives$1$Consumer(rule.eleAlternatives());
		ruleCall$3$Consumer = new RuleCall$3$Consumer(rule.ele00ParserRuleCallLookAhead0());
		ruleCall$4$Consumer = new RuleCall$4$Consumer(rule.ele01ParserRuleCallLookAhead1());
		ruleCall$5$Consumer = new RuleCall$5$Consumer(rule.ele1ParserRuleCallLookAhead3());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setLookAhead0Consumer(INonTerminalConsumer lookAhead0Consumer) {
		this.lookAhead0Consumer = lookAhead0Consumer;
	}
	
	public void setLookAhead1Consumer(INonTerminalConsumer lookAhead1Consumer) {
		this.lookAhead1Consumer = lookAhead1Consumer;
	}
	
	public void setLookAhead3Consumer(INonTerminalConsumer lookAhead3Consumer) {
		this.lookAhead3Consumer = lookAhead3Consumer;
	}
	
}
