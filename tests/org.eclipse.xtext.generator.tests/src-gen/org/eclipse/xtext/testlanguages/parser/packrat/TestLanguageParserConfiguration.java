/*
* generated by Xtext
*/
package org.eclipse.xtext.testlanguages.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.testlanguages.services.TestLanguageGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 

import org.eclipse.xtext.testlanguages.parser.packrat.consumers.TestLanguageEntryRuleConsumer;
import org.eclipse.xtext.testlanguages.parser.packrat.consumers.TestLanguageAbstractRuleConsumer;
import org.eclipse.xtext.testlanguages.parser.packrat.consumers.TestLanguageChoiceRuleConsumer;
import org.eclipse.xtext.testlanguages.parser.packrat.consumers.TestLanguageReducibleRuleConsumer;
import org.eclipse.xtext.testlanguages.parser.packrat.consumers.TestLanguageTerminalRuleConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class TestLanguageParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 

    private TestLanguageEntryRuleConsumer entryRuleConsumer;
    private TestLanguageAbstractRuleConsumer abstractRuleConsumer;
    private TestLanguageChoiceRuleConsumer choiceRuleConsumer;
    private TestLanguageReducibleRuleConsumer reducibleRuleConsumer;
    private TestLanguageTerminalRuleConsumer terminalRuleConsumer;

	private TestLanguageGrammarAccess grammarAccess;

	public TestLanguageParserConfiguration(IInternalParserConfiguration configuration, TestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public TestLanguageEntryRuleConsumer getRootConsumer() {
		return entryRuleConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		entryRuleConsumer = new TestLanguageEntryRuleConsumer(
    		this, null
    	);
		abstractRuleConsumer = new TestLanguageAbstractRuleConsumer(
    		this, null
    	);
		choiceRuleConsumer = new TestLanguageChoiceRuleConsumer(
    		this, null
    	);
		reducibleRuleConsumer = new TestLanguageReducibleRuleConsumer(
    		this, null
    	);
		terminalRuleConsumer = new TestLanguageTerminalRuleConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getEntryRuleConsumer().setRule(grammarAccess.prEntryRule());
		getAbstractRuleConsumer().setRule(grammarAccess.prAbstractRule());
		getChoiceRuleConsumer().setRule(grammarAccess.prChoiceRule());
		getReducibleRuleConsumer().setRule(grammarAccess.prReducibleRule());
		getTerminalRuleConsumer().setRule(grammarAccess.prTerminalRule());
		getIdConsumer().setRule(grammarAccess.prID());
		getIntConsumer().setRule(grammarAccess.prINT());
		getStringConsumer().setRule(grammarAccess.prSTRING());
		getMlCommentConsumer().setRule(grammarAccess.prML_COMMENT());
		getSlCommentConsumer().setRule(grammarAccess.prSL_COMMENT());
		getWsConsumer().setRule(grammarAccess.prWS());
		getAnyOtherConsumer().setRule(grammarAccess.prANY_OTHER());


		getEntryRuleConsumer().setAbstractRuleConsumer(getAbstractRuleConsumer());

		getAbstractRuleConsumer().setChoiceRuleConsumer(getChoiceRuleConsumer());
		getAbstractRuleConsumer().setReducibleRuleConsumer(getReducibleRuleConsumer());

		getChoiceRuleConsumer().setIdConsumer(getIdConsumer());

		getReducibleRuleConsumer().setTerminalRuleConsumer(getTerminalRuleConsumer());

		getTerminalRuleConsumer().setStringConsumer(getStringConsumer());

		getChoiceRuleConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.TestLanguageDelimiters.keyword$14$Delimiter);
		getChoiceRuleConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.TestLanguageDelimiters.keyword$14$Delimiter);
		getChoiceRuleConsumer().setRuleCall$7$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.TestLanguageDelimiters.ruleCall$18$Delimiter);
		getReducibleRuleConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.TestLanguageDelimiters.keyword$14$Delimiter);
		getTerminalRuleConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.testlanguages.parser.packrat.TestLanguageDelimiters.ruleCall$33$Delimiter);
	}
	
	// TODO collect superGrammars transitive
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public TestLanguageEntryRuleConsumer getEntryRuleConsumer() {
    	return entryRuleConsumer;
    }

    public TestLanguageAbstractRuleConsumer getAbstractRuleConsumer() {
    	return abstractRuleConsumer;
    }

    public TestLanguageChoiceRuleConsumer getChoiceRuleConsumer() {
    	return choiceRuleConsumer;
    }

    public TestLanguageReducibleRuleConsumer getReducibleRuleConsumer() {
    	return reducibleRuleConsumer;
    }

    public TestLanguageTerminalRuleConsumer getTerminalRuleConsumer() {
    	return terminalRuleConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
