/*
* generated by Xtext
*/
package org.eclipse.xtext.testlanguages.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;

import org.eclipse.xtext.AbstractRule;

import org.eclipse.xtext.parser.packrat.IMarkerFactory.IMarker;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ConsumeResult;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.testlanguages.services.PartialParserTestLanguageGrammarAccess.AbstractChildrenElements;

import org.eclipse.xtext.testlanguages.parser.packrat.consumers.PartialParserTestLanguageAbstractChildConsumer;

@SuppressWarnings("unused")
public final class PartialParserTestLanguageAbstractChildrenConsumer extends NonTerminalConsumer {

	private AbstractChildrenElements rule;
	
	private INonTerminalConsumer abstractChildConsumer;

	private ICharacterClass keyword$4$Delimiter;
	
	private ICharacterClass keyword$5$Delimiter;
	
	private ICharacterClass keyword$8$Delimiter;
	
	public PartialParserTestLanguageAbstractChildrenConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$4$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$5$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$8$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume(int entryPoint) throws Exception {
		return consumeGroup$1(entryPoint);
	}

	protected int consumeGroup$1(int entryPoint) throws Exception {
		int result = doConsumeGroup$1(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeGroup$1(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeGroup$1(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().eleGroup());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$4(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele000KeywordAbstractChildren());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$5(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele001KeywordLeftCurlyBracket());
					return result.getResult();
				}
			case 2:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$6(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele01AssignmentAbstractChildren());
					return result.getResult();
				}
			case 3:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$8(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele1KeywordRightCurlyBracket());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeKeyword$4(int entryPoint) throws Exception {
		int result = doConsumeKeyword$4(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$4(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$4(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele000KeywordAbstractChildren(), null, false, false, getKeyword$4$Delimiter());
	}

	protected int consumeKeyword$5(int entryPoint) throws Exception {
		int result = doConsumeKeyword$5(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$5(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$5(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele001KeywordLeftCurlyBracket(), null, false, false, getKeyword$5$Delimiter());
	}

	protected int consumeAssignment$6(int entryPoint) throws Exception {
		IMarker marker = mark();
		int result = ConsumeResult.SUCCESS;
		announceNextLevel();
		switch(entryPoint) {
			case -1:
				result = ConsumeResult.EMPTY_MATCH;
			case 0:
				announceNextStep();
				result = doConsumeAssignment$6(nextEntryPoint());
				while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
					result = doConsumeAssignment$6(nextEntryPoint());
				}
			case 1:
				if (result == ConsumeResult.SUCCESS) {
					marker.flush();
					announceNextStep();
					while(doConsumeAssignment$6(nextEntryPoint())==ConsumeResult.SUCCESS) {
						marker.flush();
					}
					marker.rollback();
					skipped(getRule().ele01AssignmentAbstractChildren());
					announceLevelFinished();
					return ConsumeResult.SUCCESS;
				}
				error("Could not find token.", getRule().ele01AssignmentAbstractChildren());
		}
		announceLevelFinished();
		marker.commit();
		return result;
	}

	protected int doConsumeAssignment$6(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele01AssignmentAbstractChildren());
		return result.getResult(consumeRuleCall$7(entryPoint));
	}

	protected int consumeRuleCall$7(int entryPoint) throws Exception {
		return consumeNonTerminal(abstractChildConsumer, "abstractChildren", true, false, false, getRule().ele010ParserRuleCallAbstractChild());
	}

	protected int consumeKeyword$8(int entryPoint) throws Exception {
		int result = doConsumeKeyword$8(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$8(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$8(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele1KeywordRightCurlyBracket(), null, false, false, getKeyword$8$Delimiter());
	}

	public AbstractChildrenElements getRule() {
		return rule;
	}
	
	public void setRule(AbstractChildrenElements rule) {
		this.rule = rule;
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setAbstractChildConsumer(INonTerminalConsumer abstractChildConsumer) {
		this.abstractChildConsumer = abstractChildConsumer;
	}
	
	public ICharacterClass getKeyword$4$Delimiter() {
		return keyword$4$Delimiter;
	}
	
	public void setKeyword$4$Delimiter(ICharacterClass characterClass) {
		keyword$4$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$5$Delimiter() {
		return keyword$5$Delimiter;
	}
	
	public void setKeyword$5$Delimiter(ICharacterClass characterClass) {
		keyword$5$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$8$Delimiter() {
		return keyword$8$Delimiter;
	}
	
	public void setKeyword$8$Delimiter(ICharacterClass characterClass) {
		keyword$8$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
