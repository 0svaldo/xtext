/*
* generated by Xtext
*/

package org.eclipse.xtext.lexer.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class BacktrackingLexerTestLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnumsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEnumsEnumNameEnumRuleCall_0_0 = (RuleCall)cEnumsAssignment_0.eContents().get(0);
		private final Assignment cAbsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAbsAbParserRuleCall_1_0 = (RuleCall)cAbsAssignment_1.eContents().get(0);
		private final Assignment cXbsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXbsXbParserRuleCall_2_0 = (RuleCall)cXbsAssignment_2.eContents().get(0);
		
		//Model:
		//  enums+=EnumName* abs+=Ab* xbs+=Xb*;
		public ParserRule getRule() { return rule; }

		//enums+=EnumName* abs+=Ab* xbs+=Xb*
		public Group getGroup() { return cGroup; }

		//enums+=EnumName*
		public Assignment getEnumsAssignment_0() { return cEnumsAssignment_0; }

		//EnumName
		public RuleCall getEnumsEnumNameEnumRuleCall_0_0() { return cEnumsEnumNameEnumRuleCall_0_0; }

		//abs+=Ab*
		public Assignment getAbsAssignment_1() { return cAbsAssignment_1; }

		//Ab
		public RuleCall getAbsAbParserRuleCall_1_0() { return cAbsAbParserRuleCall_1_0; }

		//xbs+=Xb*
		public Assignment getXbsAssignment_2() { return cXbsAssignment_2; }

		//Xb
		public RuleCall getXbsXbParserRuleCall_2_0() { return cXbsXbParserRuleCall_2_0; }
	}

	public class AbElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ab");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cXAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cXCharATerminalRuleCall_0_0 = (RuleCall)cXAssignment_0.eContents().get(0);
		private final Assignment cYAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cYCharbTerminalRuleCall_1_0 = (RuleCall)cYAssignment_1.eContents().get(0);
		
		//Ab:
		//  x=CharA y=Charb;
		public ParserRule getRule() { return rule; }

		//x=CharA y=Charb
		public Group getGroup() { return cGroup; }

		//x=CharA
		public Assignment getXAssignment_0() { return cXAssignment_0; }

		//CharA
		public RuleCall getXCharATerminalRuleCall_0_0() { return cXCharATerminalRuleCall_0_0; }

		//y=Charb
		public Assignment getYAssignment_1() { return cYAssignment_1; }

		//Charb
		public RuleCall getYCharbTerminalRuleCall_1_0() { return cYCharbTerminalRuleCall_1_0; }
	}

	public class XbElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Xb");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cXAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cXCharXTerminalRuleCall_0_0 = (RuleCall)cXAssignment_0.eContents().get(0);
		private final Assignment cYAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cYCharbTerminalRuleCall_1_0 = (RuleCall)cYAssignment_1.eContents().get(0);
		
		//Xb:
		//  x=CharX y=Charb;
		public ParserRule getRule() { return rule; }

		//x=CharX y=Charb
		public Group getGroup() { return cGroup; }

		//x=CharX
		public Assignment getXAssignment_0() { return cXAssignment_0; }

		//CharX
		public RuleCall getXCharXTerminalRuleCall_0_0() { return cXCharXTerminalRuleCall_0_0; }

		//y=Charb
		public Assignment getYAssignment_1() { return cYAssignment_1; }

		//Charb
		public RuleCall getYCharbTerminalRuleCall_1_0() { return cYCharbTerminalRuleCall_1_0; }
	}
	
	
	public class EnumNameElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EnumName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAbcEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAbcAbcKeyword_0_0 = (Keyword)cAbcEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEfgEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEfgEfgKeyword_1_0 = (Keyword)cEfgEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EnumName:
		//  abc="Abc" | efg="Efg";
		public EnumRule getRule() { return rule; }

		//abc="Abc" | efg="Efg"
		public Alternatives getAlternatives() { return cAlternatives; }

		//abc="Abc"
		public EnumLiteralDeclaration getAbcEnumLiteralDeclaration_0() { return cAbcEnumLiteralDeclaration_0; }

		//"Abc"
		public Keyword getAbcAbcKeyword_0_0() { return cAbcAbcKeyword_0_0; }

		//efg="Efg"
		public EnumLiteralDeclaration getEfgEnumLiteralDeclaration_1() { return cEfgEnumLiteralDeclaration_1; }

		//"Efg"
		public Keyword getEfgEfgKeyword_1_0() { return cEfgEfgKeyword_1_0; }
	}
	
	private ModelElements pModel;
	private AbElements pAb;
	private XbElements pXb;
	private TerminalRule tCharA;
	private TerminalRule tCharb;
	private TerminalRule tCharX;
	private EnumNameElements unknownRuleEnumName;
	private TerminalRule tWS;
	private TerminalRule tSL_COMMENT;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public BacktrackingLexerTestLanguageGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//Model:
	//  enums+=EnumName* abs+=Ab* xbs+=Xb*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Ab:
	//  x=CharA y=Charb;
	public AbElements getAbAccess() {
		return (pAb != null) ? pAb : (pAb = new AbElements());
	}
	
	public ParserRule getAbRule() {
		return getAbAccess().getRule();
	}

	//Xb:
	//  x=CharX y=Charb;
	public XbElements getXbAccess() {
		return (pXb != null) ? pXb : (pXb = new XbElements());
	}
	
	public ParserRule getXbRule() {
		return getXbAccess().getRule();
	}

	//terminal CharA:
	//  "A";
	public TerminalRule getCharARule() {
		return (tCharA != null) ? tCharA : (tCharA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CharA"));
	} 

	//terminal Charb:
	//  "b";
	public TerminalRule getCharbRule() {
		return (tCharb != null) ? tCharb : (tCharb = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Charb"));
	} 

	//terminal CharX:
	//  "X";
	public TerminalRule getCharXRule() {
		return (tCharX != null) ? tCharX : (tCharX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CharX"));
	} 

	//enum EnumName:
	//  abc="Abc" | efg="Efg";
	public EnumNameElements getEnumNameAccess() {
		return (unknownRuleEnumName != null) ? unknownRuleEnumName : (unknownRuleEnumName = new EnumNameElements());
	}
	
	public EnumRule getEnumNameRule() {
		return getEnumNameAccess().getRule();
	}

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 
}
