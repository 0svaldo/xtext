
/*
* generated by Xtext
*/
lexer grammar InternalBacktrackingLexerTestLanguage;

options {
	backtrack=true;
	memoize=true;
}

@header {
package org.eclipse.xtext.lexer.parser.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@members {
	@Override
	public InternalBacktrackingLexerTestLanguageLexer getNewInstance(CharStream stream) {
		return new InternalBacktrackingLexerTestLanguageLexer(stream);
	}
}



SYNTHETIC_ALL_KEYWORDS :

	(FRAGMENT_KEYWORD_1)=> FRAGMENT_KEYWORD_1 {$type = KEYWORD_1; } |

	(FRAGMENT_KEYWORD_2)=> FRAGMENT_KEYWORD_2 {$type = KEYWORD_2; } |
	(FRAGMENT_RULE_CHARA)=> FRAGMENT_RULE_CHARA {$type = RULE_CHARA; } |
	(FRAGMENT_RULE_CHARB)=> FRAGMENT_RULE_CHARB {$type = RULE_CHARB; } |
	(FRAGMENT_RULE_CHARX)=> FRAGMENT_RULE_CHARX {$type = RULE_CHARX; } |
	(FRAGMENT_RULE_WS)=> FRAGMENT_RULE_WS {$type = RULE_WS; } |
	(FRAGMENT_RULE_SL_COMMENT)=> FRAGMENT_RULE_SL_COMMENT {$type = RULE_SL_COMMENT; } ;

fragment KEYWORD_1 : 'Abc';
fragment FRAGMENT_KEYWORD_1 : 'Abc';

fragment KEYWORD_2 : 'Efg';
fragment FRAGMENT_KEYWORD_2 : 'Efg';



fragment RULE_CHARA : ;
fragment FRAGMENT_RULE_CHARA : 'A';

fragment RULE_CHARB : ;
fragment FRAGMENT_RULE_CHARB : 'b';

fragment RULE_CHARX : ;
fragment FRAGMENT_RULE_CHARX : 'X';

fragment RULE_WS : ;
fragment FRAGMENT_RULE_WS : (' '|'\t'|'\r'|'\n')+;

fragment RULE_SL_COMMENT : ;
fragment FRAGMENT_RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;



