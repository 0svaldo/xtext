/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.transientvalues.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.parsetree.transientvalues.services.TransientValuesTestGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 
import org.eclipse.xtext.parsetree.transientvalues.parser.packrat.consumers.TransientValuesTestRootConsumer;
import org.eclipse.xtext.parsetree.transientvalues.parser.packrat.consumers.TransientValuesTestTestRequiredConsumer;
import org.eclipse.xtext.parsetree.transientvalues.parser.packrat.consumers.TransientValuesTestTestOptionalConsumer;
import org.eclipse.xtext.parsetree.transientvalues.parser.packrat.consumers.TransientValuesTestTestListConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class TransientValuesTestParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 
    private TransientValuesTestRootConsumer rootConsumer;
    private TransientValuesTestTestRequiredConsumer testRequiredConsumer;
    private TransientValuesTestTestOptionalConsumer testOptionalConsumer;
    private TransientValuesTestTestListConsumer testListConsumer;

	private TransientValuesTestGrammarAccess grammarAccess;

	public TransientValuesTestParserConfiguration(IInternalParserConfiguration configuration, TransientValuesTestGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public TransientValuesTestRootConsumer getRootConsumer() {
		return rootConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		rootConsumer = new TransientValuesTestRootConsumer(
    		this, null
    	);
		testRequiredConsumer = new TransientValuesTestTestRequiredConsumer(
    		this, null
    	);
		testOptionalConsumer = new TransientValuesTestTestOptionalConsumer(
    		this, null
    	);
		testListConsumer = new TransientValuesTestTestListConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getRootConsumer().setRule(grammarAccess.getRootAccess());
		getTestRequiredConsumer().setRule(grammarAccess.getTestRequiredAccess());
		getTestOptionalConsumer().setRule(grammarAccess.getTestOptionalAccess());
		getTestListConsumer().setRule(grammarAccess.getTestListAccess());
		getIdConsumer().setRule(grammarAccess.getIDRule());
		getIntConsumer().setRule(grammarAccess.getINTRule());
		getStringConsumer().setRule(grammarAccess.getSTRINGRule());
		getMlCommentConsumer().setRule(grammarAccess.getML_COMMENTRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getAnyOtherConsumer().setRule(grammarAccess.getANY_OTHERRule());


		getRootConsumer$().setTestListConsumer(getTestListConsumer());
		getRootConsumer$().setTestOptionalConsumer(getTestOptionalConsumer());
		getRootConsumer$().setTestRequiredConsumer(getTestRequiredConsumer());

		getTestRequiredConsumer().setIntConsumer(getIntConsumer());

		getTestOptionalConsumer().setIntConsumer(getIntConsumer());

		getTestListConsumer().setIntConsumer(getIntConsumer());

		getRootConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.transientvalues.parser.packrat.TransientValuesTestDelimiters.keyword$4$Delimiter);
		getTestRequiredConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.transientvalues.parser.packrat.TransientValuesTestDelimiters.keyword$4$Delimiter);
		getTestRequiredConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parsetree.transientvalues.parser.packrat.TransientValuesTestDelimiters.ruleCall$14$Delimiter);
		getTestRequiredConsumer().setRuleCall$6$Delimiter(org.eclipse.xtext.parsetree.transientvalues.parser.packrat.TransientValuesTestDelimiters.ruleCall$14$Delimiter);
		getTestOptionalConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.transientvalues.parser.packrat.TransientValuesTestDelimiters.keyword$4$Delimiter);
		getTestOptionalConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.parsetree.transientvalues.parser.packrat.TransientValuesTestDelimiters.keyword$24$Delimiter);
		getTestOptionalConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parsetree.transientvalues.parser.packrat.TransientValuesTestDelimiters.ruleCall$14$Delimiter);
		getTestOptionalConsumer().setRuleCall$8$Delimiter(org.eclipse.xtext.parsetree.transientvalues.parser.packrat.TransientValuesTestDelimiters.ruleCall$14$Delimiter);
		getTestListConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.transientvalues.parser.packrat.TransientValuesTestDelimiters.keyword$4$Delimiter);
		getTestListConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parsetree.transientvalues.parser.packrat.TransientValuesTestDelimiters.ruleCall$14$Delimiter);
	}
	
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
	public TransientValuesTestRootConsumer getRootConsumer$() {
    	return rootConsumer;
    }

    public TransientValuesTestTestRequiredConsumer getTestRequiredConsumer() {
    	return testRequiredConsumer;
    }

    public TransientValuesTestTestOptionalConsumer getTestOptionalConsumer() {
    	return testOptionalConsumer;
    }

    public TransientValuesTestTestListConsumer getTestListConsumer() {
    	return testListConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
