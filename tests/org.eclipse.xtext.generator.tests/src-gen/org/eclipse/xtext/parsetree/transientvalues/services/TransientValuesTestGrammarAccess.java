/*
* generated by Xtext
*/

package org.eclipse.xtext.parsetree.transientvalues.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TransientValuesTestGrammarAccess implements IGrammarAccess {
	
	
	public class RootElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordTest = (Keyword)cGroup.eContents().get(0);
		private final Alternatives c1Alternatives = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallTestRequired = (RuleCall)c1Alternatives.eContents().get(0);
		private final RuleCall c11ParserRuleCallTestOptional = (RuleCall)c1Alternatives.eContents().get(1);
		private final RuleCall c12ParserRuleCallTestList = (RuleCall)c1Alternatives.eContents().get(2);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordTest() { return c0KeywordTest; }

		// not supported
		public Alternatives ele1Alternatives() { return c1Alternatives; }

		// not supported
		public RuleCall ele10ParserRuleCallTestRequired() { return c10ParserRuleCallTestRequired; }

		// not supported
		public RuleCall ele11ParserRuleCallTestOptional() { return c11ParserRuleCallTestOptional; }

		// not supported
		public RuleCall ele12ParserRuleCallTestList() { return c12ParserRuleCallTestList; }
	}

	public class TestRequiredElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestRequired");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordRequired = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentRequired1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallINT = (RuleCall)c1AssignmentRequired1.eContents().get(0);
		private final Assignment c2AssignmentRequired2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall c20TerminalRuleCallINT = (RuleCall)c2AssignmentRequired2.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordRequired() { return c0KeywordRequired; }

		// not supported
		public Assignment ele1AssignmentRequired1() { return c1AssignmentRequired1; }

		// not supported
		public RuleCall ele10TerminalRuleCallINT() { return c10TerminalRuleCallINT; }

		// not supported
		public Assignment ele2AssignmentRequired2() { return c2AssignmentRequired2; }

		// not supported
		public RuleCall ele20TerminalRuleCallINT() { return c20TerminalRuleCallINT; }
	}

	public class TestOptionalElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestOptional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordOptional = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentOpt1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallINT = (RuleCall)c1AssignmentOpt1.eContents().get(0);
		private final Group c2Group = (Group)cGroup.eContents().get(2);
		private final Keyword c20KeywordColon = (Keyword)c2Group.eContents().get(0);
		private final Assignment c21AssignmentOpt2 = (Assignment)c2Group.eContents().get(1);
		private final RuleCall c210TerminalRuleCallINT = (RuleCall)c21AssignmentOpt2.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordOptional() { return c0KeywordOptional; }

		// not supported
		public Assignment ele1AssignmentOpt1() { return c1AssignmentOpt1; }

		// not supported
		public RuleCall ele10TerminalRuleCallINT() { return c10TerminalRuleCallINT; }

		// not supported
		public Group ele2Group() { return c2Group; }

		// not supported
		public Keyword ele20KeywordColon() { return c20KeywordColon; }

		// not supported
		public Assignment ele21AssignmentOpt2() { return c21AssignmentOpt2; }

		// not supported
		public RuleCall ele210TerminalRuleCallINT() { return c210TerminalRuleCallINT; }
	}

	public class TestListElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordList = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentItem = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallINT = (RuleCall)c1AssignmentItem.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordList() { return c0KeywordList; }

		// not supported
		public Assignment ele1AssignmentItem() { return c1AssignmentItem; }

		// not supported
		public RuleCall ele10TerminalRuleCallINT() { return c10TerminalRuleCallINT; }
	}
	
	private RootElements pRoot;
	private TestRequiredElements pTestRequired;
	private TestOptionalElements pTestOptional;
	private TestListElements pTestList;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess terminalsGrammarAccess;

	@Inject
	public TransientValuesTestGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess terminalsGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.terminalsGrammarAccess = terminalsGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return terminalsGrammarAccess;
	}

	
	// not supported
	public RootElements prRoot() {
		return (pRoot != null) ? pRoot : (pRoot = new RootElements());
	} 

	// not supported
	public TestRequiredElements prTestRequired() {
		return (pTestRequired != null) ? pTestRequired : (pTestRequired = new TestRequiredElements());
	} 

	// not supported
	public TestOptionalElements prTestOptional() {
		return (pTestOptional != null) ? pTestOptional : (pTestOptional = new TestOptionalElements());
	} 

	// not supported
	public TestListElements prTestList() {
		return (pTestList != null) ? pTestList : (pTestList = new TestListElements());
	} 

	// not supported
	public TerminalRule trID() {
		return terminalsGrammarAccess.trID();
	} 

	// not supported
	public TerminalRule trINT() {
		return terminalsGrammarAccess.trINT();
	} 

	// not supported
	public TerminalRule trSTRING() {
		return terminalsGrammarAccess.trSTRING();
	} 

	// not supported
	public TerminalRule trML_COMMENT() {
		return terminalsGrammarAccess.trML_COMMENT();
	} 

	// not supported
	public TerminalRule trSL_COMMENT() {
		return terminalsGrammarAccess.trSL_COMMENT();
	} 

	// not supported
	public TerminalRule trWS() {
		return terminalsGrammarAccess.trWS();
	} 

	// not supported
	public TerminalRule trANY_OTHER() {
		return terminalsGrammarAccess.trANY_OTHER();
	} 
}
