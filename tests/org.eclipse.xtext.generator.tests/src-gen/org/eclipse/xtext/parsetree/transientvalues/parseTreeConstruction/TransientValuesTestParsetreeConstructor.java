/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.transientvalues.parseTreeConstruction;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;
import org.eclipse.xtext.parsetree.transientvalues.services.TransientValuesTestGrammarAccess;

import com.google.inject.Inject;

public class TransientValuesTestParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private TransientValuesTestGrammarAccess grammarAccess;
	
	@Override
	protected Solution internalSerialize(EObject obj) {
		IInstanceDescription inst = getDescr(obj);
		Solution s;
		if(inst.isInstanceOf(grammarAccess.prRoot().getRule().getType().getClassifier()) && (s = new Root_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prTestRequired().getRule().getType().getClassifier()) && (s = new TestRequired_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prTestOptional().getRule().getType().getClassifier()) && (s = new TestOptional_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prTestList().getRule().getType().getClassifier()) && (s = new TestList_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		return null;
	}
	

/************ begin Rule Root ****************
 *
 * not supported
 *
 **/


// not supported
protected class Root_Group extends GroupToken {
	
	public Root_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prRoot().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Root_1_Alternatives(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Root_0_Keyword_test(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class Root_0_Keyword_test extends KeywordToken  {
	
	public Root_0_Keyword_test(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prRoot().ele0KeywordTest();
	}	
}

// not supported
protected class Root_1_Alternatives extends AlternativesToken {

	public Root_1_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.prRoot().ele1Alternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new Root_1_0_RuleCall_TestRequired(current, this);
			case 1: return new Root_1_1_RuleCall_TestOptional(current, this);
			case 2: return new Root_1_2_RuleCall_TestList(current, this);
			default: return null;
		}
	}
}

// not supported
protected class Root_1_0_RuleCall_TestRequired extends RuleCallToken {
	
	public Root_1_0_RuleCall_TestRequired(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.prRoot().ele10ParserRuleCallTestRequired();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(TestRequired_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.prTestRequired().getRule().getType().getClassifier())) return null;
		return new TestRequired_Group(current, this).firstSolution();
	}
}

// not supported
protected class Root_1_1_RuleCall_TestOptional extends RuleCallToken {
	
	public Root_1_1_RuleCall_TestOptional(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.prRoot().ele11ParserRuleCallTestOptional();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(TestOptional_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.prTestOptional().getRule().getType().getClassifier())) return null;
		return new TestOptional_Group(current, this).firstSolution();
	}
}

// not supported
protected class Root_1_2_RuleCall_TestList extends RuleCallToken {
	
	public Root_1_2_RuleCall_TestList(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.prRoot().ele12ParserRuleCallTestList();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(TestList_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.prTestList().getRule().getType().getClassifier())) return null;
		return new TestList_Group(current, this).firstSolution();
	}
}



/************ end Rule Root ****************/


/************ begin Rule TestRequired ****************
 *
 * not supported
 *
 **/


// not supported
protected class TestRequired_Group extends GroupToken {
	
	public TestRequired_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prTestRequired().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TestRequired_2_Assignment_required2(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TestRequired_1_Assignment_required1(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new TestRequired_0_Keyword_required(s2.getCurrent(), s2.getPredecessor()).firstSolution();
			if(s3 != null) {
				last = s3.getPredecessor();
				return s3;
			} else {
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class TestRequired_0_Keyword_required extends KeywordToken  {
	
	public TestRequired_0_Keyword_required(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prTestRequired().ele0KeywordRequired();
	}	
}

// not supported
protected class TestRequired_1_Assignment_required1 extends AssignmentToken  {
	
	public TestRequired_1_Assignment_required1(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prTestRequired().ele1AssignmentRequired1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("required1",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("required1");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prTestRequired().ele10TerminalRuleCallINT();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class TestRequired_2_Assignment_required2 extends AssignmentToken  {
	
	public TestRequired_2_Assignment_required2(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prTestRequired().ele2AssignmentRequired2();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("required2",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("required2");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prTestRequired().ele20TerminalRuleCallINT();
			return new Solution(obj);
		}
		return null;
	}
}


/************ end Rule TestRequired ****************/


/************ begin Rule TestOptional ****************
 *
 * not supported
 *
 **/


// not supported
protected class TestOptional_Group extends GroupToken {
	
	public TestOptional_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prTestOptional().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TestOptional_2_Group(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TestOptional_1_Assignment_opt1(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new TestOptional_0_Keyword_optional(s2.getCurrent(), s2.getPredecessor()).firstSolution();
			if(s3 != null) {
				last = s3.getPredecessor();
				return s3;
			} else {
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class TestOptional_0_Keyword_optional extends KeywordToken  {
	
	public TestOptional_0_Keyword_optional(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prTestOptional().ele0KeywordOptional();
	}	
}

// not supported
protected class TestOptional_1_Assignment_opt1 extends AssignmentToken  {
	
	public TestOptional_1_Assignment_opt1(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prTestOptional().ele1AssignmentOpt1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("opt1",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("opt1");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prTestOptional().ele10TerminalRuleCallINT();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class TestOptional_2_Group extends GroupToken {
	
	public TestOptional_2_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prTestOptional().ele2Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TestOptional_2_1_Assignment_opt2(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TestOptional_2_0_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class TestOptional_2_0_Keyword extends KeywordToken  {
	
	public TestOptional_2_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prTestOptional().ele20KeywordColon();
	}	
}

// not supported
protected class TestOptional_2_1_Assignment_opt2 extends AssignmentToken  {
	
	public TestOptional_2_1_Assignment_opt2(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prTestOptional().ele21AssignmentOpt2();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("opt2",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("opt2");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prTestOptional().ele210TerminalRuleCallINT();
			return new Solution(obj);
		}
		return null;
	}
}



/************ end Rule TestOptional ****************/


/************ begin Rule TestList ****************
 *
 * not supported
 *
 **/


// not supported
protected class TestList_Group extends GroupToken {
	
	public TestList_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prTestList().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TestList_1_Assignment_item(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TestList_0_Keyword_list(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class TestList_0_Keyword_list extends KeywordToken  {
	
	public TestList_0_Keyword_list(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prTestList().ele0KeywordList();
	}	
}

// not supported
protected class TestList_1_Assignment_item extends AssignmentToken  {
	
	public TestList_1_Assignment_item(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prTestList().ele1AssignmentItem();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("item",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("item");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prTestList().ele10TerminalRuleCallINT();
			return new Solution(obj);
		}
		return null;
	}
}


/************ end Rule TestList ****************/

}
