/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.transientvalues.parseTreeConstruction;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor2;

import org.eclipse.xtext.parsetree.transientvalues.services.TransientValuesTestGrammarAccess;

import com.google.inject.Inject;

public class TransientValuesTestParsetreeConstructor extends AbstractParseTreeConstructor2 {
		
	@Inject
	private TransientValuesTestGrammarAccess grammarAccess;
		
	public TransientValuesTestGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken2 getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_Group(this, this, 0, inst);
			case 1: return new TestRequired_Group(this, this, 1, inst);
			case 2: return new TestOptional_Group(this, this, 2, inst);
			case 3: return new TestList_Group(this, this, 3, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Root ****************
 *
 * Root:
 *   "test" (TestRequired|TestOptional|TestList);
 *
 **/

// "test" (TestRequired|TestOptional|TestList)
protected class Root_Group extends GroupToken {
	
	public Root_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRootAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRootRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "test"
protected class Root_TestKeyword_0 extends KeywordToken  {
	
	public Root_TestKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRootAccess().getTestKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// TestRequired|TestOptional|TestList
protected class Root_Alternatives_1 extends AlternativesToken {

	public Root_Alternatives_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getRootAccess().getAlternatives_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_TestRequiredParserRuleCall_1_0(parent, this, 0, inst);
			case 1: return new Root_TestOptionalParserRuleCall_1_1(parent, this, 1, inst);
			case 2: return new Root_TestListParserRuleCall_1_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// TestRequired
protected class Root_TestRequiredParserRuleCall_1_0 extends RuleCallToken {
	
	public Root_TestRequiredParserRuleCall_1_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRootAccess().getTestRequiredParserRuleCall_1_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TestRequired_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(TestRequired_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTestRequiredRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_TestKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// TestOptional
protected class Root_TestOptionalParserRuleCall_1_1 extends RuleCallToken {
	
	public Root_TestOptionalParserRuleCall_1_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRootAccess().getTestOptionalParserRuleCall_1_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TestOptional_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(TestOptional_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTestOptionalRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_TestKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// TestList
protected class Root_TestListParserRuleCall_1_2 extends RuleCallToken {
	
	public Root_TestListParserRuleCall_1_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRootAccess().getTestListParserRuleCall_1_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TestList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(TestList_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTestListRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_TestKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}



/************ end Rule Root ****************/


/************ begin Rule TestRequired ****************
 *
 * TestRequired:
 *   "required" required1=INT required2=INT;
 *
 **/

// "required" required1=INT required2=INT
protected class TestRequired_Group extends GroupToken {
	
	public TestRequired_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTestRequiredAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TestRequired_Required2Assignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTestRequiredRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "required"
protected class TestRequired_RequiredKeyword_0 extends KeywordToken  {
	
	public TestRequired_RequiredKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTestRequiredAccess().getRequiredKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// required1=INT
protected class TestRequired_Required1Assignment_1 extends AssignmentToken  {
	
	public TestRequired_Required1Assignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTestRequiredAccess().getRequired1Assignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TestRequired_RequiredKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("required1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("required1");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTestRequiredAccess().getRequired1INTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// required2=INT
protected class TestRequired_Required2Assignment_2 extends AssignmentToken  {
	
	public TestRequired_Required2Assignment_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTestRequiredAccess().getRequired2Assignment_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TestRequired_Required1Assignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("required2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("required2");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTestRequiredAccess().getRequired2INTTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule TestRequired ****************/


/************ begin Rule TestOptional ****************
 *
 * TestOptional:
 *   "optional" opt1=INT? (":" opt2=INT)?;
 *
 **/

// "optional" opt1=INT? (":" opt2=INT)?
protected class TestOptional_Group extends GroupToken {
	
	public TestOptional_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTestOptionalAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TestOptional_Group_2(parent, this, 0, inst);
			case 1: return new TestOptional_Opt1Assignment_1(parent, this, 1, inst);
			case 2: return new TestOptional_OptionalKeyword_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTestOptionalRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "optional"
protected class TestOptional_OptionalKeyword_0 extends KeywordToken  {
	
	public TestOptional_OptionalKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTestOptionalAccess().getOptionalKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// opt1=INT?
protected class TestOptional_Opt1Assignment_1 extends AssignmentToken  {
	
	public TestOptional_Opt1Assignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTestOptionalAccess().getOpt1Assignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TestOptional_OptionalKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("opt1",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("opt1");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTestOptionalAccess().getOpt1INTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// (":" opt2=INT)?
protected class TestOptional_Group_2 extends GroupToken {
	
	public TestOptional_Group_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTestOptionalAccess().getGroup_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TestOptional_Opt2Assignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ":"
protected class TestOptional_ColonKeyword_2_0 extends KeywordToken  {
	
	public TestOptional_ColonKeyword_2_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTestOptionalAccess().getColonKeyword_2_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TestOptional_Opt1Assignment_1(parent, this, 0, inst);
			case 1: return new TestOptional_OptionalKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// opt2=INT
protected class TestOptional_Opt2Assignment_2_1 extends AssignmentToken  {
	
	public TestOptional_Opt2Assignment_2_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTestOptionalAccess().getOpt2Assignment_2_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TestOptional_ColonKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("opt2",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("opt2");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTestOptionalAccess().getOpt2INTTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule TestOptional ****************/


/************ begin Rule TestList ****************
 *
 * TestList:
 *   "list" item+=INT*;
 *
 **/

// "list" item+=INT*
protected class TestList_Group extends GroupToken {
	
	public TestList_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTestListAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TestList_ItemAssignment_1(parent, this, 0, inst);
			case 1: return new TestList_ListKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTestListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "list"
protected class TestList_ListKeyword_0 extends KeywordToken  {
	
	public TestList_ListKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTestListAccess().getListKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// item+=INT*
protected class TestList_ItemAssignment_1 extends AssignmentToken  {
	
	public TestList_ItemAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTestListAccess().getItemAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TestList_ItemAssignment_1(parent, this, 0, inst);
			case 1: return new TestList_ListKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("item",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("item");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTestListAccess().getItemINTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule TestList ****************/

}
