/*
* generated by Xtext
*/
grammar InternalFormatterTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.parsetree.formatter.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parsetree.formatter.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.parsetree.formatter.services.FormatterTestLanguageGrammarAccess;

}

@parser::members {
 
 	private FormatterTestLanguageGrammarAccess grammarAccess;
 	
    public InternalFormatterTestLanguageParser(TokenStream input, IAstFactory factory, FormatterTestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/xtext/parsetree/formatter/parser/antlr/internal/InternalFormatterTestLanguage.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Root";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRoot
entryRuleRoot returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRootRule(), currentNode); }
	 iv_ruleRoot=ruleRoot 
	 { $current=$iv_ruleRoot.current; } 
	 EOF 
;

// Rule Root
ruleRoot returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('test' 
    {
        createLeafNode(grammarAccess.getRootAccess().getTestKeyword_0(), null); 
    }
(
    { 
        currentNode=createCompositeNode(grammarAccess.getRootAccess().getTestLinewrapParserRuleCall_1_0(), currentNode); 
    }
    this_TestLinewrap_1=ruleTestLinewrap
    { 
        $current = $this_TestLinewrap_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getRootAccess().getTestIndentationParserRuleCall_1_1(), currentNode); 
    }
    this_TestIndentation_2=ruleTestIndentation
    { 
        $current = $this_TestIndentation_2.current; 
        currentNode = currentNode.getParent();
    }
));





// Entry rule entryRuleLine
entryRuleLine returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLineRule(), currentNode); }
	 iv_ruleLine=ruleLine 
	 { $current=$iv_ruleLine.current; } 
	 EOF 
;

// Rule Line
ruleLine returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        currentNode=createCompositeNode(grammarAccess.getLineAccess().getDeclParserRuleCall_0_0(), currentNode); 
    }
    this_Decl_0=ruleDecl
    { 
        $current = $this_Decl_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLineAccess().getAssignParserRuleCall_0_1(), currentNode); 
    }
    this_Assign_1=ruleAssign
    { 
        $current = $this_Assign_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLineAccess().getMethParserRuleCall_0_2(), currentNode); 
    }
    this_Meth_2=ruleMeth
    { 
        $current = $this_Meth_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLineAccess().getFqnObjParserRuleCall_0_3(), currentNode); 
    }
    this_FqnObj_3=ruleFqnObj
    { 
        $current = $this_FqnObj_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLineAccess().getFqnRefParserRuleCall_0_4(), currentNode); 
    }
    this_FqnRef_4=ruleFqnRef
    { 
        $current = $this_FqnRef_4.current; 
        currentNode = currentNode.getParent();
    }
)';' 
    {
        createLeafNode(grammarAccess.getLineAccess().getSemicolonKeyword_1(), null); 
    }
);





// Entry rule entryRuleDecl
entryRuleDecl returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDeclRule(), currentNode); }
	 iv_ruleDecl=ruleDecl 
	 { $current=$iv_ruleDecl.current; } 
	 EOF 
;

// Rule Decl
ruleDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_type_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getDeclAccess().getTypeIDTerminalRuleCall_0_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"type",
	        		lv_type_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getDeclAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
));





// Entry rule entryRuleAssign
entryRuleAssign returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAssignRule(), currentNode); }
	 iv_ruleAssign=ruleAssign 
	 { $current=$iv_ruleAssign.current; } 
	 EOF 
;

// Rule Assign
ruleAssign returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_var_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAssignAccess().getVarIDTerminalRuleCall_0_0(), "var"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"var",
	        		lv_var_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
(
		lv_op_1_1='=' 
    {
        createLeafNode(grammarAccess.getAssignAccess().getOpEqualsSignKeyword_1_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_1_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_1_2='+=' 
    {
        createLeafNode(grammarAccess.getAssignAccess().getOpPlusSignEqualsSignKeyword_1_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_1_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)'[' 
    {
        createLeafNode(grammarAccess.getAssignAccess().getLeftSquareBracketKeyword_2(), null); 
    }
((
(
		lv_val_3_0=RULE_INT
		{
			createLeafNode(grammarAccess.getAssignAccess().getValINTTerminalRuleCall_3_0_0(), "val"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"val",
	        		lv_val_3_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(',' 
    {
        createLeafNode(grammarAccess.getAssignAccess().getCommaKeyword_3_1_0(), null); 
    }
(
(
		lv_val_5_0=RULE_INT
		{
			createLeafNode(grammarAccess.getAssignAccess().getValINTTerminalRuleCall_3_1_1_0(), "val"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"val",
	        		lv_val_5_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))*)?']' 
    {
        createLeafNode(grammarAccess.getAssignAccess().getRightSquareBracketKeyword_4(), null); 
    }
);





// Entry rule entryRuleMeth
entryRuleMeth returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getMethRule(), currentNode); }
	 iv_ruleMeth=ruleMeth 
	 { $current=$iv_ruleMeth.current; } 
	 EOF 
;

// Rule Meth
ruleMeth returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('void' 
    {
        createLeafNode(grammarAccess.getMethAccess().getVoidKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getMethAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)'(' 
    {
        createLeafNode(grammarAccess.getMethAccess().getLeftParenthesisKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethAccess().getParamParamParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_param_3_0=ruleParam		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"param",
	        		lv_param_3_0, 
	        		"Param", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(',' 
    {
        createLeafNode(grammarAccess.getMethAccess().getCommaKeyword_3_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethAccess().getParamParamParserRuleCall_3_1_1_0(), currentNode); 
	    }
		lv_param_5_0=ruleParam		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"param",
	        		lv_param_5_0, 
	        		"Param", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?')' 
    {
        createLeafNode(grammarAccess.getMethAccess().getRightParenthesisKeyword_4(), null); 
    }
);





// Entry rule entryRuleParam
entryRuleParam returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getParamRule(), currentNode); }
	 iv_ruleParam=ruleParam 
	 { $current=$iv_ruleParam.current; } 
	 EOF 
;

// Rule Param
ruleParam returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getParamAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParamRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)':' 
    {
        createLeafNode(grammarAccess.getParamAccess().getColonKeyword_1(), null); 
    }
(
(
		lv_type_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getParamAccess().getTypeIDTerminalRuleCall_2_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParamRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
));





// Entry rule entryRuleTestLinewrap
entryRuleTestLinewrap returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTestLinewrapRule(), currentNode); }
	 iv_ruleTestLinewrap=ruleTestLinewrap 
	 { $current=$iv_ruleTestLinewrap.current; } 
	 EOF 
;

// Rule TestLinewrap
ruleTestLinewrap returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('linewrap' 
    {
        createLeafNode(grammarAccess.getTestLinewrapAccess().getLinewrapKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTestLinewrapAccess().getItemsLineParserRuleCall_1_0(), currentNode); 
	    }
		lv_items_1_0=ruleLine		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTestLinewrapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"items",
	        		lv_items_1_0, 
	        		"Line", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*);





// Entry rule entryRuleTestIndentation
entryRuleTestIndentation returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTestIndentationRule(), currentNode); }
	 iv_ruleTestIndentation=ruleTestIndentation 
	 { $current=$iv_ruleTestIndentation.current; } 
	 EOF 
;

// Rule TestIndentation
ruleTestIndentation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('indentation' 
    {
        createLeafNode(grammarAccess.getTestIndentationAccess().getIndentationKeyword_0(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getTestIndentationAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTestIndentationAccess().getSubTestIndentationParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_sub_2_0=ruleTestIndentation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTestIndentationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"sub",
	        		lv_sub_2_0, 
	        		"TestIndentation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTestIndentationAccess().getItemsLineParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_items_3_0=ruleLine		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTestIndentationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"items",
	        		lv_items_3_0, 
	        		"Line", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*'}' 
    {
        createLeafNode(grammarAccess.getTestIndentationAccess().getRightCurlyBracketKeyword_3(), null); 
    }
(
(
		lv_semi_5_0=';' 
    {
        createLeafNode(grammarAccess.getTestIndentationAccess().getSemiSemicolonKeyword_4_0(), "semi"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTestIndentationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "semi", true, ";", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?);





// Entry rule entryRuleFqnObj
entryRuleFqnObj returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFqnObjRule(), currentNode); }
	 iv_ruleFqnObj=ruleFqnObj 
	 { $current=$iv_ruleFqnObj.current; } 
	 EOF 
;

// Rule FqnObj
ruleFqnObj returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('fqn' 
    {
        createLeafNode(grammarAccess.getFqnObjAccess().getFqnKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFqnObjAccess().getNameFQNParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleFQN		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFqnObjRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"FQN", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
));





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFQNRule(), currentNode); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0(), null); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getFQNAccess().getFullStopKeyword_1_0(), null); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    createLeafNode(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1(), null); 
    }
)*)
    ;





// Entry rule entryRuleFqnRef
entryRuleFqnRef returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFqnRefRule(), currentNode); }
	 iv_ruleFqnRef=ruleFqnRef 
	 { $current=$iv_ruleFqnRef.current; } 
	 EOF 
;

// Rule FqnRef
ruleFqnRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('fqnref' 
    {
        createLeafNode(grammarAccess.getFqnRefAccess().getFqnrefKeyword_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getFqnRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFqnRefAccess().getRefFqnObjCrossReference_1_0(), currentNode); 
	    }
		ruleFQN		{ 
	        currentNode = currentNode.getParent();
	    }

)
));





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


