/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.formatter.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor2;

import org.eclipse.xtext.parsetree.formatter.services.FormatterTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class FormatterTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor2 {
		
	@Inject
	private FormatterTestLanguageGrammarAccess grammarAccess;
		
	public FormatterTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken2 getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_Group(this, this, 0, inst);
			case 1: return new Line_Group(this, this, 1, inst);
			case 2: return new TestLinewrap_Group(this, this, 2, inst);
			case 3: return new TestIndentation_Group(this, this, 3, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Root ****************
 *
 * Root:
 *   "test" (TestLinewrap|TestIndentation);
 *
 **/

// "test" (TestLinewrap|TestIndentation)
protected class Root_Group extends GroupToken {
	
	public Root_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRootAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRootRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "test"
protected class Root_TestKeyword_0 extends KeywordToken  {
	
	public Root_TestKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRootAccess().getTestKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// TestLinewrap|TestIndentation
protected class Root_Alternatives_1 extends AlternativesToken {

	public Root_Alternatives_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getRootAccess().getAlternatives_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_TestLinewrapParserRuleCall_1_0(parent, this, 0, inst);
			case 1: return new Root_TestIndentationParserRuleCall_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// TestLinewrap
protected class Root_TestLinewrapParserRuleCall_1_0 extends RuleCallToken {
	
	public Root_TestLinewrapParserRuleCall_1_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRootAccess().getTestLinewrapParserRuleCall_1_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TestLinewrap_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(TestLinewrap_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTestLinewrapRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_TestKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// TestIndentation
protected class Root_TestIndentationParserRuleCall_1_1 extends RuleCallToken {
	
	public Root_TestIndentationParserRuleCall_1_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getRootAccess().getTestIndentationParserRuleCall_1_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TestIndentation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(TestIndentation_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTestIndentationRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_TestKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}



/************ end Rule Root ****************/


/************ begin Rule Line ****************
 *
 * Line:
 *   type+=ID name+=ID ";";
 *
 **/

// type+=ID name+=ID ";"
protected class Line_Group extends GroupToken {
	
	public Line_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLineAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Line_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLineRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// type+=ID
protected class Line_TypeAssignment_0 extends AssignmentToken  {
	
	public Line_TypeAssignment_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLineAccess().getTypeAssignment_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLineAccess().getTypeIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// name+=ID
protected class Line_NameAssignment_1 extends AssignmentToken  {
	
	public Line_NameAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLineAccess().getNameAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Line_TypeAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLineAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Line_SemicolonKeyword_2 extends KeywordToken  {
	
	public Line_SemicolonKeyword_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLineAccess().getSemicolonKeyword_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Line_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Line ****************/


/************ begin Rule TestLinewrap ****************
 *
 * TestLinewrap:
 *   "linewrap" items+=Line*;
 *
 **/

// "linewrap" items+=Line*
protected class TestLinewrap_Group extends GroupToken {
	
	public TestLinewrap_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTestLinewrapAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TestLinewrap_ItemsAssignment_1(parent, this, 0, inst);
			case 1: return new TestLinewrap_LinewrapKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTestLinewrapRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "linewrap"
protected class TestLinewrap_LinewrapKeyword_0 extends KeywordToken  {
	
	public TestLinewrap_LinewrapKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTestLinewrapAccess().getLinewrapKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// items+=Line*
protected class TestLinewrap_ItemsAssignment_1 extends AssignmentToken  {
	
	public TestLinewrap_ItemsAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTestLinewrapAccess().getItemsAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Line_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("items",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("items");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLineRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTestLinewrapAccess().getItemsLineParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TestLinewrap_ItemsAssignment_1(parent, next, actIndex, consumed);
			case 1: return new TestLinewrap_LinewrapKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule TestLinewrap ****************/


/************ begin Rule TestIndentation ****************
 *
 * TestIndentation:
 *   "indentation" "{" (sub+=TestIndentation|items+=Line)* "}";
 *
 **/

// "indentation" "{" (sub+=TestIndentation|items+=Line)* "}"
protected class TestIndentation_Group extends GroupToken {
	
	public TestIndentation_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTestIndentationAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TestIndentation_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTestIndentationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "indentation"
protected class TestIndentation_IndentationKeyword_0 extends KeywordToken  {
	
	public TestIndentation_IndentationKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTestIndentationAccess().getIndentationKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "{"
protected class TestIndentation_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public TestIndentation_LeftCurlyBracketKeyword_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTestIndentationAccess().getLeftCurlyBracketKeyword_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TestIndentation_IndentationKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (sub+=TestIndentation|items+=Line)*
protected class TestIndentation_Alternatives_2 extends AlternativesToken {

	public TestIndentation_Alternatives_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getTestIndentationAccess().getAlternatives_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TestIndentation_SubAssignment_2_0(parent, this, 0, inst);
			case 1: return new TestIndentation_ItemsAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// sub+=TestIndentation
protected class TestIndentation_SubAssignment_2_0 extends AssignmentToken  {
	
	public TestIndentation_SubAssignment_2_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTestIndentationAccess().getSubAssignment_2_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TestIndentation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sub",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sub");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTestIndentationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTestIndentationAccess().getSubTestIndentationParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TestIndentation_Alternatives_2(parent, next, actIndex, consumed);
			case 1: return new TestIndentation_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// items+=Line
protected class TestIndentation_ItemsAssignment_2_1 extends AssignmentToken  {
	
	public TestIndentation_ItemsAssignment_2_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTestIndentationAccess().getItemsAssignment_2_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Line_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("items",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("items");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLineRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTestIndentationAccess().getItemsLineParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TestIndentation_Alternatives_2(parent, next, actIndex, consumed);
			case 1: return new TestIndentation_LeftCurlyBracketKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class TestIndentation_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public TestIndentation_RightCurlyBracketKeyword_3(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTestIndentationAccess().getRightCurlyBracketKeyword_3();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TestIndentation_Alternatives_2(parent, this, 0, inst);
			case 1: return new TestIndentation_LeftCurlyBracketKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule TestIndentation ****************/

}
