/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.formatter.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.parsetree.formatter.services.FormatterTestLanguageGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 

import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.FormatterTestLanguageRootConsumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.FormatterTestLanguageLineConsumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.FormatterTestLanguageTestLinewrapConsumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.FormatterTestLanguageTestIndentationConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class FormatterTestLanguageParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 

    private FormatterTestLanguageRootConsumer rootConsumer;
    private FormatterTestLanguageLineConsumer lineConsumer;
    private FormatterTestLanguageTestLinewrapConsumer testLinewrapConsumer;
    private FormatterTestLanguageTestIndentationConsumer testIndentationConsumer;

	private FormatterTestLanguageGrammarAccess grammarAccess;

	public FormatterTestLanguageParserConfiguration(IInternalParserConfiguration configuration, FormatterTestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public FormatterTestLanguageRootConsumer getRootConsumer() {
		return rootConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		rootConsumer = new FormatterTestLanguageRootConsumer(
    		this, null
    	);
		lineConsumer = new FormatterTestLanguageLineConsumer(
    		this, null
    	);
		testLinewrapConsumer = new FormatterTestLanguageTestLinewrapConsumer(
    		this, null
    	);
		testIndentationConsumer = new FormatterTestLanguageTestIndentationConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getRootConsumer().setRule(grammarAccess.prRoot());
		getLineConsumer().setRule(grammarAccess.prLine());
		getTestLinewrapConsumer().setRule(grammarAccess.prTestLinewrap());
		getTestIndentationConsumer().setRule(grammarAccess.prTestIndentation());
		getIdConsumer().setRule(grammarAccess.prID());
		getIntConsumer().setRule(grammarAccess.prINT());
		getStringConsumer().setRule(grammarAccess.prSTRING());
		getMlCommentConsumer().setRule(grammarAccess.prML_COMMENT());
		getSlCommentConsumer().setRule(grammarAccess.prSL_COMMENT());
		getWsConsumer().setRule(grammarAccess.prWS());
		getAnyOtherConsumer().setRule(grammarAccess.prANY_OTHER());


		getRootConsumer$().setTestIndentationConsumer(getTestIndentationConsumer());
		getRootConsumer$().setTestLinewrapConsumer(getTestLinewrapConsumer());

		getLineConsumer().setIdConsumer(getIdConsumer());

		getTestLinewrapConsumer().setLineConsumer(getLineConsumer());

		getTestIndentationConsumer().setLineConsumer(getLineConsumer());
		getTestIndentationConsumer().setTestIndentationConsumer(getTestIndentationConsumer());

		getRootConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$4$Delimiter);
		getLineConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$16$Delimiter);
		getLineConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.ruleCall$13$Delimiter);
		getLineConsumer().setRuleCall$6$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.ruleCall$13$Delimiter);
		getTestLinewrapConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$4$Delimiter);
		getTestIndentationConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$4$Delimiter);
		getTestIndentationConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$16$Delimiter);
		getTestIndentationConsumer().setKeyword$11$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$16$Delimiter);
	}
	
	// TODO collect superGrammars transitive
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
	public FormatterTestLanguageRootConsumer getRootConsumer$() {
    	return rootConsumer;
    }

    public FormatterTestLanguageLineConsumer getLineConsumer() {
    	return lineConsumer;
    }

    public FormatterTestLanguageTestLinewrapConsumer getTestLinewrapConsumer() {
    	return testLinewrapConsumer;
    }

    public FormatterTestLanguageTestIndentationConsumer getTestIndentationConsumer() {
    	return testIndentationConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
