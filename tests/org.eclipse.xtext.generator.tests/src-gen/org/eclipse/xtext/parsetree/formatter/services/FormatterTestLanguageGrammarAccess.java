/*
* generated by Xtext
*/

package org.eclipse.xtext.parsetree.formatter.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FormatterTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class RootElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordTest = (Keyword)cGroup.eContents().get(0);
		private final Alternatives c1Alternatives = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallTestLinewrap = (RuleCall)c1Alternatives.eContents().get(0);
		private final RuleCall c11ParserRuleCallTestIndentation = (RuleCall)c1Alternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordTest() { return c0KeywordTest; }

		// not supported
		public Alternatives ele1Alternatives() { return c1Alternatives; }

		// not supported
		public RuleCall ele10ParserRuleCallTestLinewrap() { return c10ParserRuleCallTestLinewrap; }

		// not supported
		public RuleCall ele11ParserRuleCallTestIndentation() { return c11ParserRuleCallTestIndentation; }
	}

	public class LineElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment c0AssignmentType = (Assignment)cGroup.eContents().get(0);
		private final RuleCall c00TerminalRuleCallID = (RuleCall)c0AssignmentType.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallID = (RuleCall)c1AssignmentName.eContents().get(0);
		private final Keyword c2KeywordSemicolon = (Keyword)cGroup.eContents().get(2);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Assignment ele0AssignmentType() { return c0AssignmentType; }

		// not supported
		public RuleCall ele00TerminalRuleCallID() { return c00TerminalRuleCallID; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10TerminalRuleCallID() { return c10TerminalRuleCallID; }

		// not supported
		public Keyword ele2KeywordSemicolon() { return c2KeywordSemicolon; }
	}

	public class TestLinewrapElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestLinewrap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordLinewrap = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentItems = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallLine = (RuleCall)c1AssignmentItems.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordLinewrap() { return c0KeywordLinewrap; }

		// not supported
		public Assignment ele1AssignmentItems() { return c1AssignmentItems; }

		// not supported
		public RuleCall ele10ParserRuleCallLine() { return c10ParserRuleCallLine; }
	}

	public class TestIndentationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestIndentation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordIndentation = (Keyword)cGroup.eContents().get(0);
		private final Keyword c1KeywordLeftCurlyBracket = (Keyword)cGroup.eContents().get(1);
		private final Alternatives c2Alternatives = (Alternatives)cGroup.eContents().get(2);
		private final Assignment c20AssignmentSub = (Assignment)c2Alternatives.eContents().get(0);
		private final RuleCall c200ParserRuleCallTestIndentation = (RuleCall)c20AssignmentSub.eContents().get(0);
		private final Assignment c21AssignmentItems = (Assignment)c2Alternatives.eContents().get(1);
		private final RuleCall c210ParserRuleCallLine = (RuleCall)c21AssignmentItems.eContents().get(0);
		private final Keyword c3KeywordRightCurlyBracket = (Keyword)cGroup.eContents().get(3);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordIndentation() { return c0KeywordIndentation; }

		// not supported
		public Keyword ele1KeywordLeftCurlyBracket() { return c1KeywordLeftCurlyBracket; }

		// not supported
		public Alternatives ele2Alternatives() { return c2Alternatives; }

		// not supported
		public Assignment ele20AssignmentSub() { return c20AssignmentSub; }

		// not supported
		public RuleCall ele200ParserRuleCallTestIndentation() { return c200ParserRuleCallTestIndentation; }

		// not supported
		public Assignment ele21AssignmentItems() { return c21AssignmentItems; }

		// not supported
		public RuleCall ele210ParserRuleCallLine() { return c210ParserRuleCallLine; }

		// not supported
		public Keyword ele3KeywordRightCurlyBracket() { return c3KeywordRightCurlyBracket; }
	}
	
	private RootElements pRoot;
	private LineElements pLine;
	private TestLinewrapElements pTestLinewrap;
	private TestIndentationElements pTestIndentation;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess terminalsGrammarAccess;

	@Inject
	public FormatterTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess terminalsGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.terminalsGrammarAccess = terminalsGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return terminalsGrammarAccess;
	}

	
	// not supported
	public RootElements prRoot() {
		return (pRoot != null) ? pRoot : (pRoot = new RootElements());
	} 

	// not supported
	public LineElements prLine() {
		return (pLine != null) ? pLine : (pLine = new LineElements());
	} 

	// not supported
	public TestLinewrapElements prTestLinewrap() {
		return (pTestLinewrap != null) ? pTestLinewrap : (pTestLinewrap = new TestLinewrapElements());
	} 

	// not supported
	public TestIndentationElements prTestIndentation() {
		return (pTestIndentation != null) ? pTestIndentation : (pTestIndentation = new TestIndentationElements());
	} 

	// not supported
	public TerminalRule trID() {
		return terminalsGrammarAccess.trID();
	} 

	// not supported
	public TerminalRule trINT() {
		return terminalsGrammarAccess.trINT();
	} 

	// not supported
	public TerminalRule trSTRING() {
		return terminalsGrammarAccess.trSTRING();
	} 

	// not supported
	public TerminalRule trML_COMMENT() {
		return terminalsGrammarAccess.trML_COMMENT();
	} 

	// not supported
	public TerminalRule trSL_COMMENT() {
		return terminalsGrammarAccess.trSL_COMMENT();
	} 

	// not supported
	public TerminalRule trWS() {
		return terminalsGrammarAccess.trWS();
	} 

	// not supported
	public TerminalRule trANY_OTHER() {
		return terminalsGrammarAccess.trANY_OTHER();
	} 
}
