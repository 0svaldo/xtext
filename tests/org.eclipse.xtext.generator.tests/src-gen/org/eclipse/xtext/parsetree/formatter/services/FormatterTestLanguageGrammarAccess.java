/*
* generated by Xtext
*/

package org.eclipse.xtext.parsetree.formatter.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FormatterTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class RootElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordTest = (Keyword)cGroup.eContents().get(0);
		private final Alternatives c1Alternatives = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallTestLinewrap = (RuleCall)c1Alternatives.eContents().get(0);
		private final RuleCall c11ParserRuleCallTestIndentation = (RuleCall)c1Alternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordTest() { return c0KeywordTest; }

		// not supported
		public Alternatives ele1Alternatives() { return c1Alternatives; }

		// not supported
		public RuleCall ele10ParserRuleCallTestLinewrap() { return c10ParserRuleCallTestLinewrap; }

		// not supported
		public RuleCall ele11ParserRuleCallTestIndentation() { return c11ParserRuleCallTestIndentation; }
	}

	public class LineElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Assignment c00AssignmentType = (Assignment)c0Group.eContents().get(0);
		private final RuleCall c000TerminalRuleCallID = (RuleCall)c00AssignmentType.eContents().get(0);
		private final Assignment c01AssignmentName = (Assignment)c0Group.eContents().get(1);
		private final RuleCall c010TerminalRuleCallID = (RuleCall)c01AssignmentName.eContents().get(0);
		private final Keyword c1KeywordSemicolon = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Assignment ele00AssignmentType() { return c00AssignmentType; }

		// not supported
		public RuleCall ele000TerminalRuleCallID() { return c000TerminalRuleCallID; }

		// not supported
		public Assignment ele01AssignmentName() { return c01AssignmentName; }

		// not supported
		public RuleCall ele010TerminalRuleCallID() { return c010TerminalRuleCallID; }

		// not supported
		public Keyword ele1KeywordSemicolon() { return c1KeywordSemicolon; }
	}

	public class TestLinewrapElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestLinewrap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordLinewrap = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentItems = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallLine = (RuleCall)c1AssignmentItems.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordLinewrap() { return c0KeywordLinewrap; }

		// not supported
		public Assignment ele1AssignmentItems() { return c1AssignmentItems; }

		// not supported
		public RuleCall ele10ParserRuleCallLine() { return c10ParserRuleCallLine; }
	}

	public class TestIndentationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestIndentation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Keyword c000KeywordIndentation = (Keyword)c00Group.eContents().get(0);
		private final Keyword c001KeywordLeftCurlyBracket = (Keyword)c00Group.eContents().get(1);
		private final Alternatives c01Alternatives = (Alternatives)c0Group.eContents().get(1);
		private final Assignment c010AssignmentSub = (Assignment)c01Alternatives.eContents().get(0);
		private final RuleCall c0100ParserRuleCallTestIndentation = (RuleCall)c010AssignmentSub.eContents().get(0);
		private final Assignment c011AssignmentItems = (Assignment)c01Alternatives.eContents().get(1);
		private final RuleCall c0110ParserRuleCallLine = (RuleCall)c011AssignmentItems.eContents().get(0);
		private final Keyword c1KeywordRightCurlyBracket = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Keyword ele000KeywordIndentation() { return c000KeywordIndentation; }

		// not supported
		public Keyword ele001KeywordLeftCurlyBracket() { return c001KeywordLeftCurlyBracket; }

		// not supported
		public Alternatives ele01Alternatives() { return c01Alternatives; }

		// not supported
		public Assignment ele010AssignmentSub() { return c010AssignmentSub; }

		// not supported
		public RuleCall ele0100ParserRuleCallTestIndentation() { return c0100ParserRuleCallTestIndentation; }

		// not supported
		public Assignment ele011AssignmentItems() { return c011AssignmentItems; }

		// not supported
		public RuleCall ele0110ParserRuleCallLine() { return c0110ParserRuleCallLine; }

		// not supported
		public Keyword ele1KeywordRightCurlyBracket() { return c1KeywordRightCurlyBracket; }
	}
	
	private RootElements pRoot;
	private LineElements pLine;
	private TestLinewrapElements pTestLinewrap;
	private TestIndentationElements pTestIndentation;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess superGrammarAccess;

	@Inject
	public FormatterTestLanguageGrammarAccess(GrammarProvider grammarProvider, TerminalsGrammarAccess superGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.superGrammarAccess = superGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getSuperGrammarAccess() {
		return superGrammarAccess;
	}

	
	// not supported
	public RootElements prRoot() {
		return (pRoot != null) ? pRoot : (pRoot = new RootElements());
	} 

	// not supported
	public LineElements prLine() {
		return (pLine != null) ? pLine : (pLine = new LineElements());
	} 

	// not supported
	public TestLinewrapElements prTestLinewrap() {
		return (pTestLinewrap != null) ? pTestLinewrap : (pTestLinewrap = new TestLinewrapElements());
	} 

	// not supported
	public TestIndentationElements prTestIndentation() {
		return (pTestIndentation != null) ? pTestIndentation : (pTestIndentation = new TestIndentationElements());
	} 

	// not supported
	public TerminalRule trID() {
		return superGrammarAccess.trID();
	} 

	// not supported
	public TerminalRule trINT() {
		return superGrammarAccess.trINT();
	} 

	// not supported
	public TerminalRule trSTRING() {
		return superGrammarAccess.trSTRING();
	} 

	// not supported
	public TerminalRule trML_COMMENT() {
		return superGrammarAccess.trML_COMMENT();
	} 

	// not supported
	public TerminalRule trSL_COMMENT() {
		return superGrammarAccess.trSL_COMMENT();
	} 

	// not supported
	public TerminalRule trWS() {
		return superGrammarAccess.trWS();
	} 

	// not supported
	public TerminalRule trANY_OTHER() {
		return superGrammarAccess.trANY_OTHER();
	} 
}
