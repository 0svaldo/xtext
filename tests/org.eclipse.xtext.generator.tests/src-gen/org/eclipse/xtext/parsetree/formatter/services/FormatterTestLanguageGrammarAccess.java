/*
* generated by Xtext
*/

package org.eclipse.xtext.parsetree.formatter.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FormatterTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class RootElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cTestLinewrapParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cTestIndentationParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//Root:
		//  "test" (TestLinewrap|TestIndentation);
		public ParserRule getRule() { return rule; }

		//"test" (TestLinewrap|TestIndentation)
		public Group getGroup() { return cGroup; }

		//"test"
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }

		//TestLinewrap|TestIndentation
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//TestLinewrap
		public RuleCall getTestLinewrapParserRuleCall_1_0() { return cTestLinewrapParserRuleCall_1_0; }

		//TestIndentation
		public RuleCall getTestIndentationParserRuleCall_1_1() { return cTestIndentationParserRuleCall_1_1; }
	}

	public class LineElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Line:
		//  type+=ID name+=ID ";";
		public ParserRule getRule() { return rule; }

		//type+=ID name+=ID ";"
		public Group getGroup() { return cGroup; }

		//type+=ID
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_0_0() { return cTypeIDTerminalRuleCall_0_0; }

		//name+=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class TestLinewrapElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestLinewrap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinewrapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemsLineParserRuleCall_1_0 = (RuleCall)cItemsAssignment_1.eContents().get(0);
		
		//TestLinewrap:
		//  "linewrap" items+=Line*;
		public ParserRule getRule() { return rule; }

		//"linewrap" items+=Line*
		public Group getGroup() { return cGroup; }

		//"linewrap"
		public Keyword getLinewrapKeyword_0() { return cLinewrapKeyword_0; }

		//items+=Line*
		public Assignment getItemsAssignment_1() { return cItemsAssignment_1; }

		//Line
		public RuleCall getItemsLineParserRuleCall_1_0() { return cItemsLineParserRuleCall_1_0; }
	}

	public class TestIndentationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestIndentation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIndentationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSubAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cSubTestIndentationParserRuleCall_2_0_0 = (RuleCall)cSubAssignment_2_0.eContents().get(0);
		private final Assignment cItemsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cItemsLineParserRuleCall_2_1_0 = (RuleCall)cItemsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TestIndentation:
		//  "indentation" "{" (sub+=TestIndentation|items+=Line)* "}";
		public ParserRule getRule() { return rule; }

		//"indentation" "{" (sub+=TestIndentation|items+=Line)* "}"
		public Group getGroup() { return cGroup; }

		//"indentation"
		public Keyword getIndentationKeyword_0() { return cIndentationKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(sub+=TestIndentation|items+=Line)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//sub+=TestIndentation
		public Assignment getSubAssignment_2_0() { return cSubAssignment_2_0; }

		//TestIndentation
		public RuleCall getSubTestIndentationParserRuleCall_2_0_0() { return cSubTestIndentationParserRuleCall_2_0_0; }

		//items+=Line
		public Assignment getItemsAssignment_2_1() { return cItemsAssignment_2_1; }

		//Line
		public RuleCall getItemsLineParserRuleCall_2_1_0() { return cItemsLineParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	
	
	private RootElements pRoot;
	private LineElements pLine;
	private TestLinewrapElements pTestLinewrap;
	private TestIndentationElements pTestIndentation;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public FormatterTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Root:
	//  "test" (TestLinewrap|TestIndentation);
	public RootElements getRootAccess() {
		return (pRoot != null) ? pRoot : (pRoot = new RootElements());
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//Line:
	//  type+=ID name+=ID ";";
	public LineElements getLineAccess() {
		return (pLine != null) ? pLine : (pLine = new LineElements());
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}

	//TestLinewrap:
	//  "linewrap" items+=Line*;
	public TestLinewrapElements getTestLinewrapAccess() {
		return (pTestLinewrap != null) ? pTestLinewrap : (pTestLinewrap = new TestLinewrapElements());
	}
	
	public ParserRule getTestLinewrapRule() {
		return getTestLinewrapAccess().getRule();
	}

	//TestIndentation:
	//  "indentation" "{" (sub+=TestIndentation|items+=Line)* "}";
	public TestIndentationElements getTestIndentationAccess() {
		return (pTestIndentation != null) ? pTestIndentation : (pTestIndentation = new TestIndentationElements());
	}
	
	public ParserRule getTestIndentationRule() {
		return getTestIndentationAccess().getRule();
	}

	//terminal ID:
	//  "^" ? ( "a" .. "z" | "A" .. "Z" | "_" ) ( "a" .. "z" | "A" .. "Z" | "_" | "0" .. "9" ) *;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0" .. "9" +;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ( "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" ) | ! ( "\\" | "\"" ) ) * "\"" | "\'" ( "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" ) | ! ( "\\" | "\'" ) ) * "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *" -> "* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" ! ( "\n" | "\r" ) * ( "\r" ? "\n" ) ?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  ( " " | "\t" | "\r" | "\n" ) +;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
