/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;

import org.eclipse.xtext.AbstractRule;

import org.eclipse.xtext.parser.packrat.IMarkerFactory.IMarker;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ConsumeResult;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.parsetree.reconstr.services.ComplexReconstrTestLanguageGrammarAccess.TrickyCElements;

import org.eclipse.xtext.builtin.parser.packrat.consumers.XtextBuiltinIDConsumer;

@SuppressWarnings("unused")
public final class ComplexReconstrTestLanguageTrickyCConsumer extends NonTerminalConsumer {

	private TrickyCElements rule;
	
	private ITerminalConsumer idConsumer;

	private ICharacterClass keyword$19$Delimiter;
	
	private ICharacterClass keyword$5$Delimiter;
	
	private ICharacterClass keyword$11$Delimiter;
	
	private ICharacterClass keyword$15$Delimiter;
	
	private ISequenceMatcher ruleCall$7$Delimiter;
	
	public ComplexReconstrTestLanguageTrickyCConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$19$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$5$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$11$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$15$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$7$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume(int entryPoint) throws Exception {
		return consumeGroup$1(entryPoint);
	}

	protected int consumeGroup$1(int entryPoint) throws Exception {
		int result = doConsumeGroup$1(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeGroup$1(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeGroup$1(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().eleGroup());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$5(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0000KeywordTC());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$6(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0001AssignmentName());
					return result.getResult();
				}
			case 2:
				result.nextStep();
				if (result.didGroupFail(consumeGroup$8(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele001Group());
					return result.getResult();
				}
			case 3:
				result.nextStep();
				if (result.didGroupFail(consumeGroup$12(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele01Group());
					return result.getResult();
				}
			case 4:
				result.nextStep();
				if (result.didGroupFail(consumeGroup$16(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele1Group());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeKeyword$5(int entryPoint) throws Exception {
		int result = doConsumeKeyword$5(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$5(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$5(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele0000KeywordTC(), null, false, false, getKeyword$5$Delimiter());
	}

	protected int consumeAssignment$6(int entryPoint) throws Exception {
		int result = doConsumeAssignment$6(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$6(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$6(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele0001AssignmentName());
		return result.getResult(consumeRuleCall$7(entryPoint));
	}

	protected int consumeRuleCall$7(int entryPoint) throws Exception {
		return consumeTerminal(idConsumer, "name", false, false, getRule().ele00010LexerRuleCallID(), getRuleCall$7$Delimiter());
	}

	protected int consumeGroup$8(int entryPoint) throws Exception {
		IMarker marker = mark();
		int result = doConsumeGroup$8(entryPoint);
		if (result != ConsumeResult.SUCCESS) {
			marker.rollback();
			skipped(getRule().ele001Group());
		} else
			marker.commit();
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeGroup$8(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().ele001Group());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeAction$9(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0010ActionC1x());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$11(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0011KeywordX());
					return result.getResult();
				}
		}
		return result.getResult();
	}
	protected int consumeAction$9(int entryPoint) {
		consumeAction(getRule().ele0010ActionC1x(), false);
		return ConsumeResult.SUCCESS;	
	}

	protected int consumeKeyword$11(int entryPoint) throws Exception {
		int result = doConsumeKeyword$11(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$11(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$11(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele0011KeywordX(), null, false, false, getKeyword$11$Delimiter());
	}

	protected int consumeGroup$12(int entryPoint) throws Exception {
		IMarker marker = mark();
		int result = doConsumeGroup$12(entryPoint);
		if (result != ConsumeResult.SUCCESS) {
			marker.rollback();
			skipped(getRule().ele01Group());
		} else
			marker.commit();
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeGroup$12(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().ele01Group());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeAction$13(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele010ActionC2y());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$15(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele011KeywordY());
					return result.getResult();
				}
		}
		return result.getResult();
	}
	protected int consumeAction$13(int entryPoint) {
		consumeAction(getRule().ele010ActionC2y(), false);
		return ConsumeResult.SUCCESS;	
	}

	protected int consumeKeyword$15(int entryPoint) throws Exception {
		int result = doConsumeKeyword$15(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$15(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$15(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele011KeywordY(), null, false, false, getKeyword$15$Delimiter());
	}

	protected int consumeGroup$16(int entryPoint) throws Exception {
		IMarker marker = mark();
		int result = doConsumeGroup$16(entryPoint);
		if (result != ConsumeResult.SUCCESS) {
			marker.rollback();
			skipped(getRule().ele1Group());
		} else
			marker.commit();
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeGroup$16(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().ele1Group());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeAction$17(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele10ActionC3z());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$19(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele11KeywordZ());
					return result.getResult();
				}
		}
		return result.getResult();
	}
	protected int consumeAction$17(int entryPoint) {
		consumeAction(getRule().ele10ActionC3z(), false);
		return ConsumeResult.SUCCESS;	
	}

	protected int consumeKeyword$19(int entryPoint) throws Exception {
		int result = doConsumeKeyword$19(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$19(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$19(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele11KeywordZ(), null, false, false, getKeyword$19$Delimiter());
	}

	public TrickyCElements getRule() {
		return rule;
	}
	
	public void setRule(TrickyCElements rule) {
		this.rule = rule;
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public ICharacterClass getKeyword$19$Delimiter() {
		return keyword$19$Delimiter;
	}
	
	public void setKeyword$19$Delimiter(ICharacterClass characterClass) {
		keyword$19$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$5$Delimiter() {
		return keyword$5$Delimiter;
	}
	
	public void setKeyword$5$Delimiter(ICharacterClass characterClass) {
		keyword$5$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$11$Delimiter() {
		return keyword$11$Delimiter;
	}
	
	public void setKeyword$11$Delimiter(ICharacterClass characterClass) {
		keyword$11$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$15$Delimiter() {
		return keyword$15$Delimiter;
	}
	
	public void setKeyword$15$Delimiter(ICharacterClass characterClass) {
		keyword$15$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$7$Delimiter() {
		return ruleCall$7$Delimiter;
	}
	
	public void setRuleCall$7$Delimiter(ISequenceMatcher matcher) {
		ruleCall$7$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
