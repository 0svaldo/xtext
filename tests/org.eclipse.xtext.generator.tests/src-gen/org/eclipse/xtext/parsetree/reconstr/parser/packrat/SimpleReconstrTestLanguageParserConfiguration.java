/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.reconstr.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.parsetree.reconstr.services.SimpleReconstrTestLanguageGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.SimpleReconstrTestLanguageOpConsumer;
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.SimpleReconstrTestLanguageTermConsumer;
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.SimpleReconstrTestLanguageAtomConsumer;
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.SimpleReconstrTestLanguageParensConsumer;
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.SimpleReconstrTestLanguageTwoNumbersConsumer;
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.SimpleReconstrTestLanguageManyStringsConsumer;
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.SimpleReconstrTestLanguageTypeConsumer;
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.SimpleReconstrTestLanguageRef2Consumer;
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.SimpleReconstrTestLanguageSpareConsumer;
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.SimpleReconstrTestLanguageBooleanConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class SimpleReconstrTestLanguageParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 
    private SimpleReconstrTestLanguageOpConsumer opConsumer;
    private SimpleReconstrTestLanguageTermConsumer termConsumer;
    private SimpleReconstrTestLanguageAtomConsumer atomConsumer;
    private SimpleReconstrTestLanguageParensConsumer parensConsumer;
    private SimpleReconstrTestLanguageTwoNumbersConsumer twoNumbersConsumer;
    private SimpleReconstrTestLanguageManyStringsConsumer manyStringsConsumer;
    private SimpleReconstrTestLanguageTypeConsumer typeConsumer;
    private SimpleReconstrTestLanguageRef2Consumer ref2Consumer;
    private SimpleReconstrTestLanguageSpareConsumer spareConsumer;
    private SimpleReconstrTestLanguageBooleanConsumer booleanConsumer;

	private SimpleReconstrTestLanguageGrammarAccess grammarAccess;

	public SimpleReconstrTestLanguageParserConfiguration(IInternalParserConfiguration configuration, SimpleReconstrTestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public SimpleReconstrTestLanguageOpConsumer getRootConsumer() {
		return opConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		opConsumer = new SimpleReconstrTestLanguageOpConsumer(
    		this, null
    	);
		termConsumer = new SimpleReconstrTestLanguageTermConsumer(
    		this, null
    	);
		atomConsumer = new SimpleReconstrTestLanguageAtomConsumer(
    		this, null
    	);
		parensConsumer = new SimpleReconstrTestLanguageParensConsumer(
    		this, null
    	);
		twoNumbersConsumer = new SimpleReconstrTestLanguageTwoNumbersConsumer(
    		this, null
    	);
		manyStringsConsumer = new SimpleReconstrTestLanguageManyStringsConsumer(
    		this, null
    	);
		typeConsumer = new SimpleReconstrTestLanguageTypeConsumer(
    		this, null
    	);
		ref2Consumer = new SimpleReconstrTestLanguageRef2Consumer(
    		this, null
    	);
		spareConsumer = new SimpleReconstrTestLanguageSpareConsumer(
    		this, null
    	);
		booleanConsumer = new SimpleReconstrTestLanguageBooleanConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getOpConsumer().setRule(grammarAccess.getOpAccess());
		getTermConsumer().setRule(grammarAccess.getTermAccess());
		getAtomConsumer().setRule(grammarAccess.getAtomAccess());
		getParensConsumer().setRule(grammarAccess.getParensAccess());
		getTwoNumbersConsumer().setRule(grammarAccess.getTwoNumbersAccess());
		getManyStringsConsumer().setRule(grammarAccess.getManyStringsAccess());
		getTypeConsumer().setRule(grammarAccess.getTypeAccess());
		getRef2Consumer().setRule(grammarAccess.getRef2Access());
		getSpareConsumer().setRule(grammarAccess.getSpareAccess());
		getBooleanConsumer().setRule(grammarAccess.getBooleanAccess());
		getIdConsumer().setRule(grammarAccess.getIDRule());
		getIntConsumer().setRule(grammarAccess.getINTRule());
		getStringConsumer().setRule(grammarAccess.getSTRINGRule());
		getMlCommentConsumer().setRule(grammarAccess.getML_COMMENTRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getAnyOtherConsumer().setRule(grammarAccess.getANY_OTHERRule());


		getOpConsumer().setTermConsumer(getTermConsumer());

		getTermConsumer().setAtomConsumer(getAtomConsumer());
		getTermConsumer().setBooleanConsumer(getBooleanConsumer());
		getTermConsumer().setManyStringsConsumer(getManyStringsConsumer());
		getTermConsumer().setParensConsumer(getParensConsumer());
		getTermConsumer().setRef2Consumer(getRef2Consumer());
		getTermConsumer().setSpareConsumer(getSpareConsumer());
		getTermConsumer().setTwoNumbersConsumer(getTwoNumbersConsumer());
		getTermConsumer().setTypeConsumer(getTypeConsumer());

		getAtomConsumer().setIdConsumer(getIdConsumer());

		getParensConsumer().setOpConsumer(getOpConsumer());

		getTwoNumbersConsumer().setIntConsumer(getIntConsumer());

		getManyStringsConsumer().setStringConsumer(getStringConsumer());

		getTypeConsumer().setIdConsumer(getIdConsumer());

		getRef2Consumer().setStringConsumer(getStringConsumer());

		getSpareConsumer().setIdConsumer(getIdConsumer());

		getBooleanConsumer().setIdConsumer(getIdConsumer());

		getAtomConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.ruleCall$24$Delimiter);
		getParensConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.keyword$28$Delimiter);
		getParensConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.keyword$28$Delimiter);
		getParensConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.keyword$28$Delimiter);
		getTwoNumbersConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.keyword$28$Delimiter);
		getTwoNumbersConsumer().setRuleCall$3$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.ruleCall$37$Delimiter);
		getTwoNumbersConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.ruleCall$37$Delimiter);
		getTwoNumbersConsumer().setRuleCall$9$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.ruleCall$37$Delimiter);
		getManyStringsConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.keyword$28$Delimiter);
		getManyStringsConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.ruleCall$37$Delimiter);
		getManyStringsConsumer().setRuleCall$6$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.ruleCall$37$Delimiter);
		getTypeConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.keyword$55$Delimiter);
		getTypeConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.keyword$55$Delimiter);
		getTypeConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.ruleCall$24$Delimiter);
		getTypeConsumer().setRuleCall$9$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.ruleCall$24$Delimiter);
		getRef2Consumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.keyword$28$Delimiter);
		getRef2Consumer().setKeyword$5$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.keyword$55$Delimiter);
		getRef2Consumer().setKeyword$7$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.keyword$55$Delimiter);
		getRef2Consumer().setRuleCall$6$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.ruleCall$37$Delimiter);
		getSpareConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.keyword$28$Delimiter);
		getSpareConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.keyword$28$Delimiter);
		getSpareConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.ruleCall$24$Delimiter);
		getSpareConsumer().setRuleCall$8$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.ruleCall$24$Delimiter);
		getBooleanConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.keyword$28$Delimiter);
		getBooleanConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.keyword$55$Delimiter);
		getBooleanConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.keyword$55$Delimiter);
		getBooleanConsumer().setRuleCall$7$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SimpleReconstrTestLanguageDelimiters.ruleCall$24$Delimiter);
	}
	
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public SimpleReconstrTestLanguageOpConsumer getOpConsumer() {
    	return opConsumer;
    }

    public SimpleReconstrTestLanguageTermConsumer getTermConsumer() {
    	return termConsumer;
    }

    public SimpleReconstrTestLanguageAtomConsumer getAtomConsumer() {
    	return atomConsumer;
    }

    public SimpleReconstrTestLanguageParensConsumer getParensConsumer() {
    	return parensConsumer;
    }

    public SimpleReconstrTestLanguageTwoNumbersConsumer getTwoNumbersConsumer() {
    	return twoNumbersConsumer;
    }

    public SimpleReconstrTestLanguageManyStringsConsumer getManyStringsConsumer() {
    	return manyStringsConsumer;
    }

    public SimpleReconstrTestLanguageTypeConsumer getTypeConsumer() {
    	return typeConsumer;
    }

    public SimpleReconstrTestLanguageRef2Consumer getRef2Consumer() {
    	return ref2Consumer;
    }

    public SimpleReconstrTestLanguageSpareConsumer getSpareConsumer() {
    	return spareConsumer;
    }

    public SimpleReconstrTestLanguageBooleanConsumer getBooleanConsumer() {
    	return booleanConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
