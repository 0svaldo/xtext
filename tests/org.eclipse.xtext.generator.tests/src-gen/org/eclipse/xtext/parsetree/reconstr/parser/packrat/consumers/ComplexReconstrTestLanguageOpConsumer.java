/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;

import org.eclipse.xtext.parsetree.reconstr.services.ComplexReconstrTestLanguageGrammarAccess.OpElements;

public final class ComplexReconstrTestLanguageOpConsumer extends NonTerminalConsumer {

	private OpElements rule;	

	private INonTerminalConsumer termConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer ruleCall$2$Consumer;

	private IElementConsumer alternatives$3$Consumer;

	private IElementConsumer group$4$Consumer;

	private IElementConsumer action$5$Consumer;

	private IElementConsumer keyword$7$Consumer;

	private IElementConsumer assignment$8$Consumer;

	private IElementConsumer ruleCall$9$Consumer;

	private IElementConsumer group$10$Consumer;

	private IElementConsumer action$11$Consumer;

	private IElementConsumer keyword$13$Consumer;

	private IElementConsumer assignment$14$Consumer;

	private IElementConsumer ruleCall$15$Consumer;

	private ICharacterClass keyword$7$Delimiter;

	private ICharacterClass keyword$13$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(ruleCall$2$Consumer);
			acceptor.accept(alternatives$3$Consumer);
		}
	}

	protected class RuleCall$2$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$2$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(termConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class Alternatives$3$Consumer extends LoopAlternativesConsumer {
		
		protected Alternatives$3$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$4$Consumer);
			acceptor.accept(group$10$Consumer);
		}
	}

	protected class Group$4$Consumer extends GroupConsumer {
		
		protected Group$4$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(action$5$Consumer);
			acceptor.accept(keyword$7$Consumer);
			acceptor.accept(assignment$8$Consumer);
		}
	}

	protected class Action$5$Consumer extends ElementConsumer<Action> {
		
		protected Action$5$Consumer(final Action action) {
			super(action);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			consumeAction(getElement(), true);
			return SUCCESS;
		}
	}

	protected class Keyword$7$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$7$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$7$Delimiter(), optional);
		}
	}

	protected class Assignment$8$Consumer extends AssignmentConsumer {
		
		protected Assignment$8$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$9$Consumer;
		}
	}

	protected class RuleCall$9$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$9$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(termConsumer, "addOperands", true, false, false, getElement(), optional);
		}
	}

	protected class Group$10$Consumer extends GroupConsumer {
		
		protected Group$10$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(action$11$Consumer);
			acceptor.accept(keyword$13$Consumer);
			acceptor.accept(assignment$14$Consumer);
		}
	}

	protected class Action$11$Consumer extends ElementConsumer<Action> {
		
		protected Action$11$Consumer(final Action action) {
			super(action);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			consumeAction(getElement(), true);
			return SUCCESS;
		}
	}

	protected class Keyword$13$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$13$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$13$Delimiter(), optional);
		}
	}

	protected class Assignment$14$Consumer extends AssignmentConsumer {
		
		protected Assignment$14$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$15$Consumer;
		}
	}

	protected class RuleCall$15$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$15$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(termConsumer, "minusOperands", true, false, false, getElement(), optional);
		}
	}

	public ComplexReconstrTestLanguageOpConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$7$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$13$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public OpElements getRule() {
		return rule;
	}
	
	public void setRule(OpElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		ruleCall$2$Consumer = new RuleCall$2$Consumer(rule.getTermParserRuleCall_0());
		alternatives$3$Consumer = new Alternatives$3$Consumer(rule.getAlternatives_1());
		group$4$Consumer = new Group$4$Consumer(rule.getGroup_1_0());
		action$5$Consumer = new Action$5$Consumer(rule.getAddaddOperandsAction_1_0_0());
		keyword$7$Consumer = new Keyword$7$Consumer(rule.getPlusSignKeyword_1_0_1());
		assignment$8$Consumer = new Assignment$8$Consumer(rule.getAddOperandsAssignment_1_0_2());
		ruleCall$9$Consumer = new RuleCall$9$Consumer(rule.getAddOperandsTermParserRuleCall_1_0_2_0());
		group$10$Consumer = new Group$10$Consumer(rule.getGroup_1_1());
		action$11$Consumer = new Action$11$Consumer(rule.getMinusminusOperandsAction_1_1_0());
		keyword$13$Consumer = new Keyword$13$Consumer(rule.getHyphenMinusKeyword_1_1_1());
		assignment$14$Consumer = new Assignment$14$Consumer(rule.getMinusOperandsAssignment_1_1_2());
		ruleCall$15$Consumer = new RuleCall$15$Consumer(rule.getMinusOperandsTermParserRuleCall_1_1_2_0());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setTermConsumer(INonTerminalConsumer termConsumer) {
		this.termConsumer = termConsumer;
	}
	
	public ICharacterClass getKeyword$7$Delimiter() {
		return keyword$7$Delimiter;
	}
	
	public void setKeyword$7$Delimiter(ICharacterClass characterClass) {
		keyword$7$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$13$Delimiter() {
		return keyword$13$Delimiter;
	}
	
	public void setKeyword$13$Delimiter(ICharacterClass characterClass) {
		keyword$13$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
