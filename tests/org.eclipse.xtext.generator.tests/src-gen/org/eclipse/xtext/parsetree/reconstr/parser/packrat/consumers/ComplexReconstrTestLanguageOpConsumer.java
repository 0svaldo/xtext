/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;

import org.eclipse.xtext.parsetree.reconstr.services.ComplexReconstrTestLanguageGrammarAccess.OpElements;

public final class ComplexReconstrTestLanguageOpConsumer extends NonTerminalConsumer {

	private OpElements rule;	

	private INonTerminalConsumer termConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer ruleCall$2$Consumer;

	private IElementConsumer alternatives$3$Consumer;

	private IElementConsumer group$4$Consumer;

	private IElementConsumer action$6$Consumer;

	private IElementConsumer keyword$8$Consumer;

	private IElementConsumer assignment$9$Consumer;

	private IElementConsumer ruleCall$10$Consumer;

	private IElementConsumer group$11$Consumer;

	private IElementConsumer action$13$Consumer;

	private IElementConsumer keyword$15$Consumer;

	private IElementConsumer assignment$16$Consumer;

	private IElementConsumer ruleCall$17$Consumer;

	private ICharacterClass keyword$8$Delimiter;

	private ICharacterClass keyword$15$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(ruleCall$2$Consumer);
			acceptor.accept(alternatives$3$Consumer);
		}
	}

	protected class RuleCall$2$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$2$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(termConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class Alternatives$3$Consumer extends LoopAlternativesConsumer {
		
		protected Alternatives$3$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$4$Consumer);
			acceptor.accept(group$11$Consumer);
		}
	}

	protected class Group$4$Consumer extends GroupConsumer {
		
		protected Group$4$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(action$6$Consumer);
			acceptor.accept(keyword$8$Consumer);
			acceptor.accept(assignment$9$Consumer);
		}
	}

	protected class Action$6$Consumer extends ElementConsumer<Action> {
		
		protected Action$6$Consumer(final Action action) {
			super(action);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			consumeAction(getElement(), true);
			return SUCCESS;
		}
	}

	protected class Keyword$8$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$8$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$8$Delimiter(), optional);
		}
	}

	protected class Assignment$9$Consumer extends AssignmentConsumer {
		
		protected Assignment$9$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$10$Consumer;
		}
	}

	protected class RuleCall$10$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$10$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(termConsumer, "addOperands", true, false, false, getElement(), optional);
		}
	}

	protected class Group$11$Consumer extends GroupConsumer {
		
		protected Group$11$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(action$13$Consumer);
			acceptor.accept(keyword$15$Consumer);
			acceptor.accept(assignment$16$Consumer);
		}
	}

	protected class Action$13$Consumer extends ElementConsumer<Action> {
		
		protected Action$13$Consumer(final Action action) {
			super(action);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			consumeAction(getElement(), true);
			return SUCCESS;
		}
	}

	protected class Keyword$15$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$15$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$15$Delimiter(), optional);
		}
	}

	protected class Assignment$16$Consumer extends AssignmentConsumer {
		
		protected Assignment$16$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$17$Consumer;
		}
	}

	protected class RuleCall$17$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$17$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(termConsumer, "minusOperands", true, false, false, getElement(), optional);
		}
	}

	public ComplexReconstrTestLanguageOpConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$8$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$15$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public OpElements getRule() {
		return rule;
	}
	
	public void setRule(OpElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		ruleCall$2$Consumer = new RuleCall$2$Consumer(rule.ele0ParserRuleCallTerm());
		alternatives$3$Consumer = new Alternatives$3$Consumer(rule.ele1Alternatives());
		group$4$Consumer = new Group$4$Consumer(rule.ele10Group());
		action$6$Consumer = new Action$6$Consumer(rule.ele1000ActionAddaddOperands());
		keyword$8$Consumer = new Keyword$8$Consumer(rule.ele1001KeywordPlusSign());
		assignment$9$Consumer = new Assignment$9$Consumer(rule.ele101AssignmentAddOperands());
		ruleCall$10$Consumer = new RuleCall$10$Consumer(rule.ele1010ParserRuleCallTerm());
		group$11$Consumer = new Group$11$Consumer(rule.ele11Group());
		action$13$Consumer = new Action$13$Consumer(rule.ele1100ActionMinusminusOperands());
		keyword$15$Consumer = new Keyword$15$Consumer(rule.ele1101KeywordHyphenMinus());
		assignment$16$Consumer = new Assignment$16$Consumer(rule.ele111AssignmentMinusOperands());
		ruleCall$17$Consumer = new RuleCall$17$Consumer(rule.ele1110ParserRuleCallTerm());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setTermConsumer(INonTerminalConsumer termConsumer) {
		this.termConsumer = termConsumer;
	}
	
	public ICharacterClass getKeyword$8$Delimiter() {
		return keyword$8$Delimiter;
	}
	
	public void setKeyword$8$Delimiter(ICharacterClass characterClass) {
		keyword$8$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$15$Delimiter() {
		return keyword$15$Delimiter;
	}
	
	public void setKeyword$15$Delimiter(ICharacterClass characterClass) {
		keyword$15$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
