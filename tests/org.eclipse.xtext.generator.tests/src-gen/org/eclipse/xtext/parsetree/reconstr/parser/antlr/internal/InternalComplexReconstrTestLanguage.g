/*
* generated by Xtext
*/
grammar InternalComplexReconstrTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.parsetree.reconstr.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parsetree.reconstr.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.parsetree.reconstr.services.ComplexReconstrTestLanguageGrammarAccess;

}

@parser::members {
 
 	private ComplexReconstrTestLanguageGrammarAccess grammarAccess;
 	
    public InternalComplexReconstrTestLanguageParser(TokenStream input, IAstFactory factory, ComplexReconstrTestLanguageGrammarAccess grammarAccess) {
        super(input, factory, grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/xtext/parsetree/reconstr/parser/antlr/internal/InternalComplexReconstrTestLanguage.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Root";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}





// Entry rule entryRuleRoot
entryRuleRoot returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prRoot().getRule(), currentNode); }
	 iv_ruleRoot=ruleRoot 
	 { $current=$iv_ruleRoot.current; } 
	 EOF 
;

// Rule Root
ruleRoot returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.prRoot().ele0ParserRuleCallOp(), currentNode); 
    }
    this_Op_0=ruleOp
    { 
        $current = $this_Op_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.prRoot().ele1ParserRuleCallTrickyG(), currentNode); 
    }
    this_TrickyG_1=ruleTrickyG
    { 
        $current = $this_TrickyG_1.current; 
        currentNode = currentNode.getParent();
    }
);







// Entry rule entryRuleOp
entryRuleOp returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prOp().getRule(), currentNode); }
	 iv_ruleOp=ruleOp 
	 { $current=$iv_ruleOp.current; } 
	 EOF 
;

// Rule Op
ruleOp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.prOp().ele0ParserRuleCallTerm(), currentNode); 
    }
    this_Term_0=ruleTerm
    { 
        $current = $this_Term_0.current; 
        currentNode = currentNode.getParent();
    }
((((
    { 
        temp=factory.create(grammarAccess.prOp().ele1000ActionAddaddOperands().getTypeName().getType());
        try {
        	factory.add(temp, "addOperands", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.prOp().ele1000ActionAddaddOperands(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'+' 
    {
        createLeafNode(grammarAccess.prOp().ele1001KeywordPlusSign(), null); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prOp().ele1010ParserRuleCallTerm(), currentNode); 
	    }
	    lv_addOperands_3=ruleTerm 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prOp().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "addOperands", lv_addOperands_3, "Term", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |(((
    { 
        temp=factory.create(grammarAccess.prOp().ele1100ActionMinusminusOperands().getTypeName().getType());
        try {
        	factory.add(temp, "minusOperands", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.prOp().ele1100ActionMinusminusOperands(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'-' 
    {
        createLeafNode(grammarAccess.prOp().ele1101KeywordHyphenMinus(), null); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prOp().ele1110ParserRuleCallTerm(), currentNode); 
	    }
	    lv_minusOperands_6=ruleTerm 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prOp().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "minusOperands", lv_minusOperands_6, "Term", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)))*);







// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prTerm().getRule(), currentNode); }
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current; } 
	 EOF 
;

// Rule Term
ruleTerm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.prTerm().ele0ParserRuleCallAtom(), currentNode); 
    }
    this_Atom_0=ruleAtom
    { 
        $current = $this_Atom_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.prTerm().ele1ParserRuleCallParens(), currentNode); 
    }
    this_Parens_1=ruleParens
    { 
        $current = $this_Parens_1.current; 
        currentNode = currentNode.getParent();
    }
);







// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prAtom().getRule(), currentNode); }
	 iv_ruleAtom=ruleAtom 
	 { $current=$iv_ruleAtom.current; } 
	 EOF 
;

// Rule Atom
ruleAtom returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_name_0=RULE_ID	{
		createLeafNode(grammarAccess.prAtom().ele0ParserRuleCallID(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prAtom().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);







// Entry rule entryRuleParens
entryRuleParens returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prParens().getRule(), currentNode); }
	 iv_ruleParens=ruleParens 
	 { $current=$iv_ruleParens.current; } 
	 EOF 
;

// Rule Parens
ruleParens returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((('(' 
    {
        createLeafNode(grammarAccess.prParens().ele000KeywordLeftParenthesis(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.prParens().ele001ParserRuleCallOp(), currentNode); 
    }
    this_Op_1=ruleOp
    { 
        $current = $this_Op_1.current; 
        currentNode = currentNode.getParent();
    }
)')' 
    {
        createLeafNode(grammarAccess.prParens().ele01KeywordRightParenthesis(), null); 
    }
)(	
	
	    lv_em_3='!' 
    {
        createLeafNode(grammarAccess.prParens().ele10KeywordExclamationMark(), "em"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prParens().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "em", /* lv_em_3 */ input.LT(-1), "!", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?);









// Entry rule entryRuleTrickyA1
entryRuleTrickyA1 returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prTrickyA1().getRule(), currentNode); }
	 iv_ruleTrickyA1=ruleTrickyA1 
	 { $current=$iv_ruleTrickyA1.current; } 
	 EOF 
;

// Rule TrickyA1
ruleTrickyA1 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_name_0=RULE_ID	{
		createLeafNode(grammarAccess.prTrickyA1().ele0ParserRuleCallID(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prTrickyA1().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);

















// Entry rule entryRuleTrickyG
entryRuleTrickyG returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prTrickyG().getRule(), currentNode); }
	 iv_ruleTrickyG=ruleTrickyG 
	 { $current=$iv_ruleTrickyG.current; } 
	 EOF 
;

// Rule TrickyG
ruleTrickyG returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('TG' 
    {
        createLeafNode(grammarAccess.prTrickyG().ele0KeywordTG(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prTrickyG().ele10ParserRuleCallTrickyG1(), currentNode); 
	    }
	    lv_tree_1=ruleTrickyG1 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prTrickyG().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "tree", lv_tree_1, "TrickyG1", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));







// Entry rule entryRuleTrickyG1
entryRuleTrickyG1 returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prTrickyG1().getRule(), currentNode); }
	 iv_ruleTrickyG1=ruleTrickyG1 
	 { $current=$iv_ruleTrickyG1.current; } 
	 EOF 
;

// Rule TrickyG1
ruleTrickyG1 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('[' 
    {
        createLeafNode(grammarAccess.prTrickyG1().ele00KeywordLeftSquareBracket(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prTrickyG1().ele0100ParserRuleCallTrickyG2(), currentNode); 
	    }
	    lv_vals_1=ruleTrickyG2 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prTrickyG1().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "vals", lv_vals_1, "TrickyG2", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.prTrickyG1().ele0110KeywordComma(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prTrickyG1().ele01110ParserRuleCallTrickyG2(), currentNode); 
	    }
	    lv_vals_3=ruleTrickyG2 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prTrickyG1().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "vals", lv_vals_3, "TrickyG2", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?)']' 
    {
        createLeafNode(grammarAccess.prTrickyG1().ele1KeywordRightSquareBracket(), null); 
    }
);







// Entry rule entryRuleTrickyG2
entryRuleTrickyG2 returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prTrickyG2().getRule(), currentNode); }
	 iv_ruleTrickyG2=ruleTrickyG2 
	 { $current=$iv_ruleTrickyG2.current; } 
	 EOF 
;

// Rule TrickyG2
ruleTrickyG2 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.prTrickyG2().ele0ParserRuleCallTrickyG1(), currentNode); 
    }
    this_TrickyG1_0=ruleTrickyG1
    { 
        $current = $this_TrickyG1_0.current; 
        currentNode = currentNode.getParent();
    }

    |(	
	
	    lv_val_1=RULE_INT	{
		createLeafNode(grammarAccess.prTrickyG2().ele10ParserRuleCallINT(), "val"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prTrickyG2().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "val", lv_val_1, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));

























































RULE_ID : '^'? (('a'..'z'|'A'..'Z')|'_') ((('a'..'z'|'A'..'Z')|'_')|'0'..'9')*;



RULE_INT : ('0'..'9')+;



RULE_STRING : ('\"' ('\\' ((((((('b'|'t')|'n')|'f')|'r')|'\"')|'\'')|'\\')|~(('\\'|'\"')))* '\"'|'\'' ('\\' ((((((('b'|'t')|'n')|'f')|'r')|'\"')|'\'')|'\\')|~(('\\'|'\'')))* '\'');



RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';



RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;



RULE_WS : (((' '|'\t')|'\r')|'\n')+;



RULE_ANY_OTHER : .;




