/*
* generated by Xtext
*/
grammar InternalSimpleReconstrTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.parsetree.reconstr.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parsetree.reconstr.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.parsetree.reconstr.services.SimpleReconstrTestLanguageGrammarAccess;

}

@parser::members {
 
 	private SimpleReconstrTestLanguageGrammarAccess grammarAccess;
 	
    public InternalSimpleReconstrTestLanguageParser(TokenStream input, IAstFactory factory, SimpleReconstrTestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/xtext/parsetree/reconstr/parser/antlr/internal/InternalSimpleReconstrTestLanguage.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Op";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleOp
entryRuleOp returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getOpRule(), currentNode); }
	 iv_ruleOp=ruleOp 
	 { $current=$iv_ruleOp.current; } 
	 EOF 
;

// Rule Op
ruleOp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getOpAccess().getTermParserRuleCall_0(), currentNode); 
    }
    this_Term_0=ruleTerm
    { 
        $current = $this_Term_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getOpAccess().getOpValuesAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "values", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOpAccess().getOpValuesAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOpAccess().getValuesTermParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_values_2_0=ruleTerm		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"values",
	        		lv_values_2_0, 
	        		"Term", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*);





// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTermRule(), currentNode); }
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current; } 
	 EOF 
;

// Rule Term
ruleTerm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTermAccess().getAtomParserRuleCall_0(), currentNode); 
    }
    this_Atom_0=ruleAtom
    { 
        $current = $this_Atom_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTermAccess().getTwoNumbersParserRuleCall_1(), currentNode); 
    }
    this_TwoNumbers_1=ruleTwoNumbers
    { 
        $current = $this_TwoNumbers_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTermAccess().getManyStringsParserRuleCall_2(), currentNode); 
    }
    this_ManyStrings_2=ruleManyStrings
    { 
        $current = $this_ManyStrings_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTermAccess().getParensParserRuleCall_3(), currentNode); 
    }
    this_Parens_3=ruleParens
    { 
        $current = $this_Parens_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTermAccess().getTypeParserRuleCall_4(), currentNode); 
    }
    this_Type_4=ruleType
    { 
        $current = $this_Type_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTermAccess().getRef2ParserRuleCall_5(), currentNode); 
    }
    this_Ref2_5=ruleRef2
    { 
        $current = $this_Ref2_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTermAccess().getSpareParserRuleCall_6(), currentNode); 
    }
    this_Spare_6=ruleSpare
    { 
        $current = $this_Spare_6.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTermAccess().getBooleanParserRuleCall_7(), currentNode); 
    }
    this_Boolean_7=ruleBoolean
    { 
        $current = $this_Boolean_7.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTermAccess().getTransient1ParserRuleCall_8(), currentNode); 
    }
    this_Transient1_8=ruleTransient1
    { 
        $current = $this_Transient1_8.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTermAccess().getConsumed1ParserRuleCall_9(), currentNode); 
    }
    this_Consumed1_9=ruleConsumed1
    { 
        $current = $this_Consumed1_9.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTermAccess().getConsumed2ParserRuleCall_10(), currentNode); 
    }
    this_Consumed2_10=ruleConsumed2
    { 
        $current = $this_Consumed2_10.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTermAccess().getLoop1ParserRuleCall_11(), currentNode); 
    }
    this_Loop1_11=ruleLoop1
    { 
        $current = $this_Loop1_11.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTermAccess().getLoop2ParserRuleCall_12(), currentNode); 
    }
    this_Loop2_12=ruleLoop2
    { 
        $current = $this_Loop2_12.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTermAccess().getLoop3ParserRuleCall_13(), currentNode); 
    }
    this_Loop3_13=ruleLoop3
    { 
        $current = $this_Loop3_13.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTermAccess().getLoop4ParserRuleCall_14(), currentNode); 
    }
    this_Loop4_14=ruleLoop4
    { 
        $current = $this_Loop4_14.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTermAccess().getLoopBug285452ParserRuleCall_15(), currentNode); 
    }
    this_LoopBug285452_15=ruleLoopBug285452
    { 
        $current = $this_LoopBug285452_15.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTermAccess().getDuplicateBug284491ParserRuleCall_16(), currentNode); 
    }
    this_DuplicateBug284491_16=ruleDuplicateBug284491
    { 
        $current = $this_DuplicateBug284491_16.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTermAccess().getEmptyObjectBug284850ParserRuleCall_17(), currentNode); 
    }
    this_EmptyObjectBug284850_17=ruleEmptyObjectBug284850
    { 
        $current = $this_EmptyObjectBug284850_17.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTermAccess().getMultiInheritanceBug280439ParserRuleCall_18(), currentNode); 
    }
    this_MultiInheritanceBug280439_18=ruleMultiInheritanceBug280439
    { 
        $current = $this_MultiInheritanceBug280439_18.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAtomRule(), currentNode); }
	 iv_ruleAtom=ruleAtom 
	 { $current=$iv_ruleAtom.current; } 
	 EOF 
;

// Rule Atom
ruleAtom returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAtomAccess().getNameIDTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAtomRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
);





// Entry rule entryRuleParens
entryRuleParens returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getParensRule(), currentNode); }
	 iv_ruleParens=ruleParens 
	 { $current=$iv_ruleParens.current; } 
	 EOF 
;

// Rule Parens
ruleParens returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('(' 
    {
        createLeafNode(grammarAccess.getParensAccess().getLeftParenthesisKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getParensAccess().getOpParserRuleCall_1(), currentNode); 
    }
    this_Op_1=ruleOp
    { 
        $current = $this_Op_1.current; 
        currentNode = currentNode.getParent();
    }
')' 
    {
        createLeafNode(grammarAccess.getParensAccess().getRightParenthesisKeyword_2(), null); 
    }
(
(
		lv_em_3_0='!' 
    {
        createLeafNode(grammarAccess.getParensAccess().getEmExclamationMarkKeyword_3_0(), "em"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParensRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "em", lv_em_3_0, "!", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?);





// Entry rule entryRuleTwoNumbers
entryRuleTwoNumbers returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTwoNumbersRule(), currentNode); }
	 iv_ruleTwoNumbers=ruleTwoNumbers 
	 { $current=$iv_ruleTwoNumbers.current; } 
	 EOF 
;

// Rule TwoNumbers
ruleTwoNumbers returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_num1_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getTwoNumbersAccess().getNum1INTTerminalRuleCall_0_0(), "num1"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTwoNumbersRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"num1",
	        		lv_num1_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_num2_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getTwoNumbersAccess().getNum2INTTerminalRuleCall_1_0(), "num2"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTwoNumbersRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"num2",
	        		lv_num2_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)('#' 
    {
        createLeafNode(grammarAccess.getTwoNumbersAccess().getNumberSignKeyword_2_0(), null); 
    }
(
(
		lv_num3_3_0=RULE_INT
		{
			createLeafNode(grammarAccess.getTwoNumbersAccess().getNum3INTTerminalRuleCall_2_1_0(), "num3"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTwoNumbersRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"num3",
	        		lv_num3_3_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))*);





// Entry rule entryRuleManyStrings
entryRuleManyStrings returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getManyStringsRule(), currentNode); }
	 iv_ruleManyStrings=ruleManyStrings 
	 { $current=$iv_ruleManyStrings.current; } 
	 EOF 
;

// Rule ManyStrings
ruleManyStrings returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('=' 
    {
        createLeafNode(grammarAccess.getManyStringsAccess().getEqualsSignKeyword_0(), null); 
    }
(
(
		lv_str1_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getManyStringsAccess().getStr1STRINGTerminalRuleCall_1_0(), "str1"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getManyStringsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"str1",
	        		lv_str1_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)*(
(
		lv_str2_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getManyStringsAccess().getStr2STRINGTerminalRuleCall_2_0(), "str2"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getManyStringsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"str2",
	        		lv_str2_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
));





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTypeRule(), currentNode); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('type' 
    {
        createLeafNode(grammarAccess.getTypeAccess().getTypeKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)'extends' 
    {
        createLeafNode(grammarAccess.getTypeAccess().getExtendsKeyword_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getTypeAccess().getExtendsTypeCrossReference_3_0(), "extends"); 
	}

)
));





// Entry rule entryRuleRef2
entryRuleRef2 returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRef2Rule(), currentNode); }
	 iv_ruleRef2=ruleRef2 
	 { $current=$iv_ruleRef2.current; } 
	 EOF 
;

// Rule Ref2
ruleRef2 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('#2' 
    {
        createLeafNode(grammarAccess.getRef2Access().getNumberSignDigitTwoKeyword_0(), null); 
    }
(
(
(
		lv_ref2_1_1='mykeyword1' 
    {
        createLeafNode(grammarAccess.getRef2Access().getRef2Mykeyword1Keyword_1_0_0(), "ref2"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRef2Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "ref2", lv_ref2_1_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_ref2_1_2=RULE_STRING
		{
			createLeafNode(grammarAccess.getRef2Access().getRef2STRINGTerminalRuleCall_1_0_1(), "ref2"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRef2Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ref2",
	        		lv_ref2_1_2, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_ref2_1_3='mykeyword2' 
    {
        createLeafNode(grammarAccess.getRef2Access().getRef2Mykeyword2Keyword_1_0_2(), "ref2"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRef2Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "ref2", lv_ref2_1_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
));





// Entry rule entryRuleSpare
entryRuleSpare returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSpareRule(), currentNode); }
	 iv_ruleSpare=ruleSpare 
	 { $current=$iv_ruleSpare.current; } 
	 EOF 
;

// Rule Spare
ruleSpare returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('#3' 
    {
        createLeafNode(grammarAccess.getSpareAccess().getNumberSignDigitThreeKeyword_0(), null); 
    }
(
(
		lv_id_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSpareAccess().getIdIDTerminalRuleCall_1_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSpareRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"id",
	        		lv_id_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)('.' 
    {
        createLeafNode(grammarAccess.getSpareAccess().getFullStopKeyword_2_0(), null); 
    }
(
(
		lv_id_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSpareAccess().getIdIDTerminalRuleCall_2_1_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSpareRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"id",
	        		lv_id_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))*);





// Entry rule entryRuleBoolean
entryRuleBoolean returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBooleanRule(), currentNode); }
	 iv_ruleBoolean=ruleBoolean 
	 { $current=$iv_ruleBoolean.current; } 
	 EOF 
;

// Rule Boolean
ruleBoolean returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('#4' 
    {
        createLeafNode(grammarAccess.getBooleanAccess().getNumberSignDigitFourKeyword_0(), null); 
    }
(
(
		lv_bool_1_0='myoption' 
    {
        createLeafNode(grammarAccess.getBooleanAccess().getBoolMyoptionKeyword_1_0(), "bool"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "bool", true, "myoption", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?'kw' 
    {
        createLeafNode(grammarAccess.getBooleanAccess().getKwKeyword_2(), null); 
    }
(
(
		lv_value_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getBooleanAccess().getValueIDTerminalRuleCall_3_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
));





// Entry rule entryRuleTransient1
entryRuleTransient1 returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTransient1Rule(), currentNode); }
	 iv_ruleTransient1=ruleTransient1 
	 { $current=$iv_ruleTransient1.current; } 
	 EOF 
;

// Rule Transient1
ruleTransient1 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('#5' 
    {
        createLeafNode(grammarAccess.getTransient1Access().getNumberSignDigitFiveKeyword_0(), null); 
    }
((
(
		lv_precStar_1_0='*' 
    {
        createLeafNode(grammarAccess.getTransient1Access().getPrecStarAsteriskKeyword_1_0_0(), "precStar"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransient1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "precStar", true, "*", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_prec_2_0=RULE_INT
		{
			createLeafNode(grammarAccess.getTransient1Access().getPrecINTTerminalRuleCall_1_1_0(), "prec"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransient1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"prec",
	        		lv_prec_2_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))(',' 
    {
        createLeafNode(grammarAccess.getTransient1Access().getCommaKeyword_2_0(), null); 
    }
((
(
		lv_scaleStar_4_0='*' 
    {
        createLeafNode(grammarAccess.getTransient1Access().getScaleStarAsteriskKeyword_2_1_0_0(), "scaleStar"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransient1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "scaleStar", true, "*", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_scale_5_0=RULE_INT
		{
			createLeafNode(grammarAccess.getTransient1Access().getScaleINTTerminalRuleCall_2_1_1_0(), "scale"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransient1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"scale",
	        		lv_scale_5_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)))?);





// Entry rule entryRuleConsumed1
entryRuleConsumed1 returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getConsumed1Rule(), currentNode); }
	 iv_ruleConsumed1=ruleConsumed1 
	 { $current=$iv_ruleConsumed1.current; } 
	 EOF 
;

// Rule Consumed1
ruleConsumed1 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('#6' 
    {
        createLeafNode(grammarAccess.getConsumed1Access().getNumberSignDigitSixKeyword_0(), null); 
    }
(('v1' 
    {
        createLeafNode(grammarAccess.getConsumed1Access().getV1Keyword_1_0_0(), null); 
    }
(
(
		lv_v1_2_0=RULE_INT
		{
			createLeafNode(grammarAccess.getConsumed1Access().getV1INTTerminalRuleCall_1_0_1_0(), "v1"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConsumed1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"v1",
	        		lv_v1_2_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)*(
(
		lv_v2_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getConsumed1Access().getV2IDTerminalRuleCall_1_0_2_0(), "v2"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConsumed1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"v2",
	        		lv_v2_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |('v2' 
    {
        createLeafNode(grammarAccess.getConsumed1Access().getV2Keyword_1_1_0(), null); 
    }
(
(
		lv_v2_5_0=RULE_ID
		{
			createLeafNode(grammarAccess.getConsumed1Access().getV2IDTerminalRuleCall_1_1_1_0(), "v2"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConsumed1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"v2",
	        		lv_v2_5_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)*(
(
		lv_v1_6_0=RULE_INT
		{
			createLeafNode(grammarAccess.getConsumed1Access().getV1INTTerminalRuleCall_1_1_2_0(), "v1"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConsumed1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"v1",
	        		lv_v1_6_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))));





// Entry rule entryRuleConsumed2
entryRuleConsumed2 returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getConsumed2Rule(), currentNode); }
	 iv_ruleConsumed2=ruleConsumed2 
	 { $current=$iv_ruleConsumed2.current; } 
	 EOF 
;

// Rule Consumed2
ruleConsumed2 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('#7' 
    {
        createLeafNode(grammarAccess.getConsumed2Access().getNumberSignDigitSevenKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConsumed2Access().getChildConsumed1ParserRuleCall_1_0(), currentNode); 
	    }
		lv_child_1_0=ruleConsumed1		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConsumed2Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"child",
	        		lv_child_1_0, 
	        		"Consumed1", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
));





// Entry rule entryRuleLoop1
entryRuleLoop1 returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLoop1Rule(), currentNode); }
	 iv_ruleLoop1=ruleLoop1 
	 { $current=$iv_ruleLoop1.current; } 
	 EOF 
;

// Rule Loop1
ruleLoop1 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('kw0' 
    {
        createLeafNode(grammarAccess.getLoop1Access().getKw0Keyword_0(), null); 
    }
)?'#8' 
    {
        createLeafNode(grammarAccess.getLoop1Access().getNumberSignDigitEightKeyword_1(), null); 
    }
(
(
		lv_id_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLoop1Access().getIdIDTerminalRuleCall_2_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoop1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"id",
	        		lv_id_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)('kw1' 
    {
        createLeafNode(grammarAccess.getLoop1Access().getKw1Keyword_3(), null); 
    }
)?(
(
		lv_id_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLoop1Access().getIdIDTerminalRuleCall_4_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoop1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"id",
	        		lv_id_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(('kw2' 
    {
        createLeafNode(grammarAccess.getLoop1Access().getKw2Keyword_5_0(), null); 
    }
)*'kw30' 
    {
        createLeafNode(grammarAccess.getLoop1Access().getKw30Keyword_5_1(), null); 
    }
)+);





// Entry rule entryRuleLoop2
entryRuleLoop2 returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLoop2Rule(), currentNode); }
	 iv_ruleLoop2=ruleLoop2 
	 { $current=$iv_ruleLoop2.current; } 
	 EOF 
;

// Rule Loop2
ruleLoop2 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('#9' 
    {
        createLeafNode(grammarAccess.getLoop2Access().getNumberSignDigitNineKeyword_0(), null); 
    }
(
(
		lv_id_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLoop2Access().getIdIDTerminalRuleCall_1_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoop2Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"id",
	        		lv_id_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)('kw1' 
    {
        createLeafNode(grammarAccess.getLoop2Access().getKw1Keyword_2_0(), null); 
    }

    |((
(
		lv_id_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLoop2Access().getIdIDTerminalRuleCall_2_1_0_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoop2Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"id",
	        		lv_id_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)'kw2' 
    {
        createLeafNode(grammarAccess.getLoop2Access().getKw2Keyword_2_1_1(), null); 
    }
))('kw3' 
    {
        createLeafNode(grammarAccess.getLoop2Access().getKw3Keyword_3_0(), null); 
    }

    |((
(
		lv_id_6_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLoop2Access().getIdIDTerminalRuleCall_3_1_0_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoop2Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"id",
	        		lv_id_6_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)'kw4' 
    {
        createLeafNode(grammarAccess.getLoop2Access().getKw4Keyword_3_1_1(), null); 
    }
))?('kw5' 
    {
        createLeafNode(grammarAccess.getLoop2Access().getKw5Keyword_4_0(), null); 
    }

    |'kw6' 
    {
        createLeafNode(grammarAccess.getLoop2Access().getKw6Keyword_4_1(), null); 
    }
));





// Entry rule entryRuleLoop3
entryRuleLoop3 returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLoop3Rule(), currentNode); }
	 iv_ruleLoop3=ruleLoop3 
	 { $current=$iv_ruleLoop3.current; } 
	 EOF 
;

// Rule Loop3
ruleLoop3 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('kw1' 
    {
        createLeafNode(grammarAccess.getLoop3Access().getKw1Keyword_0_0(), null); 
    }

    |'kw2' 
    {
        createLeafNode(grammarAccess.getLoop3Access().getKw2Keyword_0_1(), null); 
    }

    |'kw3' 
    {
        createLeafNode(grammarAccess.getLoop3Access().getKw3Keyword_0_2(), null); 
    }
)'#10' 
    {
        createLeafNode(grammarAccess.getLoop3Access().getNumberSignDigitOneDigitZeroKeyword_1(), null); 
    }
(
(
		lv_id_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLoop3Access().getIdIDTerminalRuleCall_2_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoop3Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"id",
	        		lv_id_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)('kw4' 
    {
        createLeafNode(grammarAccess.getLoop3Access().getKw4Keyword_3_0(), null); 
    }
(
(
		lv_id_6_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLoop3Access().getIdIDTerminalRuleCall_3_1_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoop3Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"id",
	        		lv_id_6_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)'kw5' 
    {
        createLeafNode(grammarAccess.getLoop3Access().getKw5Keyword_3_2(), null); 
    }
)*);





// Entry rule entryRuleLoop4
entryRuleLoop4 returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLoop4Rule(), currentNode); }
	 iv_ruleLoop4=ruleLoop4 
	 { $current=$iv_ruleLoop4.current; } 
	 EOF 
;

// Rule Loop4
ruleLoop4 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('#11' 
    {
        createLeafNode(grammarAccess.getLoop4Access().getNumberSignDigitOneDigitOneKeyword_0(), null); 
    }
('kw1' 
    {
        createLeafNode(grammarAccess.getLoop4Access().getKw1Keyword_1_0(), null); 
    }

    |'kw2' 
    {
        createLeafNode(grammarAccess.getLoop4Access().getKw2Keyword_1_1(), null); 
    }

    |('kw3' 
    {
        createLeafNode(grammarAccess.getLoop4Access().getKw3Keyword_1_2_0(), null); 
    }
'kw4' 
    {
        createLeafNode(grammarAccess.getLoop4Access().getKw4Keyword_1_2_1(), null); 
    }
))(
(
		lv_id_5_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLoop4Access().getIdIDTerminalRuleCall_2_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoop4Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"id",
	        		lv_id_5_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)('kw5' 
    {
        createLeafNode(grammarAccess.getLoop4Access().getKw5Keyword_3_0(), null); 
    }
('kw6' 
    {
        createLeafNode(grammarAccess.getLoop4Access().getKw6Keyword_3_1_0(), null); 
    }
('kw7' 
    {
        createLeafNode(grammarAccess.getLoop4Access().getKw7Keyword_3_1_1(), null); 
    }
)?)?)+);





// Entry rule entryRuleLoopBug285452
entryRuleLoopBug285452 returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLoopBug285452Rule(), currentNode); }
	 iv_ruleLoopBug285452=ruleLoopBug285452 
	 { $current=$iv_ruleLoopBug285452.current; } 
	 EOF 
;

// Rule LoopBug285452
ruleLoopBug285452 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('#12' 
    {
        createLeafNode(grammarAccess.getLoopBug285452Access().getNumberSignDigitOneDigitTwoKeyword_0(), null); 
    }
((
(
		lv_interface_1_0='interface' 
    {
        createLeafNode(grammarAccess.getLoopBug285452Access().getInterfaceInterfaceKeyword_1_0_0(), "interface"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopBug285452Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "interface", true, "interface", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |'class' 
    {
        createLeafNode(grammarAccess.getLoopBug285452Access().getClassKeyword_1_1(), null); 
    }
)(
(
		lv_name_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLoopBug285452Access().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopBug285452Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
));





// Entry rule entryRuleDuplicateBug284491
entryRuleDuplicateBug284491 returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDuplicateBug284491Rule(), currentNode); }
	 iv_ruleDuplicateBug284491=ruleDuplicateBug284491 
	 { $current=$iv_ruleDuplicateBug284491.current; } 
	 EOF 
;

// Rule DuplicateBug284491
ruleDuplicateBug284491 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('#13' 
    {
        createLeafNode(grammarAccess.getDuplicateBug284491Access().getNumberSignDigitOneDigitThreeKeyword_0(), null); 
    }
((
(
		lv_static_1_0='static' 
    {
        createLeafNode(grammarAccess.getDuplicateBug284491Access().getStaticStaticKeyword_1_0_0(), "static"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDuplicateBug284491Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "static", true, "static", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_final_2_0='final' 
    {
        createLeafNode(grammarAccess.getDuplicateBug284491Access().getFinalFinalKeyword_1_1_0(), "final"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDuplicateBug284491Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "final", true, "final", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_transient_3_0='transient' 
    {
        createLeafNode(grammarAccess.getDuplicateBug284491Access().getTransientTransientKeyword_1_2_0(), "transient"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDuplicateBug284491Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "transient", true, "transient", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))*);





// Entry rule entryRuleEmptyObjectBug284850
entryRuleEmptyObjectBug284850 returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEmptyObjectBug284850Rule(), currentNode); }
	 iv_ruleEmptyObjectBug284850=ruleEmptyObjectBug284850 
	 { $current=$iv_ruleEmptyObjectBug284850.current; } 
	 EOF 
;

// Rule EmptyObjectBug284850
ruleEmptyObjectBug284850 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('#14' 
    {
        createLeafNode(grammarAccess.getEmptyObjectBug284850Access().getNumberSignDigitOneDigitFourKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEmptyObjectBug284850Access().getItemsEmptyObjectItemsParserRuleCall_1_0(), currentNode); 
	    }
		lv_items_1_0=ruleEmptyObjectItems		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEmptyObjectBug284850Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"items",
	        		lv_items_1_0, 
	        		"EmptyObjectItems", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
));





// Entry rule entryRuleEmptyObjectItems
entryRuleEmptyObjectItems returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEmptyObjectItemsRule(), currentNode); }
	 iv_ruleEmptyObjectItems=ruleEmptyObjectItems 
	 { $current=$iv_ruleEmptyObjectItems.current; } 
	 EOF 
;

// Rule EmptyObjectItems
ruleEmptyObjectItems returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEmptyObjectItemsAccess().getListEmptyObjectItemParserRuleCall_0(), currentNode); 
	    }
		lv_list_0_0=ruleEmptyObjectItem		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEmptyObjectItemsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"list",
	        		lv_list_0_0, 
	        		"EmptyObjectItem", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*;





// Entry rule entryRuleEmptyObjectItem
entryRuleEmptyObjectItem returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEmptyObjectItemRule(), currentNode); }
	 iv_ruleEmptyObjectItem=ruleEmptyObjectItem 
	 { $current=$iv_ruleEmptyObjectItem.current; } 
	 EOF 
;

// Rule EmptyObjectItem
ruleEmptyObjectItem returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('item' 
    {
        createLeafNode(grammarAccess.getEmptyObjectItemAccess().getItemKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEmptyObjectItemAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEmptyObjectItemRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
));





// Entry rule entryRuleMultiInheritanceBug280439
entryRuleMultiInheritanceBug280439 returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getMultiInheritanceBug280439Rule(), currentNode); }
	 iv_ruleMultiInheritanceBug280439=ruleMultiInheritanceBug280439 
	 { $current=$iv_ruleMultiInheritanceBug280439.current; } 
	 EOF 
;

// Rule MultiInheritanceBug280439
ruleMultiInheritanceBug280439 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('#15' 
    {
        createLeafNode(grammarAccess.getMultiInheritanceBug280439Access().getNumberSignDigitOneDigitFiveKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiInheritanceBug280439Access().getValConcreteMultiParserRuleCall_1_0(), currentNode); 
	    }
		lv_val_1_0=ruleConcreteMulti		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiInheritanceBug280439Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"val",
	        		lv_val_1_0, 
	        		"ConcreteMulti", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
));









// Entry rule entryRuleConcreteMulti
entryRuleConcreteMulti returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getConcreteMultiRule(), currentNode); }
	 iv_ruleConcreteMulti=ruleConcreteMulti 
	 { $current=$iv_ruleConcreteMulti.current; } 
	 EOF 
;

// Rule ConcreteMulti
ruleConcreteMulti returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_m1_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getConcreteMultiAccess().getM1IDTerminalRuleCall_0_0(), "m1"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcreteMultiRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"m1",
	        		lv_m1_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_m2_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getConcreteMultiAccess().getM2IDTerminalRuleCall_1_0(), "m2"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcreteMultiRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"m2",
	        		lv_m2_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
));





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


