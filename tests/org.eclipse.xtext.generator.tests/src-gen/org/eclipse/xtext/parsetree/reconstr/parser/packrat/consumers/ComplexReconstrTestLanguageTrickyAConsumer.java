/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.parsetree.reconstr.services.ComplexReconstrTestLanguageGrammarAccess.TrickyAElements;

public final class ComplexReconstrTestLanguageTrickyAConsumer extends NonTerminalConsumer {

	private TrickyAElements rule;	

	private ITerminalConsumer idConsumer;

	private ITerminalConsumer stringConsumer;

	private INonTerminalConsumer trickyA1Consumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer keyword$5$Consumer;

	private IElementConsumer ruleCall$6$Consumer;

	private IElementConsumer assignment$7$Consumer;

	private IElementConsumer ruleCall$8$Consumer;

	private IElementConsumer alternatives$9$Consumer;

	private IElementConsumer group$10$Consumer;

	private IElementConsumer action$11$Consumer;

	private IElementConsumer keyword$13$Consumer;

	private IElementConsumer group$14$Consumer;

	private IElementConsumer action$15$Consumer;

	private IElementConsumer keyword$17$Consumer;

	private IElementConsumer assignment$18$Consumer;

	private IElementConsumer ruleCall$19$Consumer;

	private ICharacterClass keyword$5$Delimiter;

	private ICharacterClass keyword$13$Delimiter;

	private ICharacterClass keyword$17$Delimiter;

	private ISequenceMatcher ruleCall$8$Delimiter;

	private ISequenceMatcher ruleCall$19$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$5$Consumer);
			acceptor.accept(ruleCall$6$Consumer);
			acceptor.accept(assignment$7$Consumer);
			acceptor.accept(alternatives$9$Consumer);
			acceptor.accept(assignment$18$Consumer);
		}
	}

	protected class Keyword$5$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$5$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$5$Delimiter(), optional);
		}
	}

	protected class RuleCall$6$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$6$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(trickyA1Consumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$7$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$7$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$8$Consumer;
		}
	}

	protected class RuleCall$8$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$8$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "name", true, false, getElement(), getRuleCall$8$Delimiter(), optional);
		}
	}

	protected class Alternatives$9$Consumer extends OptionalAlternativesConsumer {
		
		protected Alternatives$9$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$10$Consumer);
			acceptor.accept(group$14$Consumer);
		}
	}

	protected class Group$10$Consumer extends GroupConsumer {
		
		protected Group$10$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(action$11$Consumer);
			acceptor.accept(keyword$13$Consumer);
		}
	}

	protected class Action$11$Consumer extends ElementConsumer<Action> {
		
		protected Action$11$Consumer(final Action action) {
			super(action);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			consumeAction(getElement(), false);
			return SUCCESS;
		}
	}

	protected class Keyword$13$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$13$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$13$Delimiter(), optional);
		}
	}

	protected class Group$14$Consumer extends GroupConsumer {
		
		protected Group$14$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(action$15$Consumer);
			acceptor.accept(keyword$17$Consumer);
		}
	}

	protected class Action$15$Consumer extends ElementConsumer<Action> {
		
		protected Action$15$Consumer(final Action action) {
			super(action);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			consumeAction(getElement(), false);
			return SUCCESS;
		}
	}

	protected class Keyword$17$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$17$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$17$Delimiter(), optional);
		}
	}

	protected class Assignment$18$Consumer extends AssignmentConsumer {
		
		protected Assignment$18$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$19$Consumer;
		}
	}

	protected class RuleCall$19$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$19$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "name", true, false, getElement(), getRuleCall$19$Delimiter(), optional);
		}
	}

	public ComplexReconstrTestLanguageTrickyAConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$5$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$13$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$17$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$8$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$19$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public TrickyAElements getRule() {
		return rule;
	}
	
	public void setRule(TrickyAElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		keyword$5$Consumer = new Keyword$5$Consumer(rule.ele0000KeywordTA());
		ruleCall$6$Consumer = new RuleCall$6$Consumer(rule.ele0001ParserRuleCallTrickyA1());
		assignment$7$Consumer = new Assignment$7$Consumer(rule.ele001AssignmentName());
		ruleCall$8$Consumer = new RuleCall$8$Consumer(rule.ele0010ParserRuleCallID());
		alternatives$9$Consumer = new Alternatives$9$Consumer(rule.ele01Alternatives());
		group$10$Consumer = new Group$10$Consumer(rule.ele010Group());
		action$11$Consumer = new Action$11$Consumer(rule.ele0100ActionTypeBx());
		keyword$13$Consumer = new Keyword$13$Consumer(rule.ele0101KeywordX());
		group$14$Consumer = new Group$14$Consumer(rule.ele011Group());
		action$15$Consumer = new Action$15$Consumer(rule.ele0110ActionTypeCx());
		keyword$17$Consumer = new Keyword$17$Consumer(rule.ele0111KeywordY());
		assignment$18$Consumer = new Assignment$18$Consumer(rule.ele1AssignmentName());
		ruleCall$19$Consumer = new RuleCall$19$Consumer(rule.ele10ParserRuleCallSTRING());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setStringConsumer(ITerminalConsumer stringConsumer) {
		this.stringConsumer = stringConsumer;
	}
	
	public void setTrickyA1Consumer(INonTerminalConsumer trickyA1Consumer) {
		this.trickyA1Consumer = trickyA1Consumer;
	}
	
	public ICharacterClass getKeyword$5$Delimiter() {
		return keyword$5$Delimiter;
	}
	
	public void setKeyword$5$Delimiter(ICharacterClass characterClass) {
		keyword$5$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$13$Delimiter() {
		return keyword$13$Delimiter;
	}
	
	public void setKeyword$13$Delimiter(ICharacterClass characterClass) {
		keyword$13$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$17$Delimiter() {
		return keyword$17$Delimiter;
	}
	
	public void setKeyword$17$Delimiter(ICharacterClass characterClass) {
		keyword$17$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$8$Delimiter() {
		return ruleCall$8$Delimiter;
	}
	
	public void setRuleCall$8$Delimiter(ISequenceMatcher matcher) {
		ruleCall$8$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$19$Delimiter() {
		return ruleCall$19$Delimiter;
	}
	
	public void setRuleCall$19$Delimiter(ISequenceMatcher matcher) {
		ruleCall$19$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
