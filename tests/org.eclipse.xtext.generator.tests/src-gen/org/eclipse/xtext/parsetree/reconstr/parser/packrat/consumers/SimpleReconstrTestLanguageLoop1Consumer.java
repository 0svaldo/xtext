/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.parsetree.reconstr.services.SimpleReconstrTestLanguageGrammarAccess.Loop1Elements;

public final class SimpleReconstrTestLanguageLoop1Consumer extends NonTerminalConsumer {

	private Loop1Elements rule;	

	private ITerminalConsumer idConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer keyword$2$Consumer;

	private IElementConsumer keyword$3$Consumer;

	private IElementConsumer assignment$4$Consumer;

	private IElementConsumer ruleCall$5$Consumer;

	private IElementConsumer keyword$6$Consumer;

	private IElementConsumer assignment$7$Consumer;

	private IElementConsumer ruleCall$8$Consumer;

	private IElementConsumer group$9$Consumer;

	private IElementConsumer keyword$10$Consumer;

	private IElementConsumer keyword$11$Consumer;

	private ICharacterClass keyword$2$Delimiter;

	private ICharacterClass keyword$3$Delimiter;

	private ICharacterClass keyword$6$Delimiter;

	private ICharacterClass keyword$10$Delimiter;

	private ICharacterClass keyword$11$Delimiter;

	private ISequenceMatcher ruleCall$5$Delimiter;

	private ISequenceMatcher ruleCall$8$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$2$Consumer);
			acceptor.accept(keyword$3$Consumer);
			acceptor.accept(assignment$4$Consumer);
			acceptor.accept(keyword$6$Consumer);
			acceptor.accept(assignment$7$Consumer);
			acceptor.accept(group$9$Consumer);
		}
	}

	protected class Keyword$2$Consumer extends OptionalElementConsumer<Keyword> {
		
		protected Keyword$2$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$2$Delimiter(), optional);
		}
	}

	protected class Keyword$3$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$3$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$3$Delimiter(), optional);
		}
	}

	protected class Assignment$4$Consumer extends AssignmentConsumer {
		
		protected Assignment$4$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$5$Consumer;
		}
	}

	protected class RuleCall$5$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$5$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "id", true, false, getElement(), getRuleCall$5$Delimiter(), optional);
		}
	}

	protected class Keyword$6$Consumer extends OptionalElementConsumer<Keyword> {
		
		protected Keyword$6$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$6$Delimiter(), optional);
		}
	}

	protected class Assignment$7$Consumer extends AssignmentConsumer {
		
		protected Assignment$7$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$8$Consumer;
		}
	}

	protected class RuleCall$8$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$8$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "id", true, false, getElement(), getRuleCall$8$Delimiter(), optional);
		}
	}

	protected class Group$9$Consumer extends MandatoryLoopGroupConsumer {
		
		protected Group$9$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$10$Consumer);
			acceptor.accept(keyword$11$Consumer);
		}
	}

	protected class Keyword$10$Consumer extends LoopElementConsumer<Keyword> {
		
		protected Keyword$10$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$10$Delimiter(), optional);
		}
	}

	protected class Keyword$11$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$11$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$11$Delimiter(), optional);
		}
	}

	public SimpleReconstrTestLanguageLoop1Consumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$2$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$3$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$6$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$10$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$11$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$5$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$8$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public Loop1Elements getRule() {
		return rule;
	}
	
	public void setRule(Loop1Elements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		keyword$2$Consumer = new Keyword$2$Consumer(rule.getKw0Keyword_0());
		keyword$3$Consumer = new Keyword$3$Consumer(rule.getNumberSignDigitEightKeyword_1());
		assignment$4$Consumer = new Assignment$4$Consumer(rule.getIdAssignment_2());
		ruleCall$5$Consumer = new RuleCall$5$Consumer(rule.getIdIDTerminalRuleCall_2_0());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.getKw1Keyword_3());
		assignment$7$Consumer = new Assignment$7$Consumer(rule.getIdAssignment_4());
		ruleCall$8$Consumer = new RuleCall$8$Consumer(rule.getIdIDTerminalRuleCall_4_0());
		group$9$Consumer = new Group$9$Consumer(rule.getGroup_5());
		keyword$10$Consumer = new Keyword$10$Consumer(rule.getKw2Keyword_5_0());
		keyword$11$Consumer = new Keyword$11$Consumer(rule.getKw30Keyword_5_1());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public ICharacterClass getKeyword$2$Delimiter() {
		return keyword$2$Delimiter;
	}
	
	public void setKeyword$2$Delimiter(ICharacterClass characterClass) {
		keyword$2$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$3$Delimiter() {
		return keyword$3$Delimiter;
	}
	
	public void setKeyword$3$Delimiter(ICharacterClass characterClass) {
		keyword$3$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$6$Delimiter() {
		return keyword$6$Delimiter;
	}
	
	public void setKeyword$6$Delimiter(ICharacterClass characterClass) {
		keyword$6$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$10$Delimiter() {
		return keyword$10$Delimiter;
	}
	
	public void setKeyword$10$Delimiter(ICharacterClass characterClass) {
		keyword$10$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$11$Delimiter() {
		return keyword$11$Delimiter;
	}
	
	public void setKeyword$11$Delimiter(ICharacterClass characterClass) {
		keyword$11$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$5$Delimiter() {
		return ruleCall$5$Delimiter;
	}
	
	public void setRuleCall$5$Delimiter(ISequenceMatcher matcher) {
		ruleCall$5$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$8$Delimiter() {
		return ruleCall$8$Delimiter;
	}
	
	public void setRuleCall$8$Delimiter(ISequenceMatcher matcher) {
		ruleCall$8$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
