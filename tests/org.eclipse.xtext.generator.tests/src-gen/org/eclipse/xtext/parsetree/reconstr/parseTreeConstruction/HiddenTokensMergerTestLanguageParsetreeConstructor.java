/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.reconstr.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.parsetree.reconstr.services.HiddenTokensMergerTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class HiddenTokensMergerTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private HiddenTokensMergerTestLanguageGrammarAccess grammarAccess;
	
	@Override	
	public HiddenTokensMergerTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_DatatypeBug286557ParserRuleCall(this, this, 0, inst);
			case 1: return new DatatypeBug286557_Group(this, this, 1, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 *   DatatypeBug286557;
 *
 **/

// DatatypeBug286557
protected class Model_DatatypeBug286557ParserRuleCall extends RuleCallToken {
	
	public Model_DatatypeBug286557ParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelAccess().getDatatypeBug286557ParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DatatypeBug286557_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DatatypeBug286557_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDatatypeBug286557Rule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule Model ****************/


/************ begin Rule DatatypeBug286557 ****************
 *
 * DatatypeBug286557:
 *   "#1" name=FQN ("ref" ref=[DatatypeBug286557|FQN])? ";";
 *
 **/

// "#1" name=FQN ("ref" ref=[DatatypeBug286557|FQN])? ";"
protected class DatatypeBug286557_Group extends GroupToken {
	
	public DatatypeBug286557_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDatatypeBug286557Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DatatypeBug286557_SemicolonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDatatypeBug286557Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#1"
protected class DatatypeBug286557_NumberSignDigitOneKeyword_0 extends KeywordToken  {
	
	public DatatypeBug286557_NumberSignDigitOneKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDatatypeBug286557Access().getNumberSignDigitOneKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=FQN
protected class DatatypeBug286557_NameAssignment_1 extends AssignmentToken  {
	
	public DatatypeBug286557_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDatatypeBug286557Access().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DatatypeBug286557_NumberSignDigitOneKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getDatatypeBug286557Access().getNameFQNParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("ref" ref=[DatatypeBug286557|FQN])?
protected class DatatypeBug286557_Group_2 extends GroupToken {
	
	public DatatypeBug286557_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDatatypeBug286557Access().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DatatypeBug286557_RefAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "ref"
protected class DatatypeBug286557_RefKeyword_2_0 extends KeywordToken  {
	
	public DatatypeBug286557_RefKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDatatypeBug286557Access().getRefKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DatatypeBug286557_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ref=[DatatypeBug286557|FQN]
protected class DatatypeBug286557_RefAssignment_2_1 extends AssignmentToken  {
	
	public DatatypeBug286557_RefAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDatatypeBug286557Access().getRefAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DatatypeBug286557_RefKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("ref",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ref");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDatatypeBug286557Access().getRefDatatypeBug286557CrossReference_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getDatatypeBug286557Access().getRefDatatypeBug286557CrossReference_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// ";"
protected class DatatypeBug286557_SemicolonKeyword_3 extends KeywordToken  {
	
	public DatatypeBug286557_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDatatypeBug286557Access().getSemicolonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DatatypeBug286557_Group_2(parent, this, 0, inst);
			case 1: return new DatatypeBug286557_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule DatatypeBug286557 ****************/


}
