/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;

import org.eclipse.xtext.parsetree.reconstr.services.SimpleReconstrTestLanguageGrammarAccess.TermElements;

public final class SimpleReconstrTestLanguageTermConsumer extends NonTerminalConsumer {

	private TermElements rule;	

	private INonTerminalConsumer atomConsumer;

	private INonTerminalConsumer booleanConsumer;

	private INonTerminalConsumer consumed1Consumer;

	private INonTerminalConsumer consumed2Consumer;

	private INonTerminalConsumer loop1Consumer;

	private INonTerminalConsumer loop2Consumer;

	private INonTerminalConsumer loop3Consumer;

	private INonTerminalConsumer loop4Consumer;

	private INonTerminalConsumer manyStringsConsumer;

	private INonTerminalConsumer parensConsumer;

	private INonTerminalConsumer ref2Consumer;

	private INonTerminalConsumer spareConsumer;

	private INonTerminalConsumer transient1Consumer;

	private INonTerminalConsumer twoNumbersConsumer;

	private INonTerminalConsumer typeConsumer;

	private IElementConsumer alternatives$1$Consumer;

	private IElementConsumer ruleCall$2$Consumer;

	private IElementConsumer ruleCall$3$Consumer;

	private IElementConsumer ruleCall$4$Consumer;

	private IElementConsumer ruleCall$5$Consumer;

	private IElementConsumer ruleCall$6$Consumer;

	private IElementConsumer ruleCall$7$Consumer;

	private IElementConsumer ruleCall$8$Consumer;

	private IElementConsumer ruleCall$9$Consumer;

	private IElementConsumer ruleCall$10$Consumer;

	private IElementConsumer ruleCall$11$Consumer;

	private IElementConsumer ruleCall$12$Consumer;

	private IElementConsumer ruleCall$13$Consumer;

	private IElementConsumer ruleCall$14$Consumer;

	private IElementConsumer ruleCall$15$Consumer;

	private IElementConsumer ruleCall$16$Consumer;

	protected class Alternatives$1$Consumer extends AlternativesConsumer {
		
		protected Alternatives$1$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(ruleCall$2$Consumer);
			acceptor.accept(ruleCall$3$Consumer);
			acceptor.accept(ruleCall$4$Consumer);
			acceptor.accept(ruleCall$5$Consumer);
			acceptor.accept(ruleCall$6$Consumer);
			acceptor.accept(ruleCall$7$Consumer);
			acceptor.accept(ruleCall$8$Consumer);
			acceptor.accept(ruleCall$9$Consumer);
			acceptor.accept(ruleCall$10$Consumer);
			acceptor.accept(ruleCall$11$Consumer);
			acceptor.accept(ruleCall$12$Consumer);
			acceptor.accept(ruleCall$13$Consumer);
			acceptor.accept(ruleCall$14$Consumer);
			acceptor.accept(ruleCall$15$Consumer);
			acceptor.accept(ruleCall$16$Consumer);
		}
	}

	protected class RuleCall$2$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$2$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(atomConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$3$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$3$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(twoNumbersConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$4$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$4$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(manyStringsConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$5$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$5$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(parensConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$6$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$6$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(typeConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$7$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$7$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(ref2Consumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$8$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$8$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(spareConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$9$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$9$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(booleanConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$10$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$10$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(transient1Consumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$11$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$11$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(consumed1Consumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$12$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$12$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(consumed2Consumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$13$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$13$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(loop1Consumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$14$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$14$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(loop2Consumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$15$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$15$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(loop3Consumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$16$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$16$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(loop4Consumer, null, false, false, false, getElement(), optional);
		}
	}

	public SimpleReconstrTestLanguageTermConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
	}
	
	@Override
	protected int doConsume() throws Exception {
		return alternatives$1$Consumer.consume();
	}

	public TermElements getRule() {
		return rule;
	}
	
	public void setRule(TermElements rule) {
		this.rule = rule;
		
		alternatives$1$Consumer = new Alternatives$1$Consumer(rule.getAlternatives());
		ruleCall$2$Consumer = new RuleCall$2$Consumer(rule.getAtomParserRuleCall_0());
		ruleCall$3$Consumer = new RuleCall$3$Consumer(rule.getTwoNumbersParserRuleCall_1());
		ruleCall$4$Consumer = new RuleCall$4$Consumer(rule.getManyStringsParserRuleCall_2());
		ruleCall$5$Consumer = new RuleCall$5$Consumer(rule.getParensParserRuleCall_3());
		ruleCall$6$Consumer = new RuleCall$6$Consumer(rule.getTypeParserRuleCall_4());
		ruleCall$7$Consumer = new RuleCall$7$Consumer(rule.getRef2ParserRuleCall_5());
		ruleCall$8$Consumer = new RuleCall$8$Consumer(rule.getSpareParserRuleCall_6());
		ruleCall$9$Consumer = new RuleCall$9$Consumer(rule.getBooleanParserRuleCall_7());
		ruleCall$10$Consumer = new RuleCall$10$Consumer(rule.getTransient1ParserRuleCall_8());
		ruleCall$11$Consumer = new RuleCall$11$Consumer(rule.getConsumed1ParserRuleCall_9());
		ruleCall$12$Consumer = new RuleCall$12$Consumer(rule.getConsumed2ParserRuleCall_10());
		ruleCall$13$Consumer = new RuleCall$13$Consumer(rule.getLoop1ParserRuleCall_11());
		ruleCall$14$Consumer = new RuleCall$14$Consumer(rule.getLoop2ParserRuleCall_12());
		ruleCall$15$Consumer = new RuleCall$15$Consumer(rule.getLoop3ParserRuleCall_13());
		ruleCall$16$Consumer = new RuleCall$16$Consumer(rule.getLoop4ParserRuleCall_14());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setAtomConsumer(INonTerminalConsumer atomConsumer) {
		this.atomConsumer = atomConsumer;
	}
	
	public void setBooleanConsumer(INonTerminalConsumer booleanConsumer) {
		this.booleanConsumer = booleanConsumer;
	}
	
	public void setConsumed1Consumer(INonTerminalConsumer consumed1Consumer) {
		this.consumed1Consumer = consumed1Consumer;
	}
	
	public void setConsumed2Consumer(INonTerminalConsumer consumed2Consumer) {
		this.consumed2Consumer = consumed2Consumer;
	}
	
	public void setLoop1Consumer(INonTerminalConsumer loop1Consumer) {
		this.loop1Consumer = loop1Consumer;
	}
	
	public void setLoop2Consumer(INonTerminalConsumer loop2Consumer) {
		this.loop2Consumer = loop2Consumer;
	}
	
	public void setLoop3Consumer(INonTerminalConsumer loop3Consumer) {
		this.loop3Consumer = loop3Consumer;
	}
	
	public void setLoop4Consumer(INonTerminalConsumer loop4Consumer) {
		this.loop4Consumer = loop4Consumer;
	}
	
	public void setManyStringsConsumer(INonTerminalConsumer manyStringsConsumer) {
		this.manyStringsConsumer = manyStringsConsumer;
	}
	
	public void setParensConsumer(INonTerminalConsumer parensConsumer) {
		this.parensConsumer = parensConsumer;
	}
	
	public void setRef2Consumer(INonTerminalConsumer ref2Consumer) {
		this.ref2Consumer = ref2Consumer;
	}
	
	public void setSpareConsumer(INonTerminalConsumer spareConsumer) {
		this.spareConsumer = spareConsumer;
	}
	
	public void setTransient1Consumer(INonTerminalConsumer transient1Consumer) {
		this.transient1Consumer = transient1Consumer;
	}
	
	public void setTwoNumbersConsumer(INonTerminalConsumer twoNumbersConsumer) {
		this.twoNumbersConsumer = twoNumbersConsumer;
	}
	
	public void setTypeConsumer(INonTerminalConsumer typeConsumer) {
		this.typeConsumer = typeConsumer;
	}
	
}
