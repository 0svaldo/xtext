/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;

import org.eclipse.xtext.parsetree.reconstr.services.SimpleReconstrTestLanguageGrammarAccess.TermElements;

public final class SimpleReconstrTestLanguageTermConsumer extends NonTerminalConsumer {

	private TermElements rule;	

	private INonTerminalConsumer atomConsumer;

	private INonTerminalConsumer booleanConsumer;

	private INonTerminalConsumer manyStringsConsumer;

	private INonTerminalConsumer parensConsumer;

	private INonTerminalConsumer ref2Consumer;

	private INonTerminalConsumer spareConsumer;

	private INonTerminalConsumer twoNumbersConsumer;

	private INonTerminalConsumer typeConsumer;

	private IElementConsumer alternatives$1$Consumer;

	private IElementConsumer ruleCall$8$Consumer;

	private IElementConsumer ruleCall$9$Consumer;

	private IElementConsumer ruleCall$10$Consumer;

	private IElementConsumer ruleCall$11$Consumer;

	private IElementConsumer ruleCall$12$Consumer;

	private IElementConsumer ruleCall$13$Consumer;

	private IElementConsumer ruleCall$14$Consumer;

	private IElementConsumer ruleCall$15$Consumer;

	protected class Alternatives$1$Consumer extends AlternativesConsumer {
		
		protected Alternatives$1$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(ruleCall$8$Consumer);
			acceptor.accept(ruleCall$9$Consumer);
			acceptor.accept(ruleCall$10$Consumer);
			acceptor.accept(ruleCall$11$Consumer);
			acceptor.accept(ruleCall$12$Consumer);
			acceptor.accept(ruleCall$13$Consumer);
			acceptor.accept(ruleCall$14$Consumer);
			acceptor.accept(ruleCall$15$Consumer);
		}
	}

	protected class RuleCall$8$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$8$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(atomConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$9$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$9$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(twoNumbersConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$10$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$10$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(manyStringsConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$11$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$11$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(parensConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$12$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$12$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(typeConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$13$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$13$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(ref2Consumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$14$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$14$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(spareConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$15$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$15$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(booleanConsumer, null, false, false, false, getElement(), optional);
		}
	}

	public SimpleReconstrTestLanguageTermConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
	}
	
	@Override
	protected int doConsume() throws Exception {
		return alternatives$1$Consumer.consume();
	}

	public TermElements getRule() {
		return rule;
	}
	
	public void setRule(TermElements rule) {
		this.rule = rule;
		
		alternatives$1$Consumer = new Alternatives$1$Consumer(rule.eleAlternatives());
		ruleCall$8$Consumer = new RuleCall$8$Consumer(rule.ele0000000ParserRuleCallAtom());
		ruleCall$9$Consumer = new RuleCall$9$Consumer(rule.ele0000001ParserRuleCallTwoNumbers());
		ruleCall$10$Consumer = new RuleCall$10$Consumer(rule.ele000001ParserRuleCallManyStrings());
		ruleCall$11$Consumer = new RuleCall$11$Consumer(rule.ele00001ParserRuleCallParens());
		ruleCall$12$Consumer = new RuleCall$12$Consumer(rule.ele0001ParserRuleCallType());
		ruleCall$13$Consumer = new RuleCall$13$Consumer(rule.ele001ParserRuleCallRef2());
		ruleCall$14$Consumer = new RuleCall$14$Consumer(rule.ele01ParserRuleCallSpare());
		ruleCall$15$Consumer = new RuleCall$15$Consumer(rule.ele1ParserRuleCallBoolean());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setAtomConsumer(INonTerminalConsumer atomConsumer) {
		this.atomConsumer = atomConsumer;
	}
	
	public void setBooleanConsumer(INonTerminalConsumer booleanConsumer) {
		this.booleanConsumer = booleanConsumer;
	}
	
	public void setManyStringsConsumer(INonTerminalConsumer manyStringsConsumer) {
		this.manyStringsConsumer = manyStringsConsumer;
	}
	
	public void setParensConsumer(INonTerminalConsumer parensConsumer) {
		this.parensConsumer = parensConsumer;
	}
	
	public void setRef2Consumer(INonTerminalConsumer ref2Consumer) {
		this.ref2Consumer = ref2Consumer;
	}
	
	public void setSpareConsumer(INonTerminalConsumer spareConsumer) {
		this.spareConsumer = spareConsumer;
	}
	
	public void setTwoNumbersConsumer(INonTerminalConsumer twoNumbersConsumer) {
		this.twoNumbersConsumer = twoNumbersConsumer;
	}
	
	public void setTypeConsumer(INonTerminalConsumer typeConsumer) {
		this.typeConsumer = typeConsumer;
	}
	
}
