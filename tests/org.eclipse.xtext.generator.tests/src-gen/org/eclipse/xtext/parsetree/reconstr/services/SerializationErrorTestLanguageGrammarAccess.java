/*
* generated by Xtext
*/

package org.eclipse.xtext.parsetree.reconstr.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SerializationErrorTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class ModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTestAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTestTestParserRuleCall_0_0 = (RuleCall)cTestAssignment_0.eContents().get(0);
		private final Assignment cTestAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTestParenthesisParserRuleCall_1_0 = (RuleCall)cTestAssignment_1.eContents().get(0);
		
		//Model:
		//  test=Test|test=Parenthesis;
		public ParserRule getRule() { return rule; }

		//test=Test|test=Parenthesis
		public Alternatives getAlternatives() { return cAlternatives; }

		//test=Test
		public Assignment getTestAssignment_0() { return cTestAssignment_0; }

		//Test
		public RuleCall getTestTestParserRuleCall_0_0() { return cTestTestParserRuleCall_0_0; }

		//test=Parenthesis
		public Assignment getTestAssignment_1() { return cTestAssignment_1; }

		//Parenthesis
		public RuleCall getTestParenthesisParserRuleCall_1_0() { return cTestParenthesisParserRuleCall_1_0; }
	}

	public class ParenthesisElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parenthesis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTestParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parenthesis returns Test:
		//  "(" Test ")";
		public ParserRule getRule() { return rule; }

		//"(" Test ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Test
		public RuleCall getTestParserRuleCall_1() { return cTestParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class TestElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Test");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTwoRequiredParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTwoOptionsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Test:
		//  TwoRequired|TwoOptions;
		public ParserRule getRule() { return rule; }

		//TwoRequired|TwoOptions
		public Alternatives getAlternatives() { return cAlternatives; }

		//TwoRequired
		public RuleCall getTwoRequiredParserRuleCall_0() { return cTwoRequiredParserRuleCall_0; }

		//TwoOptions
		public RuleCall getTwoOptionsParserRuleCall_1() { return cTwoOptionsParserRuleCall_1; }
	}

	public class TwoRequiredElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TwoRequired");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTworequiredKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOneAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOneIDTerminalRuleCall_1_0 = (RuleCall)cOneAssignment_1.eContents().get(0);
		private final Assignment cTwoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTwoIDTerminalRuleCall_2_0 = (RuleCall)cTwoAssignment_2.eContents().get(0);
		
		//TwoRequired:
		//  "tworequired" one=ID two=ID;
		public ParserRule getRule() { return rule; }

		//"tworequired" one=ID two=ID
		public Group getGroup() { return cGroup; }

		//"tworequired"
		public Keyword getTworequiredKeyword_0() { return cTworequiredKeyword_0; }

		//one=ID
		public Assignment getOneAssignment_1() { return cOneAssignment_1; }

		//ID
		public RuleCall getOneIDTerminalRuleCall_1_0() { return cOneIDTerminalRuleCall_1_0; }

		//two=ID
		public Assignment getTwoAssignment_2() { return cTwoAssignment_2; }

		//ID
		public RuleCall getTwoIDTerminalRuleCall_2_0() { return cTwoIDTerminalRuleCall_2_0; }
	}

	public class TwoOptionsElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TwoOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTwooptionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cOneKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cOneAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOneIDTerminalRuleCall_1_0_1_0 = (RuleCall)cOneAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cTwoKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cTwoAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTwoIDTerminalRuleCall_1_1_1_0 = (RuleCall)cTwoAssignment_1_1_1.eContents().get(0);
		
		//TwoOptions:
		//  "twooptions" ("one" one=ID|"two" two=ID);
		public ParserRule getRule() { return rule; }

		//"twooptions" ("one" one=ID|"two" two=ID)
		public Group getGroup() { return cGroup; }

		//"twooptions"
		public Keyword getTwooptionsKeyword_0() { return cTwooptionsKeyword_0; }

		//"one" one=ID|"two" two=ID
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"one" one=ID
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"one"
		public Keyword getOneKeyword_1_0_0() { return cOneKeyword_1_0_0; }

		//one=ID
		public Assignment getOneAssignment_1_0_1() { return cOneAssignment_1_0_1; }

		//ID
		public RuleCall getOneIDTerminalRuleCall_1_0_1_0() { return cOneIDTerminalRuleCall_1_0_1_0; }

		//"two" two=ID
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"two"
		public Keyword getTwoKeyword_1_1_0() { return cTwoKeyword_1_1_0; }

		//two=ID
		public Assignment getTwoAssignment_1_1_1() { return cTwoAssignment_1_1_1; }

		//ID
		public RuleCall getTwoIDTerminalRuleCall_1_1_1_0() { return cTwoIDTerminalRuleCall_1_1_1_0; }
	}
	
	
	private ModelElements pModel;
	private ParenthesisElements pParenthesis;
	private TestElements pTest;
	private TwoRequiredElements pTwoRequired;
	private TwoOptionsElements pTwoOptions;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SerializationErrorTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//  test=Test|test=Parenthesis;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Parenthesis returns Test:
	//  "(" Test ")";
	public ParenthesisElements getParenthesisAccess() {
		return (pParenthesis != null) ? pParenthesis : (pParenthesis = new ParenthesisElements());
	}
	
	public ParserRule getParenthesisRule() {
		return getParenthesisAccess().getRule();
	}

	//Test:
	//  TwoRequired|TwoOptions;
	public TestElements getTestAccess() {
		return (pTest != null) ? pTest : (pTest = new TestElements());
	}
	
	public ParserRule getTestRule() {
		return getTestAccess().getRule();
	}

	//TwoRequired:
	//  "tworequired" one=ID two=ID;
	public TwoRequiredElements getTwoRequiredAccess() {
		return (pTwoRequired != null) ? pTwoRequired : (pTwoRequired = new TwoRequiredElements());
	}
	
	public ParserRule getTwoRequiredRule() {
		return getTwoRequiredAccess().getRule();
	}

	//TwoOptions:
	//  "twooptions" ("one" one=ID|"two" two=ID);
	public TwoOptionsElements getTwoOptionsAccess() {
		return (pTwoOptions != null) ? pTwoOptions : (pTwoOptions = new TwoOptionsElements());
	}
	
	public ParserRule getTwoOptionsRule() {
		return getTwoOptionsAccess().getRule();
	}

	//terminal ID:
	//  "^" ? ( "a" .. "z" | "A" .. "Z" | "_" ) ( "a" .. "z" | "A" .. "Z" | "_" | "0" .. "9" ) *;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0" .. "9" +;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ( "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" ) | ! ( "\\" | "\"" ) ) * "\"" | "\'" ( "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" ) | ! ( "\\" | "\'" ) ) * "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *" -> "* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" ! ( "\n" | "\r" ) * ( "\r" ? "\n" ) ?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  ( " " | "\t" | "\r" | "\n" ) +;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
