/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.reconstr.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.parsetree.reconstr.services.SerializationErrorTestLanguageGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.SerializationErrorTestLanguageModelConsumer;
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.SerializationErrorTestLanguageParenthesisConsumer;
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.SerializationErrorTestLanguageTestConsumer;
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.SerializationErrorTestLanguageTwoRequiredConsumer;
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.SerializationErrorTestLanguageTwoOptionsConsumer;
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.SerializationErrorTestLanguageIndentConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class SerializationErrorTestLanguageParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 
    private SerializationErrorTestLanguageModelConsumer modelConsumer;
    private SerializationErrorTestLanguageParenthesisConsumer parenthesisConsumer;
    private SerializationErrorTestLanguageTestConsumer testConsumer;
    private SerializationErrorTestLanguageTwoRequiredConsumer twoRequiredConsumer;
    private SerializationErrorTestLanguageTwoOptionsConsumer twoOptionsConsumer;
    private SerializationErrorTestLanguageIndentConsumer indentConsumer;

	private SerializationErrorTestLanguageGrammarAccess grammarAccess;

	public SerializationErrorTestLanguageParserConfiguration(IInternalParserConfiguration configuration, SerializationErrorTestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public SerializationErrorTestLanguageModelConsumer getRootConsumer() {
		return modelConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		modelConsumer = new SerializationErrorTestLanguageModelConsumer(
    		this, null
    	);
		parenthesisConsumer = new SerializationErrorTestLanguageParenthesisConsumer(
    		this, null
    	);
		testConsumer = new SerializationErrorTestLanguageTestConsumer(
    		this, null
    	);
		twoRequiredConsumer = new SerializationErrorTestLanguageTwoRequiredConsumer(
    		this, null
    	);
		twoOptionsConsumer = new SerializationErrorTestLanguageTwoOptionsConsumer(
    		this, null
    	);
		indentConsumer = new SerializationErrorTestLanguageIndentConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getModelConsumer().setRule(grammarAccess.getModelAccess());
		getParenthesisConsumer().setRule(grammarAccess.getParenthesisAccess());
		getTestConsumer().setRule(grammarAccess.getTestAccess());
		getTwoRequiredConsumer().setRule(grammarAccess.getTwoRequiredAccess());
		getTwoOptionsConsumer().setRule(grammarAccess.getTwoOptionsAccess());
		getIndentConsumer().setRule(grammarAccess.getIndentAccess());
		getIdConsumer().setRule(grammarAccess.getIDRule());
		getIntConsumer().setRule(grammarAccess.getINTRule());
		getStringConsumer().setRule(grammarAccess.getSTRINGRule());
		getMlCommentConsumer().setRule(grammarAccess.getML_COMMENTRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getAnyOtherConsumer().setRule(grammarAccess.getANY_OTHERRule());


		getModelConsumer().setParenthesisConsumer(getParenthesisConsumer());
		getModelConsumer().setTestConsumer(getTestConsumer());

		getParenthesisConsumer().setTestConsumer(getTestConsumer());

		getTestConsumer().setIndentConsumer(getIndentConsumer());
		getTestConsumer().setTwoOptionsConsumer(getTwoOptionsConsumer());
		getTestConsumer().setTwoRequiredConsumer(getTwoRequiredConsumer());

		getTwoRequiredConsumer().setIdConsumer(getIdConsumer());

		getTwoOptionsConsumer().setIdConsumer(getIdConsumer());

		getIndentConsumer().setIndentConsumer(getIndentConsumer());
		getIndentConsumer().setTwoOptionsConsumer(getTwoOptionsConsumer());
		getIndentConsumer().setTwoRequiredConsumer(getTwoRequiredConsumer());

		getParenthesisConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SerializationErrorTestLanguageDelimiters.keyword$11$Delimiter);
		getParenthesisConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SerializationErrorTestLanguageDelimiters.keyword$11$Delimiter);
		getTwoRequiredConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SerializationErrorTestLanguageDelimiters.keyword$23$Delimiter);
		getTwoRequiredConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SerializationErrorTestLanguageDelimiters.ruleCall$25$Delimiter);
		getTwoRequiredConsumer().setRuleCall$6$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SerializationErrorTestLanguageDelimiters.ruleCall$25$Delimiter);
		getTwoOptionsConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SerializationErrorTestLanguageDelimiters.keyword$23$Delimiter);
		getTwoOptionsConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SerializationErrorTestLanguageDelimiters.keyword$23$Delimiter);
		getTwoOptionsConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SerializationErrorTestLanguageDelimiters.keyword$23$Delimiter);
		getTwoOptionsConsumer().setRuleCall$7$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SerializationErrorTestLanguageDelimiters.ruleCall$25$Delimiter);
		getTwoOptionsConsumer().setRuleCall$11$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SerializationErrorTestLanguageDelimiters.ruleCall$25$Delimiter);
		getIndentConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SerializationErrorTestLanguageDelimiters.keyword$11$Delimiter);
		getIndentConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.SerializationErrorTestLanguageDelimiters.keyword$11$Delimiter);
	}
	
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public SerializationErrorTestLanguageModelConsumer getModelConsumer() {
    	return modelConsumer;
    }

    public SerializationErrorTestLanguageParenthesisConsumer getParenthesisConsumer() {
    	return parenthesisConsumer;
    }

    public SerializationErrorTestLanguageTestConsumer getTestConsumer() {
    	return testConsumer;
    }

    public SerializationErrorTestLanguageTwoRequiredConsumer getTwoRequiredConsumer() {
    	return twoRequiredConsumer;
    }

    public SerializationErrorTestLanguageTwoOptionsConsumer getTwoOptionsConsumer() {
    	return twoOptionsConsumer;
    }

    public SerializationErrorTestLanguageIndentConsumer getIndentConsumer() {
    	return indentConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
