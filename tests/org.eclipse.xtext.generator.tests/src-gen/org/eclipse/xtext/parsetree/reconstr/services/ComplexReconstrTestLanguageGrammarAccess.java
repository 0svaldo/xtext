/*
* generated by Xtext
*/

package org.eclipse.xtext.parsetree.reconstr.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.builtin.XtextBuiltinGrammarAccess;

@Singleton
public class ComplexReconstrTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class RootElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallOp = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallTrickyG = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallOp() { return c0ParserRuleCallOp; }

		// not supported
		public RuleCall ele1ParserRuleCallTrickyG() { return c1ParserRuleCallTrickyG; }
	}

	public class OpElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Op");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallTerm = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives c1Alternatives = (Alternatives)cGroup.eContents().get(1);
		private final Group c10Group = (Group)c1Alternatives.eContents().get(0);
		private final Group c100Group = (Group)c10Group.eContents().get(0);
		private final Action c1000ActionAddaddOperands = (Action)c100Group.eContents().get(0);
		private final Keyword c1001KeywordPlusSign = (Keyword)c100Group.eContents().get(1);
		private final Assignment c101AssignmentAddOperands = (Assignment)c10Group.eContents().get(1);
		private final RuleCall c1010ParserRuleCallTerm = (RuleCall)c101AssignmentAddOperands.eContents().get(0);
		private final Group c11Group = (Group)c1Alternatives.eContents().get(1);
		private final Group c110Group = (Group)c11Group.eContents().get(0);
		private final Action c1100ActionMinusminusOperands = (Action)c110Group.eContents().get(0);
		private final Keyword c1101KeywordHyphenMinus = (Keyword)c110Group.eContents().get(1);
		private final Assignment c111AssignmentMinusOperands = (Assignment)c11Group.eContents().get(1);
		private final RuleCall c1110ParserRuleCallTerm = (RuleCall)c111AssignmentMinusOperands.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public RuleCall ele0ParserRuleCallTerm() { return c0ParserRuleCallTerm; }

		// not supported
		public Alternatives ele1Alternatives() { return c1Alternatives; }

		// not supported
		public Group ele10Group() { return c10Group; }

		// not supported
		public Group ele100Group() { return c100Group; }

		// not supported
		public Action ele1000ActionAddaddOperands() { return c1000ActionAddaddOperands; }

		// not supported
		public Keyword ele1001KeywordPlusSign() { return c1001KeywordPlusSign; }

		// not supported
		public Assignment ele101AssignmentAddOperands() { return c101AssignmentAddOperands; }

		// not supported
		public RuleCall ele1010ParserRuleCallTerm() { return c1010ParserRuleCallTerm; }

		// not supported
		public Group ele11Group() { return c11Group; }

		// not supported
		public Group ele110Group() { return c110Group; }

		// not supported
		public Action ele1100ActionMinusminusOperands() { return c1100ActionMinusminusOperands; }

		// not supported
		public Keyword ele1101KeywordHyphenMinus() { return c1101KeywordHyphenMinus; }

		// not supported
		public Assignment ele111AssignmentMinusOperands() { return c111AssignmentMinusOperands; }

		// not supported
		public RuleCall ele1110ParserRuleCallTerm() { return c1110ParserRuleCallTerm; }
	}

	public class TermElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallAtom = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallParens = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallAtom() { return c0ParserRuleCallAtom; }

		// not supported
		public RuleCall ele1ParserRuleCallParens() { return c1ParserRuleCallParens; }
	}

	public class AtomElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atom");
		private final Assignment cAssignmentName = (Assignment)rule.eContents().get(1);
		private final RuleCall c0LexerRuleCallID = (RuleCall)cAssignmentName.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Assignment eleAssignmentName() { return cAssignmentName; }

		// not supported
		public RuleCall ele0LexerRuleCallID() { return c0LexerRuleCallID; }
	}

	public class ParensElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Keyword c000KeywordLeftParenthesis = (Keyword)c00Group.eContents().get(0);
		private final RuleCall c001ParserRuleCallOp = (RuleCall)c00Group.eContents().get(1);
		private final Keyword c01KeywordRightParenthesis = (Keyword)c0Group.eContents().get(1);
		private final Assignment c1AssignmentEm = (Assignment)cGroup.eContents().get(1);
		private final Keyword c10KeywordExclamationMark = (Keyword)c1AssignmentEm.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Keyword ele000KeywordLeftParenthesis() { return c000KeywordLeftParenthesis; }

		// not supported
		public RuleCall ele001ParserRuleCallOp() { return c001ParserRuleCallOp; }

		// not supported
		public Keyword ele01KeywordRightParenthesis() { return c01KeywordRightParenthesis; }

		// not supported
		public Assignment ele1AssignmentEm() { return c1AssignmentEm; }

		// not supported
		public Keyword ele10KeywordExclamationMark() { return c10KeywordExclamationMark; }
	}

	public class TrickyAElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrickyA");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Group c000Group = (Group)c00Group.eContents().get(0);
		private final Keyword c0000KeywordTA = (Keyword)c000Group.eContents().get(0);
		private final RuleCall c0001ParserRuleCallTrickyA1 = (RuleCall)c000Group.eContents().get(1);
		private final Assignment c001AssignmentName = (Assignment)c00Group.eContents().get(1);
		private final RuleCall c0010LexerRuleCallID = (RuleCall)c001AssignmentName.eContents().get(0);
		private final Alternatives c01Alternatives = (Alternatives)c0Group.eContents().get(1);
		private final Group c010Group = (Group)c01Alternatives.eContents().get(0);
		private final Action c0100ActionTypeBx = (Action)c010Group.eContents().get(0);
		private final Keyword c0101KeywordX = (Keyword)c010Group.eContents().get(1);
		private final Group c011Group = (Group)c01Alternatives.eContents().get(1);
		private final Action c0110ActionTypeCx = (Action)c011Group.eContents().get(0);
		private final Keyword c0111KeywordY = (Keyword)c011Group.eContents().get(1);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10LexerRuleCallSTRING = (RuleCall)c1AssignmentName.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Group ele000Group() { return c000Group; }

		// not supported
		public Keyword ele0000KeywordTA() { return c0000KeywordTA; }

		// not supported
		public RuleCall ele0001ParserRuleCallTrickyA1() { return c0001ParserRuleCallTrickyA1; }

		// not supported
		public Assignment ele001AssignmentName() { return c001AssignmentName; }

		// not supported
		public RuleCall ele0010LexerRuleCallID() { return c0010LexerRuleCallID; }

		// not supported
		public Alternatives ele01Alternatives() { return c01Alternatives; }

		// not supported
		public Group ele010Group() { return c010Group; }

		// not supported
		public Action ele0100ActionTypeBx() { return c0100ActionTypeBx; }

		// not supported
		public Keyword ele0101KeywordX() { return c0101KeywordX; }

		// not supported
		public Group ele011Group() { return c011Group; }

		// not supported
		public Action ele0110ActionTypeCx() { return c0110ActionTypeCx; }

		// not supported
		public Keyword ele0111KeywordY() { return c0111KeywordY; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10LexerRuleCallSTRING() { return c10LexerRuleCallSTRING; }
	}

	public class TrickyA1Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrickyA1");
		private final Assignment cAssignmentName = (Assignment)rule.eContents().get(1);
		private final RuleCall c0LexerRuleCallID = (RuleCall)cAssignmentName.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Assignment eleAssignmentName() { return cAssignmentName; }

		// not supported
		public RuleCall ele0LexerRuleCallID() { return c0LexerRuleCallID; }
	}

	public class TrickyBElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrickyB");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Keyword c00KeywordTB = (Keyword)c0Group.eContents().get(0);
		private final Group c01Group = (Group)c0Group.eContents().get(1);
		private final Assignment c010AssignmentName = (Assignment)c01Group.eContents().get(0);
		private final RuleCall c0100LexerRuleCallID = (RuleCall)c010AssignmentName.eContents().get(0);
		private final Assignment c011AssignmentType = (Assignment)c01Group.eContents().get(1);
		private final RuleCall c0110LexerRuleCallINT = (RuleCall)c011AssignmentType.eContents().get(0);
		private final Assignment c1AssignmentType = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10LexerRuleCallINT = (RuleCall)c1AssignmentType.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Keyword ele00KeywordTB() { return c00KeywordTB; }

		// not supported
		public Group ele01Group() { return c01Group; }

		// not supported
		public Assignment ele010AssignmentName() { return c010AssignmentName; }

		// not supported
		public RuleCall ele0100LexerRuleCallID() { return c0100LexerRuleCallID; }

		// not supported
		public Assignment ele011AssignmentType() { return c011AssignmentType; }

		// not supported
		public RuleCall ele0110LexerRuleCallINT() { return c0110LexerRuleCallINT; }

		// not supported
		public Assignment ele1AssignmentType() { return c1AssignmentType; }

		// not supported
		public RuleCall ele10LexerRuleCallINT() { return c10LexerRuleCallINT; }
	}

	public class TrickyCElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrickyC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Group c000Group = (Group)c00Group.eContents().get(0);
		private final Keyword c0000KeywordTC = (Keyword)c000Group.eContents().get(0);
		private final Assignment c0001AssignmentName = (Assignment)c000Group.eContents().get(1);
		private final RuleCall c00010LexerRuleCallID = (RuleCall)c0001AssignmentName.eContents().get(0);
		private final Group c001Group = (Group)c00Group.eContents().get(1);
		private final Action c0010ActionC1x = (Action)c001Group.eContents().get(0);
		private final Keyword c0011KeywordX = (Keyword)c001Group.eContents().get(1);
		private final Group c01Group = (Group)c0Group.eContents().get(1);
		private final Action c010ActionC2y = (Action)c01Group.eContents().get(0);
		private final Keyword c011KeywordY = (Keyword)c01Group.eContents().get(1);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Action c10ActionC3z = (Action)c1Group.eContents().get(0);
		private final Keyword c11KeywordZ = (Keyword)c1Group.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Group ele000Group() { return c000Group; }

		// not supported
		public Keyword ele0000KeywordTC() { return c0000KeywordTC; }

		// not supported
		public Assignment ele0001AssignmentName() { return c0001AssignmentName; }

		// not supported
		public RuleCall ele00010LexerRuleCallID() { return c00010LexerRuleCallID; }

		// not supported
		public Group ele001Group() { return c001Group; }

		// not supported
		public Action ele0010ActionC1x() { return c0010ActionC1x; }

		// not supported
		public Keyword ele0011KeywordX() { return c0011KeywordX; }

		// not supported
		public Group ele01Group() { return c01Group; }

		// not supported
		public Action ele010ActionC2y() { return c010ActionC2y; }

		// not supported
		public Keyword ele011KeywordY() { return c011KeywordY; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Action ele10ActionC3z() { return c10ActionC3z; }

		// not supported
		public Keyword ele11KeywordZ() { return c11KeywordZ; }
	}

	public class TrickyDElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrickyD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Keyword c000KeywordTD = (Keyword)c00Group.eContents().get(0);
		private final Group c001Group = (Group)c00Group.eContents().get(1);
		private final Group c0010Group = (Group)c001Group.eContents().get(0);
		private final Assignment c00100AssignmentName = (Assignment)c0010Group.eContents().get(0);
		private final RuleCall c001000LexerRuleCallINT = (RuleCall)c00100AssignmentName.eContents().get(0);
		private final Assignment c00101AssignmentFoo = (Assignment)c0010Group.eContents().get(1);
		private final RuleCall c001010LexerRuleCallSTRING = (RuleCall)c00101AssignmentFoo.eContents().get(0);
		private final Assignment c0011AssignmentType = (Assignment)c001Group.eContents().get(1);
		private final RuleCall c00110LexerRuleCallID = (RuleCall)c0011AssignmentType.eContents().get(0);
		private final Group c01Group = (Group)c0Group.eContents().get(1);
		private final Assignment c010AssignmentName = (Assignment)c01Group.eContents().get(0);
		private final RuleCall c0100LexerRuleCallINT = (RuleCall)c010AssignmentName.eContents().get(0);
		private final Assignment c011AssignmentType = (Assignment)c01Group.eContents().get(1);
		private final RuleCall c0110LexerRuleCallID = (RuleCall)c011AssignmentType.eContents().get(0);
		private final Assignment c1AssignmentType = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10LexerRuleCallID = (RuleCall)c1AssignmentType.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Keyword ele000KeywordTD() { return c000KeywordTD; }

		// not supported
		public Group ele001Group() { return c001Group; }

		// not supported
		public Group ele0010Group() { return c0010Group; }

		// not supported
		public Assignment ele00100AssignmentName() { return c00100AssignmentName; }

		// not supported
		public RuleCall ele001000LexerRuleCallINT() { return c001000LexerRuleCallINT; }

		// not supported
		public Assignment ele00101AssignmentFoo() { return c00101AssignmentFoo; }

		// not supported
		public RuleCall ele001010LexerRuleCallSTRING() { return c001010LexerRuleCallSTRING; }

		// not supported
		public Assignment ele0011AssignmentType() { return c0011AssignmentType; }

		// not supported
		public RuleCall ele00110LexerRuleCallID() { return c00110LexerRuleCallID; }

		// not supported
		public Group ele01Group() { return c01Group; }

		// not supported
		public Assignment ele010AssignmentName() { return c010AssignmentName; }

		// not supported
		public RuleCall ele0100LexerRuleCallINT() { return c0100LexerRuleCallINT; }

		// not supported
		public Assignment ele011AssignmentType() { return c011AssignmentType; }

		// not supported
		public RuleCall ele0110LexerRuleCallID() { return c0110LexerRuleCallID; }

		// not supported
		public Assignment ele1AssignmentType() { return c1AssignmentType; }

		// not supported
		public RuleCall ele10LexerRuleCallID() { return c10LexerRuleCallID; }
	}

	public class TrickyEElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrickyE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Keyword c000KeywordTE = (Keyword)c00Group.eContents().get(0);
		private final Group c001Group = (Group)c00Group.eContents().get(1);
		private final Group c0010Group = (Group)c001Group.eContents().get(0);
		private final Assignment c00100AssignmentName = (Assignment)c0010Group.eContents().get(0);
		private final RuleCall c001000LexerRuleCallINT = (RuleCall)c00100AssignmentName.eContents().get(0);
		private final Assignment c00101AssignmentFoo = (Assignment)c0010Group.eContents().get(1);
		private final RuleCall c001010LexerRuleCallSTRING = (RuleCall)c00101AssignmentFoo.eContents().get(0);
		private final Assignment c0011AssignmentType = (Assignment)c001Group.eContents().get(1);
		private final RuleCall c00110LexerRuleCallID = (RuleCall)c0011AssignmentType.eContents().get(0);
		private final Keyword c01KeywordX = (Keyword)c0Group.eContents().get(1);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Assignment c10AssignmentName = (Assignment)c1Group.eContents().get(0);
		private final RuleCall c100LexerRuleCallINT = (RuleCall)c10AssignmentName.eContents().get(0);
		private final Assignment c11AssignmentType = (Assignment)c1Group.eContents().get(1);
		private final RuleCall c110LexerRuleCallID = (RuleCall)c11AssignmentType.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Keyword ele000KeywordTE() { return c000KeywordTE; }

		// not supported
		public Group ele001Group() { return c001Group; }

		// not supported
		public Group ele0010Group() { return c0010Group; }

		// not supported
		public Assignment ele00100AssignmentName() { return c00100AssignmentName; }

		// not supported
		public RuleCall ele001000LexerRuleCallINT() { return c001000LexerRuleCallINT; }

		// not supported
		public Assignment ele00101AssignmentFoo() { return c00101AssignmentFoo; }

		// not supported
		public RuleCall ele001010LexerRuleCallSTRING() { return c001010LexerRuleCallSTRING; }

		// not supported
		public Assignment ele0011AssignmentType() { return c0011AssignmentType; }

		// not supported
		public RuleCall ele00110LexerRuleCallID() { return c00110LexerRuleCallID; }

		// not supported
		public Keyword ele01KeywordX() { return c01KeywordX; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Assignment ele10AssignmentName() { return c10AssignmentName; }

		// not supported
		public RuleCall ele100LexerRuleCallINT() { return c100LexerRuleCallINT; }

		// not supported
		public Assignment ele11AssignmentType() { return c11AssignmentType; }

		// not supported
		public RuleCall ele110LexerRuleCallID() { return c110LexerRuleCallID; }
	}

	public class TrickyFElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrickyF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Keyword c00KeywordTF = (Keyword)c0Group.eContents().get(0);
		private final Group c01Group = (Group)c0Group.eContents().get(1);
		private final Assignment c010AssignmentName = (Assignment)c01Group.eContents().get(0);
		private final RuleCall c0100LexerRuleCallID = (RuleCall)c010AssignmentName.eContents().get(0);
		private final Assignment c011AssignmentType = (Assignment)c01Group.eContents().get(1);
		private final RuleCall c0110LexerRuleCallINT = (RuleCall)c011AssignmentType.eContents().get(0);
		private final Alternatives c1Alternatives = (Alternatives)cGroup.eContents().get(1);
		private final Assignment c10AssignmentName = (Assignment)c1Alternatives.eContents().get(0);
		private final RuleCall c100LexerRuleCallID = (RuleCall)c10AssignmentName.eContents().get(0);
		private final Assignment c11AssignmentType = (Assignment)c1Alternatives.eContents().get(1);
		private final RuleCall c110LexerRuleCallINT = (RuleCall)c11AssignmentType.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Keyword ele00KeywordTF() { return c00KeywordTF; }

		// not supported
		public Group ele01Group() { return c01Group; }

		// not supported
		public Assignment ele010AssignmentName() { return c010AssignmentName; }

		// not supported
		public RuleCall ele0100LexerRuleCallID() { return c0100LexerRuleCallID; }

		// not supported
		public Assignment ele011AssignmentType() { return c011AssignmentType; }

		// not supported
		public RuleCall ele0110LexerRuleCallINT() { return c0110LexerRuleCallINT; }

		// not supported
		public Alternatives ele1Alternatives() { return c1Alternatives; }

		// not supported
		public Assignment ele10AssignmentName() { return c10AssignmentName; }

		// not supported
		public RuleCall ele100LexerRuleCallID() { return c100LexerRuleCallID; }

		// not supported
		public Assignment ele11AssignmentType() { return c11AssignmentType; }

		// not supported
		public RuleCall ele110LexerRuleCallINT() { return c110LexerRuleCallINT; }
	}

	public class TrickyGElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrickyG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordTG = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentTree = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallTrickyG1 = (RuleCall)c1AssignmentTree.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordTG() { return c0KeywordTG; }

		// not supported
		public Assignment ele1AssignmentTree() { return c1AssignmentTree; }

		// not supported
		public RuleCall ele10ParserRuleCallTrickyG1() { return c10ParserRuleCallTrickyG1; }
	}

	public class TrickyG1Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrickyG1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Keyword c00KeywordLeftSquareBracket = (Keyword)c0Group.eContents().get(0);
		private final Group c01Group = (Group)c0Group.eContents().get(1);
		private final Assignment c010AssignmentVals = (Assignment)c01Group.eContents().get(0);
		private final RuleCall c0100ParserRuleCallTrickyG2 = (RuleCall)c010AssignmentVals.eContents().get(0);
		private final Group c011Group = (Group)c01Group.eContents().get(1);
		private final Keyword c0110KeywordComma = (Keyword)c011Group.eContents().get(0);
		private final Assignment c0111AssignmentVals = (Assignment)c011Group.eContents().get(1);
		private final RuleCall c01110ParserRuleCallTrickyG2 = (RuleCall)c0111AssignmentVals.eContents().get(0);
		private final Keyword c1KeywordRightSquareBracket = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Keyword ele00KeywordLeftSquareBracket() { return c00KeywordLeftSquareBracket; }

		// not supported
		public Group ele01Group() { return c01Group; }

		// not supported
		public Assignment ele010AssignmentVals() { return c010AssignmentVals; }

		// not supported
		public RuleCall ele0100ParserRuleCallTrickyG2() { return c0100ParserRuleCallTrickyG2; }

		// not supported
		public Group ele011Group() { return c011Group; }

		// not supported
		public Keyword ele0110KeywordComma() { return c0110KeywordComma; }

		// not supported
		public Assignment ele0111AssignmentVals() { return c0111AssignmentVals; }

		// not supported
		public RuleCall ele01110ParserRuleCallTrickyG2() { return c01110ParserRuleCallTrickyG2; }

		// not supported
		public Keyword ele1KeywordRightSquareBracket() { return c1KeywordRightSquareBracket; }
	}

	public class TrickyG2Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrickyG2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallTrickyG1 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment c1AssignmentVal = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall c10LexerRuleCallINT = (RuleCall)c1AssignmentVal.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallTrickyG1() { return c0ParserRuleCallTrickyG1; }

		// not supported
		public Assignment ele1AssignmentVal() { return c1AssignmentVal; }

		// not supported
		public RuleCall ele10LexerRuleCallINT() { return c10LexerRuleCallINT; }
	}
	
	private RootElements pRoot;
	private OpElements pOp;
	private TermElements pTerm;
	private AtomElements pAtom;
	private ParensElements pParens;
	private TrickyAElements pTrickyA;
	private TrickyA1Elements pTrickyA1;
	private TrickyBElements pTrickyB;
	private TrickyCElements pTrickyC;
	private TrickyDElements pTrickyD;
	private TrickyEElements pTrickyE;
	private TrickyFElements pTrickyF;
	private TrickyGElements pTrickyG;
	private TrickyG1Elements pTrickyG1;
	private TrickyG2Elements pTrickyG2;
	
	private final GrammarProvider grammarProvider;

	private XtextBuiltinGrammarAccess superGrammarAccess;

	@Inject
	public ComplexReconstrTestLanguageGrammarAccess(GrammarProvider grammarProvider, XtextBuiltinGrammarAccess superGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.superGrammarAccess = superGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public XtextBuiltinGrammarAccess getSuperGrammarAccess() {
		return superGrammarAccess;
	}

	
	// not supported
	public RootElements prRoot() {
		return (pRoot != null) ? pRoot : (pRoot = new RootElements());
	} 

	// not supported
	public OpElements prOp() {
		return (pOp != null) ? pOp : (pOp = new OpElements());
	} 

	// not supported
	public TermElements prTerm() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	} 

	// not supported
	public AtomElements prAtom() {
		return (pAtom != null) ? pAtom : (pAtom = new AtomElements());
	} 

	// not supported
	public ParensElements prParens() {
		return (pParens != null) ? pParens : (pParens = new ParensElements());
	} 

	// not supported
	public TrickyAElements prTrickyA() {
		return (pTrickyA != null) ? pTrickyA : (pTrickyA = new TrickyAElements());
	} 

	// not supported
	public TrickyA1Elements prTrickyA1() {
		return (pTrickyA1 != null) ? pTrickyA1 : (pTrickyA1 = new TrickyA1Elements());
	} 

	// not supported
	public TrickyBElements prTrickyB() {
		return (pTrickyB != null) ? pTrickyB : (pTrickyB = new TrickyBElements());
	} 

	// not supported
	public TrickyCElements prTrickyC() {
		return (pTrickyC != null) ? pTrickyC : (pTrickyC = new TrickyCElements());
	} 

	// not supported
	public TrickyDElements prTrickyD() {
		return (pTrickyD != null) ? pTrickyD : (pTrickyD = new TrickyDElements());
	} 

	// not supported
	public TrickyEElements prTrickyE() {
		return (pTrickyE != null) ? pTrickyE : (pTrickyE = new TrickyEElements());
	} 

	// not supported
	public TrickyFElements prTrickyF() {
		return (pTrickyF != null) ? pTrickyF : (pTrickyF = new TrickyFElements());
	} 

	// not supported
	public TrickyGElements prTrickyG() {
		return (pTrickyG != null) ? pTrickyG : (pTrickyG = new TrickyGElements());
	} 

	// not supported
	public TrickyG1Elements prTrickyG1() {
		return (pTrickyG1 != null) ? pTrickyG1 : (pTrickyG1 = new TrickyG1Elements());
	} 

	// not supported
	public TrickyG2Elements prTrickyG2() {
		return (pTrickyG2 != null) ? pTrickyG2 : (pTrickyG2 = new TrickyG2Elements());
	} 

	// not supported
	public LexerRule lrID() {
		return superGrammarAccess.lrID();
	} 

	// not supported
	public LexerRule lrINT() {
		return superGrammarAccess.lrINT();
	} 

	// not supported
	public LexerRule lrSTRING() {
		return superGrammarAccess.lrSTRING();
	} 

	// not supported
	public LexerRule lrML_COMMENT() {
		return superGrammarAccess.lrML_COMMENT();
	} 

	// not supported
	public LexerRule lrSL_COMMENT() {
		return superGrammarAccess.lrSL_COMMENT();
	} 

	// not supported
	public LexerRule lrWS() {
		return superGrammarAccess.lrWS();
	} 

	// not supported
	public LexerRule lrANY_OTHER() {
		return superGrammarAccess.lrANY_OTHER();
	} 
}
