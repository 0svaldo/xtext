/*
* generated by Xtext
*/

package org.eclipse.xtext.parsetree.reconstr.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ComplexReconstrTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class RootElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallOp = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallTrickyG = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallOp() { return c0ParserRuleCallOp; }

		// not supported
		public RuleCall ele1ParserRuleCallTrickyG() { return c1ParserRuleCallTrickyG; }
	}

	public class OpElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Op");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallTerm = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives c1Alternatives = (Alternatives)cGroup.eContents().get(1);
		private final Group c10Group = (Group)c1Alternatives.eContents().get(0);
		private final Action c100ActionAddaddOperands = (Action)c10Group.eContents().get(0);
		private final Keyword c101KeywordPlusSign = (Keyword)c10Group.eContents().get(1);
		private final Assignment c102AssignmentAddOperands = (Assignment)c10Group.eContents().get(2);
		private final RuleCall c1020ParserRuleCallTerm = (RuleCall)c102AssignmentAddOperands.eContents().get(0);
		private final Group c11Group = (Group)c1Alternatives.eContents().get(1);
		private final Action c110ActionMinusminusOperands = (Action)c11Group.eContents().get(0);
		private final Keyword c111KeywordHyphenMinus = (Keyword)c11Group.eContents().get(1);
		private final Assignment c112AssignmentMinusOperands = (Assignment)c11Group.eContents().get(2);
		private final RuleCall c1120ParserRuleCallTerm = (RuleCall)c112AssignmentMinusOperands.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public RuleCall ele0ParserRuleCallTerm() { return c0ParserRuleCallTerm; }

		// not supported
		public Alternatives ele1Alternatives() { return c1Alternatives; }

		// not supported
		public Group ele10Group() { return c10Group; }

		// not supported
		public Action ele100ActionAddaddOperands() { return c100ActionAddaddOperands; }

		// not supported
		public Keyword ele101KeywordPlusSign() { return c101KeywordPlusSign; }

		// not supported
		public Assignment ele102AssignmentAddOperands() { return c102AssignmentAddOperands; }

		// not supported
		public RuleCall ele1020ParserRuleCallTerm() { return c1020ParserRuleCallTerm; }

		// not supported
		public Group ele11Group() { return c11Group; }

		// not supported
		public Action ele110ActionMinusminusOperands() { return c110ActionMinusminusOperands; }

		// not supported
		public Keyword ele111KeywordHyphenMinus() { return c111KeywordHyphenMinus; }

		// not supported
		public Assignment ele112AssignmentMinusOperands() { return c112AssignmentMinusOperands; }

		// not supported
		public RuleCall ele1120ParserRuleCallTerm() { return c1120ParserRuleCallTerm; }
	}

	public class TermElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallAtom = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallParens = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallAtom() { return c0ParserRuleCallAtom; }

		// not supported
		public RuleCall ele1ParserRuleCallParens() { return c1ParserRuleCallParens; }
	}

	public class AtomElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atom");
		private final Assignment cAssignmentName = (Assignment)rule.eContents().get(1);
		private final RuleCall c0TerminalRuleCallID = (RuleCall)cAssignmentName.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Assignment eleAssignmentName() { return cAssignmentName; }

		// not supported
		public RuleCall ele0TerminalRuleCallID() { return c0TerminalRuleCallID; }
	}

	public class ParensElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordLeftParenthesis = (Keyword)cGroup.eContents().get(0);
		private final RuleCall c1ParserRuleCallOp = (RuleCall)cGroup.eContents().get(1);
		private final Keyword c2KeywordRightParenthesis = (Keyword)cGroup.eContents().get(2);
		private final Assignment c3AssignmentEm = (Assignment)cGroup.eContents().get(3);
		private final Keyword c30KeywordExclamationMark = (Keyword)c3AssignmentEm.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordLeftParenthesis() { return c0KeywordLeftParenthesis; }

		// not supported
		public RuleCall ele1ParserRuleCallOp() { return c1ParserRuleCallOp; }

		// not supported
		public Keyword ele2KeywordRightParenthesis() { return c2KeywordRightParenthesis; }

		// not supported
		public Assignment ele3AssignmentEm() { return c3AssignmentEm; }

		// not supported
		public Keyword ele30KeywordExclamationMark() { return c30KeywordExclamationMark; }
	}

	public class TrickyAElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrickyA");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordTA = (Keyword)cGroup.eContents().get(0);
		private final RuleCall c1ParserRuleCallTrickyA1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment c2AssignmentName = (Assignment)cGroup.eContents().get(2);
		private final RuleCall c20TerminalRuleCallID = (RuleCall)c2AssignmentName.eContents().get(0);
		private final Alternatives c3Alternatives = (Alternatives)cGroup.eContents().get(3);
		private final Group c30Group = (Group)c3Alternatives.eContents().get(0);
		private final Action c300ActionTypeBx = (Action)c30Group.eContents().get(0);
		private final Keyword c301KeywordX = (Keyword)c30Group.eContents().get(1);
		private final Group c31Group = (Group)c3Alternatives.eContents().get(1);
		private final Action c310ActionTypeCx = (Action)c31Group.eContents().get(0);
		private final Keyword c311KeywordY = (Keyword)c31Group.eContents().get(1);
		private final Assignment c4AssignmentName = (Assignment)cGroup.eContents().get(4);
		private final RuleCall c40TerminalRuleCallSTRING = (RuleCall)c4AssignmentName.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordTA() { return c0KeywordTA; }

		// not supported
		public RuleCall ele1ParserRuleCallTrickyA1() { return c1ParserRuleCallTrickyA1; }

		// not supported
		public Assignment ele2AssignmentName() { return c2AssignmentName; }

		// not supported
		public RuleCall ele20TerminalRuleCallID() { return c20TerminalRuleCallID; }

		// not supported
		public Alternatives ele3Alternatives() { return c3Alternatives; }

		// not supported
		public Group ele30Group() { return c30Group; }

		// not supported
		public Action ele300ActionTypeBx() { return c300ActionTypeBx; }

		// not supported
		public Keyword ele301KeywordX() { return c301KeywordX; }

		// not supported
		public Group ele31Group() { return c31Group; }

		// not supported
		public Action ele310ActionTypeCx() { return c310ActionTypeCx; }

		// not supported
		public Keyword ele311KeywordY() { return c311KeywordY; }

		// not supported
		public Assignment ele4AssignmentName() { return c4AssignmentName; }

		// not supported
		public RuleCall ele40TerminalRuleCallSTRING() { return c40TerminalRuleCallSTRING; }
	}

	public class TrickyA1Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrickyA1");
		private final Assignment cAssignmentName = (Assignment)rule.eContents().get(1);
		private final RuleCall c0TerminalRuleCallID = (RuleCall)cAssignmentName.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Assignment eleAssignmentName() { return cAssignmentName; }

		// not supported
		public RuleCall ele0TerminalRuleCallID() { return c0TerminalRuleCallID; }
	}

	public class TrickyBElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrickyB");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordTB = (Keyword)cGroup.eContents().get(0);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Assignment c10AssignmentName = (Assignment)c1Group.eContents().get(0);
		private final RuleCall c100TerminalRuleCallID = (RuleCall)c10AssignmentName.eContents().get(0);
		private final Assignment c11AssignmentType = (Assignment)c1Group.eContents().get(1);
		private final RuleCall c110TerminalRuleCallINT = (RuleCall)c11AssignmentType.eContents().get(0);
		private final Assignment c2AssignmentType = (Assignment)cGroup.eContents().get(2);
		private final RuleCall c20TerminalRuleCallINT = (RuleCall)c2AssignmentType.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordTB() { return c0KeywordTB; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Assignment ele10AssignmentName() { return c10AssignmentName; }

		// not supported
		public RuleCall ele100TerminalRuleCallID() { return c100TerminalRuleCallID; }

		// not supported
		public Assignment ele11AssignmentType() { return c11AssignmentType; }

		// not supported
		public RuleCall ele110TerminalRuleCallINT() { return c110TerminalRuleCallINT; }

		// not supported
		public Assignment ele2AssignmentType() { return c2AssignmentType; }

		// not supported
		public RuleCall ele20TerminalRuleCallINT() { return c20TerminalRuleCallINT; }
	}

	public class TrickyCElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrickyC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordTC = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallID = (RuleCall)c1AssignmentName.eContents().get(0);
		private final Group c2Group = (Group)cGroup.eContents().get(2);
		private final Action c20ActionC1x = (Action)c2Group.eContents().get(0);
		private final Keyword c21KeywordX = (Keyword)c2Group.eContents().get(1);
		private final Group c3Group = (Group)cGroup.eContents().get(3);
		private final Action c30ActionC2y = (Action)c3Group.eContents().get(0);
		private final Keyword c31KeywordY = (Keyword)c3Group.eContents().get(1);
		private final Group c4Group = (Group)cGroup.eContents().get(4);
		private final Action c40ActionC3z = (Action)c4Group.eContents().get(0);
		private final Keyword c41KeywordZ = (Keyword)c4Group.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordTC() { return c0KeywordTC; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10TerminalRuleCallID() { return c10TerminalRuleCallID; }

		// not supported
		public Group ele2Group() { return c2Group; }

		// not supported
		public Action ele20ActionC1x() { return c20ActionC1x; }

		// not supported
		public Keyword ele21KeywordX() { return c21KeywordX; }

		// not supported
		public Group ele3Group() { return c3Group; }

		// not supported
		public Action ele30ActionC2y() { return c30ActionC2y; }

		// not supported
		public Keyword ele31KeywordY() { return c31KeywordY; }

		// not supported
		public Group ele4Group() { return c4Group; }

		// not supported
		public Action ele40ActionC3z() { return c40ActionC3z; }

		// not supported
		public Keyword ele41KeywordZ() { return c41KeywordZ; }
	}

	public class TrickyDElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrickyD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordTD = (Keyword)cGroup.eContents().get(0);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Assignment c10AssignmentName = (Assignment)c1Group.eContents().get(0);
		private final RuleCall c100TerminalRuleCallINT = (RuleCall)c10AssignmentName.eContents().get(0);
		private final Assignment c11AssignmentFoo = (Assignment)c1Group.eContents().get(1);
		private final RuleCall c110TerminalRuleCallSTRING = (RuleCall)c11AssignmentFoo.eContents().get(0);
		private final Assignment c12AssignmentType = (Assignment)c1Group.eContents().get(2);
		private final RuleCall c120TerminalRuleCallID = (RuleCall)c12AssignmentType.eContents().get(0);
		private final Group c2Group = (Group)cGroup.eContents().get(2);
		private final Assignment c20AssignmentName = (Assignment)c2Group.eContents().get(0);
		private final RuleCall c200TerminalRuleCallINT = (RuleCall)c20AssignmentName.eContents().get(0);
		private final Assignment c21AssignmentType = (Assignment)c2Group.eContents().get(1);
		private final RuleCall c210TerminalRuleCallID = (RuleCall)c21AssignmentType.eContents().get(0);
		private final Assignment c3AssignmentType = (Assignment)cGroup.eContents().get(3);
		private final RuleCall c30TerminalRuleCallID = (RuleCall)c3AssignmentType.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordTD() { return c0KeywordTD; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Assignment ele10AssignmentName() { return c10AssignmentName; }

		// not supported
		public RuleCall ele100TerminalRuleCallINT() { return c100TerminalRuleCallINT; }

		// not supported
		public Assignment ele11AssignmentFoo() { return c11AssignmentFoo; }

		// not supported
		public RuleCall ele110TerminalRuleCallSTRING() { return c110TerminalRuleCallSTRING; }

		// not supported
		public Assignment ele12AssignmentType() { return c12AssignmentType; }

		// not supported
		public RuleCall ele120TerminalRuleCallID() { return c120TerminalRuleCallID; }

		// not supported
		public Group ele2Group() { return c2Group; }

		// not supported
		public Assignment ele20AssignmentName() { return c20AssignmentName; }

		// not supported
		public RuleCall ele200TerminalRuleCallINT() { return c200TerminalRuleCallINT; }

		// not supported
		public Assignment ele21AssignmentType() { return c21AssignmentType; }

		// not supported
		public RuleCall ele210TerminalRuleCallID() { return c210TerminalRuleCallID; }

		// not supported
		public Assignment ele3AssignmentType() { return c3AssignmentType; }

		// not supported
		public RuleCall ele30TerminalRuleCallID() { return c30TerminalRuleCallID; }
	}

	public class TrickyEElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrickyE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordTE = (Keyword)cGroup.eContents().get(0);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Assignment c10AssignmentName = (Assignment)c1Group.eContents().get(0);
		private final RuleCall c100TerminalRuleCallINT = (RuleCall)c10AssignmentName.eContents().get(0);
		private final Assignment c11AssignmentFoo = (Assignment)c1Group.eContents().get(1);
		private final RuleCall c110TerminalRuleCallSTRING = (RuleCall)c11AssignmentFoo.eContents().get(0);
		private final Assignment c12AssignmentType = (Assignment)c1Group.eContents().get(2);
		private final RuleCall c120TerminalRuleCallID = (RuleCall)c12AssignmentType.eContents().get(0);
		private final Keyword c2KeywordX = (Keyword)cGroup.eContents().get(2);
		private final Group c3Group = (Group)cGroup.eContents().get(3);
		private final Assignment c30AssignmentName = (Assignment)c3Group.eContents().get(0);
		private final RuleCall c300TerminalRuleCallINT = (RuleCall)c30AssignmentName.eContents().get(0);
		private final Assignment c31AssignmentType = (Assignment)c3Group.eContents().get(1);
		private final RuleCall c310TerminalRuleCallID = (RuleCall)c31AssignmentType.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordTE() { return c0KeywordTE; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Assignment ele10AssignmentName() { return c10AssignmentName; }

		// not supported
		public RuleCall ele100TerminalRuleCallINT() { return c100TerminalRuleCallINT; }

		// not supported
		public Assignment ele11AssignmentFoo() { return c11AssignmentFoo; }

		// not supported
		public RuleCall ele110TerminalRuleCallSTRING() { return c110TerminalRuleCallSTRING; }

		// not supported
		public Assignment ele12AssignmentType() { return c12AssignmentType; }

		// not supported
		public RuleCall ele120TerminalRuleCallID() { return c120TerminalRuleCallID; }

		// not supported
		public Keyword ele2KeywordX() { return c2KeywordX; }

		// not supported
		public Group ele3Group() { return c3Group; }

		// not supported
		public Assignment ele30AssignmentName() { return c30AssignmentName; }

		// not supported
		public RuleCall ele300TerminalRuleCallINT() { return c300TerminalRuleCallINT; }

		// not supported
		public Assignment ele31AssignmentType() { return c31AssignmentType; }

		// not supported
		public RuleCall ele310TerminalRuleCallID() { return c310TerminalRuleCallID; }
	}

	public class TrickyFElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrickyF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordTF = (Keyword)cGroup.eContents().get(0);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Assignment c10AssignmentName = (Assignment)c1Group.eContents().get(0);
		private final RuleCall c100TerminalRuleCallID = (RuleCall)c10AssignmentName.eContents().get(0);
		private final Assignment c11AssignmentType = (Assignment)c1Group.eContents().get(1);
		private final RuleCall c110TerminalRuleCallINT = (RuleCall)c11AssignmentType.eContents().get(0);
		private final Alternatives c2Alternatives = (Alternatives)cGroup.eContents().get(2);
		private final Assignment c20AssignmentName = (Assignment)c2Alternatives.eContents().get(0);
		private final RuleCall c200TerminalRuleCallID = (RuleCall)c20AssignmentName.eContents().get(0);
		private final Assignment c21AssignmentType = (Assignment)c2Alternatives.eContents().get(1);
		private final RuleCall c210TerminalRuleCallINT = (RuleCall)c21AssignmentType.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordTF() { return c0KeywordTF; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Assignment ele10AssignmentName() { return c10AssignmentName; }

		// not supported
		public RuleCall ele100TerminalRuleCallID() { return c100TerminalRuleCallID; }

		// not supported
		public Assignment ele11AssignmentType() { return c11AssignmentType; }

		// not supported
		public RuleCall ele110TerminalRuleCallINT() { return c110TerminalRuleCallINT; }

		// not supported
		public Alternatives ele2Alternatives() { return c2Alternatives; }

		// not supported
		public Assignment ele20AssignmentName() { return c20AssignmentName; }

		// not supported
		public RuleCall ele200TerminalRuleCallID() { return c200TerminalRuleCallID; }

		// not supported
		public Assignment ele21AssignmentType() { return c21AssignmentType; }

		// not supported
		public RuleCall ele210TerminalRuleCallINT() { return c210TerminalRuleCallINT; }
	}

	public class TrickyGElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrickyG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordTG = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentTree = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallTrickyG1 = (RuleCall)c1AssignmentTree.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordTG() { return c0KeywordTG; }

		// not supported
		public Assignment ele1AssignmentTree() { return c1AssignmentTree; }

		// not supported
		public RuleCall ele10ParserRuleCallTrickyG1() { return c10ParserRuleCallTrickyG1; }
	}

	public class TrickyG1Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrickyG1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordLeftSquareBracket = (Keyword)cGroup.eContents().get(0);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Assignment c10AssignmentVals = (Assignment)c1Group.eContents().get(0);
		private final RuleCall c100ParserRuleCallTrickyG2 = (RuleCall)c10AssignmentVals.eContents().get(0);
		private final Group c11Group = (Group)c1Group.eContents().get(1);
		private final Keyword c110KeywordComma = (Keyword)c11Group.eContents().get(0);
		private final Assignment c111AssignmentVals = (Assignment)c11Group.eContents().get(1);
		private final RuleCall c1110ParserRuleCallTrickyG2 = (RuleCall)c111AssignmentVals.eContents().get(0);
		private final Keyword c2KeywordRightSquareBracket = (Keyword)cGroup.eContents().get(2);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordLeftSquareBracket() { return c0KeywordLeftSquareBracket; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Assignment ele10AssignmentVals() { return c10AssignmentVals; }

		// not supported
		public RuleCall ele100ParserRuleCallTrickyG2() { return c100ParserRuleCallTrickyG2; }

		// not supported
		public Group ele11Group() { return c11Group; }

		// not supported
		public Keyword ele110KeywordComma() { return c110KeywordComma; }

		// not supported
		public Assignment ele111AssignmentVals() { return c111AssignmentVals; }

		// not supported
		public RuleCall ele1110ParserRuleCallTrickyG2() { return c1110ParserRuleCallTrickyG2; }

		// not supported
		public Keyword ele2KeywordRightSquareBracket() { return c2KeywordRightSquareBracket; }
	}

	public class TrickyG2Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrickyG2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallTrickyG1 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment c1AssignmentVal = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall c10TerminalRuleCallINT = (RuleCall)c1AssignmentVal.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallTrickyG1() { return c0ParserRuleCallTrickyG1; }

		// not supported
		public Assignment ele1AssignmentVal() { return c1AssignmentVal; }

		// not supported
		public RuleCall ele10TerminalRuleCallINT() { return c10TerminalRuleCallINT; }
	}
	
	private RootElements pRoot;
	private OpElements pOp;
	private TermElements pTerm;
	private AtomElements pAtom;
	private ParensElements pParens;
	private TrickyAElements pTrickyA;
	private TrickyA1Elements pTrickyA1;
	private TrickyBElements pTrickyB;
	private TrickyCElements pTrickyC;
	private TrickyDElements pTrickyD;
	private TrickyEElements pTrickyE;
	private TrickyFElements pTrickyF;
	private TrickyGElements pTrickyG;
	private TrickyG1Elements pTrickyG1;
	private TrickyG2Elements pTrickyG2;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess terminalsGrammarAccess;

	@Inject
	public ComplexReconstrTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess terminalsGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.terminalsGrammarAccess = terminalsGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return terminalsGrammarAccess;
	}

	
	// not supported
	public RootElements prRoot() {
		return (pRoot != null) ? pRoot : (pRoot = new RootElements());
	} 

	// not supported
	public OpElements prOp() {
		return (pOp != null) ? pOp : (pOp = new OpElements());
	} 

	// not supported
	public TermElements prTerm() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	} 

	// not supported
	public AtomElements prAtom() {
		return (pAtom != null) ? pAtom : (pAtom = new AtomElements());
	} 

	// not supported
	public ParensElements prParens() {
		return (pParens != null) ? pParens : (pParens = new ParensElements());
	} 

	// not supported
	public TrickyAElements prTrickyA() {
		return (pTrickyA != null) ? pTrickyA : (pTrickyA = new TrickyAElements());
	} 

	// not supported
	public TrickyA1Elements prTrickyA1() {
		return (pTrickyA1 != null) ? pTrickyA1 : (pTrickyA1 = new TrickyA1Elements());
	} 

	// not supported
	public TrickyBElements prTrickyB() {
		return (pTrickyB != null) ? pTrickyB : (pTrickyB = new TrickyBElements());
	} 

	// not supported
	public TrickyCElements prTrickyC() {
		return (pTrickyC != null) ? pTrickyC : (pTrickyC = new TrickyCElements());
	} 

	// not supported
	public TrickyDElements prTrickyD() {
		return (pTrickyD != null) ? pTrickyD : (pTrickyD = new TrickyDElements());
	} 

	// not supported
	public TrickyEElements prTrickyE() {
		return (pTrickyE != null) ? pTrickyE : (pTrickyE = new TrickyEElements());
	} 

	// not supported
	public TrickyFElements prTrickyF() {
		return (pTrickyF != null) ? pTrickyF : (pTrickyF = new TrickyFElements());
	} 

	// not supported
	public TrickyGElements prTrickyG() {
		return (pTrickyG != null) ? pTrickyG : (pTrickyG = new TrickyGElements());
	} 

	// not supported
	public TrickyG1Elements prTrickyG1() {
		return (pTrickyG1 != null) ? pTrickyG1 : (pTrickyG1 = new TrickyG1Elements());
	} 

	// not supported
	public TrickyG2Elements prTrickyG2() {
		return (pTrickyG2 != null) ? pTrickyG2 : (pTrickyG2 = new TrickyG2Elements());
	} 

	// not supported
	public TerminalRule trID() {
		return terminalsGrammarAccess.trID();
	} 

	// not supported
	public TerminalRule trINT() {
		return terminalsGrammarAccess.trINT();
	} 

	// not supported
	public TerminalRule trSTRING() {
		return terminalsGrammarAccess.trSTRING();
	} 

	// not supported
	public TerminalRule trML_COMMENT() {
		return terminalsGrammarAccess.trML_COMMENT();
	} 

	// not supported
	public TerminalRule trSL_COMMENT() {
		return terminalsGrammarAccess.trSL_COMMENT();
	} 

	// not supported
	public TerminalRule trWS() {
		return terminalsGrammarAccess.trWS();
	} 

	// not supported
	public TerminalRule trANY_OTHER() {
		return terminalsGrammarAccess.trANY_OTHER();
	} 
}
