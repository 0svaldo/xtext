/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.reconstr.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.parsetree.reconstr.services.SimpleReconstrTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class SimpleReconstrTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private SimpleReconstrTestLanguageGrammarAccess grammarAccess;
		
	public SimpleReconstrTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Op_Group(this, this, 0, inst);
			case 1: return new Term_Alternatives(this, this, 1, inst);
			case 2: return new Atom_NameAssignment(this, this, 2, inst);
			case 3: return new Parens_Group(this, this, 3, inst);
			case 4: return new TwoNumbers_Group(this, this, 4, inst);
			case 5: return new ManyStrings_Group(this, this, 5, inst);
			case 6: return new Type_Group(this, this, 6, inst);
			case 7: return new Ref2_Group(this, this, 7, inst);
			case 8: return new Spare_Group(this, this, 8, inst);
			case 9: return new Boolean_Group(this, this, 9, inst);
			case 10: return new Transient1_Group(this, this, 10, inst);
			case 11: return new Consumed1_Group(this, this, 11, inst);
			case 12: return new Consumed2_Group(this, this, 12, inst);
			case 13: return new Loop1_Group(this, this, 13, inst);
			case 14: return new Loop2_Group(this, this, 14, inst);
			case 15: return new Loop3_Group(this, this, 15, inst);
			case 16: return new Loop4_Group(this, this, 16, inst);
			case 17: return new LoopBug285452_Group(this, this, 17, inst);
			case 18: return new DuplicateBug284491_Group(this, this, 18, inst);
			case 19: return new EmptyObjectBug284850_Group(this, this, 19, inst);
			case 20: return new EmptyObjectItems_ListAssignment(this, this, 20, inst);
			case 21: return new EmptyObjectItem_Group(this, this, 21, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Op ****************
 *
 * Op returns Expression:
 *   Term ({Op.values+=current} values+=Term)*;
 *
 **/

// Term ({Op.values+=current} values+=Term)*
protected class Op_Group extends GroupToken {
	
	public Op_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOpAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Op_Group_1(parent, this, 0, inst);
			case 1: return new Op_TermParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOpRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Term
protected class Op_TermParserRuleCall_0 extends RuleCallToken {
	
	public Op_TermParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getOpAccess().getTermParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Term_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({Op.values+=current} values+=Term)*
protected class Op_Group_1 extends GroupToken {
	
	public Op_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOpAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Op_ValuesAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {Op.values+=current}
protected class Op_OpValuesAction_1_0 extends ActionToken  {

	public Op_OpValuesAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getOpAccess().getOpValuesAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Op_Group_1(parent, this, 0, inst);
			case 1: return new Op_TermParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getOpAccess().getOpValuesAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("values", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("values")) return null;
		return getDescr((EObject) val);
	}
}

// values+=Term
protected class Op_ValuesAssignment_1_1 extends AssignmentToken  {
	
	public Op_ValuesAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOpAccess().getValuesAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("values",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("values");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOpAccess().getValuesTermParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Op_OpValuesAction_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Op ****************/


/************ begin Rule Term ****************
 *
 * Term returns Expression:
 *   Atom|TwoNumbers|ManyStrings|Parens|Type|Ref2|Spare|Boolean|Transient1|Consumed1|
 *   Consumed2|Loop1|Loop2|Loop3|Loop4|LoopBug285452|DuplicateBug284491|
 *   EmptyObjectBug284850;
 *
 **/

// Atom|TwoNumbers|ManyStrings|Parens|Type|Ref2|Spare|Boolean|Transient1|Consumed1|
// Consumed2|Loop1|Loop2|Loop3|Loop4|LoopBug285452|DuplicateBug284491|
// EmptyObjectBug284850
protected class Term_Alternatives extends AlternativesToken {

	public Term_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getTermAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_AtomParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Term_TwoNumbersParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Term_ManyStringsParserRuleCall_2(parent, this, 2, inst);
			case 3: return new Term_ParensParserRuleCall_3(parent, this, 3, inst);
			case 4: return new Term_TypeParserRuleCall_4(parent, this, 4, inst);
			case 5: return new Term_Ref2ParserRuleCall_5(parent, this, 5, inst);
			case 6: return new Term_SpareParserRuleCall_6(parent, this, 6, inst);
			case 7: return new Term_BooleanParserRuleCall_7(parent, this, 7, inst);
			case 8: return new Term_Transient1ParserRuleCall_8(parent, this, 8, inst);
			case 9: return new Term_Consumed1ParserRuleCall_9(parent, this, 9, inst);
			case 10: return new Term_Consumed2ParserRuleCall_10(parent, this, 10, inst);
			case 11: return new Term_Loop1ParserRuleCall_11(parent, this, 11, inst);
			case 12: return new Term_Loop2ParserRuleCall_12(parent, this, 12, inst);
			case 13: return new Term_Loop3ParserRuleCall_13(parent, this, 13, inst);
			case 14: return new Term_Loop4ParserRuleCall_14(parent, this, 14, inst);
			case 15: return new Term_LoopBug285452ParserRuleCall_15(parent, this, 15, inst);
			case 16: return new Term_DuplicateBug284491ParserRuleCall_16(parent, this, 16, inst);
			case 17: return new Term_EmptyObjectBug284850ParserRuleCall_17(parent, this, 17, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Atom
protected class Term_AtomParserRuleCall_0 extends RuleCallToken {
	
	public Term_AtomParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getAtomParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Atom_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Atom_NameAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAtomRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// TwoNumbers
protected class Term_TwoNumbersParserRuleCall_1 extends RuleCallToken {
	
	public Term_TwoNumbersParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getTwoNumbersParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TwoNumbers_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(TwoNumbers_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTwoNumbersRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ManyStrings
protected class Term_ManyStringsParserRuleCall_2 extends RuleCallToken {
	
	public Term_ManyStringsParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getManyStringsParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ManyStrings_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ManyStrings_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getManyStringsRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Parens
protected class Term_ParensParserRuleCall_3 extends RuleCallToken {
	
	public Term_ParensParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getParensParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parens_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Parens_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getParensRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Type
protected class Term_TypeParserRuleCall_4 extends RuleCallToken {
	
	public Term_TypeParserRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getTypeParserRuleCall_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Type_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Ref2
protected class Term_Ref2ParserRuleCall_5 extends RuleCallToken {
	
	public Term_Ref2ParserRuleCall_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getRef2ParserRuleCall_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Ref2_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Ref2_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRef2Rule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Spare
protected class Term_SpareParserRuleCall_6 extends RuleCallToken {
	
	public Term_SpareParserRuleCall_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getSpareParserRuleCall_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Spare_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Spare_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSpareRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Boolean
protected class Term_BooleanParserRuleCall_7 extends RuleCallToken {
	
	public Term_BooleanParserRuleCall_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getBooleanParserRuleCall_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Boolean_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Boolean_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBooleanRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Transient1
protected class Term_Transient1ParserRuleCall_8 extends RuleCallToken {
	
	public Term_Transient1ParserRuleCall_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getTransient1ParserRuleCall_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Transient1_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Transient1_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTransient1Rule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Consumed1
protected class Term_Consumed1ParserRuleCall_9 extends RuleCallToken {
	
	public Term_Consumed1ParserRuleCall_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getConsumed1ParserRuleCall_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Consumed1_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Consumed1_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getConsumed1Rule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Consumed2
protected class Term_Consumed2ParserRuleCall_10 extends RuleCallToken {
	
	public Term_Consumed2ParserRuleCall_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getConsumed2ParserRuleCall_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Consumed2_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Consumed2_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getConsumed2Rule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Loop1
protected class Term_Loop1ParserRuleCall_11 extends RuleCallToken {
	
	public Term_Loop1ParserRuleCall_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getLoop1ParserRuleCall_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop1_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Loop1_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLoop1Rule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Loop2
protected class Term_Loop2ParserRuleCall_12 extends RuleCallToken {
	
	public Term_Loop2ParserRuleCall_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getLoop2ParserRuleCall_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop2_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Loop2_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLoop2Rule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Loop3
protected class Term_Loop3ParserRuleCall_13 extends RuleCallToken {
	
	public Term_Loop3ParserRuleCall_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getLoop3ParserRuleCall_13();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop3_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Loop3_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLoop3Rule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Loop4
protected class Term_Loop4ParserRuleCall_14 extends RuleCallToken {
	
	public Term_Loop4ParserRuleCall_14(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getLoop4ParserRuleCall_14();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop4_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Loop4_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLoop4Rule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// LoopBug285452
protected class Term_LoopBug285452ParserRuleCall_15 extends RuleCallToken {
	
	public Term_LoopBug285452ParserRuleCall_15(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getLoopBug285452ParserRuleCall_15();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LoopBug285452_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(LoopBug285452_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLoopBug285452Rule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DuplicateBug284491
protected class Term_DuplicateBug284491ParserRuleCall_16 extends RuleCallToken {
	
	public Term_DuplicateBug284491ParserRuleCall_16(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getDuplicateBug284491ParserRuleCall_16();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DuplicateBug284491_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DuplicateBug284491_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDuplicateBug284491Rule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// EmptyObjectBug284850
protected class Term_EmptyObjectBug284850ParserRuleCall_17 extends RuleCallToken {
	
	public Term_EmptyObjectBug284850ParserRuleCall_17(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getEmptyObjectBug284850ParserRuleCall_17();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EmptyObjectBug284850_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(EmptyObjectBug284850_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getEmptyObjectBug284850Rule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Term ****************/


/************ begin Rule Atom ****************
 *
 * Atom:
 *   name=ID;
 *
 **/

// name=ID
protected class Atom_NameAssignment extends AssignmentToken  {
	
	public Atom_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAtomAccess().getNameAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAtomRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAtomAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule Atom ****************/


/************ begin Rule Parens ****************
 *
 * Parens returns Expression:
 *   "(" Op ")" em="!"?;
 *
 **/

// "(" Op ")" em="!"?
protected class Parens_Group extends GroupToken {
	
	public Parens_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getParensAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parens_EmAssignment_3(parent, this, 0, inst);
			case 1: return new Parens_RightParenthesisKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParensRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "("
protected class Parens_LeftParenthesisKeyword_0 extends KeywordToken  {
	
	public Parens_LeftParenthesisKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParensAccess().getLeftParenthesisKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// Op
protected class Parens_OpParserRuleCall_1 extends RuleCallToken {
	
	public Parens_OpParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getParensAccess().getOpParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Op_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Op_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getOpRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parens_LeftParenthesisKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ")"
protected class Parens_RightParenthesisKeyword_2 extends KeywordToken  {
	
	public Parens_RightParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParensAccess().getRightParenthesisKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parens_OpParserRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// em="!"?
protected class Parens_EmAssignment_3 extends AssignmentToken  {
	
	public Parens_EmAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getParensAccess().getEmAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parens_RightParenthesisKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("em",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("em");
		if("!".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getParensAccess().getEmExclamationMarkKeyword_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Parens ****************/


/************ begin Rule TwoNumbers ****************
 *
 * TwoNumbers:
 *   num1=INT num2=INT ("#" num3+=INT)*;
 *
 **/

// num1=INT num2=INT ("#" num3+=INT)*
protected class TwoNumbers_Group extends GroupToken {
	
	public TwoNumbers_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTwoNumbersAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TwoNumbers_Group_2(parent, this, 0, inst);
			case 1: return new TwoNumbers_Num2Assignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTwoNumbersRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// num1=INT
protected class TwoNumbers_Num1Assignment_0 extends AssignmentToken  {
	
	public TwoNumbers_Num1Assignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTwoNumbersAccess().getNum1Assignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("num1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("num1");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTwoNumbersAccess().getNum1INTTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// num2=INT
protected class TwoNumbers_Num2Assignment_1 extends AssignmentToken  {
	
	public TwoNumbers_Num2Assignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTwoNumbersAccess().getNum2Assignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TwoNumbers_Num1Assignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("num2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("num2");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTwoNumbersAccess().getNum2INTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("#" num3+=INT)*
protected class TwoNumbers_Group_2 extends GroupToken {
	
	public TwoNumbers_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTwoNumbersAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TwoNumbers_Num3Assignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "#"
protected class TwoNumbers_NumberSignKeyword_2_0 extends KeywordToken  {
	
	public TwoNumbers_NumberSignKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTwoNumbersAccess().getNumberSignKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TwoNumbers_Group_2(parent, this, 0, inst);
			case 1: return new TwoNumbers_Num2Assignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// num3+=INT
protected class TwoNumbers_Num3Assignment_2_1 extends AssignmentToken  {
	
	public TwoNumbers_Num3Assignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTwoNumbersAccess().getNum3Assignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TwoNumbers_NumberSignKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("num3",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("num3");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTwoNumbersAccess().getNum3INTTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule TwoNumbers ****************/


/************ begin Rule ManyStrings ****************
 *
 * ManyStrings:
 *   "=" str1+=STRING* str2+=STRING;
 *
 **/

// "=" str1+=STRING* str2+=STRING
protected class ManyStrings_Group extends GroupToken {
	
	public ManyStrings_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getManyStringsAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ManyStrings_Str2Assignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getManyStringsRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "="
protected class ManyStrings_EqualsSignKeyword_0 extends KeywordToken  {
	
	public ManyStrings_EqualsSignKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getManyStringsAccess().getEqualsSignKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// str1+=STRING*
protected class ManyStrings_Str1Assignment_1 extends AssignmentToken  {
	
	public ManyStrings_Str1Assignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getManyStringsAccess().getStr1Assignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ManyStrings_Str1Assignment_1(parent, this, 0, inst);
			case 1: return new ManyStrings_EqualsSignKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("str1",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("str1");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getManyStringsAccess().getStr1STRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// str2+=STRING
protected class ManyStrings_Str2Assignment_2 extends AssignmentToken  {
	
	public ManyStrings_Str2Assignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getManyStringsAccess().getStr2Assignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ManyStrings_Str1Assignment_1(parent, this, 0, inst);
			case 1: return new ManyStrings_EqualsSignKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("str2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("str2");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getManyStringsAccess().getStr2STRINGTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ManyStrings ****************/


/************ begin Rule Type ****************
 *
 * Type:
 *   "type" name=ID "extends" extends=[Type];
 *
 **/

// "type" name=ID "extends" extends=[Type]
protected class Type_Group extends GroupToken {
	
	public Type_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_ExtendsAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "type"
protected class Type_TypeKeyword_0 extends KeywordToken  {
	
	public Type_TypeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeAccess().getTypeKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Type_NameAssignment_1 extends AssignmentToken  {
	
	public Type_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_TypeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "extends"
protected class Type_ExtendsKeyword_2 extends KeywordToken  {
	
	public Type_ExtendsKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeAccess().getExtendsKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// extends=[Type]
protected class Type_ExtendsAssignment_3 extends AssignmentToken  {
	
	public Type_ExtendsAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeAccess().getExtendsAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_ExtendsKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("extends",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("extends");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeAccess().getExtendsTypeCrossReference_3_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getTypeAccess().getExtendsTypeCrossReference_3_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule Type ****************/


/************ begin Rule Ref2 ****************
 *
 * Ref2:
 *   "#2" ref2=( "mykeyword1" | STRING | "mykeyword2" );
 *
 **/

// "#2" ref2=( "mykeyword1" | STRING | "mykeyword2" )
protected class Ref2_Group extends GroupToken {
	
	public Ref2_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRef2Access().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Ref2_Ref2Assignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRef2Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#2"
protected class Ref2_NumberSignDigitTwoKeyword_0 extends KeywordToken  {
	
	public Ref2_NumberSignDigitTwoKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRef2Access().getNumberSignDigitTwoKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// ref2=( "mykeyword1" | STRING | "mykeyword2" )
protected class Ref2_Ref2Assignment_1 extends AssignmentToken  {
	
	public Ref2_Ref2Assignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRef2Access().getRef2Assignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Ref2_NumberSignDigitTwoKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("ref2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ref2");
		if("mykeyword1".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getRef2Access().getRef2Mykeyword1Keyword_1_0_0();
			return obj;
		}
		if("mykeyword2".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getRef2Access().getRef2Mykeyword2Keyword_1_0_2();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getRef2Access().getRef2STRINGTerminalRuleCall_1_0_1();
			return obj;
		}
		return null;
	}

}


/************ end Rule Ref2 ****************/


/************ begin Rule Spare ****************
 *
 * Spare:
 *   "#3" id+=ID ("." id+=ID)*;
 *
 **/

// "#3" id+=ID ("." id+=ID)*
protected class Spare_Group extends GroupToken {
	
	public Spare_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSpareAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Spare_Group_2(parent, this, 0, inst);
			case 1: return new Spare_IdAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSpareRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#3"
protected class Spare_NumberSignDigitThreeKeyword_0 extends KeywordToken  {
	
	public Spare_NumberSignDigitThreeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSpareAccess().getNumberSignDigitThreeKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// id+=ID
protected class Spare_IdAssignment_1 extends AssignmentToken  {
	
	public Spare_IdAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSpareAccess().getIdAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Spare_NumberSignDigitThreeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSpareAccess().getIdIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("." id+=ID)*
protected class Spare_Group_2 extends GroupToken {
	
	public Spare_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSpareAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Spare_IdAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "."
protected class Spare_FullStopKeyword_2_0 extends KeywordToken  {
	
	public Spare_FullStopKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSpareAccess().getFullStopKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Spare_Group_2(parent, this, 0, inst);
			case 1: return new Spare_IdAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// id+=ID
protected class Spare_IdAssignment_2_1 extends AssignmentToken  {
	
	public Spare_IdAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSpareAccess().getIdAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Spare_FullStopKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSpareAccess().getIdIDTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule Spare ****************/


/************ begin Rule Boolean ****************
 *
 * Boolean:
 *   "#4" bool?="myoption"? "kw" value=ID;
 *
 **/

// "#4" bool?="myoption"? "kw" value=ID
protected class Boolean_Group extends GroupToken {
	
	public Boolean_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBooleanAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Boolean_ValueAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBooleanRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#4"
protected class Boolean_NumberSignDigitFourKeyword_0 extends KeywordToken  {
	
	public Boolean_NumberSignDigitFourKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBooleanAccess().getNumberSignDigitFourKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// bool?="myoption"?
protected class Boolean_BoolAssignment_1 extends AssignmentToken  {
	
	public Boolean_BoolAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBooleanAccess().getBoolAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Boolean_NumberSignDigitFourKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("bool",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("bool");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBooleanAccess().getBoolMyoptionKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// "kw"
protected class Boolean_KwKeyword_2 extends KeywordToken  {
	
	public Boolean_KwKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBooleanAccess().getKwKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Boolean_BoolAssignment_1(parent, this, 0, inst);
			case 1: return new Boolean_NumberSignDigitFourKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// value=ID
protected class Boolean_ValueAssignment_3 extends AssignmentToken  {
	
	public Boolean_ValueAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBooleanAccess().getValueAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Boolean_KwKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getBooleanAccess().getValueIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Boolean ****************/


/************ begin Rule Transient1 ****************
 *
 * Transient1:
 *   "#5" (precStar?="*"|prec=INT) ("," (scaleStar?="*"|scale=INT))?;
 *
 **/

// "#5" (precStar?="*"|prec=INT) ("," (scaleStar?="*"|scale=INT))?
protected class Transient1_Group extends GroupToken {
	
	public Transient1_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTransient1Access().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Transient1_Group_2(parent, this, 0, inst);
			case 1: return new Transient1_Alternatives_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTransient1Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#5"
protected class Transient1_NumberSignDigitFiveKeyword_0 extends KeywordToken  {
	
	public Transient1_NumberSignDigitFiveKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTransient1Access().getNumberSignDigitFiveKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// precStar?="*"|prec=INT
protected class Transient1_Alternatives_1 extends AlternativesToken {

	public Transient1_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getTransient1Access().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Transient1_PrecStarAssignment_1_0(parent, this, 0, inst);
			case 1: return new Transient1_PrecAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// precStar?="*"
protected class Transient1_PrecStarAssignment_1_0 extends AssignmentToken  {
	
	public Transient1_PrecStarAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTransient1Access().getPrecStarAssignment_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Transient1_NumberSignDigitFiveKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("precStar",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("precStar");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getTransient1Access().getPrecStarAsteriskKeyword_1_0_0();
			return obj;
		}
		return null;
	}

}

// prec=INT
protected class Transient1_PrecAssignment_1_1 extends AssignmentToken  {
	
	public Transient1_PrecAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTransient1Access().getPrecAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Transient1_NumberSignDigitFiveKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("prec",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("prec");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTransient1Access().getPrecINTTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// ("," (scaleStar?="*"|scale=INT))?
protected class Transient1_Group_2 extends GroupToken {
	
	public Transient1_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTransient1Access().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Transient1_Alternatives_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Transient1_CommaKeyword_2_0 extends KeywordToken  {
	
	public Transient1_CommaKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTransient1Access().getCommaKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Transient1_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// scaleStar?="*"|scale=INT
protected class Transient1_Alternatives_2_1 extends AlternativesToken {

	public Transient1_Alternatives_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getTransient1Access().getAlternatives_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Transient1_ScaleStarAssignment_2_1_0(parent, this, 0, inst);
			case 1: return new Transient1_ScaleAssignment_2_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// scaleStar?="*"
protected class Transient1_ScaleStarAssignment_2_1_0 extends AssignmentToken  {
	
	public Transient1_ScaleStarAssignment_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTransient1Access().getScaleStarAssignment_2_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Transient1_CommaKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("scaleStar",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("scaleStar");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getTransient1Access().getScaleStarAsteriskKeyword_2_1_0_0();
			return obj;
		}
		return null;
	}

}

// scale=INT
protected class Transient1_ScaleAssignment_2_1_1 extends AssignmentToken  {
	
	public Transient1_ScaleAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTransient1Access().getScaleAssignment_2_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Transient1_CommaKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("scale",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("scale");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTransient1Access().getScaleINTTerminalRuleCall_2_1_1_0();
			return obj;
		}
		return null;
	}

}




/************ end Rule Transient1 ****************/


/************ begin Rule Consumed1 ****************
 *
 * Consumed1:
 *   "#6" ("v1" v1+=INT* v2+=ID|"v2" v2+=ID* v1+=INT);
 *
 **/

// "#6" ("v1" v1+=INT* v2+=ID|"v2" v2+=ID* v1+=INT)
protected class Consumed1_Group extends GroupToken {
	
	public Consumed1_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConsumed1Access().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Consumed1_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConsumed1Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#6"
protected class Consumed1_NumberSignDigitSixKeyword_0 extends KeywordToken  {
	
	public Consumed1_NumberSignDigitSixKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConsumed1Access().getNumberSignDigitSixKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "v1" v1+=INT* v2+=ID|"v2" v2+=ID* v1+=INT
protected class Consumed1_Alternatives_1 extends AlternativesToken {

	public Consumed1_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getConsumed1Access().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Consumed1_Group_1_0(parent, this, 0, inst);
			case 1: return new Consumed1_Group_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "v1" v1+=INT* v2+=ID
protected class Consumed1_Group_1_0 extends GroupToken {
	
	public Consumed1_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConsumed1Access().getGroup_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Consumed1_V2Assignment_1_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "v1"
protected class Consumed1_V1Keyword_1_0_0 extends KeywordToken  {
	
	public Consumed1_V1Keyword_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConsumed1Access().getV1Keyword_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Consumed1_NumberSignDigitSixKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// v1+=INT*
protected class Consumed1_V1Assignment_1_0_1 extends AssignmentToken  {
	
	public Consumed1_V1Assignment_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConsumed1Access().getV1Assignment_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Consumed1_V1Assignment_1_0_1(parent, this, 0, inst);
			case 1: return new Consumed1_V1Keyword_1_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("v1",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("v1");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getConsumed1Access().getV1INTTerminalRuleCall_1_0_1_0();
			return obj;
		}
		return null;
	}

}

// v2+=ID
protected class Consumed1_V2Assignment_1_0_2 extends AssignmentToken  {
	
	public Consumed1_V2Assignment_1_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConsumed1Access().getV2Assignment_1_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Consumed1_V1Assignment_1_0_1(parent, this, 0, inst);
			case 1: return new Consumed1_V1Keyword_1_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("v2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("v2");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getConsumed1Access().getV2IDTerminalRuleCall_1_0_2_0();
			return obj;
		}
		return null;
	}

}


// "v2" v2+=ID* v1+=INT
protected class Consumed1_Group_1_1 extends GroupToken {
	
	public Consumed1_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConsumed1Access().getGroup_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Consumed1_V1Assignment_1_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "v2"
protected class Consumed1_V2Keyword_1_1_0 extends KeywordToken  {
	
	public Consumed1_V2Keyword_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConsumed1Access().getV2Keyword_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Consumed1_NumberSignDigitSixKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// v2+=ID*
protected class Consumed1_V2Assignment_1_1_1 extends AssignmentToken  {
	
	public Consumed1_V2Assignment_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConsumed1Access().getV2Assignment_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Consumed1_V2Assignment_1_1_1(parent, this, 0, inst);
			case 1: return new Consumed1_V2Keyword_1_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("v2",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("v2");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getConsumed1Access().getV2IDTerminalRuleCall_1_1_1_0();
			return obj;
		}
		return null;
	}

}

// v1+=INT
protected class Consumed1_V1Assignment_1_1_2 extends AssignmentToken  {
	
	public Consumed1_V1Assignment_1_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConsumed1Access().getV1Assignment_1_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Consumed1_V2Assignment_1_1_1(parent, this, 0, inst);
			case 1: return new Consumed1_V2Keyword_1_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("v1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("v1");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getConsumed1Access().getV1INTTerminalRuleCall_1_1_2_0();
			return obj;
		}
		return null;
	}

}




/************ end Rule Consumed1 ****************/


/************ begin Rule Consumed2 ****************
 *
 * Consumed2:
 *   "#7" child=Consumed1;
 *
 **/

// "#7" child=Consumed1
protected class Consumed2_Group extends GroupToken {
	
	public Consumed2_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConsumed2Access().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Consumed2_ChildAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConsumed2Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#7"
protected class Consumed2_NumberSignDigitSevenKeyword_0 extends KeywordToken  {
	
	public Consumed2_NumberSignDigitSevenKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConsumed2Access().getNumberSignDigitSevenKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// child=Consumed1
protected class Consumed2_ChildAssignment_1 extends AssignmentToken  {
	
	public Consumed2_ChildAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConsumed2Access().getChildAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Consumed1_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("child",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("child");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConsumed1Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConsumed2Access().getChildConsumed1ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Consumed2_NumberSignDigitSevenKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Consumed2 ****************/


/************ begin Rule Loop1 ****************
 *
 * Loop1:
 *   "kw0"? "#8" id+=ID "kw1"? id+=ID ("kw2"* "kw30")+;
 *
 **/

// "kw0"? "#8" id+=ID "kw1"? id+=ID ("kw2"* "kw30")+
protected class Loop1_Group extends GroupToken {
	
	public Loop1_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLoop1Access().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop1_Group_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLoop1Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#8"
protected class Loop1_NumberSignDigitEightKeyword_1 extends KeywordToken  {
	
	public Loop1_NumberSignDigitEightKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLoop1Access().getNumberSignDigitEightKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// id+=ID
protected class Loop1_IdAssignment_2 extends AssignmentToken  {
	
	public Loop1_IdAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLoop1Access().getIdAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop1_NumberSignDigitEightKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLoop1Access().getIdIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// id+=ID
protected class Loop1_IdAssignment_4 extends AssignmentToken  {
	
	public Loop1_IdAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLoop1Access().getIdAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop1_IdAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLoop1Access().getIdIDTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// ("kw2"* "kw30")+
protected class Loop1_Group_5 extends GroupToken {
	
	public Loop1_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLoop1Access().getGroup_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop1_Kw30Keyword_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "kw30"
protected class Loop1_Kw30Keyword_5_1 extends KeywordToken  {
	
	public Loop1_Kw30Keyword_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLoop1Access().getKw30Keyword_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop1_IdAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule Loop1 ****************/


/************ begin Rule Loop2 ****************
 *
 * Loop2:
 *   "#9" id+=ID ("kw1"|id+=ID "kw2") ("kw3"|id+=ID "kw4")? ("kw5"|"kw6");
 *
 **/

// "#9" id+=ID ("kw1"|id+=ID "kw2") ("kw3"|id+=ID "kw4")? ("kw5"|"kw6")
protected class Loop2_Group extends GroupToken {
	
	public Loop2_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLoop2Access().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop2_Alternatives_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLoop2Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#9"
protected class Loop2_NumberSignDigitNineKeyword_0 extends KeywordToken  {
	
	public Loop2_NumberSignDigitNineKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLoop2Access().getNumberSignDigitNineKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// id+=ID
protected class Loop2_IdAssignment_1 extends AssignmentToken  {
	
	public Loop2_IdAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLoop2Access().getIdAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop2_NumberSignDigitNineKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLoop2Access().getIdIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "kw1"|id+=ID "kw2"
protected class Loop2_Alternatives_2 extends AlternativesToken {

	public Loop2_Alternatives_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getLoop2Access().getAlternatives_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop2_Kw1Keyword_2_0(parent, this, 0, inst);
			case 1: return new Loop2_Group_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "kw1"
protected class Loop2_Kw1Keyword_2_0 extends KeywordToken  {
	
	public Loop2_Kw1Keyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLoop2Access().getKw1Keyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop2_IdAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// id+=ID "kw2"
protected class Loop2_Group_2_1 extends GroupToken {
	
	public Loop2_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLoop2Access().getGroup_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop2_Kw2Keyword_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// id+=ID
protected class Loop2_IdAssignment_2_1_0 extends AssignmentToken  {
	
	public Loop2_IdAssignment_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLoop2Access().getIdAssignment_2_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop2_IdAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLoop2Access().getIdIDTerminalRuleCall_2_1_0_0();
			return obj;
		}
		return null;
	}

}

// "kw2"
protected class Loop2_Kw2Keyword_2_1_1 extends KeywordToken  {
	
	public Loop2_Kw2Keyword_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLoop2Access().getKw2Keyword_2_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop2_IdAssignment_2_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



// ("kw3"|id+=ID "kw4")?
protected class Loop2_Alternatives_3 extends AlternativesToken {

	public Loop2_Alternatives_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getLoop2Access().getAlternatives_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop2_Group_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// id+=ID "kw4"
protected class Loop2_Group_3_1 extends GroupToken {
	
	public Loop2_Group_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLoop2Access().getGroup_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop2_Kw4Keyword_3_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// id+=ID
protected class Loop2_IdAssignment_3_1_0 extends AssignmentToken  {
	
	public Loop2_IdAssignment_3_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLoop2Access().getIdAssignment_3_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop2_Alternatives_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLoop2Access().getIdIDTerminalRuleCall_3_1_0_0();
			return obj;
		}
		return null;
	}

}

// "kw4"
protected class Loop2_Kw4Keyword_3_1_1 extends KeywordToken  {
	
	public Loop2_Kw4Keyword_3_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLoop2Access().getKw4Keyword_3_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop2_IdAssignment_3_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



// "kw5"|"kw6"
protected class Loop2_Alternatives_4 extends AlternativesToken {

	public Loop2_Alternatives_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getLoop2Access().getAlternatives_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop2_Kw5Keyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "kw5"
protected class Loop2_Kw5Keyword_4_0 extends KeywordToken  {
	
	public Loop2_Kw5Keyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLoop2Access().getKw5Keyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop2_Alternatives_3(parent, this, 0, inst);
			case 1: return new Loop2_Alternatives_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule Loop2 ****************/


/************ begin Rule Loop3 ****************
 *
 * Loop3:
 *   ("kw1"|"kw2"|"kw3") "#10" id+=ID ("kw4" id+=ID "kw5")*;
 *
 **/

// ("kw1"|"kw2"|"kw3") "#10" id+=ID ("kw4" id+=ID "kw5")*
protected class Loop3_Group extends GroupToken {
	
	public Loop3_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLoop3Access().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop3_Group_3(parent, this, 0, inst);
			case 1: return new Loop3_IdAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLoop3Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "kw1"|"kw2"|"kw3"
protected class Loop3_Alternatives_0 extends AlternativesToken {

	public Loop3_Alternatives_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getLoop3Access().getAlternatives_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop3_Kw1Keyword_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "kw1"
protected class Loop3_Kw1Keyword_0_0 extends KeywordToken  {
	
	public Loop3_Kw1Keyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLoop3Access().getKw1Keyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}


// "#10"
protected class Loop3_NumberSignDigitOneDigitZeroKeyword_1 extends KeywordToken  {
	
	public Loop3_NumberSignDigitOneDigitZeroKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLoop3Access().getNumberSignDigitOneDigitZeroKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop3_Alternatives_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// id+=ID
protected class Loop3_IdAssignment_2 extends AssignmentToken  {
	
	public Loop3_IdAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLoop3Access().getIdAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop3_NumberSignDigitOneDigitZeroKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLoop3Access().getIdIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("kw4" id+=ID "kw5")*
protected class Loop3_Group_3 extends GroupToken {
	
	public Loop3_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLoop3Access().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop3_Kw5Keyword_3_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "kw4"
protected class Loop3_Kw4Keyword_3_0 extends KeywordToken  {
	
	public Loop3_Kw4Keyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLoop3Access().getKw4Keyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop3_Group_3(parent, this, 0, inst);
			case 1: return new Loop3_IdAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// id+=ID
protected class Loop3_IdAssignment_3_1 extends AssignmentToken  {
	
	public Loop3_IdAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLoop3Access().getIdAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop3_Kw4Keyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLoop3Access().getIdIDTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}

// "kw5"
protected class Loop3_Kw5Keyword_3_2 extends KeywordToken  {
	
	public Loop3_Kw5Keyword_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLoop3Access().getKw5Keyword_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop3_IdAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule Loop3 ****************/


/************ begin Rule Loop4 ****************
 *
 * Loop4:
 *   "#11" ("kw1"|"kw2"|"kw3" "kw4") id+=ID ("kw5" ("kw6" "kw7"?)?)+;
 *
 **/

// "#11" ("kw1"|"kw2"|"kw3" "kw4") id+=ID ("kw5" ("kw6" "kw7"?)?)+
protected class Loop4_Group extends GroupToken {
	
	public Loop4_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLoop4Access().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop4_Group_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLoop4Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#11"
protected class Loop4_NumberSignDigitOneDigitOneKeyword_0 extends KeywordToken  {
	
	public Loop4_NumberSignDigitOneDigitOneKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLoop4Access().getNumberSignDigitOneDigitOneKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "kw1"|"kw2"|"kw3" "kw4"
protected class Loop4_Alternatives_1 extends AlternativesToken {

	public Loop4_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getLoop4Access().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop4_Kw1Keyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "kw1"
protected class Loop4_Kw1Keyword_1_0 extends KeywordToken  {
	
	public Loop4_Kw1Keyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLoop4Access().getKw1Keyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop4_NumberSignDigitOneDigitOneKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// id+=ID
protected class Loop4_IdAssignment_2 extends AssignmentToken  {
	
	public Loop4_IdAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLoop4Access().getIdAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop4_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLoop4Access().getIdIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("kw5" ("kw6" "kw7"?)?)+
protected class Loop4_Group_3 extends GroupToken {
	
	public Loop4_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLoop4Access().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop4_Kw5Keyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "kw5"
protected class Loop4_Kw5Keyword_3_0 extends KeywordToken  {
	
	public Loop4_Kw5Keyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLoop4Access().getKw5Keyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Loop4_IdAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule Loop4 ****************/


/************ begin Rule LoopBug285452 ****************
 *
 * LoopBug285452:
 *   "#12" (interface?="interface"|"class") name=ID;
 *
 **/

// "#12" (interface?="interface"|"class") name=ID
protected class LoopBug285452_Group extends GroupToken {
	
	public LoopBug285452_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLoopBug285452Access().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LoopBug285452_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLoopBug285452Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#12"
protected class LoopBug285452_NumberSignDigitOneDigitTwoKeyword_0 extends KeywordToken  {
	
	public LoopBug285452_NumberSignDigitOneDigitTwoKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLoopBug285452Access().getNumberSignDigitOneDigitTwoKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// interface?="interface"|"class"
protected class LoopBug285452_Alternatives_1 extends AlternativesToken {

	public LoopBug285452_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getLoopBug285452Access().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LoopBug285452_InterfaceAssignment_1_0(parent, this, 0, inst);
			case 1: return new LoopBug285452_ClassKeyword_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// interface?="interface"
protected class LoopBug285452_InterfaceAssignment_1_0 extends AssignmentToken  {
	
	public LoopBug285452_InterfaceAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLoopBug285452Access().getInterfaceAssignment_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LoopBug285452_NumberSignDigitOneDigitTwoKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interface",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interface");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getLoopBug285452Access().getInterfaceInterfaceKeyword_1_0_0();
			return obj;
		}
		return null;
	}

}

// "class"
protected class LoopBug285452_ClassKeyword_1_1 extends KeywordToken  {
	
	public LoopBug285452_ClassKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLoopBug285452Access().getClassKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LoopBug285452_NumberSignDigitOneDigitTwoKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// name=ID
protected class LoopBug285452_NameAssignment_2 extends AssignmentToken  {
	
	public LoopBug285452_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLoopBug285452Access().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LoopBug285452_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLoopBug285452Access().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule LoopBug285452 ****************/


/************ begin Rule DuplicateBug284491 ****************
 *
 * DuplicateBug284491:
 *   "#13" (static?="static"|final?="final"|transient?="transient")*;
 *
 **/

// "#13" (static?="static"|final?="final"|transient?="transient")*
protected class DuplicateBug284491_Group extends GroupToken {
	
	public DuplicateBug284491_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDuplicateBug284491Access().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DuplicateBug284491_Alternatives_1(parent, this, 0, inst);
			case 1: return new DuplicateBug284491_NumberSignDigitOneDigitThreeKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDuplicateBug284491Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#13"
protected class DuplicateBug284491_NumberSignDigitOneDigitThreeKeyword_0 extends KeywordToken  {
	
	public DuplicateBug284491_NumberSignDigitOneDigitThreeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDuplicateBug284491Access().getNumberSignDigitOneDigitThreeKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// (static?="static"|final?="final"|transient?="transient")*
protected class DuplicateBug284491_Alternatives_1 extends AlternativesToken {

	public DuplicateBug284491_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getDuplicateBug284491Access().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DuplicateBug284491_StaticAssignment_1_0(parent, this, 0, inst);
			case 1: return new DuplicateBug284491_FinalAssignment_1_1(parent, this, 1, inst);
			case 2: return new DuplicateBug284491_TransientAssignment_1_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// static?="static"
protected class DuplicateBug284491_StaticAssignment_1_0 extends AssignmentToken  {
	
	public DuplicateBug284491_StaticAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDuplicateBug284491Access().getStaticAssignment_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DuplicateBug284491_Alternatives_1(parent, this, 0, inst);
			case 1: return new DuplicateBug284491_NumberSignDigitOneDigitThreeKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("static",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("static");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getDuplicateBug284491Access().getStaticStaticKeyword_1_0_0();
			return obj;
		}
		return null;
	}

}

// final?="final"
protected class DuplicateBug284491_FinalAssignment_1_1 extends AssignmentToken  {
	
	public DuplicateBug284491_FinalAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDuplicateBug284491Access().getFinalAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DuplicateBug284491_Alternatives_1(parent, this, 0, inst);
			case 1: return new DuplicateBug284491_NumberSignDigitOneDigitThreeKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("final",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("final");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getDuplicateBug284491Access().getFinalFinalKeyword_1_1_0();
			return obj;
		}
		return null;
	}

}

// transient?="transient"
protected class DuplicateBug284491_TransientAssignment_1_2 extends AssignmentToken  {
	
	public DuplicateBug284491_TransientAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDuplicateBug284491Access().getTransientAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DuplicateBug284491_Alternatives_1(parent, this, 0, inst);
			case 1: return new DuplicateBug284491_NumberSignDigitOneDigitThreeKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("transient",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("transient");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getDuplicateBug284491Access().getTransientTransientKeyword_1_2_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule DuplicateBug284491 ****************/


/************ begin Rule EmptyObjectBug284850 ****************
 *
 * EmptyObjectBug284850:
 *   "#14" items=EmptyObjectItems;
 *
 **/

// "#14" items=EmptyObjectItems
protected class EmptyObjectBug284850_Group extends GroupToken {
	
	public EmptyObjectBug284850_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEmptyObjectBug284850Access().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EmptyObjectBug284850_ItemsAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEmptyObjectBug284850Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#14"
protected class EmptyObjectBug284850_NumberSignDigitOneDigitFourKeyword_0 extends KeywordToken  {
	
	public EmptyObjectBug284850_NumberSignDigitOneDigitFourKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEmptyObjectBug284850Access().getNumberSignDigitOneDigitFourKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// items=EmptyObjectItems
protected class EmptyObjectBug284850_ItemsAssignment_1 extends AssignmentToken  {
	
	public EmptyObjectBug284850_ItemsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEmptyObjectBug284850Access().getItemsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EmptyObjectItems_ListAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("items",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("items");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEmptyObjectItemsRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEmptyObjectBug284850Access().getItemsEmptyObjectItemsParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EmptyObjectBug284850_NumberSignDigitOneDigitFourKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule EmptyObjectBug284850 ****************/


/************ begin Rule EmptyObjectItems ****************
 *
 * EmptyObjectItems:
 *   list+=EmptyObjectItem*;
 *
 **/

// list+=EmptyObjectItem*
protected class EmptyObjectItems_ListAssignment extends AssignmentToken  {
	
	public EmptyObjectItems_ListAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEmptyObjectItemsAccess().getListAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EmptyObjectItem_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEmptyObjectItemsRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("list",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("list");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEmptyObjectItemRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEmptyObjectItemsAccess().getListEmptyObjectItemParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EmptyObjectItems_ListAssignment(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

/************ end Rule EmptyObjectItems ****************/


/************ begin Rule EmptyObjectItem ****************
 *
 * EmptyObjectItem:
 *   "item" name=ID;
 *
 **/

// "item" name=ID
protected class EmptyObjectItem_Group extends GroupToken {
	
	public EmptyObjectItem_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEmptyObjectItemAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EmptyObjectItem_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEmptyObjectItemRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "item"
protected class EmptyObjectItem_ItemKeyword_0 extends KeywordToken  {
	
	public EmptyObjectItem_ItemKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEmptyObjectItemAccess().getItemKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class EmptyObjectItem_NameAssignment_1 extends AssignmentToken  {
	
	public EmptyObjectItem_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEmptyObjectItemAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EmptyObjectItem_ItemKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getEmptyObjectItemAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule EmptyObjectItem ****************/

}
