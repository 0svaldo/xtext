/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;

import org.eclipse.xtext.AbstractRule;

import org.eclipse.xtext.parser.packrat.IMarkerFactory.IMarker;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ConsumeResult;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.parsetree.reconstr.services.ComplexReconstrTestLanguageGrammarAccess.TrickyEElements;

import org.eclipse.xtext.builtin.parser.packrat.consumers.XtextBuiltinIDConsumer;
import org.eclipse.xtext.builtin.parser.packrat.consumers.XtextBuiltinINTConsumer;
import org.eclipse.xtext.builtin.parser.packrat.consumers.XtextBuiltinSTRINGConsumer;

@SuppressWarnings("unused")
public final class ComplexReconstrTestLanguageTrickyEConsumer extends NonTerminalConsumer {

	private TrickyEElements rule;
	
	private ITerminalConsumer idConsumer;
	private ITerminalConsumer intConsumer;
	private ITerminalConsumer stringConsumer;

	private ICharacterClass keyword$4$Delimiter;
	
	private ICharacterClass keyword$13$Delimiter;
	
	private ISequenceMatcher ruleCall$8$Delimiter;
	
	private ISequenceMatcher ruleCall$10$Delimiter;
	
	private ISequenceMatcher ruleCall$12$Delimiter;
	
	private ISequenceMatcher ruleCall$16$Delimiter;
	
	private ISequenceMatcher ruleCall$18$Delimiter;
	
	public ComplexReconstrTestLanguageTrickyEConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$4$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$13$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$8$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$10$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$12$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$16$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$18$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume(int entryPoint) throws Exception {
		return consumeGroup$1(entryPoint);
	}

	protected int consumeGroup$1(int entryPoint) throws Exception {
		GroupResult result = createGroupResult(getRule().eleGroup());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$4(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele000KeywordTE());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeGroup$5(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele001Group());
					return result.getResult();
				}
			case 2:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$13(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele01KeywordX());
					return result.getResult();
				}
			case 3:
				result.nextStep();
				if (result.didGroupFail(consumeGroup$14(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele1Group());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeKeyword$4(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele000KeywordTE(), null, false, false, getKeyword$4$Delimiter());
	}

	protected int consumeGroup$5(int entryPoint) throws Exception {
		IMarker marker = mark();
		while(doConsumeGroup$5(entryPoint) == ConsumeResult.SUCCESS) {
			marker.flush();
		}
		marker.rollback();
		skipped(getRule().ele001Group());
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeGroup$5(int entryPoint) throws Exception {
		GroupResult result = createGroupResult(getRule().ele001Group());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$7(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00100AssignmentName());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$9(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00101AssignmentFoo());
					return result.getResult();
				}
			case 2:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$11(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0011AssignmentType());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeAssignment$7(int entryPoint) throws Exception {
		return consumeRuleCall$8(entryPoint);
	}

	protected int consumeRuleCall$8(int entryPoint) throws Exception {
		return consumeTerminal(intConsumer, "name", true, false, getRule().ele001000LexerRuleCallINT(), getRuleCall$8$Delimiter());
	}

	protected int consumeAssignment$9(int entryPoint) throws Exception {
		return consumeRuleCall$10(entryPoint);
	}

	protected int consumeRuleCall$10(int entryPoint) throws Exception {
		return consumeTerminal(stringConsumer, "foo", true, false, getRule().ele001010LexerRuleCallSTRING(), getRuleCall$10$Delimiter());
	}

	protected int consumeAssignment$11(int entryPoint) throws Exception {
		return consumeRuleCall$12(entryPoint);
	}

	protected int consumeRuleCall$12(int entryPoint) throws Exception {
		return consumeTerminal(idConsumer, "type", true, false, getRule().ele00110LexerRuleCallID(), getRuleCall$12$Delimiter());
	}

	protected int consumeKeyword$13(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele01KeywordX(), null, false, false, getKeyword$13$Delimiter());
	}

	protected int consumeGroup$14(int entryPoint) throws Exception {
		IMarker marker = mark();
		while(doConsumeGroup$14(entryPoint) == ConsumeResult.SUCCESS) {
			marker.flush();
		}
		marker.rollback();
		skipped(getRule().ele1Group());
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeGroup$14(int entryPoint) throws Exception {
		GroupResult result = createGroupResult(getRule().ele1Group());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$15(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele10AssignmentName());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$17(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele11AssignmentType());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeAssignment$15(int entryPoint) throws Exception {
		return consumeRuleCall$16(entryPoint);
	}

	protected int consumeRuleCall$16(int entryPoint) throws Exception {
		return consumeTerminal(intConsumer, "name", true, false, getRule().ele100LexerRuleCallINT(), getRuleCall$16$Delimiter());
	}

	protected int consumeAssignment$17(int entryPoint) throws Exception {
		return consumeRuleCall$18(entryPoint);
	}

	protected int consumeRuleCall$18(int entryPoint) throws Exception {
		return consumeTerminal(idConsumer, "type", true, false, getRule().ele110LexerRuleCallID(), getRuleCall$18$Delimiter());
	}

	public TrickyEElements getRule() {
		return rule;
	}
	
	public void setRule(TrickyEElements rule) {
		this.rule = rule;
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setIntConsumer(ITerminalConsumer intConsumer) {
		this.intConsumer = intConsumer;
	}
	
	public void setStringConsumer(ITerminalConsumer stringConsumer) {
		this.stringConsumer = stringConsumer;
	}
	
	public ICharacterClass getKeyword$4$Delimiter() {
		return keyword$4$Delimiter;
	}
	
	public void setKeyword$4$Delimiter(ICharacterClass characterClass) {
		keyword$4$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$13$Delimiter() {
		return keyword$13$Delimiter;
	}
	
	public void setKeyword$13$Delimiter(ICharacterClass characterClass) {
		keyword$13$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$8$Delimiter() {
		return ruleCall$8$Delimiter;
	}
	
	public void setRuleCall$8$Delimiter(ISequenceMatcher matcher) {
		ruleCall$8$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$10$Delimiter() {
		return ruleCall$10$Delimiter;
	}
	
	public void setRuleCall$10$Delimiter(ISequenceMatcher matcher) {
		ruleCall$10$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$12$Delimiter() {
		return ruleCall$12$Delimiter;
	}
	
	public void setRuleCall$12$Delimiter(ISequenceMatcher matcher) {
		ruleCall$12$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$16$Delimiter() {
		return ruleCall$16$Delimiter;
	}
	
	public void setRuleCall$16$Delimiter(ISequenceMatcher matcher) {
		ruleCall$16$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$18$Delimiter() {
		return ruleCall$18$Delimiter;
	}
	
	public void setRuleCall$18$Delimiter(ISequenceMatcher matcher) {
		ruleCall$18$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
