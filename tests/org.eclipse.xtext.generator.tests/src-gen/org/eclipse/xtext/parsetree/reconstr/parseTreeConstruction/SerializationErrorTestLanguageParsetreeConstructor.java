/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.reconstr.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.parsetree.reconstr.services.SerializationErrorTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class SerializationErrorTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private SerializationErrorTestLanguageGrammarAccess grammarAccess;
		
	public SerializationErrorTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Alternatives(this, this, 0, inst);
			case 1: return new Parenthesis_Group(this, this, 1, inst);
			case 2: return new Test_Alternatives(this, this, 2, inst);
			case 3: return new TwoRequired_Group(this, this, 3, inst);
			case 4: return new TwoOptions_Group(this, this, 4, inst);
			case 5: return new Indent_Group(this, this, 5, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 *   test=Test|test=Parenthesis;
 *
 **/

// test=Test|test=Parenthesis
protected class Model_Alternatives extends AlternativesToken {

	public Model_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getModelAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_TestAssignment_0(parent, this, 0, inst);
			case 1: return new Model_TestAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// test=Test
protected class Model_TestAssignment_0 extends AssignmentToken  {
	
	public Model_TestAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getTestAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Test_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("test",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("test");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTestRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getTestTestParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// test=Parenthesis
protected class Model_TestAssignment_1 extends AssignmentToken  {
	
	public Model_TestAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getTestAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parenthesis_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("test",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("test");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParenthesisRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getTestParenthesisParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule Model ****************/


/************ begin Rule Parenthesis ****************
 *
 * Parenthesis returns Test:
 *   "(" Test ")";
 *
 **/

// "(" Test ")"
protected class Parenthesis_Group extends GroupToken {
	
	public Parenthesis_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getParenthesisAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parenthesis_RightParenthesisKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParenthesisRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "("
protected class Parenthesis_LeftParenthesisKeyword_0 extends KeywordToken  {
	
	public Parenthesis_LeftParenthesisKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParenthesisAccess().getLeftParenthesisKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// Test
protected class Parenthesis_TestParserRuleCall_1 extends RuleCallToken {
	
	public Parenthesis_TestParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getParenthesisAccess().getTestParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Test_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Test_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTestRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parenthesis_LeftParenthesisKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ")"
protected class Parenthesis_RightParenthesisKeyword_2 extends KeywordToken  {
	
	public Parenthesis_RightParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParenthesisAccess().getRightParenthesisKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parenthesis_TestParserRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Parenthesis ****************/


/************ begin Rule Test ****************
 *
 * Test:
 *   TwoRequired|TwoOptions|Indent;
 *
 **/

// TwoRequired|TwoOptions|Indent
protected class Test_Alternatives extends AlternativesToken {

	public Test_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getTestAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Test_TwoRequiredParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Test_TwoOptionsParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Test_IndentParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTestRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// TwoRequired
protected class Test_TwoRequiredParserRuleCall_0 extends RuleCallToken {
	
	public Test_TwoRequiredParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTestAccess().getTwoRequiredParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TwoRequired_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(TwoRequired_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTwoRequiredRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// TwoOptions
protected class Test_TwoOptionsParserRuleCall_1 extends RuleCallToken {
	
	public Test_TwoOptionsParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTestAccess().getTwoOptionsParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TwoOptions_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(TwoOptions_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTwoOptionsRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Indent
protected class Test_IndentParserRuleCall_2 extends RuleCallToken {
	
	public Test_IndentParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTestAccess().getIndentParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Indent_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Indent_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIndentRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Test ****************/


/************ begin Rule TwoRequired ****************
 *
 * TwoRequired:
 *   "tworequired" one=ID two=ID;
 *
 **/

// "tworequired" one=ID two=ID
protected class TwoRequired_Group extends GroupToken {
	
	public TwoRequired_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTwoRequiredAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TwoRequired_TwoAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTwoRequiredRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "tworequired"
protected class TwoRequired_TworequiredKeyword_0 extends KeywordToken  {
	
	public TwoRequired_TworequiredKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTwoRequiredAccess().getTworequiredKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// one=ID
protected class TwoRequired_OneAssignment_1 extends AssignmentToken  {
	
	public TwoRequired_OneAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTwoRequiredAccess().getOneAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TwoRequired_TworequiredKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("one",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("one");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTwoRequiredAccess().getOneIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// two=ID
protected class TwoRequired_TwoAssignment_2 extends AssignmentToken  {
	
	public TwoRequired_TwoAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTwoRequiredAccess().getTwoAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TwoRequired_OneAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("two",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("two");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTwoRequiredAccess().getTwoIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule TwoRequired ****************/


/************ begin Rule TwoOptions ****************
 *
 * TwoOptions:
 *   "twooptions" ("one" one=ID|"two" two=ID);
 *
 **/

// "twooptions" ("one" one=ID|"two" two=ID)
protected class TwoOptions_Group extends GroupToken {
	
	public TwoOptions_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTwoOptionsAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TwoOptions_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTwoOptionsRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "twooptions"
protected class TwoOptions_TwooptionsKeyword_0 extends KeywordToken  {
	
	public TwoOptions_TwooptionsKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTwoOptionsAccess().getTwooptionsKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "one" one=ID|"two" two=ID
protected class TwoOptions_Alternatives_1 extends AlternativesToken {

	public TwoOptions_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getTwoOptionsAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TwoOptions_Group_1_0(parent, this, 0, inst);
			case 1: return new TwoOptions_Group_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "one" one=ID
protected class TwoOptions_Group_1_0 extends GroupToken {
	
	public TwoOptions_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTwoOptionsAccess().getGroup_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TwoOptions_OneAssignment_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "one"
protected class TwoOptions_OneKeyword_1_0_0 extends KeywordToken  {
	
	public TwoOptions_OneKeyword_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTwoOptionsAccess().getOneKeyword_1_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TwoOptions_TwooptionsKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// one=ID
protected class TwoOptions_OneAssignment_1_0_1 extends AssignmentToken  {
	
	public TwoOptions_OneAssignment_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTwoOptionsAccess().getOneAssignment_1_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TwoOptions_OneKeyword_1_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("one",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("one");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTwoOptionsAccess().getOneIDTerminalRuleCall_1_0_1_0();
			return obj;
		}
		return null;
	}

}


// "two" two=ID
protected class TwoOptions_Group_1_1 extends GroupToken {
	
	public TwoOptions_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTwoOptionsAccess().getGroup_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TwoOptions_TwoAssignment_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "two"
protected class TwoOptions_TwoKeyword_1_1_0 extends KeywordToken  {
	
	public TwoOptions_TwoKeyword_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTwoOptionsAccess().getTwoKeyword_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TwoOptions_TwooptionsKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// two=ID
protected class TwoOptions_TwoAssignment_1_1_1 extends AssignmentToken  {
	
	public TwoOptions_TwoAssignment_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTwoOptionsAccess().getTwoAssignment_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TwoOptions_TwoKeyword_1_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("two",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("two");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTwoOptionsAccess().getTwoIDTerminalRuleCall_1_1_1_0();
			return obj;
		}
		return null;
	}

}




/************ end Rule TwoOptions ****************/


/************ begin Rule Indent ****************
 *
 * Indent:
 *   "{" req=TwoRequired? opt=TwoOptions? indent+=Indent* "}";
 *
 **/

// "{" req=TwoRequired? opt=TwoOptions? indent+=Indent* "}"
protected class Indent_Group extends GroupToken {
	
	public Indent_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getIndentAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Indent_RightCurlyBracketKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIndentRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "{"
protected class Indent_LeftCurlyBracketKeyword_0 extends KeywordToken  {
	
	public Indent_LeftCurlyBracketKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getIndentAccess().getLeftCurlyBracketKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// req=TwoRequired?
protected class Indent_ReqAssignment_1 extends AssignmentToken  {
	
	public Indent_ReqAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIndentAccess().getReqAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TwoRequired_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("req",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("req");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTwoRequiredRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIndentAccess().getReqTwoRequiredParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Indent_LeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// opt=TwoOptions?
protected class Indent_OptAssignment_2 extends AssignmentToken  {
	
	public Indent_OptAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIndentAccess().getOptAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TwoOptions_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("opt",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("opt");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTwoOptionsRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIndentAccess().getOptTwoOptionsParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Indent_ReqAssignment_1(parent, next, actIndex, consumed);
			case 1: return new Indent_LeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// indent+=Indent*
protected class Indent_IndentAssignment_3 extends AssignmentToken  {
	
	public Indent_IndentAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIndentAccess().getIndentAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Indent_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("indent",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("indent");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIndentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIndentAccess().getIndentIndentParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Indent_IndentAssignment_3(parent, next, actIndex, consumed);
			case 1: return new Indent_OptAssignment_2(parent, next, actIndex, consumed);
			case 2: return new Indent_ReqAssignment_1(parent, next, actIndex, consumed);
			case 3: return new Indent_LeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Indent_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public Indent_RightCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getIndentAccess().getRightCurlyBracketKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Indent_IndentAssignment_3(parent, this, 0, inst);
			case 1: return new Indent_OptAssignment_2(parent, this, 1, inst);
			case 2: return new Indent_ReqAssignment_1(parent, this, 2, inst);
			case 3: return new Indent_LeftCurlyBracketKeyword_0(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Indent ****************/

}
