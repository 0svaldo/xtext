/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.reconstr.parseTreeConstruction;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;
import org.eclipse.xtext.parsetree.reconstr.services.ComplexReconstrTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class ComplexReconstrTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private ComplexReconstrTestLanguageGrammarAccess grammarAccess;
	
	@Override
	protected Solution internalSerialize(EObject obj) {
		IInstanceDescription inst = getDescr(obj);
		Solution s;
		if(inst.isInstanceOf(grammarAccess.getRootRule().getType().getClassifier()) && (s = new Root_Alternatives(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getOpRule().getType().getClassifier()) && (s = new Op_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier()) && (s = new Term_Alternatives(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getAtomRule().getType().getClassifier()) && (s = new Atom_Assignment_name(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getParensRule().getType().getClassifier()) && (s = new Parens_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getTrickyARule().getType().getClassifier()) && (s = new TrickyA_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getTrickyA1Rule().getType().getClassifier()) && (s = new TrickyA1_Assignment_name(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getTrickyBRule().getType().getClassifier()) && (s = new TrickyB_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getTrickyCRule().getType().getClassifier()) && (s = new TrickyC_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getTrickyDRule().getType().getClassifier()) && (s = new TrickyD_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getTrickyERule().getType().getClassifier()) && (s = new TrickyE_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getTrickyFRule().getType().getClassifier()) && (s = new TrickyF_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getTrickyGRule().getType().getClassifier()) && (s = new TrickyG_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getTrickyG1Rule().getType().getClassifier()) && (s = new TrickyG1_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getTrickyG2Rule().getType().getClassifier()) && (s = new TrickyG2_Alternatives(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		return null;
	}
	

/************ begin Rule Root ****************
 *
 * Root:
 *   Op|TrickyG;
 *
 **/

// Op|TrickyG
protected class Root_Alternatives extends AlternativesToken {

	public Root_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRootAccess().getAlternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new Root_0_RuleCall_Op(current, this);
			case 1: return new Root_1_RuleCall_TrickyG(current, this);
			default: return null;
		}
	}
}

// Op
protected class Root_0_RuleCall_Op extends RuleCallToken {
	
	public Root_0_RuleCall_Op(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRootAccess().getOpParserRuleCall_0();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(Op_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getOpRule().getType().getClassifier())) return null;
		return new Op_Group(current, this).firstSolution();
	}
}

// TrickyG
protected class Root_1_RuleCall_TrickyG extends RuleCallToken {
	
	public Root_1_RuleCall_TrickyG(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRootAccess().getTrickyGParserRuleCall_1();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(TrickyG_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTrickyGRule().getType().getClassifier())) return null;
		return new TrickyG_Group(current, this).firstSolution();
	}
}


/************ end Rule Root ****************/


/************ begin Rule Op ****************
 *
 * Op returns Expression:
 *   Term ({Add.addOperands+=current} "+" addOperands+=Term|{Minus.minusOperands+=current} "-" minusOperands+=Term)*;
 *
 **/

// Term ({Add.addOperands+=current} "+" addOperands+=Term|{Minus.minusOperands+=current} "-" minusOperands+=Term)*
protected class Op_Group extends GroupToken {
	
	public Op_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Op_1_Alternatives(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Op_0_RuleCall_Term(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// Term
protected class Op_0_RuleCall_Term extends RuleCallToken {
	
	public Op_0_RuleCall_Term(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOpAccess().getTermParserRuleCall_0();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(Term_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) return null;
		return new Term_Alternatives(current, this).firstSolution();
	}
}

// ({Add.addOperands+=current} "+" addOperands+=Term|{Minus.minusOperands+=current} "-" minusOperands+=Term)*
protected class Op_1_Alternatives extends AlternativesToken {

	public Op_1_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getOpAccess().getAlternatives_1();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new Op_1_0_Group(current, this);
			case 1: return new Op_1_1_Group(current, this);
			default: return null;
		}
	}
}

// {Add.addOperands+=current} "+" addOperands+=Term
protected class Op_1_0_Group extends GroupToken {
	
	public Op_1_0_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpAccess().getGroup_1_0();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Op_1_0_2_Assignment_addOperands(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Op_1_0_1_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new Op_1_0_0_Action_Add_addOperands(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				if(s3 != null) {
					last = s3.getPredecessor();
					return s3;
				} else {
					s2 = s2.getPredecessor().nextSolution(this,s2);
				}
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// {Add.addOperands+=current}
protected class Op_1_0_0_Action_Add_addOperands extends ActionToken  {

	public Op_1_0_0_Action_Add_addOperands(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOpAccess().getAddAddOperandsAction_1_0_0();
	}
	
	@Override
	protected Solution createSolution() {
		if(!current.isInstanceOf(grammarAccess.getOpAccess().getAddAddOperandsAction_1_0_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("addOperands", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("addOperands")) return null;
		return new Solution(getDescr((EObject)val));
	}
}

// "+"
protected class Op_1_0_1_Keyword extends KeywordToken  {
	
	public Op_1_0_1_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOpAccess().getPlusSignKeyword_1_0_1();
	}	
}

// addOperands+=Term
protected class Op_1_0_2_Assignment_addOperands extends AssignmentToken  {
	
	public Op_1_0_2_Assignment_addOperands(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOpAccess().getAddOperandsAssignment_1_0_2();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("addOperands",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("addOperands");

		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				Solution s = new Term_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}


// {Minus.minusOperands+=current} "-" minusOperands+=Term
protected class Op_1_1_Group extends GroupToken {
	
	public Op_1_1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpAccess().getGroup_1_1();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Op_1_1_2_Assignment_minusOperands(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Op_1_1_1_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new Op_1_1_0_Action_Minus_minusOperands(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				if(s3 != null) {
					last = s3.getPredecessor();
					return s3;
				} else {
					s2 = s2.getPredecessor().nextSolution(this,s2);
				}
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// {Minus.minusOperands+=current}
protected class Op_1_1_0_Action_Minus_minusOperands extends ActionToken  {

	public Op_1_1_0_Action_Minus_minusOperands(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOpAccess().getMinusMinusOperandsAction_1_1_0();
	}
	
	@Override
	protected Solution createSolution() {
		if(!current.isInstanceOf(grammarAccess.getOpAccess().getMinusMinusOperandsAction_1_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("minusOperands", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("minusOperands")) return null;
		return new Solution(getDescr((EObject)val));
	}
}

// "-"
protected class Op_1_1_1_Keyword extends KeywordToken  {
	
	public Op_1_1_1_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOpAccess().getHyphenMinusKeyword_1_1_1();
	}	
}

// minusOperands+=Term
protected class Op_1_1_2_Assignment_minusOperands extends AssignmentToken  {
	
	public Op_1_1_2_Assignment_minusOperands(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOpAccess().getMinusOperandsAssignment_1_1_2();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("minusOperands",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("minusOperands");

		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				Solution s = new Term_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}




/************ end Rule Op ****************/


/************ begin Rule Term ****************
 *
 * Term returns Expression:
 *   Atom|Parens;
 *
 **/

// Atom|Parens
protected class Term_Alternatives extends AlternativesToken {

	public Term_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTermAccess().getAlternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new Term_0_RuleCall_Atom(current, this);
			case 1: return new Term_1_RuleCall_Parens(current, this);
			default: return null;
		}
	}
}

// Atom
protected class Term_0_RuleCall_Atom extends RuleCallToken {
	
	public Term_0_RuleCall_Atom(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getAtomParserRuleCall_0();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(Atom_Assignment_name.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAtomRule().getType().getClassifier())) return null;
		return new Atom_Assignment_name(current, this).firstSolution();
	}
}

// Parens
protected class Term_1_RuleCall_Parens extends RuleCallToken {
	
	public Term_1_RuleCall_Parens(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getParensParserRuleCall_1();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(Parens_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getParensRule().getType().getClassifier())) return null;
		return new Parens_Group(current, this).firstSolution();
	}
}


/************ end Rule Term ****************/


/************ begin Rule Atom ****************
 *
 * Atom:
 *   name=ID;
 *
 **/

// name=ID
protected class Atom_Assignment_name extends AssignmentToken  {
	
	public Atom_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAtomAccess().getNameAssignment();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAtomAccess().getNameIDTerminalRuleCall_0();
			return new Solution(obj);
		}
		return null;
	}
}

/************ end Rule Atom ****************/


/************ begin Rule Parens ****************
 *
 * Parens returns Expression:
 *   "(" Op ")" (em="!")?;
 *
 **/

// "(" Op ")" (em="!")?
protected class Parens_Group extends GroupToken {
	
	public Parens_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParensAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Parens_3_Assignment_em(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Parens_2_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new Parens_1_RuleCall_Op(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				while(s3 != null) {
					Solution s4 = new Parens_0_Keyword(s3.getCurrent(), s3.getPredecessor()).firstSolution();
					if(s4 != null) {
						last = s4.getPredecessor();
						return s4;
					} else {
						s3 = s3.getPredecessor().nextSolution(this,s3);
					}
				}
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "("
protected class Parens_0_Keyword extends KeywordToken  {
	
	public Parens_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParensAccess().getLeftParenthesisKeyword_0();
	}	
}

// Op
protected class Parens_1_RuleCall_Op extends RuleCallToken {
	
	public Parens_1_RuleCall_Op(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getParensAccess().getOpParserRuleCall_1();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(Op_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getOpRule().getType().getClassifier())) return null;
		return new Op_Group(current, this).firstSolution();
	}
}

// ")"
protected class Parens_2_Keyword extends KeywordToken  {
	
	public Parens_2_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParensAccess().getRightParenthesisKeyword_2();
	}	
}

// (em="!")?
protected class Parens_3_Assignment_em extends AssignmentToken  {
	
	public Parens_3_Assignment_em(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParensAccess().getEmAssignment_3();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("em",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("em");

		if("!".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getParensAccess().getEmExclamationMarkKeyword_3_0();
			return new Solution(obj);
		}

		return null;
	}
}


/************ end Rule Parens ****************/


/************ begin Rule TrickyA ****************
 *
 * TrickyA returns TypeA1:
 *   "TA" TrickyA1 (name+=ID)* ({TypeB.x=current} "x"|{TypeC.x=current} "y")? name+=STRING;
 *
 **/

// "TA" TrickyA1 (name+=ID)* ({TypeB.x=current} "x"|{TypeC.x=current} "y")? name+=STRING
protected class TrickyA_Group extends GroupToken {
	
	public TrickyA_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TrickyA_4_Assignment_name(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TrickyA_3_Alternatives(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new TrickyA_2_Assignment_name(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				while(s3 != null) {
					Solution s4 = new TrickyA_1_RuleCall_TrickyA1(s3.getCurrent(), s3.getPredecessor()).firstSolution();
					while(s4 != null) {
						Solution s5 = new TrickyA_0_Keyword_TA(s4.getCurrent(), s4.getPredecessor()).firstSolution();
						if(s5 != null) {
							last = s5.getPredecessor();
							return s5;
						} else {
							s4 = s4.getPredecessor().nextSolution(this,s4);
						}
					}
					s3 = s3.getPredecessor().nextSolution(this,s3);
				}
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "TA"
protected class TrickyA_0_Keyword_TA extends KeywordToken  {
	
	public TrickyA_0_Keyword_TA(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getTAKeyword_0();
	}	
}

// TrickyA1
protected class TrickyA_1_RuleCall_TrickyA1 extends RuleCallToken {
	
	public TrickyA_1_RuleCall_TrickyA1(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getTrickyA1ParserRuleCall_1();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(TrickyA1_Assignment_name.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTrickyA1Rule().getType().getClassifier())) return null;
		return new TrickyA1_Assignment_name(current, this).firstSolution();
	}
}

// (name+=ID)*
protected class TrickyA_2_Assignment_name extends AssignmentToken  {
	
	public TrickyA_2_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getNameAssignment_2();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyAAccess().getNameIDTerminalRuleCall_2_0();
			return new Solution(obj);
		}
		return null;
	}
}

// ({TypeB.x=current} "x"|{TypeC.x=current} "y")?
protected class TrickyA_3_Alternatives extends AlternativesToken {

	public TrickyA_3_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getAlternatives_3();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new TrickyA_3_0_Group(current, this);
			case 1: return new TrickyA_3_1_Group(current, this);
			default: return null;
		}
	}
}

// {TypeB.x=current} "x"
protected class TrickyA_3_0_Group extends GroupToken {
	
	public TrickyA_3_0_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getGroup_3_0();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TrickyA_3_0_1_Keyword_x(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TrickyA_3_0_0_Action_TypeB_x(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// {TypeB.x=current}
protected class TrickyA_3_0_0_Action_TypeB_x extends ActionToken  {

	public TrickyA_3_0_0_Action_TypeB_x(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getTypeBXAction_3_0_0();
	}
	
	@Override
	protected Solution createSolution() {
		if(!current.isInstanceOf(grammarAccess.getTrickyAAccess().getTypeBXAction_3_0_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("x", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("x")) return null;
		return new Solution(getDescr((EObject)val));
	}
}

// "x"
protected class TrickyA_3_0_1_Keyword_x extends KeywordToken  {
	
	public TrickyA_3_0_1_Keyword_x(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getXKeyword_3_0_1();
	}	
}


// {TypeC.x=current} "y"
protected class TrickyA_3_1_Group extends GroupToken {
	
	public TrickyA_3_1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getGroup_3_1();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TrickyA_3_1_1_Keyword_y(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TrickyA_3_1_0_Action_TypeC_x(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// {TypeC.x=current}
protected class TrickyA_3_1_0_Action_TypeC_x extends ActionToken  {

	public TrickyA_3_1_0_Action_TypeC_x(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getTypeCXAction_3_1_0();
	}
	
	@Override
	protected Solution createSolution() {
		if(!current.isInstanceOf(grammarAccess.getTrickyAAccess().getTypeCXAction_3_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("x", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("x")) return null;
		return new Solution(getDescr((EObject)val));
	}
}

// "y"
protected class TrickyA_3_1_1_Keyword_y extends KeywordToken  {
	
	public TrickyA_3_1_1_Keyword_y(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getYKeyword_3_1_1();
	}	
}



// name+=STRING
protected class TrickyA_4_Assignment_name extends AssignmentToken  {
	
	public TrickyA_4_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getNameAssignment_4();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyAAccess().getNameSTRINGTerminalRuleCall_4_0();
			return new Solution(obj);
		}
		return null;
	}
}


/************ end Rule TrickyA ****************/


/************ begin Rule TrickyA1 ****************
 *
 * TrickyA1 returns TypeD:
 *   name+=ID;
 *
 **/

// name+=ID
protected class TrickyA1_Assignment_name extends AssignmentToken  {
	
	public TrickyA1_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyA1Access().getNameAssignment();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyA1Access().getNameIDTerminalRuleCall_0();
			return new Solution(obj);
		}
		return null;
	}
}

/************ end Rule TrickyA1 ****************/


/************ begin Rule TrickyB ****************
 *
 * TrickyB:
 *   "TB" (name=ID type+=INT)? (type+=INT)*;
 *
 **/

// "TB" (name=ID type+=INT)? (type+=INT)*
protected class TrickyB_Group extends GroupToken {
	
	public TrickyB_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyBAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TrickyB_2_Assignment_type(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TrickyB_1_Group(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new TrickyB_0_Keyword_TB(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				if(s3 != null) {
					last = s3.getPredecessor();
					return s3;
				} else {
					s2 = s2.getPredecessor().nextSolution(this,s2);
				}
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "TB"
protected class TrickyB_0_Keyword_TB extends KeywordToken  {
	
	public TrickyB_0_Keyword_TB(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyBAccess().getTBKeyword_0();
	}	
}

// (name=ID type+=INT)?
protected class TrickyB_1_Group extends GroupToken {
	
	public TrickyB_1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyBAccess().getGroup_1();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TrickyB_1_1_Assignment_type(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TrickyB_1_0_Assignment_name(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// name=ID
protected class TrickyB_1_0_Assignment_name extends AssignmentToken  {
	
	public TrickyB_1_0_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyBAccess().getNameAssignment_1_0();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyBAccess().getNameIDTerminalRuleCall_1_0_0();
			return new Solution(obj);
		}
		return null;
	}
}

// type+=INT
protected class TrickyB_1_1_Assignment_type extends AssignmentToken  {
	
	public TrickyB_1_1_Assignment_type(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyBAccess().getTypeAssignment_1_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("type",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyBAccess().getTypeINTTerminalRuleCall_1_1_0();
			return new Solution(obj);
		}
		return null;
	}
}


// (type+=INT)*
protected class TrickyB_2_Assignment_type extends AssignmentToken  {
	
	public TrickyB_2_Assignment_type(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyBAccess().getTypeAssignment_2();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("type",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyBAccess().getTypeINTTerminalRuleCall_2_0();
			return new Solution(obj);
		}
		return null;
	}
}


/************ end Rule TrickyB ****************/


/************ begin Rule TrickyC ****************
 *
 * TrickyC:
 *   "TC" name=ID ({C1.x=current} "x")? ({C2.y=current} "y")? ({C3.z=current} "z")?;
 *
 **/

// "TC" name=ID ({C1.x=current} "x")? ({C2.y=current} "y")? ({C3.z=current} "z")?
protected class TrickyC_Group extends GroupToken {
	
	public TrickyC_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TrickyC_4_Group(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TrickyC_3_Group(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new TrickyC_2_Group(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				while(s3 != null) {
					Solution s4 = new TrickyC_1_Assignment_name(s3.getCurrent(), s3.getPredecessor()).firstSolution();
					while(s4 != null) {
						Solution s5 = new TrickyC_0_Keyword_TC(s4.getCurrent(), s4.getPredecessor()).firstSolution();
						if(s5 != null) {
							last = s5.getPredecessor();
							return s5;
						} else {
							s4 = s4.getPredecessor().nextSolution(this,s4);
						}
					}
					s3 = s3.getPredecessor().nextSolution(this,s3);
				}
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "TC"
protected class TrickyC_0_Keyword_TC extends KeywordToken  {
	
	public TrickyC_0_Keyword_TC(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getTCKeyword_0();
	}	
}

// name=ID
protected class TrickyC_1_Assignment_name extends AssignmentToken  {
	
	public TrickyC_1_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getNameAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyCAccess().getNameIDTerminalRuleCall_1_0();
			return new Solution(obj);
		}
		return null;
	}
}

// ({C1.x=current} "x")?
protected class TrickyC_2_Group extends GroupToken {
	
	public TrickyC_2_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getGroup_2();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TrickyC_2_1_Keyword_x(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TrickyC_2_0_Action_C1_x(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// {C1.x=current}
protected class TrickyC_2_0_Action_C1_x extends ActionToken  {

	public TrickyC_2_0_Action_C1_x(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getC1XAction_2_0();
	}
	
	@Override
	protected Solution createSolution() {
		if(!current.isInstanceOf(grammarAccess.getTrickyCAccess().getC1XAction_2_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("x", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("x")) return null;
		return new Solution(getDescr((EObject)val));
	}
}

// "x"
protected class TrickyC_2_1_Keyword_x extends KeywordToken  {
	
	public TrickyC_2_1_Keyword_x(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getXKeyword_2_1();
	}	
}


// ({C2.y=current} "y")?
protected class TrickyC_3_Group extends GroupToken {
	
	public TrickyC_3_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getGroup_3();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TrickyC_3_1_Keyword_y(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TrickyC_3_0_Action_C2_y(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// {C2.y=current}
protected class TrickyC_3_0_Action_C2_y extends ActionToken  {

	public TrickyC_3_0_Action_C2_y(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getC2YAction_3_0();
	}
	
	@Override
	protected Solution createSolution() {
		if(!current.isInstanceOf(grammarAccess.getTrickyCAccess().getC2YAction_3_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("y", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("y")) return null;
		return new Solution(getDescr((EObject)val));
	}
}

// "y"
protected class TrickyC_3_1_Keyword_y extends KeywordToken  {
	
	public TrickyC_3_1_Keyword_y(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getYKeyword_3_1();
	}	
}


// ({C3.z=current} "z")?
protected class TrickyC_4_Group extends GroupToken {
	
	public TrickyC_4_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getGroup_4();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TrickyC_4_1_Keyword_z(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TrickyC_4_0_Action_C3_z(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// {C3.z=current}
protected class TrickyC_4_0_Action_C3_z extends ActionToken  {

	public TrickyC_4_0_Action_C3_z(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getC3ZAction_4_0();
	}
	
	@Override
	protected Solution createSolution() {
		if(!current.isInstanceOf(grammarAccess.getTrickyCAccess().getC3ZAction_4_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("z", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("z")) return null;
		return new Solution(getDescr((EObject)val));
	}
}

// "z"
protected class TrickyC_4_1_Keyword_z extends KeywordToken  {
	
	public TrickyC_4_1_Keyword_z(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getZKeyword_4_1();
	}	
}



/************ end Rule TrickyC ****************/


/************ begin Rule TrickyD ****************
 *
 * TrickyD:
 *   "TD" (name+=INT foo=STRING type+=ID)? (name+=INT type+=ID)? (type+=ID)*;
 *
 **/

// "TD" (name+=INT foo=STRING type+=ID)? (name+=INT type+=ID)? (type+=ID)*
protected class TrickyD_Group extends GroupToken {
	
	public TrickyD_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyDAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TrickyD_3_Assignment_type(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TrickyD_2_Group(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new TrickyD_1_Group(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				while(s3 != null) {
					Solution s4 = new TrickyD_0_Keyword_TD(s3.getCurrent(), s3.getPredecessor()).firstSolution();
					if(s4 != null) {
						last = s4.getPredecessor();
						return s4;
					} else {
						s3 = s3.getPredecessor().nextSolution(this,s3);
					}
				}
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "TD"
protected class TrickyD_0_Keyword_TD extends KeywordToken  {
	
	public TrickyD_0_Keyword_TD(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyDAccess().getTDKeyword_0();
	}	
}

// (name+=INT foo=STRING type+=ID)?
protected class TrickyD_1_Group extends GroupToken {
	
	public TrickyD_1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyDAccess().getGroup_1();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TrickyD_1_2_Assignment_type(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TrickyD_1_1_Assignment_foo(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new TrickyD_1_0_Assignment_name(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				if(s3 != null) {
					last = s3.getPredecessor();
					return s3;
				} else {
					s2 = s2.getPredecessor().nextSolution(this,s2);
				}
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// name+=INT
protected class TrickyD_1_0_Assignment_name extends AssignmentToken  {
	
	public TrickyD_1_0_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyDAccess().getNameAssignment_1_0();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyDAccess().getNameINTTerminalRuleCall_1_0_0();
			return new Solution(obj);
		}
		return null;
	}
}

// foo=STRING
protected class TrickyD_1_1_Assignment_foo extends AssignmentToken  {
	
	public TrickyD_1_1_Assignment_foo(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyDAccess().getFooAssignment_1_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("foo",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("foo");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyDAccess().getFooSTRINGTerminalRuleCall_1_1_0();
			return new Solution(obj);
		}
		return null;
	}
}

// type+=ID
protected class TrickyD_1_2_Assignment_type extends AssignmentToken  {
	
	public TrickyD_1_2_Assignment_type(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyDAccess().getTypeAssignment_1_2();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("type",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyDAccess().getTypeIDTerminalRuleCall_1_2_0();
			return new Solution(obj);
		}
		return null;
	}
}


// (name+=INT type+=ID)?
protected class TrickyD_2_Group extends GroupToken {
	
	public TrickyD_2_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyDAccess().getGroup_2();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TrickyD_2_1_Assignment_type(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TrickyD_2_0_Assignment_name(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// name+=INT
protected class TrickyD_2_0_Assignment_name extends AssignmentToken  {
	
	public TrickyD_2_0_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyDAccess().getNameAssignment_2_0();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyDAccess().getNameINTTerminalRuleCall_2_0_0();
			return new Solution(obj);
		}
		return null;
	}
}

// type+=ID
protected class TrickyD_2_1_Assignment_type extends AssignmentToken  {
	
	public TrickyD_2_1_Assignment_type(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyDAccess().getTypeAssignment_2_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("type",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyDAccess().getTypeIDTerminalRuleCall_2_1_0();
			return new Solution(obj);
		}
		return null;
	}
}


// (type+=ID)*
protected class TrickyD_3_Assignment_type extends AssignmentToken  {
	
	public TrickyD_3_Assignment_type(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyDAccess().getTypeAssignment_3();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("type",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyDAccess().getTypeIDTerminalRuleCall_3_0();
			return new Solution(obj);
		}
		return null;
	}
}


/************ end Rule TrickyD ****************/


/************ begin Rule TrickyE ****************
 *
 * TrickyE:
 *   "TE" (name+=INT foo+=STRING type+=ID)* "x" (name+=INT type+=ID)*;
 *
 **/

// "TE" (name+=INT foo+=STRING type+=ID)* "x" (name+=INT type+=ID)*
protected class TrickyE_Group extends GroupToken {
	
	public TrickyE_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyEAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TrickyE_3_Group(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TrickyE_2_Keyword_x(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new TrickyE_1_Group(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				while(s3 != null) {
					Solution s4 = new TrickyE_0_Keyword_TE(s3.getCurrent(), s3.getPredecessor()).firstSolution();
					if(s4 != null) {
						last = s4.getPredecessor();
						return s4;
					} else {
						s3 = s3.getPredecessor().nextSolution(this,s3);
					}
				}
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "TE"
protected class TrickyE_0_Keyword_TE extends KeywordToken  {
	
	public TrickyE_0_Keyword_TE(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyEAccess().getTEKeyword_0();
	}	
}

// (name+=INT foo+=STRING type+=ID)*
protected class TrickyE_1_Group extends GroupToken {
	
	public TrickyE_1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyEAccess().getGroup_1();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TrickyE_1_2_Assignment_type(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TrickyE_1_1_Assignment_foo(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new TrickyE_1_0_Assignment_name(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				if(s3 != null) {
					last = s3.getPredecessor();
					return s3;
				} else {
					s2 = s2.getPredecessor().nextSolution(this,s2);
				}
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// name+=INT
protected class TrickyE_1_0_Assignment_name extends AssignmentToken  {
	
	public TrickyE_1_0_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyEAccess().getNameAssignment_1_0();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyEAccess().getNameINTTerminalRuleCall_1_0_0();
			return new Solution(obj);
		}
		return null;
	}
}

// foo+=STRING
protected class TrickyE_1_1_Assignment_foo extends AssignmentToken  {
	
	public TrickyE_1_1_Assignment_foo(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyEAccess().getFooAssignment_1_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("foo",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("foo");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyEAccess().getFooSTRINGTerminalRuleCall_1_1_0();
			return new Solution(obj);
		}
		return null;
	}
}

// type+=ID
protected class TrickyE_1_2_Assignment_type extends AssignmentToken  {
	
	public TrickyE_1_2_Assignment_type(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyEAccess().getTypeAssignment_1_2();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("type",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyEAccess().getTypeIDTerminalRuleCall_1_2_0();
			return new Solution(obj);
		}
		return null;
	}
}


// "x"
protected class TrickyE_2_Keyword_x extends KeywordToken  {
	
	public TrickyE_2_Keyword_x(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyEAccess().getXKeyword_2();
	}	
}

// (name+=INT type+=ID)*
protected class TrickyE_3_Group extends GroupToken {
	
	public TrickyE_3_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyEAccess().getGroup_3();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TrickyE_3_1_Assignment_type(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TrickyE_3_0_Assignment_name(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// name+=INT
protected class TrickyE_3_0_Assignment_name extends AssignmentToken  {
	
	public TrickyE_3_0_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyEAccess().getNameAssignment_3_0();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyEAccess().getNameINTTerminalRuleCall_3_0_0();
			return new Solution(obj);
		}
		return null;
	}
}

// type+=ID
protected class TrickyE_3_1_Assignment_type extends AssignmentToken  {
	
	public TrickyE_3_1_Assignment_type(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyEAccess().getTypeAssignment_3_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("type",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyEAccess().getTypeIDTerminalRuleCall_3_1_0();
			return new Solution(obj);
		}
		return null;
	}
}



/************ end Rule TrickyE ****************/


/************ begin Rule TrickyF ****************
 *
 * TrickyF:
 *   "TF" (name+=ID type+=INT)* (name+=ID|type+=INT);
 *
 **/

// "TF" (name+=ID type+=INT)* (name+=ID|type+=INT)
protected class TrickyF_Group extends GroupToken {
	
	public TrickyF_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyFAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TrickyF_2_Alternatives(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TrickyF_1_Group(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new TrickyF_0_Keyword_TF(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				if(s3 != null) {
					last = s3.getPredecessor();
					return s3;
				} else {
					s2 = s2.getPredecessor().nextSolution(this,s2);
				}
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "TF"
protected class TrickyF_0_Keyword_TF extends KeywordToken  {
	
	public TrickyF_0_Keyword_TF(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyFAccess().getTFKeyword_0();
	}	
}

// (name+=ID type+=INT)*
protected class TrickyF_1_Group extends GroupToken {
	
	public TrickyF_1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyFAccess().getGroup_1();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TrickyF_1_1_Assignment_type(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TrickyF_1_0_Assignment_name(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// name+=ID
protected class TrickyF_1_0_Assignment_name extends AssignmentToken  {
	
	public TrickyF_1_0_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyFAccess().getNameAssignment_1_0();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyFAccess().getNameIDTerminalRuleCall_1_0_0();
			return new Solution(obj);
		}
		return null;
	}
}

// type+=INT
protected class TrickyF_1_1_Assignment_type extends AssignmentToken  {
	
	public TrickyF_1_1_Assignment_type(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyFAccess().getTypeAssignment_1_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("type",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyFAccess().getTypeINTTerminalRuleCall_1_1_0();
			return new Solution(obj);
		}
		return null;
	}
}


// name+=ID|type+=INT
protected class TrickyF_2_Alternatives extends AlternativesToken {

	public TrickyF_2_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTrickyFAccess().getAlternatives_2();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new TrickyF_2_0_Assignment_name(current, this);
			case 1: return new TrickyF_2_1_Assignment_type(current, this);
			default: return null;
		}
	}
}

// name+=ID
protected class TrickyF_2_0_Assignment_name extends AssignmentToken  {
	
	public TrickyF_2_0_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyFAccess().getNameAssignment_2_0();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyFAccess().getNameIDTerminalRuleCall_2_0_0();
			return new Solution(obj);
		}
		return null;
	}
}

// type+=INT
protected class TrickyF_2_1_Assignment_type extends AssignmentToken  {
	
	public TrickyF_2_1_Assignment_type(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyFAccess().getTypeAssignment_2_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("type",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyFAccess().getTypeINTTerminalRuleCall_2_1_0();
			return new Solution(obj);
		}
		return null;
	}
}



/************ end Rule TrickyF ****************/


/************ begin Rule TrickyG ****************
 *
 * TrickyG:
 *   "TG" tree=TrickyG1;
 *
 **/

// "TG" tree=TrickyG1
protected class TrickyG_Group extends GroupToken {
	
	public TrickyG_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyGAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TrickyG_1_Assignment_tree(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TrickyG_0_Keyword_TG(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// "TG"
protected class TrickyG_0_Keyword_TG extends KeywordToken  {
	
	public TrickyG_0_Keyword_TG(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyGAccess().getTGKeyword_0();
	}	
}

// tree=TrickyG1
protected class TrickyG_1_Assignment_tree extends AssignmentToken  {
	
	public TrickyG_1_Assignment_tree(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyGAccess().getTreeAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("tree",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("tree");

		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTrickyG1Rule().getType().getClassifier())) {
				Solution s = new TrickyG1_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}


/************ end Rule TrickyG ****************/


/************ begin Rule TrickyG1 ****************
 *
 * TrickyG1:
 *   "[" (vals+=TrickyG2 ("," vals+=TrickyG2)*)? "]";
 *
 **/

// "[" (vals+=TrickyG2 ("," vals+=TrickyG2)*)? "]"
protected class TrickyG1_Group extends GroupToken {
	
	public TrickyG1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyG1Access().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TrickyG1_2_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TrickyG1_1_Group(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new TrickyG1_0_Keyword(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				if(s3 != null) {
					last = s3.getPredecessor();
					return s3;
				} else {
					s2 = s2.getPredecessor().nextSolution(this,s2);
				}
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "["
protected class TrickyG1_0_Keyword extends KeywordToken  {
	
	public TrickyG1_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyG1Access().getLeftSquareBracketKeyword_0();
	}	
}

// (vals+=TrickyG2 ("," vals+=TrickyG2)*)?
protected class TrickyG1_1_Group extends GroupToken {
	
	public TrickyG1_1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyG1Access().getGroup_1();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TrickyG1_1_1_Group(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TrickyG1_1_0_Assignment_vals(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// vals+=TrickyG2
protected class TrickyG1_1_0_Assignment_vals extends AssignmentToken  {
	
	public TrickyG1_1_0_Assignment_vals(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyG1Access().getValsAssignment_1_0();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("vals",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("vals");

		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTrickyG2Rule().getType().getClassifier())) {
				Solution s = new TrickyG2_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// ("," vals+=TrickyG2)*
protected class TrickyG1_1_1_Group extends GroupToken {
	
	public TrickyG1_1_1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyG1Access().getGroup_1_1();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new TrickyG1_1_1_1_Assignment_vals(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new TrickyG1_1_1_0_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// ","
protected class TrickyG1_1_1_0_Keyword extends KeywordToken  {
	
	public TrickyG1_1_1_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyG1Access().getCommaKeyword_1_1_0();
	}	
}

// vals+=TrickyG2
protected class TrickyG1_1_1_1_Assignment_vals extends AssignmentToken  {
	
	public TrickyG1_1_1_1_Assignment_vals(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyG1Access().getValsAssignment_1_1_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("vals",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("vals");

		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTrickyG2Rule().getType().getClassifier())) {
				Solution s = new TrickyG2_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}



// "]"
protected class TrickyG1_2_Keyword extends KeywordToken  {
	
	public TrickyG1_2_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyG1Access().getRightSquareBracketKeyword_2();
	}	
}


/************ end Rule TrickyG1 ****************/


/************ begin Rule TrickyG2 ****************
 *
 * TrickyG2:
 *   TrickyG1|val=INT;
 *
 **/

// TrickyG1|val=INT
protected class TrickyG2_Alternatives extends AlternativesToken {

	public TrickyG2_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTrickyG2Access().getAlternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new TrickyG2_0_RuleCall_TrickyG1(current, this);
			case 1: return new TrickyG2_1_Assignment_val(current, this);
			default: return null;
		}
	}
}

// TrickyG1
protected class TrickyG2_0_RuleCall_TrickyG1 extends RuleCallToken {
	
	public TrickyG2_0_RuleCall_TrickyG1(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTrickyG2Access().getTrickyG1ParserRuleCall_0();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(TrickyG1_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTrickyG1Rule().getType().getClassifier())) return null;
		return new TrickyG1_Group(current, this).firstSolution();
	}
}

// val=INT
protected class TrickyG2_1_Assignment_val extends AssignmentToken  {
	
	public TrickyG2_1_Assignment_val(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyG2Access().getValAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("val",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyG2Access().getValINTTerminalRuleCall_1_0();
			return new Solution(obj);
		}
		return null;
	}
}


/************ end Rule TrickyG2 ****************/

}
