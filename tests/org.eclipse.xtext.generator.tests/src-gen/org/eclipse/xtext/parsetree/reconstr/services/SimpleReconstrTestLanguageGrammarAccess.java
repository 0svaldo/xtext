/*
* generated by Xtext
*/

package org.eclipse.xtext.parsetree.reconstr.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SimpleReconstrTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class OpElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Op");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallTerm = (RuleCall)cGroup.eContents().get(0);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Action c10ActionOpvalues = (Action)c1Group.eContents().get(0);
		private final Assignment c11AssignmentValues = (Assignment)c1Group.eContents().get(1);
		private final RuleCall c110ParserRuleCallTerm = (RuleCall)c11AssignmentValues.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public RuleCall ele0ParserRuleCallTerm() { return c0ParserRuleCallTerm; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Action ele10ActionOpvalues() { return c10ActionOpvalues; }

		// not supported
		public Assignment ele11AssignmentValues() { return c11AssignmentValues; }

		// not supported
		public RuleCall ele110ParserRuleCallTerm() { return c110ParserRuleCallTerm; }
	}

	public class TermElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallAtom = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallTwoNumbers = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall c2ParserRuleCallManyStrings = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall c3ParserRuleCallParens = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall c4ParserRuleCallType = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall c5ParserRuleCallRef2 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall c6ParserRuleCallSpare = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall c7ParserRuleCallBoolean = (RuleCall)cAlternatives.eContents().get(7);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallAtom() { return c0ParserRuleCallAtom; }

		// not supported
		public RuleCall ele1ParserRuleCallTwoNumbers() { return c1ParserRuleCallTwoNumbers; }

		// not supported
		public RuleCall ele2ParserRuleCallManyStrings() { return c2ParserRuleCallManyStrings; }

		// not supported
		public RuleCall ele3ParserRuleCallParens() { return c3ParserRuleCallParens; }

		// not supported
		public RuleCall ele4ParserRuleCallType() { return c4ParserRuleCallType; }

		// not supported
		public RuleCall ele5ParserRuleCallRef2() { return c5ParserRuleCallRef2; }

		// not supported
		public RuleCall ele6ParserRuleCallSpare() { return c6ParserRuleCallSpare; }

		// not supported
		public RuleCall ele7ParserRuleCallBoolean() { return c7ParserRuleCallBoolean; }
	}

	public class AtomElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atom");
		private final Assignment cAssignmentName = (Assignment)rule.eContents().get(1);
		private final RuleCall c0TerminalRuleCallID = (RuleCall)cAssignmentName.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Assignment eleAssignmentName() { return cAssignmentName; }

		// not supported
		public RuleCall ele0TerminalRuleCallID() { return c0TerminalRuleCallID; }
	}

	public class ParensElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordLeftParenthesis = (Keyword)cGroup.eContents().get(0);
		private final RuleCall c1ParserRuleCallOp = (RuleCall)cGroup.eContents().get(1);
		private final Keyword c2KeywordRightParenthesis = (Keyword)cGroup.eContents().get(2);
		private final Assignment c3AssignmentEm = (Assignment)cGroup.eContents().get(3);
		private final Keyword c30KeywordExclamationMark = (Keyword)c3AssignmentEm.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordLeftParenthesis() { return c0KeywordLeftParenthesis; }

		// not supported
		public RuleCall ele1ParserRuleCallOp() { return c1ParserRuleCallOp; }

		// not supported
		public Keyword ele2KeywordRightParenthesis() { return c2KeywordRightParenthesis; }

		// not supported
		public Assignment ele3AssignmentEm() { return c3AssignmentEm; }

		// not supported
		public Keyword ele30KeywordExclamationMark() { return c30KeywordExclamationMark; }
	}

	public class TwoNumbersElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TwoNumbers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment c0AssignmentNum1 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall c00TerminalRuleCallINT = (RuleCall)c0AssignmentNum1.eContents().get(0);
		private final Assignment c1AssignmentNum2 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallINT = (RuleCall)c1AssignmentNum2.eContents().get(0);
		private final Group c2Group = (Group)cGroup.eContents().get(2);
		private final Keyword c20KeywordNumberSign = (Keyword)c2Group.eContents().get(0);
		private final Assignment c21AssignmentNum3 = (Assignment)c2Group.eContents().get(1);
		private final RuleCall c210TerminalRuleCallINT = (RuleCall)c21AssignmentNum3.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Assignment ele0AssignmentNum1() { return c0AssignmentNum1; }

		// not supported
		public RuleCall ele00TerminalRuleCallINT() { return c00TerminalRuleCallINT; }

		// not supported
		public Assignment ele1AssignmentNum2() { return c1AssignmentNum2; }

		// not supported
		public RuleCall ele10TerminalRuleCallINT() { return c10TerminalRuleCallINT; }

		// not supported
		public Group ele2Group() { return c2Group; }

		// not supported
		public Keyword ele20KeywordNumberSign() { return c20KeywordNumberSign; }

		// not supported
		public Assignment ele21AssignmentNum3() { return c21AssignmentNum3; }

		// not supported
		public RuleCall ele210TerminalRuleCallINT() { return c210TerminalRuleCallINT; }
	}

	public class ManyStringsElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ManyStrings");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordEqualsSign = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentStr1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallSTRING = (RuleCall)c1AssignmentStr1.eContents().get(0);
		private final Assignment c2AssignmentStr2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall c20TerminalRuleCallSTRING = (RuleCall)c2AssignmentStr2.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordEqualsSign() { return c0KeywordEqualsSign; }

		// not supported
		public Assignment ele1AssignmentStr1() { return c1AssignmentStr1; }

		// not supported
		public RuleCall ele10TerminalRuleCallSTRING() { return c10TerminalRuleCallSTRING; }

		// not supported
		public Assignment ele2AssignmentStr2() { return c2AssignmentStr2; }

		// not supported
		public RuleCall ele20TerminalRuleCallSTRING() { return c20TerminalRuleCallSTRING; }
	}

	public class TypeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordType = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallID = (RuleCall)c1AssignmentName.eContents().get(0);
		private final Keyword c2KeywordExtends = (Keyword)cGroup.eContents().get(2);
		private final Assignment c3AssignmentExtends = (Assignment)cGroup.eContents().get(3);
		private final CrossReference c30CrossReferenceIDType = (CrossReference)c3AssignmentExtends.eContents().get(0);
		private final RuleCall c301TerminalRuleCallID = (RuleCall)c30CrossReferenceIDType.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordType() { return c0KeywordType; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10TerminalRuleCallID() { return c10TerminalRuleCallID; }

		// not supported
		public Keyword ele2KeywordExtends() { return c2KeywordExtends; }

		// not supported
		public Assignment ele3AssignmentExtends() { return c3AssignmentExtends; }

		// not supported
		public CrossReference ele30CrossReferenceIDType() { return c30CrossReferenceIDType; }

		// not supported
		public RuleCall ele301TerminalRuleCallID() { return c301TerminalRuleCallID; }
	}

	public class Ref2Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ref2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordNumberSignDigitTwo = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentRef2 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives c10Alternatives = (Alternatives)c1AssignmentRef2.eContents().get(0);
		private final Keyword c100KeywordMykeyword1 = (Keyword)c10Alternatives.eContents().get(0);
		private final RuleCall c101TerminalRuleCallSTRING = (RuleCall)c10Alternatives.eContents().get(1);
		private final Keyword c102KeywordMykeyword2 = (Keyword)c10Alternatives.eContents().get(2);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordNumberSignDigitTwo() { return c0KeywordNumberSignDigitTwo; }

		// not supported
		public Assignment ele1AssignmentRef2() { return c1AssignmentRef2; }

		// not supported
		public Alternatives ele10Alternatives() { return c10Alternatives; }

		// not supported
		public Keyword ele100KeywordMykeyword1() { return c100KeywordMykeyword1; }

		// not supported
		public RuleCall ele101TerminalRuleCallSTRING() { return c101TerminalRuleCallSTRING; }

		// not supported
		public Keyword ele102KeywordMykeyword2() { return c102KeywordMykeyword2; }
	}

	public class SpareElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Spare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordNumberSignDigitThree = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentId = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallID = (RuleCall)c1AssignmentId.eContents().get(0);
		private final Group c2Group = (Group)cGroup.eContents().get(2);
		private final Keyword c20KeywordFullStop = (Keyword)c2Group.eContents().get(0);
		private final Assignment c21AssignmentId = (Assignment)c2Group.eContents().get(1);
		private final RuleCall c210TerminalRuleCallID = (RuleCall)c21AssignmentId.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordNumberSignDigitThree() { return c0KeywordNumberSignDigitThree; }

		// not supported
		public Assignment ele1AssignmentId() { return c1AssignmentId; }

		// not supported
		public RuleCall ele10TerminalRuleCallID() { return c10TerminalRuleCallID; }

		// not supported
		public Group ele2Group() { return c2Group; }

		// not supported
		public Keyword ele20KeywordFullStop() { return c20KeywordFullStop; }

		// not supported
		public Assignment ele21AssignmentId() { return c21AssignmentId; }

		// not supported
		public RuleCall ele210TerminalRuleCallID() { return c210TerminalRuleCallID; }
	}

	public class BooleanElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordNumberSignDigitFour = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentBool = (Assignment)cGroup.eContents().get(1);
		private final Keyword c10KeywordMyoption = (Keyword)c1AssignmentBool.eContents().get(0);
		private final Keyword c2KeywordKw = (Keyword)cGroup.eContents().get(2);
		private final Assignment c3AssignmentValue = (Assignment)cGroup.eContents().get(3);
		private final RuleCall c30TerminalRuleCallID = (RuleCall)c3AssignmentValue.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordNumberSignDigitFour() { return c0KeywordNumberSignDigitFour; }

		// not supported
		public Assignment ele1AssignmentBool() { return c1AssignmentBool; }

		// not supported
		public Keyword ele10KeywordMyoption() { return c10KeywordMyoption; }

		// not supported
		public Keyword ele2KeywordKw() { return c2KeywordKw; }

		// not supported
		public Assignment ele3AssignmentValue() { return c3AssignmentValue; }

		// not supported
		public RuleCall ele30TerminalRuleCallID() { return c30TerminalRuleCallID; }
	}
	
	private OpElements pOp;
	private TermElements pTerm;
	private AtomElements pAtom;
	private ParensElements pParens;
	private TwoNumbersElements pTwoNumbers;
	private ManyStringsElements pManyStrings;
	private TypeElements pType;
	private Ref2Elements pRef2;
	private SpareElements pSpare;
	private BooleanElements pBoolean;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess terminalsGrammarAccess;

	@Inject
	public SimpleReconstrTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess terminalsGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.terminalsGrammarAccess = terminalsGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return terminalsGrammarAccess;
	}

	
	// not supported
	public OpElements prOp() {
		return (pOp != null) ? pOp : (pOp = new OpElements());
	} 

	// not supported
	public TermElements prTerm() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	} 

	// not supported
	public AtomElements prAtom() {
		return (pAtom != null) ? pAtom : (pAtom = new AtomElements());
	} 

	// not supported
	public ParensElements prParens() {
		return (pParens != null) ? pParens : (pParens = new ParensElements());
	} 

	// not supported
	public TwoNumbersElements prTwoNumbers() {
		return (pTwoNumbers != null) ? pTwoNumbers : (pTwoNumbers = new TwoNumbersElements());
	} 

	// not supported
	public ManyStringsElements prManyStrings() {
		return (pManyStrings != null) ? pManyStrings : (pManyStrings = new ManyStringsElements());
	} 

	// not supported
	public TypeElements prType() {
		return (pType != null) ? pType : (pType = new TypeElements());
	} 

	// not supported
	public Ref2Elements prRef2() {
		return (pRef2 != null) ? pRef2 : (pRef2 = new Ref2Elements());
	} 

	// not supported
	public SpareElements prSpare() {
		return (pSpare != null) ? pSpare : (pSpare = new SpareElements());
	} 

	// not supported
	public BooleanElements prBoolean() {
		return (pBoolean != null) ? pBoolean : (pBoolean = new BooleanElements());
	} 

	// not supported
	public TerminalRule trID() {
		return terminalsGrammarAccess.trID();
	} 

	// not supported
	public TerminalRule trINT() {
		return terminalsGrammarAccess.trINT();
	} 

	// not supported
	public TerminalRule trSTRING() {
		return terminalsGrammarAccess.trSTRING();
	} 

	// not supported
	public TerminalRule trML_COMMENT() {
		return terminalsGrammarAccess.trML_COMMENT();
	} 

	// not supported
	public TerminalRule trSL_COMMENT() {
		return terminalsGrammarAccess.trSL_COMMENT();
	} 

	// not supported
	public TerminalRule trWS() {
		return terminalsGrammarAccess.trWS();
	} 

	// not supported
	public TerminalRule trANY_OTHER() {
		return terminalsGrammarAccess.trANY_OTHER();
	} 
}
