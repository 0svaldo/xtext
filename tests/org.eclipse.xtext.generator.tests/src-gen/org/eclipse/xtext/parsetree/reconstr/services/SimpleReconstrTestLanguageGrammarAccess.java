/*
* generated by Xtext
*/

package org.eclipse.xtext.parsetree.reconstr.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SimpleReconstrTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class OpElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Op");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOpValuesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesTermParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		
		//Op returns Expression:
		//  Term ({Op.values+=current} values+=Term)*;
		public ParserRule getRule() { return rule; }

		//Term ({Op.values+=current} values+=Term)*
		public Group getGroup() { return cGroup; }

		//Term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }

		//({Op.values+=current} values+=Term)*
		public Group getGroup_1() { return cGroup_1; }

		//{Op.values+=current}
		public Action getOpValuesAction_1_0() { return cOpValuesAction_1_0; }

		//values+=Term
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }

		//Term
		public RuleCall getValuesTermParserRuleCall_1_1_0() { return cValuesTermParserRuleCall_1_1_0; }
	}

	public class TermElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTwoNumbersParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cManyStringsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cParensParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRef2ParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSpareParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBooleanParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTransient1ParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cConsumed1ParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cConsumed2ParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cLoop1ParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cLoop2ParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cLoop3ParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cLoop4ParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cLoopBug285452ParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cDuplicateBug284491ParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		
		//Term returns Expression:
		//  Atom|TwoNumbers|ManyStrings|Parens|Type|Ref2|Spare|Boolean|Transient1|Consumed1|
		//  Consumed2|Loop1|Loop2|Loop3|Loop4|LoopBug285452|DuplicateBug284491;
		public ParserRule getRule() { return rule; }

		//Atom|TwoNumbers|ManyStrings|Parens|Type|Ref2|Spare|Boolean|Transient1|Consumed1|
		//Consumed2|Loop1|Loop2|Loop3|Loop4|LoopBug285452|DuplicateBug284491
		public Alternatives getAlternatives() { return cAlternatives; }

		//Atom
		public RuleCall getAtomParserRuleCall_0() { return cAtomParserRuleCall_0; }

		//TwoNumbers
		public RuleCall getTwoNumbersParserRuleCall_1() { return cTwoNumbersParserRuleCall_1; }

		//ManyStrings
		public RuleCall getManyStringsParserRuleCall_2() { return cManyStringsParserRuleCall_2; }

		//Parens
		public RuleCall getParensParserRuleCall_3() { return cParensParserRuleCall_3; }

		//Type
		public RuleCall getTypeParserRuleCall_4() { return cTypeParserRuleCall_4; }

		//Ref2
		public RuleCall getRef2ParserRuleCall_5() { return cRef2ParserRuleCall_5; }

		//Spare
		public RuleCall getSpareParserRuleCall_6() { return cSpareParserRuleCall_6; }

		//Boolean
		public RuleCall getBooleanParserRuleCall_7() { return cBooleanParserRuleCall_7; }

		//Transient1
		public RuleCall getTransient1ParserRuleCall_8() { return cTransient1ParserRuleCall_8; }

		//Consumed1
		public RuleCall getConsumed1ParserRuleCall_9() { return cConsumed1ParserRuleCall_9; }

		//Consumed2
		public RuleCall getConsumed2ParserRuleCall_10() { return cConsumed2ParserRuleCall_10; }

		//Loop1
		public RuleCall getLoop1ParserRuleCall_11() { return cLoop1ParserRuleCall_11; }

		//Loop2
		public RuleCall getLoop2ParserRuleCall_12() { return cLoop2ParserRuleCall_12; }

		//Loop3
		public RuleCall getLoop3ParserRuleCall_13() { return cLoop3ParserRuleCall_13; }

		//Loop4
		public RuleCall getLoop4ParserRuleCall_14() { return cLoop4ParserRuleCall_14; }

		//LoopBug285452
		public RuleCall getLoopBug285452ParserRuleCall_15() { return cLoopBug285452ParserRuleCall_15; }

		//DuplicateBug284491
		public RuleCall getDuplicateBug284491ParserRuleCall_16() { return cDuplicateBug284491ParserRuleCall_16; }
	}

	public class AtomElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atom");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Atom:
		//  name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ParensElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOpParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEmAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cEmExclamationMarkKeyword_3_0 = (Keyword)cEmAssignment_3.eContents().get(0);
		
		//Parens returns Expression:
		//  "(" Op ")" em="!"?;
		public ParserRule getRule() { return rule; }

		//"(" Op ")" em="!"?
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Op
		public RuleCall getOpParserRuleCall_1() { return cOpParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//em="!"?
		public Assignment getEmAssignment_3() { return cEmAssignment_3; }

		//"!"
		public Keyword getEmExclamationMarkKeyword_3_0() { return cEmExclamationMarkKeyword_3_0; }
	}

	public class TwoNumbersElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TwoNumbers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNum1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNum1INTTerminalRuleCall_0_0 = (RuleCall)cNum1Assignment_0.eContents().get(0);
		private final Assignment cNum2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNum2INTTerminalRuleCall_1_0 = (RuleCall)cNum2Assignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cNumberSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNum3Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNum3INTTerminalRuleCall_2_1_0 = (RuleCall)cNum3Assignment_2_1.eContents().get(0);
		
		//TwoNumbers:
		//  num1=INT num2=INT ("#" num3+=INT)*;
		public ParserRule getRule() { return rule; }

		//num1=INT num2=INT ("#" num3+=INT)*
		public Group getGroup() { return cGroup; }

		//num1=INT
		public Assignment getNum1Assignment_0() { return cNum1Assignment_0; }

		//INT
		public RuleCall getNum1INTTerminalRuleCall_0_0() { return cNum1INTTerminalRuleCall_0_0; }

		//num2=INT
		public Assignment getNum2Assignment_1() { return cNum2Assignment_1; }

		//INT
		public RuleCall getNum2INTTerminalRuleCall_1_0() { return cNum2INTTerminalRuleCall_1_0; }

		//("#" num3+=INT)*
		public Group getGroup_2() { return cGroup_2; }

		//"#"
		public Keyword getNumberSignKeyword_2_0() { return cNumberSignKeyword_2_0; }

		//num3+=INT
		public Assignment getNum3Assignment_2_1() { return cNum3Assignment_2_1; }

		//INT
		public RuleCall getNum3INTTerminalRuleCall_2_1_0() { return cNum3INTTerminalRuleCall_2_1_0; }
	}

	public class ManyStringsElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ManyStrings");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStr1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStr1STRINGTerminalRuleCall_1_0 = (RuleCall)cStr1Assignment_1.eContents().get(0);
		private final Assignment cStr2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStr2STRINGTerminalRuleCall_2_0 = (RuleCall)cStr2Assignment_2.eContents().get(0);
		
		//ManyStrings:
		//  "=" str1+=STRING* str2+=STRING;
		public ParserRule getRule() { return rule; }

		//"=" str1+=STRING* str2+=STRING
		public Group getGroup() { return cGroup; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//str1+=STRING*
		public Assignment getStr1Assignment_1() { return cStr1Assignment_1; }

		//STRING
		public RuleCall getStr1STRINGTerminalRuleCall_1_0() { return cStr1STRINGTerminalRuleCall_1_0; }

		//str2+=STRING
		public Assignment getStr2Assignment_2() { return cStr2Assignment_2; }

		//STRING
		public RuleCall getStr2STRINGTerminalRuleCall_2_0() { return cStr2STRINGTerminalRuleCall_2_0; }
	}

	public class TypeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cExtendsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExtendsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cExtendsTypeCrossReference_3_0 = (CrossReference)cExtendsAssignment_3.eContents().get(0);
		private final RuleCall cExtendsTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cExtendsTypeCrossReference_3_0.eContents().get(1);
		
		//Type:
		//  "type" name=ID "extends" extends=[Type];
		public ParserRule getRule() { return rule; }

		//"type" name=ID "extends" extends=[Type]
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"extends"
		public Keyword getExtendsKeyword_2() { return cExtendsKeyword_2; }

		//extends=[Type]
		public Assignment getExtendsAssignment_3() { return cExtendsAssignment_3; }

		//[Type]
		public CrossReference getExtendsTypeCrossReference_3_0() { return cExtendsTypeCrossReference_3_0; }

		//ID
		public RuleCall getExtendsTypeIDTerminalRuleCall_3_0_1() { return cExtendsTypeIDTerminalRuleCall_3_0_1; }
	}

	public class Ref2Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ref2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitTwoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRef2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cRef2Alternatives_1_0 = (Alternatives)cRef2Assignment_1.eContents().get(0);
		private final Keyword cRef2Mykeyword1Keyword_1_0_0 = (Keyword)cRef2Alternatives_1_0.eContents().get(0);
		private final RuleCall cRef2STRINGTerminalRuleCall_1_0_1 = (RuleCall)cRef2Alternatives_1_0.eContents().get(1);
		private final Keyword cRef2Mykeyword2Keyword_1_0_2 = (Keyword)cRef2Alternatives_1_0.eContents().get(2);
		
		//Ref2:
		//  "#2" ref2=( "mykeyword1" | STRING | "mykeyword2" );
		public ParserRule getRule() { return rule; }

		//"#2" ref2=( "mykeyword1" | STRING | "mykeyword2" )
		public Group getGroup() { return cGroup; }

		//"#2"
		public Keyword getNumberSignDigitTwoKeyword_0() { return cNumberSignDigitTwoKeyword_0; }

		//ref2=( "mykeyword1" | STRING | "mykeyword2" )
		public Assignment getRef2Assignment_1() { return cRef2Assignment_1; }

		//"mykeyword1"|STRING|"mykeyword2"
		public Alternatives getRef2Alternatives_1_0() { return cRef2Alternatives_1_0; }

		//"mykeyword1"
		public Keyword getRef2Mykeyword1Keyword_1_0_0() { return cRef2Mykeyword1Keyword_1_0_0; }

		//STRING
		public RuleCall getRef2STRINGTerminalRuleCall_1_0_1() { return cRef2STRINGTerminalRuleCall_1_0_1; }

		//"mykeyword2"
		public Keyword getRef2Mykeyword2Keyword_1_0_2() { return cRef2Mykeyword2Keyword_1_0_2; }
	}

	public class SpareElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Spare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitThreeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIdAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_2_1_0 = (RuleCall)cIdAssignment_2_1.eContents().get(0);
		
		//Spare:
		//  "#3" id+=ID ("." id+=ID)*;
		public ParserRule getRule() { return rule; }

		//"#3" id+=ID ("." id+=ID)*
		public Group getGroup() { return cGroup; }

		//"#3"
		public Keyword getNumberSignDigitThreeKeyword_0() { return cNumberSignDigitThreeKeyword_0; }

		//id+=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//("." id+=ID)*
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//id+=ID
		public Assignment getIdAssignment_2_1() { return cIdAssignment_2_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_1_0() { return cIdIDTerminalRuleCall_2_1_0; }
	}

	public class BooleanElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitFourKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBoolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cBoolMyoptionKeyword_1_0 = (Keyword)cBoolAssignment_1.eContents().get(0);
		private final Keyword cKwKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueIDTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Boolean:
		//  "#4" bool?="myoption"? "kw" value=ID;
		public ParserRule getRule() { return rule; }

		//"#4" bool?="myoption"? "kw" value=ID
		public Group getGroup() { return cGroup; }

		//"#4"
		public Keyword getNumberSignDigitFourKeyword_0() { return cNumberSignDigitFourKeyword_0; }

		//bool?="myoption"?
		public Assignment getBoolAssignment_1() { return cBoolAssignment_1; }

		//"myoption"
		public Keyword getBoolMyoptionKeyword_1_0() { return cBoolMyoptionKeyword_1_0; }

		//"kw"
		public Keyword getKwKeyword_2() { return cKwKeyword_2; }

		//value=ID
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_3_0() { return cValueIDTerminalRuleCall_3_0; }
	}

	public class Transient1Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transient1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitFiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cPrecStarAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cPrecStarAsteriskKeyword_1_0_0 = (Keyword)cPrecStarAssignment_1_0.eContents().get(0);
		private final Assignment cPrecAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cPrecINTTerminalRuleCall_1_1_0 = (RuleCall)cPrecAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cScaleStarAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final Keyword cScaleStarAsteriskKeyword_2_1_0_0 = (Keyword)cScaleStarAssignment_2_1_0.eContents().get(0);
		private final Assignment cScaleAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cScaleINTTerminalRuleCall_2_1_1_0 = (RuleCall)cScaleAssignment_2_1_1.eContents().get(0);
		
		//Transient1:
		//  "#5" (precStar?="*"|prec=INT) ("," (scaleStar?="*"|scale=INT))?;
		public ParserRule getRule() { return rule; }

		//"#5" (precStar?="*"|prec=INT) ("," (scaleStar?="*"|scale=INT))?
		public Group getGroup() { return cGroup; }

		//"#5"
		public Keyword getNumberSignDigitFiveKeyword_0() { return cNumberSignDigitFiveKeyword_0; }

		//precStar?="*"|prec=INT
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//precStar?="*"
		public Assignment getPrecStarAssignment_1_0() { return cPrecStarAssignment_1_0; }

		//"*"
		public Keyword getPrecStarAsteriskKeyword_1_0_0() { return cPrecStarAsteriskKeyword_1_0_0; }

		//prec=INT
		public Assignment getPrecAssignment_1_1() { return cPrecAssignment_1_1; }

		//INT
		public RuleCall getPrecINTTerminalRuleCall_1_1_0() { return cPrecINTTerminalRuleCall_1_1_0; }

		//("," (scaleStar?="*"|scale=INT))?
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//scaleStar?="*"|scale=INT
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//scaleStar?="*"
		public Assignment getScaleStarAssignment_2_1_0() { return cScaleStarAssignment_2_1_0; }

		//"*"
		public Keyword getScaleStarAsteriskKeyword_2_1_0_0() { return cScaleStarAsteriskKeyword_2_1_0_0; }

		//scale=INT
		public Assignment getScaleAssignment_2_1_1() { return cScaleAssignment_2_1_1; }

		//INT
		public RuleCall getScaleINTTerminalRuleCall_2_1_1_0() { return cScaleINTTerminalRuleCall_2_1_1_0; }
	}

	public class Consumed1Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Consumed1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitSixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cV1Keyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cV1Assignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cV1INTTerminalRuleCall_1_0_1_0 = (RuleCall)cV1Assignment_1_0_1.eContents().get(0);
		private final Assignment cV2Assignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cV2IDTerminalRuleCall_1_0_2_0 = (RuleCall)cV2Assignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cV2Keyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cV2Assignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cV2IDTerminalRuleCall_1_1_1_0 = (RuleCall)cV2Assignment_1_1_1.eContents().get(0);
		private final Assignment cV1Assignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cV1INTTerminalRuleCall_1_1_2_0 = (RuleCall)cV1Assignment_1_1_2.eContents().get(0);
		
		//Consumed1:
		//  "#6" ("v1" v1+=INT* v2+=ID|"v2" v2+=ID* v1+=INT);
		public ParserRule getRule() { return rule; }

		//"#6" ("v1" v1+=INT* v2+=ID|"v2" v2+=ID* v1+=INT)
		public Group getGroup() { return cGroup; }

		//"#6"
		public Keyword getNumberSignDigitSixKeyword_0() { return cNumberSignDigitSixKeyword_0; }

		//"v1" v1+=INT* v2+=ID|"v2" v2+=ID* v1+=INT
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"v1" v1+=INT* v2+=ID
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"v1"
		public Keyword getV1Keyword_1_0_0() { return cV1Keyword_1_0_0; }

		//v1+=INT*
		public Assignment getV1Assignment_1_0_1() { return cV1Assignment_1_0_1; }

		//INT
		public RuleCall getV1INTTerminalRuleCall_1_0_1_0() { return cV1INTTerminalRuleCall_1_0_1_0; }

		//v2+=ID
		public Assignment getV2Assignment_1_0_2() { return cV2Assignment_1_0_2; }

		//ID
		public RuleCall getV2IDTerminalRuleCall_1_0_2_0() { return cV2IDTerminalRuleCall_1_0_2_0; }

		//"v2" v2+=ID* v1+=INT
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"v2"
		public Keyword getV2Keyword_1_1_0() { return cV2Keyword_1_1_0; }

		//v2+=ID*
		public Assignment getV2Assignment_1_1_1() { return cV2Assignment_1_1_1; }

		//ID
		public RuleCall getV2IDTerminalRuleCall_1_1_1_0() { return cV2IDTerminalRuleCall_1_1_1_0; }

		//v1+=INT
		public Assignment getV1Assignment_1_1_2() { return cV1Assignment_1_1_2; }

		//INT
		public RuleCall getV1INTTerminalRuleCall_1_1_2_0() { return cV1INTTerminalRuleCall_1_1_2_0; }
	}

	public class Consumed2Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Consumed2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitSevenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cChildAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChildConsumed1ParserRuleCall_1_0 = (RuleCall)cChildAssignment_1.eContents().get(0);
		
		//Consumed2:
		//  "#7" child=Consumed1;
		public ParserRule getRule() { return rule; }

		//"#7" child=Consumed1
		public Group getGroup() { return cGroup; }

		//"#7"
		public Keyword getNumberSignDigitSevenKeyword_0() { return cNumberSignDigitSevenKeyword_0; }

		//child=Consumed1
		public Assignment getChildAssignment_1() { return cChildAssignment_1; }

		//Consumed1
		public RuleCall getChildConsumed1ParserRuleCall_1_0() { return cChildConsumed1ParserRuleCall_1_0; }
	}

	public class Loop1Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Loop1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKw0Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNumberSignDigitEightKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Keyword cKw1Keyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdIDTerminalRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cKw2Keyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cKw30Keyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		
		//Loop1:
		//  "kw0"? "#8" id+=ID "kw1"? id+=ID ("kw2"* "kw30")+;
		public ParserRule getRule() { return rule; }

		//"kw0"? "#8" id+=ID "kw1"? id+=ID ("kw2"* "kw30")+
		public Group getGroup() { return cGroup; }

		//"kw0"?
		public Keyword getKw0Keyword_0() { return cKw0Keyword_0; }

		//"#8"
		public Keyword getNumberSignDigitEightKeyword_1() { return cNumberSignDigitEightKeyword_1; }

		//id+=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }

		//"kw1"?
		public Keyword getKw1Keyword_3() { return cKw1Keyword_3; }

		//id+=ID
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_4_0() { return cIdIDTerminalRuleCall_4_0; }

		//("kw2"* "kw30")+
		public Group getGroup_5() { return cGroup_5; }

		//"kw2"*
		public Keyword getKw2Keyword_5_0() { return cKw2Keyword_5_0; }

		//"kw30"
		public Keyword getKw30Keyword_5_1() { return cKw30Keyword_5_1; }
	}

	public class Loop2Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Loop2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitNineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cKw1Keyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cIdAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_2_1_0_0 = (RuleCall)cIdAssignment_2_1_0.eContents().get(0);
		private final Keyword cKw2Keyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cKw3Keyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cIdAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_3_1_0_0 = (RuleCall)cIdAssignment_3_1_0.eContents().get(0);
		private final Keyword cKw4Keyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cKw5Keyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cKw6Keyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		
		//Loop2:
		//  "#9" id+=ID ("kw1"|id+=ID "kw2") ("kw3"|id+=ID "kw4")? ("kw5"|"kw6");
		public ParserRule getRule() { return rule; }

		//"#9" id+=ID ("kw1"|id+=ID "kw2") ("kw3"|id+=ID "kw4")? ("kw5"|"kw6")
		public Group getGroup() { return cGroup; }

		//"#9"
		public Keyword getNumberSignDigitNineKeyword_0() { return cNumberSignDigitNineKeyword_0; }

		//id+=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//"kw1"|id+=ID "kw2"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"kw1"
		public Keyword getKw1Keyword_2_0() { return cKw1Keyword_2_0; }

		//id+=ID "kw2"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//id+=ID
		public Assignment getIdAssignment_2_1_0() { return cIdAssignment_2_1_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_1_0_0() { return cIdIDTerminalRuleCall_2_1_0_0; }

		//"kw2"
		public Keyword getKw2Keyword_2_1_1() { return cKw2Keyword_2_1_1; }

		//("kw3"|id+=ID "kw4")?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"kw3"
		public Keyword getKw3Keyword_3_0() { return cKw3Keyword_3_0; }

		//id+=ID "kw4"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//id+=ID
		public Assignment getIdAssignment_3_1_0() { return cIdAssignment_3_1_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_3_1_0_0() { return cIdIDTerminalRuleCall_3_1_0_0; }

		//"kw4"
		public Keyword getKw4Keyword_3_1_1() { return cKw4Keyword_3_1_1; }

		//"kw5"|"kw6"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"kw5"
		public Keyword getKw5Keyword_4_0() { return cKw5Keyword_4_0; }

		//"kw6"
		public Keyword getKw6Keyword_4_1() { return cKw6Keyword_4_1; }
	}

	public class Loop3Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Loop3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cKw1Keyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cKw2Keyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cKw3Keyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cNumberSignDigitOneDigitZeroKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cKw4Keyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIdAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_3_1_0 = (RuleCall)cIdAssignment_3_1.eContents().get(0);
		private final Keyword cKw5Keyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Loop3:
		//  ("kw1"|"kw2"|"kw3") "#10" id+=ID ("kw4" id+=ID "kw5")*;
		public ParserRule getRule() { return rule; }

		//("kw1"|"kw2"|"kw3") "#10" id+=ID ("kw4" id+=ID "kw5")*
		public Group getGroup() { return cGroup; }

		//"kw1"|"kw2"|"kw3"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"kw1"
		public Keyword getKw1Keyword_0_0() { return cKw1Keyword_0_0; }

		//"kw2"
		public Keyword getKw2Keyword_0_1() { return cKw2Keyword_0_1; }

		//"kw3"
		public Keyword getKw3Keyword_0_2() { return cKw3Keyword_0_2; }

		//"#10"
		public Keyword getNumberSignDigitOneDigitZeroKeyword_1() { return cNumberSignDigitOneDigitZeroKeyword_1; }

		//id+=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }

		//("kw4" id+=ID "kw5")*
		public Group getGroup_3() { return cGroup_3; }

		//"kw4"
		public Keyword getKw4Keyword_3_0() { return cKw4Keyword_3_0; }

		//id+=ID
		public Assignment getIdAssignment_3_1() { return cIdAssignment_3_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_3_1_0() { return cIdIDTerminalRuleCall_3_1_0; }

		//"kw5"
		public Keyword getKw5Keyword_3_2() { return cKw5Keyword_3_2; }
	}

	public class Loop4Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Loop4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitOneDigitOneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cKw1Keyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cKw2Keyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cKw3Keyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cKw4Keyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cKw5Keyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cKw6Keyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cKw7Keyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		
		//Loop4:
		//  "#11" ("kw1"|"kw2"|"kw3" "kw4") id+=ID ("kw5" ("kw6" "kw7"?)?)+;
		public ParserRule getRule() { return rule; }

		//"#11" ("kw1"|"kw2"|"kw3" "kw4") id+=ID ("kw5" ("kw6" "kw7"?)?)+
		public Group getGroup() { return cGroup; }

		//"#11"
		public Keyword getNumberSignDigitOneDigitOneKeyword_0() { return cNumberSignDigitOneDigitOneKeyword_0; }

		//"kw1"|"kw2"|"kw3" "kw4"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"kw1"
		public Keyword getKw1Keyword_1_0() { return cKw1Keyword_1_0; }

		//"kw2"
		public Keyword getKw2Keyword_1_1() { return cKw2Keyword_1_1; }

		//"kw3" "kw4"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"kw3"
		public Keyword getKw3Keyword_1_2_0() { return cKw3Keyword_1_2_0; }

		//"kw4"
		public Keyword getKw4Keyword_1_2_1() { return cKw4Keyword_1_2_1; }

		//id+=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }

		//("kw5" ("kw6" "kw7"?)?)+
		public Group getGroup_3() { return cGroup_3; }

		//"kw5"
		public Keyword getKw5Keyword_3_0() { return cKw5Keyword_3_0; }

		//("kw6" "kw7"?)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"kw6"
		public Keyword getKw6Keyword_3_1_0() { return cKw6Keyword_3_1_0; }

		//"kw7"?
		public Keyword getKw7Keyword_3_1_1() { return cKw7Keyword_3_1_1; }
	}

	public class LoopBug285452Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoopBug285452");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitOneDigitTwoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cInterfaceAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cInterfaceInterfaceKeyword_1_0_0 = (Keyword)cInterfaceAssignment_1_0.eContents().get(0);
		private final Keyword cClassKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//LoopBug285452:
		//  "#12" (interface?="interface"|"class") name=ID;
		public ParserRule getRule() { return rule; }

		//"#12" (interface?="interface"|"class") name=ID
		public Group getGroup() { return cGroup; }

		//"#12"
		public Keyword getNumberSignDigitOneDigitTwoKeyword_0() { return cNumberSignDigitOneDigitTwoKeyword_0; }

		//interface?="interface"|"class"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//interface?="interface"
		public Assignment getInterfaceAssignment_1_0() { return cInterfaceAssignment_1_0; }

		//"interface"
		public Keyword getInterfaceInterfaceKeyword_1_0_0() { return cInterfaceInterfaceKeyword_1_0_0; }

		//"class"
		public Keyword getClassKeyword_1_1() { return cClassKeyword_1_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class DuplicateBug284491Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DuplicateBug284491");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitOneDigitThreeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cStaticAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cStaticStaticKeyword_1_0_0 = (Keyword)cStaticAssignment_1_0.eContents().get(0);
		private final Assignment cFinalAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cFinalFinalKeyword_1_1_0 = (Keyword)cFinalAssignment_1_1.eContents().get(0);
		private final Assignment cTransientAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final Keyword cTransientTransientKeyword_1_2_0 = (Keyword)cTransientAssignment_1_2.eContents().get(0);
		
		//DuplicateBug284491:
		//  "#13" (static?="static"|final?="final"|transient?="transient")*;
		public ParserRule getRule() { return rule; }

		//"#13" (static?="static"|final?="final"|transient?="transient")*
		public Group getGroup() { return cGroup; }

		//"#13"
		public Keyword getNumberSignDigitOneDigitThreeKeyword_0() { return cNumberSignDigitOneDigitThreeKeyword_0; }

		//(static?="static"|final?="final"|transient?="transient")*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//static?="static"
		public Assignment getStaticAssignment_1_0() { return cStaticAssignment_1_0; }

		//"static"
		public Keyword getStaticStaticKeyword_1_0_0() { return cStaticStaticKeyword_1_0_0; }

		//final?="final"
		public Assignment getFinalAssignment_1_1() { return cFinalAssignment_1_1; }

		//"final"
		public Keyword getFinalFinalKeyword_1_1_0() { return cFinalFinalKeyword_1_1_0; }

		//transient?="transient"
		public Assignment getTransientAssignment_1_2() { return cTransientAssignment_1_2; }

		//"transient"
		public Keyword getTransientTransientKeyword_1_2_0() { return cTransientTransientKeyword_1_2_0; }
	}
	
	
	private OpElements pOp;
	private TermElements pTerm;
	private AtomElements pAtom;
	private ParensElements pParens;
	private TwoNumbersElements pTwoNumbers;
	private ManyStringsElements pManyStrings;
	private TypeElements pType;
	private Ref2Elements pRef2;
	private SpareElements pSpare;
	private BooleanElements pBoolean;
	private Transient1Elements pTransient1;
	private Consumed1Elements pConsumed1;
	private Consumed2Elements pConsumed2;
	private Loop1Elements pLoop1;
	private Loop2Elements pLoop2;
	private Loop3Elements pLoop3;
	private Loop4Elements pLoop4;
	private LoopBug285452Elements pLoopBug285452;
	private DuplicateBug284491Elements pDuplicateBug284491;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SimpleReconstrTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Op returns Expression:
	//  Term ({Op.values+=current} values+=Term)*;
	public OpElements getOpAccess() {
		return (pOp != null) ? pOp : (pOp = new OpElements());
	}
	
	public ParserRule getOpRule() {
		return getOpAccess().getRule();
	}

	//Term returns Expression:
	//  Atom|TwoNumbers|ManyStrings|Parens|Type|Ref2|Spare|Boolean|Transient1|Consumed1|
	//  Consumed2|Loop1|Loop2|Loop3|Loop4|LoopBug285452|DuplicateBug284491;
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//Atom:
	//  name=ID;
	public AtomElements getAtomAccess() {
		return (pAtom != null) ? pAtom : (pAtom = new AtomElements());
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}

	//Parens returns Expression:
	//  "(" Op ")" em="!"?;
	public ParensElements getParensAccess() {
		return (pParens != null) ? pParens : (pParens = new ParensElements());
	}
	
	public ParserRule getParensRule() {
		return getParensAccess().getRule();
	}

	//TwoNumbers:
	//  num1=INT num2=INT ("#" num3+=INT)*;
	public TwoNumbersElements getTwoNumbersAccess() {
		return (pTwoNumbers != null) ? pTwoNumbers : (pTwoNumbers = new TwoNumbersElements());
	}
	
	public ParserRule getTwoNumbersRule() {
		return getTwoNumbersAccess().getRule();
	}

	//ManyStrings:
	//  "=" str1+=STRING* str2+=STRING;
	public ManyStringsElements getManyStringsAccess() {
		return (pManyStrings != null) ? pManyStrings : (pManyStrings = new ManyStringsElements());
	}
	
	public ParserRule getManyStringsRule() {
		return getManyStringsAccess().getRule();
	}

	//Type:
	//  "type" name=ID "extends" extends=[Type];
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Ref2:
	//  "#2" ref2=( "mykeyword1" | STRING | "mykeyword2" );
	public Ref2Elements getRef2Access() {
		return (pRef2 != null) ? pRef2 : (pRef2 = new Ref2Elements());
	}
	
	public ParserRule getRef2Rule() {
		return getRef2Access().getRule();
	}

	//Spare:
	//  "#3" id+=ID ("." id+=ID)*;
	public SpareElements getSpareAccess() {
		return (pSpare != null) ? pSpare : (pSpare = new SpareElements());
	}
	
	public ParserRule getSpareRule() {
		return getSpareAccess().getRule();
	}

	//Boolean:
	//  "#4" bool?="myoption"? "kw" value=ID;
	public BooleanElements getBooleanAccess() {
		return (pBoolean != null) ? pBoolean : (pBoolean = new BooleanElements());
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//Transient1:
	//  "#5" (precStar?="*"|prec=INT) ("," (scaleStar?="*"|scale=INT))?;
	public Transient1Elements getTransient1Access() {
		return (pTransient1 != null) ? pTransient1 : (pTransient1 = new Transient1Elements());
	}
	
	public ParserRule getTransient1Rule() {
		return getTransient1Access().getRule();
	}

	//Consumed1:
	//  "#6" ("v1" v1+=INT* v2+=ID|"v2" v2+=ID* v1+=INT);
	public Consumed1Elements getConsumed1Access() {
		return (pConsumed1 != null) ? pConsumed1 : (pConsumed1 = new Consumed1Elements());
	}
	
	public ParserRule getConsumed1Rule() {
		return getConsumed1Access().getRule();
	}

	//Consumed2:
	//  "#7" child=Consumed1;
	public Consumed2Elements getConsumed2Access() {
		return (pConsumed2 != null) ? pConsumed2 : (pConsumed2 = new Consumed2Elements());
	}
	
	public ParserRule getConsumed2Rule() {
		return getConsumed2Access().getRule();
	}

	//Loop1:
	//  "kw0"? "#8" id+=ID "kw1"? id+=ID ("kw2"* "kw30")+;
	public Loop1Elements getLoop1Access() {
		return (pLoop1 != null) ? pLoop1 : (pLoop1 = new Loop1Elements());
	}
	
	public ParserRule getLoop1Rule() {
		return getLoop1Access().getRule();
	}

	//Loop2:
	//  "#9" id+=ID ("kw1"|id+=ID "kw2") ("kw3"|id+=ID "kw4")? ("kw5"|"kw6");
	public Loop2Elements getLoop2Access() {
		return (pLoop2 != null) ? pLoop2 : (pLoop2 = new Loop2Elements());
	}
	
	public ParserRule getLoop2Rule() {
		return getLoop2Access().getRule();
	}

	//Loop3:
	//  ("kw1"|"kw2"|"kw3") "#10" id+=ID ("kw4" id+=ID "kw5")*;
	public Loop3Elements getLoop3Access() {
		return (pLoop3 != null) ? pLoop3 : (pLoop3 = new Loop3Elements());
	}
	
	public ParserRule getLoop3Rule() {
		return getLoop3Access().getRule();
	}

	//Loop4:
	//  "#11" ("kw1"|"kw2"|"kw3" "kw4") id+=ID ("kw5" ("kw6" "kw7"?)?)+;
	public Loop4Elements getLoop4Access() {
		return (pLoop4 != null) ? pLoop4 : (pLoop4 = new Loop4Elements());
	}
	
	public ParserRule getLoop4Rule() {
		return getLoop4Access().getRule();
	}

	//LoopBug285452:
	//  "#12" (interface?="interface"|"class") name=ID;
	public LoopBug285452Elements getLoopBug285452Access() {
		return (pLoopBug285452 != null) ? pLoopBug285452 : (pLoopBug285452 = new LoopBug285452Elements());
	}
	
	public ParserRule getLoopBug285452Rule() {
		return getLoopBug285452Access().getRule();
	}

	//DuplicateBug284491:
	//  "#13" (static?="static"|final?="final"|transient?="transient")*;
	public DuplicateBug284491Elements getDuplicateBug284491Access() {
		return (pDuplicateBug284491 != null) ? pDuplicateBug284491 : (pDuplicateBug284491 = new DuplicateBug284491Elements());
	}
	
	public ParserRule getDuplicateBug284491Rule() {
		return getDuplicateBug284491Access().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
