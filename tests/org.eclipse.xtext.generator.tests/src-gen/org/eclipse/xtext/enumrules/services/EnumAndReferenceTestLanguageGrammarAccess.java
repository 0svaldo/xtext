/*
* generated by Xtext
*/

package org.eclipse.xtext.enumrules.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EnumAndReferenceTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class EntityWithEnumAndReferenceElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityWithEnumAndReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKindOfKeywordKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cReferenceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRefEntityWithEnumAndReferenceCrossReference_3_0 = (CrossReference)cRefAssignment_3.eContents().get(0);
		private final RuleCall cRefEntityWithEnumAndReferenceIDTerminalRuleCall_3_0_1 = (RuleCall)cRefEntityWithEnumAndReferenceCrossReference_3_0.eContents().get(1);
		
		//EntityWithEnumAndReference:
		//  "kindOfKeyword" name=ID "reference" ref=[EntityWithEnumAndReference];
		public ParserRule getRule() { return rule; }

		//"kindOfKeyword" name=ID "reference" ref=[EntityWithEnumAndReference]
		public Group getGroup() { return cGroup; }

		//"kindOfKeyword"
		public Keyword getKindOfKeywordKeyword_0() { return cKindOfKeywordKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"reference"
		public Keyword getReferenceKeyword_2() { return cReferenceKeyword_2; }

		//ref=[EntityWithEnumAndReference]
		public Assignment getRefAssignment_3() { return cRefAssignment_3; }

		//[EntityWithEnumAndReference]
		public CrossReference getRefEntityWithEnumAndReferenceCrossReference_3_0() { return cRefEntityWithEnumAndReferenceCrossReference_3_0; }

		//ID
		public RuleCall getRefEntityWithEnumAndReferenceIDTerminalRuleCall_3_0_1() { return cRefEntityWithEnumAndReferenceIDTerminalRuleCall_3_0_1; }
	}
	
	
	public class KindOfKeywordElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "KindOfKeyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cKindOfKeywordEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cKindOfKeywordKindOfKeywordKeyword_0_0 = (Keyword)cKindOfKeywordEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAnotherEnumLiteralEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAnotherEnumLiteralAnotherEnumLiteralKeyword_1_0 = (Keyword)cAnotherEnumLiteralEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum KindOfKeyword returns KindOfKeyword : kindOfKeyword | anotherEnumLiteral ;
		public EnumRule getRule() { return rule; }

		//kindOfKeyword | anotherEnumLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//kindOfKeyword
		public EnumLiteralDeclaration getKindOfKeywordEnumLiteralDeclaration_0() { return cKindOfKeywordEnumLiteralDeclaration_0; }

		//"kindOfKeyword"
		public Keyword getKindOfKeywordKindOfKeywordKeyword_0_0() { return cKindOfKeywordKindOfKeywordKeyword_0_0; }

		//anotherEnumLiteral
		public EnumLiteralDeclaration getAnotherEnumLiteralEnumLiteralDeclaration_1() { return cAnotherEnumLiteralEnumLiteralDeclaration_1; }

		//"anotherEnumLiteral"
		public Keyword getAnotherEnumLiteralAnotherEnumLiteralKeyword_1_0() { return cAnotherEnumLiteralAnotherEnumLiteralKeyword_1_0; }
	}
	
	private EntityWithEnumAndReferenceElements pEntityWithEnumAndReference;
	private KindOfKeywordElements unknownRuleKindOfKeyword;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public EnumAndReferenceTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//EntityWithEnumAndReference:
	//  "kindOfKeyword" name=ID "reference" ref=[EntityWithEnumAndReference];
	public EntityWithEnumAndReferenceElements getEntityWithEnumAndReferenceAccess() {
		return (pEntityWithEnumAndReference != null) ? pEntityWithEnumAndReference : (pEntityWithEnumAndReference = new EntityWithEnumAndReferenceElements());
	}
	
	public ParserRule getEntityWithEnumAndReferenceRule() {
		return getEntityWithEnumAndReferenceAccess().getRule();
	}

	//enum KindOfKeyword returns KindOfKeyword : kindOfKeyword | anotherEnumLiteral ;
	public KindOfKeywordElements getKindOfKeywordAccess() {
		return (unknownRuleKindOfKeyword != null) ? unknownRuleKindOfKeyword : (unknownRuleKindOfKeyword = new KindOfKeywordElements());
	}
	
	public EnumRule getKindOfKeywordRule() {
		return getKindOfKeywordAccess().getRule();
	}

	//terminal ID:
	//  "^" ? ( "a" .. "z" | "A" .. "Z" | "_" ) ( "a" .. "z" | "A" .. "Z" | "_" | "0" .. "9" ) *;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0" .. "9" +;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ( "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" ) | ! ( "\\" | "\"" ) ) * "\"" | "\'" ( "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" ) | ! ( "\\" | "\'" ) ) * "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/*" -> "*/";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" ! ( "\n" | "\r" ) * ( "\r" ? "\n" ) ?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  ( " " | "\t" | "\r" | "\n" ) +;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
