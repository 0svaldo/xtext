/*
* generated by Xtext
*/
package org.eclipse.xtext.enumrules.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.enumrules.services.EnumAndReferenceTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class EnumAndReferenceTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private EnumAndReferenceTestLanguageGrammarAccess grammarAccess;
	
	@Override	
	public EnumAndReferenceTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EntityWithEnumAndReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule EntityWithEnumAndReference ****************
 *
 * EntityWithEnumAndReference:
 *   type=KindOfKeyword name=ID "reference" ref=[EntityWithEnumAndReference];
 *
 **/

// type=KindOfKeyword name=ID "reference" ref=[EntityWithEnumAndReference]
protected class EntityWithEnumAndReference_Group extends GroupToken {
	
	public EntityWithEnumAndReference_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEntityWithEnumAndReferenceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EntityWithEnumAndReference_RefAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEntityWithEnumAndReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// type=KindOfKeyword
protected class EntityWithEnumAndReference_TypeAssignment_0 extends AssignmentToken  {
	
	public EntityWithEnumAndReference_TypeAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEntityWithEnumAndReferenceAccess().getTypeAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getEntityWithEnumAndReferenceAccess().getTypeKindOfKeywordEnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class EntityWithEnumAndReference_NameAssignment_1 extends AssignmentToken  {
	
	public EntityWithEnumAndReference_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEntityWithEnumAndReferenceAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EntityWithEnumAndReference_TypeAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getEntityWithEnumAndReferenceAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "reference"
protected class EntityWithEnumAndReference_ReferenceKeyword_2 extends KeywordToken  {
	
	public EntityWithEnumAndReference_ReferenceKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEntityWithEnumAndReferenceAccess().getReferenceKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EntityWithEnumAndReference_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ref=[EntityWithEnumAndReference]
protected class EntityWithEnumAndReference_RefAssignment_3 extends AssignmentToken  {
	
	public EntityWithEnumAndReference_RefAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEntityWithEnumAndReferenceAccess().getRefAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EntityWithEnumAndReference_ReferenceKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("ref",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ref");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEntityWithEnumAndReferenceAccess().getRefEntityWithEnumAndReferenceCrossReference_3_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getEntityWithEnumAndReferenceAccess().getRefEntityWithEnumAndReferenceCrossReference_3_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule EntityWithEnumAndReference ****************/

}
