/*
* generated by Xtext
*/
package org.eclipse.xtext.enumrules.parseTreeConstruction;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;
import org.eclipse.xtext.enumrules.services.EnumAndReferenceTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class EnumAndReferenceTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private EnumAndReferenceTestLanguageGrammarAccess grammarAccess;
	
	@Override
	protected Solution internalSerialize(EObject obj) {
		IInstanceDescription inst = getDescr(obj);
		if(inst.isInstanceOf(grammarAccess.getEntityWithEnumAndReferenceRule().getType().getClassifier())) {
			final AbstractToken t = new EntityWithEnumAndReference_Group(inst, null);
			Solution s = t.firstSolution();
			while(s != null && !isConsumed(s, t)) s = s.getPredecessor().nextSolution(null, s);
			if(s != null) return s;
		}
		return null;
	}
	

/************ begin Rule EntityWithEnumAndReference ****************
 *
 * EntityWithEnumAndReference:
 *   type=KindOfKeyword name=ID "reference" ref=[EntityWithEnumAndReference];
 *
 **/

// type=KindOfKeyword name=ID "reference" ref=[EntityWithEnumAndReference]
protected class EntityWithEnumAndReference_Group extends GroupToken {
	
	public EntityWithEnumAndReference_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEntityWithEnumAndReferenceAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new EntityWithEnumAndReference_3_Assignment_ref(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new EntityWithEnumAndReference_2_Keyword_reference(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new EntityWithEnumAndReference_1_Assignment_name(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				while(s3 != null) {
					Solution s4 = new EntityWithEnumAndReference_0_Assignment_type(s3.getCurrent(), s3.getPredecessor()).firstSolution();
					if(s4 != null) {
						last = s4.getPredecessor();
						return s4;
					} else {
						s3 = s3.getPredecessor().nextSolution(this,s3);
					}
				}
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// type=KindOfKeyword
protected class EntityWithEnumAndReference_0_Assignment_type extends AssignmentToken  {
	
	public EntityWithEnumAndReference_0_Assignment_type(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEntityWithEnumAndReferenceAccess().getTypeAssignment_0();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("type",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getEntityWithEnumAndReferenceAccess().getTypeKindOfKeywordEnumRuleCall_0_0();
			return new Solution(obj);
		}
		return null;
	}
}

// name=ID
protected class EntityWithEnumAndReference_1_Assignment_name extends AssignmentToken  {
	
	public EntityWithEnumAndReference_1_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEntityWithEnumAndReferenceAccess().getNameAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getEntityWithEnumAndReferenceAccess().getNameIDTerminalRuleCall_1_0();
			return new Solution(obj);
		}
		return null;
	}
}

// "reference"
protected class EntityWithEnumAndReference_2_Keyword_reference extends KeywordToken  {
	
	public EntityWithEnumAndReference_2_Keyword_reference(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEntityWithEnumAndReferenceAccess().getReferenceKeyword_2();
	}	
}

// ref=[EntityWithEnumAndReference]
protected class EntityWithEnumAndReference_3_Assignment_ref extends AssignmentToken  {
	
	public EntityWithEnumAndReference_3_Assignment_ref(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEntityWithEnumAndReferenceAccess().getRefAssignment_3();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("ref",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ref");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEntityWithEnumAndReferenceAccess().getRefEntityWithEnumAndReferenceCrossReference_3_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getEntityWithEnumAndReferenceAccess().getRefEntityWithEnumAndReferenceCrossReference_3_0(); 
				return new Solution(obj);
			}
		}
		return null;
	}
}


/************ end Rule EntityWithEnumAndReference ****************/

}
