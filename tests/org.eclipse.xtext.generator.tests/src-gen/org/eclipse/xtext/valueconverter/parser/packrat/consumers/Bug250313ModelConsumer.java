/*
* generated by Xtext
*/
package org.eclipse.xtext.valueconverter.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.valueconverter.services.Bug250313GrammarAccess.ModelElements;

public final class Bug250313ModelConsumer extends NonTerminalConsumer {

	private ModelElements rule;	

	private INonTerminalConsumer childConsumer;

	private INonTerminalConsumer datatypeConsumer;

	private ITerminalConsumer idConsumer;

	private INonTerminalConsumer nestedDatatypeConsumer;

	private ITerminalConsumer stringConsumer;

	private IElementConsumer alternatives$1$Consumer;

	private IElementConsumer group$9$Consumer;

	private IElementConsumer keyword$10$Consumer;

	private IElementConsumer assignment$11$Consumer;

	private IElementConsumer alternatives$12$Consumer;

	private IElementConsumer keyword$16$Consumer;

	private IElementConsumer ruleCall$17$Consumer;

	private IElementConsumer ruleCall$18$Consumer;

	private IElementConsumer ruleCall$19$Consumer;

	private IElementConsumer ruleCall$20$Consumer;

	private IElementConsumer group$21$Consumer;

	private IElementConsumer keyword$22$Consumer;

	private IElementConsumer assignment$23$Consumer;

	private IElementConsumer alternatives$24$Consumer;

	private IElementConsumer keyword$28$Consumer;

	private IElementConsumer ruleCall$29$Consumer;

	private IElementConsumer ruleCall$30$Consumer;

	private IElementConsumer ruleCall$31$Consumer;

	private IElementConsumer ruleCall$32$Consumer;

	private IElementConsumer group$33$Consumer;

	private IElementConsumer keyword$34$Consumer;

	private IElementConsumer assignment$35$Consumer;

	private IElementConsumer ruleCall$36$Consumer;

	private IElementConsumer group$37$Consumer;

	private IElementConsumer keyword$38$Consumer;

	private IElementConsumer assignment$39$Consumer;

	private IElementConsumer ruleCall$40$Consumer;

	private IElementConsumer group$41$Consumer;

	private IElementConsumer keyword$42$Consumer;

	private IElementConsumer assignment$43$Consumer;

	private IElementConsumer ruleCall$44$Consumer;

	private IElementConsumer group$45$Consumer;

	private IElementConsumer keyword$46$Consumer;

	private IElementConsumer assignment$47$Consumer;

	private IElementConsumer ruleCall$48$Consumer;

	private IElementConsumer group$49$Consumer;

	private IElementConsumer keyword$50$Consumer;

	private IElementConsumer assignment$51$Consumer;

	private IElementConsumer ruleCall$52$Consumer;

	private IElementConsumer group$53$Consumer;

	private IElementConsumer keyword$54$Consumer;

	private IElementConsumer assignment$55$Consumer;

	private IElementConsumer ruleCall$56$Consumer;

	private IElementConsumer group$57$Consumer;

	private IElementConsumer keyword$59$Consumer;

	private IElementConsumer assignment$60$Consumer;

	private IElementConsumer ruleCall$61$Consumer;

	private IElementConsumer group$62$Consumer;

	private IElementConsumer keyword$63$Consumer;

	private IElementConsumer assignment$64$Consumer;

	private IElementConsumer alternatives$65$Consumer;

	private IElementConsumer crossReference$66$Consumer;

	private IElementConsumer crossReference$68$Consumer;

	private ISequenceMatcher crossReference$66$Delimiter;

	private ISequenceMatcher crossReference$68$Delimiter;

	private ICharacterClass keyword$10$Delimiter;

	private ICharacterClass keyword$16$Delimiter;

	private ICharacterClass keyword$22$Delimiter;

	private ICharacterClass keyword$28$Delimiter;

	private ICharacterClass keyword$34$Delimiter;

	private ICharacterClass keyword$38$Delimiter;

	private ICharacterClass keyword$42$Delimiter;

	private ICharacterClass keyword$46$Delimiter;

	private ICharacterClass keyword$50$Delimiter;

	private ICharacterClass keyword$54$Delimiter;

	private ICharacterClass keyword$59$Delimiter;

	private ICharacterClass keyword$63$Delimiter;

	private ISequenceMatcher ruleCall$17$Delimiter;

	private ISequenceMatcher ruleCall$20$Delimiter;

	private ISequenceMatcher ruleCall$29$Delimiter;

	private ISequenceMatcher ruleCall$32$Delimiter;

	private ISequenceMatcher ruleCall$36$Delimiter;

	private ISequenceMatcher ruleCall$40$Delimiter;

	protected class Alternatives$1$Consumer extends AlternativesConsumer {
		
		protected Alternatives$1$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$9$Consumer);
			acceptor.accept(group$21$Consumer);
			acceptor.accept(group$33$Consumer);
			acceptor.accept(group$37$Consumer);
			acceptor.accept(group$41$Consumer);
			acceptor.accept(group$45$Consumer);
			acceptor.accept(group$49$Consumer);
			acceptor.accept(group$53$Consumer);
			acceptor.accept(group$57$Consumer);
		}
	}

	protected class Group$9$Consumer extends GroupConsumer {
		
		protected Group$9$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$10$Consumer);
			acceptor.accept(assignment$11$Consumer);
		}
	}

	protected class Keyword$10$Consumer extends OptionalElementConsumer<Keyword> {
		
		protected Keyword$10$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$10$Delimiter(), optional);
		}
	}

	protected class Assignment$11$Consumer extends AssignmentConsumer {
		
		protected Assignment$11$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return alternatives$12$Consumer;
		}
	}

	protected class Alternatives$12$Consumer extends AlternativesConsumer {
		
		protected Alternatives$12$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$16$Consumer);
			acceptor.accept(ruleCall$17$Consumer);
			acceptor.accept(ruleCall$18$Consumer);
			acceptor.accept(ruleCall$19$Consumer);
			acceptor.accept(ruleCall$20$Consumer);
		}
	}

	protected class Keyword$16$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$16$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "value", false, false, getKeyword$16$Delimiter(), optional);
		}
	}

	protected class RuleCall$17$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$17$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "value", false, false, getElement(), getRuleCall$17$Delimiter(), optional);
		}
	}

	protected class RuleCall$18$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$18$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(nestedDatatypeConsumer, "value", false, true, false, getElement(), optional);
		}
	}

	protected class RuleCall$19$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$19$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(datatypeConsumer, "value", false, true, false, getElement(), optional);
		}
	}

	protected class RuleCall$20$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$20$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "value", false, false, getElement(), getRuleCall$20$Delimiter(), optional);
		}
	}

	protected class Group$21$Consumer extends GroupConsumer {
		
		protected Group$21$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$22$Consumer);
			acceptor.accept(assignment$23$Consumer);
		}
	}

	protected class Keyword$22$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$22$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$22$Delimiter(), optional);
		}
	}

	protected class Assignment$23$Consumer extends AssignmentConsumer {
		
		protected Assignment$23$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return alternatives$24$Consumer;
		}
	}

	protected class Alternatives$24$Consumer extends AlternativesConsumer {
		
		protected Alternatives$24$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$28$Consumer);
			acceptor.accept(ruleCall$29$Consumer);
			acceptor.accept(ruleCall$30$Consumer);
			acceptor.accept(ruleCall$31$Consumer);
			acceptor.accept(ruleCall$32$Consumer);
		}
	}

	protected class Keyword$28$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$28$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "multiValue", true, false, getKeyword$28$Delimiter(), optional);
		}
	}

	protected class RuleCall$29$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$29$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "multiValue", true, false, getElement(), getRuleCall$29$Delimiter(), optional);
		}
	}

	protected class RuleCall$30$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$30$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(nestedDatatypeConsumer, "multiValue", true, true, false, getElement(), optional);
		}
	}

	protected class RuleCall$31$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$31$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(datatypeConsumer, "multiValue", true, true, false, getElement(), optional);
		}
	}

	protected class RuleCall$32$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$32$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "multiValue", true, false, getElement(), getRuleCall$32$Delimiter(), optional);
		}
	}

	protected class Group$33$Consumer extends GroupConsumer {
		
		protected Group$33$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$34$Consumer);
			acceptor.accept(assignment$35$Consumer);
		}
	}

	protected class Keyword$34$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$34$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$34$Delimiter(), optional);
		}
	}

	protected class Assignment$35$Consumer extends AssignmentConsumer {
		
		protected Assignment$35$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$36$Consumer;
		}
	}

	protected class RuleCall$36$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$36$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "value", false, false, getElement(), getRuleCall$36$Delimiter(), optional);
		}
	}

	protected class Group$37$Consumer extends GroupConsumer {
		
		protected Group$37$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$38$Consumer);
			acceptor.accept(assignment$39$Consumer);
		}
	}

	protected class Keyword$38$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$38$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$38$Delimiter(), optional);
		}
	}

	protected class Assignment$39$Consumer extends AssignmentConsumer {
		
		protected Assignment$39$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$40$Consumer;
		}
	}

	protected class RuleCall$40$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$40$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "multiValue", true, false, getElement(), getRuleCall$40$Delimiter(), optional);
		}
	}

	protected class Group$41$Consumer extends GroupConsumer {
		
		protected Group$41$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$42$Consumer);
			acceptor.accept(assignment$43$Consumer);
		}
	}

	protected class Keyword$42$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$42$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$42$Delimiter(), optional);
		}
	}

	protected class Assignment$43$Consumer extends AssignmentConsumer {
		
		protected Assignment$43$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$44$Consumer;
		}
	}

	protected class RuleCall$44$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$44$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(datatypeConsumer, "value", false, true, false, getElement(), optional);
		}
	}

	protected class Group$45$Consumer extends GroupConsumer {
		
		protected Group$45$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$46$Consumer);
			acceptor.accept(assignment$47$Consumer);
		}
	}

	protected class Keyword$46$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$46$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$46$Delimiter(), optional);
		}
	}

	protected class Assignment$47$Consumer extends AssignmentConsumer {
		
		protected Assignment$47$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$48$Consumer;
		}
	}

	protected class RuleCall$48$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$48$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(datatypeConsumer, "multiValue", true, true, false, getElement(), optional);
		}
	}

	protected class Group$49$Consumer extends GroupConsumer {
		
		protected Group$49$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$50$Consumer);
			acceptor.accept(assignment$51$Consumer);
		}
	}

	protected class Keyword$50$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$50$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$50$Delimiter(), optional);
		}
	}

	protected class Assignment$51$Consumer extends AssignmentConsumer {
		
		protected Assignment$51$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$52$Consumer;
		}
	}

	protected class RuleCall$52$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$52$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(nestedDatatypeConsumer, "value", false, true, false, getElement(), optional);
		}
	}

	protected class Group$53$Consumer extends GroupConsumer {
		
		protected Group$53$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$54$Consumer);
			acceptor.accept(assignment$55$Consumer);
		}
	}

	protected class Keyword$54$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$54$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$54$Delimiter(), optional);
		}
	}

	protected class Assignment$55$Consumer extends AssignmentConsumer {
		
		protected Assignment$55$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$56$Consumer;
		}
	}

	protected class RuleCall$56$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$56$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(nestedDatatypeConsumer, "multiValue", true, true, false, getElement(), optional);
		}
	}

	protected class Group$57$Consumer extends GroupConsumer {
		
		protected Group$57$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$59$Consumer);
			acceptor.accept(assignment$60$Consumer);
			acceptor.accept(group$62$Consumer);
		}
	}

	protected class Keyword$59$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$59$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$59$Delimiter(), optional);
		}
	}

	protected class Assignment$60$Consumer extends AssignmentConsumer {
		
		protected Assignment$60$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$61$Consumer;
		}
	}

	protected class RuleCall$61$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$61$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(childConsumer, "children", false, false, false, getElement(), optional);
		}
	}

	protected class Group$62$Consumer extends OptionalGroupConsumer {
		
		protected Group$62$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$63$Consumer);
			acceptor.accept(assignment$64$Consumer);
		}
	}

	protected class Keyword$63$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$63$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$63$Delimiter(), optional);
		}
	}

	protected class Assignment$64$Consumer extends AssignmentConsumer {
		
		protected Assignment$64$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return alternatives$65$Consumer;
		}
	}

	protected class Alternatives$65$Consumer extends AlternativesConsumer {
		
		protected Alternatives$65$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(crossReference$66$Consumer);
			acceptor.accept(crossReference$68$Consumer);
		}
	}

	protected class CrossReference$66$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$66$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "ref", false, false, getElement(), getCrossReference$66$Delimiter(), optional);
		}
	}

	protected class CrossReference$68$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$68$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "ref", false, false, getElement(), getCrossReference$68$Delimiter(), optional);
		}
	}

	public Bug250313ModelConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		crossReference$66$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		crossReference$68$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		keyword$10$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$16$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$22$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$28$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$34$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$38$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$42$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$46$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$50$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$54$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$59$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$63$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$17$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$20$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$29$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$32$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$36$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$40$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return alternatives$1$Consumer.consume();
	}

	public ModelElements getRule() {
		return rule;
	}
	
	public void setRule(ModelElements rule) {
		this.rule = rule;
		
		alternatives$1$Consumer = new Alternatives$1$Consumer(rule.eleAlternatives());
		group$9$Consumer = new Group$9$Consumer(rule.ele00000000Group());
		keyword$10$Consumer = new Keyword$10$Consumer(rule.ele000000000KeywordDigitOne());
		assignment$11$Consumer = new Assignment$11$Consumer(rule.ele000000001AssignmentValue());
		alternatives$12$Consumer = new Alternatives$12$Consumer(rule.ele0000000010Alternatives());
		keyword$16$Consumer = new Keyword$16$Consumer(rule.ele00000000100000KeywordMykeyword1());
		ruleCall$17$Consumer = new RuleCall$17$Consumer(rule.ele00000000100001TerminalRuleCallSTRING());
		ruleCall$18$Consumer = new RuleCall$18$Consumer(rule.ele0000000010001ParserRuleCallNestedDatatype());
		ruleCall$19$Consumer = new RuleCall$19$Consumer(rule.ele000000001001ParserRuleCallDatatype());
		ruleCall$20$Consumer = new RuleCall$20$Consumer(rule.ele00000000101TerminalRuleCallID());
		keyword$16$Consumer = new Keyword$16$Consumer(rule.ele00000000100000KeywordMykeyword1());
		ruleCall$17$Consumer = new RuleCall$17$Consumer(rule.ele00000000100001TerminalRuleCallSTRING());
		ruleCall$18$Consumer = new RuleCall$18$Consumer(rule.ele0000000010001ParserRuleCallNestedDatatype());
		ruleCall$19$Consumer = new RuleCall$19$Consumer(rule.ele000000001001ParserRuleCallDatatype());
		ruleCall$20$Consumer = new RuleCall$20$Consumer(rule.ele00000000101TerminalRuleCallID());
		group$21$Consumer = new Group$21$Consumer(rule.ele00000001Group());
		keyword$22$Consumer = new Keyword$22$Consumer(rule.ele000000010KeywordDigitOnePlusSign());
		assignment$23$Consumer = new Assignment$23$Consumer(rule.ele000000011AssignmentMultiValue());
		alternatives$24$Consumer = new Alternatives$24$Consumer(rule.ele0000000110Alternatives());
		keyword$28$Consumer = new Keyword$28$Consumer(rule.ele00000001100000KeywordMykeyword1());
		ruleCall$29$Consumer = new RuleCall$29$Consumer(rule.ele00000001100001TerminalRuleCallSTRING());
		ruleCall$30$Consumer = new RuleCall$30$Consumer(rule.ele0000000110001ParserRuleCallNestedDatatype());
		ruleCall$31$Consumer = new RuleCall$31$Consumer(rule.ele000000011001ParserRuleCallDatatype());
		ruleCall$32$Consumer = new RuleCall$32$Consumer(rule.ele00000001101TerminalRuleCallID());
		keyword$28$Consumer = new Keyword$28$Consumer(rule.ele00000001100000KeywordMykeyword1());
		ruleCall$29$Consumer = new RuleCall$29$Consumer(rule.ele00000001100001TerminalRuleCallSTRING());
		ruleCall$30$Consumer = new RuleCall$30$Consumer(rule.ele0000000110001ParserRuleCallNestedDatatype());
		ruleCall$31$Consumer = new RuleCall$31$Consumer(rule.ele000000011001ParserRuleCallDatatype());
		ruleCall$32$Consumer = new RuleCall$32$Consumer(rule.ele00000001101TerminalRuleCallID());
		group$33$Consumer = new Group$33$Consumer(rule.ele0000001Group());
		keyword$34$Consumer = new Keyword$34$Consumer(rule.ele00000010KeywordDigitTwo());
		assignment$35$Consumer = new Assignment$35$Consumer(rule.ele00000011AssignmentValue());
		ruleCall$36$Consumer = new RuleCall$36$Consumer(rule.ele000000110TerminalRuleCallSTRING());
		group$37$Consumer = new Group$37$Consumer(rule.ele000001Group());
		keyword$38$Consumer = new Keyword$38$Consumer(rule.ele0000010KeywordDigitTwoPlusSign());
		assignment$39$Consumer = new Assignment$39$Consumer(rule.ele0000011AssignmentMultiValue());
		ruleCall$40$Consumer = new RuleCall$40$Consumer(rule.ele00000110TerminalRuleCallSTRING());
		group$41$Consumer = new Group$41$Consumer(rule.ele00001Group());
		keyword$42$Consumer = new Keyword$42$Consumer(rule.ele000010KeywordDigitThree());
		assignment$43$Consumer = new Assignment$43$Consumer(rule.ele000011AssignmentValue());
		ruleCall$44$Consumer = new RuleCall$44$Consumer(rule.ele0000110ParserRuleCallDatatype());
		group$45$Consumer = new Group$45$Consumer(rule.ele0001Group());
		keyword$46$Consumer = new Keyword$46$Consumer(rule.ele00010KeywordDigitThreePlusSign());
		assignment$47$Consumer = new Assignment$47$Consumer(rule.ele00011AssignmentMultiValue());
		ruleCall$48$Consumer = new RuleCall$48$Consumer(rule.ele000110ParserRuleCallDatatype());
		group$49$Consumer = new Group$49$Consumer(rule.ele001Group());
		keyword$50$Consumer = new Keyword$50$Consumer(rule.ele0010KeywordDigitFour());
		assignment$51$Consumer = new Assignment$51$Consumer(rule.ele0011AssignmentValue());
		ruleCall$52$Consumer = new RuleCall$52$Consumer(rule.ele00110ParserRuleCallNestedDatatype());
		group$53$Consumer = new Group$53$Consumer(rule.ele01Group());
		keyword$54$Consumer = new Keyword$54$Consumer(rule.ele010KeywordDigitFourPlusSign());
		assignment$55$Consumer = new Assignment$55$Consumer(rule.ele011AssignmentMultiValue());
		ruleCall$56$Consumer = new RuleCall$56$Consumer(rule.ele0110ParserRuleCallNestedDatatype());
		group$57$Consumer = new Group$57$Consumer(rule.ele1Group());
		keyword$59$Consumer = new Keyword$59$Consumer(rule.ele100KeywordContent());
		assignment$60$Consumer = new Assignment$60$Consumer(rule.ele101AssignmentChildren());
		ruleCall$61$Consumer = new RuleCall$61$Consumer(rule.ele1010ParserRuleCallChild());
		group$62$Consumer = new Group$62$Consumer(rule.ele11Group());
		keyword$63$Consumer = new Keyword$63$Consumer(rule.ele110KeywordRef());
		assignment$64$Consumer = new Assignment$64$Consumer(rule.ele111AssignmentRef());
		alternatives$65$Consumer = new Alternatives$65$Consumer(rule.ele1110Alternatives());
		crossReference$66$Consumer = new CrossReference$66$Consumer(rule.ele11100CrossReferenceEStringChild1());
		crossReference$68$Consumer = new CrossReference$68$Consumer(rule.ele11101CrossReferenceEStringChild2());
		crossReference$66$Consumer = new CrossReference$66$Consumer(rule.ele11100CrossReferenceEStringChild1());
		crossReference$68$Consumer = new CrossReference$68$Consumer(rule.ele11101CrossReferenceEStringChild2());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setChildConsumer(INonTerminalConsumer childConsumer) {
		this.childConsumer = childConsumer;
	}
	
	public void setDatatypeConsumer(INonTerminalConsumer datatypeConsumer) {
		this.datatypeConsumer = datatypeConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setNestedDatatypeConsumer(INonTerminalConsumer nestedDatatypeConsumer) {
		this.nestedDatatypeConsumer = nestedDatatypeConsumer;
	}
	
	public void setStringConsumer(ITerminalConsumer stringConsumer) {
		this.stringConsumer = stringConsumer;
	}
	
	public ISequenceMatcher getCrossReference$66$Delimiter() {
		return crossReference$66$Delimiter;
	}
	
	public void setCrossReference$66$Delimiter(ISequenceMatcher matcher) {
		crossReference$66$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getCrossReference$68$Delimiter() {
		return crossReference$68$Delimiter;
	}
	
	public void setCrossReference$68$Delimiter(ISequenceMatcher matcher) {
		crossReference$68$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ICharacterClass getKeyword$10$Delimiter() {
		return keyword$10$Delimiter;
	}
	
	public void setKeyword$10$Delimiter(ICharacterClass characterClass) {
		keyword$10$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$16$Delimiter() {
		return keyword$16$Delimiter;
	}
	
	public void setKeyword$16$Delimiter(ICharacterClass characterClass) {
		keyword$16$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$22$Delimiter() {
		return keyword$22$Delimiter;
	}
	
	public void setKeyword$22$Delimiter(ICharacterClass characterClass) {
		keyword$22$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$28$Delimiter() {
		return keyword$28$Delimiter;
	}
	
	public void setKeyword$28$Delimiter(ICharacterClass characterClass) {
		keyword$28$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$34$Delimiter() {
		return keyword$34$Delimiter;
	}
	
	public void setKeyword$34$Delimiter(ICharacterClass characterClass) {
		keyword$34$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$38$Delimiter() {
		return keyword$38$Delimiter;
	}
	
	public void setKeyword$38$Delimiter(ICharacterClass characterClass) {
		keyword$38$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$42$Delimiter() {
		return keyword$42$Delimiter;
	}
	
	public void setKeyword$42$Delimiter(ICharacterClass characterClass) {
		keyword$42$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$46$Delimiter() {
		return keyword$46$Delimiter;
	}
	
	public void setKeyword$46$Delimiter(ICharacterClass characterClass) {
		keyword$46$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$50$Delimiter() {
		return keyword$50$Delimiter;
	}
	
	public void setKeyword$50$Delimiter(ICharacterClass characterClass) {
		keyword$50$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$54$Delimiter() {
		return keyword$54$Delimiter;
	}
	
	public void setKeyword$54$Delimiter(ICharacterClass characterClass) {
		keyword$54$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$59$Delimiter() {
		return keyword$59$Delimiter;
	}
	
	public void setKeyword$59$Delimiter(ICharacterClass characterClass) {
		keyword$59$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$63$Delimiter() {
		return keyword$63$Delimiter;
	}
	
	public void setKeyword$63$Delimiter(ICharacterClass characterClass) {
		keyword$63$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$17$Delimiter() {
		return ruleCall$17$Delimiter;
	}
	
	public void setRuleCall$17$Delimiter(ISequenceMatcher matcher) {
		ruleCall$17$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$20$Delimiter() {
		return ruleCall$20$Delimiter;
	}
	
	public void setRuleCall$20$Delimiter(ISequenceMatcher matcher) {
		ruleCall$20$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$29$Delimiter() {
		return ruleCall$29$Delimiter;
	}
	
	public void setRuleCall$29$Delimiter(ISequenceMatcher matcher) {
		ruleCall$29$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$32$Delimiter() {
		return ruleCall$32$Delimiter;
	}
	
	public void setRuleCall$32$Delimiter(ISequenceMatcher matcher) {
		ruleCall$32$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$36$Delimiter() {
		return ruleCall$36$Delimiter;
	}
	
	public void setRuleCall$36$Delimiter(ISequenceMatcher matcher) {
		ruleCall$36$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$40$Delimiter() {
		return ruleCall$40$Delimiter;
	}
	
	public void setRuleCall$40$Delimiter(ISequenceMatcher matcher) {
		ruleCall$40$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
