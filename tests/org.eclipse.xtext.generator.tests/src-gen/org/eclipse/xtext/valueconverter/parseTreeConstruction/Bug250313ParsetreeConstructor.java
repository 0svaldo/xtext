/*
* generated by Xtext
*/
package org.eclipse.xtext.valueconverter.parseTreeConstruction;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;
import org.eclipse.xtext.valueconverter.services.Bug250313GrammarAccess;

import com.google.inject.Inject;

public class Bug250313ParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private Bug250313GrammarAccess grammarAccess;
	
	@Override
	protected Solution internalSerialize(EObject obj) {
		IInstanceDescription inst = getDescr(obj);
		if(inst.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier())) {
			final AbstractToken t = new Model_Alternatives(inst, null);
			Solution s = t.firstSolution();
			while(s != null && !isConsumed(s, t)) s = s.getPredecessor().nextSolution(null, s);
			if(s != null) return s;
		}
		if(inst.isInstanceOf(grammarAccess.getChildRule().getType().getClassifier())) {
			final AbstractToken t = new Child_Alternatives(inst, null);
			Solution s = t.firstSolution();
			while(s != null && !isConsumed(s, t)) s = s.getPredecessor().nextSolution(null, s);
			if(s != null) return s;
		}
		if(inst.isInstanceOf(grammarAccess.getChild1Rule().getType().getClassifier())) {
			final AbstractToken t = new Child1_Assignment_name(inst, null);
			Solution s = t.firstSolution();
			while(s != null && !isConsumed(s, t)) s = s.getPredecessor().nextSolution(null, s);
			if(s != null) return s;
		}
		if(inst.isInstanceOf(grammarAccess.getChild2Rule().getType().getClassifier())) {
			final AbstractToken t = new Child2_Assignment_name(inst, null);
			Solution s = t.firstSolution();
			while(s != null && !isConsumed(s, t)) s = s.getPredecessor().nextSolution(null, s);
			if(s != null) return s;
		}
		return null;
	}
	

/************ begin Rule Model ****************
 *
 * Model:
 *   "1"? value=( "mykeyword1" | STRING | NestedDatatype | Datatype | ID )|"1+" multiValue+=( "mykeyword1" | STRING | NestedDatatype | Datatype | ID )|"2" value=STRING|"2+" multiValue+=STRING|"3" value=Datatype|"3+" multiValue+=Datatype|"4" value=NestedDatatype|"4+" multiValue+=NestedDatatype|("content" children=Child) ("ref" ref=( [Child1|STRING] | [Child2] ))?;
 *
 **/

// "1"? value=( "mykeyword1" | STRING | NestedDatatype | Datatype | ID )|"1+" multiValue+=( "mykeyword1" | STRING | NestedDatatype | Datatype | ID )|"2" value=STRING|"2+" multiValue+=STRING|"3" value=Datatype|"3+" multiValue+=Datatype|"4" value=NestedDatatype|"4+" multiValue+=NestedDatatype|("content" children=Child) ("ref" ref=( [Child1|STRING] | [Child2] ))?
protected class Model_Alternatives extends AlternativesToken {

	public Model_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getModelAccess().getAlternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new Model_0_Group(current, this);
			case 1: return new Model_1_Group(current, this);
			case 2: return new Model_2_Group(current, this);
			case 3: return new Model_3_Group(current, this);
			case 4: return new Model_4_Group(current, this);
			case 5: return new Model_5_Group(current, this);
			case 6: return new Model_6_Group(current, this);
			case 7: return new Model_7_Group(current, this);
			case 8: return new Model_8_Group(current, this);
			default: return null;
		}
	}
}

// "1"? value=( "mykeyword1" | STRING | NestedDatatype | Datatype | ID )
protected class Model_0_Group extends GroupToken {
	
	public Model_0_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_0();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Model_0_1_Assignment_value(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Model_0_0_Keyword_1(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// "1"?
protected class Model_0_0_Keyword_1 extends KeywordToken  {
	
	public Model_0_0_Keyword_1(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getDigitOneKeyword_0_0();
	}	
}

// value=( "mykeyword1" | STRING | NestedDatatype | Datatype | ID )
protected class Model_0_1_Assignment_value extends AssignmentToken  {
	
	public Model_0_1_Assignment_value(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getValueAssignment_0_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("value",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");

		if("mykeyword1".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getModelAccess().getValueMykeyword1Keyword_0_1_0_0();
			return new Solution(obj);
		}

		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getValueSTRINGTerminalRuleCall_0_1_0_1();
			return new Solution(obj);
		}

		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.PRC;
			element = grammarAccess.getModelAccess().getValueNestedDatatypeParserRuleCall_0_1_0_2();
			return new Solution(obj);
		}


		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.PRC;
			element = grammarAccess.getModelAccess().getValueDatatypeParserRuleCall_0_1_0_3();
			return new Solution(obj);
		}

		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getValueIDTerminalRuleCall_0_1_0_4();
			return new Solution(obj);
		}
		return null;
	}
}


// "1+" multiValue+=( "mykeyword1" | STRING | NestedDatatype | Datatype | ID )
protected class Model_1_Group extends GroupToken {
	
	public Model_1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_1();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Model_1_1_Assignment_multiValue(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Model_1_0_Keyword_1(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// "1+"
protected class Model_1_0_Keyword_1 extends KeywordToken  {
	
	public Model_1_0_Keyword_1(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getDigitOnePlusSignKeyword_1_0();
	}	
}

// multiValue+=( "mykeyword1" | STRING | NestedDatatype | Datatype | ID )
protected class Model_1_1_Assignment_multiValue extends AssignmentToken  {
	
	public Model_1_1_Assignment_multiValue(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getMultiValueAssignment_1_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("multiValue",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("multiValue");

		if("mykeyword1".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getModelAccess().getMultiValueMykeyword1Keyword_1_1_0_0();
			return new Solution(obj);
		}

		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getMultiValueSTRINGTerminalRuleCall_1_1_0_1();
			return new Solution(obj);
		}

		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.PRC;
			element = grammarAccess.getModelAccess().getMultiValueNestedDatatypeParserRuleCall_1_1_0_2();
			return new Solution(obj);
		}


		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.PRC;
			element = grammarAccess.getModelAccess().getMultiValueDatatypeParserRuleCall_1_1_0_3();
			return new Solution(obj);
		}

		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getMultiValueIDTerminalRuleCall_1_1_0_4();
			return new Solution(obj);
		}
		return null;
	}
}


// "2" value=STRING
protected class Model_2_Group extends GroupToken {
	
	public Model_2_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_2();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Model_2_1_Assignment_value(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Model_2_0_Keyword_2(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// "2"
protected class Model_2_0_Keyword_2 extends KeywordToken  {
	
	public Model_2_0_Keyword_2(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getDigitTwoKeyword_2_0();
	}	
}

// value=STRING
protected class Model_2_1_Assignment_value extends AssignmentToken  {
	
	public Model_2_1_Assignment_value(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getValueAssignment_2_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("value",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getValueSTRINGTerminalRuleCall_2_1_0();
			return new Solution(obj);
		}
		return null;
	}
}


// "2+" multiValue+=STRING
protected class Model_3_Group extends GroupToken {
	
	public Model_3_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_3();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Model_3_1_Assignment_multiValue(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Model_3_0_Keyword_2(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// "2+"
protected class Model_3_0_Keyword_2 extends KeywordToken  {
	
	public Model_3_0_Keyword_2(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getDigitTwoPlusSignKeyword_3_0();
	}	
}

// multiValue+=STRING
protected class Model_3_1_Assignment_multiValue extends AssignmentToken  {
	
	public Model_3_1_Assignment_multiValue(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getMultiValueAssignment_3_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("multiValue",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("multiValue");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getMultiValueSTRINGTerminalRuleCall_3_1_0();
			return new Solution(obj);
		}
		return null;
	}
}


// "3" value=Datatype
protected class Model_4_Group extends GroupToken {
	
	public Model_4_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_4();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Model_4_1_Assignment_value(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Model_4_0_Keyword_3(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// "3"
protected class Model_4_0_Keyword_3 extends KeywordToken  {
	
	public Model_4_0_Keyword_3(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getDigitThreeKeyword_4_0();
	}	
}

// value=Datatype
protected class Model_4_1_Assignment_value extends AssignmentToken  {
	
	public Model_4_1_Assignment_value(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getValueAssignment_4_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("value",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");

		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.PRC;
			element = grammarAccess.getModelAccess().getValueDatatypeParserRuleCall_4_1_0();
			return new Solution(obj);
		}

		return null;
	}
}


// "3+" multiValue+=Datatype
protected class Model_5_Group extends GroupToken {
	
	public Model_5_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_5();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Model_5_1_Assignment_multiValue(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Model_5_0_Keyword_3(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// "3+"
protected class Model_5_0_Keyword_3 extends KeywordToken  {
	
	public Model_5_0_Keyword_3(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getDigitThreePlusSignKeyword_5_0();
	}	
}

// multiValue+=Datatype
protected class Model_5_1_Assignment_multiValue extends AssignmentToken  {
	
	public Model_5_1_Assignment_multiValue(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getMultiValueAssignment_5_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("multiValue",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("multiValue");

		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.PRC;
			element = grammarAccess.getModelAccess().getMultiValueDatatypeParserRuleCall_5_1_0();
			return new Solution(obj);
		}

		return null;
	}
}


// "4" value=NestedDatatype
protected class Model_6_Group extends GroupToken {
	
	public Model_6_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_6();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Model_6_1_Assignment_value(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Model_6_0_Keyword_4(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// "4"
protected class Model_6_0_Keyword_4 extends KeywordToken  {
	
	public Model_6_0_Keyword_4(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getDigitFourKeyword_6_0();
	}	
}

// value=NestedDatatype
protected class Model_6_1_Assignment_value extends AssignmentToken  {
	
	public Model_6_1_Assignment_value(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getValueAssignment_6_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("value",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");

		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.PRC;
			element = grammarAccess.getModelAccess().getValueNestedDatatypeParserRuleCall_6_1_0();
			return new Solution(obj);
		}

		return null;
	}
}


// "4+" multiValue+=NestedDatatype
protected class Model_7_Group extends GroupToken {
	
	public Model_7_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_7();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Model_7_1_Assignment_multiValue(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Model_7_0_Keyword_4(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// "4+"
protected class Model_7_0_Keyword_4 extends KeywordToken  {
	
	public Model_7_0_Keyword_4(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getDigitFourPlusSignKeyword_7_0();
	}	
}

// multiValue+=NestedDatatype
protected class Model_7_1_Assignment_multiValue extends AssignmentToken  {
	
	public Model_7_1_Assignment_multiValue(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getMultiValueAssignment_7_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("multiValue",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("multiValue");

		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.PRC;
			element = grammarAccess.getModelAccess().getMultiValueNestedDatatypeParserRuleCall_7_1_0();
			return new Solution(obj);
		}

		return null;
	}
}


// ("content" children=Child) ("ref" ref=( [Child1|STRING] | [Child2] ))?
protected class Model_8_Group extends GroupToken {
	
	public Model_8_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_8();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Model_8_1_Group(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Model_8_0_Group(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// "content" children=Child
protected class Model_8_0_Group extends GroupToken {
	
	public Model_8_0_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_8_0();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Model_8_0_1_Assignment_children(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Model_8_0_0_Keyword_content(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// "content"
protected class Model_8_0_0_Keyword_content extends KeywordToken  {
	
	public Model_8_0_0_Keyword_content(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getContentKeyword_8_0_0();
	}	
}

// children=Child
protected class Model_8_0_1_Assignment_children extends AssignmentToken  {
	
	public Model_8_0_1_Assignment_children(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getChildrenAssignment_8_0_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("children",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("children");

		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getChildRule().getType().getClassifier())) {
				Solution s = new Child_Alternatives(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}


// ("ref" ref=( [Child1|STRING] | [Child2] ))?
protected class Model_8_1_Group extends GroupToken {
	
	public Model_8_1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_8_1();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Model_8_1_1_Assignment_ref(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Model_8_1_0_Keyword_ref(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// "ref"
protected class Model_8_1_0_Keyword_ref extends KeywordToken  {
	
	public Model_8_1_0_Keyword_ref(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getRefKeyword_8_1_0();
	}	
}

// ref=( [Child1|STRING] | [Child2] )
protected class Model_8_1_1_Assignment_ref extends AssignmentToken  {
	
	public Model_8_1_1_Assignment_ref(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getRefAssignment_8_1_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("ref",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ref");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getRefChild1STRINGTerminalRuleCall_8_1_1_0_0_1();
			return new Solution(obj);
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getRefChild2IDTerminalRuleCall_8_1_1_0_1_1();
			return new Solution(obj);
		}
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModelAccess().getRefChild1CrossReference_8_1_1_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getModelAccess().getRefChild1CrossReference_8_1_1_0_0(); 
				return new Solution(obj);
			}
		}
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModelAccess().getRefChild2CrossReference_8_1_1_0_1().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getModelAccess().getRefChild2CrossReference_8_1_1_0_1(); 
				return new Solution(obj);
			}
		}
		return null;
	}
}




/************ end Rule Model ****************/




/************ begin Rule Child ****************
 *
 * Child:
 *   Child1|Child2;
 *
 **/

// Child1|Child2
protected class Child_Alternatives extends AlternativesToken {

	public Child_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getChildAccess().getAlternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new Child_0_RuleCall_Child1(current, this);
			case 1: return new Child_1_RuleCall_Child2(current, this);
			default: return null;
		}
	}
}

// Child1
protected class Child_0_RuleCall_Child1 extends RuleCallToken {
	
	public Child_0_RuleCall_Child1(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getChildAccess().getChild1ParserRuleCall_0();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(Child1_Assignment_name.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getChild1Rule().getType().getClassifier())) return null;
		return new Child1_Assignment_name(current, this).firstSolution();
	}
}

// Child2
protected class Child_1_RuleCall_Child2 extends RuleCallToken {
	
	public Child_1_RuleCall_Child2(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getChildAccess().getChild2ParserRuleCall_1();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(Child2_Assignment_name.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getChild2Rule().getType().getClassifier())) return null;
		return new Child2_Assignment_name(current, this).firstSolution();
	}
}


/************ end Rule Child ****************/


/************ begin Rule Child1 ****************
 *
 * Child1:
 *   name=ID;
 *
 **/

// name=ID
protected class Child1_Assignment_name extends AssignmentToken  {
	
	public Child1_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getChild1Access().getNameAssignment();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getChild1Access().getNameIDTerminalRuleCall_0();
			return new Solution(obj);
		}
		return null;
	}
}

/************ end Rule Child1 ****************/


/************ begin Rule Child2 ****************
 *
 * Child2:
 *   name=STRING;
 *
 **/

// name=STRING
protected class Child2_Assignment_name extends AssignmentToken  {
	
	public Child2_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getChild2Access().getNameAssignment();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getChild2Access().getNameSTRINGTerminalRuleCall_0();
			return new Solution(obj);
		}
		return null;
	}
}

/************ end Rule Child2 ****************/

}
