/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.epatch.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.parser.epatch.services.EpatchTestLanguageGrammarAccess.SingleAssignmentValueElements;

public final class EpatchTestLanguageSingleAssignmentValueConsumer extends NonTerminalConsumer {

	private SingleAssignmentValueElements rule;	

	private INonTerminalConsumer createdObjectConsumer;

	private ITerminalConsumer fragmentConsumer;

	private ITerminalConsumer idConsumer;

	private ITerminalConsumer intConsumer;

	private ITerminalConsumer stringConsumer;

	private IElementConsumer alternatives$1$Consumer;

	private IElementConsumer assignment$5$Consumer;

	private IElementConsumer keyword$6$Consumer;

	private IElementConsumer assignment$7$Consumer;

	private IElementConsumer ruleCall$8$Consumer;

	private IElementConsumer group$9$Consumer;

	private IElementConsumer assignment$10$Consumer;

	private IElementConsumer crossReference$11$Consumer;

	private IElementConsumer group$13$Consumer;

	private IElementConsumer keyword$15$Consumer;

	private IElementConsumer assignment$16$Consumer;

	private IElementConsumer ruleCall$17$Consumer;

	private IElementConsumer group$18$Consumer;

	private IElementConsumer keyword$20$Consumer;

	private IElementConsumer assignment$21$Consumer;

	private IElementConsumer ruleCall$22$Consumer;

	private IElementConsumer keyword$23$Consumer;

	private IElementConsumer assignment$24$Consumer;

	private IElementConsumer ruleCall$25$Consumer;

	private IElementConsumer group$26$Consumer;

	private IElementConsumer assignment$27$Consumer;

	private IElementConsumer crossReference$28$Consumer;

	private IElementConsumer assignment$30$Consumer;

	private IElementConsumer ruleCall$31$Consumer;

	private ISequenceMatcher crossReference$11$Delimiter;

	private ISequenceMatcher crossReference$28$Delimiter;

	private ICharacterClass keyword$6$Delimiter;

	private ICharacterClass keyword$15$Delimiter;

	private ICharacterClass keyword$20$Delimiter;

	private ICharacterClass keyword$23$Delimiter;

	private ISequenceMatcher ruleCall$8$Delimiter;

	private ISequenceMatcher ruleCall$17$Delimiter;

	private ISequenceMatcher ruleCall$22$Delimiter;

	private ISequenceMatcher ruleCall$31$Delimiter;

	protected class Alternatives$1$Consumer extends AlternativesConsumer {
		
		protected Alternatives$1$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$5$Consumer);
			acceptor.accept(assignment$7$Consumer);
			acceptor.accept(group$9$Consumer);
			acceptor.accept(assignment$24$Consumer);
			acceptor.accept(group$26$Consumer);
		}
	}

	protected class Assignment$5$Consumer extends AssignmentConsumer {
		
		protected Assignment$5$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$6$Consumer;
		}
	}

	protected class Keyword$6$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$6$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "keyword", false, false, getKeyword$6$Delimiter(), optional);
		}
	}

	protected class Assignment$7$Consumer extends AssignmentConsumer {
		
		protected Assignment$7$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$8$Consumer;
		}
	}

	protected class RuleCall$8$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$8$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "value", false, false, getElement(), getRuleCall$8$Delimiter(), optional);
		}
	}

	protected class Group$9$Consumer extends GroupConsumer {
		
		protected Group$9$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$10$Consumer);
			acceptor.accept(group$13$Consumer);
		}
	}

	protected class Assignment$10$Consumer extends AssignmentConsumer {
		
		protected Assignment$10$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$11$Consumer;
		}
	}

	protected class CrossReference$11$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$11$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "refObject", false, false, getElement(), getCrossReference$11$Delimiter(), optional);
		}
	}

	protected class Group$13$Consumer extends OptionalGroupConsumer {
		
		protected Group$13$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$15$Consumer);
			acceptor.accept(assignment$16$Consumer);
			acceptor.accept(group$18$Consumer);
		}
	}

	protected class Keyword$15$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$15$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$15$Delimiter(), optional);
		}
	}

	protected class Assignment$16$Consumer extends AssignmentConsumer {
		
		protected Assignment$16$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$17$Consumer;
		}
	}

	protected class RuleCall$17$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$17$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "refFeature", false, false, getElement(), getRuleCall$17$Delimiter(), optional);
		}
	}

	protected class Group$18$Consumer extends OptionalGroupConsumer {
		
		protected Group$18$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$20$Consumer);
			acceptor.accept(assignment$21$Consumer);
			acceptor.accept(keyword$23$Consumer);
		}
	}

	protected class Keyword$20$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$20$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$20$Delimiter(), optional);
		}
	}

	protected class Assignment$21$Consumer extends AssignmentConsumer {
		
		protected Assignment$21$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$22$Consumer;
		}
	}

	protected class RuleCall$22$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$22$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(intConsumer, "refIndex", false, false, getElement(), getRuleCall$22$Delimiter(), optional);
		}
	}

	protected class Keyword$23$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$23$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$23$Delimiter(), optional);
		}
	}

	protected class Assignment$24$Consumer extends AssignmentConsumer {
		
		protected Assignment$24$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$25$Consumer;
		}
	}

	protected class RuleCall$25$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$25$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(createdObjectConsumer, "newObject", false, false, false, getElement(), optional);
		}
	}

	protected class Group$26$Consumer extends GroupConsumer {
		
		protected Group$26$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$27$Consumer);
			acceptor.accept(assignment$30$Consumer);
		}
	}

	protected class Assignment$27$Consumer extends AssignmentConsumer {
		
		protected Assignment$27$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$28$Consumer;
		}
	}

	protected class CrossReference$28$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$28$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "import", false, false, getElement(), getCrossReference$28$Delimiter(), optional);
		}
	}

	protected class Assignment$30$Consumer extends AssignmentConsumer {
		
		protected Assignment$30$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$31$Consumer;
		}
	}

	protected class RuleCall$31$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$31$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(fragmentConsumer, "impFrag", false, false, getElement(), getRuleCall$31$Delimiter(), optional);
		}
	}

	public EpatchTestLanguageSingleAssignmentValueConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		crossReference$11$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		crossReference$28$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		keyword$6$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$15$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$20$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$23$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$8$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$17$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$22$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$31$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return alternatives$1$Consumer.consume();
	}

	public SingleAssignmentValueElements getRule() {
		return rule;
	}
	
	public void setRule(SingleAssignmentValueElements rule) {
		this.rule = rule;
		
		alternatives$1$Consumer = new Alternatives$1$Consumer(rule.eleAlternatives());
		assignment$5$Consumer = new Assignment$5$Consumer(rule.ele0000AssignmentKeyword());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.ele00000KeywordNull());
		assignment$7$Consumer = new Assignment$7$Consumer(rule.ele0001AssignmentValue());
		ruleCall$8$Consumer = new RuleCall$8$Consumer(rule.ele00010TerminalRuleCallSTRING());
		group$9$Consumer = new Group$9$Consumer(rule.ele001Group());
		assignment$10$Consumer = new Assignment$10$Consumer(rule.ele0010AssignmentRefObject());
		crossReference$11$Consumer = new CrossReference$11$Consumer(rule.ele00100CrossReferenceEStringNamedObject());
		group$13$Consumer = new Group$13$Consumer(rule.ele0011Group());
		keyword$15$Consumer = new Keyword$15$Consumer(rule.ele001100KeywordFullStop());
		assignment$16$Consumer = new Assignment$16$Consumer(rule.ele001101AssignmentRefFeature());
		ruleCall$17$Consumer = new RuleCall$17$Consumer(rule.ele0011010TerminalRuleCallID());
		group$18$Consumer = new Group$18$Consumer(rule.ele00111Group());
		keyword$20$Consumer = new Keyword$20$Consumer(rule.ele0011100KeywordLeftSquareBracket());
		assignment$21$Consumer = new Assignment$21$Consumer(rule.ele0011101AssignmentRefIndex());
		ruleCall$22$Consumer = new RuleCall$22$Consumer(rule.ele00111010TerminalRuleCallINT());
		keyword$23$Consumer = new Keyword$23$Consumer(rule.ele001111KeywordRightSquareBracket());
		assignment$24$Consumer = new Assignment$24$Consumer(rule.ele01AssignmentNewObject());
		ruleCall$25$Consumer = new RuleCall$25$Consumer(rule.ele010ParserRuleCallCreatedObject());
		group$26$Consumer = new Group$26$Consumer(rule.ele1Group());
		assignment$27$Consumer = new Assignment$27$Consumer(rule.ele10AssignmentImport());
		crossReference$28$Consumer = new CrossReference$28$Consumer(rule.ele100CrossReferenceEStringImport());
		assignment$30$Consumer = new Assignment$30$Consumer(rule.ele11AssignmentImpFrag());
		ruleCall$31$Consumer = new RuleCall$31$Consumer(rule.ele110TerminalRuleCallFRAGMENT());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setCreatedObjectConsumer(INonTerminalConsumer createdObjectConsumer) {
		this.createdObjectConsumer = createdObjectConsumer;
	}
	
	public void setFragmentConsumer(ITerminalConsumer fragmentConsumer) {
		this.fragmentConsumer = fragmentConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setIntConsumer(ITerminalConsumer intConsumer) {
		this.intConsumer = intConsumer;
	}
	
	public void setStringConsumer(ITerminalConsumer stringConsumer) {
		this.stringConsumer = stringConsumer;
	}
	
	public ISequenceMatcher getCrossReference$11$Delimiter() {
		return crossReference$11$Delimiter;
	}
	
	public void setCrossReference$11$Delimiter(ISequenceMatcher matcher) {
		crossReference$11$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getCrossReference$28$Delimiter() {
		return crossReference$28$Delimiter;
	}
	
	public void setCrossReference$28$Delimiter(ISequenceMatcher matcher) {
		crossReference$28$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ICharacterClass getKeyword$6$Delimiter() {
		return keyword$6$Delimiter;
	}
	
	public void setKeyword$6$Delimiter(ICharacterClass characterClass) {
		keyword$6$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$15$Delimiter() {
		return keyword$15$Delimiter;
	}
	
	public void setKeyword$15$Delimiter(ICharacterClass characterClass) {
		keyword$15$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$20$Delimiter() {
		return keyword$20$Delimiter;
	}
	
	public void setKeyword$20$Delimiter(ICharacterClass characterClass) {
		keyword$20$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$23$Delimiter() {
		return keyword$23$Delimiter;
	}
	
	public void setKeyword$23$Delimiter(ICharacterClass characterClass) {
		keyword$23$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$8$Delimiter() {
		return ruleCall$8$Delimiter;
	}
	
	public void setRuleCall$8$Delimiter(ISequenceMatcher matcher) {
		ruleCall$8$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$17$Delimiter() {
		return ruleCall$17$Delimiter;
	}
	
	public void setRuleCall$17$Delimiter(ISequenceMatcher matcher) {
		ruleCall$17$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$22$Delimiter() {
		return ruleCall$22$Delimiter;
	}
	
	public void setRuleCall$22$Delimiter(ISequenceMatcher matcher) {
		ruleCall$22$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$31$Delimiter() {
		return ruleCall$31$Delimiter;
	}
	
	public void setRuleCall$31$Delimiter(ISequenceMatcher matcher) {
		ruleCall$31$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
