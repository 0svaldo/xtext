/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.epatch.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.parser.epatch.services.EpatchTestLanguageGrammarAccess.BiListAssignmentElements;

public final class EpatchTestLanguageBiListAssignmentConsumer extends NonTerminalConsumer {

	private BiListAssignmentElements rule;	

	private ITerminalConsumer idConsumer;

	private INonTerminalConsumer listAssignmentValueConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer assignment$2$Consumer;

	private IElementConsumer ruleCall$3$Consumer;

	private IElementConsumer keyword$4$Consumer;

	private IElementConsumer keyword$5$Consumer;

	private IElementConsumer group$6$Consumer;

	private IElementConsumer assignment$7$Consumer;

	private IElementConsumer ruleCall$8$Consumer;

	private IElementConsumer group$9$Consumer;

	private IElementConsumer keyword$10$Consumer;

	private IElementConsumer assignment$11$Consumer;

	private IElementConsumer ruleCall$12$Consumer;

	private IElementConsumer keyword$13$Consumer;

	private IElementConsumer group$14$Consumer;

	private IElementConsumer assignment$15$Consumer;

	private IElementConsumer ruleCall$16$Consumer;

	private IElementConsumer group$17$Consumer;

	private IElementConsumer keyword$18$Consumer;

	private IElementConsumer assignment$19$Consumer;

	private IElementConsumer ruleCall$20$Consumer;

	private IElementConsumer keyword$21$Consumer;

	private IElementConsumer keyword$22$Consumer;

	private ICharacterClass keyword$4$Delimiter;

	private ICharacterClass keyword$5$Delimiter;

	private ICharacterClass keyword$10$Delimiter;

	private ICharacterClass keyword$13$Delimiter;

	private ICharacterClass keyword$18$Delimiter;

	private ICharacterClass keyword$21$Delimiter;

	private ICharacterClass keyword$22$Delimiter;

	private ISequenceMatcher ruleCall$3$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$2$Consumer);
			acceptor.accept(keyword$4$Consumer);
			acceptor.accept(keyword$5$Consumer);
			acceptor.accept(group$6$Consumer);
			acceptor.accept(keyword$13$Consumer);
			acceptor.accept(group$14$Consumer);
			acceptor.accept(keyword$21$Consumer);
			acceptor.accept(keyword$22$Consumer);
		}
	}

	protected class Assignment$2$Consumer extends AssignmentConsumer {
		
		protected Assignment$2$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$3$Consumer;
		}
	}

	protected class RuleCall$3$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$3$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "feature", false, false, getElement(), getRuleCall$3$Delimiter(), optional);
		}
	}

	protected class Keyword$4$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$4$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$4$Delimiter(), optional);
		}
	}

	protected class Keyword$5$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$5$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$5$Delimiter(), optional);
		}
	}

	protected class Group$6$Consumer extends OptionalGroupConsumer {
		
		protected Group$6$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$7$Consumer);
			acceptor.accept(group$9$Consumer);
		}
	}

	protected class Assignment$7$Consumer extends AssignmentConsumer {
		
		protected Assignment$7$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$8$Consumer;
		}
	}

	protected class RuleCall$8$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$8$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(listAssignmentValueConsumer, "leftValues", true, false, false, getElement(), optional);
		}
	}

	protected class Group$9$Consumer extends LoopGroupConsumer {
		
		protected Group$9$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$10$Consumer);
			acceptor.accept(assignment$11$Consumer);
		}
	}

	protected class Keyword$10$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$10$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$10$Delimiter(), optional);
		}
	}

	protected class Assignment$11$Consumer extends AssignmentConsumer {
		
		protected Assignment$11$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$12$Consumer;
		}
	}

	protected class RuleCall$12$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$12$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(listAssignmentValueConsumer, "leftValues", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$13$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$13$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$13$Delimiter(), optional);
		}
	}

	protected class Group$14$Consumer extends OptionalGroupConsumer {
		
		protected Group$14$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$15$Consumer);
			acceptor.accept(group$17$Consumer);
		}
	}

	protected class Assignment$15$Consumer extends AssignmentConsumer {
		
		protected Assignment$15$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$16$Consumer;
		}
	}

	protected class RuleCall$16$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$16$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(listAssignmentValueConsumer, "rightValues", true, false, false, getElement(), optional);
		}
	}

	protected class Group$17$Consumer extends LoopGroupConsumer {
		
		protected Group$17$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$18$Consumer);
			acceptor.accept(assignment$19$Consumer);
		}
	}

	protected class Keyword$18$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$18$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$18$Delimiter(), optional);
		}
	}

	protected class Assignment$19$Consumer extends AssignmentConsumer {
		
		protected Assignment$19$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$20$Consumer;
		}
	}

	protected class RuleCall$20$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$20$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(listAssignmentValueConsumer, "rightValues", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$21$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$21$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$21$Delimiter(), optional);
		}
	}

	protected class Keyword$22$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$22$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$22$Delimiter(), optional);
		}
	}

	public EpatchTestLanguageBiListAssignmentConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$4$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$5$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$10$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$13$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$18$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$21$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$22$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$3$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public BiListAssignmentElements getRule() {
		return rule;
	}
	
	public void setRule(BiListAssignmentElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		assignment$2$Consumer = new Assignment$2$Consumer(rule.ele0AssignmentFeature());
		ruleCall$3$Consumer = new RuleCall$3$Consumer(rule.ele00TerminalRuleCallID());
		keyword$4$Consumer = new Keyword$4$Consumer(rule.ele1KeywordEqualsSign());
		keyword$5$Consumer = new Keyword$5$Consumer(rule.ele2KeywordLeftSquareBracket());
		group$6$Consumer = new Group$6$Consumer(rule.ele3Group());
		assignment$7$Consumer = new Assignment$7$Consumer(rule.ele30AssignmentLeftValues());
		ruleCall$8$Consumer = new RuleCall$8$Consumer(rule.ele300ParserRuleCallListAssignmentValue());
		group$9$Consumer = new Group$9$Consumer(rule.ele31Group());
		keyword$10$Consumer = new Keyword$10$Consumer(rule.ele310KeywordComma());
		assignment$11$Consumer = new Assignment$11$Consumer(rule.ele311AssignmentLeftValues());
		ruleCall$12$Consumer = new RuleCall$12$Consumer(rule.ele3110ParserRuleCallListAssignmentValue());
		keyword$13$Consumer = new Keyword$13$Consumer(rule.ele4KeywordVerticalLine());
		group$14$Consumer = new Group$14$Consumer(rule.ele5Group());
		assignment$15$Consumer = new Assignment$15$Consumer(rule.ele50AssignmentRightValues());
		ruleCall$16$Consumer = new RuleCall$16$Consumer(rule.ele500ParserRuleCallListAssignmentValue());
		group$17$Consumer = new Group$17$Consumer(rule.ele51Group());
		keyword$18$Consumer = new Keyword$18$Consumer(rule.ele510KeywordComma());
		assignment$19$Consumer = new Assignment$19$Consumer(rule.ele511AssignmentRightValues());
		ruleCall$20$Consumer = new RuleCall$20$Consumer(rule.ele5110ParserRuleCallListAssignmentValue());
		keyword$21$Consumer = new Keyword$21$Consumer(rule.ele6KeywordRightSquareBracket());
		keyword$22$Consumer = new Keyword$22$Consumer(rule.ele7KeywordSemicolon());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setListAssignmentValueConsumer(INonTerminalConsumer listAssignmentValueConsumer) {
		this.listAssignmentValueConsumer = listAssignmentValueConsumer;
	}
	
	public ICharacterClass getKeyword$4$Delimiter() {
		return keyword$4$Delimiter;
	}
	
	public void setKeyword$4$Delimiter(ICharacterClass characterClass) {
		keyword$4$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$5$Delimiter() {
		return keyword$5$Delimiter;
	}
	
	public void setKeyword$5$Delimiter(ICharacterClass characterClass) {
		keyword$5$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$10$Delimiter() {
		return keyword$10$Delimiter;
	}
	
	public void setKeyword$10$Delimiter(ICharacterClass characterClass) {
		keyword$10$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$13$Delimiter() {
		return keyword$13$Delimiter;
	}
	
	public void setKeyword$13$Delimiter(ICharacterClass characterClass) {
		keyword$13$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$18$Delimiter() {
		return keyword$18$Delimiter;
	}
	
	public void setKeyword$18$Delimiter(ICharacterClass characterClass) {
		keyword$18$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$21$Delimiter() {
		return keyword$21$Delimiter;
	}
	
	public void setKeyword$21$Delimiter(ICharacterClass characterClass) {
		keyword$21$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$22$Delimiter() {
		return keyword$22$Delimiter;
	}
	
	public void setKeyword$22$Delimiter(ICharacterClass characterClass) {
		keyword$22$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$3$Delimiter() {
		return ruleCall$3$Delimiter;
	}
	
	public void setRuleCall$3$Delimiter(ISequenceMatcher matcher) {
		ruleCall$3$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
