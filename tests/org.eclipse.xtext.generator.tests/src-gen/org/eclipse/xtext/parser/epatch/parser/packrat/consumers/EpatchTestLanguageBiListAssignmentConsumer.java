/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.epatch.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;

import org.eclipse.xtext.AbstractRule;

import org.eclipse.xtext.parser.packrat.IMarkerFactory.IMarker;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ConsumeResult;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.parser.epatch.services.EpatchTestLanguageGrammarAccess.BiListAssignmentElements;

import org.eclipse.xtext.builtin.parser.packrat.consumers.XtextBuiltinIDConsumer;
import org.eclipse.xtext.parser.epatch.parser.packrat.consumers.EpatchTestLanguageListAssignmentValueConsumer;

@SuppressWarnings("unused")
public final class EpatchTestLanguageBiListAssignmentConsumer extends NonTerminalConsumer {

	private BiListAssignmentElements rule;
	
	private ITerminalConsumer idConsumer;
	private INonTerminalConsumer listAssignmentValueConsumer;

	private ICharacterClass keyword$10$Delimiter;
	
	private ICharacterClass keyword$11$Delimiter;
	
	private ICharacterClass keyword$16$Delimiter;
	
	private ICharacterClass keyword$19$Delimiter;
	
	private ICharacterClass keyword$24$Delimiter;
	
	private ICharacterClass keyword$27$Delimiter;
	
	private ICharacterClass keyword$28$Delimiter;
	
	private ISequenceMatcher ruleCall$9$Delimiter;
	
	public EpatchTestLanguageBiListAssignmentConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$10$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$11$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$16$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$19$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$24$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$27$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$28$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$9$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume(int entryPoint) throws Exception {
		return consumeGroup$1(entryPoint);
	}

	protected int consumeGroup$1(int entryPoint) throws Exception {
		int result = doConsumeGroup$1(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeGroup$1(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeGroup$1(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().eleGroup());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$8(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0000000AssignmentFeature());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$10(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0000001KeywordEqualsSign());
					return result.getResult();
				}
			case 2:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$11(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele000001KeywordLeftSquareBracket());
					return result.getResult();
				}
			case 3:
				result.nextStep();
				if (result.didGroupFail(consumeGroup$12(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00001Group());
					return result.getResult();
				}
			case 4:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$19(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0001KeywordVerticalLine());
					return result.getResult();
				}
			case 5:
				result.nextStep();
				if (result.didGroupFail(consumeGroup$20(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele001Group());
					return result.getResult();
				}
			case 6:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$27(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele01KeywordRightSquareBracket());
					return result.getResult();
				}
			case 7:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$28(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele1KeywordSemicolon());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeAssignment$8(int entryPoint) throws Exception {
		int result = doConsumeAssignment$8(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$8(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$8(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele0000000AssignmentFeature());
		return result.getResult(consumeRuleCall$9(entryPoint));
	}

	protected int consumeRuleCall$9(int entryPoint) throws Exception {
		return consumeTerminal(idConsumer, "feature", false, false, getRule().ele00000000LexerRuleCallID(), getRuleCall$9$Delimiter());
	}

	protected int consumeKeyword$10(int entryPoint) throws Exception {
		int result = doConsumeKeyword$10(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$10(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$10(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele0000001KeywordEqualsSign(), null, false, false, getKeyword$10$Delimiter());
	}

	protected int consumeKeyword$11(int entryPoint) throws Exception {
		int result = doConsumeKeyword$11(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$11(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$11(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele000001KeywordLeftSquareBracket(), null, false, false, getKeyword$11$Delimiter());
	}

	protected int consumeGroup$12(int entryPoint) throws Exception {
		IMarker marker = mark();
		int result = doConsumeGroup$12(entryPoint);
		if (result != ConsumeResult.SUCCESS) {
			marker.rollback();
			skipped(getRule().ele00001Group());
		} else
			marker.commit();
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeGroup$12(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().ele00001Group());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$13(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele000010AssignmentLeftValues());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeGroup$15(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele000011Group());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeAssignment$13(int entryPoint) throws Exception {
		int result = doConsumeAssignment$13(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$13(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$13(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele000010AssignmentLeftValues());
		return result.getResult(consumeRuleCall$14(entryPoint));
	}

	protected int consumeRuleCall$14(int entryPoint) throws Exception {
		return consumeNonTerminal(listAssignmentValueConsumer, "leftValues", true, false, false, getRule().ele0000100ParserRuleCallListAssignmentValue());
	}

	protected int consumeGroup$15(int entryPoint) throws Exception {
		IMarker marker = mark();
		while(doConsumeGroup$15(entryPoint) == ConsumeResult.SUCCESS) {
			marker.flush();
		}
		marker.rollback();
		skipped(getRule().ele000011Group());
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeGroup$15(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().ele000011Group());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$16(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0000110KeywordComma());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$17(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0000111AssignmentLeftValues());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeKeyword$16(int entryPoint) throws Exception {
		int result = doConsumeKeyword$16(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$16(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$16(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele0000110KeywordComma(), null, false, false, getKeyword$16$Delimiter());
	}

	protected int consumeAssignment$17(int entryPoint) throws Exception {
		int result = doConsumeAssignment$17(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$17(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$17(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele0000111AssignmentLeftValues());
		return result.getResult(consumeRuleCall$18(entryPoint));
	}

	protected int consumeRuleCall$18(int entryPoint) throws Exception {
		return consumeNonTerminal(listAssignmentValueConsumer, "leftValues", true, false, false, getRule().ele00001110ParserRuleCallListAssignmentValue());
	}

	protected int consumeKeyword$19(int entryPoint) throws Exception {
		int result = doConsumeKeyword$19(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$19(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$19(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele0001KeywordVerticalLine(), null, false, false, getKeyword$19$Delimiter());
	}

	protected int consumeGroup$20(int entryPoint) throws Exception {
		IMarker marker = mark();
		int result = doConsumeGroup$20(entryPoint);
		if (result != ConsumeResult.SUCCESS) {
			marker.rollback();
			skipped(getRule().ele001Group());
		} else
			marker.commit();
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeGroup$20(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().ele001Group());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$21(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0010AssignmentRightValues());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeGroup$23(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0011Group());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeAssignment$21(int entryPoint) throws Exception {
		int result = doConsumeAssignment$21(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$21(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$21(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele0010AssignmentRightValues());
		return result.getResult(consumeRuleCall$22(entryPoint));
	}

	protected int consumeRuleCall$22(int entryPoint) throws Exception {
		return consumeNonTerminal(listAssignmentValueConsumer, "rightValues", true, false, false, getRule().ele00100ParserRuleCallListAssignmentValue());
	}

	protected int consumeGroup$23(int entryPoint) throws Exception {
		IMarker marker = mark();
		while(doConsumeGroup$23(entryPoint) == ConsumeResult.SUCCESS) {
			marker.flush();
		}
		marker.rollback();
		skipped(getRule().ele0011Group());
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeGroup$23(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().ele0011Group());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$24(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00110KeywordComma());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$25(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00111AssignmentRightValues());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeKeyword$24(int entryPoint) throws Exception {
		int result = doConsumeKeyword$24(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$24(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$24(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele00110KeywordComma(), null, false, false, getKeyword$24$Delimiter());
	}

	protected int consumeAssignment$25(int entryPoint) throws Exception {
		int result = doConsumeAssignment$25(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$25(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$25(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele00111AssignmentRightValues());
		return result.getResult(consumeRuleCall$26(entryPoint));
	}

	protected int consumeRuleCall$26(int entryPoint) throws Exception {
		return consumeNonTerminal(listAssignmentValueConsumer, "rightValues", true, false, false, getRule().ele001110ParserRuleCallListAssignmentValue());
	}

	protected int consumeKeyword$27(int entryPoint) throws Exception {
		int result = doConsumeKeyword$27(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$27(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$27(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele01KeywordRightSquareBracket(), null, false, false, getKeyword$27$Delimiter());
	}

	protected int consumeKeyword$28(int entryPoint) throws Exception {
		int result = doConsumeKeyword$28(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$28(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$28(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele1KeywordSemicolon(), null, false, false, getKeyword$28$Delimiter());
	}

	public BiListAssignmentElements getRule() {
		return rule;
	}
	
	public void setRule(BiListAssignmentElements rule) {
		this.rule = rule;
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setListAssignmentValueConsumer(INonTerminalConsumer listAssignmentValueConsumer) {
		this.listAssignmentValueConsumer = listAssignmentValueConsumer;
	}
	
	public ICharacterClass getKeyword$10$Delimiter() {
		return keyword$10$Delimiter;
	}
	
	public void setKeyword$10$Delimiter(ICharacterClass characterClass) {
		keyword$10$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$11$Delimiter() {
		return keyword$11$Delimiter;
	}
	
	public void setKeyword$11$Delimiter(ICharacterClass characterClass) {
		keyword$11$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$16$Delimiter() {
		return keyword$16$Delimiter;
	}
	
	public void setKeyword$16$Delimiter(ICharacterClass characterClass) {
		keyword$16$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$19$Delimiter() {
		return keyword$19$Delimiter;
	}
	
	public void setKeyword$19$Delimiter(ICharacterClass characterClass) {
		keyword$19$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$24$Delimiter() {
		return keyword$24$Delimiter;
	}
	
	public void setKeyword$24$Delimiter(ICharacterClass characterClass) {
		keyword$24$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$27$Delimiter() {
		return keyword$27$Delimiter;
	}
	
	public void setKeyword$27$Delimiter(ICharacterClass characterClass) {
		keyword$27$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$28$Delimiter() {
		return keyword$28$Delimiter;
	}
	
	public void setKeyword$28$Delimiter(ICharacterClass characterClass) {
		keyword$28$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$9$Delimiter() {
		return ruleCall$9$Delimiter;
	}
	
	public void setRuleCall$9$Delimiter(ISequenceMatcher matcher) {
		ruleCall$9$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
