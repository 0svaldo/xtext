/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.epatch.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.parser.epatch.services.EpatchTestLanguageGrammarAccess.ObjectRefElements;

public final class EpatchTestLanguageObjectRefConsumer extends NonTerminalConsumer {

	private ObjectRefElements rule;	

	private INonTerminalConsumer biListAssignmentConsumer;

	private INonTerminalConsumer biSingleAssignmentConsumer;

	private ITerminalConsumer fragmentConsumer;

	private ITerminalConsumer idConsumer;

	private INonTerminalConsumer migrationConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer keyword$2$Consumer;

	private IElementConsumer assignment$3$Consumer;

	private IElementConsumer ruleCall$4$Consumer;

	private IElementConsumer alternatives$5$Consumer;

	private IElementConsumer group$6$Consumer;

	private IElementConsumer assignment$7$Consumer;

	private IElementConsumer crossReference$8$Consumer;

	private IElementConsumer assignment$10$Consumer;

	private IElementConsumer ruleCall$11$Consumer;

	private IElementConsumer group$12$Consumer;

	private IElementConsumer keyword$13$Consumer;

	private IElementConsumer assignment$14$Consumer;

	private IElementConsumer crossReference$15$Consumer;

	private IElementConsumer assignment$17$Consumer;

	private IElementConsumer ruleCall$18$Consumer;

	private IElementConsumer keyword$19$Consumer;

	private IElementConsumer assignment$20$Consumer;

	private IElementConsumer crossReference$21$Consumer;

	private IElementConsumer assignment$23$Consumer;

	private IElementConsumer ruleCall$24$Consumer;

	private IElementConsumer group$25$Consumer;

	private IElementConsumer keyword$26$Consumer;

	private IElementConsumer alternatives$27$Consumer;

	private IElementConsumer assignment$28$Consumer;

	private IElementConsumer ruleCall$29$Consumer;

	private IElementConsumer assignment$30$Consumer;

	private IElementConsumer ruleCall$31$Consumer;

	private IElementConsumer group$32$Consumer;

	private IElementConsumer keyword$33$Consumer;

	private IElementConsumer assignment$34$Consumer;

	private IElementConsumer ruleCall$35$Consumer;

	private IElementConsumer group$36$Consumer;

	private IElementConsumer keyword$37$Consumer;

	private IElementConsumer assignment$38$Consumer;

	private IElementConsumer ruleCall$39$Consumer;

	private IElementConsumer keyword$40$Consumer;

	private ISequenceMatcher crossReference$8$Delimiter;

	private ISequenceMatcher crossReference$15$Delimiter;

	private ISequenceMatcher crossReference$21$Delimiter;

	private ICharacterClass keyword$2$Delimiter;

	private ICharacterClass keyword$13$Delimiter;

	private ICharacterClass keyword$19$Delimiter;

	private ICharacterClass keyword$26$Delimiter;

	private ICharacterClass keyword$33$Delimiter;

	private ICharacterClass keyword$37$Delimiter;

	private ICharacterClass keyword$40$Delimiter;

	private ISequenceMatcher ruleCall$4$Delimiter;

	private ISequenceMatcher ruleCall$11$Delimiter;

	private ISequenceMatcher ruleCall$18$Delimiter;

	private ISequenceMatcher ruleCall$24$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$2$Consumer);
			acceptor.accept(assignment$3$Consumer);
			acceptor.accept(alternatives$5$Consumer);
			acceptor.accept(group$25$Consumer);
		}
	}

	protected class Keyword$2$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$2$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$2$Delimiter(), optional);
		}
	}

	protected class Assignment$3$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$3$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$4$Consumer;
		}
	}

	protected class RuleCall$4$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$4$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "name", false, false, getElement(), getRuleCall$4$Delimiter(), optional);
		}
	}

	protected class Alternatives$5$Consumer extends AlternativesConsumer {
		
		protected Alternatives$5$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$6$Consumer);
			acceptor.accept(group$12$Consumer);
		}
	}

	protected class Group$6$Consumer extends GroupConsumer {
		
		protected Group$6$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$7$Consumer);
			acceptor.accept(assignment$10$Consumer);
		}
	}

	protected class Assignment$7$Consumer extends AssignmentConsumer {
		
		protected Assignment$7$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$8$Consumer;
		}
	}

	protected class CrossReference$8$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$8$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "leftRes", false, false, getElement(), getCrossReference$8$Delimiter(), optional);
		}
	}

	protected class Assignment$10$Consumer extends AssignmentConsumer {
		
		protected Assignment$10$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$11$Consumer;
		}
	}

	protected class RuleCall$11$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$11$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(fragmentConsumer, "leftFrag", false, false, getElement(), getRuleCall$11$Delimiter(), optional);
		}
	}

	protected class Group$12$Consumer extends GroupConsumer {
		
		protected Group$12$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$13$Consumer);
			acceptor.accept(assignment$14$Consumer);
			acceptor.accept(assignment$17$Consumer);
			acceptor.accept(keyword$19$Consumer);
			acceptor.accept(assignment$20$Consumer);
			acceptor.accept(assignment$23$Consumer);
		}
	}

	protected class Keyword$13$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$13$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$13$Delimiter(), optional);
		}
	}

	protected class Assignment$14$Consumer extends AssignmentConsumer {
		
		protected Assignment$14$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$15$Consumer;
		}
	}

	protected class CrossReference$15$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$15$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "leftRes", false, false, getElement(), getCrossReference$15$Delimiter(), optional);
		}
	}

	protected class Assignment$17$Consumer extends AssignmentConsumer {
		
		protected Assignment$17$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$18$Consumer;
		}
	}

	protected class RuleCall$18$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$18$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(fragmentConsumer, "leftFrag", false, false, getElement(), getRuleCall$18$Delimiter(), optional);
		}
	}

	protected class Keyword$19$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$19$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$19$Delimiter(), optional);
		}
	}

	protected class Assignment$20$Consumer extends AssignmentConsumer {
		
		protected Assignment$20$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$21$Consumer;
		}
	}

	protected class CrossReference$21$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$21$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "rightRes", false, false, getElement(), getCrossReference$21$Delimiter(), optional);
		}
	}

	protected class Assignment$23$Consumer extends AssignmentConsumer {
		
		protected Assignment$23$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$24$Consumer;
		}
	}

	protected class RuleCall$24$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$24$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(fragmentConsumer, "rightFrag", false, false, getElement(), getRuleCall$24$Delimiter(), optional);
		}
	}

	protected class Group$25$Consumer extends OptionalGroupConsumer {
		
		protected Group$25$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$26$Consumer);
			acceptor.accept(alternatives$27$Consumer);
			acceptor.accept(group$32$Consumer);
			acceptor.accept(group$36$Consumer);
			acceptor.accept(keyword$40$Consumer);
		}
	}

	protected class Keyword$26$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$26$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$26$Delimiter(), optional);
		}
	}

	protected class Alternatives$27$Consumer extends MandatoryLoopAlternativesConsumer {
		
		protected Alternatives$27$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$28$Consumer);
			acceptor.accept(assignment$30$Consumer);
		}
	}

	protected class Assignment$28$Consumer extends AssignmentConsumer {
		
		protected Assignment$28$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$29$Consumer;
		}
	}

	protected class RuleCall$29$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$29$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(biSingleAssignmentConsumer, "assignments", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$30$Consumer extends AssignmentConsumer {
		
		protected Assignment$30$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$31$Consumer;
		}
	}

	protected class RuleCall$31$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$31$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(biListAssignmentConsumer, "assignments", true, false, false, getElement(), optional);
		}
	}

	protected class Group$32$Consumer extends OptionalGroupConsumer {
		
		protected Group$32$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$33$Consumer);
			acceptor.accept(assignment$34$Consumer);
		}
	}

	protected class Keyword$33$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$33$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$33$Delimiter(), optional);
		}
	}

	protected class Assignment$34$Consumer extends AssignmentConsumer {
		
		protected Assignment$34$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$35$Consumer;
		}
	}

	protected class RuleCall$35$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$35$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(migrationConsumer, "leftMig", false, false, false, getElement(), optional);
		}
	}

	protected class Group$36$Consumer extends OptionalGroupConsumer {
		
		protected Group$36$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$37$Consumer);
			acceptor.accept(assignment$38$Consumer);
		}
	}

	protected class Keyword$37$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$37$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$37$Delimiter(), optional);
		}
	}

	protected class Assignment$38$Consumer extends AssignmentConsumer {
		
		protected Assignment$38$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$39$Consumer;
		}
	}

	protected class RuleCall$39$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$39$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(migrationConsumer, "rightMig", false, false, false, getElement(), optional);
		}
	}

	protected class Keyword$40$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$40$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$40$Delimiter(), optional);
		}
	}

	public EpatchTestLanguageObjectRefConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		crossReference$8$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		crossReference$15$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		crossReference$21$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		keyword$2$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$13$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$19$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$26$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$33$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$37$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$40$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$4$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$11$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$18$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$24$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public ObjectRefElements getRule() {
		return rule;
	}
	
	public void setRule(ObjectRefElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		keyword$2$Consumer = new Keyword$2$Consumer(rule.ele0KeywordObject());
		assignment$3$Consumer = new Assignment$3$Consumer(rule.ele1AssignmentName());
		ruleCall$4$Consumer = new RuleCall$4$Consumer(rule.ele10TerminalRuleCallID());
		alternatives$5$Consumer = new Alternatives$5$Consumer(rule.ele2Alternatives());
		group$6$Consumer = new Group$6$Consumer(rule.ele20Group());
		assignment$7$Consumer = new Assignment$7$Consumer(rule.ele200AssignmentLeftRes());
		crossReference$8$Consumer = new CrossReference$8$Consumer(rule.ele2000CrossReferenceEStringNamedResource());
		assignment$10$Consumer = new Assignment$10$Consumer(rule.ele201AssignmentLeftFrag());
		ruleCall$11$Consumer = new RuleCall$11$Consumer(rule.ele2010TerminalRuleCallFRAGMENT());
		group$12$Consumer = new Group$12$Consumer(rule.ele21Group());
		keyword$13$Consumer = new Keyword$13$Consumer(rule.ele210KeywordLeft());
		assignment$14$Consumer = new Assignment$14$Consumer(rule.ele211AssignmentLeftRes());
		crossReference$15$Consumer = new CrossReference$15$Consumer(rule.ele2110CrossReferenceEStringNamedResource());
		assignment$17$Consumer = new Assignment$17$Consumer(rule.ele212AssignmentLeftFrag());
		ruleCall$18$Consumer = new RuleCall$18$Consumer(rule.ele2120TerminalRuleCallFRAGMENT());
		keyword$19$Consumer = new Keyword$19$Consumer(rule.ele213KeywordRight());
		assignment$20$Consumer = new Assignment$20$Consumer(rule.ele214AssignmentRightRes());
		crossReference$21$Consumer = new CrossReference$21$Consumer(rule.ele2140CrossReferenceEStringNamedResource());
		assignment$23$Consumer = new Assignment$23$Consumer(rule.ele215AssignmentRightFrag());
		ruleCall$24$Consumer = new RuleCall$24$Consumer(rule.ele2150TerminalRuleCallFRAGMENT());
		group$25$Consumer = new Group$25$Consumer(rule.ele3Group());
		keyword$26$Consumer = new Keyword$26$Consumer(rule.ele30KeywordLeftCurlyBracket());
		alternatives$27$Consumer = new Alternatives$27$Consumer(rule.ele31Alternatives());
		assignment$28$Consumer = new Assignment$28$Consumer(rule.ele310AssignmentAssignments());
		ruleCall$29$Consumer = new RuleCall$29$Consumer(rule.ele3100ParserRuleCallBiSingleAssignment());
		assignment$30$Consumer = new Assignment$30$Consumer(rule.ele311AssignmentAssignments());
		ruleCall$31$Consumer = new RuleCall$31$Consumer(rule.ele3110ParserRuleCallBiListAssignment());
		group$32$Consumer = new Group$32$Consumer(rule.ele32Group());
		keyword$33$Consumer = new Keyword$33$Consumer(rule.ele320KeywordLeft());
		assignment$34$Consumer = new Assignment$34$Consumer(rule.ele321AssignmentLeftMig());
		ruleCall$35$Consumer = new RuleCall$35$Consumer(rule.ele3210ParserRuleCallMigration());
		group$36$Consumer = new Group$36$Consumer(rule.ele33Group());
		keyword$37$Consumer = new Keyword$37$Consumer(rule.ele330KeywordRight());
		assignment$38$Consumer = new Assignment$38$Consumer(rule.ele331AssignmentRightMig());
		ruleCall$39$Consumer = new RuleCall$39$Consumer(rule.ele3310ParserRuleCallMigration());
		keyword$40$Consumer = new Keyword$40$Consumer(rule.ele34KeywordRightCurlyBracket());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setBiListAssignmentConsumer(INonTerminalConsumer biListAssignmentConsumer) {
		this.biListAssignmentConsumer = biListAssignmentConsumer;
	}
	
	public void setBiSingleAssignmentConsumer(INonTerminalConsumer biSingleAssignmentConsumer) {
		this.biSingleAssignmentConsumer = biSingleAssignmentConsumer;
	}
	
	public void setFragmentConsumer(ITerminalConsumer fragmentConsumer) {
		this.fragmentConsumer = fragmentConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setMigrationConsumer(INonTerminalConsumer migrationConsumer) {
		this.migrationConsumer = migrationConsumer;
	}
	
	public ISequenceMatcher getCrossReference$8$Delimiter() {
		return crossReference$8$Delimiter;
	}
	
	public void setCrossReference$8$Delimiter(ISequenceMatcher matcher) {
		crossReference$8$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getCrossReference$15$Delimiter() {
		return crossReference$15$Delimiter;
	}
	
	public void setCrossReference$15$Delimiter(ISequenceMatcher matcher) {
		crossReference$15$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getCrossReference$21$Delimiter() {
		return crossReference$21$Delimiter;
	}
	
	public void setCrossReference$21$Delimiter(ISequenceMatcher matcher) {
		crossReference$21$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ICharacterClass getKeyword$2$Delimiter() {
		return keyword$2$Delimiter;
	}
	
	public void setKeyword$2$Delimiter(ICharacterClass characterClass) {
		keyword$2$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$13$Delimiter() {
		return keyword$13$Delimiter;
	}
	
	public void setKeyword$13$Delimiter(ICharacterClass characterClass) {
		keyword$13$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$19$Delimiter() {
		return keyword$19$Delimiter;
	}
	
	public void setKeyword$19$Delimiter(ICharacterClass characterClass) {
		keyword$19$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$26$Delimiter() {
		return keyword$26$Delimiter;
	}
	
	public void setKeyword$26$Delimiter(ICharacterClass characterClass) {
		keyword$26$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$33$Delimiter() {
		return keyword$33$Delimiter;
	}
	
	public void setKeyword$33$Delimiter(ICharacterClass characterClass) {
		keyword$33$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$37$Delimiter() {
		return keyword$37$Delimiter;
	}
	
	public void setKeyword$37$Delimiter(ICharacterClass characterClass) {
		keyword$37$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$40$Delimiter() {
		return keyword$40$Delimiter;
	}
	
	public void setKeyword$40$Delimiter(ICharacterClass characterClass) {
		keyword$40$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$4$Delimiter() {
		return ruleCall$4$Delimiter;
	}
	
	public void setRuleCall$4$Delimiter(ISequenceMatcher matcher) {
		ruleCall$4$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$11$Delimiter() {
		return ruleCall$11$Delimiter;
	}
	
	public void setRuleCall$11$Delimiter(ISequenceMatcher matcher) {
		ruleCall$11$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$18$Delimiter() {
		return ruleCall$18$Delimiter;
	}
	
	public void setRuleCall$18$Delimiter(ISequenceMatcher matcher) {
		ruleCall$18$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$24$Delimiter() {
		return ruleCall$24$Delimiter;
	}
	
	public void setRuleCall$24$Delimiter(ISequenceMatcher matcher) {
		ruleCall$24$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
