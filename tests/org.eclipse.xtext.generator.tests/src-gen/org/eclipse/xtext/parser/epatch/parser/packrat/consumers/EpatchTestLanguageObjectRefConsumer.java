/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.epatch.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.parser.epatch.services.EpatchTestLanguageGrammarAccess.ObjectRefElements;

public final class EpatchTestLanguageObjectRefConsumer extends NonTerminalConsumer {

	private ObjectRefElements rule;	

	private INonTerminalConsumer biListAssignmentConsumer;

	private INonTerminalConsumer biSingleAssignmentConsumer;

	private ITerminalConsumer fragmentConsumer;

	private ITerminalConsumer idConsumer;

	private INonTerminalConsumer migrationConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer keyword$4$Consumer;

	private IElementConsumer assignment$5$Consumer;

	private IElementConsumer ruleCall$6$Consumer;

	private IElementConsumer alternatives$7$Consumer;

	private IElementConsumer group$8$Consumer;

	private IElementConsumer assignment$9$Consumer;

	private IElementConsumer crossReference$10$Consumer;

	private IElementConsumer assignment$12$Consumer;

	private IElementConsumer ruleCall$13$Consumer;

	private IElementConsumer group$14$Consumer;

	private IElementConsumer keyword$19$Consumer;

	private IElementConsumer assignment$20$Consumer;

	private IElementConsumer crossReference$21$Consumer;

	private IElementConsumer assignment$23$Consumer;

	private IElementConsumer ruleCall$24$Consumer;

	private IElementConsumer keyword$25$Consumer;

	private IElementConsumer assignment$26$Consumer;

	private IElementConsumer crossReference$27$Consumer;

	private IElementConsumer assignment$29$Consumer;

	private IElementConsumer ruleCall$30$Consumer;

	private IElementConsumer group$31$Consumer;

	private IElementConsumer keyword$35$Consumer;

	private IElementConsumer alternatives$36$Consumer;

	private IElementConsumer assignment$37$Consumer;

	private IElementConsumer ruleCall$38$Consumer;

	private IElementConsumer assignment$39$Consumer;

	private IElementConsumer ruleCall$40$Consumer;

	private IElementConsumer group$41$Consumer;

	private IElementConsumer keyword$42$Consumer;

	private IElementConsumer assignment$43$Consumer;

	private IElementConsumer ruleCall$44$Consumer;

	private IElementConsumer group$45$Consumer;

	private IElementConsumer keyword$46$Consumer;

	private IElementConsumer assignment$47$Consumer;

	private IElementConsumer ruleCall$48$Consumer;

	private IElementConsumer keyword$49$Consumer;

	private ISequenceMatcher crossReference$10$Delimiter;

	private ISequenceMatcher crossReference$21$Delimiter;

	private ISequenceMatcher crossReference$27$Delimiter;

	private ICharacterClass keyword$4$Delimiter;

	private ICharacterClass keyword$19$Delimiter;

	private ICharacterClass keyword$25$Delimiter;

	private ICharacterClass keyword$35$Delimiter;

	private ICharacterClass keyword$42$Delimiter;

	private ICharacterClass keyword$46$Delimiter;

	private ICharacterClass keyword$49$Delimiter;

	private ISequenceMatcher ruleCall$6$Delimiter;

	private ISequenceMatcher ruleCall$13$Delimiter;

	private ISequenceMatcher ruleCall$24$Delimiter;

	private ISequenceMatcher ruleCall$30$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$4$Consumer);
			acceptor.accept(assignment$5$Consumer);
			acceptor.accept(alternatives$7$Consumer);
			acceptor.accept(group$31$Consumer);
		}
	}

	protected class Keyword$4$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$4$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$4$Delimiter());
		}
	}

	protected class Assignment$5$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$5$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$6$Consumer;
		}
	}

	protected class RuleCall$6$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$6$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeTerminal(idConsumer, "name", false, false, getElement(), getRuleCall$6$Delimiter());
		}
	}

	protected class Alternatives$7$Consumer extends AlternativesConsumer {
		
		protected Alternatives$7$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$8$Consumer);
			acceptor.accept(group$14$Consumer);
		}
	}

	protected class Group$8$Consumer extends GroupConsumer {
		
		protected Group$8$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$9$Consumer);
			acceptor.accept(assignment$12$Consumer);
		}
	}

	protected class Assignment$9$Consumer extends AssignmentConsumer {
		
		protected Assignment$9$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$10$Consumer;
		}
	}

	protected class CrossReference$10$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$10$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeTerminal(idConsumer, "leftRes", false, false, getElement(), getCrossReference$10$Delimiter());
		}
	}

	protected class Assignment$12$Consumer extends AssignmentConsumer {
		
		protected Assignment$12$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$13$Consumer;
		}
	}

	protected class RuleCall$13$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$13$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeTerminal(fragmentConsumer, "leftFrag", false, false, getElement(), getRuleCall$13$Delimiter());
		}
	}

	protected class Group$14$Consumer extends GroupConsumer {
		
		protected Group$14$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$19$Consumer);
			acceptor.accept(assignment$20$Consumer);
			acceptor.accept(assignment$23$Consumer);
			acceptor.accept(keyword$25$Consumer);
			acceptor.accept(assignment$26$Consumer);
			acceptor.accept(assignment$29$Consumer);
		}
	}

	protected class Keyword$19$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$19$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$19$Delimiter());
		}
	}

	protected class Assignment$20$Consumer extends AssignmentConsumer {
		
		protected Assignment$20$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$21$Consumer;
		}
	}

	protected class CrossReference$21$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$21$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeTerminal(idConsumer, "leftRes", false, false, getElement(), getCrossReference$21$Delimiter());
		}
	}

	protected class Assignment$23$Consumer extends AssignmentConsumer {
		
		protected Assignment$23$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$24$Consumer;
		}
	}

	protected class RuleCall$24$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$24$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeTerminal(fragmentConsumer, "leftFrag", false, false, getElement(), getRuleCall$24$Delimiter());
		}
	}

	protected class Keyword$25$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$25$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$25$Delimiter());
		}
	}

	protected class Assignment$26$Consumer extends AssignmentConsumer {
		
		protected Assignment$26$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$27$Consumer;
		}
	}

	protected class CrossReference$27$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$27$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeTerminal(idConsumer, "rightRes", false, false, getElement(), getCrossReference$27$Delimiter());
		}
	}

	protected class Assignment$29$Consumer extends AssignmentConsumer {
		
		protected Assignment$29$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$30$Consumer;
		}
	}

	protected class RuleCall$30$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$30$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeTerminal(fragmentConsumer, "rightFrag", false, false, getElement(), getRuleCall$30$Delimiter());
		}
	}

	protected class Group$31$Consumer extends OptionalGroupConsumer {
		
		protected Group$31$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$35$Consumer);
			acceptor.accept(alternatives$36$Consumer);
			acceptor.accept(group$41$Consumer);
			acceptor.accept(group$45$Consumer);
			acceptor.accept(keyword$49$Consumer);
		}
	}

	protected class Keyword$35$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$35$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$35$Delimiter());
		}
	}

	protected class Alternatives$36$Consumer extends MandatoryLoopAlternativesConsumer {
		
		protected Alternatives$36$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$37$Consumer);
			acceptor.accept(assignment$39$Consumer);
		}
	}

	protected class Assignment$37$Consumer extends AssignmentConsumer {
		
		protected Assignment$37$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$38$Consumer;
		}
	}

	protected class RuleCall$38$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$38$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(biSingleAssignmentConsumer, "assignments", true, false, false, getElement());
		}
	}

	protected class Assignment$39$Consumer extends AssignmentConsumer {
		
		protected Assignment$39$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$40$Consumer;
		}
	}

	protected class RuleCall$40$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$40$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(biListAssignmentConsumer, "assignments", true, false, false, getElement());
		}
	}

	protected class Group$41$Consumer extends OptionalGroupConsumer {
		
		protected Group$41$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$42$Consumer);
			acceptor.accept(assignment$43$Consumer);
		}
	}

	protected class Keyword$42$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$42$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$42$Delimiter());
		}
	}

	protected class Assignment$43$Consumer extends AssignmentConsumer {
		
		protected Assignment$43$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$44$Consumer;
		}
	}

	protected class RuleCall$44$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$44$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(migrationConsumer, "leftMig", false, false, false, getElement());
		}
	}

	protected class Group$45$Consumer extends OptionalGroupConsumer {
		
		protected Group$45$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$46$Consumer);
			acceptor.accept(assignment$47$Consumer);
		}
	}

	protected class Keyword$46$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$46$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$46$Delimiter());
		}
	}

	protected class Assignment$47$Consumer extends AssignmentConsumer {
		
		protected Assignment$47$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$48$Consumer;
		}
	}

	protected class RuleCall$48$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$48$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(migrationConsumer, "rightMig", false, false, false, getElement());
		}
	}

	protected class Keyword$49$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$49$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$49$Delimiter());
		}
	}

	public EpatchTestLanguageObjectRefConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		crossReference$10$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		crossReference$21$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		crossReference$27$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		keyword$4$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$19$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$25$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$35$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$42$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$46$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$49$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$6$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$13$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$24$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$30$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public ObjectRefElements getRule() {
		return rule;
	}
	
	public void setRule(ObjectRefElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		keyword$4$Consumer = new Keyword$4$Consumer(rule.ele000KeywordObject());
		assignment$5$Consumer = new Assignment$5$Consumer(rule.ele001AssignmentName());
		ruleCall$6$Consumer = new RuleCall$6$Consumer(rule.ele0010LexerRuleCallID());
		alternatives$7$Consumer = new Alternatives$7$Consumer(rule.ele01Alternatives());
		group$8$Consumer = new Group$8$Consumer(rule.ele010Group());
		assignment$9$Consumer = new Assignment$9$Consumer(rule.ele0100AssignmentLeftRes());
		crossReference$10$Consumer = new CrossReference$10$Consumer(rule.ele01000CrossReferenceEStringNamedResource());
		assignment$12$Consumer = new Assignment$12$Consumer(rule.ele0101AssignmentLeftFrag());
		ruleCall$13$Consumer = new RuleCall$13$Consumer(rule.ele01010LexerRuleCallFRAGMENT());
		group$14$Consumer = new Group$14$Consumer(rule.ele011Group());
		keyword$19$Consumer = new Keyword$19$Consumer(rule.ele01100000KeywordLeft());
		assignment$20$Consumer = new Assignment$20$Consumer(rule.ele01100001AssignmentLeftRes());
		crossReference$21$Consumer = new CrossReference$21$Consumer(rule.ele011000010CrossReferenceEStringNamedResource());
		assignment$23$Consumer = new Assignment$23$Consumer(rule.ele0110001AssignmentLeftFrag());
		ruleCall$24$Consumer = new RuleCall$24$Consumer(rule.ele01100010LexerRuleCallFRAGMENT());
		keyword$25$Consumer = new Keyword$25$Consumer(rule.ele011001KeywordRight());
		assignment$26$Consumer = new Assignment$26$Consumer(rule.ele01101AssignmentRightRes());
		crossReference$27$Consumer = new CrossReference$27$Consumer(rule.ele011010CrossReferenceEStringNamedResource());
		assignment$29$Consumer = new Assignment$29$Consumer(rule.ele0111AssignmentRightFrag());
		ruleCall$30$Consumer = new RuleCall$30$Consumer(rule.ele01110LexerRuleCallFRAGMENT());
		group$31$Consumer = new Group$31$Consumer(rule.ele1Group());
		keyword$35$Consumer = new Keyword$35$Consumer(rule.ele10000KeywordLeftCurlyBracket());
		alternatives$36$Consumer = new Alternatives$36$Consumer(rule.ele10001Alternatives());
		assignment$37$Consumer = new Assignment$37$Consumer(rule.ele100010AssignmentAssignments());
		ruleCall$38$Consumer = new RuleCall$38$Consumer(rule.ele1000100ParserRuleCallBiSingleAssignment());
		assignment$39$Consumer = new Assignment$39$Consumer(rule.ele100011AssignmentAssignments());
		ruleCall$40$Consumer = new RuleCall$40$Consumer(rule.ele1000110ParserRuleCallBiListAssignment());
		group$41$Consumer = new Group$41$Consumer(rule.ele1001Group());
		keyword$42$Consumer = new Keyword$42$Consumer(rule.ele10010KeywordLeft());
		assignment$43$Consumer = new Assignment$43$Consumer(rule.ele10011AssignmentLeftMig());
		ruleCall$44$Consumer = new RuleCall$44$Consumer(rule.ele100110ParserRuleCallMigration());
		group$45$Consumer = new Group$45$Consumer(rule.ele101Group());
		keyword$46$Consumer = new Keyword$46$Consumer(rule.ele1010KeywordRight());
		assignment$47$Consumer = new Assignment$47$Consumer(rule.ele1011AssignmentRightMig());
		ruleCall$48$Consumer = new RuleCall$48$Consumer(rule.ele10110ParserRuleCallMigration());
		keyword$49$Consumer = new Keyword$49$Consumer(rule.ele11KeywordRightCurlyBracket());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setBiListAssignmentConsumer(INonTerminalConsumer biListAssignmentConsumer) {
		this.biListAssignmentConsumer = biListAssignmentConsumer;
	}
	
	public void setBiSingleAssignmentConsumer(INonTerminalConsumer biSingleAssignmentConsumer) {
		this.biSingleAssignmentConsumer = biSingleAssignmentConsumer;
	}
	
	public void setFragmentConsumer(ITerminalConsumer fragmentConsumer) {
		this.fragmentConsumer = fragmentConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setMigrationConsumer(INonTerminalConsumer migrationConsumer) {
		this.migrationConsumer = migrationConsumer;
	}
	
	public ISequenceMatcher getCrossReference$10$Delimiter() {
		return crossReference$10$Delimiter;
	}
	
	public void setCrossReference$10$Delimiter(ISequenceMatcher matcher) {
		crossReference$10$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getCrossReference$21$Delimiter() {
		return crossReference$21$Delimiter;
	}
	
	public void setCrossReference$21$Delimiter(ISequenceMatcher matcher) {
		crossReference$21$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getCrossReference$27$Delimiter() {
		return crossReference$27$Delimiter;
	}
	
	public void setCrossReference$27$Delimiter(ISequenceMatcher matcher) {
		crossReference$27$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ICharacterClass getKeyword$4$Delimiter() {
		return keyword$4$Delimiter;
	}
	
	public void setKeyword$4$Delimiter(ICharacterClass characterClass) {
		keyword$4$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$19$Delimiter() {
		return keyword$19$Delimiter;
	}
	
	public void setKeyword$19$Delimiter(ICharacterClass characterClass) {
		keyword$19$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$25$Delimiter() {
		return keyword$25$Delimiter;
	}
	
	public void setKeyword$25$Delimiter(ICharacterClass characterClass) {
		keyword$25$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$35$Delimiter() {
		return keyword$35$Delimiter;
	}
	
	public void setKeyword$35$Delimiter(ICharacterClass characterClass) {
		keyword$35$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$42$Delimiter() {
		return keyword$42$Delimiter;
	}
	
	public void setKeyword$42$Delimiter(ICharacterClass characterClass) {
		keyword$42$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$46$Delimiter() {
		return keyword$46$Delimiter;
	}
	
	public void setKeyword$46$Delimiter(ICharacterClass characterClass) {
		keyword$46$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$49$Delimiter() {
		return keyword$49$Delimiter;
	}
	
	public void setKeyword$49$Delimiter(ICharacterClass characterClass) {
		keyword$49$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$6$Delimiter() {
		return ruleCall$6$Delimiter;
	}
	
	public void setRuleCall$6$Delimiter(ISequenceMatcher matcher) {
		ruleCall$6$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$13$Delimiter() {
		return ruleCall$13$Delimiter;
	}
	
	public void setRuleCall$13$Delimiter(ISequenceMatcher matcher) {
		ruleCall$13$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$24$Delimiter() {
		return ruleCall$24$Delimiter;
	}
	
	public void setRuleCall$24$Delimiter(ISequenceMatcher matcher) {
		ruleCall$24$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$30$Delimiter() {
		return ruleCall$30$Delimiter;
	}
	
	public void setRuleCall$30$Delimiter(ISequenceMatcher matcher) {
		ruleCall$30$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
