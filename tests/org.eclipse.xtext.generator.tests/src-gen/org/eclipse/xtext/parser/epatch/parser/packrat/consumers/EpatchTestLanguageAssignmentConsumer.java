/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.epatch.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;

import org.eclipse.xtext.parser.epatch.services.EpatchTestLanguageGrammarAccess.AssignmentElements;

public final class EpatchTestLanguageAssignmentConsumer extends NonTerminalConsumer {

	private AssignmentElements rule;	

	private INonTerminalConsumer biListAssignmentConsumer;

	private INonTerminalConsumer biSingleAssignmentConsumer;

	private INonTerminalConsumer monoListAssignmentConsumer;

	private INonTerminalConsumer monoSingleAssignmentConsumer;

	private IElementConsumer alternatives$1$Consumer;

	private IElementConsumer ruleCall$4$Consumer;

	private IElementConsumer ruleCall$5$Consumer;

	private IElementConsumer ruleCall$6$Consumer;

	private IElementConsumer ruleCall$7$Consumer;

	protected class Alternatives$1$Consumer extends AlternativesConsumer {
		
		protected Alternatives$1$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(ruleCall$4$Consumer);
			acceptor.accept(ruleCall$5$Consumer);
			acceptor.accept(ruleCall$6$Consumer);
			acceptor.accept(ruleCall$7$Consumer);
		}
	}

	protected class RuleCall$4$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$4$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(biSingleAssignmentConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$5$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$5$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(biListAssignmentConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$6$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$6$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(monoSingleAssignmentConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$7$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$7$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(monoListAssignmentConsumer, null, false, false, false, getElement(), optional);
		}
	}

	public EpatchTestLanguageAssignmentConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
	}
	
	@Override
	protected int doConsume() throws Exception {
		return alternatives$1$Consumer.consume();
	}

	public AssignmentElements getRule() {
		return rule;
	}
	
	public void setRule(AssignmentElements rule) {
		this.rule = rule;
		
		alternatives$1$Consumer = new Alternatives$1$Consumer(rule.eleAlternatives());
		ruleCall$4$Consumer = new RuleCall$4$Consumer(rule.ele000ParserRuleCallBiSingleAssignment());
		ruleCall$5$Consumer = new RuleCall$5$Consumer(rule.ele001ParserRuleCallBiListAssignment());
		ruleCall$6$Consumer = new RuleCall$6$Consumer(rule.ele01ParserRuleCallMonoSingleAssignment());
		ruleCall$7$Consumer = new RuleCall$7$Consumer(rule.ele1ParserRuleCallMonoListAssignment());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setBiListAssignmentConsumer(INonTerminalConsumer biListAssignmentConsumer) {
		this.biListAssignmentConsumer = biListAssignmentConsumer;
	}
	
	public void setBiSingleAssignmentConsumer(INonTerminalConsumer biSingleAssignmentConsumer) {
		this.biSingleAssignmentConsumer = biSingleAssignmentConsumer;
	}
	
	public void setMonoListAssignmentConsumer(INonTerminalConsumer monoListAssignmentConsumer) {
		this.monoListAssignmentConsumer = monoListAssignmentConsumer;
	}
	
	public void setMonoSingleAssignmentConsumer(INonTerminalConsumer monoSingleAssignmentConsumer) {
		this.monoSingleAssignmentConsumer = monoSingleAssignmentConsumer;
	}
	
}
