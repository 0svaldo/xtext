/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.epatch.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.parser.epatch.services.EpatchTestLanguageGrammarAccess.ListAssignmentValueElements;

public final class EpatchTestLanguageListAssignmentValueConsumer extends NonTerminalConsumer {

	private ListAssignmentValueElements rule;	

	private INonTerminalConsumer createdObjectConsumer;

	private ITerminalConsumer fragmentConsumer;

	private ITerminalConsumer idConsumer;

	private ITerminalConsumer intConsumer;

	private ITerminalConsumer stringConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer assignment$2$Consumer;

	private IElementConsumer ruleCall$3$Consumer;

	private IElementConsumer keyword$4$Consumer;

	private IElementConsumer alternatives$5$Consumer;

	private IElementConsumer group$6$Consumer;

	private IElementConsumer keyword$7$Consumer;

	private IElementConsumer assignment$8$Consumer;

	private IElementConsumer ruleCall$9$Consumer;

	private IElementConsumer keyword$10$Consumer;

	private IElementConsumer assignment$11$Consumer;

	private IElementConsumer ruleCall$12$Consumer;

	private IElementConsumer group$13$Consumer;

	private IElementConsumer assignment$14$Consumer;

	private IElementConsumer crossReference$15$Consumer;

	private IElementConsumer group$17$Consumer;

	private IElementConsumer keyword$18$Consumer;

	private IElementConsumer assignment$19$Consumer;

	private IElementConsumer ruleCall$20$Consumer;

	private IElementConsumer group$21$Consumer;

	private IElementConsumer keyword$22$Consumer;

	private IElementConsumer assignment$23$Consumer;

	private IElementConsumer ruleCall$24$Consumer;

	private IElementConsumer keyword$25$Consumer;

	private IElementConsumer assignment$26$Consumer;

	private IElementConsumer ruleCall$27$Consumer;

	private IElementConsumer group$28$Consumer;

	private IElementConsumer assignment$29$Consumer;

	private IElementConsumer crossReference$30$Consumer;

	private IElementConsumer assignment$32$Consumer;

	private IElementConsumer ruleCall$33$Consumer;

	private ISequenceMatcher crossReference$15$Delimiter;

	private ISequenceMatcher crossReference$30$Delimiter;

	private ICharacterClass keyword$4$Delimiter;

	private ICharacterClass keyword$7$Delimiter;

	private ICharacterClass keyword$10$Delimiter;

	private ICharacterClass keyword$18$Delimiter;

	private ICharacterClass keyword$22$Delimiter;

	private ICharacterClass keyword$25$Delimiter;

	private ISequenceMatcher ruleCall$3$Delimiter;

	private ISequenceMatcher ruleCall$9$Delimiter;

	private ISequenceMatcher ruleCall$12$Delimiter;

	private ISequenceMatcher ruleCall$20$Delimiter;

	private ISequenceMatcher ruleCall$24$Delimiter;

	private ISequenceMatcher ruleCall$33$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$2$Consumer);
			acceptor.accept(keyword$4$Consumer);
			acceptor.accept(alternatives$5$Consumer);
		}
	}

	protected class Assignment$2$Consumer extends AssignmentConsumer {
		
		protected Assignment$2$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$3$Consumer;
		}
	}

	protected class RuleCall$3$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$3$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(intConsumer, "index", false, false, getElement(), getRuleCall$3$Delimiter(), optional);
		}
	}

	protected class Keyword$4$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$4$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$4$Delimiter(), optional);
		}
	}

	protected class Alternatives$5$Consumer extends AlternativesConsumer {
		
		protected Alternatives$5$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$6$Consumer);
			acceptor.accept(assignment$11$Consumer);
			acceptor.accept(group$13$Consumer);
			acceptor.accept(assignment$26$Consumer);
			acceptor.accept(group$28$Consumer);
		}
	}

	protected class Group$6$Consumer extends GroupConsumer {
		
		protected Group$6$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$7$Consumer);
			acceptor.accept(assignment$8$Consumer);
			acceptor.accept(keyword$10$Consumer);
		}
	}

	protected class Keyword$7$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$7$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$7$Delimiter(), optional);
		}
	}

	protected class Assignment$8$Consumer extends AssignmentConsumer {
		
		protected Assignment$8$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$9$Consumer;
		}
	}

	protected class RuleCall$9$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$9$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(intConsumer, "refIndex", false, false, getElement(), getRuleCall$9$Delimiter(), optional);
		}
	}

	protected class Keyword$10$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$10$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$10$Delimiter(), optional);
		}
	}

	protected class Assignment$11$Consumer extends AssignmentConsumer {
		
		protected Assignment$11$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$12$Consumer;
		}
	}

	protected class RuleCall$12$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$12$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "value", false, false, getElement(), getRuleCall$12$Delimiter(), optional);
		}
	}

	protected class Group$13$Consumer extends GroupConsumer {
		
		protected Group$13$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$14$Consumer);
			acceptor.accept(group$17$Consumer);
		}
	}

	protected class Assignment$14$Consumer extends AssignmentConsumer {
		
		protected Assignment$14$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$15$Consumer;
		}
	}

	protected class CrossReference$15$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$15$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "refObject", false, false, getElement(), getCrossReference$15$Delimiter(), optional);
		}
	}

	protected class Group$17$Consumer extends OptionalGroupConsumer {
		
		protected Group$17$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$18$Consumer);
			acceptor.accept(assignment$19$Consumer);
			acceptor.accept(group$21$Consumer);
		}
	}

	protected class Keyword$18$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$18$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$18$Delimiter(), optional);
		}
	}

	protected class Assignment$19$Consumer extends AssignmentConsumer {
		
		protected Assignment$19$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$20$Consumer;
		}
	}

	protected class RuleCall$20$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$20$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "refFeature", false, false, getElement(), getRuleCall$20$Delimiter(), optional);
		}
	}

	protected class Group$21$Consumer extends OptionalGroupConsumer {
		
		protected Group$21$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$22$Consumer);
			acceptor.accept(assignment$23$Consumer);
			acceptor.accept(keyword$25$Consumer);
		}
	}

	protected class Keyword$22$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$22$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$22$Delimiter(), optional);
		}
	}

	protected class Assignment$23$Consumer extends AssignmentConsumer {
		
		protected Assignment$23$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$24$Consumer;
		}
	}

	protected class RuleCall$24$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$24$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(intConsumer, "refIndex", false, false, getElement(), getRuleCall$24$Delimiter(), optional);
		}
	}

	protected class Keyword$25$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$25$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$25$Delimiter(), optional);
		}
	}

	protected class Assignment$26$Consumer extends AssignmentConsumer {
		
		protected Assignment$26$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$27$Consumer;
		}
	}

	protected class RuleCall$27$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$27$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(createdObjectConsumer, "newObject", false, false, false, getElement(), optional);
		}
	}

	protected class Group$28$Consumer extends GroupConsumer {
		
		protected Group$28$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$29$Consumer);
			acceptor.accept(assignment$32$Consumer);
		}
	}

	protected class Assignment$29$Consumer extends AssignmentConsumer {
		
		protected Assignment$29$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$30$Consumer;
		}
	}

	protected class CrossReference$30$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$30$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "import", false, false, getElement(), getCrossReference$30$Delimiter(), optional);
		}
	}

	protected class Assignment$32$Consumer extends AssignmentConsumer {
		
		protected Assignment$32$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$33$Consumer;
		}
	}

	protected class RuleCall$33$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$33$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(fragmentConsumer, "impFrag", false, false, getElement(), getRuleCall$33$Delimiter(), optional);
		}
	}

	public EpatchTestLanguageListAssignmentValueConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		crossReference$15$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		crossReference$30$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		keyword$4$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$7$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$10$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$18$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$22$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$25$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$3$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$9$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$12$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$20$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$24$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$33$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public ListAssignmentValueElements getRule() {
		return rule;
	}
	
	public void setRule(ListAssignmentValueElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		assignment$2$Consumer = new Assignment$2$Consumer(rule.ele0AssignmentIndex());
		ruleCall$3$Consumer = new RuleCall$3$Consumer(rule.ele00TerminalRuleCallINT());
		keyword$4$Consumer = new Keyword$4$Consumer(rule.ele1KeywordColon());
		alternatives$5$Consumer = new Alternatives$5$Consumer(rule.ele2Alternatives());
		group$6$Consumer = new Group$6$Consumer(rule.ele20Group());
		keyword$7$Consumer = new Keyword$7$Consumer(rule.ele200KeywordLeftSquareBracket());
		assignment$8$Consumer = new Assignment$8$Consumer(rule.ele201AssignmentRefIndex());
		ruleCall$9$Consumer = new RuleCall$9$Consumer(rule.ele2010TerminalRuleCallINT());
		keyword$10$Consumer = new Keyword$10$Consumer(rule.ele202KeywordRightSquareBracket());
		assignment$11$Consumer = new Assignment$11$Consumer(rule.ele21AssignmentValue());
		ruleCall$12$Consumer = new RuleCall$12$Consumer(rule.ele210TerminalRuleCallSTRING());
		group$13$Consumer = new Group$13$Consumer(rule.ele22Group());
		assignment$14$Consumer = new Assignment$14$Consumer(rule.ele220AssignmentRefObject());
		crossReference$15$Consumer = new CrossReference$15$Consumer(rule.ele2200CrossReferenceEStringNamedObject());
		group$17$Consumer = new Group$17$Consumer(rule.ele221Group());
		keyword$18$Consumer = new Keyword$18$Consumer(rule.ele2210KeywordFullStop());
		assignment$19$Consumer = new Assignment$19$Consumer(rule.ele2211AssignmentRefFeature());
		ruleCall$20$Consumer = new RuleCall$20$Consumer(rule.ele22110TerminalRuleCallID());
		group$21$Consumer = new Group$21$Consumer(rule.ele2212Group());
		keyword$22$Consumer = new Keyword$22$Consumer(rule.ele22120KeywordLeftSquareBracket());
		assignment$23$Consumer = new Assignment$23$Consumer(rule.ele22121AssignmentRefIndex());
		ruleCall$24$Consumer = new RuleCall$24$Consumer(rule.ele221210TerminalRuleCallINT());
		keyword$25$Consumer = new Keyword$25$Consumer(rule.ele22122KeywordRightSquareBracket());
		assignment$26$Consumer = new Assignment$26$Consumer(rule.ele23AssignmentNewObject());
		ruleCall$27$Consumer = new RuleCall$27$Consumer(rule.ele230ParserRuleCallCreatedObject());
		group$28$Consumer = new Group$28$Consumer(rule.ele24Group());
		assignment$29$Consumer = new Assignment$29$Consumer(rule.ele240AssignmentImport());
		crossReference$30$Consumer = new CrossReference$30$Consumer(rule.ele2400CrossReferenceEStringImport());
		assignment$32$Consumer = new Assignment$32$Consumer(rule.ele241AssignmentImpFrag());
		ruleCall$33$Consumer = new RuleCall$33$Consumer(rule.ele2410TerminalRuleCallFRAGMENT());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setCreatedObjectConsumer(INonTerminalConsumer createdObjectConsumer) {
		this.createdObjectConsumer = createdObjectConsumer;
	}
	
	public void setFragmentConsumer(ITerminalConsumer fragmentConsumer) {
		this.fragmentConsumer = fragmentConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setIntConsumer(ITerminalConsumer intConsumer) {
		this.intConsumer = intConsumer;
	}
	
	public void setStringConsumer(ITerminalConsumer stringConsumer) {
		this.stringConsumer = stringConsumer;
	}
	
	public ISequenceMatcher getCrossReference$15$Delimiter() {
		return crossReference$15$Delimiter;
	}
	
	public void setCrossReference$15$Delimiter(ISequenceMatcher matcher) {
		crossReference$15$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getCrossReference$30$Delimiter() {
		return crossReference$30$Delimiter;
	}
	
	public void setCrossReference$30$Delimiter(ISequenceMatcher matcher) {
		crossReference$30$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ICharacterClass getKeyword$4$Delimiter() {
		return keyword$4$Delimiter;
	}
	
	public void setKeyword$4$Delimiter(ICharacterClass characterClass) {
		keyword$4$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$7$Delimiter() {
		return keyword$7$Delimiter;
	}
	
	public void setKeyword$7$Delimiter(ICharacterClass characterClass) {
		keyword$7$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$10$Delimiter() {
		return keyword$10$Delimiter;
	}
	
	public void setKeyword$10$Delimiter(ICharacterClass characterClass) {
		keyword$10$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$18$Delimiter() {
		return keyword$18$Delimiter;
	}
	
	public void setKeyword$18$Delimiter(ICharacterClass characterClass) {
		keyword$18$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$22$Delimiter() {
		return keyword$22$Delimiter;
	}
	
	public void setKeyword$22$Delimiter(ICharacterClass characterClass) {
		keyword$22$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$25$Delimiter() {
		return keyword$25$Delimiter;
	}
	
	public void setKeyword$25$Delimiter(ICharacterClass characterClass) {
		keyword$25$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$3$Delimiter() {
		return ruleCall$3$Delimiter;
	}
	
	public void setRuleCall$3$Delimiter(ISequenceMatcher matcher) {
		ruleCall$3$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$9$Delimiter() {
		return ruleCall$9$Delimiter;
	}
	
	public void setRuleCall$9$Delimiter(ISequenceMatcher matcher) {
		ruleCall$9$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$12$Delimiter() {
		return ruleCall$12$Delimiter;
	}
	
	public void setRuleCall$12$Delimiter(ISequenceMatcher matcher) {
		ruleCall$12$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$20$Delimiter() {
		return ruleCall$20$Delimiter;
	}
	
	public void setRuleCall$20$Delimiter(ISequenceMatcher matcher) {
		ruleCall$20$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$24$Delimiter() {
		return ruleCall$24$Delimiter;
	}
	
	public void setRuleCall$24$Delimiter(ISequenceMatcher matcher) {
		ruleCall$24$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$33$Delimiter() {
		return ruleCall$33$Delimiter;
	}
	
	public void setRuleCall$33$Delimiter(ISequenceMatcher matcher) {
		ruleCall$33$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
