/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.datatyperules.parseTreeConstruction;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;
import org.eclipse.xtext.parser.datatyperules.services.DatatypeRulesTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class DatatypeRulesTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private DatatypeRulesTestLanguageGrammarAccess grammarAccess;
	
	@Override
	protected Solution internalSerialize(EObject obj) {
		IInstanceDescription inst = getDescr(obj);
		Solution s;
		if(inst.isInstanceOf(grammarAccess.prCompositeModel().getRule().getType().getClassifier()) && (s = new CompositeModel_Assignment_model(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prModel().getRule().getType().getClassifier()) && (s = new Model_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		return null;
	}
	

/************ begin Rule CompositeModel ****************
 *
 * not supported
 *
 **/


// not supported
protected class CompositeModel_Assignment_model extends AssignmentToken  {
	
	public CompositeModel_Assignment_model(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prCompositeModel().eleAssignmentModel();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("model",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("model");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prModel().getRule().getType().getClassifier())) {
				Solution s = new Model_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

/************ end Rule CompositeModel ****************/


/************ begin Rule Model ****************
 *
 * not supported
 *
 **/


// not supported
protected class Model_Group extends GroupToken {
	
	public Model_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prModel().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Model_4_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Model_3_Group(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new Model_2_Group(s2.getCurrent(), s2.getPredecessor()).firstSolution();
		while(s3 != null) {
			Solution s4 = new Model_1_Group(s3.getCurrent(), s3.getPredecessor()).firstSolution();
		while(s4 != null) {
			Solution s5 = new Model_0_Assignment_id(s4.getCurrent(), s4.getPredecessor()).firstSolution();
			if(s5 != null) {
				last = s5.getPredecessor();
				return s5;
			} else {
				s4 = s4.getPredecessor().nextSolution(this,s4);
			}
		}
			s3 = s3.getPredecessor().nextSolution(this,s3);
		}
			s2 = s2.getPredecessor().nextSolution(this,s2);
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class Model_0_Assignment_id extends AssignmentToken  {
	
	public Model_0_Assignment_id(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prModel().ele0AssignmentId();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("id",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");

		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for datatype rule
			type = AssignmentType.PRC;
			element = grammarAccess.prModel().ele00ParserRuleCallNestedModelId();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class Model_1_Group extends GroupToken {
	
	public Model_1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prModel().ele1Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Model_1_1_Assignment_value(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Model_1_0_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class Model_1_0_Keyword extends KeywordToken  {
	
	public Model_1_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prModel().ele10KeywordColon();
	}	
}

// not supported
protected class Model_1_1_Assignment_value extends AssignmentToken  {
	
	public Model_1_1_Assignment_value(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prModel().ele11AssignmentValue();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("value",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");

		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for datatype rule
			type = AssignmentType.PRC;
			element = grammarAccess.prModel().ele110ParserRuleCallFraction();
			return new Solution(obj);
		}

		return null;
	}
}


// not supported
protected class Model_2_Group extends GroupToken {
	
	public Model_2_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prModel().ele2Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Model_2_1_Assignment_vector(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Model_2_0_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class Model_2_0_Keyword extends KeywordToken  {
	
	public Model_2_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prModel().ele20KeywordNumberSign();
	}	
}

// not supported
protected class Model_2_1_Assignment_vector extends AssignmentToken  {
	
	public Model_2_1_Assignment_vector(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prModel().ele21AssignmentVector();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("vector",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("vector");

		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for datatype rule
			type = AssignmentType.PRC;
			element = grammarAccess.prModel().ele210ParserRuleCallVector();
			return new Solution(obj);
		}

		return null;
	}
}


// not supported
protected class Model_3_Group extends GroupToken {
	
	public Model_3_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prModel().ele3Group();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Model_3_1_Assignment_dots(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Model_3_0_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class Model_3_0_Keyword extends KeywordToken  {
	
	public Model_3_0_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prModel().ele30KeywordPlusSign();
	}	
}

// not supported
protected class Model_3_1_Assignment_dots extends AssignmentToken  {
	
	public Model_3_1_Assignment_dots(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prModel().ele31AssignmentDots();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("dots",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dots");

		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for datatype rule
			type = AssignmentType.PRC;
			element = grammarAccess.prModel().ele310ParserRuleCallDots();
			return new Solution(obj);
		}

		return null;
	}
}


// not supported
protected class Model_4_Keyword extends KeywordToken  {
	
	public Model_4_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prModel().ele4KeywordSemicolon();
	}	
}


/************ end Rule Model ****************/






}
