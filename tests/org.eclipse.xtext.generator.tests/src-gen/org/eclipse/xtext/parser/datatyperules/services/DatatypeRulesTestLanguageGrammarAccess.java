/*
* generated by Xtext
*/

package org.eclipse.xtext.parser.datatyperules.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DatatypeRulesTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class CompositeModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeModel");
		private final Assignment cAssignmentModel = (Assignment)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallModel = (RuleCall)cAssignmentModel.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Assignment eleAssignmentModel() { return cAssignmentModel; }

		// not supported
		public RuleCall ele0ParserRuleCallModel() { return c0ParserRuleCallModel; }
	}

	public class ModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment c0AssignmentId = (Assignment)cGroup.eContents().get(0);
		private final RuleCall c00ParserRuleCallNestedModelId = (RuleCall)c0AssignmentId.eContents().get(0);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Keyword c10KeywordColon = (Keyword)c1Group.eContents().get(0);
		private final Assignment c11AssignmentValue = (Assignment)c1Group.eContents().get(1);
		private final RuleCall c110ParserRuleCallFraction = (RuleCall)c11AssignmentValue.eContents().get(0);
		private final Group c2Group = (Group)cGroup.eContents().get(2);
		private final Keyword c20KeywordNumberSign = (Keyword)c2Group.eContents().get(0);
		private final Assignment c21AssignmentVector = (Assignment)c2Group.eContents().get(1);
		private final RuleCall c210ParserRuleCallVector = (RuleCall)c21AssignmentVector.eContents().get(0);
		private final Group c3Group = (Group)cGroup.eContents().get(3);
		private final Keyword c30KeywordPlusSign = (Keyword)c3Group.eContents().get(0);
		private final Assignment c31AssignmentDots = (Assignment)c3Group.eContents().get(1);
		private final RuleCall c310ParserRuleCallDots = (RuleCall)c31AssignmentDots.eContents().get(0);
		private final Keyword c4KeywordSemicolon = (Keyword)cGroup.eContents().get(4);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Assignment ele0AssignmentId() { return c0AssignmentId; }

		// not supported
		public RuleCall ele00ParserRuleCallNestedModelId() { return c00ParserRuleCallNestedModelId; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Keyword ele10KeywordColon() { return c10KeywordColon; }

		// not supported
		public Assignment ele11AssignmentValue() { return c11AssignmentValue; }

		// not supported
		public RuleCall ele110ParserRuleCallFraction() { return c110ParserRuleCallFraction; }

		// not supported
		public Group ele2Group() { return c2Group; }

		// not supported
		public Keyword ele20KeywordNumberSign() { return c20KeywordNumberSign; }

		// not supported
		public Assignment ele21AssignmentVector() { return c21AssignmentVector; }

		// not supported
		public RuleCall ele210ParserRuleCallVector() { return c210ParserRuleCallVector; }

		// not supported
		public Group ele3Group() { return c3Group; }

		// not supported
		public Keyword ele30KeywordPlusSign() { return c30KeywordPlusSign; }

		// not supported
		public Assignment ele31AssignmentDots() { return c31AssignmentDots; }

		// not supported
		public RuleCall ele310ParserRuleCallDots() { return c310ParserRuleCallDots; }

		// not supported
		public Keyword ele4KeywordSemicolon() { return c4KeywordSemicolon; }
	}

	public class ModelIdElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall c0TerminalRuleCallID = (RuleCall)cGroup.eContents().get(0);
		private final Keyword c1KeywordFullStop = (Keyword)cGroup.eContents().get(1);
		private final RuleCall c2TerminalRuleCallID = (RuleCall)cGroup.eContents().get(2);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public RuleCall ele0TerminalRuleCallID() { return c0TerminalRuleCallID; }

		// not supported
		public Keyword ele1KeywordFullStop() { return c1KeywordFullStop; }

		// not supported
		public RuleCall ele2TerminalRuleCallID() { return c2TerminalRuleCallID; }
	}

	public class NestedModelIdElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NestedModelId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallModelId = (RuleCall)cGroup.eContents().get(0);
		private final Keyword c1KeywordFullStop = (Keyword)cGroup.eContents().get(1);
		private final RuleCall c2ParserRuleCallModelId = (RuleCall)cGroup.eContents().get(2);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public RuleCall ele0ParserRuleCallModelId() { return c0ParserRuleCallModelId; }

		// not supported
		public Keyword ele1KeywordFullStop() { return c1KeywordFullStop; }

		// not supported
		public RuleCall ele2ParserRuleCallModelId() { return c2ParserRuleCallModelId; }
	}

	public class FractionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall c0TerminalRuleCallINT = (RuleCall)cGroup.eContents().get(0);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Keyword c10KeywordSolidus = (Keyword)c1Group.eContents().get(0);
		private final RuleCall c11TerminalRuleCallINT = (RuleCall)c1Group.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public RuleCall ele0TerminalRuleCallINT() { return c0TerminalRuleCallINT; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Keyword ele10KeywordSolidus() { return c10KeywordSolidus; }

		// not supported
		public RuleCall ele11TerminalRuleCallINT() { return c11TerminalRuleCallINT; }
	}

	public class VectorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Vector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordLeftParenthesis = (Keyword)cGroup.eContents().get(0);
		private final RuleCall c1TerminalRuleCallINT = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall c2TerminalRuleCallINT = (RuleCall)cGroup.eContents().get(2);
		private final Keyword c3KeywordRightParenthesis = (Keyword)cGroup.eContents().get(3);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordLeftParenthesis() { return c0KeywordLeftParenthesis; }

		// not supported
		public RuleCall ele1TerminalRuleCallINT() { return c1TerminalRuleCallINT; }

		// not supported
		public RuleCall ele2TerminalRuleCallINT() { return c2TerminalRuleCallINT; }

		// not supported
		public Keyword ele3KeywordRightParenthesis() { return c3KeywordRightParenthesis; }
	}

	public class DotsElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dots");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group c0Group = (Group)cAlternatives.eContents().get(0);
		private final Keyword c00KeywordFullStop = (Keyword)c0Group.eContents().get(0);
		private final Keyword c01KeywordFullStop = (Keyword)c0Group.eContents().get(1);
		private final Keyword c1KeywordFullStopFullStop = (Keyword)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Keyword ele00KeywordFullStop() { return c00KeywordFullStop; }

		// not supported
		public Keyword ele01KeywordFullStop() { return c01KeywordFullStop; }

		// not supported
		public Keyword ele1KeywordFullStopFullStop() { return c1KeywordFullStopFullStop; }
	}
	
	private CompositeModelElements pCompositeModel;
	private ModelElements pModel;
	private ModelIdElements pModelId;
	private NestedModelIdElements pNestedModelId;
	private FractionElements pFraction;
	private VectorElements pVector;
	private DotsElements pDots;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess terminalsGrammarAccess;

	@Inject
	public DatatypeRulesTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess terminalsGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.terminalsGrammarAccess = terminalsGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return terminalsGrammarAccess;
	}

	
	// not supported
	public CompositeModelElements prCompositeModel() {
		return (pCompositeModel != null) ? pCompositeModel : (pCompositeModel = new CompositeModelElements());
	} 

	// not supported
	public ModelElements prModel() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	} 

	// not supported
	public ModelIdElements prModelId() {
		return (pModelId != null) ? pModelId : (pModelId = new ModelIdElements());
	} 

	// not supported
	public NestedModelIdElements prNestedModelId() {
		return (pNestedModelId != null) ? pNestedModelId : (pNestedModelId = new NestedModelIdElements());
	} 

	// not supported
	public FractionElements prFraction() {
		return (pFraction != null) ? pFraction : (pFraction = new FractionElements());
	} 

	// not supported
	public VectorElements prVector() {
		return (pVector != null) ? pVector : (pVector = new VectorElements());
	} 

	// not supported
	public DotsElements prDots() {
		return (pDots != null) ? pDots : (pDots = new DotsElements());
	} 

	// not supported
	public TerminalRule trID() {
		return terminalsGrammarAccess.trID();
	} 

	// not supported
	public TerminalRule trINT() {
		return terminalsGrammarAccess.trINT();
	} 

	// not supported
	public TerminalRule trSTRING() {
		return terminalsGrammarAccess.trSTRING();
	} 

	// not supported
	public TerminalRule trML_COMMENT() {
		return terminalsGrammarAccess.trML_COMMENT();
	} 

	// not supported
	public TerminalRule trSL_COMMENT() {
		return terminalsGrammarAccess.trSL_COMMENT();
	} 

	// not supported
	public TerminalRule trWS() {
		return terminalsGrammarAccess.trWS();
	} 

	// not supported
	public TerminalRule trANY_OTHER() {
		return terminalsGrammarAccess.trANY_OTHER();
	} 
}
