/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.services.XtextGrammarTestLanguageGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 

import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageGrammarConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageGrammarIDConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageAbstractRuleConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageAbstractMetamodelDeclarationConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageGeneratedMetamodelConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageReferencedMetamodelConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageLexerRuleConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageParserRuleConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageTerminalRuleConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageTypeRefConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageAlternativesConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageTerminalAlternativesConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageGroupConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageTerminalGroupConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageAbstractTokenConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageTerminalTokenConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageAssignmentConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageActionConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageAbstractTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageTerminalTokenElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageAbstractNegatedTokenConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageNegatedTokenConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageUpToTokenConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageWildcardConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageCharacterRangeConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageCrossReferenceConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageParenthesizedElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageParenthesizedTerminalElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageKeywordConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageRuleCallConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class XtextGrammarTestLanguageParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 

    private XtextGrammarTestLanguageGrammarConsumer grammarConsumer;
    private XtextGrammarTestLanguageGrammarIDConsumer grammarIdConsumer;
    private XtextGrammarTestLanguageAbstractRuleConsumer abstractRuleConsumer;
    private XtextGrammarTestLanguageAbstractMetamodelDeclarationConsumer abstractMetamodelDeclarationConsumer;
    private XtextGrammarTestLanguageGeneratedMetamodelConsumer generatedMetamodelConsumer;
    private XtextGrammarTestLanguageReferencedMetamodelConsumer referencedMetamodelConsumer;
    private XtextGrammarTestLanguageLexerRuleConsumer lexerRuleConsumer;
    private XtextGrammarTestLanguageParserRuleConsumer parserRuleConsumer;
    private XtextGrammarTestLanguageTerminalRuleConsumer terminalRuleConsumer;
    private XtextGrammarTestLanguageTypeRefConsumer typeRefConsumer;
    private XtextGrammarTestLanguageAlternativesConsumer alternativesConsumer;
    private XtextGrammarTestLanguageTerminalAlternativesConsumer terminalAlternativesConsumer;
    private XtextGrammarTestLanguageGroupConsumer groupConsumer;
    private XtextGrammarTestLanguageTerminalGroupConsumer terminalGroupConsumer;
    private XtextGrammarTestLanguageAbstractTokenConsumer abstractTokenConsumer;
    private XtextGrammarTestLanguageTerminalTokenConsumer terminalTokenConsumer;
    private XtextGrammarTestLanguageAssignmentConsumer assignmentConsumer;
    private XtextGrammarTestLanguageActionConsumer actionConsumer;
    private XtextGrammarTestLanguageAbstractTerminalConsumer abstractTerminalConsumer;
    private XtextGrammarTestLanguageTerminalTokenElementConsumer terminalTokenElementConsumer;
    private XtextGrammarTestLanguageAbstractNegatedTokenConsumer abstractNegatedTokenConsumer;
    private XtextGrammarTestLanguageNegatedTokenConsumer negatedTokenConsumer;
    private XtextGrammarTestLanguageUpToTokenConsumer upToTokenConsumer;
    private XtextGrammarTestLanguageWildcardConsumer wildcardConsumer;
    private XtextGrammarTestLanguageCharacterRangeConsumer characterRangeConsumer;
    private XtextGrammarTestLanguageCrossReferenceConsumer crossReferenceConsumer;
    private XtextGrammarTestLanguageParenthesizedElementConsumer parenthesizedElementConsumer;
    private XtextGrammarTestLanguageParenthesizedTerminalElementConsumer parenthesizedTerminalElementConsumer;
    private XtextGrammarTestLanguageKeywordConsumer keywordConsumer;
    private XtextGrammarTestLanguageRuleCallConsumer ruleCallConsumer;

	private XtextGrammarTestLanguageGrammarAccess grammarAccess;

	public XtextGrammarTestLanguageParserConfiguration(IInternalParserConfiguration configuration, XtextGrammarTestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public XtextGrammarTestLanguageGrammarConsumer getRootConsumer() {
		return grammarConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		grammarConsumer = new XtextGrammarTestLanguageGrammarConsumer(
    		this, null
    	);
		grammarIdConsumer = new XtextGrammarTestLanguageGrammarIDConsumer(
    		this, null
    	);
		abstractRuleConsumer = new XtextGrammarTestLanguageAbstractRuleConsumer(
    		this, null
    	);
		abstractMetamodelDeclarationConsumer = new XtextGrammarTestLanguageAbstractMetamodelDeclarationConsumer(
    		this, null
    	);
		generatedMetamodelConsumer = new XtextGrammarTestLanguageGeneratedMetamodelConsumer(
    		this, null
    	);
		referencedMetamodelConsumer = new XtextGrammarTestLanguageReferencedMetamodelConsumer(
    		this, null
    	);
		lexerRuleConsumer = new XtextGrammarTestLanguageLexerRuleConsumer(
    		this, null
    	);
		parserRuleConsumer = new XtextGrammarTestLanguageParserRuleConsumer(
    		this, null
    	);
		terminalRuleConsumer = new XtextGrammarTestLanguageTerminalRuleConsumer(
    		this, null
    	);
		typeRefConsumer = new XtextGrammarTestLanguageTypeRefConsumer(
    		this, null
    	);
		alternativesConsumer = new XtextGrammarTestLanguageAlternativesConsumer(
    		this, null
    	);
		terminalAlternativesConsumer = new XtextGrammarTestLanguageTerminalAlternativesConsumer(
    		this, null
    	);
		groupConsumer = new XtextGrammarTestLanguageGroupConsumer(
    		this, null
    	);
		terminalGroupConsumer = new XtextGrammarTestLanguageTerminalGroupConsumer(
    		this, null
    	);
		abstractTokenConsumer = new XtextGrammarTestLanguageAbstractTokenConsumer(
    		this, null
    	);
		terminalTokenConsumer = new XtextGrammarTestLanguageTerminalTokenConsumer(
    		this, null
    	);
		assignmentConsumer = new XtextGrammarTestLanguageAssignmentConsumer(
    		this, null
    	);
		actionConsumer = new XtextGrammarTestLanguageActionConsumer(
    		this, null
    	);
		abstractTerminalConsumer = new XtextGrammarTestLanguageAbstractTerminalConsumer(
    		this, null
    	);
		terminalTokenElementConsumer = new XtextGrammarTestLanguageTerminalTokenElementConsumer(
    		this, null
    	);
		abstractNegatedTokenConsumer = new XtextGrammarTestLanguageAbstractNegatedTokenConsumer(
    		this, null
    	);
		negatedTokenConsumer = new XtextGrammarTestLanguageNegatedTokenConsumer(
    		this, null
    	);
		upToTokenConsumer = new XtextGrammarTestLanguageUpToTokenConsumer(
    		this, null
    	);
		wildcardConsumer = new XtextGrammarTestLanguageWildcardConsumer(
    		this, null
    	);
		characterRangeConsumer = new XtextGrammarTestLanguageCharacterRangeConsumer(
    		this, null
    	);
		crossReferenceConsumer = new XtextGrammarTestLanguageCrossReferenceConsumer(
    		this, null
    	);
		parenthesizedElementConsumer = new XtextGrammarTestLanguageParenthesizedElementConsumer(
    		this, null
    	);
		parenthesizedTerminalElementConsumer = new XtextGrammarTestLanguageParenthesizedTerminalElementConsumer(
    		this, null
    	);
		keywordConsumer = new XtextGrammarTestLanguageKeywordConsumer(
    		this, null
    	);
		ruleCallConsumer = new XtextGrammarTestLanguageRuleCallConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getGrammarConsumer().setRule(grammarAccess.prGrammar());
		getGrammarIdConsumer().setRule(grammarAccess.prGrammarID());
		getAbstractRuleConsumer().setRule(grammarAccess.prAbstractRule());
		getAbstractMetamodelDeclarationConsumer().setRule(grammarAccess.prAbstractMetamodelDeclaration());
		getGeneratedMetamodelConsumer().setRule(grammarAccess.prGeneratedMetamodel());
		getReferencedMetamodelConsumer().setRule(grammarAccess.prReferencedMetamodel());
		getLexerRuleConsumer().setRule(grammarAccess.prLexerRule());
		getParserRuleConsumer().setRule(grammarAccess.prParserRule());
		getTerminalRuleConsumer().setRule(grammarAccess.prTerminalRule());
		getTypeRefConsumer().setRule(grammarAccess.prTypeRef());
		getAlternativesConsumer().setRule(grammarAccess.prAlternatives());
		getTerminalAlternativesConsumer().setRule(grammarAccess.prTerminalAlternatives());
		getGroupConsumer().setRule(grammarAccess.prGroup());
		getTerminalGroupConsumer().setRule(grammarAccess.prTerminalGroup());
		getAbstractTokenConsumer().setRule(grammarAccess.prAbstractToken());
		getTerminalTokenConsumer().setRule(grammarAccess.prTerminalToken());
		getAssignmentConsumer().setRule(grammarAccess.prAssignment());
		getActionConsumer().setRule(grammarAccess.prAction());
		getAbstractTerminalConsumer().setRule(grammarAccess.prAbstractTerminal());
		getTerminalTokenElementConsumer().setRule(grammarAccess.prTerminalTokenElement());
		getAbstractNegatedTokenConsumer().setRule(grammarAccess.prAbstractNegatedToken());
		getNegatedTokenConsumer().setRule(grammarAccess.prNegatedToken());
		getUpToTokenConsumer().setRule(grammarAccess.prUpToToken());
		getWildcardConsumer().setRule(grammarAccess.prWildcard());
		getCharacterRangeConsumer().setRule(grammarAccess.prCharacterRange());
		getCrossReferenceConsumer().setRule(grammarAccess.prCrossReference());
		getParenthesizedElementConsumer().setRule(grammarAccess.prParenthesizedElement());
		getParenthesizedTerminalElementConsumer().setRule(grammarAccess.prParenthesizedTerminalElement());
		getKeywordConsumer().setRule(grammarAccess.prKeyword());
		getRuleCallConsumer().setRule(grammarAccess.prRuleCall());
		getIdConsumer().setRule(grammarAccess.prID());
		getIntConsumer().setRule(grammarAccess.prINT());
		getStringConsumer().setRule(grammarAccess.prSTRING());
		getMlCommentConsumer().setRule(grammarAccess.prML_COMMENT());
		getSlCommentConsumer().setRule(grammarAccess.prSL_COMMENT());
		getWsConsumer().setRule(grammarAccess.prWS());
		getAnyOtherConsumer().setRule(grammarAccess.prANY_OTHER());


		getGrammarConsumer().setAbstractMetamodelDeclarationConsumer(getAbstractMetamodelDeclarationConsumer());
		getGrammarConsumer().setAbstractRuleConsumer(getAbstractRuleConsumer());
		getGrammarConsumer().setGrammarIdConsumer(getGrammarIdConsumer());
		getGrammarConsumer().setIdConsumer(getIdConsumer());

		getGrammarIdConsumer().setIdConsumer(getIdConsumer());

		getAbstractRuleConsumer().setLexerRuleConsumer(getLexerRuleConsumer());
		getAbstractRuleConsumer().setParserRuleConsumer(getParserRuleConsumer());
		getAbstractRuleConsumer().setTerminalRuleConsumer(getTerminalRuleConsumer());

		getAbstractMetamodelDeclarationConsumer().setGeneratedMetamodelConsumer(getGeneratedMetamodelConsumer());
		getAbstractMetamodelDeclarationConsumer().setReferencedMetamodelConsumer(getReferencedMetamodelConsumer());

		getGeneratedMetamodelConsumer().setIdConsumer(getIdConsumer());
		getGeneratedMetamodelConsumer().setStringConsumer(getStringConsumer());

		getReferencedMetamodelConsumer().setIdConsumer(getIdConsumer());
		getReferencedMetamodelConsumer().setStringConsumer(getStringConsumer());

		getLexerRuleConsumer().setIdConsumer(getIdConsumer());
		getLexerRuleConsumer().setStringConsumer(getStringConsumer());
		getLexerRuleConsumer().setTypeRefConsumer(getTypeRefConsumer());

		getParserRuleConsumer().setAlternativesConsumer(getAlternativesConsumer());
		getParserRuleConsumer().setIdConsumer(getIdConsumer());
		getParserRuleConsumer().setTypeRefConsumer(getTypeRefConsumer());

		getTerminalRuleConsumer().setIdConsumer(getIdConsumer());
		getTerminalRuleConsumer().setTerminalAlternativesConsumer(getTerminalAlternativesConsumer());
		getTerminalRuleConsumer().setTypeRefConsumer(getTypeRefConsumer());

		getTypeRefConsumer().setIdConsumer(getIdConsumer());

		getAlternativesConsumer().setGroupConsumer(getGroupConsumer());

		getTerminalAlternativesConsumer().setTerminalGroupConsumer(getTerminalGroupConsumer());

		getGroupConsumer().setAbstractTokenConsumer(getAbstractTokenConsumer());

		getTerminalGroupConsumer().setTerminalTokenConsumer(getTerminalTokenConsumer());

		getAbstractTokenConsumer().setAbstractTerminalConsumer(getAbstractTerminalConsumer());
		getAbstractTokenConsumer().setActionConsumer(getActionConsumer());
		getAbstractTokenConsumer().setAssignmentConsumer(getAssignmentConsumer());

		getTerminalTokenConsumer().setTerminalTokenElementConsumer(getTerminalTokenElementConsumer());

		getAssignmentConsumer().setAbstractTerminalConsumer(getAbstractTerminalConsumer());
		getAssignmentConsumer().setIdConsumer(getIdConsumer());

		getActionConsumer().setIdConsumer(getIdConsumer());
		getActionConsumer().setTypeRefConsumer(getTypeRefConsumer());

		getAbstractTerminalConsumer().setCrossReferenceConsumer(getCrossReferenceConsumer());
		getAbstractTerminalConsumer().setKeywordConsumer(getKeywordConsumer());
		getAbstractTerminalConsumer().setParenthesizedElementConsumer(getParenthesizedElementConsumer());
		getAbstractTerminalConsumer().setRuleCallConsumer(getRuleCallConsumer());

		getTerminalTokenElementConsumer().setAbstractNegatedTokenConsumer(getAbstractNegatedTokenConsumer());
		getTerminalTokenElementConsumer().setCharacterRangeConsumer(getCharacterRangeConsumer());
		getTerminalTokenElementConsumer().setParenthesizedTerminalElementConsumer(getParenthesizedTerminalElementConsumer());
		getTerminalTokenElementConsumer().setRuleCallConsumer(getRuleCallConsumer());
		getTerminalTokenElementConsumer().setWildcardConsumer(getWildcardConsumer());

		getAbstractNegatedTokenConsumer().setNegatedTokenConsumer(getNegatedTokenConsumer());
		getAbstractNegatedTokenConsumer().setUpToTokenConsumer(getUpToTokenConsumer());

		getNegatedTokenConsumer().setTerminalTokenElementConsumer(getTerminalTokenElementConsumer());

		getUpToTokenConsumer().setTerminalTokenElementConsumer(getTerminalTokenElementConsumer());

		getCharacterRangeConsumer().setKeywordConsumer(getKeywordConsumer());

		getCrossReferenceConsumer().setIdConsumer(getIdConsumer());
		getCrossReferenceConsumer().setTypeRefConsumer(getTypeRefConsumer());

		getParenthesizedElementConsumer().setAlternativesConsumer(getAlternativesConsumer());

		getParenthesizedTerminalElementConsumer().setTerminalAlternativesConsumer(getTerminalAlternativesConsumer());

		getKeywordConsumer().setStringConsumer(getStringConsumer());

		getRuleCallConsumer().setIdConsumer(getIdConsumer());

		getGrammarConsumer().setCrossReference$22$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.crossReference$25$Delimiter);
		getGrammarConsumer().setCrossReference$27$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.crossReference$25$Delimiter);
		getGrammarConsumer().setKeyword$10$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$9$Delimiter);
		getGrammarConsumer().setKeyword$18$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$9$Delimiter);
		getGrammarConsumer().setKeyword$19$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getGrammarConsumer().setKeyword$25$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getGrammarConsumer().setKeyword$29$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getGrammarConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$9$Delimiter);
		getGrammarIdConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getGrammarIdConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.crossReference$25$Delimiter);
		getGrammarIdConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.crossReference$25$Delimiter);
		getGeneratedMetamodelConsumer().setCrossReference$8$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.crossReference$65$Delimiter);
		getGeneratedMetamodelConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$9$Delimiter);
		getGeneratedMetamodelConsumer().setKeyword$11$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$9$Delimiter);
		getGeneratedMetamodelConsumer().setRuleCall$6$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.crossReference$25$Delimiter);
		getGeneratedMetamodelConsumer().setRuleCall$13$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.crossReference$25$Delimiter);
		getReferencedMetamodelConsumer().setCrossReference$5$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.crossReference$65$Delimiter);
		getReferencedMetamodelConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$9$Delimiter);
		getReferencedMetamodelConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$9$Delimiter);
		getReferencedMetamodelConsumer().setRuleCall$10$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.crossReference$25$Delimiter);
		getLexerRuleConsumer().setKeyword$18$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getLexerRuleConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$9$Delimiter);
		getLexerRuleConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$9$Delimiter);
		getLexerRuleConsumer().setKeyword$12$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$9$Delimiter);
		getLexerRuleConsumer().setKeyword$15$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getLexerRuleConsumer().setRuleCall$17$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.crossReference$65$Delimiter);
		getLexerRuleConsumer().setRuleCall$10$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.crossReference$25$Delimiter);
		getParserRuleConsumer().setCrossReference$20$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.crossReference$25$Delimiter);
		getParserRuleConsumer().setCrossReference$25$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.crossReference$25$Delimiter);
		getParserRuleConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$9$Delimiter);
		getParserRuleConsumer().setKeyword$16$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$9$Delimiter);
		getParserRuleConsumer().setKeyword$17$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getParserRuleConsumer().setKeyword$23$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getParserRuleConsumer().setKeyword$27$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getParserRuleConsumer().setKeyword$28$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getParserRuleConsumer().setKeyword$31$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getParserRuleConsumer().setRuleCall$7$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.crossReference$25$Delimiter);
		getTerminalRuleConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$9$Delimiter);
		getTerminalRuleConsumer().setKeyword$11$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$9$Delimiter);
		getTerminalRuleConsumer().setKeyword$14$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getTerminalRuleConsumer().setKeyword$17$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getTerminalRuleConsumer().setRuleCall$9$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.crossReference$25$Delimiter);
		getTypeRefConsumer().setCrossReference$4$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.crossReference$25$Delimiter);
		getTypeRefConsumer().setCrossReference$8$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.crossReference$25$Delimiter);
		getTypeRefConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getAlternativesConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getTerminalAlternativesConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getAbstractTokenConsumer().setKeyword$10$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getAbstractTokenConsumer().setKeyword$11$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getAbstractTokenConsumer().setKeyword$12$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getTerminalTokenConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getTerminalTokenConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getTerminalTokenConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getAssignmentConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getAssignmentConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getAssignmentConsumer().setKeyword$10$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getAssignmentConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.crossReference$25$Delimiter);
		getActionConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getActionConsumer().setKeyword$10$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$9$Delimiter);
		getActionConsumer().setKeyword$11$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getActionConsumer().setKeyword$14$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getActionConsumer().setKeyword$19$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getActionConsumer().setKeyword$20$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getActionConsumer().setKeyword$21$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$9$Delimiter);
		getActionConsumer().setKeyword$22$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getActionConsumer().setRuleCall$16$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.crossReference$25$Delimiter);
		getNegatedTokenConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getUpToTokenConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getWildcardConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getCharacterRangeConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getCrossReferenceConsumer().setCrossReference$10$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.crossReference$25$Delimiter);
		getCrossReferenceConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getCrossReferenceConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getCrossReferenceConsumer().setKeyword$12$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getParenthesizedElementConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getParenthesizedElementConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getParenthesizedTerminalElementConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getParenthesizedTerminalElementConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.keyword$22$Delimiter);
		getKeywordConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.crossReference$65$Delimiter);
		getRuleCallConsumer().setCrossReference$2$Delimiter(org.eclipse.xtext.parser.packrat.XtextGrammarTestLanguageDelimiters.crossReference$25$Delimiter);
	}
	
	// TODO collect superGrammars transitive
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public XtextGrammarTestLanguageGrammarConsumer getGrammarConsumer() {
    	return grammarConsumer;
    }

    public XtextGrammarTestLanguageGrammarIDConsumer getGrammarIdConsumer() {
    	return grammarIdConsumer;
    }

    public XtextGrammarTestLanguageAbstractRuleConsumer getAbstractRuleConsumer() {
    	return abstractRuleConsumer;
    }

    public XtextGrammarTestLanguageAbstractMetamodelDeclarationConsumer getAbstractMetamodelDeclarationConsumer() {
    	return abstractMetamodelDeclarationConsumer;
    }

    public XtextGrammarTestLanguageGeneratedMetamodelConsumer getGeneratedMetamodelConsumer() {
    	return generatedMetamodelConsumer;
    }

    public XtextGrammarTestLanguageReferencedMetamodelConsumer getReferencedMetamodelConsumer() {
    	return referencedMetamodelConsumer;
    }

    public XtextGrammarTestLanguageLexerRuleConsumer getLexerRuleConsumer() {
    	return lexerRuleConsumer;
    }

    public XtextGrammarTestLanguageParserRuleConsumer getParserRuleConsumer() {
    	return parserRuleConsumer;
    }

    public XtextGrammarTestLanguageTerminalRuleConsumer getTerminalRuleConsumer() {
    	return terminalRuleConsumer;
    }

    public XtextGrammarTestLanguageTypeRefConsumer getTypeRefConsumer() {
    	return typeRefConsumer;
    }

    public XtextGrammarTestLanguageAlternativesConsumer getAlternativesConsumer() {
    	return alternativesConsumer;
    }

    public XtextGrammarTestLanguageTerminalAlternativesConsumer getTerminalAlternativesConsumer() {
    	return terminalAlternativesConsumer;
    }

    public XtextGrammarTestLanguageGroupConsumer getGroupConsumer() {
    	return groupConsumer;
    }

    public XtextGrammarTestLanguageTerminalGroupConsumer getTerminalGroupConsumer() {
    	return terminalGroupConsumer;
    }

    public XtextGrammarTestLanguageAbstractTokenConsumer getAbstractTokenConsumer() {
    	return abstractTokenConsumer;
    }

    public XtextGrammarTestLanguageTerminalTokenConsumer getTerminalTokenConsumer() {
    	return terminalTokenConsumer;
    }

    public XtextGrammarTestLanguageAssignmentConsumer getAssignmentConsumer() {
    	return assignmentConsumer;
    }

    public XtextGrammarTestLanguageActionConsumer getActionConsumer() {
    	return actionConsumer;
    }

    public XtextGrammarTestLanguageAbstractTerminalConsumer getAbstractTerminalConsumer() {
    	return abstractTerminalConsumer;
    }

    public XtextGrammarTestLanguageTerminalTokenElementConsumer getTerminalTokenElementConsumer() {
    	return terminalTokenElementConsumer;
    }

    public XtextGrammarTestLanguageAbstractNegatedTokenConsumer getAbstractNegatedTokenConsumer() {
    	return abstractNegatedTokenConsumer;
    }

    public XtextGrammarTestLanguageNegatedTokenConsumer getNegatedTokenConsumer() {
    	return negatedTokenConsumer;
    }

    public XtextGrammarTestLanguageUpToTokenConsumer getUpToTokenConsumer() {
    	return upToTokenConsumer;
    }

    public XtextGrammarTestLanguageWildcardConsumer getWildcardConsumer() {
    	return wildcardConsumer;
    }

    public XtextGrammarTestLanguageCharacterRangeConsumer getCharacterRangeConsumer() {
    	return characterRangeConsumer;
    }

    public XtextGrammarTestLanguageCrossReferenceConsumer getCrossReferenceConsumer() {
    	return crossReferenceConsumer;
    }

    public XtextGrammarTestLanguageParenthesizedElementConsumer getParenthesizedElementConsumer() {
    	return parenthesizedElementConsumer;
    }

    public XtextGrammarTestLanguageParenthesizedTerminalElementConsumer getParenthesizedTerminalElementConsumer() {
    	return parenthesizedTerminalElementConsumer;
    }

    public XtextGrammarTestLanguageKeywordConsumer getKeywordConsumer() {
    	return keywordConsumer;
    }

    public XtextGrammarTestLanguageRuleCallConsumer getRuleCallConsumer() {
    	return ruleCallConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
