/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.services.XtextGrammarTestLanguageGrammarAccess.GrammarElements;

public final class XtextGrammarTestLanguageGrammarConsumer extends NonTerminalConsumer {

	private GrammarElements rule;	

	private INonTerminalConsumer abstractMetamodelDeclarationConsumer;

	private INonTerminalConsumer abstractRuleConsumer;

	private INonTerminalConsumer grammarIdConsumer;

	private ITerminalConsumer idConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer keyword$6$Consumer;

	private IElementConsumer assignment$7$Consumer;

	private IElementConsumer ruleCall$8$Consumer;

	private IElementConsumer group$9$Consumer;

	private IElementConsumer keyword$11$Consumer;

	private IElementConsumer assignment$12$Consumer;

	private IElementConsumer crossReference$13$Consumer;

	private IElementConsumer group$15$Consumer;

	private IElementConsumer keyword$16$Consumer;

	private IElementConsumer assignment$17$Consumer;

	private IElementConsumer crossReference$18$Consumer;

	private IElementConsumer group$20$Consumer;

	private IElementConsumer assignment$23$Consumer;

	private IElementConsumer keyword$24$Consumer;

	private IElementConsumer keyword$25$Consumer;

	private IElementConsumer group$26$Consumer;

	private IElementConsumer assignment$27$Consumer;

	private IElementConsumer crossReference$28$Consumer;

	private IElementConsumer group$30$Consumer;

	private IElementConsumer keyword$31$Consumer;

	private IElementConsumer assignment$32$Consumer;

	private IElementConsumer crossReference$33$Consumer;

	private IElementConsumer keyword$35$Consumer;

	private IElementConsumer assignment$36$Consumer;

	private IElementConsumer ruleCall$37$Consumer;

	private IElementConsumer assignment$38$Consumer;

	private IElementConsumer ruleCall$39$Consumer;

	private ISequenceMatcher crossReference$28$Delimiter;

	private ISequenceMatcher crossReference$33$Delimiter;

	private ICharacterClass keyword$11$Delimiter;

	private ICharacterClass keyword$16$Delimiter;

	private ICharacterClass keyword$24$Delimiter;

	private ICharacterClass keyword$25$Delimiter;

	private ICharacterClass keyword$31$Delimiter;

	private ICharacterClass keyword$35$Delimiter;

	private ICharacterClass keyword$6$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$6$Consumer);
			acceptor.accept(assignment$7$Consumer);
			acceptor.accept(group$9$Consumer);
			acceptor.accept(group$20$Consumer);
			acceptor.accept(assignment$36$Consumer);
			acceptor.accept(assignment$38$Consumer);
		}
	}

	protected class Keyword$6$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$6$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$6$Delimiter(), optional);
		}
	}

	protected class Assignment$7$Consumer extends AssignmentConsumer {
		
		protected Assignment$7$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$8$Consumer;
		}
	}

	protected class RuleCall$8$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$8$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(grammarIdConsumer, "name", false, true, false, getElement(), optional);
		}
	}

	protected class Group$9$Consumer extends OptionalGroupConsumer {
		
		protected Group$9$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$11$Consumer);
			acceptor.accept(assignment$12$Consumer);
			acceptor.accept(group$15$Consumer);
		}
	}

	protected class Keyword$11$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$11$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$11$Delimiter(), optional);
		}
	}

	protected class Assignment$12$Consumer extends AssignmentConsumer {
		
		protected Assignment$12$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$13$Consumer;
		}
	}

	protected class CrossReference$13$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$13$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(grammarIdConsumer, "usedGrammars", true, true, false, getElement(), optional);
		}
	}

	protected class Group$15$Consumer extends LoopGroupConsumer {
		
		protected Group$15$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$16$Consumer);
			acceptor.accept(assignment$17$Consumer);
		}
	}

	protected class Keyword$16$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$16$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$16$Delimiter(), optional);
		}
	}

	protected class Assignment$17$Consumer extends AssignmentConsumer {
		
		protected Assignment$17$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$18$Consumer;
		}
	}

	protected class CrossReference$18$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$18$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(grammarIdConsumer, "usedGrammars", true, true, false, getElement(), optional);
		}
	}

	protected class Group$20$Consumer extends OptionalGroupConsumer {
		
		protected Group$20$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$23$Consumer);
			acceptor.accept(keyword$25$Consumer);
			acceptor.accept(group$26$Consumer);
			acceptor.accept(keyword$35$Consumer);
		}
	}

	protected class Assignment$23$Consumer extends AssignmentConsumer {
		
		protected Assignment$23$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$24$Consumer;
		}
	}

	protected class Keyword$24$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$24$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "definesHiddenTokens", false, true, getKeyword$24$Delimiter(), optional);
		}
	}

	protected class Keyword$25$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$25$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$25$Delimiter(), optional);
		}
	}

	protected class Group$26$Consumer extends OptionalGroupConsumer {
		
		protected Group$26$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$27$Consumer);
			acceptor.accept(group$30$Consumer);
		}
	}

	protected class Assignment$27$Consumer extends AssignmentConsumer {
		
		protected Assignment$27$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$28$Consumer;
		}
	}

	protected class CrossReference$28$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$28$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "hiddenTokens", true, false, getElement(), getCrossReference$28$Delimiter(), optional);
		}
	}

	protected class Group$30$Consumer extends LoopGroupConsumer {
		
		protected Group$30$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$31$Consumer);
			acceptor.accept(assignment$32$Consumer);
		}
	}

	protected class Keyword$31$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$31$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$31$Delimiter(), optional);
		}
	}

	protected class Assignment$32$Consumer extends AssignmentConsumer {
		
		protected Assignment$32$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$33$Consumer;
		}
	}

	protected class CrossReference$33$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$33$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "hiddenTokens", true, false, getElement(), getCrossReference$33$Delimiter(), optional);
		}
	}

	protected class Keyword$35$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$35$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$35$Delimiter(), optional);
		}
	}

	protected class Assignment$36$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$36$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$37$Consumer;
		}
	}

	protected class RuleCall$37$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$37$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(abstractMetamodelDeclarationConsumer, "metamodelDeclarations", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$38$Consumer extends MandatoryLoopAssignmentConsumer {
		
		protected Assignment$38$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$39$Consumer;
		}
	}

	protected class RuleCall$39$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$39$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(abstractRuleConsumer, "rules", true, false, false, getElement(), optional);
		}
	}

	public XtextGrammarTestLanguageGrammarConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		crossReference$28$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		crossReference$33$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		keyword$11$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$16$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$24$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$25$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$31$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$35$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$6$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public GrammarElements getRule() {
		return rule;
	}
	
	public void setRule(GrammarElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.ele00000KeywordGrammar());
		assignment$7$Consumer = new Assignment$7$Consumer(rule.ele00001AssignmentName());
		ruleCall$8$Consumer = new RuleCall$8$Consumer(rule.ele000010ParserRuleCallGrammarID());
		group$9$Consumer = new Group$9$Consumer(rule.ele0001Group());
		keyword$11$Consumer = new Keyword$11$Consumer(rule.ele000100KeywordWith());
		assignment$12$Consumer = new Assignment$12$Consumer(rule.ele000101AssignmentUsedGrammars());
		crossReference$13$Consumer = new CrossReference$13$Consumer(rule.ele0001010CrossReferenceEStringGrammar());
		group$15$Consumer = new Group$15$Consumer(rule.ele00011Group());
		keyword$16$Consumer = new Keyword$16$Consumer(rule.ele000110KeywordComma());
		assignment$17$Consumer = new Assignment$17$Consumer(rule.ele000111AssignmentUsedGrammars());
		crossReference$18$Consumer = new CrossReference$18$Consumer(rule.ele0001110CrossReferenceEStringGrammar());
		group$20$Consumer = new Group$20$Consumer(rule.ele001Group());
		assignment$23$Consumer = new Assignment$23$Consumer(rule.ele001000AssignmentDefinesHiddenTokens());
		keyword$24$Consumer = new Keyword$24$Consumer(rule.ele0010000KeywordHidden());
		keyword$25$Consumer = new Keyword$25$Consumer(rule.ele001001KeywordLeftParenthesis());
		group$26$Consumer = new Group$26$Consumer(rule.ele00101Group());
		assignment$27$Consumer = new Assignment$27$Consumer(rule.ele001010AssignmentHiddenTokens());
		crossReference$28$Consumer = new CrossReference$28$Consumer(rule.ele0010100CrossReferenceEStringAbstractRule());
		group$30$Consumer = new Group$30$Consumer(rule.ele001011Group());
		keyword$31$Consumer = new Keyword$31$Consumer(rule.ele0010110KeywordComma());
		assignment$32$Consumer = new Assignment$32$Consumer(rule.ele0010111AssignmentHiddenTokens());
		crossReference$33$Consumer = new CrossReference$33$Consumer(rule.ele00101110CrossReferenceEStringAbstractRule());
		keyword$35$Consumer = new Keyword$35$Consumer(rule.ele0011KeywordRightParenthesis());
		assignment$36$Consumer = new Assignment$36$Consumer(rule.ele01AssignmentMetamodelDeclarations());
		ruleCall$37$Consumer = new RuleCall$37$Consumer(rule.ele010ParserRuleCallAbstractMetamodelDeclaration());
		assignment$38$Consumer = new Assignment$38$Consumer(rule.ele1AssignmentRules());
		ruleCall$39$Consumer = new RuleCall$39$Consumer(rule.ele10ParserRuleCallAbstractRule());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setAbstractMetamodelDeclarationConsumer(INonTerminalConsumer abstractMetamodelDeclarationConsumer) {
		this.abstractMetamodelDeclarationConsumer = abstractMetamodelDeclarationConsumer;
	}
	
	public void setAbstractRuleConsumer(INonTerminalConsumer abstractRuleConsumer) {
		this.abstractRuleConsumer = abstractRuleConsumer;
	}
	
	public void setGrammarIdConsumer(INonTerminalConsumer grammarIdConsumer) {
		this.grammarIdConsumer = grammarIdConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public ISequenceMatcher getCrossReference$28$Delimiter() {
		return crossReference$28$Delimiter;
	}
	
	public void setCrossReference$28$Delimiter(ISequenceMatcher matcher) {
		crossReference$28$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getCrossReference$33$Delimiter() {
		return crossReference$33$Delimiter;
	}
	
	public void setCrossReference$33$Delimiter(ISequenceMatcher matcher) {
		crossReference$33$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ICharacterClass getKeyword$11$Delimiter() {
		return keyword$11$Delimiter;
	}
	
	public void setKeyword$11$Delimiter(ICharacterClass characterClass) {
		keyword$11$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$16$Delimiter() {
		return keyword$16$Delimiter;
	}
	
	public void setKeyword$16$Delimiter(ICharacterClass characterClass) {
		keyword$16$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$24$Delimiter() {
		return keyword$24$Delimiter;
	}
	
	public void setKeyword$24$Delimiter(ICharacterClass characterClass) {
		keyword$24$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$25$Delimiter() {
		return keyword$25$Delimiter;
	}
	
	public void setKeyword$25$Delimiter(ICharacterClass characterClass) {
		keyword$25$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$31$Delimiter() {
		return keyword$31$Delimiter;
	}
	
	public void setKeyword$31$Delimiter(ICharacterClass characterClass) {
		keyword$31$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$35$Delimiter() {
		return keyword$35$Delimiter;
	}
	
	public void setKeyword$35$Delimiter(ICharacterClass characterClass) {
		keyword$35$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$6$Delimiter() {
		return keyword$6$Delimiter;
	}
	
	public void setKeyword$6$Delimiter(ICharacterClass characterClass) {
		keyword$6$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
