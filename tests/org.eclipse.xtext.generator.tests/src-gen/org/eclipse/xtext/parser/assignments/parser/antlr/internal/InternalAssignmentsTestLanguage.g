/*
* generated by Xtext
*/
grammar InternalAssignmentsTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.parser.assignments.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parser.assignments.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.parser.assignments.services.AssignmentsTestLanguageGrammarAccess;

}

@parser::members {
 
 	private AssignmentsTestLanguageGrammarAccess grammarAccess;
 	
    public InternalAssignmentsTestLanguageParser(TokenStream input, IAstFactory factory, AssignmentsTestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/xtext/parser/assignments/parser/antlr/internal/InternalAssignmentsTestLanguage.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('simple' 
    {
        createLeafNode(grammarAccess.getModelAccess().getSimpleKeyword_0_0(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getSingleSingleValueParserRuleCall_0_1_0_0(), currentNode); 
	    }
	    lv_single_1=ruleSingleValue 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "single", lv_single_1, "SingleValue", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getMultiMultiValueParserRuleCall_0_1_1_0(), currentNode); 
	    }
	    lv_multi_2=ruleMultiValue 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "multi", lv_multi_2, "MultiValue", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getSingleSingleDatatypeParserRuleCall_0_1_2_0(), currentNode); 
	    }
	    lv_single_3=ruleSingleDatatype 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "single", lv_single_3, "SingleDatatype", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getMultiMultiDatatypeParserRuleCall_0_1_3_0(), currentNode); 
	    }
	    lv_multi_4=ruleMultiDatatype 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "multi", lv_multi_4, "MultiDatatype", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)))
    |('complex' 
    {
        createLeafNode(grammarAccess.getModelAccess().getComplexKeyword_1_0(), null); 
    }
(	
	
	    lv_object_6=(	{ 
        currentNode=createCompositeNode(grammarAccess.getModelAccess().getObjectSingleValueParserRuleCall_1_1_0_0(), currentNode); 
    }
	ruleSingleValue	{ 
        currentNode = currentNode.getParent();
    }

    |	{ 
        currentNode=createCompositeNode(grammarAccess.getModelAccess().getObjectMultiValueParserRuleCall_1_1_0_1(), currentNode); 
    }
	ruleMultiValue	{ 
        currentNode = currentNode.getParent();
    }

    |	{ 
        currentNode=createCompositeNode(grammarAccess.getModelAccess().getObjectSingleDatatypeParserRuleCall_1_1_0_2(), currentNode); 
    }
	ruleSingleDatatype	{ 
        currentNode = currentNode.getParent();
    }

    |	{ 
        currentNode=createCompositeNode(grammarAccess.getModelAccess().getObjectMultiDatatypeParserRuleCall_1_1_0_3(), currentNode); 
    }
	ruleMultiDatatype	{ 
        currentNode = currentNode.getParent();
    }
)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "object", lv_object_6, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)));





// Entry rule entryRuleSingleValue
entryRuleSingleValue returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSingleValueRule(), currentNode); }
	 iv_ruleSingleValue=ruleSingleValue 
	 { $current=$iv_ruleSingleValue.current; } 
	 EOF 
;

// Rule SingleValue
ruleSingleValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('id' 
    {
        createLeafNode(grammarAccess.getSingleValueAccess().getIdKeyword_0_0(), null); 
    }
(	
	
	    lv_value_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getSingleValueAccess().getValueIDTerminalRuleCall_0_1_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSingleValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))
    |('alternative' 
    {
        createLeafNode(grammarAccess.getSingleValueAccess().getAlternativeKeyword_1_0(), null); 
    }
(	
	
	    lv_value_3=(	RULE_ID
	{
		createLeafNode(grammarAccess.getSingleValueAccess().getValueIDTerminalRuleCall_1_1_0_0(), "value"); 
	}

    |	RULE_STRING
	{
		createLeafNode(grammarAccess.getSingleValueAccess().getValueSTRINGTerminalRuleCall_1_1_0_1(), "value"); 
	}
)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSingleValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))
    |('string' 
    {
        createLeafNode(grammarAccess.getSingleValueAccess().getStringKeyword_2_0(), null); 
    }
(	
	
	    lv_value_5=	RULE_STRING
	{
		createLeafNode(grammarAccess.getSingleValueAccess().getValueSTRINGTerminalRuleCall_2_1_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSingleValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_5, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)));





// Entry rule entryRuleMultiValue
entryRuleMultiValue returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getMultiValueRule(), currentNode); }
	 iv_ruleMultiValue=ruleMultiValue 
	 { $current=$iv_ruleMultiValue.current; } 
	 EOF 
;

// Rule MultiValue
ruleMultiValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('ids' 
    {
        createLeafNode(grammarAccess.getMultiValueAccess().getIdsKeyword_0_0(), null); 
    }
(	
	
	    lv_value_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getMultiValueAccess().getValueIDTerminalRuleCall_0_1_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "value", lv_value_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))
    |('alternatives' 
    {
        createLeafNode(grammarAccess.getMultiValueAccess().getAlternativesKeyword_1_0(), null); 
    }
(	
	
	    lv_value_3=(	RULE_ID
	{
		createLeafNode(grammarAccess.getMultiValueAccess().getValueIDTerminalRuleCall_1_1_0_0(), "value"); 
	}

    |	RULE_STRING
	{
		createLeafNode(grammarAccess.getMultiValueAccess().getValueSTRINGTerminalRuleCall_1_1_0_1(), "value"); 
	}
)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "value", lv_value_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))
    |('strings' 
    {
        createLeafNode(grammarAccess.getMultiValueAccess().getStringsKeyword_2_0(), null); 
    }
(	
	
	    lv_value_5=	RULE_STRING
	{
		createLeafNode(grammarAccess.getMultiValueAccess().getValueSTRINGTerminalRuleCall_2_1_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "value", lv_value_5, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)));





// Entry rule entryRuleSingleDatatype
entryRuleSingleDatatype returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSingleDatatypeRule(), currentNode); }
	 iv_ruleSingleDatatype=ruleSingleDatatype 
	 { $current=$iv_ruleSingleDatatype.current; } 
	 EOF 
;

// Rule SingleDatatype
ruleSingleDatatype returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('datatypeid' 
    {
        createLeafNode(grammarAccess.getSingleDatatypeAccess().getDatatypeidKeyword_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSingleDatatypeAccess().getValueIdDatatypeParserRuleCall_0_1_0(), currentNode); 
	    }
	    lv_value_1=ruleIdDatatype 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSingleDatatypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1, "IdDatatype", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |('datatypealternative' 
    {
        createLeafNode(grammarAccess.getSingleDatatypeAccess().getDatatypealternativeKeyword_1_0(), null); 
    }
(	
	
	    lv_value_3=(	{ 
        currentNode=createCompositeNode(grammarAccess.getSingleDatatypeAccess().getValueIdDatatypeParserRuleCall_1_1_0_0(), currentNode); 
    }
	ruleIdDatatype	{ 
        currentNode = currentNode.getParent();
    }

    |	{ 
        currentNode=createCompositeNode(grammarAccess.getSingleDatatypeAccess().getValueStringDatatypeParserRuleCall_1_1_0_1(), currentNode); 
    }
	ruleStringDatatype	{ 
        currentNode = currentNode.getParent();
    }
)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSingleDatatypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))
    |('datatypestring' 
    {
        createLeafNode(grammarAccess.getSingleDatatypeAccess().getDatatypestringKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSingleDatatypeAccess().getValueStringDatatypeParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_value_5=ruleStringDatatype 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSingleDatatypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_5, "StringDatatype", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)));





// Entry rule entryRuleMultiDatatype
entryRuleMultiDatatype returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getMultiDatatypeRule(), currentNode); }
	 iv_ruleMultiDatatype=ruleMultiDatatype 
	 { $current=$iv_ruleMultiDatatype.current; } 
	 EOF 
;

// Rule MultiDatatype
ruleMultiDatatype returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('datatypeids' 
    {
        createLeafNode(grammarAccess.getMultiDatatypeAccess().getDatatypeidsKeyword_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getMultiDatatypeAccess().getValueIdDatatypeParserRuleCall_0_1_0(), currentNode); 
	    }
	    lv_value_1=ruleIdDatatype 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiDatatypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "value", lv_value_1, "IdDatatype", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |('datatypealternatives' 
    {
        createLeafNode(grammarAccess.getMultiDatatypeAccess().getDatatypealternativesKeyword_1_0(), null); 
    }
(	
	
	    lv_value_3=(	{ 
        currentNode=createCompositeNode(grammarAccess.getMultiDatatypeAccess().getValueIdDatatypeParserRuleCall_1_1_0_0(), currentNode); 
    }
	ruleIdDatatype	{ 
        currentNode = currentNode.getParent();
    }

    |	{ 
        currentNode=createCompositeNode(grammarAccess.getMultiDatatypeAccess().getValueStringDatatypeParserRuleCall_1_1_0_1(), currentNode); 
    }
	ruleStringDatatype	{ 
        currentNode = currentNode.getParent();
    }
)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiDatatypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "value", lv_value_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))
    |('datatypestrings' 
    {
        createLeafNode(grammarAccess.getMultiDatatypeAccess().getDatatypestringsKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getMultiDatatypeAccess().getValueStringDatatypeParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_value_5=ruleStringDatatype 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiDatatypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "value", lv_value_5, "StringDatatype", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)));





// Entry rule entryRuleIdDatatype
entryRuleIdDatatype returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIdDatatypeRule(), currentNode); } 
	 iv_ruleIdDatatype=ruleIdDatatype 
	 { $current=$iv_ruleIdDatatype.current.getText(); }  
	 EOF 
;

// Rule IdDatatype
ruleIdDatatype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getIdDatatypeAccess().getIDTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleStringDatatype
entryRuleStringDatatype returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getStringDatatypeRule(), currentNode); } 
	 iv_ruleStringDatatype=ruleStringDatatype 
	 { $current=$iv_ruleStringDatatype.current.getText(); }  
	 EOF 
;

// Rule StringDatatype
ruleStringDatatype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getStringDatatypeAccess().getSTRINGTerminalRuleCall(), null); 
    }

    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


