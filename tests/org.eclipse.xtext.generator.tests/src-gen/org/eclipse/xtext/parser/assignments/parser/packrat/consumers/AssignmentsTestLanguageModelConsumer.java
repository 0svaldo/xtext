/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.assignments.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;

import org.eclipse.xtext.parser.assignments.services.AssignmentsTestLanguageGrammarAccess.ModelElements;

public final class AssignmentsTestLanguageModelConsumer extends NonTerminalConsumer {

	private ModelElements rule;	

	private INonTerminalConsumer multiDatatypeConsumer;

	private INonTerminalConsumer multiValueConsumer;

	private INonTerminalConsumer singleDatatypeConsumer;

	private INonTerminalConsumer singleValueConsumer;

	private IElementConsumer alternatives$1$Consumer;

	private IElementConsumer group$2$Consumer;

	private IElementConsumer keyword$3$Consumer;

	private IElementConsumer alternatives$4$Consumer;

	private IElementConsumer assignment$5$Consumer;

	private IElementConsumer ruleCall$6$Consumer;

	private IElementConsumer assignment$7$Consumer;

	private IElementConsumer ruleCall$8$Consumer;

	private IElementConsumer assignment$9$Consumer;

	private IElementConsumer ruleCall$10$Consumer;

	private IElementConsumer assignment$11$Consumer;

	private IElementConsumer ruleCall$12$Consumer;

	private IElementConsumer group$13$Consumer;

	private IElementConsumer keyword$14$Consumer;

	private IElementConsumer assignment$15$Consumer;

	private IElementConsumer alternatives$16$Consumer;

	private IElementConsumer ruleCall$17$Consumer;

	private IElementConsumer ruleCall$18$Consumer;

	private IElementConsumer ruleCall$19$Consumer;

	private IElementConsumer ruleCall$20$Consumer;

	private ICharacterClass keyword$14$Delimiter;

	private ICharacterClass keyword$3$Delimiter;

	protected class Alternatives$1$Consumer extends AlternativesConsumer {
		
		protected Alternatives$1$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$2$Consumer);
			acceptor.accept(group$13$Consumer);
		}
	}

	protected class Group$2$Consumer extends GroupConsumer {
		
		protected Group$2$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$3$Consumer);
			acceptor.accept(alternatives$4$Consumer);
		}
	}

	protected class Keyword$3$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$3$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$3$Delimiter(), optional);
		}
	}

	protected class Alternatives$4$Consumer extends AlternativesConsumer {
		
		protected Alternatives$4$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$5$Consumer);
			acceptor.accept(assignment$7$Consumer);
			acceptor.accept(assignment$9$Consumer);
			acceptor.accept(assignment$11$Consumer);
		}
	}

	protected class Assignment$5$Consumer extends AssignmentConsumer {
		
		protected Assignment$5$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$6$Consumer;
		}
	}

	protected class RuleCall$6$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$6$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(singleValueConsumer, "single", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$7$Consumer extends AssignmentConsumer {
		
		protected Assignment$7$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$8$Consumer;
		}
	}

	protected class RuleCall$8$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$8$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(multiValueConsumer, "multi", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$9$Consumer extends AssignmentConsumer {
		
		protected Assignment$9$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$10$Consumer;
		}
	}

	protected class RuleCall$10$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$10$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(singleDatatypeConsumer, "single", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$11$Consumer extends AssignmentConsumer {
		
		protected Assignment$11$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$12$Consumer;
		}
	}

	protected class RuleCall$12$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$12$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(multiDatatypeConsumer, "multi", false, false, false, getElement(), optional);
		}
	}

	protected class Group$13$Consumer extends GroupConsumer {
		
		protected Group$13$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$14$Consumer);
			acceptor.accept(assignment$15$Consumer);
		}
	}

	protected class Keyword$14$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$14$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$14$Delimiter(), optional);
		}
	}

	protected class Assignment$15$Consumer extends AssignmentConsumer {
		
		protected Assignment$15$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return alternatives$16$Consumer;
		}
	}

	protected class Alternatives$16$Consumer extends AlternativesConsumer {
		
		protected Alternatives$16$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(ruleCall$17$Consumer);
			acceptor.accept(ruleCall$18$Consumer);
			acceptor.accept(ruleCall$19$Consumer);
			acceptor.accept(ruleCall$20$Consumer);
		}
	}

	protected class RuleCall$17$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$17$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(singleValueConsumer, "object", false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$18$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$18$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(multiValueConsumer, "object", false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$19$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$19$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(singleDatatypeConsumer, "object", false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$20$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$20$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(multiDatatypeConsumer, "object", false, false, false, getElement(), optional);
		}
	}

	public AssignmentsTestLanguageModelConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$14$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$3$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return alternatives$1$Consumer.consume();
	}

	public ModelElements getRule() {
		return rule;
	}
	
	public void setRule(ModelElements rule) {
		this.rule = rule;
		
		alternatives$1$Consumer = new Alternatives$1$Consumer(rule.getAlternatives());
		group$2$Consumer = new Group$2$Consumer(rule.getGroup_0());
		keyword$3$Consumer = new Keyword$3$Consumer(rule.getSimpleKeyword_0_0());
		alternatives$4$Consumer = new Alternatives$4$Consumer(rule.getAlternatives_0_1());
		assignment$5$Consumer = new Assignment$5$Consumer(rule.getSingleAssignment_0_1_0());
		ruleCall$6$Consumer = new RuleCall$6$Consumer(rule.getSingleSingleValueParserRuleCall_0_1_0_0());
		assignment$7$Consumer = new Assignment$7$Consumer(rule.getMultiAssignment_0_1_1());
		ruleCall$8$Consumer = new RuleCall$8$Consumer(rule.getMultiMultiValueParserRuleCall_0_1_1_0());
		assignment$9$Consumer = new Assignment$9$Consumer(rule.getSingleAssignment_0_1_2());
		ruleCall$10$Consumer = new RuleCall$10$Consumer(rule.getSingleSingleDatatypeParserRuleCall_0_1_2_0());
		assignment$11$Consumer = new Assignment$11$Consumer(rule.getMultiAssignment_0_1_3());
		ruleCall$12$Consumer = new RuleCall$12$Consumer(rule.getMultiMultiDatatypeParserRuleCall_0_1_3_0());
		group$13$Consumer = new Group$13$Consumer(rule.getGroup_1());
		keyword$14$Consumer = new Keyword$14$Consumer(rule.getComplexKeyword_1_0());
		assignment$15$Consumer = new Assignment$15$Consumer(rule.getObjectAssignment_1_1());
		alternatives$16$Consumer = new Alternatives$16$Consumer(rule.getObjectAlternatives_1_1_0());
		ruleCall$17$Consumer = new RuleCall$17$Consumer(rule.getObjectSingleValueParserRuleCall_1_1_0_0());
		ruleCall$18$Consumer = new RuleCall$18$Consumer(rule.getObjectMultiValueParserRuleCall_1_1_0_1());
		ruleCall$19$Consumer = new RuleCall$19$Consumer(rule.getObjectSingleDatatypeParserRuleCall_1_1_0_2());
		ruleCall$20$Consumer = new RuleCall$20$Consumer(rule.getObjectMultiDatatypeParserRuleCall_1_1_0_3());
		ruleCall$17$Consumer = new RuleCall$17$Consumer(rule.getObjectSingleValueParserRuleCall_1_1_0_0());
		ruleCall$18$Consumer = new RuleCall$18$Consumer(rule.getObjectMultiValueParserRuleCall_1_1_0_1());
		ruleCall$19$Consumer = new RuleCall$19$Consumer(rule.getObjectSingleDatatypeParserRuleCall_1_1_0_2());
		ruleCall$20$Consumer = new RuleCall$20$Consumer(rule.getObjectMultiDatatypeParserRuleCall_1_1_0_3());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setMultiDatatypeConsumer(INonTerminalConsumer multiDatatypeConsumer) {
		this.multiDatatypeConsumer = multiDatatypeConsumer;
	}
	
	public void setMultiValueConsumer(INonTerminalConsumer multiValueConsumer) {
		this.multiValueConsumer = multiValueConsumer;
	}
	
	public void setSingleDatatypeConsumer(INonTerminalConsumer singleDatatypeConsumer) {
		this.singleDatatypeConsumer = singleDatatypeConsumer;
	}
	
	public void setSingleValueConsumer(INonTerminalConsumer singleValueConsumer) {
		this.singleValueConsumer = singleValueConsumer;
	}
	
	public ICharacterClass getKeyword$14$Delimiter() {
		return keyword$14$Delimiter;
	}
	
	public void setKeyword$14$Delimiter(ICharacterClass characterClass) {
		keyword$14$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$3$Delimiter() {
		return keyword$3$Delimiter;
	}
	
	public void setKeyword$3$Delimiter(ICharacterClass characterClass) {
		keyword$3$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
