/*
* generated by Xtext
*/

package org.eclipse.xtext.parser.assignments.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class Bug287184TestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class ModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameFQNParserRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Assignment cDetailAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cDetailAlternatives_2_0 = (Alternatives)cDetailAssignment_2.eContents().get(0);
		private final RuleCall cDetailDetailParserRuleCall_2_0_0 = (RuleCall)cDetailAlternatives_2_0.eContents().get(0);
		private final RuleCall cDetailAssociatedDetailParserRuleCall_2_0_1 = (RuleCall)cDetailAlternatives_2_0.eContents().get(1);
		
		//Model:
		//  "model" name=( ID | FQN ) detail+=( Detail | AssociatedDetail )+;
		public ParserRule getRule() { return rule; }

		//"model" name=( ID | FQN ) detail+=( Detail | AssociatedDetail )+
		public Group getGroup() { return cGroup; }

		//"model"
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }

		//name=( ID | FQN )
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID|FQN
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }

		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0_1() { return cNameFQNParserRuleCall_1_0_1; }

		//detail+=( Detail | AssociatedDetail )+
		public Assignment getDetailAssignment_2() { return cDetailAssignment_2; }

		//Detail|AssociatedDetail
		public Alternatives getDetailAlternatives_2_0() { return cDetailAlternatives_2_0; }

		//Detail
		public RuleCall getDetailDetailParserRuleCall_2_0_0() { return cDetailDetailParserRuleCall_2_0_0; }

		//AssociatedDetail
		public RuleCall getDetailAssociatedDetailParserRuleCall_2_0_1() { return cDetailAssociatedDetailParserRuleCall_2_0_1; }
	}

	public class AbstractDetailElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDetail");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDetailParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssociatedDetailParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractDetail:
		//  Detail|AssociatedDetail;
		public ParserRule getRule() { return rule; }

		//Detail|AssociatedDetail
		public Alternatives getAlternatives() { return cAlternatives; }

		//Detail
		public RuleCall getDetailParserRuleCall_0() { return cDetailParserRuleCall_0; }

		//AssociatedDetail
		public RuleCall getAssociatedDetailParserRuleCall_1() { return cAssociatedDetailParserRuleCall_1; }
	}

	public class DetailElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Detail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocML_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Keyword cDetailKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVisibilityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cVisibilityAlternatives_2_0 = (Alternatives)cVisibilityAssignment_2.eContents().get(0);
		private final Keyword cVisibilityPrivateKeyword_2_0_0 = (Keyword)cVisibilityAlternatives_2_0.eContents().get(0);
		private final Keyword cVisibilityProtectedKeyword_2_0_1 = (Keyword)cVisibilityAlternatives_2_0.eContents().get(1);
		private final Keyword cVisibilityPublicKeyword_2_0_2 = (Keyword)cVisibilityAlternatives_2_0.eContents().get(2);
		private final Assignment cDetailClassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDetailClassModelCrossReference_3_0 = (CrossReference)cDetailClassAssignment_3.eContents().get(0);
		private final RuleCall cDetailClassModelFQNParserRuleCall_3_0_1 = (RuleCall)cDetailClassModelCrossReference_3_0.eContents().get(1);
		
		//Detail:
		//  doc=ML_COMMENT? "detail" visibility=( "private" | "protected" | "public" )? detailClass=[
		//  Model|FQN];
		public ParserRule getRule() { return rule; }

		//doc=ML_COMMENT? "detail" visibility=( "private" | "protected" | "public" )? detailClass=[
		//Model|FQN]
		public Group getGroup() { return cGroup; }

		//doc=ML_COMMENT?
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }

		//ML_COMMENT
		public RuleCall getDocML_COMMENTTerminalRuleCall_0_0() { return cDocML_COMMENTTerminalRuleCall_0_0; }

		//"detail"
		public Keyword getDetailKeyword_1() { return cDetailKeyword_1; }

		//visibility=( "private" | "protected" | "public" )?
		public Assignment getVisibilityAssignment_2() { return cVisibilityAssignment_2; }

		//"private"|"protected"|"public"
		public Alternatives getVisibilityAlternatives_2_0() { return cVisibilityAlternatives_2_0; }

		//"private"
		public Keyword getVisibilityPrivateKeyword_2_0_0() { return cVisibilityPrivateKeyword_2_0_0; }

		//"protected"
		public Keyword getVisibilityProtectedKeyword_2_0_1() { return cVisibilityProtectedKeyword_2_0_1; }

		//"public"
		public Keyword getVisibilityPublicKeyword_2_0_2() { return cVisibilityPublicKeyword_2_0_2; }

		//detailClass=[Model|FQN]
		public Assignment getDetailClassAssignment_3() { return cDetailClassAssignment_3; }

		//[Model|FQN]
		public CrossReference getDetailClassModelCrossReference_3_0() { return cDetailClassModelCrossReference_3_0; }

		//FQN
		public RuleCall getDetailClassModelFQNParserRuleCall_3_0_1() { return cDetailClassModelFQNParserRuleCall_3_0_1; }
	}

	public class AssociatedDetailElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssociatedDetail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssociatedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDetailClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDetailClassModelCrossReference_1_0 = (CrossReference)cDetailClassAssignment_1.eContents().get(0);
		private final Alternatives cDetailClassModelAlternatives_1_0_1 = (Alternatives)cDetailClassModelCrossReference_1_0.eContents().get(1);
		private final RuleCall cDetailClassModelIDTerminalRuleCall_1_0_1_0 = (RuleCall)cDetailClassModelAlternatives_1_0_1.eContents().get(0);
		private final RuleCall cDetailClassModelFQNParserRuleCall_1_0_1_1 = (RuleCall)cDetailClassModelAlternatives_1_0_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AssociatedDetail:
		//  "associated" detailClass=[Model|( ID | FQN )] ";";
		public ParserRule getRule() { return rule; }

		//"associated" detailClass=[Model|( ID | FQN )] ";"
		public Group getGroup() { return cGroup; }

		//"associated"
		public Keyword getAssociatedKeyword_0() { return cAssociatedKeyword_0; }

		//detailClass=[Model|( ID | FQN )]
		public Assignment getDetailClassAssignment_1() { return cDetailClassAssignment_1; }

		//[Model|( ID | FQN )]
		public CrossReference getDetailClassModelCrossReference_1_0() { return cDetailClassModelCrossReference_1_0; }

		//ID|FQN
		public Alternatives getDetailClassModelAlternatives_1_0_1() { return cDetailClassModelAlternatives_1_0_1; }

		//ID
		public RuleCall getDetailClassModelIDTerminalRuleCall_1_0_1_0() { return cDetailClassModelIDTerminalRuleCall_1_0_1_0; }

		//FQN
		public RuleCall getDetailClassModelFQNParserRuleCall_1_0_1_1() { return cDetailClassModelFQNParserRuleCall_1_0_1_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class FQNElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN returns ecore::EString:
		//  ID ("." ID)+;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)+
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)+
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private ModelElements pModel;
	private AbstractDetailElements pAbstractDetail;
	private DetailElements pDetail;
	private AssociatedDetailElements pAssociatedDetail;
	private FQNElements pFQN;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public Bug287184TestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//  "model" name=( ID | FQN ) detail+=( Detail | AssociatedDetail )+;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//AbstractDetail:
	//  Detail|AssociatedDetail;
	public AbstractDetailElements getAbstractDetailAccess() {
		return (pAbstractDetail != null) ? pAbstractDetail : (pAbstractDetail = new AbstractDetailElements());
	}
	
	public ParserRule getAbstractDetailRule() {
		return getAbstractDetailAccess().getRule();
	}

	//Detail:
	//  doc=ML_COMMENT? "detail" visibility=( "private" | "protected" | "public" )? detailClass=[
	//  Model|FQN];
	public DetailElements getDetailAccess() {
		return (pDetail != null) ? pDetail : (pDetail = new DetailElements());
	}
	
	public ParserRule getDetailRule() {
		return getDetailAccess().getRule();
	}

	//AssociatedDetail:
	//  "associated" detailClass=[Model|( ID | FQN )] ";";
	public AssociatedDetailElements getAssociatedDetailAccess() {
		return (pAssociatedDetail != null) ? pAssociatedDetail : (pAssociatedDetail = new AssociatedDetailElements());
	}
	
	public ParserRule getAssociatedDetailRule() {
		return getAssociatedDetailAccess().getRule();
	}

	//FQN returns ecore::EString:
	//  ID ("." ID)+;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
