/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.assignments.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.parser.assignments.services.AssignmentsTestLanguageGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 
import org.eclipse.xtext.parser.assignments.parser.packrat.consumers.AssignmentsTestLanguageModelConsumer;
import org.eclipse.xtext.parser.assignments.parser.packrat.consumers.AssignmentsTestLanguageSingleValueConsumer;
import org.eclipse.xtext.parser.assignments.parser.packrat.consumers.AssignmentsTestLanguageMultiValueConsumer;
import org.eclipse.xtext.parser.assignments.parser.packrat.consumers.AssignmentsTestLanguageSingleDatatypeConsumer;
import org.eclipse.xtext.parser.assignments.parser.packrat.consumers.AssignmentsTestLanguageMultiDatatypeConsumer;
import org.eclipse.xtext.parser.assignments.parser.packrat.consumers.AssignmentsTestLanguageIdDatatypeConsumer;
import org.eclipse.xtext.parser.assignments.parser.packrat.consumers.AssignmentsTestLanguageStringDatatypeConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class AssignmentsTestLanguageParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 
    private AssignmentsTestLanguageModelConsumer modelConsumer;
    private AssignmentsTestLanguageSingleValueConsumer singleValueConsumer;
    private AssignmentsTestLanguageMultiValueConsumer multiValueConsumer;
    private AssignmentsTestLanguageSingleDatatypeConsumer singleDatatypeConsumer;
    private AssignmentsTestLanguageMultiDatatypeConsumer multiDatatypeConsumer;
    private AssignmentsTestLanguageIdDatatypeConsumer idDatatypeConsumer;
    private AssignmentsTestLanguageStringDatatypeConsumer stringDatatypeConsumer;

	private AssignmentsTestLanguageGrammarAccess grammarAccess;

	public AssignmentsTestLanguageParserConfiguration(IInternalParserConfiguration configuration, AssignmentsTestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public AssignmentsTestLanguageModelConsumer getRootConsumer() {
		return modelConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		modelConsumer = new AssignmentsTestLanguageModelConsumer(
    		this, null
    	);
		singleValueConsumer = new AssignmentsTestLanguageSingleValueConsumer(
    		this, null
    	);
		multiValueConsumer = new AssignmentsTestLanguageMultiValueConsumer(
    		this, null
    	);
		singleDatatypeConsumer = new AssignmentsTestLanguageSingleDatatypeConsumer(
    		this, null
    	);
		multiDatatypeConsumer = new AssignmentsTestLanguageMultiDatatypeConsumer(
    		this, null
    	);
		idDatatypeConsumer = new AssignmentsTestLanguageIdDatatypeConsumer(
    		this, null
    	);
		stringDatatypeConsumer = new AssignmentsTestLanguageStringDatatypeConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getModelConsumer().setRule(grammarAccess.getModelAccess());
		getSingleValueConsumer().setRule(grammarAccess.getSingleValueAccess());
		getMultiValueConsumer().setRule(grammarAccess.getMultiValueAccess());
		getSingleDatatypeConsumer().setRule(grammarAccess.getSingleDatatypeAccess());
		getMultiDatatypeConsumer().setRule(grammarAccess.getMultiDatatypeAccess());
		getIdDatatypeConsumer().setRule(grammarAccess.getIdDatatypeAccess());
		getStringDatatypeConsumer().setRule(grammarAccess.getStringDatatypeAccess());
		getIdConsumer().setRule(grammarAccess.getIDRule());
		getIntConsumer().setRule(grammarAccess.getINTRule());
		getStringConsumer().setRule(grammarAccess.getSTRINGRule());
		getMlCommentConsumer().setRule(grammarAccess.getML_COMMENTRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getAnyOtherConsumer().setRule(grammarAccess.getANY_OTHERRule());


		getModelConsumer().setMultiDatatypeConsumer(getMultiDatatypeConsumer());
		getModelConsumer().setMultiValueConsumer(getMultiValueConsumer());
		getModelConsumer().setSingleDatatypeConsumer(getSingleDatatypeConsumer());
		getModelConsumer().setSingleValueConsumer(getSingleValueConsumer());

		getSingleValueConsumer().setIdConsumer(getIdConsumer());
		getSingleValueConsumer().setStringConsumer(getStringConsumer());

		getMultiValueConsumer().setIdConsumer(getIdConsumer());
		getMultiValueConsumer().setStringConsumer(getStringConsumer());

		getSingleDatatypeConsumer().setIdDatatypeConsumer(getIdDatatypeConsumer());
		getSingleDatatypeConsumer().setStringDatatypeConsumer(getStringDatatypeConsumer());

		getMultiDatatypeConsumer().setIdDatatypeConsumer(getIdDatatypeConsumer());
		getMultiDatatypeConsumer().setStringDatatypeConsumer(getStringDatatypeConsumer());

		getIdDatatypeConsumer().setIdConsumer(getIdConsumer());

		getStringDatatypeConsumer().setStringConsumer(getStringConsumer());

		getModelConsumer().setKeyword$14$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.keyword$5$Delimiter);
		getModelConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.keyword$5$Delimiter);
		getSingleValueConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.keyword$5$Delimiter);
		getSingleValueConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.keyword$5$Delimiter);
		getSingleValueConsumer().setKeyword$13$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.keyword$5$Delimiter);
		getSingleValueConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.ruleCall$29$Delimiter);
		getSingleValueConsumer().setRuleCall$10$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.ruleCall$29$Delimiter);
		getSingleValueConsumer().setRuleCall$11$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.ruleCall$35$Delimiter);
		getSingleValueConsumer().setRuleCall$15$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.ruleCall$35$Delimiter);
		getMultiValueConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.keyword$5$Delimiter);
		getMultiValueConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.keyword$5$Delimiter);
		getMultiValueConsumer().setKeyword$13$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.keyword$5$Delimiter);
		getMultiValueConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.ruleCall$29$Delimiter);
		getMultiValueConsumer().setRuleCall$10$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.ruleCall$29$Delimiter);
		getMultiValueConsumer().setRuleCall$11$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.ruleCall$35$Delimiter);
		getMultiValueConsumer().setRuleCall$15$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.ruleCall$35$Delimiter);
		getSingleDatatypeConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.keyword$5$Delimiter);
		getSingleDatatypeConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.keyword$5$Delimiter);
		getSingleDatatypeConsumer().setKeyword$13$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.keyword$5$Delimiter);
		getMultiDatatypeConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.keyword$5$Delimiter);
		getMultiDatatypeConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.keyword$5$Delimiter);
		getMultiDatatypeConsumer().setKeyword$13$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.keyword$5$Delimiter);
		getIdDatatypeConsumer().setRuleCall$1$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.ruleCall$29$Delimiter);
		getStringDatatypeConsumer().setRuleCall$1$Delimiter(org.eclipse.xtext.parser.assignments.parser.packrat.AssignmentsTestLanguageDelimiters.ruleCall$35$Delimiter);
	}
	
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public AssignmentsTestLanguageModelConsumer getModelConsumer() {
    	return modelConsumer;
    }

    public AssignmentsTestLanguageSingleValueConsumer getSingleValueConsumer() {
    	return singleValueConsumer;
    }

    public AssignmentsTestLanguageMultiValueConsumer getMultiValueConsumer() {
    	return multiValueConsumer;
    }

    public AssignmentsTestLanguageSingleDatatypeConsumer getSingleDatatypeConsumer() {
    	return singleDatatypeConsumer;
    }

    public AssignmentsTestLanguageMultiDatatypeConsumer getMultiDatatypeConsumer() {
    	return multiDatatypeConsumer;
    }

    public AssignmentsTestLanguageIdDatatypeConsumer getIdDatatypeConsumer() {
    	return idDatatypeConsumer;
    }

    public AssignmentsTestLanguageStringDatatypeConsumer getStringDatatypeConsumer() {
    	return stringDatatypeConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
