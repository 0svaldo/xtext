/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.terminalrules.parseTreeConstruction;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;
import org.eclipse.xtext.parser.terminalrules.services.TerminalRulesTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class TerminalRulesTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private TerminalRulesTestLanguageGrammarAccess grammarAccess;
	
	@Override
	protected Solution internalSerialize(EObject obj) {
		IInstanceDescription inst = getDescr(obj);
		Solution s;
		if(inst.isInstanceOf(grammarAccess.prModel().getRule().getType().getType()) && (s = new Model_Alternatives(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		return null;
	}
	

/************ begin Rule Model ****************
 *
 * not supported
 *
 **/


// not supported
protected class Model_Alternatives extends AlternativesToken {

	public Model_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.prModel().eleAlternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new Model_0_Assignment_idValue(current, this);
			case 1: return new Model_1_Assignment_intValue(current, this);
			case 2: return new Model_2_Assignment_stringValue(current, this);
			case 3: return new Model_3_Assignment_mlCommentValue(current, this);
			case 4: return new Model_4_Assignment_slCommentValue(current, this);
			case 5: return new Model_5_Assignment_wsValue(current, this);
			case 6: return new Model_6_Assignment_anyValue(current, this);
			default: return null;
		}
	}
}

// not supported
protected class Model_0_Assignment_idValue extends AssignmentToken  {
	
	public Model_0_Assignment_idValue(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prModel().ele0AssignmentIdValue();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("idValue",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("idValue");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prModel().ele00TerminalRuleCallID();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class Model_1_Assignment_intValue extends AssignmentToken  {
	
	public Model_1_Assignment_intValue(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prModel().ele1AssignmentIntValue();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("intValue",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("intValue");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prModel().ele10TerminalRuleCallINT();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class Model_2_Assignment_stringValue extends AssignmentToken  {
	
	public Model_2_Assignment_stringValue(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prModel().ele2AssignmentStringValue();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("stringValue",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("stringValue");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prModel().ele20TerminalRuleCallSTRING();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class Model_3_Assignment_mlCommentValue extends AssignmentToken  {
	
	public Model_3_Assignment_mlCommentValue(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prModel().ele3AssignmentMlCommentValue();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("mlCommentValue",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("mlCommentValue");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prModel().ele30TerminalRuleCallML_COMMENT();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class Model_4_Assignment_slCommentValue extends AssignmentToken  {
	
	public Model_4_Assignment_slCommentValue(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prModel().ele4AssignmentSlCommentValue();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("slCommentValue",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("slCommentValue");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prModel().ele40TerminalRuleCallSL_COMMENT();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class Model_5_Assignment_wsValue extends AssignmentToken  {
	
	public Model_5_Assignment_wsValue(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prModel().ele5AssignmentWsValue();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("wsValue",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("wsValue");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prModel().ele50TerminalRuleCallWS();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class Model_6_Assignment_anyValue extends AssignmentToken  {
	
	public Model_6_Assignment_anyValue(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prModel().ele6AssignmentAnyValue();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("anyValue",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("anyValue");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prModel().ele60TerminalRuleCallANY_OTHER();
			return new Solution(obj);
		}
		return null;
	}
}


/************ end Rule Model ****************/

}
