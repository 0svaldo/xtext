/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.parser.terminalrules.services.XtextTerminalsTestLanguageGrammarAccess.GrammarElements;

public final class XtextTerminalsTestLanguageGrammarConsumer extends NonTerminalConsumer {

	private GrammarElements rule;	

	private INonTerminalConsumer abstractMetamodelDeclarationConsumer;

	private INonTerminalConsumer abstractRuleConsumer;

	private INonTerminalConsumer grammarIdConsumer;

	private ITerminalConsumer idConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer keyword$6$Consumer;

	private IElementConsumer assignment$7$Consumer;

	private IElementConsumer ruleCall$8$Consumer;

	private IElementConsumer group$9$Consumer;

	private IElementConsumer keyword$10$Consumer;

	private IElementConsumer assignment$11$Consumer;

	private IElementConsumer crossReference$12$Consumer;

	private IElementConsumer group$14$Consumer;

	private IElementConsumer assignment$17$Consumer;

	private IElementConsumer keyword$18$Consumer;

	private IElementConsumer keyword$19$Consumer;

	private IElementConsumer group$20$Consumer;

	private IElementConsumer assignment$21$Consumer;

	private IElementConsumer crossReference$22$Consumer;

	private IElementConsumer group$24$Consumer;

	private IElementConsumer keyword$25$Consumer;

	private IElementConsumer assignment$26$Consumer;

	private IElementConsumer crossReference$27$Consumer;

	private IElementConsumer keyword$29$Consumer;

	private IElementConsumer assignment$30$Consumer;

	private IElementConsumer ruleCall$31$Consumer;

	private IElementConsumer assignment$32$Consumer;

	private IElementConsumer ruleCall$33$Consumer;

	private ISequenceMatcher crossReference$22$Delimiter;

	private ISequenceMatcher crossReference$27$Delimiter;

	private ICharacterClass keyword$10$Delimiter;

	private ICharacterClass keyword$18$Delimiter;

	private ICharacterClass keyword$19$Delimiter;

	private ICharacterClass keyword$25$Delimiter;

	private ICharacterClass keyword$29$Delimiter;

	private ICharacterClass keyword$6$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$6$Consumer);
			acceptor.accept(assignment$7$Consumer);
			acceptor.accept(group$9$Consumer);
			acceptor.accept(group$14$Consumer);
			acceptor.accept(assignment$30$Consumer);
			acceptor.accept(assignment$32$Consumer);
		}
	}

	protected class Keyword$6$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$6$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$6$Delimiter(), optional);
		}
	}

	protected class Assignment$7$Consumer extends AssignmentConsumer {
		
		protected Assignment$7$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$8$Consumer;
		}
	}

	protected class RuleCall$8$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$8$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(grammarIdConsumer, "name", false, true, false, getElement(), optional);
		}
	}

	protected class Group$9$Consumer extends OptionalGroupConsumer {
		
		protected Group$9$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$10$Consumer);
			acceptor.accept(assignment$11$Consumer);
		}
	}

	protected class Keyword$10$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$10$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$10$Delimiter(), optional);
		}
	}

	protected class Assignment$11$Consumer extends AssignmentConsumer {
		
		protected Assignment$11$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$12$Consumer;
		}
	}

	protected class CrossReference$12$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$12$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(grammarIdConsumer, "superGrammar", false, true, false, getElement(), optional);
		}
	}

	protected class Group$14$Consumer extends OptionalGroupConsumer {
		
		protected Group$14$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$17$Consumer);
			acceptor.accept(keyword$19$Consumer);
			acceptor.accept(group$20$Consumer);
			acceptor.accept(keyword$29$Consumer);
		}
	}

	protected class Assignment$17$Consumer extends AssignmentConsumer {
		
		protected Assignment$17$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$18$Consumer;
		}
	}

	protected class Keyword$18$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$18$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "definesHiddenTokens", false, true, getKeyword$18$Delimiter(), optional);
		}
	}

	protected class Keyword$19$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$19$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$19$Delimiter(), optional);
		}
	}

	protected class Group$20$Consumer extends OptionalGroupConsumer {
		
		protected Group$20$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$21$Consumer);
			acceptor.accept(group$24$Consumer);
		}
	}

	protected class Assignment$21$Consumer extends AssignmentConsumer {
		
		protected Assignment$21$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$22$Consumer;
		}
	}

	protected class CrossReference$22$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$22$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "hiddenTokens", true, false, getElement(), getCrossReference$22$Delimiter(), optional);
		}
	}

	protected class Group$24$Consumer extends LoopGroupConsumer {
		
		protected Group$24$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$25$Consumer);
			acceptor.accept(assignment$26$Consumer);
		}
	}

	protected class Keyword$25$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$25$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$25$Delimiter(), optional);
		}
	}

	protected class Assignment$26$Consumer extends AssignmentConsumer {
		
		protected Assignment$26$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$27$Consumer;
		}
	}

	protected class CrossReference$27$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$27$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "hiddenTokens", true, false, getElement(), getCrossReference$27$Delimiter(), optional);
		}
	}

	protected class Keyword$29$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$29$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$29$Delimiter(), optional);
		}
	}

	protected class Assignment$30$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$30$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$31$Consumer;
		}
	}

	protected class RuleCall$31$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$31$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(abstractMetamodelDeclarationConsumer, "metamodelDeclarations", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$32$Consumer extends MandatoryLoopAssignmentConsumer {
		
		protected Assignment$32$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$33$Consumer;
		}
	}

	protected class RuleCall$33$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$33$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(abstractRuleConsumer, "rules", true, false, false, getElement(), optional);
		}
	}

	public XtextTerminalsTestLanguageGrammarConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		crossReference$22$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		crossReference$27$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		keyword$10$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$18$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$19$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$25$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$29$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$6$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public GrammarElements getRule() {
		return rule;
	}
	
	public void setRule(GrammarElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.ele00000KeywordGrammar());
		assignment$7$Consumer = new Assignment$7$Consumer(rule.ele00001AssignmentName());
		ruleCall$8$Consumer = new RuleCall$8$Consumer(rule.ele000010ParserRuleCallGrammarID());
		group$9$Consumer = new Group$9$Consumer(rule.ele0001Group());
		keyword$10$Consumer = new Keyword$10$Consumer(rule.ele00010KeywordExtends());
		assignment$11$Consumer = new Assignment$11$Consumer(rule.ele00011AssignmentSuperGrammar());
		crossReference$12$Consumer = new CrossReference$12$Consumer(rule.ele000110CrossReferenceEStringGrammar());
		group$14$Consumer = new Group$14$Consumer(rule.ele001Group());
		assignment$17$Consumer = new Assignment$17$Consumer(rule.ele001000AssignmentDefinesHiddenTokens());
		keyword$18$Consumer = new Keyword$18$Consumer(rule.ele0010000KeywordHidden());
		keyword$19$Consumer = new Keyword$19$Consumer(rule.ele001001KeywordLeftParenthesis());
		group$20$Consumer = new Group$20$Consumer(rule.ele00101Group());
		assignment$21$Consumer = new Assignment$21$Consumer(rule.ele001010AssignmentHiddenTokens());
		crossReference$22$Consumer = new CrossReference$22$Consumer(rule.ele0010100CrossReferenceEStringAbstractRule());
		group$24$Consumer = new Group$24$Consumer(rule.ele001011Group());
		keyword$25$Consumer = new Keyword$25$Consumer(rule.ele0010110KeywordComma());
		assignment$26$Consumer = new Assignment$26$Consumer(rule.ele0010111AssignmentHiddenTokens());
		crossReference$27$Consumer = new CrossReference$27$Consumer(rule.ele00101110CrossReferenceEStringAbstractRule());
		keyword$29$Consumer = new Keyword$29$Consumer(rule.ele0011KeywordRightParenthesis());
		assignment$30$Consumer = new Assignment$30$Consumer(rule.ele01AssignmentMetamodelDeclarations());
		ruleCall$31$Consumer = new RuleCall$31$Consumer(rule.ele010ParserRuleCallAbstractMetamodelDeclaration());
		assignment$32$Consumer = new Assignment$32$Consumer(rule.ele1AssignmentRules());
		ruleCall$33$Consumer = new RuleCall$33$Consumer(rule.ele10ParserRuleCallAbstractRule());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setAbstractMetamodelDeclarationConsumer(INonTerminalConsumer abstractMetamodelDeclarationConsumer) {
		this.abstractMetamodelDeclarationConsumer = abstractMetamodelDeclarationConsumer;
	}
	
	public void setAbstractRuleConsumer(INonTerminalConsumer abstractRuleConsumer) {
		this.abstractRuleConsumer = abstractRuleConsumer;
	}
	
	public void setGrammarIdConsumer(INonTerminalConsumer grammarIdConsumer) {
		this.grammarIdConsumer = grammarIdConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public ISequenceMatcher getCrossReference$22$Delimiter() {
		return crossReference$22$Delimiter;
	}
	
	public void setCrossReference$22$Delimiter(ISequenceMatcher matcher) {
		crossReference$22$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getCrossReference$27$Delimiter() {
		return crossReference$27$Delimiter;
	}
	
	public void setCrossReference$27$Delimiter(ISequenceMatcher matcher) {
		crossReference$27$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ICharacterClass getKeyword$10$Delimiter() {
		return keyword$10$Delimiter;
	}
	
	public void setKeyword$10$Delimiter(ICharacterClass characterClass) {
		keyword$10$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$18$Delimiter() {
		return keyword$18$Delimiter;
	}
	
	public void setKeyword$18$Delimiter(ICharacterClass characterClass) {
		keyword$18$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$19$Delimiter() {
		return keyword$19$Delimiter;
	}
	
	public void setKeyword$19$Delimiter(ICharacterClass characterClass) {
		keyword$19$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$25$Delimiter() {
		return keyword$25$Delimiter;
	}
	
	public void setKeyword$25$Delimiter(ICharacterClass characterClass) {
		keyword$25$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$29$Delimiter() {
		return keyword$29$Delimiter;
	}
	
	public void setKeyword$29$Delimiter(ICharacterClass characterClass) {
		keyword$29$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$6$Delimiter() {
		return keyword$6$Delimiter;
	}
	
	public void setKeyword$6$Delimiter(ICharacterClass characterClass) {
		keyword$6$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
