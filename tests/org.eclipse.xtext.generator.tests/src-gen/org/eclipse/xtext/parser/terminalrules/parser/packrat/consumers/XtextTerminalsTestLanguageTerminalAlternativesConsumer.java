/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;

import org.eclipse.xtext.AbstractRule;

import org.eclipse.xtext.parser.packrat.IMarkerFactory.IMarker;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ConsumeResult;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.parser.terminalrules.services.XtextTerminalsTestLanguageGrammarAccess.TerminalAlternativesElements;

import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageTerminalGroupConsumer;

@SuppressWarnings("unused")
public final class XtextTerminalsTestLanguageTerminalAlternativesConsumer extends NonTerminalConsumer {

	private TerminalAlternativesElements rule;
	
	private INonTerminalConsumer terminalGroupConsumer;

	private ICharacterClass keyword$7$Delimiter;
	
	public XtextTerminalsTestLanguageTerminalAlternativesConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$7$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume(int entryPoint) throws Exception {
		return consumeGroup$1(entryPoint);
	}

	protected int consumeGroup$1(int entryPoint) throws Exception {
		int result = doConsumeGroup$1(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeGroup$1(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeGroup$1(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().eleGroup());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeRuleCall$2(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0ParserRuleCallTerminalGroup());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeGroup$3(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele1Group());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeRuleCall$2(int entryPoint) throws Exception {
		int result = doConsumeRuleCall$2(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeRuleCall$2(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeRuleCall$2(int entryPoint) throws Exception {
		return consumeNonTerminal(terminalGroupConsumer, null, false, false, false, getRule().ele0ParserRuleCallTerminalGroup());
	}

	protected int consumeGroup$3(int entryPoint) throws Exception {
		IMarker marker = mark();
		while(doConsumeGroup$3(entryPoint) == ConsumeResult.SUCCESS) {
			marker.flush();
		}
		marker.rollback();
		skipped(getRule().ele1Group());
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeGroup$3(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().ele1Group());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeAction$5(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele100ActionAlternativesgroups());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$7(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele101KeywordVerticalLine());
					return result.getResult();
				}
			case 2:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$8(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele11AssignmentGroups());
					return result.getResult();
				}
		}
		return result.getResult();
	}
	protected int consumeAction$5(int entryPoint) {
		consumeAction(getRule().ele100ActionAlternativesgroups(), true);
		return ConsumeResult.SUCCESS;	
	}

	protected int consumeKeyword$7(int entryPoint) throws Exception {
		int result = doConsumeKeyword$7(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$7(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$7(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele101KeywordVerticalLine(), null, false, false, getKeyword$7$Delimiter());
	}

	protected int consumeAssignment$8(int entryPoint) throws Exception {
		int result = doConsumeAssignment$8(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$8(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$8(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele11AssignmentGroups());
		return result.getResult(consumeRuleCall$9(entryPoint));
	}

	protected int consumeRuleCall$9(int entryPoint) throws Exception {
		return consumeNonTerminal(terminalGroupConsumer, "groups", true, false, false, getRule().ele110ParserRuleCallTerminalGroup());
	}

	public TerminalAlternativesElements getRule() {
		return rule;
	}
	
	public void setRule(TerminalAlternativesElements rule) {
		this.rule = rule;
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setTerminalGroupConsumer(INonTerminalConsumer terminalGroupConsumer) {
		this.terminalGroupConsumer = terminalGroupConsumer;
	}
	
	public ICharacterClass getKeyword$7$Delimiter() {
		return keyword$7$Delimiter;
	}
	
	public void setKeyword$7$Delimiter(ICharacterClass characterClass) {
		keyword$7$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
