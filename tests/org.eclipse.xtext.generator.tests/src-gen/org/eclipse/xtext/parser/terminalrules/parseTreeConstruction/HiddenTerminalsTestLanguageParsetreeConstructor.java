/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.terminalrules.parseTreeConstruction;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;
import org.eclipse.xtext.parser.terminalrules.services.HiddenTerminalsTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class HiddenTerminalsTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private HiddenTerminalsTestLanguageGrammarAccess grammarAccess;
	
	@Override
	protected Solution internalSerialize(EObject obj) {
		IInstanceDescription inst = getDescr(obj);
		Solution s;
		if(inst.isInstanceOf(grammarAccess.prModel().getRule().getType().getClassifier()) && (s = new Model_Alternatives(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prWithoutHiddens().getRule().getType().getClassifier()) && (s = new WithoutHiddens_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prWithHiddens().getRule().getType().getClassifier()) && (s = new WithHiddens_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prOverridingHiddens().getRule().getType().getClassifier()) && (s = new OverridingHiddens_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prOverridingHiddensCall().getRule().getType().getClassifier()) && (s = new OverridingHiddensCall_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prInheritingHiddens().getRule().getType().getClassifier()) && (s = new InheritingHiddens_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prDatatypeHiddens().getRule().getType().getClassifier()) && (s = new DatatypeHiddens_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prHidingHiddens().getRule().getType().getClassifier()) && (s = new HidingHiddens_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prInheritingHiddensCall().getRule().getType().getClassifier()) && (s = new InheritingHiddensCall_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		return null;
	}
	

/************ begin Rule Model ****************
 *
 * not supported
 *
 **/


// not supported
protected class Model_Alternatives extends AlternativesToken {

	public Model_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.prModel().eleAlternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new Model_0_RuleCall_WithoutHiddens(current, this);
			case 1: return new Model_1_RuleCall_WithHiddens(current, this);
			case 2: return new Model_2_RuleCall_OverridingHiddens(current, this);
			case 3: return new Model_3_RuleCall_InheritingHiddens(current, this);
			case 4: return new Model_4_RuleCall_DatatypeHiddens(current, this);
			default: return null;
		}
	}
}

// not supported
protected class Model_0_RuleCall_WithoutHiddens extends RuleCallToken {
	
	public Model_0_RuleCall_WithoutHiddens(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.prModel().ele0ParserRuleCallWithoutHiddens();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(WithoutHiddens_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.prWithoutHiddens().getRule().getType().getClassifier())) return null;
		return new WithoutHiddens_Group(current, this).firstSolution();
	}
}

// not supported
protected class Model_1_RuleCall_WithHiddens extends RuleCallToken {
	
	public Model_1_RuleCall_WithHiddens(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.prModel().ele1ParserRuleCallWithHiddens();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(WithHiddens_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.prWithHiddens().getRule().getType().getClassifier())) return null;
		return new WithHiddens_Group(current, this).firstSolution();
	}
}

// not supported
protected class Model_2_RuleCall_OverridingHiddens extends RuleCallToken {
	
	public Model_2_RuleCall_OverridingHiddens(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.prModel().ele2ParserRuleCallOverridingHiddens();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(OverridingHiddens_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.prOverridingHiddens().getRule().getType().getClassifier())) return null;
		return new OverridingHiddens_Group(current, this).firstSolution();
	}
}

// not supported
protected class Model_3_RuleCall_InheritingHiddens extends RuleCallToken {
	
	public Model_3_RuleCall_InheritingHiddens(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.prModel().ele3ParserRuleCallInheritingHiddens();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(InheritingHiddens_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.prInheritingHiddens().getRule().getType().getClassifier())) return null;
		return new InheritingHiddens_Group(current, this).firstSolution();
	}
}

// not supported
protected class Model_4_RuleCall_DatatypeHiddens extends RuleCallToken {
	
	public Model_4_RuleCall_DatatypeHiddens(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.prModel().ele4ParserRuleCallDatatypeHiddens();
	}
	
	@Override
	protected Solution createSolution() {
		if(checkForRecursion(DatatypeHiddens_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.prDatatypeHiddens().getRule().getType().getClassifier())) return null;
		return new DatatypeHiddens_Group(current, this).firstSolution();
	}
}


/************ end Rule Model ****************/


/************ begin Rule WithoutHiddens ****************
 *
 * not supported
 *
 **/


// not supported
protected class WithoutHiddens_Group extends GroupToken {
	
	public WithoutHiddens_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prWithoutHiddens().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new WithoutHiddens_4_Assignment_valid(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new WithoutHiddens_3_Assignment_spaces(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new WithoutHiddens_2_Keyword_hiddens(s2.getCurrent(), s2.getPredecessor()).firstSolution();
		while(s3 != null) {
			Solution s4 = new WithoutHiddens_1_Assignment_spaces(s3.getCurrent(), s3.getPredecessor()).firstSolution();
		while(s4 != null) {
			Solution s5 = new WithoutHiddens_0_Keyword_without(s4.getCurrent(), s4.getPredecessor()).firstSolution();
			if(s5 != null) {
				last = s5.getPredecessor();
				return s5;
			} else {
				s4 = s4.getPredecessor().nextSolution(this,s4);
			}
		}
			s3 = s3.getPredecessor().nextSolution(this,s3);
		}
			s2 = s2.getPredecessor().nextSolution(this,s2);
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class WithoutHiddens_0_Keyword_without extends KeywordToken  {
	
	public WithoutHiddens_0_Keyword_without(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prWithoutHiddens().ele0KeywordWithout();
	}	
}

// not supported
protected class WithoutHiddens_1_Assignment_spaces extends AssignmentToken  {
	
	public WithoutHiddens_1_Assignment_spaces(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prWithoutHiddens().ele1AssignmentSpaces();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("spaces",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("spaces");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prWithoutHiddens().ele10TerminalRuleCallWS();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class WithoutHiddens_2_Keyword_hiddens extends KeywordToken  {
	
	public WithoutHiddens_2_Keyword_hiddens(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prWithoutHiddens().ele2KeywordHiddens();
	}	
}

// not supported
protected class WithoutHiddens_3_Assignment_spaces extends AssignmentToken  {
	
	public WithoutHiddens_3_Assignment_spaces(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prWithoutHiddens().ele3AssignmentSpaces();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("spaces",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("spaces");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prWithoutHiddens().ele30TerminalRuleCallWS();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class WithoutHiddens_4_Assignment_valid extends AssignmentToken  {
	
	public WithoutHiddens_4_Assignment_valid(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prWithoutHiddens().ele4AssignmentValid();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("valid",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("valid");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prWithoutHiddens().ele40KeywordSemicolon();
			return new Solution(obj);
		}

		return null;
	}
}


/************ end Rule WithoutHiddens ****************/


/************ begin Rule WithHiddens ****************
 *
 * not supported
 *
 **/


// not supported
protected class WithHiddens_Group extends GroupToken {
	
	public WithHiddens_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prWithHiddens().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new WithHiddens_2_Assignment_valid(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new WithHiddens_1_Keyword_hiddens(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new WithHiddens_0_Keyword_with(s2.getCurrent(), s2.getPredecessor()).firstSolution();
			if(s3 != null) {
				last = s3.getPredecessor();
				return s3;
			} else {
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class WithHiddens_0_Keyword_with extends KeywordToken  {
	
	public WithHiddens_0_Keyword_with(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prWithHiddens().ele0KeywordWith();
	}	
}

// not supported
protected class WithHiddens_1_Keyword_hiddens extends KeywordToken  {
	
	public WithHiddens_1_Keyword_hiddens(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prWithHiddens().ele1KeywordHiddens();
	}	
}

// not supported
protected class WithHiddens_2_Assignment_valid extends AssignmentToken  {
	
	public WithHiddens_2_Assignment_valid(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prWithHiddens().ele2AssignmentValid();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("valid",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("valid");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prWithHiddens().ele20KeywordSemicolon();
			return new Solution(obj);
		}

		return null;
	}
}


/************ end Rule WithHiddens ****************/


/************ begin Rule OverridingHiddens ****************
 *
 * not supported
 *
 **/


// not supported
protected class OverridingHiddens_Group extends GroupToken {
	
	public OverridingHiddens_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prOverridingHiddens().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new OverridingHiddens_5_Assignment_valid(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new OverridingHiddens_4_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new OverridingHiddens_3_Assignment_called(s2.getCurrent(), s2.getPredecessor()).firstSolution();
		while(s3 != null) {
			Solution s4 = new OverridingHiddens_2_Keyword(s3.getCurrent(), s3.getPredecessor()).firstSolution();
		while(s4 != null) {
			Solution s5 = new OverridingHiddens_1_Keyword_hiddens(s4.getCurrent(), s4.getPredecessor()).firstSolution();
		while(s5 != null) {
			Solution s6 = new OverridingHiddens_0_Keyword_overriding(s5.getCurrent(), s5.getPredecessor()).firstSolution();
			if(s6 != null) {
				last = s6.getPredecessor();
				return s6;
			} else {
				s5 = s5.getPredecessor().nextSolution(this,s5);
			}
		}
			s4 = s4.getPredecessor().nextSolution(this,s4);
		}
			s3 = s3.getPredecessor().nextSolution(this,s3);
		}
			s2 = s2.getPredecessor().nextSolution(this,s2);
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class OverridingHiddens_0_Keyword_overriding extends KeywordToken  {
	
	public OverridingHiddens_0_Keyword_overriding(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prOverridingHiddens().ele0KeywordOverriding();
	}	
}

// not supported
protected class OverridingHiddens_1_Keyword_hiddens extends KeywordToken  {
	
	public OverridingHiddens_1_Keyword_hiddens(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prOverridingHiddens().ele1KeywordHiddens();
	}	
}

// not supported
protected class OverridingHiddens_2_Keyword extends KeywordToken  {
	
	public OverridingHiddens_2_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prOverridingHiddens().ele2KeywordLeftParenthesis();
	}	
}

// not supported
protected class OverridingHiddens_3_Assignment_called extends AssignmentToken  {
	
	public OverridingHiddens_3_Assignment_called(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prOverridingHiddens().ele3AssignmentCalled();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("called",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("called");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prOverridingHiddensCall().getRule().getType().getClassifier())) {
				Solution s = new OverridingHiddensCall_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class OverridingHiddens_4_Keyword extends KeywordToken  {
	
	public OverridingHiddens_4_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prOverridingHiddens().ele4KeywordRightParenthesis();
	}	
}

// not supported
protected class OverridingHiddens_5_Assignment_valid extends AssignmentToken  {
	
	public OverridingHiddens_5_Assignment_valid(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prOverridingHiddens().ele5AssignmentValid();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("valid",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("valid");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prOverridingHiddens().ele50KeywordSemicolon();
			return new Solution(obj);
		}

		return null;
	}
}


/************ end Rule OverridingHiddens ****************/


/************ begin Rule OverridingHiddensCall ****************
 *
 * not supported
 *
 **/


// not supported
protected class OverridingHiddensCall_Group extends GroupToken {
	
	public OverridingHiddensCall_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prOverridingHiddensCall().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new OverridingHiddensCall_2_Assignment_valid(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new OverridingHiddensCall_1_Assignment_spaces(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new OverridingHiddensCall_0_Keyword_call(s2.getCurrent(), s2.getPredecessor()).firstSolution();
			if(s3 != null) {
				last = s3.getPredecessor();
				return s3;
			} else {
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class OverridingHiddensCall_0_Keyword_call extends KeywordToken  {
	
	public OverridingHiddensCall_0_Keyword_call(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prOverridingHiddensCall().ele0KeywordCall();
	}	
}

// not supported
protected class OverridingHiddensCall_1_Assignment_spaces extends AssignmentToken  {
	
	public OverridingHiddensCall_1_Assignment_spaces(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prOverridingHiddensCall().ele1AssignmentSpaces();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("spaces",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("spaces");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prOverridingHiddensCall().ele10TerminalRuleCallWS();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class OverridingHiddensCall_2_Assignment_valid extends AssignmentToken  {
	
	public OverridingHiddensCall_2_Assignment_valid(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prOverridingHiddensCall().ele2AssignmentValid();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("valid",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("valid");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prOverridingHiddensCall().ele20KeywordSemicolon();
			return new Solution(obj);
		}

		return null;
	}
}


/************ end Rule OverridingHiddensCall ****************/


/************ begin Rule InheritingHiddens ****************
 *
 * not supported
 *
 **/


// not supported
protected class InheritingHiddens_Group extends GroupToken {
	
	public InheritingHiddens_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prInheritingHiddens().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new InheritingHiddens_5_Assignment_valid(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new InheritingHiddens_4_Keyword(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new InheritingHiddens_3_Alternatives(s2.getCurrent(), s2.getPredecessor()).firstSolution();
		while(s3 != null) {
			Solution s4 = new InheritingHiddens_2_Keyword(s3.getCurrent(), s3.getPredecessor()).firstSolution();
		while(s4 != null) {
			Solution s5 = new InheritingHiddens_1_Keyword_hiddens(s4.getCurrent(), s4.getPredecessor()).firstSolution();
		while(s5 != null) {
			Solution s6 = new InheritingHiddens_0_Keyword_inheriting(s5.getCurrent(), s5.getPredecessor()).firstSolution();
			if(s6 != null) {
				last = s6.getPredecessor();
				return s6;
			} else {
				s5 = s5.getPredecessor().nextSolution(this,s5);
			}
		}
			s4 = s4.getPredecessor().nextSolution(this,s4);
		}
			s3 = s3.getPredecessor().nextSolution(this,s3);
		}
			s2 = s2.getPredecessor().nextSolution(this,s2);
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class InheritingHiddens_0_Keyword_inheriting extends KeywordToken  {
	
	public InheritingHiddens_0_Keyword_inheriting(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prInheritingHiddens().ele0KeywordInheriting();
	}	
}

// not supported
protected class InheritingHiddens_1_Keyword_hiddens extends KeywordToken  {
	
	public InheritingHiddens_1_Keyword_hiddens(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prInheritingHiddens().ele1KeywordHiddens();
	}	
}

// not supported
protected class InheritingHiddens_2_Keyword extends KeywordToken  {
	
	public InheritingHiddens_2_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prInheritingHiddens().ele2KeywordLeftParenthesis();
	}	
}

// not supported
protected class InheritingHiddens_3_Alternatives extends AlternativesToken {

	public InheritingHiddens_3_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.prInheritingHiddens().ele3Alternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new InheritingHiddens_3_0_Assignment_called(current, this);
			case 1: return new InheritingHiddens_3_1_Assignment_hidingCalled(current, this);
			default: return null;
		}
	}
}

// not supported
protected class InheritingHiddens_3_0_Assignment_called extends AssignmentToken  {
	
	public InheritingHiddens_3_0_Assignment_called(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prInheritingHiddens().ele30AssignmentCalled();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("called",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("called");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prInheritingHiddensCall().getRule().getType().getClassifier())) {
				Solution s = new InheritingHiddensCall_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

// not supported
protected class InheritingHiddens_3_1_Assignment_hidingCalled extends AssignmentToken  {
	
	public InheritingHiddens_3_1_Assignment_hidingCalled(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prInheritingHiddens().ele31AssignmentHidingCalled();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("hidingCalled",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("hidingCalled");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prHidingHiddens().getRule().getType().getClassifier())) {
				Solution s = new HidingHiddens_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}


// not supported
protected class InheritingHiddens_4_Keyword extends KeywordToken  {
	
	public InheritingHiddens_4_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prInheritingHiddens().ele4KeywordRightParenthesis();
	}	
}

// not supported
protected class InheritingHiddens_5_Assignment_valid extends AssignmentToken  {
	
	public InheritingHiddens_5_Assignment_valid(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prInheritingHiddens().ele5AssignmentValid();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("valid",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("valid");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prInheritingHiddens().ele50KeywordSemicolon();
			return new Solution(obj);
		}

		return null;
	}
}


/************ end Rule InheritingHiddens ****************/


/************ begin Rule DatatypeHiddens ****************
 *
 * not supported
 *
 **/


// not supported
protected class DatatypeHiddens_Group extends GroupToken {
	
	public DatatypeHiddens_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prDatatypeHiddens().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new DatatypeHiddens_1_Assignment_valid(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new DatatypeHiddens_0_Keyword_datatype(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class DatatypeHiddens_0_Keyword_datatype extends KeywordToken  {
	
	public DatatypeHiddens_0_Keyword_datatype(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prDatatypeHiddens().ele0KeywordDatatype();
	}	
}

// not supported
protected class DatatypeHiddens_1_Assignment_valid extends AssignmentToken  {
	
	public DatatypeHiddens_1_Assignment_valid(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prDatatypeHiddens().ele1AssignmentValid();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("valid",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("valid");

		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for datatype rule
			type = AssignmentType.PRC;
			element = grammarAccess.prDatatypeHiddens().ele10ParserRuleCallDatatypeRule();
			return new Solution(obj);
		}

		return null;
	}
}


/************ end Rule DatatypeHiddens ****************/



/************ begin Rule HidingHiddens ****************
 *
 * not supported
 *
 **/


// not supported
protected class HidingHiddens_Group extends GroupToken {
	
	public HidingHiddens_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prHidingHiddens().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new HidingHiddens_2_Assignment_called(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new HidingHiddens_1_Assignment_space(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new HidingHiddens_0_Keyword_hiding(s2.getCurrent(), s2.getPredecessor()).firstSolution();
			if(s3 != null) {
				last = s3.getPredecessor();
				return s3;
			} else {
				s2 = s2.getPredecessor().nextSolution(this,s2);
			}
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class HidingHiddens_0_Keyword_hiding extends KeywordToken  {
	
	public HidingHiddens_0_Keyword_hiding(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prHidingHiddens().ele0KeywordHiding();
	}	
}

// not supported
protected class HidingHiddens_1_Assignment_space extends AssignmentToken  {
	
	public HidingHiddens_1_Assignment_space(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prHidingHiddens().ele1AssignmentSpace();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("space",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("space");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prHidingHiddens().ele10TerminalRuleCallWS();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class HidingHiddens_2_Assignment_called extends AssignmentToken  {
	
	public HidingHiddens_2_Assignment_called(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prHidingHiddens().ele2AssignmentCalled();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("called",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("called");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prInheritingHiddensCall().getRule().getType().getClassifier())) {
				Solution s = new InheritingHiddensCall_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}


/************ end Rule HidingHiddens ****************/


/************ begin Rule InheritingHiddensCall ****************
 *
 * not supported
 *
 **/


// not supported
protected class InheritingHiddensCall_Group extends GroupToken {
	
	public InheritingHiddensCall_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prInheritingHiddensCall().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new InheritingHiddensCall_1_Assignment_valid(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new InheritingHiddensCall_0_Keyword_call(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// not supported
protected class InheritingHiddensCall_0_Keyword_call extends KeywordToken  {
	
	public InheritingHiddensCall_0_Keyword_call(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prInheritingHiddensCall().ele0KeywordCall();
	}	
}

// not supported
protected class InheritingHiddensCall_1_Assignment_valid extends AssignmentToken  {
	
	public InheritingHiddensCall_1_Assignment_valid(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prInheritingHiddensCall().ele1AssignmentValid();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("valid",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("valid");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prInheritingHiddensCall().ele10KeywordSemicolon();
			return new Solution(obj);
		}

		return null;
	}
}


/************ end Rule InheritingHiddensCall ****************/

}
