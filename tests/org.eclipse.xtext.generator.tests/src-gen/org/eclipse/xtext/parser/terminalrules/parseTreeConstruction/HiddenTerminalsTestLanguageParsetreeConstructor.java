/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.terminalrules.parseTreeConstruction;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor2;

import org.eclipse.xtext.parser.terminalrules.services.HiddenTerminalsTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class HiddenTerminalsTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor2 {
		
	@Inject
	private HiddenTerminalsTestLanguageGrammarAccess grammarAccess;
		
	public HiddenTerminalsTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken2 getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Alternatives(this, this, 0, inst);
			case 1: return new WithoutHiddens_Group(this, this, 1, inst);
			case 2: return new WithHiddens_Group(this, this, 2, inst);
			case 3: return new OverridingHiddens_Group(this, this, 3, inst);
			case 4: return new OverridingHiddensCall_Group(this, this, 4, inst);
			case 5: return new InheritingHiddens_Group(this, this, 5, inst);
			case 6: return new DatatypeHiddens_Group(this, this, 6, inst);
			case 7: return new HidingHiddens_Group(this, this, 7, inst);
			case 8: return new InheritingHiddensCall_Group(this, this, 8, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 *   WithoutHiddens|WithHiddens|OverridingHiddens|InheritingHiddens|DatatypeHiddens;
 *
 **/

// WithoutHiddens|WithHiddens|OverridingHiddens|InheritingHiddens|DatatypeHiddens
protected class Model_Alternatives extends AlternativesToken {

	public Model_Alternatives(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getModelAccess().getAlternatives();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_WithoutHiddensParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Model_WithHiddensParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Model_OverridingHiddensParserRuleCall_2(parent, this, 2, inst);
			case 3: return new Model_InheritingHiddensParserRuleCall_3(parent, this, 3, inst);
			case 4: return new Model_DatatypeHiddensParserRuleCall_4(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// WithoutHiddens
protected class Model_WithoutHiddensParserRuleCall_0 extends RuleCallToken {
	
	public Model_WithoutHiddensParserRuleCall_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelAccess().getWithoutHiddensParserRuleCall_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithoutHiddens_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(WithoutHiddens_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getWithoutHiddensRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// WithHiddens
protected class Model_WithHiddensParserRuleCall_1 extends RuleCallToken {
	
	public Model_WithHiddensParserRuleCall_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelAccess().getWithHiddensParserRuleCall_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithHiddens_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(WithHiddens_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getWithHiddensRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// OverridingHiddens
protected class Model_OverridingHiddensParserRuleCall_2 extends RuleCallToken {
	
	public Model_OverridingHiddensParserRuleCall_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelAccess().getOverridingHiddensParserRuleCall_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OverridingHiddens_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(OverridingHiddens_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getOverridingHiddensRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// InheritingHiddens
protected class Model_InheritingHiddensParserRuleCall_3 extends RuleCallToken {
	
	public Model_InheritingHiddensParserRuleCall_3(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelAccess().getInheritingHiddensParserRuleCall_3();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InheritingHiddens_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(InheritingHiddens_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getInheritingHiddensRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DatatypeHiddens
protected class Model_DatatypeHiddensParserRuleCall_4 extends RuleCallToken {
	
	public Model_DatatypeHiddensParserRuleCall_4(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelAccess().getDatatypeHiddensParserRuleCall_4();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DatatypeHiddens_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DatatypeHiddens_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDatatypeHiddensRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Model ****************/


/************ begin Rule WithoutHiddens ****************
 *
 * WithoutHiddens:
 *   "without" spaces+=WS "hiddens" spaces+=WS? valid?=";";
 *
 **/

// "without" spaces+=WS "hiddens" spaces+=WS? valid?=";"
protected class WithoutHiddens_Group extends GroupToken {
	
	public WithoutHiddens_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWithoutHiddensAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithoutHiddens_ValidAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getWithoutHiddensRule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// "without"
protected class WithoutHiddens_WithoutKeyword_0 extends KeywordToken  {
	
	public WithoutHiddens_WithoutKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWithoutHiddensAccess().getWithoutKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
}

// spaces+=WS
protected class WithoutHiddens_SpacesAssignment_1 extends AssignmentToken  {
	
	public WithoutHiddens_SpacesAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWithoutHiddensAccess().getSpacesAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithoutHiddens_WithoutKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("spaces",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("spaces");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getWithoutHiddensAccess().getSpacesWSTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "hiddens"
protected class WithoutHiddens_HiddensKeyword_2 extends KeywordToken  {
	
	public WithoutHiddens_HiddensKeyword_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWithoutHiddensAccess().getHiddensKeyword_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithoutHiddens_SpacesAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// spaces+=WS?
protected class WithoutHiddens_SpacesAssignment_3 extends AssignmentToken  {
	
	public WithoutHiddens_SpacesAssignment_3(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWithoutHiddensAccess().getSpacesAssignment_3();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithoutHiddens_HiddensKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("spaces",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("spaces");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getWithoutHiddensAccess().getSpacesWSTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// valid?=";"
protected class WithoutHiddens_ValidAssignment_4 extends AssignmentToken  {
	
	public WithoutHiddens_ValidAssignment_4(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWithoutHiddensAccess().getValidAssignment_4();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithoutHiddens_SpacesAssignment_3(parent, this, 0, inst);
			case 1: return new WithoutHiddens_HiddensKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("valid",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("valid");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getWithoutHiddensAccess().getValidSemicolonKeyword_4_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule WithoutHiddens ****************/


/************ begin Rule WithHiddens ****************
 *
 * WithHiddens hidden ( WS , ML_COMMENT , SL_COMMENT ):
 *   "with" "hiddens" valid?=";";
 *
 **/

// "with" "hiddens" valid?=";"
protected class WithHiddens_Group extends GroupToken {
	
	public WithHiddens_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWithHiddensAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithHiddens_ValidAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getWithHiddensRule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// "with"
protected class WithHiddens_WithKeyword_0 extends KeywordToken  {
	
	public WithHiddens_WithKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWithHiddensAccess().getWithKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
}

// "hiddens"
protected class WithHiddens_HiddensKeyword_1 extends KeywordToken  {
	
	public WithHiddens_HiddensKeyword_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWithHiddensAccess().getHiddensKeyword_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithHiddens_WithKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// valid?=";"
protected class WithHiddens_ValidAssignment_2 extends AssignmentToken  {
	
	public WithHiddens_ValidAssignment_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWithHiddensAccess().getValidAssignment_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WithHiddens_HiddensKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("valid",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("valid");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getWithHiddensAccess().getValidSemicolonKeyword_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule WithHiddens ****************/


/************ begin Rule OverridingHiddens ****************
 *
 * OverridingHiddens hidden ( WS , ML_COMMENT , SL_COMMENT ):
 *   "overriding" "hiddens" "(" called=OverridingHiddensCall ")" valid?=";";
 *
 **/

// "overriding" "hiddens" "(" called=OverridingHiddensCall ")" valid?=";"
protected class OverridingHiddens_Group extends GroupToken {
	
	public OverridingHiddens_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOverridingHiddensAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OverridingHiddens_ValidAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOverridingHiddensRule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// "overriding"
protected class OverridingHiddens_OverridingKeyword_0 extends KeywordToken  {
	
	public OverridingHiddens_OverridingKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOverridingHiddensAccess().getOverridingKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
}

// "hiddens"
protected class OverridingHiddens_HiddensKeyword_1 extends KeywordToken  {
	
	public OverridingHiddens_HiddensKeyword_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOverridingHiddensAccess().getHiddensKeyword_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OverridingHiddens_OverridingKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class OverridingHiddens_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public OverridingHiddens_LeftParenthesisKeyword_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOverridingHiddensAccess().getLeftParenthesisKeyword_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OverridingHiddens_HiddensKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// called=OverridingHiddensCall
protected class OverridingHiddens_CalledAssignment_3 extends AssignmentToken  {
	
	public OverridingHiddens_CalledAssignment_3(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOverridingHiddensAccess().getCalledAssignment_3();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OverridingHiddensCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("called",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("called");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOverridingHiddensCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC; 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OverridingHiddens_LeftParenthesisKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class OverridingHiddens_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public OverridingHiddens_RightParenthesisKeyword_4(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOverridingHiddensAccess().getRightParenthesisKeyword_4();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OverridingHiddens_CalledAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// valid?=";"
protected class OverridingHiddens_ValidAssignment_5 extends AssignmentToken  {
	
	public OverridingHiddens_ValidAssignment_5(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOverridingHiddensAccess().getValidAssignment_5();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OverridingHiddens_RightParenthesisKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("valid",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("valid");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getOverridingHiddensAccess().getValidSemicolonKeyword_5_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule OverridingHiddens ****************/


/************ begin Rule OverridingHiddensCall ****************
 *
 * OverridingHiddensCall hidden ( ):
 *   "call" spaces+=WS? valid?=";";
 *
 **/

// "call" spaces+=WS? valid?=";"
protected class OverridingHiddensCall_Group extends GroupToken {
	
	public OverridingHiddensCall_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOverridingHiddensCallAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OverridingHiddensCall_ValidAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOverridingHiddensCallRule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// "call"
protected class OverridingHiddensCall_CallKeyword_0 extends KeywordToken  {
	
	public OverridingHiddensCall_CallKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOverridingHiddensCallAccess().getCallKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
}

// spaces+=WS?
protected class OverridingHiddensCall_SpacesAssignment_1 extends AssignmentToken  {
	
	public OverridingHiddensCall_SpacesAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOverridingHiddensCallAccess().getSpacesAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OverridingHiddensCall_CallKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("spaces",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("spaces");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getOverridingHiddensCallAccess().getSpacesWSTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// valid?=";"
protected class OverridingHiddensCall_ValidAssignment_2 extends AssignmentToken  {
	
	public OverridingHiddensCall_ValidAssignment_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOverridingHiddensCallAccess().getValidAssignment_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OverridingHiddensCall_SpacesAssignment_1(parent, this, 0, inst);
			case 1: return new OverridingHiddensCall_CallKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("valid",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("valid");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getOverridingHiddensCallAccess().getValidSemicolonKeyword_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule OverridingHiddensCall ****************/


/************ begin Rule InheritingHiddens ****************
 *
 * InheritingHiddens hidden ( WS , ML_COMMENT , SL_COMMENT ):
 *   "inheriting" "hiddens" "(" (called=InheritingHiddensCall|hidingCalled=HidingHiddens) ")" valid?=";";
 *
 **/

// "inheriting" "hiddens" "(" (called=InheritingHiddensCall|hidingCalled=HidingHiddens) ")" valid?=";"
protected class InheritingHiddens_Group extends GroupToken {
	
	public InheritingHiddens_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInheritingHiddensAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InheritingHiddens_ValidAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getInheritingHiddensRule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// "inheriting"
protected class InheritingHiddens_InheritingKeyword_0 extends KeywordToken  {
	
	public InheritingHiddens_InheritingKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInheritingHiddensAccess().getInheritingKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
}

// "hiddens"
protected class InheritingHiddens_HiddensKeyword_1 extends KeywordToken  {
	
	public InheritingHiddens_HiddensKeyword_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInheritingHiddensAccess().getHiddensKeyword_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InheritingHiddens_InheritingKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class InheritingHiddens_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public InheritingHiddens_LeftParenthesisKeyword_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInheritingHiddensAccess().getLeftParenthesisKeyword_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InheritingHiddens_HiddensKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// called=InheritingHiddensCall|hidingCalled=HidingHiddens
protected class InheritingHiddens_Alternatives_3 extends AlternativesToken {

	public InheritingHiddens_Alternatives_3(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getInheritingHiddensAccess().getAlternatives_3();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InheritingHiddens_CalledAssignment_3_0(parent, this, 0, inst);
			case 1: return new InheritingHiddens_HidingCalledAssignment_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// called=InheritingHiddensCall
protected class InheritingHiddens_CalledAssignment_3_0 extends AssignmentToken  {
	
	public InheritingHiddens_CalledAssignment_3_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInheritingHiddensAccess().getCalledAssignment_3_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InheritingHiddensCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("called",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("called");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInheritingHiddensCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC; 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InheritingHiddens_LeftParenthesisKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// hidingCalled=HidingHiddens
protected class InheritingHiddens_HidingCalledAssignment_3_1 extends AssignmentToken  {
	
	public InheritingHiddens_HidingCalledAssignment_3_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInheritingHiddensAccess().getHidingCalledAssignment_3_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new HidingHiddens_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("hidingCalled",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("hidingCalled");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getHidingHiddensRule().getType().getClassifier())) {
				type = AssignmentType.PRC; 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InheritingHiddens_LeftParenthesisKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class InheritingHiddens_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public InheritingHiddens_RightParenthesisKeyword_4(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInheritingHiddensAccess().getRightParenthesisKeyword_4();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InheritingHiddens_Alternatives_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// valid?=";"
protected class InheritingHiddens_ValidAssignment_5 extends AssignmentToken  {
	
	public InheritingHiddens_ValidAssignment_5(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInheritingHiddensAccess().getValidAssignment_5();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InheritingHiddens_RightParenthesisKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("valid",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("valid");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getInheritingHiddensAccess().getValidSemicolonKeyword_5_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule InheritingHiddens ****************/


/************ begin Rule DatatypeHiddens ****************
 *
 * DatatypeHiddens:
 *   "datatype" valid?=DatatypeRule;
 *
 **/

// "datatype" valid?=DatatypeRule
protected class DatatypeHiddens_Group extends GroupToken {
	
	public DatatypeHiddens_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDatatypeHiddensAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DatatypeHiddens_ValidAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDatatypeHiddensRule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// "datatype"
protected class DatatypeHiddens_DatatypeKeyword_0 extends KeywordToken  {
	
	public DatatypeHiddens_DatatypeKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDatatypeHiddensAccess().getDatatypeKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
}

// valid?=DatatypeRule
protected class DatatypeHiddens_ValidAssignment_1 extends AssignmentToken  {
	
	public DatatypeHiddens_ValidAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDatatypeHiddensAccess().getValidAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DatatypeHiddens_DatatypeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("valid",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("valid");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.PRC;
			element = grammarAccess.getDatatypeHiddensAccess().getValidDatatypeRuleParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule DatatypeHiddens ****************/



/************ begin Rule HidingHiddens ****************
 *
 * HidingHiddens hidden ( ):
 *   "hiding" space=WS called=InheritingHiddensCall;
 *
 **/

// "hiding" space=WS called=InheritingHiddensCall
protected class HidingHiddens_Group extends GroupToken {
	
	public HidingHiddens_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getHidingHiddensAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new HidingHiddens_CalledAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getHidingHiddensRule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// "hiding"
protected class HidingHiddens_HidingKeyword_0 extends KeywordToken  {
	
	public HidingHiddens_HidingKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getHidingHiddensAccess().getHidingKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
}

// space=WS
protected class HidingHiddens_SpaceAssignment_1 extends AssignmentToken  {
	
	public HidingHiddens_SpaceAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getHidingHiddensAccess().getSpaceAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new HidingHiddens_HidingKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("space",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("space");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getHidingHiddensAccess().getSpaceWSTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// called=InheritingHiddensCall
protected class HidingHiddens_CalledAssignment_2 extends AssignmentToken  {
	
	public HidingHiddens_CalledAssignment_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getHidingHiddensAccess().getCalledAssignment_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InheritingHiddensCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("called",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("called");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInheritingHiddensCallRule().getType().getClassifier())) {
				type = AssignmentType.PRC; 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new HidingHiddens_SpaceAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule HidingHiddens ****************/


/************ begin Rule InheritingHiddensCall ****************
 *
 * InheritingHiddensCall:
 *   "call" valid?=";";
 *
 **/

// "call" valid?=";"
protected class InheritingHiddensCall_Group extends GroupToken {
	
	public InheritingHiddensCall_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInheritingHiddensCallAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InheritingHiddensCall_ValidAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getInheritingHiddensCallRule().getType().getClassifier())) return null;
  
		return tryConsumeVal();
	}
}

// "call"
protected class InheritingHiddensCall_CallKeyword_0 extends KeywordToken  {
	
	public InheritingHiddensCall_CallKeyword_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInheritingHiddensCallAccess().getCallKeyword_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
  
		return tryConsumeVal();
	}
}

// valid?=";"
protected class InheritingHiddensCall_ValidAssignment_1 extends AssignmentToken  {
	
	public InheritingHiddensCall_ValidAssignment_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInheritingHiddensCallAccess().getValidAssignment_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InheritingHiddensCall_CallKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("valid",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("valid");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getInheritingHiddensCallAccess().getValidSemicolonKeyword_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule InheritingHiddensCall ****************/

}
