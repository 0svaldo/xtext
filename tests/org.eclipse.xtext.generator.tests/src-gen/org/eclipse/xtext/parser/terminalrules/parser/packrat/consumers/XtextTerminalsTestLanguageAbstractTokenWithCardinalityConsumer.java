/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;

import org.eclipse.xtext.parser.terminalrules.services.XtextTerminalsTestLanguageGrammarAccess.AbstractTokenWithCardinalityElements;

public final class XtextTerminalsTestLanguageAbstractTokenWithCardinalityConsumer extends NonTerminalConsumer {

	private AbstractTokenWithCardinalityElements rule;	

	private INonTerminalConsumer abstractTerminalConsumer;

	private INonTerminalConsumer assignmentConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer alternatives$2$Consumer;

	private IElementConsumer ruleCall$3$Consumer;

	private IElementConsumer ruleCall$4$Consumer;

	private IElementConsumer assignment$5$Consumer;

	private IElementConsumer alternatives$6$Consumer;

	private IElementConsumer keyword$7$Consumer;

	private IElementConsumer keyword$8$Consumer;

	private IElementConsumer keyword$9$Consumer;

	private ICharacterClass keyword$7$Delimiter;

	private ICharacterClass keyword$8$Delimiter;

	private ICharacterClass keyword$9$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(alternatives$2$Consumer);
			acceptor.accept(assignment$5$Consumer);
		}
	}

	protected class Alternatives$2$Consumer extends AlternativesConsumer {
		
		protected Alternatives$2$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(ruleCall$3$Consumer);
			acceptor.accept(ruleCall$4$Consumer);
		}
	}

	protected class RuleCall$3$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$3$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(assignmentConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$4$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$4$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(abstractTerminalConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$5$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$5$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return alternatives$6$Consumer;
		}
	}

	protected class Alternatives$6$Consumer extends AlternativesConsumer {
		
		protected Alternatives$6$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$7$Consumer);
			acceptor.accept(keyword$8$Consumer);
			acceptor.accept(keyword$9$Consumer);
		}
	}

	protected class Keyword$7$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$7$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "cardinality", false, false, getKeyword$7$Delimiter(), optional);
		}
	}

	protected class Keyword$8$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$8$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "cardinality", false, false, getKeyword$8$Delimiter(), optional);
		}
	}

	protected class Keyword$9$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$9$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "cardinality", false, false, getKeyword$9$Delimiter(), optional);
		}
	}

	public XtextTerminalsTestLanguageAbstractTokenWithCardinalityConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$7$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$8$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$9$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public AbstractTokenWithCardinalityElements getRule() {
		return rule;
	}
	
	public void setRule(AbstractTokenWithCardinalityElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		alternatives$2$Consumer = new Alternatives$2$Consumer(rule.getAlternatives_0());
		ruleCall$3$Consumer = new RuleCall$3$Consumer(rule.getAssignmentParserRuleCall_0_0());
		ruleCall$4$Consumer = new RuleCall$4$Consumer(rule.getAbstractTerminalParserRuleCall_0_1());
		assignment$5$Consumer = new Assignment$5$Consumer(rule.getCardinalityAssignment_1());
		alternatives$6$Consumer = new Alternatives$6$Consumer(rule.getCardinalityAlternatives_1_0());
		keyword$7$Consumer = new Keyword$7$Consumer(rule.getCardinalityQuestionMarkKeyword_1_0_0());
		keyword$8$Consumer = new Keyword$8$Consumer(rule.getCardinalityAsteriskKeyword_1_0_1());
		keyword$9$Consumer = new Keyword$9$Consumer(rule.getCardinalityPlusSignKeyword_1_0_2());
		keyword$7$Consumer = new Keyword$7$Consumer(rule.getCardinalityQuestionMarkKeyword_1_0_0());
		keyword$8$Consumer = new Keyword$8$Consumer(rule.getCardinalityAsteriskKeyword_1_0_1());
		keyword$9$Consumer = new Keyword$9$Consumer(rule.getCardinalityPlusSignKeyword_1_0_2());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setAbstractTerminalConsumer(INonTerminalConsumer abstractTerminalConsumer) {
		this.abstractTerminalConsumer = abstractTerminalConsumer;
	}
	
	public void setAssignmentConsumer(INonTerminalConsumer assignmentConsumer) {
		this.assignmentConsumer = assignmentConsumer;
	}
	
	public ICharacterClass getKeyword$7$Delimiter() {
		return keyword$7$Delimiter;
	}
	
	public void setKeyword$7$Delimiter(ICharacterClass characterClass) {
		keyword$7$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$8$Delimiter() {
		return keyword$8$Delimiter;
	}
	
	public void setKeyword$8$Delimiter(ICharacterClass characterClass) {
		keyword$8$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$9$Delimiter() {
		return keyword$9$Delimiter;
	}
	
	public void setKeyword$9$Delimiter(ICharacterClass characterClass) {
		keyword$9$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
