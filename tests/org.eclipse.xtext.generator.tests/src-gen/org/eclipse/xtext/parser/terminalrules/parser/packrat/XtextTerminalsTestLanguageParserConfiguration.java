/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.terminalrules.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.parser.terminalrules.services.XtextTerminalsTestLanguageGrammarAccess;

import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageGrammarConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageGrammarIDConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageAbstractRuleConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageAbstractMetamodelDeclarationConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageGeneratedMetamodelConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageReferencedMetamodelConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageParserRuleConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageTerminalRuleConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageTypeRefConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageAlternativesConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageTerminalAlternativesConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageGroupConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageTerminalGroupConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageAbstractTokenConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageTerminalTokenConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageAssignmentConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageActionConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageAbstractTerminalConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageTerminalTokenElementConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageAbstractNegatedTokenConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageNegatedTokenConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageUpToTokenConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageWildcardConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageCharacterRangeConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageCrossReferenceConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageParenthesizedElementConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageParenthesizedTerminalElementConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageKeywordConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageRuleCallConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageIDConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageINTConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageSTRINGConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageML_COMMENTConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageSL_COMMENTConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageWSConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.XtextTerminalsTestLanguageANY_OTHERConsumer;

public class XtextTerminalsTestLanguageParserConfiguration extends AbstractParserConfiguration {

    private XtextTerminalsTestLanguageGrammarConsumer grammarConsumer;
    private XtextTerminalsTestLanguageGrammarIDConsumer grammarIdConsumer;
    private XtextTerminalsTestLanguageAbstractRuleConsumer abstractRuleConsumer;
    private XtextTerminalsTestLanguageAbstractMetamodelDeclarationConsumer abstractMetamodelDeclarationConsumer;
    private XtextTerminalsTestLanguageGeneratedMetamodelConsumer generatedMetamodelConsumer;
    private XtextTerminalsTestLanguageReferencedMetamodelConsumer referencedMetamodelConsumer;
    private XtextTerminalsTestLanguageParserRuleConsumer parserRuleConsumer;
    private XtextTerminalsTestLanguageTerminalRuleConsumer terminalRuleConsumer;
    private XtextTerminalsTestLanguageTypeRefConsumer typeRefConsumer;
    private XtextTerminalsTestLanguageAlternativesConsumer alternativesConsumer;
    private XtextTerminalsTestLanguageTerminalAlternativesConsumer terminalAlternativesConsumer;
    private XtextTerminalsTestLanguageGroupConsumer groupConsumer;
    private XtextTerminalsTestLanguageTerminalGroupConsumer terminalGroupConsumer;
    private XtextTerminalsTestLanguageAbstractTokenConsumer abstractTokenConsumer;
    private XtextTerminalsTestLanguageTerminalTokenConsumer terminalTokenConsumer;
    private XtextTerminalsTestLanguageAssignmentConsumer assignmentConsumer;
    private XtextTerminalsTestLanguageActionConsumer actionConsumer;
    private XtextTerminalsTestLanguageAbstractTerminalConsumer abstractTerminalConsumer;
    private XtextTerminalsTestLanguageTerminalTokenElementConsumer terminalTokenElementConsumer;
    private XtextTerminalsTestLanguageAbstractNegatedTokenConsumer abstractNegatedTokenConsumer;
    private XtextTerminalsTestLanguageNegatedTokenConsumer negatedTokenConsumer;
    private XtextTerminalsTestLanguageUpToTokenConsumer upToTokenConsumer;
    private XtextTerminalsTestLanguageWildcardConsumer wildcardConsumer;
    private XtextTerminalsTestLanguageCharacterRangeConsumer characterRangeConsumer;
    private XtextTerminalsTestLanguageCrossReferenceConsumer crossReferenceConsumer;
    private XtextTerminalsTestLanguageParenthesizedElementConsumer parenthesizedElementConsumer;
    private XtextTerminalsTestLanguageParenthesizedTerminalElementConsumer parenthesizedTerminalElementConsumer;
    private XtextTerminalsTestLanguageKeywordConsumer keywordConsumer;
    private XtextTerminalsTestLanguageRuleCallConsumer ruleCallConsumer;
    private XtextTerminalsTestLanguageIDConsumer idConsumer;
    private XtextTerminalsTestLanguageINTConsumer intConsumer;
    private XtextTerminalsTestLanguageSTRINGConsumer stringConsumer;
    private XtextTerminalsTestLanguageML_COMMENTConsumer mlCommentConsumer;
    private XtextTerminalsTestLanguageSL_COMMENTConsumer slCommentConsumer;
    private XtextTerminalsTestLanguageWSConsumer wsConsumer;
    private XtextTerminalsTestLanguageANY_OTHERConsumer anyOtherConsumer;

	private XtextTerminalsTestLanguageGrammarAccess grammarAccess;

	public XtextTerminalsTestLanguageParserConfiguration(IInternalParserConfiguration configuration, XtextTerminalsTestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
	}

	public XtextTerminalsTestLanguageGrammarConsumer getRootConsumer() {
		return grammarConsumer;
	} 

	public void createNonTerminalConsumers() {
		grammarConsumer = new XtextTerminalsTestLanguageGrammarConsumer(
    		this, null
    	);
		grammarIdConsumer = new XtextTerminalsTestLanguageGrammarIDConsumer(
    		this, null
    	);
		abstractRuleConsumer = new XtextTerminalsTestLanguageAbstractRuleConsumer(
    		this, null
    	);
		abstractMetamodelDeclarationConsumer = new XtextTerminalsTestLanguageAbstractMetamodelDeclarationConsumer(
    		this, null
    	);
		generatedMetamodelConsumer = new XtextTerminalsTestLanguageGeneratedMetamodelConsumer(
    		this, null
    	);
		referencedMetamodelConsumer = new XtextTerminalsTestLanguageReferencedMetamodelConsumer(
    		this, null
    	);
		parserRuleConsumer = new XtextTerminalsTestLanguageParserRuleConsumer(
    		this, null
    	);
		terminalRuleConsumer = new XtextTerminalsTestLanguageTerminalRuleConsumer(
    		this, null
    	);
		typeRefConsumer = new XtextTerminalsTestLanguageTypeRefConsumer(
    		this, null
    	);
		alternativesConsumer = new XtextTerminalsTestLanguageAlternativesConsumer(
    		this, null
    	);
		terminalAlternativesConsumer = new XtextTerminalsTestLanguageTerminalAlternativesConsumer(
    		this, null
    	);
		groupConsumer = new XtextTerminalsTestLanguageGroupConsumer(
    		this, null
    	);
		terminalGroupConsumer = new XtextTerminalsTestLanguageTerminalGroupConsumer(
    		this, null
    	);
		abstractTokenConsumer = new XtextTerminalsTestLanguageAbstractTokenConsumer(
    		this, null
    	);
		terminalTokenConsumer = new XtextTerminalsTestLanguageTerminalTokenConsumer(
    		this, null
    	);
		assignmentConsumer = new XtextTerminalsTestLanguageAssignmentConsumer(
    		this, null
    	);
		actionConsumer = new XtextTerminalsTestLanguageActionConsumer(
    		this, null
    	);
		abstractTerminalConsumer = new XtextTerminalsTestLanguageAbstractTerminalConsumer(
    		this, null
    	);
		terminalTokenElementConsumer = new XtextTerminalsTestLanguageTerminalTokenElementConsumer(
    		this, null
    	);
		abstractNegatedTokenConsumer = new XtextTerminalsTestLanguageAbstractNegatedTokenConsumer(
    		this, null
    	);
		negatedTokenConsumer = new XtextTerminalsTestLanguageNegatedTokenConsumer(
    		this, null
    	);
		upToTokenConsumer = new XtextTerminalsTestLanguageUpToTokenConsumer(
    		this, null
    	);
		wildcardConsumer = new XtextTerminalsTestLanguageWildcardConsumer(
    		this, null
    	);
		characterRangeConsumer = new XtextTerminalsTestLanguageCharacterRangeConsumer(
    		this, null
    	);
		crossReferenceConsumer = new XtextTerminalsTestLanguageCrossReferenceConsumer(
    		this, null
    	);
		parenthesizedElementConsumer = new XtextTerminalsTestLanguageParenthesizedElementConsumer(
    		this, null
    	);
		parenthesizedTerminalElementConsumer = new XtextTerminalsTestLanguageParenthesizedTerminalElementConsumer(
    		this, null
    	);
		keywordConsumer = new XtextTerminalsTestLanguageKeywordConsumer(
    		this, null
    	);
		ruleCallConsumer = new XtextTerminalsTestLanguageRuleCallConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		idConsumer = new XtextTerminalsTestLanguageIDConsumer(this);
		intConsumer = new XtextTerminalsTestLanguageINTConsumer(this);
		stringConsumer = new XtextTerminalsTestLanguageSTRINGConsumer(this);
		mlCommentConsumer = new XtextTerminalsTestLanguageML_COMMENTConsumer(this);
		slCommentConsumer = new XtextTerminalsTestLanguageSL_COMMENTConsumer(this);
		wsConsumer = new XtextTerminalsTestLanguageWSConsumer(this);
		anyOtherConsumer = new XtextTerminalsTestLanguageANY_OTHERConsumer(this);
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getGrammarConsumer().setRule(grammarAccess.prGrammar());
		getGrammarIdConsumer().setRule(grammarAccess.prGrammarID());
		getAbstractRuleConsumer().setRule(grammarAccess.prAbstractRule());
		getAbstractMetamodelDeclarationConsumer().setRule(grammarAccess.prAbstractMetamodelDeclaration());
		getGeneratedMetamodelConsumer().setRule(grammarAccess.prGeneratedMetamodel());
		getReferencedMetamodelConsumer().setRule(grammarAccess.prReferencedMetamodel());
		getParserRuleConsumer().setRule(grammarAccess.prParserRule());
		getTerminalRuleConsumer().setRule(grammarAccess.prTerminalRule());
		getTypeRefConsumer().setRule(grammarAccess.prTypeRef());
		getAlternativesConsumer().setRule(grammarAccess.prAlternatives());
		getTerminalAlternativesConsumer().setRule(grammarAccess.prTerminalAlternatives());
		getGroupConsumer().setRule(grammarAccess.prGroup());
		getTerminalGroupConsumer().setRule(grammarAccess.prTerminalGroup());
		getAbstractTokenConsumer().setRule(grammarAccess.prAbstractToken());
		getTerminalTokenConsumer().setRule(grammarAccess.prTerminalToken());
		getAssignmentConsumer().setRule(grammarAccess.prAssignment());
		getActionConsumer().setRule(grammarAccess.prAction());
		getAbstractTerminalConsumer().setRule(grammarAccess.prAbstractTerminal());
		getTerminalTokenElementConsumer().setRule(grammarAccess.prTerminalTokenElement());
		getAbstractNegatedTokenConsumer().setRule(grammarAccess.prAbstractNegatedToken());
		getNegatedTokenConsumer().setRule(grammarAccess.prNegatedToken());
		getUpToTokenConsumer().setRule(grammarAccess.prUpToToken());
		getWildcardConsumer().setRule(grammarAccess.prWildcard());
		getCharacterRangeConsumer().setRule(grammarAccess.prCharacterRange());
		getCrossReferenceConsumer().setRule(grammarAccess.prCrossReference());
		getParenthesizedElementConsumer().setRule(grammarAccess.prParenthesizedElement());
		getParenthesizedTerminalElementConsumer().setRule(grammarAccess.prParenthesizedTerminalElement());
		getKeywordConsumer().setRule(grammarAccess.prKeyword());
		getRuleCallConsumer().setRule(grammarAccess.prRuleCall());
		getIdConsumer().setRule(grammarAccess.trID());
		getIntConsumer().setRule(grammarAccess.trINT());
		getStringConsumer().setRule(grammarAccess.trSTRING());
		getMlCommentConsumer().setRule(grammarAccess.trML_COMMENT());
		getSlCommentConsumer().setRule(grammarAccess.trSL_COMMENT());
		getWsConsumer().setRule(grammarAccess.trWS());
		getAnyOtherConsumer().setRule(grammarAccess.trANY_OTHER());


		getGrammarConsumer().setAbstractMetamodelDeclarationConsumer(getAbstractMetamodelDeclarationConsumer());
		getGrammarConsumer().setAbstractRuleConsumer(getAbstractRuleConsumer());
		getGrammarConsumer().setGrammarIdConsumer(getGrammarIdConsumer());
		getGrammarConsumer().setIdConsumer(getIdConsumer());

		getGrammarIdConsumer().setIdConsumer(getIdConsumer());

		getAbstractRuleConsumer().setParserRuleConsumer(getParserRuleConsumer());
		getAbstractRuleConsumer().setTerminalRuleConsumer(getTerminalRuleConsumer());

		getAbstractMetamodelDeclarationConsumer().setGeneratedMetamodelConsumer(getGeneratedMetamodelConsumer());
		getAbstractMetamodelDeclarationConsumer().setReferencedMetamodelConsumer(getReferencedMetamodelConsumer());

		getGeneratedMetamodelConsumer().setIdConsumer(getIdConsumer());
		getGeneratedMetamodelConsumer().setStringConsumer(getStringConsumer());

		getReferencedMetamodelConsumer().setIdConsumer(getIdConsumer());
		getReferencedMetamodelConsumer().setStringConsumer(getStringConsumer());

		getParserRuleConsumer().setAlternativesConsumer(getAlternativesConsumer());
		getParserRuleConsumer().setIdConsumer(getIdConsumer());
		getParserRuleConsumer().setTypeRefConsumer(getTypeRefConsumer());

		getTerminalRuleConsumer().setIdConsumer(getIdConsumer());
		getTerminalRuleConsumer().setTerminalAlternativesConsumer(getTerminalAlternativesConsumer());
		getTerminalRuleConsumer().setTypeRefConsumer(getTypeRefConsumer());

		getTypeRefConsumer().setIdConsumer(getIdConsumer());

		getAlternativesConsumer().setGroupConsumer(getGroupConsumer());

		getTerminalAlternativesConsumer().setTerminalGroupConsumer(getTerminalGroupConsumer());

		getGroupConsumer().setAbstractTokenConsumer(getAbstractTokenConsumer());

		getTerminalGroupConsumer().setTerminalTokenConsumer(getTerminalTokenConsumer());

		getAbstractTokenConsumer().setAbstractTerminalConsumer(getAbstractTerminalConsumer());
		getAbstractTokenConsumer().setActionConsumer(getActionConsumer());
		getAbstractTokenConsumer().setAssignmentConsumer(getAssignmentConsumer());

		getTerminalTokenConsumer().setTerminalTokenElementConsumer(getTerminalTokenElementConsumer());

		getAssignmentConsumer().setAbstractTerminalConsumer(getAbstractTerminalConsumer());
		getAssignmentConsumer().setIdConsumer(getIdConsumer());

		getActionConsumer().setIdConsumer(getIdConsumer());
		getActionConsumer().setTypeRefConsumer(getTypeRefConsumer());

		getAbstractTerminalConsumer().setCrossReferenceConsumer(getCrossReferenceConsumer());
		getAbstractTerminalConsumer().setKeywordConsumer(getKeywordConsumer());
		getAbstractTerminalConsumer().setParenthesizedElementConsumer(getParenthesizedElementConsumer());
		getAbstractTerminalConsumer().setRuleCallConsumer(getRuleCallConsumer());

		getTerminalTokenElementConsumer().setAbstractNegatedTokenConsumer(getAbstractNegatedTokenConsumer());
		getTerminalTokenElementConsumer().setCharacterRangeConsumer(getCharacterRangeConsumer());
		getTerminalTokenElementConsumer().setParenthesizedTerminalElementConsumer(getParenthesizedTerminalElementConsumer());
		getTerminalTokenElementConsumer().setRuleCallConsumer(getRuleCallConsumer());
		getTerminalTokenElementConsumer().setWildcardConsumer(getWildcardConsumer());

		getAbstractNegatedTokenConsumer().setNegatedTokenConsumer(getNegatedTokenConsumer());
		getAbstractNegatedTokenConsumer().setUpToTokenConsumer(getUpToTokenConsumer());

		getNegatedTokenConsumer().setTerminalTokenElementConsumer(getTerminalTokenElementConsumer());

		getUpToTokenConsumer().setTerminalTokenElementConsumer(getTerminalTokenElementConsumer());

		getCharacterRangeConsumer().setKeywordConsumer(getKeywordConsumer());

		getCrossReferenceConsumer().setIdConsumer(getIdConsumer());
		getCrossReferenceConsumer().setTypeRefConsumer(getTypeRefConsumer());

		getParenthesizedElementConsumer().setAlternativesConsumer(getAlternativesConsumer());

		getParenthesizedTerminalElementConsumer().setTerminalAlternativesConsumer(getTerminalAlternativesConsumer());

		getKeywordConsumer().setStringConsumer(getStringConsumer());

		getRuleCallConsumer().setIdConsumer(getIdConsumer());

		getGrammarConsumer().setCrossReference$28$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.crossReference$31$Delimiter);
		getGrammarConsumer().setCrossReference$33$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.crossReference$31$Delimiter);
		getGrammarConsumer().setKeyword$11$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$9$Delimiter);
		getGrammarConsumer().setKeyword$16$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getGrammarConsumer().setKeyword$24$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$9$Delimiter);
		getGrammarConsumer().setKeyword$25$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getGrammarConsumer().setKeyword$31$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getGrammarConsumer().setKeyword$35$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getGrammarConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$9$Delimiter);
		getGrammarIdConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getGrammarIdConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.crossReference$31$Delimiter);
		getGrammarIdConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.crossReference$31$Delimiter);
		getGeneratedMetamodelConsumer().setCrossReference$8$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.crossReference$69$Delimiter);
		getGeneratedMetamodelConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$9$Delimiter);
		getGeneratedMetamodelConsumer().setKeyword$11$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$9$Delimiter);
		getGeneratedMetamodelConsumer().setRuleCall$6$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.crossReference$31$Delimiter);
		getGeneratedMetamodelConsumer().setRuleCall$13$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.crossReference$31$Delimiter);
		getReferencedMetamodelConsumer().setCrossReference$5$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.crossReference$69$Delimiter);
		getReferencedMetamodelConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$9$Delimiter);
		getReferencedMetamodelConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$9$Delimiter);
		getReferencedMetamodelConsumer().setRuleCall$10$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.crossReference$31$Delimiter);
		getParserRuleConsumer().setCrossReference$20$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.crossReference$31$Delimiter);
		getParserRuleConsumer().setCrossReference$25$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.crossReference$31$Delimiter);
		getParserRuleConsumer().setKeyword$16$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$9$Delimiter);
		getParserRuleConsumer().setKeyword$17$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getParserRuleConsumer().setKeyword$23$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getParserRuleConsumer().setKeyword$27$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getParserRuleConsumer().setKeyword$28$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getParserRuleConsumer().setKeyword$31$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getParserRuleConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$9$Delimiter);
		getParserRuleConsumer().setRuleCall$7$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.crossReference$31$Delimiter);
		getTerminalRuleConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$9$Delimiter);
		getTerminalRuleConsumer().setKeyword$10$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$9$Delimiter);
		getTerminalRuleConsumer().setKeyword$13$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getTerminalRuleConsumer().setKeyword$16$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getTerminalRuleConsumer().setRuleCall$8$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.crossReference$31$Delimiter);
		getTypeRefConsumer().setCrossReference$4$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.crossReference$31$Delimiter);
		getTypeRefConsumer().setCrossReference$8$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.crossReference$31$Delimiter);
		getTypeRefConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getAlternativesConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getTerminalAlternativesConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getAbstractTokenConsumer().setKeyword$10$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getAbstractTokenConsumer().setKeyword$11$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getAbstractTokenConsumer().setKeyword$12$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getTerminalTokenConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getTerminalTokenConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getTerminalTokenConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getAssignmentConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getAssignmentConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getAssignmentConsumer().setKeyword$10$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getAssignmentConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.crossReference$31$Delimiter);
		getActionConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getActionConsumer().setKeyword$10$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$9$Delimiter);
		getActionConsumer().setKeyword$11$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getActionConsumer().setKeyword$14$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getActionConsumer().setKeyword$19$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getActionConsumer().setKeyword$20$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getActionConsumer().setKeyword$21$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$9$Delimiter);
		getActionConsumer().setKeyword$22$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getActionConsumer().setRuleCall$16$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.crossReference$31$Delimiter);
		getNegatedTokenConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getUpToTokenConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getWildcardConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getCharacterRangeConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getCrossReferenceConsumer().setCrossReference$10$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.crossReference$31$Delimiter);
		getCrossReferenceConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getCrossReferenceConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getCrossReferenceConsumer().setKeyword$12$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getParenthesizedElementConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getParenthesizedElementConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getParenthesizedTerminalElementConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getParenthesizedTerminalElementConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.keyword$19$Delimiter);
		getKeywordConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.crossReference$69$Delimiter);
		getRuleCallConsumer().setCrossReference$2$Delimiter(org.eclipse.xtext.parser.terminalrules.parser.packrat.XtextTerminalsTestLanguageDelimiters.crossReference$31$Delimiter);
	}
	
    public XtextTerminalsTestLanguageGrammarConsumer getGrammarConsumer() {
    	return grammarConsumer;
    }

    public XtextTerminalsTestLanguageGrammarIDConsumer getGrammarIdConsumer() {
    	return grammarIdConsumer;
    }

    public XtextTerminalsTestLanguageAbstractRuleConsumer getAbstractRuleConsumer() {
    	return abstractRuleConsumer;
    }

    public XtextTerminalsTestLanguageAbstractMetamodelDeclarationConsumer getAbstractMetamodelDeclarationConsumer() {
    	return abstractMetamodelDeclarationConsumer;
    }

    public XtextTerminalsTestLanguageGeneratedMetamodelConsumer getGeneratedMetamodelConsumer() {
    	return generatedMetamodelConsumer;
    }

    public XtextTerminalsTestLanguageReferencedMetamodelConsumer getReferencedMetamodelConsumer() {
    	return referencedMetamodelConsumer;
    }

    public XtextTerminalsTestLanguageParserRuleConsumer getParserRuleConsumer() {
    	return parserRuleConsumer;
    }

    public XtextTerminalsTestLanguageTerminalRuleConsumer getTerminalRuleConsumer() {
    	return terminalRuleConsumer;
    }

    public XtextTerminalsTestLanguageTypeRefConsumer getTypeRefConsumer() {
    	return typeRefConsumer;
    }

    public XtextTerminalsTestLanguageAlternativesConsumer getAlternativesConsumer() {
    	return alternativesConsumer;
    }

    public XtextTerminalsTestLanguageTerminalAlternativesConsumer getTerminalAlternativesConsumer() {
    	return terminalAlternativesConsumer;
    }

    public XtextTerminalsTestLanguageGroupConsumer getGroupConsumer() {
    	return groupConsumer;
    }

    public XtextTerminalsTestLanguageTerminalGroupConsumer getTerminalGroupConsumer() {
    	return terminalGroupConsumer;
    }

    public XtextTerminalsTestLanguageAbstractTokenConsumer getAbstractTokenConsumer() {
    	return abstractTokenConsumer;
    }

    public XtextTerminalsTestLanguageTerminalTokenConsumer getTerminalTokenConsumer() {
    	return terminalTokenConsumer;
    }

    public XtextTerminalsTestLanguageAssignmentConsumer getAssignmentConsumer() {
    	return assignmentConsumer;
    }

    public XtextTerminalsTestLanguageActionConsumer getActionConsumer() {
    	return actionConsumer;
    }

    public XtextTerminalsTestLanguageAbstractTerminalConsumer getAbstractTerminalConsumer() {
    	return abstractTerminalConsumer;
    }

    public XtextTerminalsTestLanguageTerminalTokenElementConsumer getTerminalTokenElementConsumer() {
    	return terminalTokenElementConsumer;
    }

    public XtextTerminalsTestLanguageAbstractNegatedTokenConsumer getAbstractNegatedTokenConsumer() {
    	return abstractNegatedTokenConsumer;
    }

    public XtextTerminalsTestLanguageNegatedTokenConsumer getNegatedTokenConsumer() {
    	return negatedTokenConsumer;
    }

    public XtextTerminalsTestLanguageUpToTokenConsumer getUpToTokenConsumer() {
    	return upToTokenConsumer;
    }

    public XtextTerminalsTestLanguageWildcardConsumer getWildcardConsumer() {
    	return wildcardConsumer;
    }

    public XtextTerminalsTestLanguageCharacterRangeConsumer getCharacterRangeConsumer() {
    	return characterRangeConsumer;
    }

    public XtextTerminalsTestLanguageCrossReferenceConsumer getCrossReferenceConsumer() {
    	return crossReferenceConsumer;
    }

    public XtextTerminalsTestLanguageParenthesizedElementConsumer getParenthesizedElementConsumer() {
    	return parenthesizedElementConsumer;
    }

    public XtextTerminalsTestLanguageParenthesizedTerminalElementConsumer getParenthesizedTerminalElementConsumer() {
    	return parenthesizedTerminalElementConsumer;
    }

    public XtextTerminalsTestLanguageKeywordConsumer getKeywordConsumer() {
    	return keywordConsumer;
    }

    public XtextTerminalsTestLanguageRuleCallConsumer getRuleCallConsumer() {
    	return ruleCallConsumer;
    }

    public XtextTerminalsTestLanguageIDConsumer getIdConsumer() {
    	return idConsumer;
    }

    public XtextTerminalsTestLanguageINTConsumer getIntConsumer() {
    	return intConsumer;
    }

    public XtextTerminalsTestLanguageSTRINGConsumer getStringConsumer() {
    	return stringConsumer;
    }

    public XtextTerminalsTestLanguageML_COMMENTConsumer getMlCommentConsumer() {
    	return mlCommentConsumer;
    }

    public XtextTerminalsTestLanguageSL_COMMENTConsumer getSlCommentConsumer() {
    	return slCommentConsumer;
    }

    public XtextTerminalsTestLanguageWSConsumer getWsConsumer() {
    	return wsConsumer;
    }

    public XtextTerminalsTestLanguageANY_OTHERConsumer getAnyOtherConsumer() {
    	return anyOtherConsumer;
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return new ITerminalConsumer[]{ getWsConsumer(), getMlCommentConsumer(), getSlCommentConsumer() };
	}
	
}
