/*
* generated by Xtext
*/

package org.eclipse.xtext.parser.terminalrules.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;


@Singleton
public class TerminalRulesTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class ModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIdValueIDTerminalRuleCall_0_0 = (RuleCall)cIdValueAssignment_0.eContents().get(0);
		private final Assignment cIntValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIntValueINTTerminalRuleCall_1_0 = (RuleCall)cIntValueAssignment_1.eContents().get(0);
		private final Assignment cStringValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringValueAssignment_2.eContents().get(0);
		private final Assignment cMlCommentValueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cMlCommentValueML_COMMENTTerminalRuleCall_3_0 = (RuleCall)cMlCommentValueAssignment_3.eContents().get(0);
		private final Assignment cSlCommentValueAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cSlCommentValueSL_COMMENTTerminalRuleCall_4_0 = (RuleCall)cSlCommentValueAssignment_4.eContents().get(0);
		private final Assignment cWsValueAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cWsValueWSTerminalRuleCall_5_0 = (RuleCall)cWsValueAssignment_5.eContents().get(0);
		private final Assignment cAnyValueAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cAnyValueANY_OTHERTerminalRuleCall_6_0 = (RuleCall)cAnyValueAssignment_6.eContents().get(0);
		
		//Model:
		//  idValue=ID|intValue=INT|stringValue=STRING|mlCommentValue=ML_COMMENT|
		//  slCommentValue=SL_COMMENT|wsValue=WS|anyValue=ANY_OTHER;
		public ParserRule getRule() { return rule; }

		//idValue=ID|intValue=INT|stringValue=STRING|mlCommentValue=ML_COMMENT|
		//slCommentValue=SL_COMMENT|wsValue=WS|anyValue=ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }

		//idValue=ID
		public Assignment getIdValueAssignment_0() { return cIdValueAssignment_0; }

		//ID
		public RuleCall getIdValueIDTerminalRuleCall_0_0() { return cIdValueIDTerminalRuleCall_0_0; }

		//intValue=INT
		public Assignment getIntValueAssignment_1() { return cIntValueAssignment_1; }

		//INT
		public RuleCall getIntValueINTTerminalRuleCall_1_0() { return cIntValueINTTerminalRuleCall_1_0; }

		//stringValue=STRING
		public Assignment getStringValueAssignment_2() { return cStringValueAssignment_2; }

		//STRING
		public RuleCall getStringValueSTRINGTerminalRuleCall_2_0() { return cStringValueSTRINGTerminalRuleCall_2_0; }

		//mlCommentValue=ML_COMMENT
		public Assignment getMlCommentValueAssignment_3() { return cMlCommentValueAssignment_3; }

		//ML_COMMENT
		public RuleCall getMlCommentValueML_COMMENTTerminalRuleCall_3_0() { return cMlCommentValueML_COMMENTTerminalRuleCall_3_0; }

		//slCommentValue=SL_COMMENT
		public Assignment getSlCommentValueAssignment_4() { return cSlCommentValueAssignment_4; }

		//SL_COMMENT
		public RuleCall getSlCommentValueSL_COMMENTTerminalRuleCall_4_0() { return cSlCommentValueSL_COMMENTTerminalRuleCall_4_0; }

		//wsValue=WS
		public Assignment getWsValueAssignment_5() { return cWsValueAssignment_5; }

		//WS
		public RuleCall getWsValueWSTerminalRuleCall_5_0() { return cWsValueWSTerminalRuleCall_5_0; }

		//anyValue=ANY_OTHER
		public Assignment getAnyValueAssignment_6() { return cAnyValueAssignment_6; }

		//ANY_OTHER
		public RuleCall getAnyValueANY_OTHERTerminalRuleCall_6_0() { return cAnyValueANY_OTHERTerminalRuleCall_6_0; }
	}
	
	
	private ModelElements pModel;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public TerminalRulesTestLanguageGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//Model:
	//  idValue=ID|intValue=INT|stringValue=STRING|mlCommentValue=ML_COMMENT|
	//  slCommentValue=SL_COMMENT|wsValue=WS|anyValue=ANY_OTHER;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//terminal ID:
	//  "^" ? ( "a" .. "z" | "A" .. "Z" | "_" ) ( "a" .. "z" | "A" .. "Z" | "_" | "0" .. "9" ) *;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT:
	//  "0" .. "9" +;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal STRING:
	//  "\"" ( "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" ) | ! ( "\\" | "\"" ) ) * "\"" | "\'" ( "\\" ( "b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" ) | ! ( "\\" | "\'" ) ) * "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//  "/ *" -> "* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//  "//" ! ( "\n" | "\r" ) * ( "\r" ? "\n" ) ?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//  ( " " | "\t" | "\r" | "\n" ) +;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
