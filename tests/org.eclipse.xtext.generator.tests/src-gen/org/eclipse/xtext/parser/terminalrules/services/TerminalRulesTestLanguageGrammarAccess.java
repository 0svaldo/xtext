/*
* generated by Xtext
*/

package org.eclipse.xtext.parser.terminalrules.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;


@Singleton
public class TerminalRulesTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class ModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment c0AssignmentIdValue = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall c00TerminalRuleCallID = (RuleCall)c0AssignmentIdValue.eContents().get(0);
		private final Assignment c1AssignmentIntValue = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall c10TerminalRuleCallINT = (RuleCall)c1AssignmentIntValue.eContents().get(0);
		private final Assignment c2AssignmentStringValue = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall c20TerminalRuleCallSTRING = (RuleCall)c2AssignmentStringValue.eContents().get(0);
		private final Assignment c3AssignmentMlCommentValue = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall c30TerminalRuleCallML_COMMENT = (RuleCall)c3AssignmentMlCommentValue.eContents().get(0);
		private final Assignment c4AssignmentSlCommentValue = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall c40TerminalRuleCallSL_COMMENT = (RuleCall)c4AssignmentSlCommentValue.eContents().get(0);
		private final Assignment c5AssignmentWsValue = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall c50TerminalRuleCallWS = (RuleCall)c5AssignmentWsValue.eContents().get(0);
		private final Assignment c6AssignmentAnyValue = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall c60TerminalRuleCallANY_OTHER = (RuleCall)c6AssignmentAnyValue.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public Assignment ele0AssignmentIdValue() { return c0AssignmentIdValue; }

		// not supported
		public RuleCall ele00TerminalRuleCallID() { return c00TerminalRuleCallID; }

		// not supported
		public Assignment ele1AssignmentIntValue() { return c1AssignmentIntValue; }

		// not supported
		public RuleCall ele10TerminalRuleCallINT() { return c10TerminalRuleCallINT; }

		// not supported
		public Assignment ele2AssignmentStringValue() { return c2AssignmentStringValue; }

		// not supported
		public RuleCall ele20TerminalRuleCallSTRING() { return c20TerminalRuleCallSTRING; }

		// not supported
		public Assignment ele3AssignmentMlCommentValue() { return c3AssignmentMlCommentValue; }

		// not supported
		public RuleCall ele30TerminalRuleCallML_COMMENT() { return c30TerminalRuleCallML_COMMENT; }

		// not supported
		public Assignment ele4AssignmentSlCommentValue() { return c4AssignmentSlCommentValue; }

		// not supported
		public RuleCall ele40TerminalRuleCallSL_COMMENT() { return c40TerminalRuleCallSL_COMMENT; }

		// not supported
		public Assignment ele5AssignmentWsValue() { return c5AssignmentWsValue; }

		// not supported
		public RuleCall ele50TerminalRuleCallWS() { return c50TerminalRuleCallWS; }

		// not supported
		public Assignment ele6AssignmentAnyValue() { return c6AssignmentAnyValue; }

		// not supported
		public RuleCall ele60TerminalRuleCallANY_OTHER() { return c60TerminalRuleCallANY_OTHER; }
	}
	
	private ModelElements pModel;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public TerminalRulesTestLanguageGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	// not supported
	public ModelElements prModel() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	} 

	// not supported
	public TerminalRule trID() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	// not supported
	public TerminalRule trINT() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	// not supported
	public TerminalRule trSTRING() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	// not supported
	public TerminalRule trML_COMMENT() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	// not supported
	public TerminalRule trSL_COMMENT() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	// not supported
	public TerminalRule trWS() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	// not supported
	public TerminalRule trANY_OTHER() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
