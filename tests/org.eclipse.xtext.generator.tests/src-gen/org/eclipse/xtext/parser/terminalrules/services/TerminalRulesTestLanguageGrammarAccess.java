/*
* generated by Xtext
*/

package org.eclipse.xtext.parser.terminalrules.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;


@Singleton
public class TerminalRulesTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class ModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives c0Alternatives = (Alternatives)cAlternatives.eContents().get(0);
		private final Alternatives c00Alternatives = (Alternatives)c0Alternatives.eContents().get(0);
		private final Alternatives c000Alternatives = (Alternatives)c00Alternatives.eContents().get(0);
		private final Alternatives c0000Alternatives = (Alternatives)c000Alternatives.eContents().get(0);
		private final Alternatives c00000Alternatives = (Alternatives)c0000Alternatives.eContents().get(0);
		private final Assignment c000000AssignmentIdValue = (Assignment)c00000Alternatives.eContents().get(0);
		private final RuleCall c0000000TerminalRuleCallID = (RuleCall)c000000AssignmentIdValue.eContents().get(0);
		private final Assignment c000001AssignmentIntValue = (Assignment)c00000Alternatives.eContents().get(1);
		private final RuleCall c0000010TerminalRuleCallINT = (RuleCall)c000001AssignmentIntValue.eContents().get(0);
		private final Assignment c00001AssignmentStringValue = (Assignment)c0000Alternatives.eContents().get(1);
		private final RuleCall c000010TerminalRuleCallSTRING = (RuleCall)c00001AssignmentStringValue.eContents().get(0);
		private final Assignment c0001AssignmentMlCommentValue = (Assignment)c000Alternatives.eContents().get(1);
		private final RuleCall c00010TerminalRuleCallML_COMMENT = (RuleCall)c0001AssignmentMlCommentValue.eContents().get(0);
		private final Assignment c001AssignmentSlCommentValue = (Assignment)c00Alternatives.eContents().get(1);
		private final RuleCall c0010TerminalRuleCallSL_COMMENT = (RuleCall)c001AssignmentSlCommentValue.eContents().get(0);
		private final Assignment c01AssignmentWsValue = (Assignment)c0Alternatives.eContents().get(1);
		private final RuleCall c010TerminalRuleCallWS = (RuleCall)c01AssignmentWsValue.eContents().get(0);
		private final Assignment c1AssignmentAnyValue = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall c10TerminalRuleCallANY_OTHER = (RuleCall)c1AssignmentAnyValue.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public Alternatives ele0Alternatives() { return c0Alternatives; }

		// not supported
		public Alternatives ele00Alternatives() { return c00Alternatives; }

		// not supported
		public Alternatives ele000Alternatives() { return c000Alternatives; }

		// not supported
		public Alternatives ele0000Alternatives() { return c0000Alternatives; }

		// not supported
		public Alternatives ele00000Alternatives() { return c00000Alternatives; }

		// not supported
		public Assignment ele000000AssignmentIdValue() { return c000000AssignmentIdValue; }

		// not supported
		public RuleCall ele0000000TerminalRuleCallID() { return c0000000TerminalRuleCallID; }

		// not supported
		public Assignment ele000001AssignmentIntValue() { return c000001AssignmentIntValue; }

		// not supported
		public RuleCall ele0000010TerminalRuleCallINT() { return c0000010TerminalRuleCallINT; }

		// not supported
		public Assignment ele00001AssignmentStringValue() { return c00001AssignmentStringValue; }

		// not supported
		public RuleCall ele000010TerminalRuleCallSTRING() { return c000010TerminalRuleCallSTRING; }

		// not supported
		public Assignment ele0001AssignmentMlCommentValue() { return c0001AssignmentMlCommentValue; }

		// not supported
		public RuleCall ele00010TerminalRuleCallML_COMMENT() { return c00010TerminalRuleCallML_COMMENT; }

		// not supported
		public Assignment ele001AssignmentSlCommentValue() { return c001AssignmentSlCommentValue; }

		// not supported
		public RuleCall ele0010TerminalRuleCallSL_COMMENT() { return c0010TerminalRuleCallSL_COMMENT; }

		// not supported
		public Assignment ele01AssignmentWsValue() { return c01AssignmentWsValue; }

		// not supported
		public RuleCall ele010TerminalRuleCallWS() { return c010TerminalRuleCallWS; }

		// not supported
		public Assignment ele1AssignmentAnyValue() { return c1AssignmentAnyValue; }

		// not supported
		public RuleCall ele10TerminalRuleCallANY_OTHER() { return c10TerminalRuleCallANY_OTHER; }
	}
	
	private ModelElements pModel;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public TerminalRulesTestLanguageGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	// not supported
	public ModelElements prModel() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	} 

	// not supported
	public TerminalRule trID() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	// not supported
	public TerminalRule trINT() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	// not supported
	public TerminalRule trSTRING() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	// not supported
	public TerminalRule trML_COMMENT() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	// not supported
	public TerminalRule trSL_COMMENT() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	// not supported
	public TerminalRule trWS() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	// not supported
	public TerminalRule trANY_OTHER() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
