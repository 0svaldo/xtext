/*
* generated by Xtext
*/

package org.eclipse.xtext.parser.terminalrules.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;


@Singleton
public class XtextTerminalsTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class GrammarElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Grammar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordGrammar = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallGrammarID = (RuleCall)c1AssignmentName.eContents().get(0);
		private final Group c2Group = (Group)cGroup.eContents().get(2);
		private final Keyword c20KeywordWith = (Keyword)c2Group.eContents().get(0);
		private final Assignment c21AssignmentUsedGrammars = (Assignment)c2Group.eContents().get(1);
		private final CrossReference c210CrossReferenceGrammarIDGrammar = (CrossReference)c21AssignmentUsedGrammars.eContents().get(0);
		private final RuleCall c2101ParserRuleCallGrammarID = (RuleCall)c210CrossReferenceGrammarIDGrammar.eContents().get(1);
		private final Group c22Group = (Group)c2Group.eContents().get(2);
		private final Keyword c220KeywordComma = (Keyword)c22Group.eContents().get(0);
		private final Assignment c221AssignmentUsedGrammars = (Assignment)c22Group.eContents().get(1);
		private final CrossReference c2210CrossReferenceGrammarIDGrammar = (CrossReference)c221AssignmentUsedGrammars.eContents().get(0);
		private final RuleCall c22101ParserRuleCallGrammarID = (RuleCall)c2210CrossReferenceGrammarIDGrammar.eContents().get(1);
		private final Group c3Group = (Group)cGroup.eContents().get(3);
		private final Assignment c30AssignmentDefinesHiddenTokens = (Assignment)c3Group.eContents().get(0);
		private final Keyword c300KeywordHidden = (Keyword)c30AssignmentDefinesHiddenTokens.eContents().get(0);
		private final Keyword c31KeywordLeftParenthesis = (Keyword)c3Group.eContents().get(1);
		private final Group c32Group = (Group)c3Group.eContents().get(2);
		private final Assignment c320AssignmentHiddenTokens = (Assignment)c32Group.eContents().get(0);
		private final CrossReference c3200CrossReferenceIDAbstractRule = (CrossReference)c320AssignmentHiddenTokens.eContents().get(0);
		private final RuleCall c32001TerminalRuleCallID = (RuleCall)c3200CrossReferenceIDAbstractRule.eContents().get(1);
		private final Group c321Group = (Group)c32Group.eContents().get(1);
		private final Keyword c3210KeywordComma = (Keyword)c321Group.eContents().get(0);
		private final Assignment c3211AssignmentHiddenTokens = (Assignment)c321Group.eContents().get(1);
		private final CrossReference c32110CrossReferenceIDAbstractRule = (CrossReference)c3211AssignmentHiddenTokens.eContents().get(0);
		private final RuleCall c321101TerminalRuleCallID = (RuleCall)c32110CrossReferenceIDAbstractRule.eContents().get(1);
		private final Keyword c33KeywordRightParenthesis = (Keyword)c3Group.eContents().get(3);
		private final Assignment c4AssignmentMetamodelDeclarations = (Assignment)cGroup.eContents().get(4);
		private final RuleCall c40ParserRuleCallAbstractMetamodelDeclaration = (RuleCall)c4AssignmentMetamodelDeclarations.eContents().get(0);
		private final Assignment c5AssignmentRules = (Assignment)cGroup.eContents().get(5);
		private final RuleCall c50ParserRuleCallAbstractRule = (RuleCall)c5AssignmentRules.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordGrammar() { return c0KeywordGrammar; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10ParserRuleCallGrammarID() { return c10ParserRuleCallGrammarID; }

		// not supported
		public Group ele2Group() { return c2Group; }

		// not supported
		public Keyword ele20KeywordWith() { return c20KeywordWith; }

		// not supported
		public Assignment ele21AssignmentUsedGrammars() { return c21AssignmentUsedGrammars; }

		// not supported
		public CrossReference ele210CrossReferenceGrammarIDGrammar() { return c210CrossReferenceGrammarIDGrammar; }

		// not supported
		public RuleCall ele2101ParserRuleCallGrammarID() { return c2101ParserRuleCallGrammarID; }

		// not supported
		public Group ele22Group() { return c22Group; }

		// not supported
		public Keyword ele220KeywordComma() { return c220KeywordComma; }

		// not supported
		public Assignment ele221AssignmentUsedGrammars() { return c221AssignmentUsedGrammars; }

		// not supported
		public CrossReference ele2210CrossReferenceGrammarIDGrammar() { return c2210CrossReferenceGrammarIDGrammar; }

		// not supported
		public RuleCall ele22101ParserRuleCallGrammarID() { return c22101ParserRuleCallGrammarID; }

		// not supported
		public Group ele3Group() { return c3Group; }

		// not supported
		public Assignment ele30AssignmentDefinesHiddenTokens() { return c30AssignmentDefinesHiddenTokens; }

		// not supported
		public Keyword ele300KeywordHidden() { return c300KeywordHidden; }

		// not supported
		public Keyword ele31KeywordLeftParenthesis() { return c31KeywordLeftParenthesis; }

		// not supported
		public Group ele32Group() { return c32Group; }

		// not supported
		public Assignment ele320AssignmentHiddenTokens() { return c320AssignmentHiddenTokens; }

		// not supported
		public CrossReference ele3200CrossReferenceIDAbstractRule() { return c3200CrossReferenceIDAbstractRule; }

		// not supported
		public RuleCall ele32001TerminalRuleCallID() { return c32001TerminalRuleCallID; }

		// not supported
		public Group ele321Group() { return c321Group; }

		// not supported
		public Keyword ele3210KeywordComma() { return c3210KeywordComma; }

		// not supported
		public Assignment ele3211AssignmentHiddenTokens() { return c3211AssignmentHiddenTokens; }

		// not supported
		public CrossReference ele32110CrossReferenceIDAbstractRule() { return c32110CrossReferenceIDAbstractRule; }

		// not supported
		public RuleCall ele321101TerminalRuleCallID() { return c321101TerminalRuleCallID; }

		// not supported
		public Keyword ele33KeywordRightParenthesis() { return c33KeywordRightParenthesis; }

		// not supported
		public Assignment ele4AssignmentMetamodelDeclarations() { return c4AssignmentMetamodelDeclarations; }

		// not supported
		public RuleCall ele40ParserRuleCallAbstractMetamodelDeclaration() { return c40ParserRuleCallAbstractMetamodelDeclaration; }

		// not supported
		public Assignment ele5AssignmentRules() { return c5AssignmentRules; }

		// not supported
		public RuleCall ele50ParserRuleCallAbstractRule() { return c50ParserRuleCallAbstractRule; }
	}

	public class GrammarIDElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GrammarID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall c0TerminalRuleCallID = (RuleCall)cGroup.eContents().get(0);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Keyword c10KeywordFullStop = (Keyword)c1Group.eContents().get(0);
		private final RuleCall c11TerminalRuleCallID = (RuleCall)c1Group.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public RuleCall ele0TerminalRuleCallID() { return c0TerminalRuleCallID; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Keyword ele10KeywordFullStop() { return c10KeywordFullStop; }

		// not supported
		public RuleCall ele11TerminalRuleCallID() { return c11TerminalRuleCallID; }
	}

	public class AbstractRuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallParserRule = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallTerminalRule = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallParserRule() { return c0ParserRuleCallParserRule; }

		// not supported
		public RuleCall ele1ParserRuleCallTerminalRule() { return c1ParserRuleCallTerminalRule; }
	}

	public class AbstractMetamodelDeclarationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractMetamodelDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallGeneratedMetamodel = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallReferencedMetamodel = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallGeneratedMetamodel() { return c0ParserRuleCallGeneratedMetamodel; }

		// not supported
		public RuleCall ele1ParserRuleCallReferencedMetamodel() { return c1ParserRuleCallReferencedMetamodel; }
	}

	public class GeneratedMetamodelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GeneratedMetamodel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordGenerate = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallID = (RuleCall)c1AssignmentName.eContents().get(0);
		private final Assignment c2AssignmentEPackage = (Assignment)cGroup.eContents().get(2);
		private final CrossReference c20CrossReferenceSTRINGEPackage = (CrossReference)c2AssignmentEPackage.eContents().get(0);
		private final RuleCall c201TerminalRuleCallSTRING = (RuleCall)c20CrossReferenceSTRINGEPackage.eContents().get(1);
		private final Group c3Group = (Group)cGroup.eContents().get(3);
		private final Keyword c30KeywordAs = (Keyword)c3Group.eContents().get(0);
		private final Assignment c31AssignmentAlias = (Assignment)c3Group.eContents().get(1);
		private final RuleCall c310TerminalRuleCallID = (RuleCall)c31AssignmentAlias.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordGenerate() { return c0KeywordGenerate; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10TerminalRuleCallID() { return c10TerminalRuleCallID; }

		// not supported
		public Assignment ele2AssignmentEPackage() { return c2AssignmentEPackage; }

		// not supported
		public CrossReference ele20CrossReferenceSTRINGEPackage() { return c20CrossReferenceSTRINGEPackage; }

		// not supported
		public RuleCall ele201TerminalRuleCallSTRING() { return c201TerminalRuleCallSTRING; }

		// not supported
		public Group ele3Group() { return c3Group; }

		// not supported
		public Keyword ele30KeywordAs() { return c30KeywordAs; }

		// not supported
		public Assignment ele31AssignmentAlias() { return c31AssignmentAlias; }

		// not supported
		public RuleCall ele310TerminalRuleCallID() { return c310TerminalRuleCallID; }
	}

	public class ReferencedMetamodelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferencedMetamodel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordImport = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentEPackage = (Assignment)cGroup.eContents().get(1);
		private final CrossReference c10CrossReferenceSTRINGEPackage = (CrossReference)c1AssignmentEPackage.eContents().get(0);
		private final RuleCall c101TerminalRuleCallSTRING = (RuleCall)c10CrossReferenceSTRINGEPackage.eContents().get(1);
		private final Group c2Group = (Group)cGroup.eContents().get(2);
		private final Keyword c20KeywordAs = (Keyword)c2Group.eContents().get(0);
		private final Assignment c21AssignmentAlias = (Assignment)c2Group.eContents().get(1);
		private final RuleCall c210TerminalRuleCallID = (RuleCall)c21AssignmentAlias.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordImport() { return c0KeywordImport; }

		// not supported
		public Assignment ele1AssignmentEPackage() { return c1AssignmentEPackage; }

		// not supported
		public CrossReference ele10CrossReferenceSTRINGEPackage() { return c10CrossReferenceSTRINGEPackage; }

		// not supported
		public RuleCall ele101TerminalRuleCallSTRING() { return c101TerminalRuleCallSTRING; }

		// not supported
		public Group ele2Group() { return c2Group; }

		// not supported
		public Keyword ele20KeywordAs() { return c20KeywordAs; }

		// not supported
		public Assignment ele21AssignmentAlias() { return c21AssignmentAlias; }

		// not supported
		public RuleCall ele210TerminalRuleCallID() { return c210TerminalRuleCallID; }
	}

	public class ParserRuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParserRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment c0AssignmentName = (Assignment)cGroup.eContents().get(0);
		private final RuleCall c00TerminalRuleCallID = (RuleCall)c0AssignmentName.eContents().get(0);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Keyword c10KeywordReturns = (Keyword)c1Group.eContents().get(0);
		private final Assignment c11AssignmentType = (Assignment)c1Group.eContents().get(1);
		private final RuleCall c110ParserRuleCallTypeRef = (RuleCall)c11AssignmentType.eContents().get(0);
		private final Group c2Group = (Group)cGroup.eContents().get(2);
		private final Assignment c20AssignmentDefinesHiddenTokens = (Assignment)c2Group.eContents().get(0);
		private final Keyword c200KeywordHidden = (Keyword)c20AssignmentDefinesHiddenTokens.eContents().get(0);
		private final Keyword c21KeywordLeftParenthesis = (Keyword)c2Group.eContents().get(1);
		private final Group c22Group = (Group)c2Group.eContents().get(2);
		private final Assignment c220AssignmentHiddenTokens = (Assignment)c22Group.eContents().get(0);
		private final CrossReference c2200CrossReferenceIDAbstractRule = (CrossReference)c220AssignmentHiddenTokens.eContents().get(0);
		private final RuleCall c22001TerminalRuleCallID = (RuleCall)c2200CrossReferenceIDAbstractRule.eContents().get(1);
		private final Group c221Group = (Group)c22Group.eContents().get(1);
		private final Keyword c2210KeywordComma = (Keyword)c221Group.eContents().get(0);
		private final Assignment c2211AssignmentHiddenTokens = (Assignment)c221Group.eContents().get(1);
		private final CrossReference c22110CrossReferenceIDAbstractRule = (CrossReference)c2211AssignmentHiddenTokens.eContents().get(0);
		private final RuleCall c221101TerminalRuleCallID = (RuleCall)c22110CrossReferenceIDAbstractRule.eContents().get(1);
		private final Keyword c23KeywordRightParenthesis = (Keyword)c2Group.eContents().get(3);
		private final Keyword c3KeywordColon = (Keyword)cGroup.eContents().get(3);
		private final Assignment c4AssignmentAlternatives = (Assignment)cGroup.eContents().get(4);
		private final RuleCall c40ParserRuleCallAlternatives = (RuleCall)c4AssignmentAlternatives.eContents().get(0);
		private final Keyword c5KeywordSemicolon = (Keyword)cGroup.eContents().get(5);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Assignment ele0AssignmentName() { return c0AssignmentName; }

		// not supported
		public RuleCall ele00TerminalRuleCallID() { return c00TerminalRuleCallID; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Keyword ele10KeywordReturns() { return c10KeywordReturns; }

		// not supported
		public Assignment ele11AssignmentType() { return c11AssignmentType; }

		// not supported
		public RuleCall ele110ParserRuleCallTypeRef() { return c110ParserRuleCallTypeRef; }

		// not supported
		public Group ele2Group() { return c2Group; }

		// not supported
		public Assignment ele20AssignmentDefinesHiddenTokens() { return c20AssignmentDefinesHiddenTokens; }

		// not supported
		public Keyword ele200KeywordHidden() { return c200KeywordHidden; }

		// not supported
		public Keyword ele21KeywordLeftParenthesis() { return c21KeywordLeftParenthesis; }

		// not supported
		public Group ele22Group() { return c22Group; }

		// not supported
		public Assignment ele220AssignmentHiddenTokens() { return c220AssignmentHiddenTokens; }

		// not supported
		public CrossReference ele2200CrossReferenceIDAbstractRule() { return c2200CrossReferenceIDAbstractRule; }

		// not supported
		public RuleCall ele22001TerminalRuleCallID() { return c22001TerminalRuleCallID; }

		// not supported
		public Group ele221Group() { return c221Group; }

		// not supported
		public Keyword ele2210KeywordComma() { return c2210KeywordComma; }

		// not supported
		public Assignment ele2211AssignmentHiddenTokens() { return c2211AssignmentHiddenTokens; }

		// not supported
		public CrossReference ele22110CrossReferenceIDAbstractRule() { return c22110CrossReferenceIDAbstractRule; }

		// not supported
		public RuleCall ele221101TerminalRuleCallID() { return c221101TerminalRuleCallID; }

		// not supported
		public Keyword ele23KeywordRightParenthesis() { return c23KeywordRightParenthesis; }

		// not supported
		public Keyword ele3KeywordColon() { return c3KeywordColon; }

		// not supported
		public Assignment ele4AssignmentAlternatives() { return c4AssignmentAlternatives; }

		// not supported
		public RuleCall ele40ParserRuleCallAlternatives() { return c40ParserRuleCallAlternatives; }

		// not supported
		public Keyword ele5KeywordSemicolon() { return c5KeywordSemicolon; }
	}

	public class TypeRefElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Assignment c00AssignmentMetamodel = (Assignment)c0Group.eContents().get(0);
		private final CrossReference c000CrossReferenceIDAbstractMetamodelDeclaration = (CrossReference)c00AssignmentMetamodel.eContents().get(0);
		private final RuleCall c0001TerminalRuleCallID = (RuleCall)c000CrossReferenceIDAbstractMetamodelDeclaration.eContents().get(1);
		private final Keyword c01KeywordColonColon = (Keyword)c0Group.eContents().get(1);
		private final Assignment c1AssignmentClassifier = (Assignment)cGroup.eContents().get(1);
		private final CrossReference c10CrossReferenceIDEClassifier = (CrossReference)c1AssignmentClassifier.eContents().get(0);
		private final RuleCall c101TerminalRuleCallID = (RuleCall)c10CrossReferenceIDEClassifier.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Assignment ele00AssignmentMetamodel() { return c00AssignmentMetamodel; }

		// not supported
		public CrossReference ele000CrossReferenceIDAbstractMetamodelDeclaration() { return c000CrossReferenceIDAbstractMetamodelDeclaration; }

		// not supported
		public RuleCall ele0001TerminalRuleCallID() { return c0001TerminalRuleCallID; }

		// not supported
		public Keyword ele01KeywordColonColon() { return c01KeywordColonColon; }

		// not supported
		public Assignment ele1AssignmentClassifier() { return c1AssignmentClassifier; }

		// not supported
		public CrossReference ele10CrossReferenceIDEClassifier() { return c10CrossReferenceIDEClassifier; }

		// not supported
		public RuleCall ele101TerminalRuleCallID() { return c101TerminalRuleCallID; }
	}

	public class AlternativesElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alternatives");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallGroup = (RuleCall)cGroup.eContents().get(0);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Action c10ActionAlternativesgroups = (Action)c1Group.eContents().get(0);
		private final Group c11Group = (Group)c1Group.eContents().get(1);
		private final Keyword c110KeywordVerticalLine = (Keyword)c11Group.eContents().get(0);
		private final Assignment c111AssignmentGroups = (Assignment)c11Group.eContents().get(1);
		private final RuleCall c1110ParserRuleCallGroup = (RuleCall)c111AssignmentGroups.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public RuleCall ele0ParserRuleCallGroup() { return c0ParserRuleCallGroup; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Action ele10ActionAlternativesgroups() { return c10ActionAlternativesgroups; }

		// not supported
		public Group ele11Group() { return c11Group; }

		// not supported
		public Keyword ele110KeywordVerticalLine() { return c110KeywordVerticalLine; }

		// not supported
		public Assignment ele111AssignmentGroups() { return c111AssignmentGroups; }

		// not supported
		public RuleCall ele1110ParserRuleCallGroup() { return c1110ParserRuleCallGroup; }
	}

	public class GroupElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallAbstractToken = (RuleCall)cGroup.eContents().get(0);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Action c10ActionGrouptokens = (Action)c1Group.eContents().get(0);
		private final Assignment c11AssignmentTokens = (Assignment)c1Group.eContents().get(1);
		private final RuleCall c110ParserRuleCallAbstractToken = (RuleCall)c11AssignmentTokens.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public RuleCall ele0ParserRuleCallAbstractToken() { return c0ParserRuleCallAbstractToken; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Action ele10ActionGrouptokens() { return c10ActionGrouptokens; }

		// not supported
		public Assignment ele11AssignmentTokens() { return c11AssignmentTokens; }

		// not supported
		public RuleCall ele110ParserRuleCallAbstractToken() { return c110ParserRuleCallAbstractToken; }
	}

	public class AbstractTokenElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractToken");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallAbstractTokenWithCardinality = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallAction = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallAbstractTokenWithCardinality() { return c0ParserRuleCallAbstractTokenWithCardinality; }

		// not supported
		public RuleCall ele1ParserRuleCallAction() { return c1ParserRuleCallAction; }
	}

	public class AbstractTokenWithCardinalityElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractTokenWithCardinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives c0Alternatives = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall c00ParserRuleCallAssignment = (RuleCall)c0Alternatives.eContents().get(0);
		private final RuleCall c01ParserRuleCallAbstractTerminal = (RuleCall)c0Alternatives.eContents().get(1);
		private final Assignment c1AssignmentCardinality = (Assignment)cGroup.eContents().get(1);
		private final Alternatives c10Alternatives = (Alternatives)c1AssignmentCardinality.eContents().get(0);
		private final Keyword c100KeywordQuestionMark = (Keyword)c10Alternatives.eContents().get(0);
		private final Keyword c101KeywordAsterisk = (Keyword)c10Alternatives.eContents().get(1);
		private final Keyword c102KeywordPlusSign = (Keyword)c10Alternatives.eContents().get(2);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Alternatives ele0Alternatives() { return c0Alternatives; }

		// not supported
		public RuleCall ele00ParserRuleCallAssignment() { return c00ParserRuleCallAssignment; }

		// not supported
		public RuleCall ele01ParserRuleCallAbstractTerminal() { return c01ParserRuleCallAbstractTerminal; }

		// not supported
		public Assignment ele1AssignmentCardinality() { return c1AssignmentCardinality; }

		// not supported
		public Alternatives ele10Alternatives() { return c10Alternatives; }

		// not supported
		public Keyword ele100KeywordQuestionMark() { return c100KeywordQuestionMark; }

		// not supported
		public Keyword ele101KeywordAsterisk() { return c101KeywordAsterisk; }

		// not supported
		public Keyword ele102KeywordPlusSign() { return c102KeywordPlusSign; }
	}

	public class ActionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordLeftCurlyBracket = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentType = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallTypeRef = (RuleCall)c1AssignmentType.eContents().get(0);
		private final Group c2Group = (Group)cGroup.eContents().get(2);
		private final Keyword c20KeywordFullStop = (Keyword)c2Group.eContents().get(0);
		private final Assignment c21AssignmentFeature = (Assignment)c2Group.eContents().get(1);
		private final RuleCall c210TerminalRuleCallID = (RuleCall)c21AssignmentFeature.eContents().get(0);
		private final Assignment c22AssignmentOperator = (Assignment)c2Group.eContents().get(2);
		private final Alternatives c220Alternatives = (Alternatives)c22AssignmentOperator.eContents().get(0);
		private final Keyword c2200KeywordEqualsSign = (Keyword)c220Alternatives.eContents().get(0);
		private final Keyword c2201KeywordPlusSignEqualsSign = (Keyword)c220Alternatives.eContents().get(1);
		private final Keyword c23KeywordCurrent = (Keyword)c2Group.eContents().get(3);
		private final Keyword c3KeywordRightCurlyBracket = (Keyword)cGroup.eContents().get(3);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordLeftCurlyBracket() { return c0KeywordLeftCurlyBracket; }

		// not supported
		public Assignment ele1AssignmentType() { return c1AssignmentType; }

		// not supported
		public RuleCall ele10ParserRuleCallTypeRef() { return c10ParserRuleCallTypeRef; }

		// not supported
		public Group ele2Group() { return c2Group; }

		// not supported
		public Keyword ele20KeywordFullStop() { return c20KeywordFullStop; }

		// not supported
		public Assignment ele21AssignmentFeature() { return c21AssignmentFeature; }

		// not supported
		public RuleCall ele210TerminalRuleCallID() { return c210TerminalRuleCallID; }

		// not supported
		public Assignment ele22AssignmentOperator() { return c22AssignmentOperator; }

		// not supported
		public Alternatives ele220Alternatives() { return c220Alternatives; }

		// not supported
		public Keyword ele2200KeywordEqualsSign() { return c2200KeywordEqualsSign; }

		// not supported
		public Keyword ele2201KeywordPlusSignEqualsSign() { return c2201KeywordPlusSignEqualsSign; }

		// not supported
		public Keyword ele23KeywordCurrent() { return c23KeywordCurrent; }

		// not supported
		public Keyword ele3KeywordRightCurlyBracket() { return c3KeywordRightCurlyBracket; }
	}

	public class AbstractTerminalElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractTerminal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallKeyword = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallRuleCall = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall c2ParserRuleCallParenthesizedElement = (RuleCall)cAlternatives.eContents().get(2);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallKeyword() { return c0ParserRuleCallKeyword; }

		// not supported
		public RuleCall ele1ParserRuleCallRuleCall() { return c1ParserRuleCallRuleCall; }

		// not supported
		public RuleCall ele2ParserRuleCallParenthesizedElement() { return c2ParserRuleCallParenthesizedElement; }
	}

	public class KeywordElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Keyword");
		private final Assignment cAssignmentValue = (Assignment)rule.eContents().get(1);
		private final RuleCall c0TerminalRuleCallSTRING = (RuleCall)cAssignmentValue.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Assignment eleAssignmentValue() { return cAssignmentValue; }

		// not supported
		public RuleCall ele0TerminalRuleCallSTRING() { return c0TerminalRuleCallSTRING; }
	}

	public class RuleCallElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleCall");
		private final Assignment cAssignmentRule = (Assignment)rule.eContents().get(1);
		private final CrossReference c0CrossReferenceIDAbstractRule = (CrossReference)cAssignmentRule.eContents().get(0);
		private final RuleCall c01TerminalRuleCallID = (RuleCall)c0CrossReferenceIDAbstractRule.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Assignment eleAssignmentRule() { return cAssignmentRule; }

		// not supported
		public CrossReference ele0CrossReferenceIDAbstractRule() { return c0CrossReferenceIDAbstractRule; }

		// not supported
		public RuleCall ele01TerminalRuleCallID() { return c01TerminalRuleCallID; }
	}

	public class AssignmentElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment c0AssignmentFeature = (Assignment)cGroup.eContents().get(0);
		private final RuleCall c00TerminalRuleCallID = (RuleCall)c0AssignmentFeature.eContents().get(0);
		private final Assignment c1AssignmentOperator = (Assignment)cGroup.eContents().get(1);
		private final Alternatives c10Alternatives = (Alternatives)c1AssignmentOperator.eContents().get(0);
		private final Keyword c100KeywordPlusSignEqualsSign = (Keyword)c10Alternatives.eContents().get(0);
		private final Keyword c101KeywordEqualsSign = (Keyword)c10Alternatives.eContents().get(1);
		private final Keyword c102KeywordQuestionMarkEqualsSign = (Keyword)c10Alternatives.eContents().get(2);
		private final Assignment c2AssignmentTerminal = (Assignment)cGroup.eContents().get(2);
		private final RuleCall c20ParserRuleCallAssignableTerminal = (RuleCall)c2AssignmentTerminal.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Assignment ele0AssignmentFeature() { return c0AssignmentFeature; }

		// not supported
		public RuleCall ele00TerminalRuleCallID() { return c00TerminalRuleCallID; }

		// not supported
		public Assignment ele1AssignmentOperator() { return c1AssignmentOperator; }

		// not supported
		public Alternatives ele10Alternatives() { return c10Alternatives; }

		// not supported
		public Keyword ele100KeywordPlusSignEqualsSign() { return c100KeywordPlusSignEqualsSign; }

		// not supported
		public Keyword ele101KeywordEqualsSign() { return c101KeywordEqualsSign; }

		// not supported
		public Keyword ele102KeywordQuestionMarkEqualsSign() { return c102KeywordQuestionMarkEqualsSign; }

		// not supported
		public Assignment ele2AssignmentTerminal() { return c2AssignmentTerminal; }

		// not supported
		public RuleCall ele20ParserRuleCallAssignableTerminal() { return c20ParserRuleCallAssignableTerminal; }
	}

	public class AssignableTerminalElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignableTerminal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallKeyword = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallRuleCall = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall c2ParserRuleCallParenthesizedAssignableElement = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall c3ParserRuleCallCrossReference = (RuleCall)cAlternatives.eContents().get(3);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallKeyword() { return c0ParserRuleCallKeyword; }

		// not supported
		public RuleCall ele1ParserRuleCallRuleCall() { return c1ParserRuleCallRuleCall; }

		// not supported
		public RuleCall ele2ParserRuleCallParenthesizedAssignableElement() { return c2ParserRuleCallParenthesizedAssignableElement; }

		// not supported
		public RuleCall ele3ParserRuleCallCrossReference() { return c3ParserRuleCallCrossReference; }
	}

	public class ParenthesizedAssignableElementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesizedAssignableElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordLeftParenthesis = (Keyword)cGroup.eContents().get(0);
		private final RuleCall c1ParserRuleCallAssignableAlternatives = (RuleCall)cGroup.eContents().get(1);
		private final Keyword c2KeywordRightParenthesis = (Keyword)cGroup.eContents().get(2);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordLeftParenthesis() { return c0KeywordLeftParenthesis; }

		// not supported
		public RuleCall ele1ParserRuleCallAssignableAlternatives() { return c1ParserRuleCallAssignableAlternatives; }

		// not supported
		public Keyword ele2KeywordRightParenthesis() { return c2KeywordRightParenthesis; }
	}

	public class AssignableAlternativesElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignableAlternatives");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallAssignableTerminal = (RuleCall)cGroup.eContents().get(0);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Action c10ActionAlternativesgroups = (Action)c1Group.eContents().get(0);
		private final Group c11Group = (Group)c1Group.eContents().get(1);
		private final Keyword c110KeywordVerticalLine = (Keyword)c11Group.eContents().get(0);
		private final Assignment c111AssignmentGroups = (Assignment)c11Group.eContents().get(1);
		private final RuleCall c1110ParserRuleCallAssignableTerminal = (RuleCall)c111AssignmentGroups.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public RuleCall ele0ParserRuleCallAssignableTerminal() { return c0ParserRuleCallAssignableTerminal; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Action ele10ActionAlternativesgroups() { return c10ActionAlternativesgroups; }

		// not supported
		public Group ele11Group() { return c11Group; }

		// not supported
		public Keyword ele110KeywordVerticalLine() { return c110KeywordVerticalLine; }

		// not supported
		public Assignment ele111AssignmentGroups() { return c111AssignmentGroups; }

		// not supported
		public RuleCall ele1110ParserRuleCallAssignableTerminal() { return c1110ParserRuleCallAssignableTerminal; }
	}

	public class CrossReferenceElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CrossReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordLeftSquareBracket = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentType = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallTypeRef = (RuleCall)c1AssignmentType.eContents().get(0);
		private final Group c2Group = (Group)cGroup.eContents().get(2);
		private final Keyword c20KeywordVerticalLine = (Keyword)c2Group.eContents().get(0);
		private final Assignment c21AssignmentTerminal = (Assignment)c2Group.eContents().get(1);
		private final RuleCall c210ParserRuleCallCrossReferenceableTerminal = (RuleCall)c21AssignmentTerminal.eContents().get(0);
		private final Keyword c3KeywordRightSquareBracket = (Keyword)cGroup.eContents().get(3);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordLeftSquareBracket() { return c0KeywordLeftSquareBracket; }

		// not supported
		public Assignment ele1AssignmentType() { return c1AssignmentType; }

		// not supported
		public RuleCall ele10ParserRuleCallTypeRef() { return c10ParserRuleCallTypeRef; }

		// not supported
		public Group ele2Group() { return c2Group; }

		// not supported
		public Keyword ele20KeywordVerticalLine() { return c20KeywordVerticalLine; }

		// not supported
		public Assignment ele21AssignmentTerminal() { return c21AssignmentTerminal; }

		// not supported
		public RuleCall ele210ParserRuleCallCrossReferenceableTerminal() { return c210ParserRuleCallCrossReferenceableTerminal; }

		// not supported
		public Keyword ele3KeywordRightSquareBracket() { return c3KeywordRightSquareBracket; }
	}

	public class CrossReferenceableTerminalElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CrossReferenceableTerminal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallKeyword = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallRuleCall = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall c2ParserRuleCallParenthesizedCrossReferenceableElement = (RuleCall)cAlternatives.eContents().get(2);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallKeyword() { return c0ParserRuleCallKeyword; }

		// not supported
		public RuleCall ele1ParserRuleCallRuleCall() { return c1ParserRuleCallRuleCall; }

		// not supported
		public RuleCall ele2ParserRuleCallParenthesizedCrossReferenceableElement() { return c2ParserRuleCallParenthesizedCrossReferenceableElement; }
	}

	public class ParenthesizedCrossReferenceableElementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesizedCrossReferenceableElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordLeftParenthesis = (Keyword)cGroup.eContents().get(0);
		private final RuleCall c1ParserRuleCallCrossReferenceableAlternatives = (RuleCall)cGroup.eContents().get(1);
		private final Keyword c2KeywordRightParenthesis = (Keyword)cGroup.eContents().get(2);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordLeftParenthesis() { return c0KeywordLeftParenthesis; }

		// not supported
		public RuleCall ele1ParserRuleCallCrossReferenceableAlternatives() { return c1ParserRuleCallCrossReferenceableAlternatives; }

		// not supported
		public Keyword ele2KeywordRightParenthesis() { return c2KeywordRightParenthesis; }
	}

	public class CrossReferenceableAlternativesElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CrossReferenceableAlternatives");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallCrossReferenceableTerminal = (RuleCall)cGroup.eContents().get(0);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Action c10ActionAlternativesgroups = (Action)c1Group.eContents().get(0);
		private final Group c11Group = (Group)c1Group.eContents().get(1);
		private final Keyword c110KeywordVerticalLine = (Keyword)c11Group.eContents().get(0);
		private final Assignment c111AssignmentGroups = (Assignment)c11Group.eContents().get(1);
		private final RuleCall c1110ParserRuleCallCrossReferenceableTerminal = (RuleCall)c111AssignmentGroups.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public RuleCall ele0ParserRuleCallCrossReferenceableTerminal() { return c0ParserRuleCallCrossReferenceableTerminal; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Action ele10ActionAlternativesgroups() { return c10ActionAlternativesgroups; }

		// not supported
		public Group ele11Group() { return c11Group; }

		// not supported
		public Keyword ele110KeywordVerticalLine() { return c110KeywordVerticalLine; }

		// not supported
		public Assignment ele111AssignmentGroups() { return c111AssignmentGroups; }

		// not supported
		public RuleCall ele1110ParserRuleCallCrossReferenceableTerminal() { return c1110ParserRuleCallCrossReferenceableTerminal; }
	}

	public class ParenthesizedElementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesizedElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordLeftParenthesis = (Keyword)cGroup.eContents().get(0);
		private final RuleCall c1ParserRuleCallAlternatives = (RuleCall)cGroup.eContents().get(1);
		private final Keyword c2KeywordRightParenthesis = (Keyword)cGroup.eContents().get(2);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordLeftParenthesis() { return c0KeywordLeftParenthesis; }

		// not supported
		public RuleCall ele1ParserRuleCallAlternatives() { return c1ParserRuleCallAlternatives; }

		// not supported
		public Keyword ele2KeywordRightParenthesis() { return c2KeywordRightParenthesis; }
	}

	public class TerminalRuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordTerminal = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentName = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallID = (RuleCall)c1AssignmentName.eContents().get(0);
		private final Group c2Group = (Group)cGroup.eContents().get(2);
		private final Keyword c20KeywordReturns = (Keyword)c2Group.eContents().get(0);
		private final Assignment c21AssignmentType = (Assignment)c2Group.eContents().get(1);
		private final RuleCall c210ParserRuleCallTypeRef = (RuleCall)c21AssignmentType.eContents().get(0);
		private final Keyword c3KeywordColon = (Keyword)cGroup.eContents().get(3);
		private final Assignment c4AssignmentAlternatives = (Assignment)cGroup.eContents().get(4);
		private final RuleCall c40ParserRuleCallTerminalAlternatives = (RuleCall)c4AssignmentAlternatives.eContents().get(0);
		private final Keyword c5KeywordSemicolon = (Keyword)cGroup.eContents().get(5);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordTerminal() { return c0KeywordTerminal; }

		// not supported
		public Assignment ele1AssignmentName() { return c1AssignmentName; }

		// not supported
		public RuleCall ele10TerminalRuleCallID() { return c10TerminalRuleCallID; }

		// not supported
		public Group ele2Group() { return c2Group; }

		// not supported
		public Keyword ele20KeywordReturns() { return c20KeywordReturns; }

		// not supported
		public Assignment ele21AssignmentType() { return c21AssignmentType; }

		// not supported
		public RuleCall ele210ParserRuleCallTypeRef() { return c210ParserRuleCallTypeRef; }

		// not supported
		public Keyword ele3KeywordColon() { return c3KeywordColon; }

		// not supported
		public Assignment ele4AssignmentAlternatives() { return c4AssignmentAlternatives; }

		// not supported
		public RuleCall ele40ParserRuleCallTerminalAlternatives() { return c40ParserRuleCallTerminalAlternatives; }

		// not supported
		public Keyword ele5KeywordSemicolon() { return c5KeywordSemicolon; }
	}

	public class TerminalAlternativesElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalAlternatives");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallTerminalGroup = (RuleCall)cGroup.eContents().get(0);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Action c10ActionAlternativesgroups = (Action)c1Group.eContents().get(0);
		private final Group c11Group = (Group)c1Group.eContents().get(1);
		private final Keyword c110KeywordVerticalLine = (Keyword)c11Group.eContents().get(0);
		private final Assignment c111AssignmentGroups = (Assignment)c11Group.eContents().get(1);
		private final RuleCall c1110ParserRuleCallTerminalGroup = (RuleCall)c111AssignmentGroups.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public RuleCall ele0ParserRuleCallTerminalGroup() { return c0ParserRuleCallTerminalGroup; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Action ele10ActionAlternativesgroups() { return c10ActionAlternativesgroups; }

		// not supported
		public Group ele11Group() { return c11Group; }

		// not supported
		public Keyword ele110KeywordVerticalLine() { return c110KeywordVerticalLine; }

		// not supported
		public Assignment ele111AssignmentGroups() { return c111AssignmentGroups; }

		// not supported
		public RuleCall ele1110ParserRuleCallTerminalGroup() { return c1110ParserRuleCallTerminalGroup; }
	}

	public class TerminalGroupElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallTerminalToken = (RuleCall)cGroup.eContents().get(0);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Action c10ActionGrouptokens = (Action)c1Group.eContents().get(0);
		private final Assignment c11AssignmentTokens = (Assignment)c1Group.eContents().get(1);
		private final RuleCall c110ParserRuleCallTerminalToken = (RuleCall)c11AssignmentTokens.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public RuleCall ele0ParserRuleCallTerminalToken() { return c0ParserRuleCallTerminalToken; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Action ele10ActionGrouptokens() { return c10ActionGrouptokens; }

		// not supported
		public Assignment ele11AssignmentTokens() { return c11AssignmentTokens; }

		// not supported
		public RuleCall ele110ParserRuleCallTerminalToken() { return c110ParserRuleCallTerminalToken; }
	}

	public class TerminalTokenElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalToken");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallTerminalTokenElement = (RuleCall)cGroup.eContents().get(0);
		private final Assignment c1AssignmentCardinality = (Assignment)cGroup.eContents().get(1);
		private final Alternatives c10Alternatives = (Alternatives)c1AssignmentCardinality.eContents().get(0);
		private final Keyword c100KeywordQuestionMark = (Keyword)c10Alternatives.eContents().get(0);
		private final Keyword c101KeywordAsterisk = (Keyword)c10Alternatives.eContents().get(1);
		private final Keyword c102KeywordPlusSign = (Keyword)c10Alternatives.eContents().get(2);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public RuleCall ele0ParserRuleCallTerminalTokenElement() { return c0ParserRuleCallTerminalTokenElement; }

		// not supported
		public Assignment ele1AssignmentCardinality() { return c1AssignmentCardinality; }

		// not supported
		public Alternatives ele10Alternatives() { return c10Alternatives; }

		// not supported
		public Keyword ele100KeywordQuestionMark() { return c100KeywordQuestionMark; }

		// not supported
		public Keyword ele101KeywordAsterisk() { return c101KeywordAsterisk; }

		// not supported
		public Keyword ele102KeywordPlusSign() { return c102KeywordPlusSign; }
	}

	public class TerminalTokenElementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalTokenElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallCharacterRange = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallRuleCall = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall c2ParserRuleCallParenthesizedTerminalElement = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall c3ParserRuleCallAbstractNegatedToken = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall c4ParserRuleCallWildcard = (RuleCall)cAlternatives.eContents().get(4);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallCharacterRange() { return c0ParserRuleCallCharacterRange; }

		// not supported
		public RuleCall ele1ParserRuleCallRuleCall() { return c1ParserRuleCallRuleCall; }

		// not supported
		public RuleCall ele2ParserRuleCallParenthesizedTerminalElement() { return c2ParserRuleCallParenthesizedTerminalElement; }

		// not supported
		public RuleCall ele3ParserRuleCallAbstractNegatedToken() { return c3ParserRuleCallAbstractNegatedToken; }

		// not supported
		public RuleCall ele4ParserRuleCallWildcard() { return c4ParserRuleCallWildcard; }
	}

	public class ParenthesizedTerminalElementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesizedTerminalElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordLeftParenthesis = (Keyword)cGroup.eContents().get(0);
		private final RuleCall c1ParserRuleCallTerminalAlternatives = (RuleCall)cGroup.eContents().get(1);
		private final Keyword c2KeywordRightParenthesis = (Keyword)cGroup.eContents().get(2);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordLeftParenthesis() { return c0KeywordLeftParenthesis; }

		// not supported
		public RuleCall ele1ParserRuleCallTerminalAlternatives() { return c1ParserRuleCallTerminalAlternatives; }

		// not supported
		public Keyword ele2KeywordRightParenthesis() { return c2KeywordRightParenthesis; }
	}

	public class AbstractNegatedTokenElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractNegatedToken");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallNegatedToken = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallUntilToken = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallNegatedToken() { return c0ParserRuleCallNegatedToken; }

		// not supported
		public RuleCall ele1ParserRuleCallUntilToken() { return c1ParserRuleCallUntilToken; }
	}

	public class NegatedTokenElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NegatedToken");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordExclamationMark = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentTerminal = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallTerminalTokenElement = (RuleCall)c1AssignmentTerminal.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordExclamationMark() { return c0KeywordExclamationMark; }

		// not supported
		public Assignment ele1AssignmentTerminal() { return c1AssignmentTerminal; }

		// not supported
		public RuleCall ele10ParserRuleCallTerminalTokenElement() { return c10ParserRuleCallTerminalTokenElement; }
	}

	public class UntilTokenElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UntilToken");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordHyphenMinusGreaterThanSign = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentTerminal = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallTerminalTokenElement = (RuleCall)c1AssignmentTerminal.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordHyphenMinusGreaterThanSign() { return c0KeywordHyphenMinusGreaterThanSign; }

		// not supported
		public Assignment ele1AssignmentTerminal() { return c1AssignmentTerminal; }

		// not supported
		public RuleCall ele10ParserRuleCallTerminalTokenElement() { return c10ParserRuleCallTerminalTokenElement; }
	}

	public class WildcardElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Wildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action c0ActionWildcardnull = (Action)cGroup.eContents().get(0);
		private final Keyword c1KeywordFullStop = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Action ele0ActionWildcardnull() { return c0ActionWildcardnull; }

		// not supported
		public Keyword ele1KeywordFullStop() { return c1KeywordFullStop; }
	}

	public class CharacterRangeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CharacterRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallKeyword = (RuleCall)cGroup.eContents().get(0);
		private final Group c1Group = (Group)cGroup.eContents().get(1);
		private final Action c10ActionCharacterRangeleft = (Action)c1Group.eContents().get(0);
		private final Keyword c11KeywordFullStopFullStop = (Keyword)c1Group.eContents().get(1);
		private final Assignment c12AssignmentRight = (Assignment)c1Group.eContents().get(2);
		private final RuleCall c120ParserRuleCallKeyword = (RuleCall)c12AssignmentRight.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public RuleCall ele0ParserRuleCallKeyword() { return c0ParserRuleCallKeyword; }

		// not supported
		public Group ele1Group() { return c1Group; }

		// not supported
		public Action ele10ActionCharacterRangeleft() { return c10ActionCharacterRangeleft; }

		// not supported
		public Keyword ele11KeywordFullStopFullStop() { return c11KeywordFullStopFullStop; }

		// not supported
		public Assignment ele12AssignmentRight() { return c12AssignmentRight; }

		// not supported
		public RuleCall ele120ParserRuleCallKeyword() { return c120ParserRuleCallKeyword; }
	}
	
	private GrammarElements pGrammar;
	private GrammarIDElements pGrammarID;
	private AbstractRuleElements pAbstractRule;
	private AbstractMetamodelDeclarationElements pAbstractMetamodelDeclaration;
	private GeneratedMetamodelElements pGeneratedMetamodel;
	private ReferencedMetamodelElements pReferencedMetamodel;
	private ParserRuleElements pParserRule;
	private TypeRefElements pTypeRef;
	private AlternativesElements pAlternatives;
	private GroupElements pGroup;
	private AbstractTokenElements pAbstractToken;
	private AbstractTokenWithCardinalityElements pAbstractTokenWithCardinality;
	private ActionElements pAction;
	private AbstractTerminalElements pAbstractTerminal;
	private KeywordElements pKeyword;
	private RuleCallElements pRuleCall;
	private AssignmentElements pAssignment;
	private AssignableTerminalElements pAssignableTerminal;
	private ParenthesizedAssignableElementElements pParenthesizedAssignableElement;
	private AssignableAlternativesElements pAssignableAlternatives;
	private CrossReferenceElements pCrossReference;
	private CrossReferenceableTerminalElements pCrossReferenceableTerminal;
	private ParenthesizedCrossReferenceableElementElements pParenthesizedCrossReferenceableElement;
	private CrossReferenceableAlternativesElements pCrossReferenceableAlternatives;
	private ParenthesizedElementElements pParenthesizedElement;
	private TerminalRuleElements pTerminalRule;
	private TerminalAlternativesElements pTerminalAlternatives;
	private TerminalGroupElements pTerminalGroup;
	private TerminalTokenElements pTerminalToken;
	private TerminalTokenElementElements pTerminalTokenElement;
	private ParenthesizedTerminalElementElements pParenthesizedTerminalElement;
	private AbstractNegatedTokenElements pAbstractNegatedToken;
	private NegatedTokenElements pNegatedToken;
	private UntilTokenElements pUntilToken;
	private WildcardElements pWildcard;
	private CharacterRangeElements pCharacterRange;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public XtextTerminalsTestLanguageGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	// not supported
	public GrammarElements prGrammar() {
		return (pGrammar != null) ? pGrammar : (pGrammar = new GrammarElements());
	} 

	// not supported
	public GrammarIDElements prGrammarID() {
		return (pGrammarID != null) ? pGrammarID : (pGrammarID = new GrammarIDElements());
	} 

	// not supported
	public AbstractRuleElements prAbstractRule() {
		return (pAbstractRule != null) ? pAbstractRule : (pAbstractRule = new AbstractRuleElements());
	} 

	// not supported
	public AbstractMetamodelDeclarationElements prAbstractMetamodelDeclaration() {
		return (pAbstractMetamodelDeclaration != null) ? pAbstractMetamodelDeclaration : (pAbstractMetamodelDeclaration = new AbstractMetamodelDeclarationElements());
	} 

	// not supported
	public GeneratedMetamodelElements prGeneratedMetamodel() {
		return (pGeneratedMetamodel != null) ? pGeneratedMetamodel : (pGeneratedMetamodel = new GeneratedMetamodelElements());
	} 

	// not supported
	public ReferencedMetamodelElements prReferencedMetamodel() {
		return (pReferencedMetamodel != null) ? pReferencedMetamodel : (pReferencedMetamodel = new ReferencedMetamodelElements());
	} 

	// not supported
	public ParserRuleElements prParserRule() {
		return (pParserRule != null) ? pParserRule : (pParserRule = new ParserRuleElements());
	} 

	// not supported
	public TypeRefElements prTypeRef() {
		return (pTypeRef != null) ? pTypeRef : (pTypeRef = new TypeRefElements());
	} 

	// not supported
	public AlternativesElements prAlternatives() {
		return (pAlternatives != null) ? pAlternatives : (pAlternatives = new AlternativesElements());
	} 

	// not supported
	public GroupElements prGroup() {
		return (pGroup != null) ? pGroup : (pGroup = new GroupElements());
	} 

	// not supported
	public AbstractTokenElements prAbstractToken() {
		return (pAbstractToken != null) ? pAbstractToken : (pAbstractToken = new AbstractTokenElements());
	} 

	// not supported
	public AbstractTokenWithCardinalityElements prAbstractTokenWithCardinality() {
		return (pAbstractTokenWithCardinality != null) ? pAbstractTokenWithCardinality : (pAbstractTokenWithCardinality = new AbstractTokenWithCardinalityElements());
	} 

	// not supported
	public ActionElements prAction() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	} 

	// not supported
	public AbstractTerminalElements prAbstractTerminal() {
		return (pAbstractTerminal != null) ? pAbstractTerminal : (pAbstractTerminal = new AbstractTerminalElements());
	} 

	// not supported
	public KeywordElements prKeyword() {
		return (pKeyword != null) ? pKeyword : (pKeyword = new KeywordElements());
	} 

	// not supported
	public RuleCallElements prRuleCall() {
		return (pRuleCall != null) ? pRuleCall : (pRuleCall = new RuleCallElements());
	} 

	// not supported
	public AssignmentElements prAssignment() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	} 

	// not supported
	public AssignableTerminalElements prAssignableTerminal() {
		return (pAssignableTerminal != null) ? pAssignableTerminal : (pAssignableTerminal = new AssignableTerminalElements());
	} 

	// not supported
	public ParenthesizedAssignableElementElements prParenthesizedAssignableElement() {
		return (pParenthesizedAssignableElement != null) ? pParenthesizedAssignableElement : (pParenthesizedAssignableElement = new ParenthesizedAssignableElementElements());
	} 

	// not supported
	public AssignableAlternativesElements prAssignableAlternatives() {
		return (pAssignableAlternatives != null) ? pAssignableAlternatives : (pAssignableAlternatives = new AssignableAlternativesElements());
	} 

	// not supported
	public CrossReferenceElements prCrossReference() {
		return (pCrossReference != null) ? pCrossReference : (pCrossReference = new CrossReferenceElements());
	} 

	// not supported
	public CrossReferenceableTerminalElements prCrossReferenceableTerminal() {
		return (pCrossReferenceableTerminal != null) ? pCrossReferenceableTerminal : (pCrossReferenceableTerminal = new CrossReferenceableTerminalElements());
	} 

	// not supported
	public ParenthesizedCrossReferenceableElementElements prParenthesizedCrossReferenceableElement() {
		return (pParenthesizedCrossReferenceableElement != null) ? pParenthesizedCrossReferenceableElement : (pParenthesizedCrossReferenceableElement = new ParenthesizedCrossReferenceableElementElements());
	} 

	// not supported
	public CrossReferenceableAlternativesElements prCrossReferenceableAlternatives() {
		return (pCrossReferenceableAlternatives != null) ? pCrossReferenceableAlternatives : (pCrossReferenceableAlternatives = new CrossReferenceableAlternativesElements());
	} 

	// not supported
	public ParenthesizedElementElements prParenthesizedElement() {
		return (pParenthesizedElement != null) ? pParenthesizedElement : (pParenthesizedElement = new ParenthesizedElementElements());
	} 

	// not supported
	public TerminalRuleElements prTerminalRule() {
		return (pTerminalRule != null) ? pTerminalRule : (pTerminalRule = new TerminalRuleElements());
	} 

	// not supported
	public TerminalAlternativesElements prTerminalAlternatives() {
		return (pTerminalAlternatives != null) ? pTerminalAlternatives : (pTerminalAlternatives = new TerminalAlternativesElements());
	} 

	// not supported
	public TerminalGroupElements prTerminalGroup() {
		return (pTerminalGroup != null) ? pTerminalGroup : (pTerminalGroup = new TerminalGroupElements());
	} 

	// not supported
	public TerminalTokenElements prTerminalToken() {
		return (pTerminalToken != null) ? pTerminalToken : (pTerminalToken = new TerminalTokenElements());
	} 

	// not supported
	public TerminalTokenElementElements prTerminalTokenElement() {
		return (pTerminalTokenElement != null) ? pTerminalTokenElement : (pTerminalTokenElement = new TerminalTokenElementElements());
	} 

	// not supported
	public ParenthesizedTerminalElementElements prParenthesizedTerminalElement() {
		return (pParenthesizedTerminalElement != null) ? pParenthesizedTerminalElement : (pParenthesizedTerminalElement = new ParenthesizedTerminalElementElements());
	} 

	// not supported
	public AbstractNegatedTokenElements prAbstractNegatedToken() {
		return (pAbstractNegatedToken != null) ? pAbstractNegatedToken : (pAbstractNegatedToken = new AbstractNegatedTokenElements());
	} 

	// not supported
	public NegatedTokenElements prNegatedToken() {
		return (pNegatedToken != null) ? pNegatedToken : (pNegatedToken = new NegatedTokenElements());
	} 

	// not supported
	public UntilTokenElements prUntilToken() {
		return (pUntilToken != null) ? pUntilToken : (pUntilToken = new UntilTokenElements());
	} 

	// not supported
	public WildcardElements prWildcard() {
		return (pWildcard != null) ? pWildcard : (pWildcard = new WildcardElements());
	} 

	// not supported
	public CharacterRangeElements prCharacterRange() {
		return (pCharacterRange != null) ? pCharacterRange : (pCharacterRange = new CharacterRangeElements());
	} 

	// not supported
	public TerminalRule trID() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	// not supported
	public TerminalRule trINT() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	// not supported
	public TerminalRule trSTRING() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	// not supported
	public TerminalRule trML_COMMENT() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	// not supported
	public TerminalRule trSL_COMMENT() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	// not supported
	public TerminalRule trWS() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	// not supported
	public TerminalRule trANY_OTHER() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
