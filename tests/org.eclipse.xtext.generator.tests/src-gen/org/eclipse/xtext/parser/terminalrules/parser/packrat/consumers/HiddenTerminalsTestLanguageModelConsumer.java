/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;

import org.eclipse.xtext.parser.terminalrules.services.HiddenTerminalsTestLanguageGrammarAccess.ModelElements;

public final class HiddenTerminalsTestLanguageModelConsumer extends NonTerminalConsumer {

	private ModelElements rule;	

	private INonTerminalConsumer datatypeHiddensConsumer;

	private INonTerminalConsumer inheritingHiddensConsumer;

	private INonTerminalConsumer overridingHiddensConsumer;

	private INonTerminalConsumer withHiddensConsumer;

	private INonTerminalConsumer withoutHiddensConsumer;

	private IElementConsumer alternatives$1$Consumer;

	private IElementConsumer ruleCall$2$Consumer;

	private IElementConsumer ruleCall$3$Consumer;

	private IElementConsumer ruleCall$4$Consumer;

	private IElementConsumer ruleCall$5$Consumer;

	private IElementConsumer ruleCall$6$Consumer;

	protected class Alternatives$1$Consumer extends AlternativesConsumer {
		
		protected Alternatives$1$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(ruleCall$2$Consumer);
			acceptor.accept(ruleCall$3$Consumer);
			acceptor.accept(ruleCall$4$Consumer);
			acceptor.accept(ruleCall$5$Consumer);
			acceptor.accept(ruleCall$6$Consumer);
		}
	}

	protected class RuleCall$2$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$2$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(withoutHiddensConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$3$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$3$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(withHiddensConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$4$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$4$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(overridingHiddensConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$5$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$5$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(inheritingHiddensConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$6$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$6$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(datatypeHiddensConsumer, null, false, false, false, getElement(), optional);
		}
	}

	public HiddenTerminalsTestLanguageModelConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
	}
	
	@Override
	protected int doConsume() throws Exception {
		return alternatives$1$Consumer.consume();
	}

	public ModelElements getRule() {
		return rule;
	}
	
	public void setRule(ModelElements rule) {
		this.rule = rule;
		
		alternatives$1$Consumer = new Alternatives$1$Consumer(rule.eleAlternatives());
		ruleCall$2$Consumer = new RuleCall$2$Consumer(rule.ele0ParserRuleCallWithoutHiddens());
		ruleCall$3$Consumer = new RuleCall$3$Consumer(rule.ele1ParserRuleCallWithHiddens());
		ruleCall$4$Consumer = new RuleCall$4$Consumer(rule.ele2ParserRuleCallOverridingHiddens());
		ruleCall$5$Consumer = new RuleCall$5$Consumer(rule.ele3ParserRuleCallInheritingHiddens());
		ruleCall$6$Consumer = new RuleCall$6$Consumer(rule.ele4ParserRuleCallDatatypeHiddens());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setDatatypeHiddensConsumer(INonTerminalConsumer datatypeHiddensConsumer) {
		this.datatypeHiddensConsumer = datatypeHiddensConsumer;
	}
	
	public void setInheritingHiddensConsumer(INonTerminalConsumer inheritingHiddensConsumer) {
		this.inheritingHiddensConsumer = inheritingHiddensConsumer;
	}
	
	public void setOverridingHiddensConsumer(INonTerminalConsumer overridingHiddensConsumer) {
		this.overridingHiddensConsumer = overridingHiddensConsumer;
	}
	
	public void setWithHiddensConsumer(INonTerminalConsumer withHiddensConsumer) {
		this.withHiddensConsumer = withHiddensConsumer;
	}
	
	public void setWithoutHiddensConsumer(INonTerminalConsumer withoutHiddensConsumer) {
		this.withoutHiddensConsumer = withoutHiddensConsumer;
	}
	
}
