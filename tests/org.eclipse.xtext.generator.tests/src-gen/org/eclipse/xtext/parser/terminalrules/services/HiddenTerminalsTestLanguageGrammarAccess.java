/*
* generated by Xtext
*/

package org.eclipse.xtext.parser.terminalrules.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;


@Singleton
public class HiddenTerminalsTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class ModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives c0Alternatives = (Alternatives)cAlternatives.eContents().get(0);
		private final Alternatives c00Alternatives = (Alternatives)c0Alternatives.eContents().get(0);
		private final Alternatives c000Alternatives = (Alternatives)c00Alternatives.eContents().get(0);
		private final RuleCall c0000ParserRuleCallWithoutHiddens = (RuleCall)c000Alternatives.eContents().get(0);
		private final RuleCall c0001ParserRuleCallWithHiddens = (RuleCall)c000Alternatives.eContents().get(1);
		private final RuleCall c001ParserRuleCallOverridingHiddens = (RuleCall)c00Alternatives.eContents().get(1);
		private final RuleCall c01ParserRuleCallInheritingHiddens = (RuleCall)c0Alternatives.eContents().get(1);
		private final RuleCall c1ParserRuleCallDatatypeHiddens = (RuleCall)cAlternatives.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public Alternatives ele0Alternatives() { return c0Alternatives; }

		// not supported
		public Alternatives ele00Alternatives() { return c00Alternatives; }

		// not supported
		public Alternatives ele000Alternatives() { return c000Alternatives; }

		// not supported
		public RuleCall ele0000ParserRuleCallWithoutHiddens() { return c0000ParserRuleCallWithoutHiddens; }

		// not supported
		public RuleCall ele0001ParserRuleCallWithHiddens() { return c0001ParserRuleCallWithHiddens; }

		// not supported
		public RuleCall ele001ParserRuleCallOverridingHiddens() { return c001ParserRuleCallOverridingHiddens; }

		// not supported
		public RuleCall ele01ParserRuleCallInheritingHiddens() { return c01ParserRuleCallInheritingHiddens; }

		// not supported
		public RuleCall ele1ParserRuleCallDatatypeHiddens() { return c1ParserRuleCallDatatypeHiddens; }
	}

	public class WithoutHiddensElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WithoutHiddens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Group c000Group = (Group)c00Group.eContents().get(0);
		private final Keyword c0000KeywordWithout = (Keyword)c000Group.eContents().get(0);
		private final Assignment c0001AssignmentSpaces = (Assignment)c000Group.eContents().get(1);
		private final RuleCall c00010TerminalRuleCallWS = (RuleCall)c0001AssignmentSpaces.eContents().get(0);
		private final Keyword c001KeywordHiddens = (Keyword)c00Group.eContents().get(1);
		private final Assignment c01AssignmentSpaces = (Assignment)c0Group.eContents().get(1);
		private final RuleCall c010TerminalRuleCallWS = (RuleCall)c01AssignmentSpaces.eContents().get(0);
		private final Assignment c1AssignmentValid = (Assignment)cGroup.eContents().get(1);
		private final Keyword c10KeywordSemicolon = (Keyword)c1AssignmentValid.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Group ele000Group() { return c000Group; }

		// not supported
		public Keyword ele0000KeywordWithout() { return c0000KeywordWithout; }

		// not supported
		public Assignment ele0001AssignmentSpaces() { return c0001AssignmentSpaces; }

		// not supported
		public RuleCall ele00010TerminalRuleCallWS() { return c00010TerminalRuleCallWS; }

		// not supported
		public Keyword ele001KeywordHiddens() { return c001KeywordHiddens; }

		// not supported
		public Assignment ele01AssignmentSpaces() { return c01AssignmentSpaces; }

		// not supported
		public RuleCall ele010TerminalRuleCallWS() { return c010TerminalRuleCallWS; }

		// not supported
		public Assignment ele1AssignmentValid() { return c1AssignmentValid; }

		// not supported
		public Keyword ele10KeywordSemicolon() { return c10KeywordSemicolon; }
	}

	public class WithHiddensElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WithHiddens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Keyword c00KeywordWith = (Keyword)c0Group.eContents().get(0);
		private final Keyword c01KeywordHiddens = (Keyword)c0Group.eContents().get(1);
		private final Assignment c1AssignmentValid = (Assignment)cGroup.eContents().get(1);
		private final Keyword c10KeywordSemicolon = (Keyword)c1AssignmentValid.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Keyword ele00KeywordWith() { return c00KeywordWith; }

		// not supported
		public Keyword ele01KeywordHiddens() { return c01KeywordHiddens; }

		// not supported
		public Assignment ele1AssignmentValid() { return c1AssignmentValid; }

		// not supported
		public Keyword ele10KeywordSemicolon() { return c10KeywordSemicolon; }
	}

	public class OverridingHiddensElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OverridingHiddens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Group c000Group = (Group)c00Group.eContents().get(0);
		private final Group c0000Group = (Group)c000Group.eContents().get(0);
		private final Keyword c00000KeywordOverriding = (Keyword)c0000Group.eContents().get(0);
		private final Keyword c00001KeywordHiddens = (Keyword)c0000Group.eContents().get(1);
		private final Keyword c0001KeywordLeftParenthesis = (Keyword)c000Group.eContents().get(1);
		private final Assignment c001AssignmentCalled = (Assignment)c00Group.eContents().get(1);
		private final RuleCall c0010ParserRuleCallOverridingHiddensCall = (RuleCall)c001AssignmentCalled.eContents().get(0);
		private final Keyword c01KeywordRightParenthesis = (Keyword)c0Group.eContents().get(1);
		private final Assignment c1AssignmentValid = (Assignment)cGroup.eContents().get(1);
		private final Keyword c10KeywordSemicolon = (Keyword)c1AssignmentValid.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Group ele000Group() { return c000Group; }

		// not supported
		public Group ele0000Group() { return c0000Group; }

		// not supported
		public Keyword ele00000KeywordOverriding() { return c00000KeywordOverriding; }

		// not supported
		public Keyword ele00001KeywordHiddens() { return c00001KeywordHiddens; }

		// not supported
		public Keyword ele0001KeywordLeftParenthesis() { return c0001KeywordLeftParenthesis; }

		// not supported
		public Assignment ele001AssignmentCalled() { return c001AssignmentCalled; }

		// not supported
		public RuleCall ele0010ParserRuleCallOverridingHiddensCall() { return c0010ParserRuleCallOverridingHiddensCall; }

		// not supported
		public Keyword ele01KeywordRightParenthesis() { return c01KeywordRightParenthesis; }

		// not supported
		public Assignment ele1AssignmentValid() { return c1AssignmentValid; }

		// not supported
		public Keyword ele10KeywordSemicolon() { return c10KeywordSemicolon; }
	}

	public class OverridingHiddensCallElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OverridingHiddensCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Keyword c00KeywordCall = (Keyword)c0Group.eContents().get(0);
		private final Assignment c01AssignmentSpaces = (Assignment)c0Group.eContents().get(1);
		private final RuleCall c010TerminalRuleCallWS = (RuleCall)c01AssignmentSpaces.eContents().get(0);
		private final Assignment c1AssignmentValid = (Assignment)cGroup.eContents().get(1);
		private final Keyword c10KeywordSemicolon = (Keyword)c1AssignmentValid.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Keyword ele00KeywordCall() { return c00KeywordCall; }

		// not supported
		public Assignment ele01AssignmentSpaces() { return c01AssignmentSpaces; }

		// not supported
		public RuleCall ele010TerminalRuleCallWS() { return c010TerminalRuleCallWS; }

		// not supported
		public Assignment ele1AssignmentValid() { return c1AssignmentValid; }

		// not supported
		public Keyword ele10KeywordSemicolon() { return c10KeywordSemicolon; }
	}

	public class InheritingHiddensElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InheritingHiddens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Group c000Group = (Group)c00Group.eContents().get(0);
		private final Group c0000Group = (Group)c000Group.eContents().get(0);
		private final Keyword c00000KeywordInheriting = (Keyword)c0000Group.eContents().get(0);
		private final Keyword c00001KeywordHiddens = (Keyword)c0000Group.eContents().get(1);
		private final Keyword c0001KeywordLeftParenthesis = (Keyword)c000Group.eContents().get(1);
		private final Alternatives c001Alternatives = (Alternatives)c00Group.eContents().get(1);
		private final Assignment c0010AssignmentCalled = (Assignment)c001Alternatives.eContents().get(0);
		private final RuleCall c00100ParserRuleCallInheritingHiddensCall = (RuleCall)c0010AssignmentCalled.eContents().get(0);
		private final Assignment c0011AssignmentHidingCalled = (Assignment)c001Alternatives.eContents().get(1);
		private final RuleCall c00110ParserRuleCallHidingHiddens = (RuleCall)c0011AssignmentHidingCalled.eContents().get(0);
		private final Keyword c01KeywordRightParenthesis = (Keyword)c0Group.eContents().get(1);
		private final Assignment c1AssignmentValid = (Assignment)cGroup.eContents().get(1);
		private final Keyword c10KeywordSemicolon = (Keyword)c1AssignmentValid.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Group ele000Group() { return c000Group; }

		// not supported
		public Group ele0000Group() { return c0000Group; }

		// not supported
		public Keyword ele00000KeywordInheriting() { return c00000KeywordInheriting; }

		// not supported
		public Keyword ele00001KeywordHiddens() { return c00001KeywordHiddens; }

		// not supported
		public Keyword ele0001KeywordLeftParenthesis() { return c0001KeywordLeftParenthesis; }

		// not supported
		public Alternatives ele001Alternatives() { return c001Alternatives; }

		// not supported
		public Assignment ele0010AssignmentCalled() { return c0010AssignmentCalled; }

		// not supported
		public RuleCall ele00100ParserRuleCallInheritingHiddensCall() { return c00100ParserRuleCallInheritingHiddensCall; }

		// not supported
		public Assignment ele0011AssignmentHidingCalled() { return c0011AssignmentHidingCalled; }

		// not supported
		public RuleCall ele00110ParserRuleCallHidingHiddens() { return c00110ParserRuleCallHidingHiddens; }

		// not supported
		public Keyword ele01KeywordRightParenthesis() { return c01KeywordRightParenthesis; }

		// not supported
		public Assignment ele1AssignmentValid() { return c1AssignmentValid; }

		// not supported
		public Keyword ele10KeywordSemicolon() { return c10KeywordSemicolon; }
	}

	public class DatatypeHiddensElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DatatypeHiddens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordDatatype = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentValid = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallDatatypeRule = (RuleCall)c1AssignmentValid.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordDatatype() { return c0KeywordDatatype; }

		// not supported
		public Assignment ele1AssignmentValid() { return c1AssignmentValid; }

		// not supported
		public RuleCall ele10ParserRuleCallDatatypeRule() { return c10ParserRuleCallDatatypeRule; }
	}

	public class DatatypeRuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DatatypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordRule = (Keyword)cGroup.eContents().get(0);
		private final Keyword c1KeywordSemicolon = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordRule() { return c0KeywordRule; }

		// not supported
		public Keyword ele1KeywordSemicolon() { return c1KeywordSemicolon; }
	}

	public class HidingHiddensElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HidingHiddens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Keyword c00KeywordHiding = (Keyword)c0Group.eContents().get(0);
		private final Assignment c01AssignmentSpace = (Assignment)c0Group.eContents().get(1);
		private final RuleCall c010TerminalRuleCallWS = (RuleCall)c01AssignmentSpace.eContents().get(0);
		private final Assignment c1AssignmentCalled = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallInheritingHiddensCall = (RuleCall)c1AssignmentCalled.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Keyword ele00KeywordHiding() { return c00KeywordHiding; }

		// not supported
		public Assignment ele01AssignmentSpace() { return c01AssignmentSpace; }

		// not supported
		public RuleCall ele010TerminalRuleCallWS() { return c010TerminalRuleCallWS; }

		// not supported
		public Assignment ele1AssignmentCalled() { return c1AssignmentCalled; }

		// not supported
		public RuleCall ele10ParserRuleCallInheritingHiddensCall() { return c10ParserRuleCallInheritingHiddensCall; }
	}

	public class InheritingHiddensCallElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InheritingHiddensCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordCall = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentValid = (Assignment)cGroup.eContents().get(1);
		private final Keyword c10KeywordSemicolon = (Keyword)c1AssignmentValid.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordCall() { return c0KeywordCall; }

		// not supported
		public Assignment ele1AssignmentValid() { return c1AssignmentValid; }

		// not supported
		public Keyword ele10KeywordSemicolon() { return c10KeywordSemicolon; }
	}
	
	private ModelElements pModel;
	private WithoutHiddensElements pWithoutHiddens;
	private WithHiddensElements pWithHiddens;
	private OverridingHiddensElements pOverridingHiddens;
	private OverridingHiddensCallElements pOverridingHiddensCall;
	private InheritingHiddensElements pInheritingHiddens;
	private DatatypeHiddensElements pDatatypeHiddens;
	private DatatypeRuleElements pDatatypeRule;
	private HidingHiddensElements pHidingHiddens;
	private InheritingHiddensCallElements pInheritingHiddensCall;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public HiddenTerminalsTestLanguageGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	// not supported
	public ModelElements prModel() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	} 

	// not supported
	public WithoutHiddensElements prWithoutHiddens() {
		return (pWithoutHiddens != null) ? pWithoutHiddens : (pWithoutHiddens = new WithoutHiddensElements());
	} 

	// not supported
	public WithHiddensElements prWithHiddens() {
		return (pWithHiddens != null) ? pWithHiddens : (pWithHiddens = new WithHiddensElements());
	} 

	// not supported
	public OverridingHiddensElements prOverridingHiddens() {
		return (pOverridingHiddens != null) ? pOverridingHiddens : (pOverridingHiddens = new OverridingHiddensElements());
	} 

	// not supported
	public OverridingHiddensCallElements prOverridingHiddensCall() {
		return (pOverridingHiddensCall != null) ? pOverridingHiddensCall : (pOverridingHiddensCall = new OverridingHiddensCallElements());
	} 

	// not supported
	public InheritingHiddensElements prInheritingHiddens() {
		return (pInheritingHiddens != null) ? pInheritingHiddens : (pInheritingHiddens = new InheritingHiddensElements());
	} 

	// not supported
	public DatatypeHiddensElements prDatatypeHiddens() {
		return (pDatatypeHiddens != null) ? pDatatypeHiddens : (pDatatypeHiddens = new DatatypeHiddensElements());
	} 

	// not supported
	public DatatypeRuleElements prDatatypeRule() {
		return (pDatatypeRule != null) ? pDatatypeRule : (pDatatypeRule = new DatatypeRuleElements());
	} 

	// not supported
	public HidingHiddensElements prHidingHiddens() {
		return (pHidingHiddens != null) ? pHidingHiddens : (pHidingHiddens = new HidingHiddensElements());
	} 

	// not supported
	public InheritingHiddensCallElements prInheritingHiddensCall() {
		return (pInheritingHiddensCall != null) ? pInheritingHiddensCall : (pInheritingHiddensCall = new InheritingHiddensCallElements());
	} 

	// not supported
	public TerminalRule trML_COMMENT() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	// not supported
	public TerminalRule trSL_COMMENT() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	// not supported
	public TerminalRule trWS() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	// not supported
	public TerminalRule trANY_OTHER() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
