/*
* generated by Xtext
*/

package org.eclipse.xtext.parser.terminalrules.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;


@Singleton
public class HiddenTerminalsTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class ModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallWithoutHiddens = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall c1ParserRuleCallWithHiddens = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall c2ParserRuleCallOverridingHiddens = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall c3ParserRuleCallInheritingHiddens = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall c4ParserRuleCallDatatypeHiddens = (RuleCall)cAlternatives.eContents().get(4);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Alternatives eleAlternatives() { return cAlternatives; }

		// not supported
		public RuleCall ele0ParserRuleCallWithoutHiddens() { return c0ParserRuleCallWithoutHiddens; }

		// not supported
		public RuleCall ele1ParserRuleCallWithHiddens() { return c1ParserRuleCallWithHiddens; }

		// not supported
		public RuleCall ele2ParserRuleCallOverridingHiddens() { return c2ParserRuleCallOverridingHiddens; }

		// not supported
		public RuleCall ele3ParserRuleCallInheritingHiddens() { return c3ParserRuleCallInheritingHiddens; }

		// not supported
		public RuleCall ele4ParserRuleCallDatatypeHiddens() { return c4ParserRuleCallDatatypeHiddens; }
	}

	public class WithoutHiddensElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WithoutHiddens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordWithout = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentSpaces = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallWS = (RuleCall)c1AssignmentSpaces.eContents().get(0);
		private final Keyword c2KeywordHiddens = (Keyword)cGroup.eContents().get(2);
		private final Assignment c3AssignmentSpaces = (Assignment)cGroup.eContents().get(3);
		private final RuleCall c30TerminalRuleCallWS = (RuleCall)c3AssignmentSpaces.eContents().get(0);
		private final Assignment c4AssignmentValid = (Assignment)cGroup.eContents().get(4);
		private final Keyword c40KeywordSemicolon = (Keyword)c4AssignmentValid.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordWithout() { return c0KeywordWithout; }

		// not supported
		public Assignment ele1AssignmentSpaces() { return c1AssignmentSpaces; }

		// not supported
		public RuleCall ele10TerminalRuleCallWS() { return c10TerminalRuleCallWS; }

		// not supported
		public Keyword ele2KeywordHiddens() { return c2KeywordHiddens; }

		// not supported
		public Assignment ele3AssignmentSpaces() { return c3AssignmentSpaces; }

		// not supported
		public RuleCall ele30TerminalRuleCallWS() { return c30TerminalRuleCallWS; }

		// not supported
		public Assignment ele4AssignmentValid() { return c4AssignmentValid; }

		// not supported
		public Keyword ele40KeywordSemicolon() { return c40KeywordSemicolon; }
	}

	public class WithHiddensElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WithHiddens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordWith = (Keyword)cGroup.eContents().get(0);
		private final Keyword c1KeywordHiddens = (Keyword)cGroup.eContents().get(1);
		private final Assignment c2AssignmentValid = (Assignment)cGroup.eContents().get(2);
		private final Keyword c20KeywordSemicolon = (Keyword)c2AssignmentValid.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordWith() { return c0KeywordWith; }

		// not supported
		public Keyword ele1KeywordHiddens() { return c1KeywordHiddens; }

		// not supported
		public Assignment ele2AssignmentValid() { return c2AssignmentValid; }

		// not supported
		public Keyword ele20KeywordSemicolon() { return c20KeywordSemicolon; }
	}

	public class OverridingHiddensElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OverridingHiddens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordOverriding = (Keyword)cGroup.eContents().get(0);
		private final Keyword c1KeywordHiddens = (Keyword)cGroup.eContents().get(1);
		private final Keyword c2KeywordLeftParenthesis = (Keyword)cGroup.eContents().get(2);
		private final Assignment c3AssignmentCalled = (Assignment)cGroup.eContents().get(3);
		private final RuleCall c30ParserRuleCallOverridingHiddensCall = (RuleCall)c3AssignmentCalled.eContents().get(0);
		private final Keyword c4KeywordRightParenthesis = (Keyword)cGroup.eContents().get(4);
		private final Assignment c5AssignmentValid = (Assignment)cGroup.eContents().get(5);
		private final Keyword c50KeywordSemicolon = (Keyword)c5AssignmentValid.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordOverriding() { return c0KeywordOverriding; }

		// not supported
		public Keyword ele1KeywordHiddens() { return c1KeywordHiddens; }

		// not supported
		public Keyword ele2KeywordLeftParenthesis() { return c2KeywordLeftParenthesis; }

		// not supported
		public Assignment ele3AssignmentCalled() { return c3AssignmentCalled; }

		// not supported
		public RuleCall ele30ParserRuleCallOverridingHiddensCall() { return c30ParserRuleCallOverridingHiddensCall; }

		// not supported
		public Keyword ele4KeywordRightParenthesis() { return c4KeywordRightParenthesis; }

		// not supported
		public Assignment ele5AssignmentValid() { return c5AssignmentValid; }

		// not supported
		public Keyword ele50KeywordSemicolon() { return c50KeywordSemicolon; }
	}

	public class OverridingHiddensCallElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OverridingHiddensCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordCall = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentSpaces = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallWS = (RuleCall)c1AssignmentSpaces.eContents().get(0);
		private final Assignment c2AssignmentValid = (Assignment)cGroup.eContents().get(2);
		private final Keyword c20KeywordSemicolon = (Keyword)c2AssignmentValid.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordCall() { return c0KeywordCall; }

		// not supported
		public Assignment ele1AssignmentSpaces() { return c1AssignmentSpaces; }

		// not supported
		public RuleCall ele10TerminalRuleCallWS() { return c10TerminalRuleCallWS; }

		// not supported
		public Assignment ele2AssignmentValid() { return c2AssignmentValid; }

		// not supported
		public Keyword ele20KeywordSemicolon() { return c20KeywordSemicolon; }
	}

	public class InheritingHiddensElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InheritingHiddens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordInheriting = (Keyword)cGroup.eContents().get(0);
		private final Keyword c1KeywordHiddens = (Keyword)cGroup.eContents().get(1);
		private final Keyword c2KeywordLeftParenthesis = (Keyword)cGroup.eContents().get(2);
		private final Alternatives c3Alternatives = (Alternatives)cGroup.eContents().get(3);
		private final Assignment c30AssignmentCalled = (Assignment)c3Alternatives.eContents().get(0);
		private final RuleCall c300ParserRuleCallInheritingHiddensCall = (RuleCall)c30AssignmentCalled.eContents().get(0);
		private final Assignment c31AssignmentHidingCalled = (Assignment)c3Alternatives.eContents().get(1);
		private final RuleCall c310ParserRuleCallHidingHiddens = (RuleCall)c31AssignmentHidingCalled.eContents().get(0);
		private final Keyword c4KeywordRightParenthesis = (Keyword)cGroup.eContents().get(4);
		private final Assignment c5AssignmentValid = (Assignment)cGroup.eContents().get(5);
		private final Keyword c50KeywordSemicolon = (Keyword)c5AssignmentValid.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordInheriting() { return c0KeywordInheriting; }

		// not supported
		public Keyword ele1KeywordHiddens() { return c1KeywordHiddens; }

		// not supported
		public Keyword ele2KeywordLeftParenthesis() { return c2KeywordLeftParenthesis; }

		// not supported
		public Alternatives ele3Alternatives() { return c3Alternatives; }

		// not supported
		public Assignment ele30AssignmentCalled() { return c30AssignmentCalled; }

		// not supported
		public RuleCall ele300ParserRuleCallInheritingHiddensCall() { return c300ParserRuleCallInheritingHiddensCall; }

		// not supported
		public Assignment ele31AssignmentHidingCalled() { return c31AssignmentHidingCalled; }

		// not supported
		public RuleCall ele310ParserRuleCallHidingHiddens() { return c310ParserRuleCallHidingHiddens; }

		// not supported
		public Keyword ele4KeywordRightParenthesis() { return c4KeywordRightParenthesis; }

		// not supported
		public Assignment ele5AssignmentValid() { return c5AssignmentValid; }

		// not supported
		public Keyword ele50KeywordSemicolon() { return c50KeywordSemicolon; }
	}

	public class DatatypeHiddensElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DatatypeHiddens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordDatatype = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentValid = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10ParserRuleCallDatatypeRule = (RuleCall)c1AssignmentValid.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordDatatype() { return c0KeywordDatatype; }

		// not supported
		public Assignment ele1AssignmentValid() { return c1AssignmentValid; }

		// not supported
		public RuleCall ele10ParserRuleCallDatatypeRule() { return c10ParserRuleCallDatatypeRule; }
	}

	public class DatatypeRuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DatatypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordRule = (Keyword)cGroup.eContents().get(0);
		private final Keyword c1KeywordSemicolon = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordRule() { return c0KeywordRule; }

		// not supported
		public Keyword ele1KeywordSemicolon() { return c1KeywordSemicolon; }
	}

	public class HidingHiddensElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HidingHiddens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordHiding = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentSpace = (Assignment)cGroup.eContents().get(1);
		private final RuleCall c10TerminalRuleCallWS = (RuleCall)c1AssignmentSpace.eContents().get(0);
		private final Assignment c2AssignmentCalled = (Assignment)cGroup.eContents().get(2);
		private final RuleCall c20ParserRuleCallInheritingHiddensCall = (RuleCall)c2AssignmentCalled.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordHiding() { return c0KeywordHiding; }

		// not supported
		public Assignment ele1AssignmentSpace() { return c1AssignmentSpace; }

		// not supported
		public RuleCall ele10TerminalRuleCallWS() { return c10TerminalRuleCallWS; }

		// not supported
		public Assignment ele2AssignmentCalled() { return c2AssignmentCalled; }

		// not supported
		public RuleCall ele20ParserRuleCallInheritingHiddensCall() { return c20ParserRuleCallInheritingHiddensCall; }
	}

	public class InheritingHiddensCallElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InheritingHiddensCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c0KeywordCall = (Keyword)cGroup.eContents().get(0);
		private final Assignment c1AssignmentValid = (Assignment)cGroup.eContents().get(1);
		private final Keyword c10KeywordSemicolon = (Keyword)c1AssignmentValid.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Keyword ele0KeywordCall() { return c0KeywordCall; }

		// not supported
		public Assignment ele1AssignmentValid() { return c1AssignmentValid; }

		// not supported
		public Keyword ele10KeywordSemicolon() { return c10KeywordSemicolon; }
	}
	
	private ModelElements pModel;
	private WithoutHiddensElements pWithoutHiddens;
	private WithHiddensElements pWithHiddens;
	private OverridingHiddensElements pOverridingHiddens;
	private OverridingHiddensCallElements pOverridingHiddensCall;
	private InheritingHiddensElements pInheritingHiddens;
	private DatatypeHiddensElements pDatatypeHiddens;
	private DatatypeRuleElements pDatatypeRule;
	private HidingHiddensElements pHidingHiddens;
	private InheritingHiddensCallElements pInheritingHiddensCall;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public HiddenTerminalsTestLanguageGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	// not supported
	public ModelElements prModel() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	} 

	// not supported
	public WithoutHiddensElements prWithoutHiddens() {
		return (pWithoutHiddens != null) ? pWithoutHiddens : (pWithoutHiddens = new WithoutHiddensElements());
	} 

	// not supported
	public WithHiddensElements prWithHiddens() {
		return (pWithHiddens != null) ? pWithHiddens : (pWithHiddens = new WithHiddensElements());
	} 

	// not supported
	public OverridingHiddensElements prOverridingHiddens() {
		return (pOverridingHiddens != null) ? pOverridingHiddens : (pOverridingHiddens = new OverridingHiddensElements());
	} 

	// not supported
	public OverridingHiddensCallElements prOverridingHiddensCall() {
		return (pOverridingHiddensCall != null) ? pOverridingHiddensCall : (pOverridingHiddensCall = new OverridingHiddensCallElements());
	} 

	// not supported
	public InheritingHiddensElements prInheritingHiddens() {
		return (pInheritingHiddens != null) ? pInheritingHiddens : (pInheritingHiddens = new InheritingHiddensElements());
	} 

	// not supported
	public DatatypeHiddensElements prDatatypeHiddens() {
		return (pDatatypeHiddens != null) ? pDatatypeHiddens : (pDatatypeHiddens = new DatatypeHiddensElements());
	} 

	// not supported
	public DatatypeRuleElements prDatatypeRule() {
		return (pDatatypeRule != null) ? pDatatypeRule : (pDatatypeRule = new DatatypeRuleElements());
	} 

	// not supported
	public HidingHiddensElements prHidingHiddens() {
		return (pHidingHiddens != null) ? pHidingHiddens : (pHidingHiddens = new HidingHiddensElements());
	} 

	// not supported
	public InheritingHiddensCallElements prInheritingHiddensCall() {
		return (pInheritingHiddensCall != null) ? pInheritingHiddensCall : (pInheritingHiddensCall = new InheritingHiddensCallElements());
	} 

	// not supported
	public TerminalRule trML_COMMENT() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	// not supported
	public TerminalRule trSL_COMMENT() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	// not supported
	public TerminalRule trWS() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	// not supported
	public TerminalRule trANY_OTHER() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
