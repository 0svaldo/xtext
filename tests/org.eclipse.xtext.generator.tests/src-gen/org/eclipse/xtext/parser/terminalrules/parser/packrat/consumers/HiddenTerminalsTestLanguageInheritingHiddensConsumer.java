/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;

import org.eclipse.xtext.AbstractRule;

import org.eclipse.xtext.parser.packrat.IMarkerFactory.IMarker;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ConsumeResult;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.parser.terminalrules.services.HiddenTerminalsTestLanguageGrammarAccess.InheritingHiddensElements;

import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.HiddenTerminalsTestLanguageHidingHiddensConsumer;
import org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers.HiddenTerminalsTestLanguageInheritingHiddensCallConsumer;

@SuppressWarnings("unused")
public final class HiddenTerminalsTestLanguageInheritingHiddensConsumer extends NonTerminalConsumer {

	private InheritingHiddensElements rule;
	
	private INonTerminalConsumer hidingHiddensConsumer;
	private INonTerminalConsumer inheritingHiddensCallConsumer;

	private ICharacterClass keyword$6$Delimiter;
	
	private ICharacterClass keyword$7$Delimiter;
	
	private ICharacterClass keyword$8$Delimiter;
	
	private ICharacterClass keyword$14$Delimiter;
	
	private ICharacterClass keyword$16$Delimiter;
	
	public HiddenTerminalsTestLanguageInheritingHiddensConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$6$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$7$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$8$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$14$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$16$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume(int entryPoint) throws Exception {
		return consumeGroup$1(entryPoint);
	}

	protected int consumeGroup$1(int entryPoint) throws Exception {
		int result = doConsumeGroup$1(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeGroup$1(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeGroup$1(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().eleGroup());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$6(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00000KeywordInheriting());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$7(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00001KeywordHiddens());
					return result.getResult();
				}
			case 2:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$8(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0001KeywordLeftParenthesis());
					return result.getResult();
				}
			case 3:
				result.nextStep();
				if (result.didGroupFail(consumeAlternatives$9(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele001Alternatives());
					return result.getResult();
				}
			case 4:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$14(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele01KeywordRightParenthesis());
					return result.getResult();
				}
			case 5:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$15(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele1AssignmentValid());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeKeyword$6(int entryPoint) throws Exception {
		int result = doConsumeKeyword$6(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$6(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$6(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele00000KeywordInheriting(), null, false, false, getKeyword$6$Delimiter());
	}

	protected int consumeKeyword$7(int entryPoint) throws Exception {
		int result = doConsumeKeyword$7(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$7(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$7(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele00001KeywordHiddens(), null, false, false, getKeyword$7$Delimiter());
	}

	protected int consumeKeyword$8(int entryPoint) throws Exception {
		int result = doConsumeKeyword$8(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$8(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$8(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele0001KeywordLeftParenthesis(), null, false, false, getKeyword$8$Delimiter());
	}

	protected int consumeAlternatives$9(int entryPoint) throws Exception {
		int result = doConsumeAlternatives$9(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAlternatives$9(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAlternatives$9(int entryPoint) throws Exception {
		final AlternativesResult result = createAlternativesResult(getRule().ele001Alternatives());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextAlternative();
				if (result.isAlternativeDone(consumeAssignment$10(nextEntryPoint()))) { 
					return result.getResult(); 
				}
			case 1:
				result.nextAlternative();
				if (result.isAlternativeDone(consumeAssignment$12(nextEntryPoint()))) { 
					return result.getResult(); 
				}
		}
		return result.getResult();
	}

	protected int consumeAssignment$10(int entryPoint) throws Exception {
		int result = doConsumeAssignment$10(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$10(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$10(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele0010AssignmentCalled());
		return result.getResult(consumeRuleCall$11(entryPoint));
	}

	protected int consumeRuleCall$11(int entryPoint) throws Exception {
		return consumeNonTerminal(inheritingHiddensCallConsumer, "called", false, false, false, getRule().ele00100ParserRuleCallInheritingHiddensCall());
	}

	protected int consumeAssignment$12(int entryPoint) throws Exception {
		int result = doConsumeAssignment$12(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$12(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$12(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele0011AssignmentHidingCalled());
		return result.getResult(consumeRuleCall$13(entryPoint));
	}

	protected int consumeRuleCall$13(int entryPoint) throws Exception {
		return consumeNonTerminal(hidingHiddensConsumer, "hidingCalled", false, false, false, getRule().ele00110ParserRuleCallHidingHiddens());
	}

	protected int consumeKeyword$14(int entryPoint) throws Exception {
		int result = doConsumeKeyword$14(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$14(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$14(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele01KeywordRightParenthesis(), null, false, false, getKeyword$14$Delimiter());
	}

	protected int consumeAssignment$15(int entryPoint) throws Exception {
		int result = doConsumeAssignment$15(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$15(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$15(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele1AssignmentValid());
		return result.getResult(consumeKeyword$16(entryPoint));
	}

	protected int consumeKeyword$16(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele10KeywordSemicolon(), "valid", false, true, getKeyword$16$Delimiter());
	}

	public InheritingHiddensElements getRule() {
		return rule;
	}
	
	public void setRule(InheritingHiddensElements rule) {
		this.rule = rule;
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setHidingHiddensConsumer(INonTerminalConsumer hidingHiddensConsumer) {
		this.hidingHiddensConsumer = hidingHiddensConsumer;
	}
	
	public void setInheritingHiddensCallConsumer(INonTerminalConsumer inheritingHiddensCallConsumer) {
		this.inheritingHiddensCallConsumer = inheritingHiddensCallConsumer;
	}
	
	public ICharacterClass getKeyword$6$Delimiter() {
		return keyword$6$Delimiter;
	}
	
	public void setKeyword$6$Delimiter(ICharacterClass characterClass) {
		keyword$6$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$7$Delimiter() {
		return keyword$7$Delimiter;
	}
	
	public void setKeyword$7$Delimiter(ICharacterClass characterClass) {
		keyword$7$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$8$Delimiter() {
		return keyword$8$Delimiter;
	}
	
	public void setKeyword$8$Delimiter(ICharacterClass characterClass) {
		keyword$8$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$14$Delimiter() {
		return keyword$14$Delimiter;
	}
	
	public void setKeyword$14$Delimiter(ICharacterClass characterClass) {
		keyword$14$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$16$Delimiter() {
		return keyword$16$Delimiter;
	}
	
	public void setKeyword$16$Delimiter(ICharacterClass characterClass) {
		keyword$16$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
