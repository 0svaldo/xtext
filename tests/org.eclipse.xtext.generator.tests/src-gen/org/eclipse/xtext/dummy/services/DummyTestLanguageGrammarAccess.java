/*
* generated by Xtext
*/

package org.eclipse.xtext.dummy.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.builtin.XtextBuiltinGrammarAccess;

@Singleton
public class DummyTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class ModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cAssignmentElements = (Assignment)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallElement = (RuleCall)cAssignmentElements.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Assignment eleAssignmentElements() { return cAssignmentElements; }

		// not supported
		public RuleCall ele0ParserRuleCallElement() { return c0ParserRuleCallElement; }
	}

	public class ElementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Group c00Group = (Group)c0Group.eContents().get(0);
		private final Group c000Group = (Group)c00Group.eContents().get(0);
		private final Assignment c0000AssignmentOptional = (Assignment)c000Group.eContents().get(0);
		private final Keyword c00000KeywordOptional = (Keyword)c0000AssignmentOptional.eContents().get(0);
		private final Keyword c0001KeywordElement = (Keyword)c000Group.eContents().get(1);
		private final Assignment c001AssignmentName = (Assignment)c00Group.eContents().get(1);
		private final RuleCall c0010LexerRuleCallID = (RuleCall)c001AssignmentName.eContents().get(0);
		private final Assignment c01AssignmentDescriptions = (Assignment)c0Group.eContents().get(1);
		private final RuleCall c010LexerRuleCallSTRING = (RuleCall)c01AssignmentDescriptions.eContents().get(0);
		private final Keyword c1KeywordSemicolon = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Group ele00Group() { return c00Group; }

		// not supported
		public Group ele000Group() { return c000Group; }

		// not supported
		public Assignment ele0000AssignmentOptional() { return c0000AssignmentOptional; }

		// not supported
		public Keyword ele00000KeywordOptional() { return c00000KeywordOptional; }

		// not supported
		public Keyword ele0001KeywordElement() { return c0001KeywordElement; }

		// not supported
		public Assignment ele001AssignmentName() { return c001AssignmentName; }

		// not supported
		public RuleCall ele0010LexerRuleCallID() { return c0010LexerRuleCallID; }

		// not supported
		public Assignment ele01AssignmentDescriptions() { return c01AssignmentDescriptions; }

		// not supported
		public RuleCall ele010LexerRuleCallSTRING() { return c010LexerRuleCallSTRING; }

		// not supported
		public Keyword ele1KeywordSemicolon() { return c1KeywordSemicolon; }
	}
	
	private ModelElements pModel;
	private ElementElements pElement;
	
	private final GrammarProvider grammarProvider;

	private XtextBuiltinGrammarAccess superGrammarAccess;

	@Inject
	public DummyTestLanguageGrammarAccess(GrammarProvider grammarProvider, XtextBuiltinGrammarAccess superGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.superGrammarAccess = superGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public XtextBuiltinGrammarAccess getSuperGrammarAccess() {
		return superGrammarAccess;
	}

	
	// not supported
	public ModelElements prModel() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	} 

	// not supported
	public ElementElements prElement() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	} 

	// not supported
	public LexerRule lrID() {
		return superGrammarAccess.lrID();
	} 

	// not supported
	public LexerRule lrINT() {
		return superGrammarAccess.lrINT();
	} 

	// not supported
	public LexerRule lrSTRING() {
		return superGrammarAccess.lrSTRING();
	} 

	// not supported
	public LexerRule lrML_COMMENT() {
		return superGrammarAccess.lrML_COMMENT();
	} 

	// not supported
	public LexerRule lrSL_COMMENT() {
		return superGrammarAccess.lrSL_COMMENT();
	} 

	// not supported
	public LexerRule lrWS() {
		return superGrammarAccess.lrWS();
	} 

	// not supported
	public LexerRule lrANY_OTHER() {
		return superGrammarAccess.lrANY_OTHER();
	} 
}
