/*
* generated by Xtext
*/
package org.eclipse.xtext.dummy.parseTreeConstruction;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;
import org.eclipse.xtext.dummy.services.DummyTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class DummyTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private DummyTestLanguageGrammarAccess grammarAccess;
	
	@Override
	protected Solution internalSerialize(EObject obj) {
		IInstanceDescription inst = getDescr(obj);
		Solution s;
		if(inst.isInstanceOf(grammarAccess.prModel().getRule().getType().getClassifier()) && (s = new Model_Assignment_elements(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.prElement().getRule().getType().getClassifier()) && (s = new Element_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		return null;
	}
	

/************ begin Rule Model ****************
 *
 * not supported
 *
 **/


// not supported
protected class Model_Assignment_elements extends AssignmentToken  {
	
	public Model_Assignment_elements(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prModel().eleAssignmentElements();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("elements",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.prElement().getRule().getType().getClassifier())) {
				Solution s = new Element_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

/************ end Rule Model ****************/


/************ begin Rule Element ****************
 *
 * not supported
 *
 **/


// not supported
protected class Element_Group extends GroupToken {
	
	public Element_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.prElement().eleGroup();
	}

	

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Element_4_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Element_3_Assignment_descriptions(s1.getCurrent(), s1.getPredecessor()).firstSolution();
		while(s2 != null) {
			Solution s3 = new Element_2_Assignment_name(s2.getCurrent(), s2.getPredecessor()).firstSolution();
		while(s3 != null) {
			Solution s4 = new Element_1_Keyword_element(s3.getCurrent(), s3.getPredecessor()).firstSolution();
		while(s4 != null) {
			Solution s5 = new Element_0_Assignment_optional(s4.getCurrent(), s4.getPredecessor()).firstSolution();
			if(s5 != null) {
				last = s5.getPredecessor();
				return s5;
			} else {
				s4 = s4.getPredecessor().nextSolution(this,s4);
			}
		}
			s3 = s3.getPredecessor().nextSolution(this,s3);
		}
			s2 = s2.getPredecessor().nextSolution(this,s2);
		}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// not supported
protected class Element_0_Assignment_optional extends AssignmentToken  {
	
	public Element_0_Assignment_optional(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prElement().ele0AssignmentOptional();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("optional",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("optional");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.prElement().ele00KeywordOptional();
			return new Solution(obj);
		}

		return null;
	}
}

// not supported
protected class Element_1_Keyword_element extends KeywordToken  {
	
	public Element_1_Keyword_element(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prElement().ele1KeywordElement();
	}	
}

// not supported
protected class Element_2_Assignment_name extends AssignmentToken  {
	
	public Element_2_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prElement().ele2AssignmentName();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prElement().ele20TerminalRuleCallID();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class Element_3_Assignment_descriptions extends AssignmentToken  {
	
	public Element_3_Assignment_descriptions(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.prElement().ele3AssignmentDescriptions();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("descriptions",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("descriptions");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.prElement().ele30TerminalRuleCallSTRING();
			return new Solution(obj);
		}
		return null;
	}
}

// not supported
protected class Element_4_Keyword extends KeywordToken  {
	
	public Element_4_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.prElement().ele4KeywordSemicolon();
	}	
}


/************ end Rule Element ****************/

}
