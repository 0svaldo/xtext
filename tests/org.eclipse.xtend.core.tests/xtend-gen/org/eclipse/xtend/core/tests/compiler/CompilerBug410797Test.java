/**
 * Copyright (c) 2014 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package org.eclipse.xtend.core.tests.compiler;

import org.eclipse.xtend.core.tests.compiler.AbstractXtendCompilerTest;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.junit.Test;

/**
 * @author Sebastian Zarnekow - Initial contribution and API
 */
@SuppressWarnings("all")
public class CompilerBug410797Test extends AbstractXtendCompilerTest {
  @Test
  public void testBug_410797_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def Iterable<D> m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val list = <E>newArrayList");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val g = new G");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("list.map[e|e.m].flatten.map[d(g)]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def d(F f, G g) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("new D");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class D {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class E {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<F>newArrayList");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class G {\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class F {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import com.google.common.collect.Iterables;");
    _builder_1.newLine();
    _builder_1.append("import java.util.ArrayList;");
    _builder_1.newLine();
    _builder_1.append("import java.util.List;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.CollectionLiterals;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function1;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.IterableExtensions;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.ListExtensions;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Iterable<D> m() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Iterable<D> _xblockexpression = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final ArrayList<E> list = CollectionLiterals.<E>newArrayList();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final G g = new G();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Function1<E,ArrayList<F>> _function = new Function1<E,ArrayList<F>>() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public ArrayList<F> apply(final E e) {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("return e.m();");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("List<ArrayList<F>> _map = ListExtensions.<E, ArrayList<F>>map(list, _function);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("Iterable<F> _flatten = Iterables.<F>concat(_map);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Function1<F,D> _function_1 = new Function1<F,D>() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public D apply(final F it) {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("return C.this.d(it, g);");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_xblockexpression = IterableExtensions.<F, D>map(_flatten, _function_1);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _xblockexpression;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public D d(final F f, final G g) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return new D();");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug_410797_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def Iterable<D> m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val g = new G();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<E>newArrayList.map[e|e.m].flatten.map[d(g)]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def d(F f, G g) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("new D");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class D {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class E {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<F>newArrayList");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class G {\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class F {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import com.google.common.collect.Iterables;");
    _builder_1.newLine();
    _builder_1.append("import java.util.ArrayList;");
    _builder_1.newLine();
    _builder_1.append("import java.util.List;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.CollectionLiterals;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function1;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.IterableExtensions;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.ListExtensions;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Iterable<D> m() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Iterable<D> _xblockexpression = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final G g = new G();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("ArrayList<E> _newArrayList = CollectionLiterals.<E>newArrayList();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Function1<E,ArrayList<F>> _function = new Function1<E,ArrayList<F>>() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public ArrayList<F> apply(final E e) {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("return e.m();");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("List<ArrayList<F>> _map = ListExtensions.<E, ArrayList<F>>map(_newArrayList, _function);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("Iterable<F> _flatten = Iterables.<F>concat(_map);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Function1<F,D> _function_1 = new Function1<F,D>() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public D apply(final F it) {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("return C.this.d(it, g);");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_xblockexpression = IterableExtensions.<F, D>map(_flatten, _function_1);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _xblockexpression;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public D d(final F f, final G g) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return new D();");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug_410797_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def Iterable<D> m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<E>newArrayList.map[e|e.m].flatten.map[d(new G)]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def d(F f, G g) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("new D");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class D {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class E {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<F>newArrayList");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class G {\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class F {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import com.google.common.collect.Iterables;");
    _builder_1.newLine();
    _builder_1.append("import java.util.ArrayList;");
    _builder_1.newLine();
    _builder_1.append("import java.util.List;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.CollectionLiterals;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function1;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.IterableExtensions;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.ListExtensions;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Iterable<D> m() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("ArrayList<E> _newArrayList = CollectionLiterals.<E>newArrayList();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Function1<E,ArrayList<F>> _function = new Function1<E,ArrayList<F>>() {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("public ArrayList<F> apply(final E e) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return e.m();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("List<ArrayList<F>> _map = ListExtensions.<E, ArrayList<F>>map(_newArrayList, _function);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Iterable<F> _flatten = Iterables.<F>concat(_map);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Function1<F,D> _function_1 = new Function1<F,D>() {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("public D apply(final F it) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("G _g = new G();");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return C.this.d(it, _g);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return IterableExtensions.<F, D>map(_flatten, _function_1);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public D d(final F f, final G g) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return new D();");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
}
