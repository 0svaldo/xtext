/*
* generated by Xtext
*/

import org::eclipse::xtext;

import org::eclipse::emf::ecore;
import org::eclipse::jface::text::contentassist;
import org::eclipse::xtext::crossref;
import org::eclipse::xtext::ui::common::editor::contentassist;
import org::eclipse::xtext::ui::common::xtend::contentassist;

extension org::eclipse::xtext::xtend::contentassist::ContentAssist reexport;
extension org::eclipse::xtend::util::stdlib::io;

/**
 * Represents a generated, default implementation of interface {@link IProposalProvider}.
 * 
 * @see org.eclipse.xtext.ui.common.editor.contentassist.IProposalProvider
 */
	 
List[ICompletionProposal] completeGrammar_Name(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGrammar_Name feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeGrammar_UsedGrammars(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGrammar_UsedGrammars feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);

	 
List[ICompletionProposal] completeGrammar_DefinesHiddenTokens(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGrammar_DefinesHiddenTokens feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeGrammar_HiddenTokens(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGrammar_HiddenTokens feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);

	 
List[ICompletionProposal] completeGrammar_MetamodelDeclarations(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGrammar_MetamodelDeclarations feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeGrammar_Rules(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGrammar_Rules feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeGeneratedMetamodel_Name(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGeneratedMetamodel_Name feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "GeneratedMetamodel_Name", contentAssistContext) };
	 
List[ICompletionProposal] completeGeneratedMetamodel_EPackage(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGeneratedMetamodel_EPackage feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);
	 
List[ICompletionProposal] completeGeneratedMetamodel_Alias(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGeneratedMetamodel_Alias feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "GeneratedMetamodel_Alias", contentAssistContext) };
	 
List[ICompletionProposal] completeReferencedMetamodel_EPackage(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeReferencedMetamodel_EPackage feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);
	 
List[ICompletionProposal] completeReferencedMetamodel_Alias(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeReferencedMetamodel_Alias feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "ReferencedMetamodel_Alias", contentAssistContext) };
	 
List[ICompletionProposal] completeParserRule_Name(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeParserRule_Name feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "ParserRule_Name", contentAssistContext) };
	 
List[ICompletionProposal] completeParserRule_Type(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeParserRule_Type feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeParserRule_DefinesHiddenTokens(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeParserRule_DefinesHiddenTokens feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeParserRule_HiddenTokens(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeParserRule_HiddenTokens feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);

	 
List[ICompletionProposal] completeParserRule_Alternatives(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeParserRule_Alternatives feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeTypeRef_Metamodel(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTypeRef_Metamodel feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);
	 
List[ICompletionProposal] completeTypeRef_Classifier(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTypeRef_Classifier feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);
	 
List[ICompletionProposal] completeAlternatives_Groups(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeAlternatives_Groups feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeGroup_Tokens(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGroup_Tokens feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeAbstractTokenWithCardinality_Cardinality(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeAbstractTokenWithCardinality_Cardinality feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeAction_Type(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeAction_Type feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeAction_Feature(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeAction_Feature feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "Action_Feature", contentAssistContext) };
	 
List[ICompletionProposal] completeAction_Operator(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeAction_Operator feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeKeyword_Value(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeKeyword_Value feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{ newProposal(assignment, "\"Keyword_Value\"", contentAssistContext) };
	 
List[ICompletionProposal] completeRuleCall_Rule(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeRuleCall_Rule feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);
	 
List[ICompletionProposal] completeAssignment_Feature(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeAssignment_Feature feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "Assignment_Feature", contentAssistContext) };
	 
List[ICompletionProposal] completeAssignment_Operator(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeAssignment_Operator feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeAssignment_Terminal(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeAssignment_Terminal feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeAssignableAlternatives_Groups(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeAssignableAlternatives_Groups feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeCrossReference_Type(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeCrossReference_Type feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeCrossReference_Terminal(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeCrossReference_Terminal feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeCrossReferenceableAlternatives_Groups(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeCrossReferenceableAlternatives_Groups feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeTerminalRule_Name(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTerminalRule_Name feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "TerminalRule_Name", contentAssistContext) };
	 
List[ICompletionProposal] completeTerminalRule_Type(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTerminalRule_Type feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeTerminalRule_Alternatives(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTerminalRule_Alternatives feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeTerminalAlternatives_Groups(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTerminalAlternatives_Groups feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeTerminalGroup_Tokens(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTerminalGroup_Tokens feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeTerminalToken_Cardinality(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTerminalToken_Cardinality feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeNegatedToken_Terminal(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeNegatedToken_Terminal feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeUntilToken_Terminal(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeUntilToken_Terminal feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeCharacterRange_Right(EObject model, Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeCharacterRange_Right feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 	  
List[ICompletionProposal] complete(EObject model, RuleCall ruleCall, IContentAssistContext contentAssistContext) :
	{};
	 	  
List[ICompletionProposal] completeEcore_EString(EObject model, RuleCall ruleCall, IContentAssistContext contentAssistContext) :
	{};

/*
	// TODO 
    @Override
	protected String getDefaultImageFilePath() {
		return "icons/editor.gif";
	}

	@Override
	protected String getPluginId() {
		return UI_PLUGIN_ID;
	}
*/
