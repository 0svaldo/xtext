/*
* generated by Xtext
*/
package org.eclipse.xtext.testlanguages.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.testlanguages.services.ReferenceGrammarTestLanguageGrammarAccess.FamilieElements;

public final class ReferenceGrammarTestLanguageFamilieConsumer extends NonTerminalConsumer {

	private FamilieElements rule;	

	private ITerminalConsumer idConsumer;

	private ITerminalConsumer stringConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer keyword$8$Consumer;

	private IElementConsumer keyword$9$Consumer;

	private IElementConsumer assignment$10$Consumer;

	private IElementConsumer alternatives$11$Consumer;

	private IElementConsumer keyword$13$Consumer;

	private IElementConsumer ruleCall$14$Consumer;

	private IElementConsumer ruleCall$15$Consumer;

	private IElementConsumer assignment$16$Consumer;

	private IElementConsumer crossReference$17$Consumer;

	private IElementConsumer assignment$19$Consumer;

	private IElementConsumer crossReference$20$Consumer;

	private IElementConsumer assignment$22$Consumer;

	private IElementConsumer crossReference$23$Consumer;

	private IElementConsumer group$25$Consumer;

	private IElementConsumer keyword$26$Consumer;

	private IElementConsumer assignment$27$Consumer;

	private IElementConsumer crossReference$28$Consumer;

	private IElementConsumer keyword$30$Consumer;

	private ISequenceMatcher crossReference$20$Delimiter;

	private ISequenceMatcher crossReference$23$Delimiter;

	private ISequenceMatcher crossReference$28$Delimiter;

	private ISequenceMatcher crossReference$17$Delimiter;

	private ICharacterClass keyword$26$Delimiter;

	private ICharacterClass keyword$30$Delimiter;

	private ICharacterClass keyword$8$Delimiter;

	private ICharacterClass keyword$9$Delimiter;

	private ICharacterClass keyword$13$Delimiter;

	private ISequenceMatcher ruleCall$14$Delimiter;

	private ISequenceMatcher ruleCall$15$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$8$Consumer);
			acceptor.accept(keyword$9$Consumer);
			acceptor.accept(assignment$10$Consumer);
			acceptor.accept(assignment$16$Consumer);
			acceptor.accept(assignment$19$Consumer);
			acceptor.accept(assignment$22$Consumer);
			acceptor.accept(group$25$Consumer);
			acceptor.accept(keyword$30$Consumer);
		}
	}

	protected class Keyword$8$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$8$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$8$Delimiter(), optional);
		}
	}

	protected class Keyword$9$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$9$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$9$Delimiter(), optional);
		}
	}

	protected class Assignment$10$Consumer extends AssignmentConsumer {
		
		protected Assignment$10$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return alternatives$11$Consumer;
		}
	}

	protected class Alternatives$11$Consumer extends AlternativesConsumer {
		
		protected Alternatives$11$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$13$Consumer);
			acceptor.accept(ruleCall$14$Consumer);
			acceptor.accept(ruleCall$15$Consumer);
		}
	}

	protected class Keyword$13$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$13$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "name", false, false, getKeyword$13$Delimiter(), optional);
		}
	}

	protected class RuleCall$14$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$14$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "name", false, false, getElement(), getRuleCall$14$Delimiter(), optional);
		}
	}

	protected class RuleCall$15$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$15$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "name", false, false, getElement(), getRuleCall$15$Delimiter(), optional);
		}
	}

	protected class Assignment$16$Consumer extends AssignmentConsumer {
		
		protected Assignment$16$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$17$Consumer;
		}
	}

	protected class CrossReference$17$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$17$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "mutter", false, false, getElement(), getCrossReference$17$Delimiter(), optional);
		}
	}

	protected class Assignment$19$Consumer extends AssignmentConsumer {
		
		protected Assignment$19$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$20$Consumer;
		}
	}

	protected class CrossReference$20$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$20$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "vater", false, false, getElement(), getCrossReference$20$Delimiter(), optional);
		}
	}

	protected class Assignment$22$Consumer extends AssignmentConsumer {
		
		protected Assignment$22$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$23$Consumer;
		}
	}

	protected class CrossReference$23$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$23$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "kinder", true, false, getElement(), getCrossReference$23$Delimiter(), optional);
		}
	}

	protected class Group$25$Consumer extends LoopGroupConsumer {
		
		protected Group$25$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$26$Consumer);
			acceptor.accept(assignment$27$Consumer);
		}
	}

	protected class Keyword$26$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$26$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$26$Delimiter(), optional);
		}
	}

	protected class Assignment$27$Consumer extends AssignmentConsumer {
		
		protected Assignment$27$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$28$Consumer;
		}
	}

	protected class CrossReference$28$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$28$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "kinder", true, false, getElement(), getCrossReference$28$Delimiter(), optional);
		}
	}

	protected class Keyword$30$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$30$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$30$Delimiter(), optional);
		}
	}

	public ReferenceGrammarTestLanguageFamilieConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		crossReference$20$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		crossReference$23$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		crossReference$28$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		crossReference$17$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		keyword$26$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$30$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$8$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$9$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$13$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$14$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$15$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public FamilieElements getRule() {
		return rule;
	}
	
	public void setRule(FamilieElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		keyword$8$Consumer = new Keyword$8$Consumer(rule.ele0000000KeywordFamilie());
		keyword$9$Consumer = new Keyword$9$Consumer(rule.ele0000001KeywordLeftParenthesis());
		assignment$10$Consumer = new Assignment$10$Consumer(rule.ele000001AssignmentName());
		alternatives$11$Consumer = new Alternatives$11$Consumer(rule.ele0000010Alternatives());
		keyword$13$Consumer = new Keyword$13$Consumer(rule.ele000001000KeywordKeyword());
		ruleCall$14$Consumer = new RuleCall$14$Consumer(rule.ele000001001LexerRuleCallSTRING());
		ruleCall$15$Consumer = new RuleCall$15$Consumer(rule.ele00000101LexerRuleCallID());
		keyword$13$Consumer = new Keyword$13$Consumer(rule.ele000001000KeywordKeyword());
		ruleCall$14$Consumer = new RuleCall$14$Consumer(rule.ele000001001LexerRuleCallSTRING());
		ruleCall$15$Consumer = new RuleCall$15$Consumer(rule.ele00000101LexerRuleCallID());
		assignment$16$Consumer = new Assignment$16$Consumer(rule.ele00001AssignmentMutter());
		crossReference$17$Consumer = new CrossReference$17$Consumer(rule.ele000010CrossReferenceEStringErwachsener());
		assignment$19$Consumer = new Assignment$19$Consumer(rule.ele0001AssignmentVater());
		crossReference$20$Consumer = new CrossReference$20$Consumer(rule.ele00010CrossReferenceEStringErwachsener());
		assignment$22$Consumer = new Assignment$22$Consumer(rule.ele001AssignmentKinder());
		crossReference$23$Consumer = new CrossReference$23$Consumer(rule.ele0010CrossReferenceEStringKind());
		group$25$Consumer = new Group$25$Consumer(rule.ele01Group());
		keyword$26$Consumer = new Keyword$26$Consumer(rule.ele010KeywordComma());
		assignment$27$Consumer = new Assignment$27$Consumer(rule.ele011AssignmentKinder());
		crossReference$28$Consumer = new CrossReference$28$Consumer(rule.ele0110CrossReferenceEStringKind());
		keyword$30$Consumer = new Keyword$30$Consumer(rule.ele1KeywordRightParenthesis());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setStringConsumer(ITerminalConsumer stringConsumer) {
		this.stringConsumer = stringConsumer;
	}
	
	public ISequenceMatcher getCrossReference$20$Delimiter() {
		return crossReference$20$Delimiter;
	}
	
	public void setCrossReference$20$Delimiter(ISequenceMatcher matcher) {
		crossReference$20$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getCrossReference$23$Delimiter() {
		return crossReference$23$Delimiter;
	}
	
	public void setCrossReference$23$Delimiter(ISequenceMatcher matcher) {
		crossReference$23$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getCrossReference$28$Delimiter() {
		return crossReference$28$Delimiter;
	}
	
	public void setCrossReference$28$Delimiter(ISequenceMatcher matcher) {
		crossReference$28$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getCrossReference$17$Delimiter() {
		return crossReference$17$Delimiter;
	}
	
	public void setCrossReference$17$Delimiter(ISequenceMatcher matcher) {
		crossReference$17$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ICharacterClass getKeyword$26$Delimiter() {
		return keyword$26$Delimiter;
	}
	
	public void setKeyword$26$Delimiter(ICharacterClass characterClass) {
		keyword$26$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$30$Delimiter() {
		return keyword$30$Delimiter;
	}
	
	public void setKeyword$30$Delimiter(ICharacterClass characterClass) {
		keyword$30$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$8$Delimiter() {
		return keyword$8$Delimiter;
	}
	
	public void setKeyword$8$Delimiter(ICharacterClass characterClass) {
		keyword$8$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$9$Delimiter() {
		return keyword$9$Delimiter;
	}
	
	public void setKeyword$9$Delimiter(ICharacterClass characterClass) {
		keyword$9$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$13$Delimiter() {
		return keyword$13$Delimiter;
	}
	
	public void setKeyword$13$Delimiter(ICharacterClass characterClass) {
		keyword$13$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$14$Delimiter() {
		return ruleCall$14$Delimiter;
	}
	
	public void setRuleCall$14$Delimiter(ISequenceMatcher matcher) {
		ruleCall$14$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$15$Delimiter() {
		return ruleCall$15$Delimiter;
	}
	
	public void setRuleCall$15$Delimiter(ISequenceMatcher matcher) {
		ruleCall$15$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
