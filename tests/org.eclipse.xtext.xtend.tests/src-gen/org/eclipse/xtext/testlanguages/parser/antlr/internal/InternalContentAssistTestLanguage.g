/*
* generated by Xtext
*/
grammar InternalContentAssistTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.testlanguages.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.testlanguages.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.testlanguages.services.ContentAssistTestLanguageGrammarAccess;

}

@parser::members {
 
 	private ContentAssistTestLanguageGrammarAccess grammarAccess;
 	
    public InternalContentAssistTestLanguageParser(TokenStream input, IAstFactory factory, ContentAssistTestLanguageGrammarAccess grammarAccess) {
        super(input, factory, grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/xtext/testlanguages/parser/antlr/internal/InternalContentAssistTestLanguage.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Start";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}





// Entry rule entryRuleStart
entryRuleStart returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prStart().getRule(), currentNode); }
	 iv_ruleStart=ruleStart 
	 { $current=$iv_ruleStart.current; } 
	 EOF 
;

// Rule Start
ruleStart returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('abstract rules' 
    {
        createLeafNode(grammarAccess.prStart().ele00KeywordAbstractRules(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prStart().ele010ParserRuleCallAbstractRule(), currentNode); 
	    }
	    lv_rules_1=ruleAbstractRule 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prStart().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "rules", lv_rules_1, "AbstractRule", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)+)'end' 
    {
        createLeafNode(grammarAccess.prStart().ele1KeywordEnd(), null); 
    }
);







// Entry rule entryRuleAbstractRule
entryRuleAbstractRule returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prAbstractRule().getRule(), currentNode); }
	 iv_ruleAbstractRule=ruleAbstractRule 
	 { $current=$iv_ruleAbstractRule.current; } 
	 EOF 
;

// Rule AbstractRule
ruleAbstractRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.prAbstractRule().ele0ParserRuleCallFirstAbstractRuleChild(), currentNode); 
    }
    this_FirstAbstractRuleChild_0=ruleFirstAbstractRuleChild
    { 
        $current = $this_FirstAbstractRuleChild_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.prAbstractRule().ele1ParserRuleCallSecondAbstractRuleChild(), currentNode); 
    }
    this_SecondAbstractRuleChild_1=ruleSecondAbstractRuleChild
    { 
        $current = $this_SecondAbstractRuleChild_1.current; 
        currentNode = currentNode.getParent();
    }
);







// Entry rule entryRuleFirstAbstractRuleChild
entryRuleFirstAbstractRuleChild returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prFirstAbstractRuleChild().getRule(), currentNode); }
	 iv_ruleFirstAbstractRuleChild=ruleFirstAbstractRuleChild 
	 { $current=$iv_ruleFirstAbstractRuleChild.current; } 
	 EOF 
;

// Rule FirstAbstractRuleChild
ruleFirstAbstractRuleChild returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((((	
	
	    lv_name_0=RULE_ID	{
		createLeafNode(grammarAccess.prFirstAbstractRuleChild().ele00000ParserRuleCallID(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prFirstAbstractRuleChild().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'(' 
    {
        createLeafNode(grammarAccess.prFirstAbstractRuleChild().ele0001KeywordLeftParenthesis(), null); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prFirstAbstractRuleChild().ele0010ParserRuleCallAbstractRule(), currentNode); 
	    }
	    lv_elements_2=ruleAbstractRule 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prFirstAbstractRuleChild().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "elements", lv_elements_2, "AbstractRule", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)+)')' 
    {
        createLeafNode(grammarAccess.prFirstAbstractRuleChild().ele01KeywordRightParenthesis(), null); 
    }
)';' 
    {
        createLeafNode(grammarAccess.prFirstAbstractRuleChild().ele1KeywordSemicolon(), null); 
    }
);







// Entry rule entryRuleSecondAbstractRuleChild
entryRuleSecondAbstractRuleChild returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prSecondAbstractRuleChild().getRule(), currentNode); }
	 iv_ruleSecondAbstractRuleChild=ruleSecondAbstractRuleChild 
	 { $current=$iv_ruleSecondAbstractRuleChild.current; } 
	 EOF 
;

// Rule SecondAbstractRuleChild
ruleSecondAbstractRuleChild returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((((	
	
	    lv_name_0=RULE_ID	{
		createLeafNode(grammarAccess.prSecondAbstractRuleChild().ele00000ParserRuleCallID(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prSecondAbstractRuleChild().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'rule' 
    {
        createLeafNode(grammarAccess.prSecondAbstractRuleChild().ele0001KeywordRule(), null); 
    }
)':' 
    {
        createLeafNode(grammarAccess.prSecondAbstractRuleChild().ele001KeywordColon(), null); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.prSecondAbstractRuleChild().ele010ParserRuleCallAbstractRuleCall(), currentNode); 
	    }
	    lv_rule_3=ruleAbstractRuleCall 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.prSecondAbstractRuleChild().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "rule", lv_rule_3, "AbstractRuleCall", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))';' 
    {
        createLeafNode(grammarAccess.prSecondAbstractRuleChild().ele1KeywordSemicolon(), null); 
    }
);







// Entry rule entryRuleAbstractRuleCall
entryRuleAbstractRuleCall returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.prAbstractRuleCall().getRule(), currentNode); }
	 iv_ruleAbstractRuleCall=ruleAbstractRuleCall 
	 { $current=$iv_ruleAbstractRuleCall.current; } 
	 EOF 
;

// Rule AbstractRuleCall
ruleAbstractRuleCall returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.prAbstractRuleCall().getRule().getType().getType());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.prAbstractRuleCall().ele0CrossReferenceEStringAbstractRule(), "rule"); 
	}

		// TODO assign feature to currentNode
	
);

































RULE_ID : '^'? (('a'..'z'|'A'..'Z')|'_') ((('a'..'z'|'A'..'Z')|'_')|'0'..'9')*;



RULE_INT : ('0'..'9')+;



RULE_STRING : ('\"' ('\\' ((((((('b'|'t')|'n')|'f')|'r')|'\"')|'\'')|'\\')|~(('\\'|'\"')))* '\"'|'\'' ('\\' ((((((('b'|'t')|'n')|'f')|'r')|'\"')|'\'')|'\\')|~(('\\'|'\'')))* '\'');



RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';



RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;



RULE_WS : (((' '|'\t')|'\r')|'\n')+;



RULE_ANY_OTHER : .;




