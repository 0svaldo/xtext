/*
* generated by Xtext
*/

import xtext;

import org::eclipse::emf::ecore;
import org::eclipse::jface::text::contentassist;
import org::eclipse::xtext::crossref;
import org::eclipse::xtext::ui::common::editor::contentassist;
import org::eclipse::xtext::ui::common::xtend::contentassist;

import xtextTest;
import ecore;

extension org::eclipse::xtext::xtend::contentassist::ContentAssist reexport;
extension org::eclipse::xtend::util::stdlib::io;

/**
 * Represents a generated, default implementation of interface {@link IProposalProvider}.
 * 
 * @see org.eclipse.xtext.ui.common.editor.contentassist.IProposalProvider
 */
	 
List[ICompletionProposal] completeGrammar_Name(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGrammar_Name feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeGrammar_UsedGrammars(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGrammar_UsedGrammars feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);

	 
List[ICompletionProposal] completeGrammar_DefinesHiddenTokens(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGrammar_DefinesHiddenTokens feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeGrammar_HiddenTokens(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGrammar_HiddenTokens feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);

	 
List[ICompletionProposal] completeGrammar_MetamodelDeclarations(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGrammar_MetamodelDeclarations feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeGrammar_Rules(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGrammar_Rules feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeGeneratedMetamodel_Name(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGeneratedMetamodel_Name feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "GeneratedMetamodel_Name", contentAssistContext) };
	 
List[ICompletionProposal] completeGeneratedMetamodel_EPackage(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGeneratedMetamodel_EPackage feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);
	 
List[ICompletionProposal] completeGeneratedMetamodel_Alias(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGeneratedMetamodel_Alias feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "GeneratedMetamodel_Alias", contentAssistContext) };
	 
List[ICompletionProposal] completeReferencedMetamodel_EPackage(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeReferencedMetamodel_EPackage feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);
	 
List[ICompletionProposal] completeReferencedMetamodel_Alias(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeReferencedMetamodel_Alias feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "ReferencedMetamodel_Alias", contentAssistContext) };
	 
List[ICompletionProposal] completeParserRule_Name(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeParserRule_Name feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "ParserRule_Name", contentAssistContext) };
	 
List[ICompletionProposal] completeParserRule_Type(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeParserRule_Type feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeParserRule_DefinesHiddenTokens(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeParserRule_DefinesHiddenTokens feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeParserRule_HiddenTokens(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeParserRule_HiddenTokens feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);

	 
List[ICompletionProposal] completeParserRule_Alternatives(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeParserRule_Alternatives feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeTerminalRule_Name(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTerminalRule_Name feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "TerminalRule_Name", contentAssistContext) };
	 
List[ICompletionProposal] completeTerminalRule_Type(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTerminalRule_Type feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeTerminalRule_Alternatives(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTerminalRule_Alternatives feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeTypeRef_Metamodel(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTypeRef_Metamodel feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);
	 
List[ICompletionProposal] completeTypeRef_Type(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTypeRef_Type feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);
	 
List[ICompletionProposal] completeAlternatives_Groups(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeAlternatives_Groups feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeTerminalAlternatives_Groups(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTerminalAlternatives_Groups feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeGroup_AbstractTokens(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGroup_AbstractTokens feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeTerminalGroup_AbstractTokens(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTerminalGroup_AbstractTokens feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeAbstractToken_Cardinality(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeAbstractToken_Cardinality feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeTerminalToken_Cardinality(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTerminalToken_Cardinality feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeAssignment_Feature(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeAssignment_Feature feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "Assignment_Feature", contentAssistContext) };
	 
List[ICompletionProposal] completeAssignment_Operator(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeAssignment_Operator feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeAssignment_Terminal(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeAssignment_Terminal feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeAction_TypeName(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeAction_TypeName feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeAction_Feature(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeAction_Feature feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "Action_Feature", contentAssistContext) };
	 
List[ICompletionProposal] completeAction_Operator(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeAction_Operator feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeNegatedToken_Terminal(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeNegatedToken_Terminal feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeUntilToken_Terminal(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeUntilToken_Terminal feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeWildcard_IsWildcard(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeWildcard_IsWildcard feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeCharacterRange_Right(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeCharacterRange_Right feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeCrossReference_Type(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeCrossReference_Type feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeCrossReference_Rule(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeCrossReference_Rule feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);
	 
List[ICompletionProposal] completeKeyword_Value(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeKeyword_Value feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{ newProposal(assignment, "\"Keyword_Value\"", contentAssistContext) };
	 
List[ICompletionProposal] completeRuleCall_Rule(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeRuleCall_Rule feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);
	 	  
List[ICompletionProposal] complete(RuleCall ruleCall, IContentAssistContext contentAssistContext) :
	{};
	 	  
List[ICompletionProposal] completeEcore_EString(RuleCall ruleCall, IContentAssistContext contentAssistContext) :
	{};

/*
	// TODO 
    @Override
	protected String getDefaultImageFilePath() {
		return "icons/editor.gif";
	}

	@Override
	protected String getPluginId() {
		return UI_PLUGIN_ID;
	}
*/
