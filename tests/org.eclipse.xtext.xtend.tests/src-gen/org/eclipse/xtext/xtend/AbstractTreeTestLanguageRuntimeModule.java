/*
 * generated by Xtext
 */
package org.eclipse.xtext.xtend;

import org.eclipse.xtext.Constants;
import org.eclipse.xtext.service.DefaultRuntimeModule;

import com.google.inject.Binder;
import com.google.inject.name.Names;

/**
 * Manual modifications go to {org.eclipse.xtext.xtend.TreeTestLanguageRuntimeModule}
 */
 @SuppressWarnings("all")
public abstract class AbstractTreeTestLanguageRuntimeModule extends DefaultRuntimeModule {

	// Support for property files is deprecated. Please use configure...() methods instead. 
	protected boolean useProperties = getClass().getResource("org/eclipse/xtext/xtend/TreeTestLanguage.properties") != null;

	@Override
	public void configure(Binder binder) {
		super.configure(binder);
		if(useProperties)
			bindProperties(binder);
	}
	
	protected void bindProperties(Binder binder) {
		bindProperties(binder, "org/eclipse/xtext/xtend/TreeTestLanguage.properties");
	}
	
	public void configureLanguageName(Binder binder) {
		if(!useProperties)
			binder.bind(String.class).annotatedWith(Names.named(Constants.LANGUAGE_NAME)).toInstance("org.eclipse.xtext.xtend.TreeTestLanguage");
	}
	
	public void configureFileExtensions(Binder binder) {
		if(!useProperties)
			binder.bind(String.class).annotatedWith(Names.named(Constants.FILE_EXTENSIONS)).toInstance("treetestlanguage");
	}
	
	// contributed by org.eclipse.xtext.generator.grammarAccess.GrammarAccessFragment
	public Class<? extends org.eclipse.xtext.IGrammarAccess> bindIGrammarAccess() {
		return org.eclipse.xtext.xtend.services.TreeTestLanguageGrammarAccess.class;
	}

	// contributed by org.eclipse.xtext.generator.parseTreeConstructor.ParseTreeConstructorFragment
	public Class<? extends org.eclipse.xtext.parsetree.reconstr.IParseTreeConstructor> bindIParseTreeConstructor() {
		return org.eclipse.xtext.xtend.parseTreeConstruction.TreeTestLanguageParsetreeConstructor.class;
	}

	// contributed by org.eclipse.xtext.generator.validation.CheckFragment
	public Class<? extends org.eclipse.xtend.expression.ExecutionContext> bindExecutionContext() {
		return org.eclipse.xtext.xtend.InjectableExecutionContext.class;
	}

	// contributed by org.eclipse.xtext.generator.validation.CheckFragment
	public Class<? extends org.eclipse.xtend.expression.ResourceManager> bindResourceManager() {
		return org.eclipse.xtext.xtend.InjectableResourceManager.class;
	}

	// contributed by org.eclipse.xtext.generator.validation.CheckFragment
	public java.lang.ClassLoader bindClassLoaderToInstance() {
		return AbstractTreeTestLanguageRuntimeModule.class.getClassLoader();
	}

	// contributed by org.eclipse.xtext.generator.validation.CheckFragment
	@org.eclipse.xtext.service.SingletonBinding(eager=true)	public Class<? extends org.eclipse.xtext.xtend.validation.TreeTestLanguageCheckValidator> bindTreeTestLanguageCheckValidator() {
		return org.eclipse.xtext.xtend.validation.TreeTestLanguageCheckValidator.class;
	}

	// contributed by org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment
	public Class<? extends org.eclipse.xtext.parser.antlr.IAntlrParser> bindIAntlrParser() {
		return org.eclipse.xtext.xtend.parser.antlr.TreeTestLanguageParser.class;
	}

	// contributed by org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment
	public Class<? extends org.eclipse.xtext.parser.ITokenToStringConverter> bindITokenToStringConverter() {
		return org.eclipse.xtext.parser.antlr.AntlrTokenToStringConverter.class;
	}

	// contributed by org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment
	public Class<? extends org.eclipse.xtext.parser.antlr.IAntlrTokenFileProvider> bindIAntlrTokenFileProvider() {
		return org.eclipse.xtext.xtend.parser.antlr.TreeTestLanguageAntlrTokenFileProvider.class;
	}

	// contributed by org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment
	public Class<? extends org.eclipse.xtext.parser.antlr.Lexer> bindLexer() {
		return org.eclipse.xtext.xtend.parser.antlr.internal.InternalTreeTestLanguageLexer.class;
	}

	// contributed by org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment
	public com.google.inject.Provider<org.eclipse.xtext.xtend.parser.antlr.internal.InternalTreeTestLanguageLexer> provideInternalTreeTestLanguageLexer() {
		return org.eclipse.xtext.parser.antlr.LexerProvider.create(org.eclipse.xtext.xtend.parser.antlr.internal.InternalTreeTestLanguageLexer.class);
	}

	// contributed by org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment
	public void configureRuntimeLexer(com.google.inject.Binder binder) {
		binder.bind(org.eclipse.xtext.parser.antlr.Lexer.class).annotatedWith(com.google.inject.name.Names.named(org.eclipse.xtext.parser.antlr.LexerBindings.RUNTIME)).to(org.eclipse.xtext.xtend.parser.antlr.internal.InternalTreeTestLanguageLexer.class);
	}

	// contributed by org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment
	public Class<? extends org.eclipse.xtext.parser.antlr.ITokenDefProvider> bindITokenDefProvider() {
		return org.eclipse.xtext.parser.antlr.AntlrTokenDefProvider.class;
	}

}
