/*
* generated by Xtext
*/

package org.eclipse.xtext.parser.keywords.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class KeywordsTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class ModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cFirstFooBarKeyword_0_0 = (Keyword)cFirstAssignment_0.eContents().get(0);
		private final Assignment cSecondAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cSecondFooKeyword_1_0 = (Keyword)cSecondAssignment_1.eContents().get(0);
		private final Assignment cThirdAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cThirdBarKeyword_2_0 = (Keyword)cThirdAssignment_2.eContents().get(0);
		private final Assignment cForthAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cForthReverseSolidusKeyword_3_0 = (Keyword)cForthAssignment_3.eContents().get(0);
		
		//Model:
		//  first?="foo\\bar"|second?="foo\\"|third?="\\bar"|forth?="\\";
		public ParserRule getRule() { return rule; }

		//first?="foo\\bar"|second?="foo\\"|third?="\\bar"|forth?="\\"
		public Alternatives getAlternatives() { return cAlternatives; }

		//first?="foo\\bar"
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }

		//"foo\\bar"
		public Keyword getFirstFooBarKeyword_0_0() { return cFirstFooBarKeyword_0_0; }

		//second?="foo\\"
		public Assignment getSecondAssignment_1() { return cSecondAssignment_1; }

		//"foo\\"
		public Keyword getSecondFooKeyword_1_0() { return cSecondFooKeyword_1_0; }

		//third?="\\bar"
		public Assignment getThirdAssignment_2() { return cThirdAssignment_2; }

		//"\\bar"
		public Keyword getThirdBarKeyword_2_0() { return cThirdBarKeyword_2_0; }

		//forth?="\\"
		public Assignment getForthAssignment_3() { return cForthAssignment_3; }

		//"\\"
		public Keyword getForthReverseSolidusKeyword_3_0() { return cForthReverseSolidusKeyword_3_0; }
	}
	
	
	private ModelElements pModel;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public KeywordsTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//  first?="foo\\bar"|second?="foo\\"|third?="\\bar"|forth?="\\";
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//terminal ID:
	//  "^" ? ( "a" .. "z" | "A" .. "Z" | "_" ) ( "a" .. "z" | "A" .. "Z" | "_" | "0" .. "9" ) *;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0" .. "9" +;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ( "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" ) | ! ( "\\" | "\"" ) ) * "\"" | "\'" ( "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" ) | ! ( "\\" | "\'" ) ) * "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/*" -> "*/";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" ! ( "\n" | "\r" ) * ( "\r" ? "\n" ) ?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  ( " " | "\t" | "\r" | "\n" ) +;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//org.eclipse.xtext.parsetree.reconstr.XtextSerializationException: Serialization of TerminalRule failed.
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
