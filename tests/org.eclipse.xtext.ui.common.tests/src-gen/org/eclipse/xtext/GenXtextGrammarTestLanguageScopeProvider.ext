/*
* generated by Xtext
*/

import org::eclipse::xtext::crossref;

import xtextTest;
import ecore;

extension org::eclipse::xtext::xtend::crossref::ScopeProvider reexport;
extension org::eclipse::xtend::util::stdlib::io;

/**
 * Represents a generated, default implementation of interface {@link IScopeProvider}.
 * 
 * @see org.eclipse.xtext.ui.common.editor.contentassist.IScopeProvider
 */


List[IScopedElement] scope_hiddenTokens(Grammar this):
	allElements().typeSelect(AbstractRule).collect(x | createScopedElement(x.referenceName(), x));
	
List[IScopedElement] scope_hiddenTokens(emf::EObject this) :
	allElements().collect(x | createScopedElement(x.referenceName(), x));

List[IScopedElement] scope_superGrammar(Grammar this):
	allElements().typeSelect(Grammar).collect(x | createScopedElement(x.referenceName(), x));
	
List[IScopedElement] scope_superGrammar(emf::EObject this) :
	allElements().collect(x | createScopedElement(x.referenceName(), x));

List[IScopedElement] scope_ePackage(AbstractMetamodelDeclaration this):
	allElements().typeSelect(ecore::EPackage).collect(x | createScopedElement(x.referenceName(), x));
	
List[IScopedElement] scope_ePackage(emf::EObject this) :
	allElements().collect(x | createScopedElement(x.referenceName(), x));

List[IScopedElement] scope_hiddenTokens(ParserRule this):
	allElements().typeSelect(AbstractRule).collect(x | createScopedElement(x.referenceName(), x));
	
List[IScopedElement] scope_hiddenTokens(emf::EObject this) :
	allElements().collect(x | createScopedElement(x.referenceName(), x));

List[IScopedElement] scope_type(TypeRef this):
	allElements().typeSelect(ecore::EClassifier).collect(x | createScopedElement(x.referenceName(), x));
	
List[IScopedElement] scope_type(emf::EObject this) :
	allElements().collect(x | createScopedElement(x.referenceName(), x));

List[IScopedElement] scope_metamodel(TypeRef this):
	allElements().typeSelect(AbstractMetamodelDeclaration).collect(x | createScopedElement(x.referenceName(), x));
	
List[IScopedElement] scope_metamodel(emf::EObject this) :
	allElements().collect(x | createScopedElement(x.referenceName(), x));

List[IScopedElement] scope_rule(RuleCall this):
	allElements().typeSelect(AbstractRule).collect(x | createScopedElement(x.referenceName(), x));
	
List[IScopedElement] scope_rule(emf::EObject this) :
	allElements().collect(x | createScopedElement(x.referenceName(), x));

List[IScopedElement] scope_rule(CrossReference this):
	allElements().typeSelect(AbstractRule).collect(x | createScopedElement(x.referenceName(), x));
	
List[IScopedElement] scope_rule(emf::EObject this) :
	allElements().collect(x | createScopedElement(x.referenceName(), x));

