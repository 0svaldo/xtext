/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.keywords.parseTreeConstruction;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;
import org.eclipse.xtext.parser.keywords.services.KeywordsTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class KeywordsTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private KeywordsTestLanguageGrammarAccess grammarAccess;
	
	@Override
	protected Solution internalSerialize(EObject obj) {
		IInstanceDescription inst = getDescr(obj);
		Solution s;
		if(inst.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier()) && (s = new Model_Alternatives(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		return null;
	}
	

/************ begin Rule Model ****************
 *
 * Model:
 *   first?="foo\\bar"|second?="foo\\"|third?="\\bar"|forth?="\\";
 *
 **/

// first?="foo\\bar"|second?="foo\\"|third?="\\bar"|forth?="\\"
protected class Model_Alternatives extends AlternativesToken {

	public Model_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getModelAccess().getAlternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new Model_0_Assignment_first(current, this);
			case 1: return new Model_1_Assignment_second(current, this);
			case 2: return new Model_2_Assignment_third(current, this);
			case 3: return new Model_3_Assignment_forth(current, this);
			default: return null;
		}
	}
}

// first?="foo\\bar"
protected class Model_0_Assignment_first extends AssignmentToken  {
	
	public Model_0_Assignment_first(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getFirstAssignment_0();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("first",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("first");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.getModelAccess().getFirstFooBarKeyword_0_0();
			return new Solution(obj);
		}

		return null;
	}
}

// second?="foo\\"
protected class Model_1_Assignment_second extends AssignmentToken  {
	
	public Model_1_Assignment_second(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getSecondAssignment_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("second",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("second");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.getModelAccess().getSecondFooKeyword_1_0();
			return new Solution(obj);
		}

		return null;
	}
}

// third?="\\bar"
protected class Model_2_Assignment_third extends AssignmentToken  {
	
	public Model_2_Assignment_third(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getThirdAssignment_2();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("third",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("third");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.getModelAccess().getThirdBarKeyword_2_0();
			return new Solution(obj);
		}

		return null;
	}
}

// forth?="\\"
protected class Model_3_Assignment_forth extends AssignmentToken  {
	
	public Model_3_Assignment_forth(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getForthAssignment_3();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("forth",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("forth");

		if(Boolean.TRUE.equals(value)) { // xtext::Keyword
			type = AssignmentType.KW;
			element = grammarAccess.getModelAccess().getForthReverseSolidusKeyword_3_0();
			return new Solution(obj);
		}

		return null;
	}
}


/************ end Rule Model ****************/

}
