/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.keywords.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.parser.keywords.services.KeywordsUiTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class KeywordsUiTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private KeywordsUiTestLanguageGrammarAccess grammarAccess;
	
	@Override	
	public KeywordsUiTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 *   first?="foo\\bar"|second?="foo\\"|third?="\\bar"|forth?="\\"|fifth?="\"a\""|
 *   sixth?="\'b\'"|seventh?="\'c\'"|eighth?="\"d\"";
 *
 **/

// first?="foo\\bar"|second?="foo\\"|third?="\\bar"|forth?="\\"|fifth?="\"a\""|
// sixth?="\'b\'"|seventh?="\'c\'"|eighth?="\"d\""
protected class Model_Alternatives extends AlternativesToken {

	public Model_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getModelAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_FirstAssignment_0(parent, this, 0, inst);
			case 1: return new Model_SecondAssignment_1(parent, this, 1, inst);
			case 2: return new Model_ThirdAssignment_2(parent, this, 2, inst);
			case 3: return new Model_ForthAssignment_3(parent, this, 3, inst);
			case 4: return new Model_FifthAssignment_4(parent, this, 4, inst);
			case 5: return new Model_SixthAssignment_5(parent, this, 5, inst);
			case 6: return new Model_SeventhAssignment_6(parent, this, 6, inst);
			case 7: return new Model_EighthAssignment_7(parent, this, 7, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// first?="foo\\bar"
protected class Model_FirstAssignment_0 extends AssignmentToken  {
	
	public Model_FirstAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getFirstAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("first",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("first");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getModelAccess().getFirstFooBarKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// second?="foo\\"
protected class Model_SecondAssignment_1 extends AssignmentToken  {
	
	public Model_SecondAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getSecondAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("second",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("second");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getModelAccess().getSecondFooKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// third?="\\bar"
protected class Model_ThirdAssignment_2 extends AssignmentToken  {
	
	public Model_ThirdAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getThirdAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("third",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("third");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getModelAccess().getThirdBarKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// forth?="\\"
protected class Model_ForthAssignment_3 extends AssignmentToken  {
	
	public Model_ForthAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getForthAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("forth",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("forth");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getModelAccess().getForthReverseSolidusKeyword_3_0();
			return obj;
		}
		return null;
	}

}

// fifth?="\"a\""
protected class Model_FifthAssignment_4 extends AssignmentToken  {
	
	public Model_FifthAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getFifthAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("fifth",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("fifth");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getModelAccess().getFifthAKeyword_4_0();
			return obj;
		}
		return null;
	}

}

// sixth?="\'b\'"
protected class Model_SixthAssignment_5 extends AssignmentToken  {
	
	public Model_SixthAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getSixthAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sixth",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sixth");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getModelAccess().getSixthBKeyword_5_0();
			return obj;
		}
		return null;
	}

}

// seventh?="\'c\'"
protected class Model_SeventhAssignment_6 extends AssignmentToken  {
	
	public Model_SeventhAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getSeventhAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("seventh",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("seventh");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getModelAccess().getSeventhCKeyword_6_0();
			return obj;
		}
		return null;
	}

}

// eighth?="\"d\""
protected class Model_EighthAssignment_7 extends AssignmentToken  {
	
	public Model_EighthAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getEighthAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("eighth",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("eighth");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getModelAccess().getEighthDKeyword_7_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Model ****************/

}
