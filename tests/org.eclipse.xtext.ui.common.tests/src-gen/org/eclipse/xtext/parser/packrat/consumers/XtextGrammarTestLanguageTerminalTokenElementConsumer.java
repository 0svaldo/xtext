/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;

import org.eclipse.xtext.services.XtextGrammarTestLanguageGrammarAccess.TerminalTokenElementElements;

public final class XtextGrammarTestLanguageTerminalTokenElementConsumer extends NonTerminalConsumer {

	private TerminalTokenElementElements rule;	

	private INonTerminalConsumer abstractNegatedTokenConsumer;

	private INonTerminalConsumer characterRangeConsumer;

	private INonTerminalConsumer parenthesizedTerminalElementConsumer;

	private INonTerminalConsumer ruleCallConsumer;

	private INonTerminalConsumer wildcardConsumer;

	private IElementConsumer alternatives$1$Consumer;

	private IElementConsumer ruleCall$5$Consumer;

	private IElementConsumer ruleCall$6$Consumer;

	private IElementConsumer ruleCall$7$Consumer;

	private IElementConsumer ruleCall$8$Consumer;

	private IElementConsumer ruleCall$9$Consumer;

	protected class Alternatives$1$Consumer extends AlternativesConsumer {
		
		protected Alternatives$1$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(ruleCall$5$Consumer);
			acceptor.accept(ruleCall$6$Consumer);
			acceptor.accept(ruleCall$7$Consumer);
			acceptor.accept(ruleCall$8$Consumer);
			acceptor.accept(ruleCall$9$Consumer);
		}
	}

	protected class RuleCall$5$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$5$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(characterRangeConsumer, null, false, false, false, getElement());
		}
	}

	protected class RuleCall$6$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$6$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(ruleCallConsumer, null, false, false, false, getElement());
		}
	}

	protected class RuleCall$7$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$7$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(parenthesizedTerminalElementConsumer, null, false, false, false, getElement());
		}
	}

	protected class RuleCall$8$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$8$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(abstractNegatedTokenConsumer, null, false, false, false, getElement());
		}
	}

	protected class RuleCall$9$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$9$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(wildcardConsumer, null, false, false, false, getElement());
		}
	}

	public XtextGrammarTestLanguageTerminalTokenElementConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
	}
	
	@Override
	protected int doConsume() throws Exception {
		return alternatives$1$Consumer.consume();
	}

	public TerminalTokenElementElements getRule() {
		return rule;
	}
	
	public void setRule(TerminalTokenElementElements rule) {
		this.rule = rule;
		
		alternatives$1$Consumer = new Alternatives$1$Consumer(rule.eleAlternatives());
		ruleCall$5$Consumer = new RuleCall$5$Consumer(rule.ele0000ParserRuleCallCharacterRange());
		ruleCall$6$Consumer = new RuleCall$6$Consumer(rule.ele0001ParserRuleCallRuleCall());
		ruleCall$7$Consumer = new RuleCall$7$Consumer(rule.ele001ParserRuleCallParenthesizedTerminalElement());
		ruleCall$8$Consumer = new RuleCall$8$Consumer(rule.ele01ParserRuleCallAbstractNegatedToken());
		ruleCall$9$Consumer = new RuleCall$9$Consumer(rule.ele1ParserRuleCallWildcard());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setAbstractNegatedTokenConsumer(INonTerminalConsumer abstractNegatedTokenConsumer) {
		this.abstractNegatedTokenConsumer = abstractNegatedTokenConsumer;
	}
	
	public void setCharacterRangeConsumer(INonTerminalConsumer characterRangeConsumer) {
		this.characterRangeConsumer = characterRangeConsumer;
	}
	
	public void setParenthesizedTerminalElementConsumer(INonTerminalConsumer parenthesizedTerminalElementConsumer) {
		this.parenthesizedTerminalElementConsumer = parenthesizedTerminalElementConsumer;
	}
	
	public void setRuleCallConsumer(INonTerminalConsumer ruleCallConsumer) {
		this.ruleCallConsumer = ruleCallConsumer;
	}
	
	public void setWildcardConsumer(INonTerminalConsumer wildcardConsumer) {
		this.wildcardConsumer = wildcardConsumer;
	}
	
}
