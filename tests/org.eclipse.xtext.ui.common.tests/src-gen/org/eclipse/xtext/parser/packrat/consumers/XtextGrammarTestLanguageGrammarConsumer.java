/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;

import org.eclipse.xtext.AbstractRule;

import org.eclipse.xtext.parser.packrat.IMarkerFactory.IMarker;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ConsumeResult;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.services.XtextGrammarTestLanguageGrammarAccess.GrammarElements;

import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageAbstractMetamodelDeclarationConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageAbstractRuleConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarTestLanguageGrammarIDConsumer;
import org.eclipse.xtext.builtin.parser.packrat.consumers.XtextBuiltinIDConsumer;

@SuppressWarnings("unused")
public final class XtextGrammarTestLanguageGrammarConsumer extends NonTerminalConsumer {

	private GrammarElements rule;
	
	private INonTerminalConsumer abstractMetamodelDeclarationConsumer;
	private INonTerminalConsumer abstractRuleConsumer;
	private INonTerminalConsumer grammarIdConsumer;
	private ITerminalConsumer idConsumer;

	private ISequenceMatcher crossReference$25$Delimiter;
	
	private ISequenceMatcher crossReference$30$Delimiter;
	
	private ICharacterClass keyword$8$Delimiter;
	
	private ICharacterClass keyword$9$Delimiter;
	
	private ICharacterClass keyword$13$Delimiter;
	
	private ICharacterClass keyword$21$Delimiter;
	
	private ICharacterClass keyword$22$Delimiter;
	
	private ICharacterClass keyword$28$Delimiter;
	
	private ICharacterClass keyword$32$Delimiter;
	
	public XtextGrammarTestLanguageGrammarConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		crossReference$25$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		crossReference$30$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		keyword$8$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$9$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$13$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$21$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$22$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$28$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$32$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume(int entryPoint) throws Exception {
		return consumeGroup$1(entryPoint);
	}

	protected int consumeGroup$1(int entryPoint) throws Exception {
		int result = doConsumeGroup$1(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeGroup$1(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeGroup$1(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().eleGroup());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeAlternatives$6(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00000Alternatives());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$10(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00001AssignmentName());
					return result.getResult();
				}
			case 2:
				result.nextStep();
				if (result.didGroupFail(consumeGroup$12(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0001Group());
					return result.getResult();
				}
			case 3:
				result.nextStep();
				if (result.didGroupFail(consumeGroup$17(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele001Group());
					return result.getResult();
				}
			case 4:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$33(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele01AssignmentMetamodelDeclarations());
					return result.getResult();
				}
			case 5:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$35(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele1AssignmentRules());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeAlternatives$6(int entryPoint) throws Exception {
		int result = doConsumeAlternatives$6(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAlternatives$6(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAlternatives$6(int entryPoint) throws Exception {
		final AlternativesResult result = createAlternativesResult(getRule().ele00000Alternatives());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextAlternative();
				if (result.isAlternativeDone(consumeAssignment$7(nextEntryPoint()))) { 
					return result.getResult(); 
				}
			case 1:
				result.nextAlternative();
				if (result.isAlternativeDone(consumeKeyword$9(nextEntryPoint()))) { 
					return result.getResult(); 
				}
		}
		return result.getResult();
	}

	protected int consumeAssignment$7(int entryPoint) throws Exception {
		int result = doConsumeAssignment$7(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$7(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$7(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele000000AssignmentAbstract());
		return result.getResult(consumeKeyword$8(entryPoint));
	}

	protected int consumeKeyword$8(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele0000000KeywordAbstractLanguage(), "abstract", false, true, getKeyword$8$Delimiter());
	}

	protected int consumeKeyword$9(int entryPoint) throws Exception {
		int result = doConsumeKeyword$9(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$9(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$9(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele000001KeywordLanguage(), null, false, false, getKeyword$9$Delimiter());
	}

	protected int consumeAssignment$10(int entryPoint) throws Exception {
		int result = doConsumeAssignment$10(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$10(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$10(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele00001AssignmentName());
		return result.getResult(consumeRuleCall$11(entryPoint));
	}

	protected int consumeRuleCall$11(int entryPoint) throws Exception {
		return consumeNonTerminal(grammarIdConsumer, "name", false, true, false, getRule().ele000010ParserRuleCallGrammarID());
	}

	protected int consumeGroup$12(int entryPoint) throws Exception {
		IMarker marker = mark();
		int result = doConsumeGroup$12(entryPoint);
		if (result != ConsumeResult.SUCCESS) {
			marker.rollback();
			skipped(getRule().ele0001Group());
		} else
			marker.commit();
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeGroup$12(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().ele0001Group());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$13(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00010KeywordExtends());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$14(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00011AssignmentSuperGrammar());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeKeyword$13(int entryPoint) throws Exception {
		int result = doConsumeKeyword$13(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$13(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$13(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele00010KeywordExtends(), null, false, false, getKeyword$13$Delimiter());
	}

	protected int consumeAssignment$14(int entryPoint) throws Exception {
		int result = doConsumeAssignment$14(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$14(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$14(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele00011AssignmentSuperGrammar());
		return result.getResult(consumeCrossReference$15(entryPoint));
	}

	protected int consumeCrossReference$15(int entryPoint) throws Exception {
		return consumeNonTerminal(grammarIdConsumer, "superGrammar", false, true, false, getRule().ele000110CrossReferenceEStringGrammar());
	}

	protected int consumeGroup$17(int entryPoint) throws Exception {
		IMarker marker = mark();
		int result = doConsumeGroup$17(entryPoint);
		if (result != ConsumeResult.SUCCESS) {
			marker.rollback();
			skipped(getRule().ele001Group());
		} else
			marker.commit();
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeGroup$17(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().ele001Group());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$20(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele001000AssignmentDefinesHiddenTokens());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$22(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele001001KeywordLeftParenthesis());
					return result.getResult();
				}
			case 2:
				result.nextStep();
				if (result.didGroupFail(consumeGroup$23(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele00101Group());
					return result.getResult();
				}
			case 3:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$32(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0011KeywordRightParenthesis());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeAssignment$20(int entryPoint) throws Exception {
		int result = doConsumeAssignment$20(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$20(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$20(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele001000AssignmentDefinesHiddenTokens());
		return result.getResult(consumeKeyword$21(entryPoint));
	}

	protected int consumeKeyword$21(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele0010000KeywordHidden(), "definesHiddenTokens", false, true, getKeyword$21$Delimiter());
	}

	protected int consumeKeyword$22(int entryPoint) throws Exception {
		int result = doConsumeKeyword$22(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$22(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$22(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele001001KeywordLeftParenthesis(), null, false, false, getKeyword$22$Delimiter());
	}

	protected int consumeGroup$23(int entryPoint) throws Exception {
		IMarker marker = mark();
		int result = doConsumeGroup$23(entryPoint);
		if (result != ConsumeResult.SUCCESS) {
			marker.rollback();
			skipped(getRule().ele00101Group());
		} else
			marker.commit();
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeGroup$23(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().ele00101Group());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$24(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele001010AssignmentHiddenTokens());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeGroup$27(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele001011Group());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeAssignment$24(int entryPoint) throws Exception {
		int result = doConsumeAssignment$24(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$24(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$24(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele001010AssignmentHiddenTokens());
		return result.getResult(consumeCrossReference$25(entryPoint));
	}

	protected int consumeCrossReference$25(int entryPoint) throws Exception {
		return consumeTerminal(idConsumer, "hiddenTokens", true, false, getRule().ele0010100CrossReferenceEStringAbstractRule(), getCrossReference$25$Delimiter());
	}

	protected int consumeGroup$27(int entryPoint) throws Exception {
		IMarker marker = mark();
		while(doConsumeGroup$27(entryPoint) == ConsumeResult.SUCCESS) {
			marker.flush();
		}
		marker.rollback();
		skipped(getRule().ele001011Group());
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeGroup$27(int entryPoint) throws Exception {
		final GroupResult result = createGroupResult(getRule().ele001011Group());
		switch(entryPoint) {
			case -1: // use fall through semantics of switch case
				result.reset();
			case 0:
				result.nextStep();
				if (result.didGroupFail(consumeKeyword$28(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0010110KeywordComma());
					return result.getResult();
				}
			case 1:
				result.nextStep();
				if (result.didGroupFail(consumeAssignment$29(nextEntryPoint()))) {
					// TODO improve error message
					error("Another token expected.", getRule().ele0010111AssignmentHiddenTokens());
					return result.getResult();
				}
		}
		return result.getResult();
	}

	protected int consumeKeyword$28(int entryPoint) throws Exception {
		int result = doConsumeKeyword$28(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$28(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$28(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele0010110KeywordComma(), null, false, false, getKeyword$28$Delimiter());
	}

	protected int consumeAssignment$29(int entryPoint) throws Exception {
		int result = doConsumeAssignment$29(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeAssignment$29(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeAssignment$29(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele0010111AssignmentHiddenTokens());
		return result.getResult(consumeCrossReference$30(entryPoint));
	}

	protected int consumeCrossReference$30(int entryPoint) throws Exception {
		return consumeTerminal(idConsumer, "hiddenTokens", true, false, getRule().ele00101110CrossReferenceEStringAbstractRule(), getCrossReference$30$Delimiter());
	}

	protected int consumeKeyword$32(int entryPoint) throws Exception {
		int result = doConsumeKeyword$32(nextEntryPoint());
		while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
			result = doConsumeKeyword$32(nextEntryPoint());
		}
		return result;
	}

	protected int doConsumeKeyword$32(int entryPoint) throws Exception {
		return consumeKeyword(getRule().ele0011KeywordRightParenthesis(), null, false, false, getKeyword$32$Delimiter());
	}

	protected int consumeAssignment$33(int entryPoint) throws Exception {
		IMarker marker = mark();
		while(doConsumeAssignment$33(entryPoint) == ConsumeResult.SUCCESS) {
			marker.flush();
		}
		marker.rollback();
		skipped(getRule().ele01AssignmentMetamodelDeclarations());
		return ConsumeResult.SUCCESS;
	}

	protected int doConsumeAssignment$33(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele01AssignmentMetamodelDeclarations());
		return result.getResult(consumeRuleCall$34(entryPoint));
	}

	protected int consumeRuleCall$34(int entryPoint) throws Exception {
		return consumeNonTerminal(abstractMetamodelDeclarationConsumer, "metamodelDeclarations", true, false, false, getRule().ele010ParserRuleCallAbstractMetamodelDeclaration());
	}

	protected int consumeAssignment$35(int entryPoint) throws Exception {
		IMarker marker = mark();
		int result = ConsumeResult.SUCCESS;
		announceNextLevel();
		switch(entryPoint) {
			case -1:
				result = ConsumeResult.EMPTY_MATCH;
			case 0:
				announceNextStep();
				result = doConsumeAssignment$35(nextEntryPoint());
				while(result != ConsumeResult.SUCCESS && skipPreviousToken()) {
					result = doConsumeAssignment$35(nextEntryPoint());
				}
			case 1:
				if (result == ConsumeResult.SUCCESS) {
					marker.flush();
					announceNextStep();
					while(doConsumeAssignment$35(nextEntryPoint())==ConsumeResult.SUCCESS) {
						marker.flush();
					}
					marker.rollback();
					skipped(getRule().ele1AssignmentRules());
					announceLevelFinished();
					return ConsumeResult.SUCCESS;
				}
				error("Could not find token.", getRule().ele1AssignmentRules());
		}
		announceLevelFinished();
		marker.commit();
		return result;
	}

	protected int doConsumeAssignment$35(int entryPoint) throws Exception {
		final AssignmentResult result = createAssignmentResult(getRule().ele1AssignmentRules());
		return result.getResult(consumeRuleCall$36(entryPoint));
	}

	protected int consumeRuleCall$36(int entryPoint) throws Exception {
		return consumeNonTerminal(abstractRuleConsumer, "rules", true, false, false, getRule().ele10ParserRuleCallAbstractRule());
	}

	public GrammarElements getRule() {
		return rule;
	}
	
	public void setRule(GrammarElements rule) {
		this.rule = rule;
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setAbstractMetamodelDeclarationConsumer(INonTerminalConsumer abstractMetamodelDeclarationConsumer) {
		this.abstractMetamodelDeclarationConsumer = abstractMetamodelDeclarationConsumer;
	}
	
	public void setAbstractRuleConsumer(INonTerminalConsumer abstractRuleConsumer) {
		this.abstractRuleConsumer = abstractRuleConsumer;
	}
	
	public void setGrammarIdConsumer(INonTerminalConsumer grammarIdConsumer) {
		this.grammarIdConsumer = grammarIdConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public ISequenceMatcher getCrossReference$25$Delimiter() {
		return crossReference$25$Delimiter;
	}
	
	public void setCrossReference$25$Delimiter(ISequenceMatcher matcher) {
		crossReference$25$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getCrossReference$30$Delimiter() {
		return crossReference$30$Delimiter;
	}
	
	public void setCrossReference$30$Delimiter(ISequenceMatcher matcher) {
		crossReference$30$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ICharacterClass getKeyword$8$Delimiter() {
		return keyword$8$Delimiter;
	}
	
	public void setKeyword$8$Delimiter(ICharacterClass characterClass) {
		keyword$8$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$9$Delimiter() {
		return keyword$9$Delimiter;
	}
	
	public void setKeyword$9$Delimiter(ICharacterClass characterClass) {
		keyword$9$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$13$Delimiter() {
		return keyword$13$Delimiter;
	}
	
	public void setKeyword$13$Delimiter(ICharacterClass characterClass) {
		keyword$13$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$21$Delimiter() {
		return keyword$21$Delimiter;
	}
	
	public void setKeyword$21$Delimiter(ICharacterClass characterClass) {
		keyword$21$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$22$Delimiter() {
		return keyword$22$Delimiter;
	}
	
	public void setKeyword$22$Delimiter(ICharacterClass characterClass) {
		keyword$22$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$28$Delimiter() {
		return keyword$28$Delimiter;
	}
	
	public void setKeyword$28$Delimiter(ICharacterClass characterClass) {
		keyword$28$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$32$Delimiter() {
		return keyword$32$Delimiter;
	}
	
	public void setKeyword$32$Delimiter(ICharacterClass characterClass) {
		keyword$32$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
