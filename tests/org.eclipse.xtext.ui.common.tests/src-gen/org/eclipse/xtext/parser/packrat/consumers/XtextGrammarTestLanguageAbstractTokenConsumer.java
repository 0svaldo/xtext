/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;

import org.eclipse.xtext.services.XtextGrammarTestLanguageGrammarAccess.AbstractTokenElements;

public final class XtextGrammarTestLanguageAbstractTokenConsumer extends NonTerminalConsumer {

	private AbstractTokenElements rule;	

	private INonTerminalConsumer abstractTerminalConsumer;

	private INonTerminalConsumer actionConsumer;

	private INonTerminalConsumer assignmentConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer alternatives$2$Consumer;

	private IElementConsumer ruleCall$4$Consumer;

	private IElementConsumer ruleCall$5$Consumer;

	private IElementConsumer ruleCall$6$Consumer;

	private IElementConsumer assignment$7$Consumer;

	private IElementConsumer alternatives$8$Consumer;

	private IElementConsumer keyword$10$Consumer;

	private IElementConsumer keyword$11$Consumer;

	private IElementConsumer keyword$12$Consumer;

	private ICharacterClass keyword$10$Delimiter;

	private ICharacterClass keyword$11$Delimiter;

	private ICharacterClass keyword$12$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(alternatives$2$Consumer);
			acceptor.accept(assignment$7$Consumer);
		}
	}

	protected class Alternatives$2$Consumer extends AlternativesConsumer {
		
		protected Alternatives$2$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(ruleCall$4$Consumer);
			acceptor.accept(ruleCall$5$Consumer);
			acceptor.accept(ruleCall$6$Consumer);
		}
	}

	protected class RuleCall$4$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$4$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(assignmentConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$5$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$5$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(actionConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$6$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$6$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(abstractTerminalConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$7$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$7$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return alternatives$8$Consumer;
		}
	}

	protected class Alternatives$8$Consumer extends AlternativesConsumer {
		
		protected Alternatives$8$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$10$Consumer);
			acceptor.accept(keyword$11$Consumer);
			acceptor.accept(keyword$12$Consumer);
		}
	}

	protected class Keyword$10$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$10$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "cardinality", false, false, getKeyword$10$Delimiter(), optional);
		}
	}

	protected class Keyword$11$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$11$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "cardinality", false, false, getKeyword$11$Delimiter(), optional);
		}
	}

	protected class Keyword$12$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$12$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "cardinality", false, false, getKeyword$12$Delimiter(), optional);
		}
	}

	public XtextGrammarTestLanguageAbstractTokenConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$10$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$11$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$12$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public AbstractTokenElements getRule() {
		return rule;
	}
	
	public void setRule(AbstractTokenElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		alternatives$2$Consumer = new Alternatives$2$Consumer(rule.ele0Alternatives());
		ruleCall$4$Consumer = new RuleCall$4$Consumer(rule.ele000ParserRuleCallAssignment());
		ruleCall$5$Consumer = new RuleCall$5$Consumer(rule.ele001ParserRuleCallAction());
		ruleCall$6$Consumer = new RuleCall$6$Consumer(rule.ele01ParserRuleCallAbstractTerminal());
		assignment$7$Consumer = new Assignment$7$Consumer(rule.ele1AssignmentCardinality());
		alternatives$8$Consumer = new Alternatives$8$Consumer(rule.ele10Alternatives());
		keyword$10$Consumer = new Keyword$10$Consumer(rule.ele1000KeywordQuestionMark());
		keyword$11$Consumer = new Keyword$11$Consumer(rule.ele1001KeywordAsterisk());
		keyword$12$Consumer = new Keyword$12$Consumer(rule.ele101KeywordPlusSign());
		keyword$10$Consumer = new Keyword$10$Consumer(rule.ele1000KeywordQuestionMark());
		keyword$11$Consumer = new Keyword$11$Consumer(rule.ele1001KeywordAsterisk());
		keyword$12$Consumer = new Keyword$12$Consumer(rule.ele101KeywordPlusSign());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setAbstractTerminalConsumer(INonTerminalConsumer abstractTerminalConsumer) {
		this.abstractTerminalConsumer = abstractTerminalConsumer;
	}
	
	public void setActionConsumer(INonTerminalConsumer actionConsumer) {
		this.actionConsumer = actionConsumer;
	}
	
	public void setAssignmentConsumer(INonTerminalConsumer assignmentConsumer) {
		this.assignmentConsumer = assignmentConsumer;
	}
	
	public ICharacterClass getKeyword$10$Delimiter() {
		return keyword$10$Delimiter;
	}
	
	public void setKeyword$10$Delimiter(ICharacterClass characterClass) {
		keyword$10$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$11$Delimiter() {
		return keyword$11$Delimiter;
	}
	
	public void setKeyword$11$Delimiter(ICharacterClass characterClass) {
		keyword$11$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$12$Delimiter() {
		return keyword$12$Delimiter;
	}
	
	public void setKeyword$12$Delimiter(ICharacterClass characterClass) {
		keyword$12$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
