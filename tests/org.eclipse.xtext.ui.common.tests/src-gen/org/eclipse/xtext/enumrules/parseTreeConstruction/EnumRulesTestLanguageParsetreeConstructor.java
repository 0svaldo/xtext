/*
* generated by Xtext
*/
package org.eclipse.xtext.enumrules.parseTreeConstruction;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;
import org.eclipse.xtext.enumrules.services.EnumRulesTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class EnumRulesTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private EnumRulesTestLanguageGrammarAccess grammarAccess;
	
	@Override
	protected Solution internalSerialize(EObject obj) {
		IInstanceDescription inst = getDescr(obj);
		Solution s;
		if(inst.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier()) && (s = new Model_Alternatives(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		return null;
	}
	

/************ begin Rule Model ****************
 *
 * Model:
 *   "existing" existing=ExistingEnum ("generated" generated=GeneratedEnum)?|"generated" generated=GeneratedEnum;
 *
 **/

// "existing" existing=ExistingEnum ("generated" generated=GeneratedEnum)?|"generated" generated=GeneratedEnum
protected class Model_Alternatives extends AlternativesToken {

	public Model_Alternatives(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getModelAccess().getAlternatives();
	}

	protected AbstractToken createChild(int id) {
		switch(id) {
			case 0: return new Model_0_Group(current, this);
			case 1: return new Model_1_Group(current, this);
			default: return null;
		}
	}
}

// "existing" existing=ExistingEnum ("generated" generated=GeneratedEnum)?
protected class Model_0_Group extends GroupToken {
	
	public Model_0_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_0();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Model_0_2_Group(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Model_0_1_Assignment_existing(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new Model_0_0_Keyword_existing(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				if(s3 != null) {
					last = s3.getPredecessor();
					return s3;
				} else {
					s2 = s2.getPredecessor().nextSolution(this,s2);
				}
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// "existing"
protected class Model_0_0_Keyword_existing extends KeywordToken  {
	
	public Model_0_0_Keyword_existing(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getExistingKeyword_0_0();
	}	
}

// existing=ExistingEnum
protected class Model_0_1_Assignment_existing extends AssignmentToken  {
	
	public Model_0_1_Assignment_existing(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getExistingAssignment_0_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("existing",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("existing");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getModelAccess().getExistingExistingEnumEnumRuleCall_0_1_0();
			return new Solution(obj);
		}
		return null;
	}
}

// ("generated" generated=GeneratedEnum)?
protected class Model_0_2_Group extends GroupToken {
	
	public Model_0_2_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_0_2();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Model_0_2_1_Assignment_generated(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Model_0_2_0_Keyword_generated(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// "generated"
protected class Model_0_2_0_Keyword_generated extends KeywordToken  {
	
	public Model_0_2_0_Keyword_generated(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getGeneratedKeyword_0_2_0();
	}	
}

// generated=GeneratedEnum
protected class Model_0_2_1_Assignment_generated extends AssignmentToken  {
	
	public Model_0_2_1_Assignment_generated(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getGeneratedAssignment_0_2_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("generated",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("generated");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getModelAccess().getGeneratedGeneratedEnumEnumRuleCall_0_2_1_0();
			return new Solution(obj);
		}
		return null;
	}
}



// "generated" generated=GeneratedEnum
protected class Model_1_Group extends GroupToken {
	
	public Model_1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_1();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new Model_1_1_Assignment_generated(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new Model_1_0_Keyword_generated(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// "generated"
protected class Model_1_0_Keyword_generated extends KeywordToken  {
	
	public Model_1_0_Keyword_generated(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getGeneratedKeyword_1_0();
	}	
}

// generated=GeneratedEnum
protected class Model_1_1_Assignment_generated extends AssignmentToken  {
	
	public Model_1_1_Assignment_generated(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getGeneratedAssignment_1_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("generated",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("generated");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getModelAccess().getGeneratedGeneratedEnumEnumRuleCall_1_1_0();
			return new Solution(obj);
		}
		return null;
	}
}



/************ end Rule Model ****************/

}
