/*
* generated by Xtext
*/
grammar InternalAbstractTestLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipse.xtext.grammarinheritance.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.xtext.grammarinheritance.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.grammarinheritance.services.AbstractTestLanguageGrammarAccess;

}

@parser::members {
 
 	private AbstractTestLanguageGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(AbstractTestLanguageGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

}




// Entry rule entryRuleInheritedParserRule
entryRuleInheritedParserRule :
{ before(grammarAccess.getInheritedParserRuleRule()); }
	 ruleInheritedParserRule
{ after(grammarAccess.getInheritedParserRuleRule()); } 
	 EOF 
;

// Rule InheritedParserRule
ruleInheritedParserRule 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getInheritedParserRuleAccess().getGroup()); }
(rule__InheritedParserRule__Group__0)
{ after(grammarAccess.getInheritedParserRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleOverridableParserRule
entryRuleOverridableParserRule :
{ before(grammarAccess.getOverridableParserRuleRule()); }
	 ruleOverridableParserRule
{ after(grammarAccess.getOverridableParserRuleRule()); } 
	 EOF 
;

// Rule OverridableParserRule
ruleOverridableParserRule 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getOverridableParserRuleAccess().getGroup()); }
(rule__OverridableParserRule__Group__0)
{ after(grammarAccess.getOverridableParserRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleExtendableParserRule
entryRuleExtendableParserRule :
{ before(grammarAccess.getExtendableParserRuleRule()); }
	 ruleExtendableParserRule
{ after(grammarAccess.getExtendableParserRuleRule()); } 
	 EOF 
;

// Rule ExtendableParserRule
ruleExtendableParserRule 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getExtendableParserRuleAccess().getGroup()); }
(rule__ExtendableParserRule__Group__0)
{ after(grammarAccess.getExtendableParserRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InheritedParserRule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInheritedParserRuleAccess().getElementKeyword_0()); }

	'element' 

{ after(grammarAccess.getInheritedParserRuleAccess().getElementKeyword_0()); }
)

	rule__InheritedParserRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__InheritedParserRule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInheritedParserRuleAccess().getNameAssignment_1()); }
(rule__InheritedParserRule__NameAssignment_1)
{ after(grammarAccess.getInheritedParserRuleAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__OverridableParserRule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverridableParserRuleAccess().getElementKeyword_0()); }

	'element' 

{ after(grammarAccess.getOverridableParserRuleAccess().getElementKeyword_0()); }
)

	rule__OverridableParserRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__OverridableParserRule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverridableParserRuleAccess().getNameAssignment_1()); }
(rule__OverridableParserRule__NameAssignment_1)
{ after(grammarAccess.getOverridableParserRuleAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExtendableParserRule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendableParserRuleAccess().getElementKeyword_0()); }

	'element' 

{ after(grammarAccess.getExtendableParserRuleAccess().getElementKeyword_0()); }
)

	rule__ExtendableParserRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ExtendableParserRule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendableParserRuleAccess().getNameAssignment_1()); }
(rule__ExtendableParserRule__NameAssignment_1)
{ after(grammarAccess.getExtendableParserRuleAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InheritedParserRule__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInheritedParserRuleAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getInheritedParserRuleAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OverridableParserRule__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverridableParserRuleAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getOverridableParserRuleAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ExtendableParserRule__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendableParserRuleAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getExtendableParserRuleAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_REAL : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'\u00F6'|'\u00E4'|'\u00FC'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


