/*
* generated by Xtext
*/
package org.eclipse.xtext.grammarinheritance.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.CharStream;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.xtext.grammarinheritance.services.AbstractTestLanguageGrammarAccess;

public class AbstractTestLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private AbstractTestLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.xtext.grammarinheritance.contentassist.antlr.internal.InternalAbstractTestLanguageLexer createLexer(CharStream stream) {
		return new org.eclipse.xtext.grammarinheritance.contentassist.antlr.internal.InternalAbstractTestLanguageLexer(stream);
	}
	
	@Override
	protected org.eclipse.xtext.grammarinheritance.contentassist.antlr.internal.InternalAbstractTestLanguageParser createParser() {
		org.eclipse.xtext.grammarinheritance.contentassist.antlr.internal.InternalAbstractTestLanguageParser result = new org.eclipse.xtext.grammarinheritance.contentassist.antlr.internal.InternalAbstractTestLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				{
					put(grammarAccess.getInheritedParserRuleAccess().getGroup(), "rule__InheritedParserRule__Group__0");
					put(grammarAccess.getAbstractCallOverridenParserRuleAccess().getGroup(), "rule__AbstractCallOverridenParserRule__Group__0");
					put(grammarAccess.getOverridableParserRuleAccess().getGroup(), "rule__OverridableParserRule__Group__0");
					put(grammarAccess.getOverridableParserRule2Access().getGroup(), "rule__OverridableParserRule2__Group__0");
					put(grammarAccess.getAbstractCallExtendedParserRuleAccess().getGroup(), "rule__AbstractCallExtendedParserRule__Group__0");
					put(grammarAccess.getExtendableParserRuleAccess().getGroup(), "rule__ExtendableParserRule__Group__0");
					put(grammarAccess.getInheritedParserRuleAccess().getNameAssignment_1(), "rule__InheritedParserRule__NameAssignment_1");
					put(grammarAccess.getAbstractCallOverridenParserRuleAccess().getElementsAssignment_1(), "rule__AbstractCallOverridenParserRule__ElementsAssignment_1");
					put(grammarAccess.getOverridableParserRuleAccess().getNameAssignment_1(), "rule__OverridableParserRule__NameAssignment_1");
					put(grammarAccess.getOverridableParserRule2Access().getNameAssignment_1(), "rule__OverridableParserRule2__NameAssignment_1");
					put(grammarAccess.getAbstractCallExtendedParserRuleAccess().getElementsAssignment_1(), "rule__AbstractCallExtendedParserRule__ElementsAssignment_1");
					put(grammarAccess.getExtendableParserRuleAccess().getNameAssignment_1(), "rule__ExtendableParserRule__NameAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.xtext.grammarinheritance.contentassist.antlr.internal.InternalAbstractTestLanguageParser typedParser = (org.eclipse.xtext.grammarinheritance.contentassist.antlr.internal.InternalAbstractTestLanguageParser) parser;
			typedParser.entryRuleInheritedParserRule();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public AbstractTestLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(AbstractTestLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
