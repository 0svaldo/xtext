/*
* generated by Xtext
*/
package org.eclipse.xtext.grammarinheritance.parser.packrat.consumers;

import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.AbstractRuleAwareTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.ConsumeResult;


public final class AbstractTestLanguageIDConsumer extends AbstractRuleAwareTerminalConsumer {

	public AbstractTestLanguageIDConsumer(ITerminalConsumerConfiguration configuration) {
		super(configuration);
	}
	
	@Override
	protected int doConsume() {
		return consumeGroup$1() ? ConsumeResult.SUCCESS : ConsumeResult.EMPTY_MATCH;
	}

	protected boolean consumeGroup$1() {
		final int marker = mark();
		if (!consumeKeyword$2()) {
			rollbackTo(marker);
			return false;
		}
		if (!consumeAlternatives$3()) {
			rollbackTo(marker);
			return false;
		}
		if (!consumeAlternatives$14()) {
			rollbackTo(marker);
			return false;
		}
		return true;
	}

	protected boolean consumeKeyword$2() {
		doConsumeKeyword$2();
		return true;
	}

	protected boolean doConsumeKeyword$2() {
		return readChar('^');
	}

	protected boolean consumeAlternatives$3() {
		if (consumeCharacterRange$4())
			return true;
		if (consumeCharacterRange$7())
			return true;
		if (consumeKeyword$10())
			return true;
		if (consumeKeyword$11())
			return true;
		if (consumeKeyword$12())
			return true;
		if (consumeKeyword$13())
			return true;
		return false;
	}

	protected boolean consumeCharacterRange$4() {
		return readCharBetween('a', 'z');
	}

	protected boolean consumeCharacterRange$7() {
		return readCharBetween('A', 'Z');
	}

	protected boolean consumeKeyword$10() {
		return readChar('\u00F6');
	}

	protected boolean consumeKeyword$11() {
		return readChar('\u00E4');
	}

	protected boolean consumeKeyword$12() {
		return readChar('\u00FC');
	}

	protected boolean consumeKeyword$13() {
		return readChar('_');
	}

	protected boolean consumeAlternatives$14() {
		while(doConsumeAlternatives$14()) {}
		return true;
	}

	protected boolean doConsumeAlternatives$14() {
		if (consumeCharacterRange$15())
			return true;
		if (consumeCharacterRange$18())
			return true;
		if (consumeKeyword$21())
			return true;
		if (consumeCharacterRange$22())
			return true;
		return false;
	}

	protected boolean consumeCharacterRange$15() {
		return readCharBetween('a', 'z');
	}

	protected boolean consumeCharacterRange$18() {
		return readCharBetween('A', 'Z');
	}

	protected boolean consumeKeyword$21() {
		return readChar('_');
	}

	protected boolean consumeCharacterRange$22() {
		return readCharBetween('0', '9');
	}
	
}
