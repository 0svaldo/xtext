
/*
 * generated by Xtext
 */
package org.eclipse.xtext.grammarinheritance;

import org.eclipse.xtext.Constants;
import org.eclipse.xtext.service.DefaultRuntimeModule;

import com.google.inject.Binder;
import com.google.inject.name.Names;

/**
 * Manual modifications go to {org.eclipse.xtext.grammarinheritance.AbstractTestLanguageRuntimeModule}
 */
public abstract class AbstractAbstractTestLanguageRuntimeModule extends DefaultRuntimeModule {
	
	@Override
	public void configure(Binder binder) {
		super.configure(binder);
		binder.bind(String.class).annotatedWith(Names.named(Constants.LANGUAGE_NAME)).toInstance(
			"org.eclipse.xtext.grammarinheritance.AbstractTestLanguage");
	}

	public Class<? extends org.eclipse.xtext.IGrammarAccess> bindIGrammarAccess() {
		return org.eclipse.xtext.grammarinheritance.services.AbstractTestLanguageGrammarAccess.class;
	}

	public Class<? extends org.eclipse.xtext.parser.packrat.IPackratParser> bindIPackratParser() {
		return org.eclipse.xtext.grammarinheritance.parser.packrat.AbstractTestLanguagePackratParser.class;
	}

	public Class<? extends org.eclipse.xtext.parsetree.reconstr.IParseTreeConstructor> bindIParseTreeConstructor() {
		return org.eclipse.xtext.grammarinheritance.parseTreeConstruction.AbstractTestLanguageParsetreeConstructor.class;
	}

	public Class<? extends org.eclipse.xtext.crossref.IScopeProvider> bindIScopeProvider() {
		return org.eclipse.xtext.grammarinheritance.AbstractTestLanguageScopeProvider.class;
	}
}
