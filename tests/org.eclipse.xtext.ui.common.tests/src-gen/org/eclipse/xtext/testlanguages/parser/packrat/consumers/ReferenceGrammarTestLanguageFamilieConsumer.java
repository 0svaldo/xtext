/*
* generated by Xtext
*/
package org.eclipse.xtext.testlanguages.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.testlanguages.services.ReferenceGrammarTestLanguageGrammarAccess.FamilieElements;

public final class ReferenceGrammarTestLanguageFamilieConsumer extends NonTerminalConsumer {

	private FamilieElements rule;	

	private ITerminalConsumer idConsumer;

	private ITerminalConsumer stringConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer keyword$2$Consumer;

	private IElementConsumer keyword$3$Consumer;

	private IElementConsumer assignment$4$Consumer;

	private IElementConsumer alternatives$5$Consumer;

	private IElementConsumer keyword$6$Consumer;

	private IElementConsumer ruleCall$7$Consumer;

	private IElementConsumer ruleCall$8$Consumer;

	private IElementConsumer assignment$9$Consumer;

	private IElementConsumer crossReference$10$Consumer;

	private IElementConsumer assignment$12$Consumer;

	private IElementConsumer crossReference$13$Consumer;

	private IElementConsumer assignment$15$Consumer;

	private IElementConsumer crossReference$16$Consumer;

	private IElementConsumer group$18$Consumer;

	private IElementConsumer keyword$19$Consumer;

	private IElementConsumer assignment$20$Consumer;

	private IElementConsumer crossReference$21$Consumer;

	private IElementConsumer keyword$23$Consumer;

	private ISequenceMatcher crossReference$10$Delimiter;

	private ISequenceMatcher crossReference$13$Delimiter;

	private ISequenceMatcher crossReference$16$Delimiter;

	private ISequenceMatcher crossReference$21$Delimiter;

	private ICharacterClass keyword$2$Delimiter;

	private ICharacterClass keyword$3$Delimiter;

	private ICharacterClass keyword$6$Delimiter;

	private ICharacterClass keyword$19$Delimiter;

	private ICharacterClass keyword$23$Delimiter;

	private ISequenceMatcher ruleCall$7$Delimiter;

	private ISequenceMatcher ruleCall$8$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$2$Consumer);
			acceptor.accept(keyword$3$Consumer);
			acceptor.accept(assignment$4$Consumer);
			acceptor.accept(assignment$9$Consumer);
			acceptor.accept(assignment$12$Consumer);
			acceptor.accept(assignment$15$Consumer);
			acceptor.accept(group$18$Consumer);
			acceptor.accept(keyword$23$Consumer);
		}
	}

	protected class Keyword$2$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$2$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$2$Delimiter(), optional);
		}
	}

	protected class Keyword$3$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$3$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$3$Delimiter(), optional);
		}
	}

	protected class Assignment$4$Consumer extends AssignmentConsumer {
		
		protected Assignment$4$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return alternatives$5$Consumer;
		}
	}

	protected class Alternatives$5$Consumer extends AlternativesConsumer {
		
		protected Alternatives$5$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$6$Consumer);
			acceptor.accept(ruleCall$7$Consumer);
			acceptor.accept(ruleCall$8$Consumer);
		}
	}

	protected class Keyword$6$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$6$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "name", false, false, getKeyword$6$Delimiter(), optional);
		}
	}

	protected class RuleCall$7$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$7$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "name", false, false, getElement(), getRuleCall$7$Delimiter(), optional);
		}
	}

	protected class RuleCall$8$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$8$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "name", false, false, getElement(), getRuleCall$8$Delimiter(), optional);
		}
	}

	protected class Assignment$9$Consumer extends AssignmentConsumer {
		
		protected Assignment$9$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$10$Consumer;
		}
	}

	protected class CrossReference$10$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$10$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "mutter", false, false, getElement(), getCrossReference$10$Delimiter(), optional);
		}
	}

	protected class Assignment$12$Consumer extends AssignmentConsumer {
		
		protected Assignment$12$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$13$Consumer;
		}
	}

	protected class CrossReference$13$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$13$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "vater", false, false, getElement(), getCrossReference$13$Delimiter(), optional);
		}
	}

	protected class Assignment$15$Consumer extends AssignmentConsumer {
		
		protected Assignment$15$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$16$Consumer;
		}
	}

	protected class CrossReference$16$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$16$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "kinder", true, false, getElement(), getCrossReference$16$Delimiter(), optional);
		}
	}

	protected class Group$18$Consumer extends LoopGroupConsumer {
		
		protected Group$18$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$19$Consumer);
			acceptor.accept(assignment$20$Consumer);
		}
	}

	protected class Keyword$19$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$19$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$19$Delimiter(), optional);
		}
	}

	protected class Assignment$20$Consumer extends AssignmentConsumer {
		
		protected Assignment$20$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$21$Consumer;
		}
	}

	protected class CrossReference$21$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$21$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "kinder", true, false, getElement(), getCrossReference$21$Delimiter(), optional);
		}
	}

	protected class Keyword$23$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$23$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$23$Delimiter(), optional);
		}
	}

	public ReferenceGrammarTestLanguageFamilieConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		crossReference$10$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		crossReference$13$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		crossReference$16$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		crossReference$21$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		keyword$2$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$3$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$6$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$19$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$23$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$7$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$8$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public FamilieElements getRule() {
		return rule;
	}
	
	public void setRule(FamilieElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		keyword$2$Consumer = new Keyword$2$Consumer(rule.ele0KeywordFamilie());
		keyword$3$Consumer = new Keyword$3$Consumer(rule.ele1KeywordLeftParenthesis());
		assignment$4$Consumer = new Assignment$4$Consumer(rule.ele2AssignmentName());
		alternatives$5$Consumer = new Alternatives$5$Consumer(rule.ele20Alternatives());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.ele200KeywordKeyword());
		ruleCall$7$Consumer = new RuleCall$7$Consumer(rule.ele201TerminalRuleCallSTRING());
		ruleCall$8$Consumer = new RuleCall$8$Consumer(rule.ele202TerminalRuleCallID());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.ele200KeywordKeyword());
		ruleCall$7$Consumer = new RuleCall$7$Consumer(rule.ele201TerminalRuleCallSTRING());
		ruleCall$8$Consumer = new RuleCall$8$Consumer(rule.ele202TerminalRuleCallID());
		assignment$9$Consumer = new Assignment$9$Consumer(rule.ele3AssignmentMutter());
		crossReference$10$Consumer = new CrossReference$10$Consumer(rule.ele30CrossReferenceEStringErwachsener());
		assignment$12$Consumer = new Assignment$12$Consumer(rule.ele4AssignmentVater());
		crossReference$13$Consumer = new CrossReference$13$Consumer(rule.ele40CrossReferenceEStringErwachsener());
		assignment$15$Consumer = new Assignment$15$Consumer(rule.ele5AssignmentKinder());
		crossReference$16$Consumer = new CrossReference$16$Consumer(rule.ele50CrossReferenceEStringKind());
		group$18$Consumer = new Group$18$Consumer(rule.ele6Group());
		keyword$19$Consumer = new Keyword$19$Consumer(rule.ele60KeywordComma());
		assignment$20$Consumer = new Assignment$20$Consumer(rule.ele61AssignmentKinder());
		crossReference$21$Consumer = new CrossReference$21$Consumer(rule.ele610CrossReferenceEStringKind());
		keyword$23$Consumer = new Keyword$23$Consumer(rule.ele7KeywordRightParenthesis());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setStringConsumer(ITerminalConsumer stringConsumer) {
		this.stringConsumer = stringConsumer;
	}
	
	public ISequenceMatcher getCrossReference$10$Delimiter() {
		return crossReference$10$Delimiter;
	}
	
	public void setCrossReference$10$Delimiter(ISequenceMatcher matcher) {
		crossReference$10$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getCrossReference$13$Delimiter() {
		return crossReference$13$Delimiter;
	}
	
	public void setCrossReference$13$Delimiter(ISequenceMatcher matcher) {
		crossReference$13$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getCrossReference$16$Delimiter() {
		return crossReference$16$Delimiter;
	}
	
	public void setCrossReference$16$Delimiter(ISequenceMatcher matcher) {
		crossReference$16$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getCrossReference$21$Delimiter() {
		return crossReference$21$Delimiter;
	}
	
	public void setCrossReference$21$Delimiter(ISequenceMatcher matcher) {
		crossReference$21$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ICharacterClass getKeyword$2$Delimiter() {
		return keyword$2$Delimiter;
	}
	
	public void setKeyword$2$Delimiter(ICharacterClass characterClass) {
		keyword$2$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$3$Delimiter() {
		return keyword$3$Delimiter;
	}
	
	public void setKeyword$3$Delimiter(ICharacterClass characterClass) {
		keyword$3$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$6$Delimiter() {
		return keyword$6$Delimiter;
	}
	
	public void setKeyword$6$Delimiter(ICharacterClass characterClass) {
		keyword$6$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$19$Delimiter() {
		return keyword$19$Delimiter;
	}
	
	public void setKeyword$19$Delimiter(ICharacterClass characterClass) {
		keyword$19$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$23$Delimiter() {
		return keyword$23$Delimiter;
	}
	
	public void setKeyword$23$Delimiter(ICharacterClass characterClass) {
		keyword$23$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$7$Delimiter() {
		return ruleCall$7$Delimiter;
	}
	
	public void setRuleCall$7$Delimiter(ISequenceMatcher matcher) {
		ruleCall$7$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$8$Delimiter() {
		return ruleCall$8$Delimiter;
	}
	
	public void setRuleCall$8$Delimiter(ISequenceMatcher matcher) {
		ruleCall$8$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
