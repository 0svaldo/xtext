/*
* generated by Xtext
*/
package org.eclipse.xtext.testlanguages.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.testlanguages.services.ReferenceGrammarTestLanguageGrammarAccess.SpielplatzElements;

public final class ReferenceGrammarTestLanguageSpielplatzConsumer extends NonTerminalConsumer {

	private SpielplatzElements rule;	

	private INonTerminalConsumer erwachsenerConsumer;

	private INonTerminalConsumer familieConsumer;

	private ITerminalConsumer intConsumer;

	private INonTerminalConsumer kindConsumer;

	private INonTerminalConsumer spielzeugConsumer;

	private ITerminalConsumer stringConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer keyword$6$Consumer;

	private IElementConsumer assignment$7$Consumer;

	private IElementConsumer ruleCall$8$Consumer;

	private IElementConsumer assignment$9$Consumer;

	private IElementConsumer ruleCall$10$Consumer;

	private IElementConsumer keyword$11$Consumer;

	private IElementConsumer alternatives$12$Consumer;

	private IElementConsumer assignment$15$Consumer;

	private IElementConsumer ruleCall$16$Consumer;

	private IElementConsumer assignment$17$Consumer;

	private IElementConsumer ruleCall$18$Consumer;

	private IElementConsumer assignment$19$Consumer;

	private IElementConsumer ruleCall$20$Consumer;

	private IElementConsumer assignment$21$Consumer;

	private IElementConsumer ruleCall$22$Consumer;

	private IElementConsumer keyword$23$Consumer;

	private ICharacterClass keyword$11$Delimiter;

	private ICharacterClass keyword$23$Delimiter;

	private ICharacterClass keyword$6$Delimiter;

	private ISequenceMatcher ruleCall$8$Delimiter;

	private ISequenceMatcher ruleCall$10$Delimiter;

	protected class Group$1$Consumer extends OptionalGroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$6$Consumer);
			acceptor.accept(assignment$7$Consumer);
			acceptor.accept(assignment$9$Consumer);
			acceptor.accept(keyword$11$Consumer);
			acceptor.accept(alternatives$12$Consumer);
			acceptor.accept(keyword$23$Consumer);
		}
	}

	protected class Keyword$6$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$6$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$6$Delimiter(), optional);
		}
	}

	protected class Assignment$7$Consumer extends AssignmentConsumer {
		
		protected Assignment$7$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$8$Consumer;
		}
	}

	protected class RuleCall$8$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$8$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(intConsumer, "groesse", false, false, getElement(), getRuleCall$8$Delimiter(), optional);
		}
	}

	protected class Assignment$9$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$9$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$10$Consumer;
		}
	}

	protected class RuleCall$10$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$10$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "beschreibung", false, false, getElement(), getRuleCall$10$Delimiter(), optional);
		}
	}

	protected class Keyword$11$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$11$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$11$Delimiter(), optional);
		}
	}

	protected class Alternatives$12$Consumer extends LoopAlternativesConsumer {
		
		protected Alternatives$12$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$15$Consumer);
			acceptor.accept(assignment$17$Consumer);
			acceptor.accept(assignment$19$Consumer);
			acceptor.accept(assignment$21$Consumer);
		}
	}

	protected class Assignment$15$Consumer extends AssignmentConsumer {
		
		protected Assignment$15$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$16$Consumer;
		}
	}

	protected class RuleCall$16$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$16$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(kindConsumer, "kinder", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$17$Consumer extends AssignmentConsumer {
		
		protected Assignment$17$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$18$Consumer;
		}
	}

	protected class RuleCall$18$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$18$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(erwachsenerConsumer, "erzieher", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$19$Consumer extends AssignmentConsumer {
		
		protected Assignment$19$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$20$Consumer;
		}
	}

	protected class RuleCall$20$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$20$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(spielzeugConsumer, "spielzeuge", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$21$Consumer extends AssignmentConsumer {
		
		protected Assignment$21$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$22$Consumer;
		}
	}

	protected class RuleCall$22$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$22$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(familieConsumer, "familie", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$23$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$23$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$23$Delimiter(), optional);
		}
	}

	public ReferenceGrammarTestLanguageSpielplatzConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$11$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$23$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$6$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$8$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$10$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public SpielplatzElements getRule() {
		return rule;
	}
	
	public void setRule(SpielplatzElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.ele00000KeywordSpielplatz());
		assignment$7$Consumer = new Assignment$7$Consumer(rule.ele00001AssignmentGroesse());
		ruleCall$8$Consumer = new RuleCall$8$Consumer(rule.ele000010TerminalRuleCallINT());
		assignment$9$Consumer = new Assignment$9$Consumer(rule.ele0001AssignmentBeschreibung());
		ruleCall$10$Consumer = new RuleCall$10$Consumer(rule.ele00010TerminalRuleCallSTRING());
		keyword$11$Consumer = new Keyword$11$Consumer(rule.ele001KeywordLeftCurlyBracket());
		alternatives$12$Consumer = new Alternatives$12$Consumer(rule.ele01Alternatives());
		assignment$15$Consumer = new Assignment$15$Consumer(rule.ele01000AssignmentKinder());
		ruleCall$16$Consumer = new RuleCall$16$Consumer(rule.ele010000ParserRuleCallKind());
		assignment$17$Consumer = new Assignment$17$Consumer(rule.ele01001AssignmentErzieher());
		ruleCall$18$Consumer = new RuleCall$18$Consumer(rule.ele010010ParserRuleCallErwachsener());
		assignment$19$Consumer = new Assignment$19$Consumer(rule.ele0101AssignmentSpielzeuge());
		ruleCall$20$Consumer = new RuleCall$20$Consumer(rule.ele01010ParserRuleCallSpielzeug());
		assignment$21$Consumer = new Assignment$21$Consumer(rule.ele011AssignmentFamilie());
		ruleCall$22$Consumer = new RuleCall$22$Consumer(rule.ele0110ParserRuleCallFamilie());
		keyword$23$Consumer = new Keyword$23$Consumer(rule.ele1KeywordRightCurlyBracket());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setErwachsenerConsumer(INonTerminalConsumer erwachsenerConsumer) {
		this.erwachsenerConsumer = erwachsenerConsumer;
	}
	
	public void setFamilieConsumer(INonTerminalConsumer familieConsumer) {
		this.familieConsumer = familieConsumer;
	}
	
	public void setIntConsumer(ITerminalConsumer intConsumer) {
		this.intConsumer = intConsumer;
	}
	
	public void setKindConsumer(INonTerminalConsumer kindConsumer) {
		this.kindConsumer = kindConsumer;
	}
	
	public void setSpielzeugConsumer(INonTerminalConsumer spielzeugConsumer) {
		this.spielzeugConsumer = spielzeugConsumer;
	}
	
	public void setStringConsumer(ITerminalConsumer stringConsumer) {
		this.stringConsumer = stringConsumer;
	}
	
	public ICharacterClass getKeyword$11$Delimiter() {
		return keyword$11$Delimiter;
	}
	
	public void setKeyword$11$Delimiter(ICharacterClass characterClass) {
		keyword$11$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$23$Delimiter() {
		return keyword$23$Delimiter;
	}
	
	public void setKeyword$23$Delimiter(ICharacterClass characterClass) {
		keyword$23$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$6$Delimiter() {
		return keyword$6$Delimiter;
	}
	
	public void setKeyword$6$Delimiter(ICharacterClass characterClass) {
		keyword$6$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$8$Delimiter() {
		return ruleCall$8$Delimiter;
	}
	
	public void setRuleCall$8$Delimiter(ISequenceMatcher matcher) {
		ruleCall$8$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$10$Delimiter() {
		return ruleCall$10$Delimiter;
	}
	
	public void setRuleCall$10$Delimiter(ISequenceMatcher matcher) {
		ruleCall$10$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
