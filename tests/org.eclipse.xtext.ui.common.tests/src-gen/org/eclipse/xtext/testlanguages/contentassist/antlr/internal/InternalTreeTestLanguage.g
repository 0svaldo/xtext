/*
* generated by Xtext
*/
grammar InternalTreeTestLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipse.xtext.testlanguages.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.xtext.testlanguages.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.testlanguages.services.TreeTestLanguageGrammarAccess;

}

@parser::members {
 
 	private TreeTestLanguageGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(TreeTestLanguageGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

}




// Entry rule entryRuleModel
entryRuleModel :
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getModelAccess().getChildrenAssignment()); }
(	
(
{ before(grammarAccess.getModelAccess().getChildrenNodeParserRuleCall_0()); }
	ruleNode{ after(grammarAccess.getModelAccess().getChildrenNodeParserRuleCall_0()); }
)
 
)*{ after(grammarAccess.getModelAccess().getChildrenAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNode
entryRuleNode :
{ before(grammarAccess.getNodeRule()); }
	 ruleNode
{ after(grammarAccess.getNodeRule()); } 
	 EOF 
;

// Rule Node
ruleNode 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getNodeAccess().getGroup()); }
(rule__Node__Group){ after(grammarAccess.getNodeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





rule__Node__Group
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getNameAssignment_0()); }
(	
(
{ before(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_0_0()); }
)
 
){ after(grammarAccess.getNodeAccess().getNameAssignment_0()); }
)
(
{ before(grammarAccess.getNodeAccess().getLeftParenthesisKeyword_1()); }

	'(' 
{ after(grammarAccess.getNodeAccess().getLeftParenthesisKeyword_1()); }
)
(
{ before(grammarAccess.getNodeAccess().getAttribAssignment_2()); }
(	
(
{ before(grammarAccess.getNodeAccess().getAttribSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getNodeAccess().getAttribSTRINGTerminalRuleCall_2_0()); }
)
 
){ after(grammarAccess.getNodeAccess().getAttribAssignment_2()); }
)
(
{ before(grammarAccess.getNodeAccess().getRightParenthesisKeyword_3()); }

	')' 
{ after(grammarAccess.getNodeAccess().getRightParenthesisKeyword_3()); }
)
(
{ before(grammarAccess.getNodeAccess().getLeftCurlyBracketKeyword_4()); }

	'{' 
{ after(grammarAccess.getNodeAccess().getLeftCurlyBracketKeyword_4()); }
)
(
{ before(grammarAccess.getNodeAccess().getChildrenAssignment_5()); }
(	
(
{ before(grammarAccess.getNodeAccess().getChildrenNodeParserRuleCall_5_0()); }
	ruleNode{ after(grammarAccess.getNodeAccess().getChildrenNodeParserRuleCall_5_0()); }
)
 
)*{ after(grammarAccess.getNodeAccess().getChildrenAssignment_5()); }
)
(
{ before(grammarAccess.getNodeAccess().getRightCurlyBracketSemicolonKeyword_6()); }

	'};' 
{ after(grammarAccess.getNodeAccess().getRightCurlyBracketSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


