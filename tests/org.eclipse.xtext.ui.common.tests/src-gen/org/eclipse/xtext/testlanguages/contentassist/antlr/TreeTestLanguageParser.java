/*
* generated by Xtext
*/
package org.eclipse.xtext.testlanguages.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.CharStream;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.xtext.testlanguages.services.TreeTestLanguageGrammarAccess;

public class TreeTestLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private TreeTestLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.xtext.testlanguages.contentassist.antlr.internal.InternalTreeTestLanguageLexer createLexer(CharStream stream) {
		return new org.eclipse.xtext.testlanguages.contentassist.antlr.internal.InternalTreeTestLanguageLexer(stream);
	}
	
	@Override
	protected org.eclipse.xtext.testlanguages.contentassist.antlr.internal.InternalTreeTestLanguageParser createParser() {
		org.eclipse.xtext.testlanguages.contentassist.antlr.internal.InternalTreeTestLanguageParser result = new org.eclipse.xtext.testlanguages.contentassist.antlr.internal.InternalTreeTestLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				{
					put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
					put(grammarAccess.getModelAccess().getChildrenAssignment(), "rule__Model__ChildrenAssignment");
					put(grammarAccess.getNodeAccess().getNameAssignment_0(), "rule__Node__NameAssignment_0");
					put(grammarAccess.getNodeAccess().getAttribAssignment_2(), "rule__Node__AttribAssignment_2");
					put(grammarAccess.getNodeAccess().getChildrenAssignment_5(), "rule__Node__ChildrenAssignment_5");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.xtext.testlanguages.contentassist.antlr.internal.InternalTreeTestLanguageParser typedParser = (org.eclipse.xtext.testlanguages.contentassist.antlr.internal.InternalTreeTestLanguageParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public TreeTestLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(TreeTestLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
