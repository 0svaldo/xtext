/*
* generated by Xtext
*/
package org.eclipse.xtext.ui.common.editor.contentassist.impl.parseTreeConstruction;

//import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor.AbstractToken.Solution;
import org.eclipse.xtext.ui.common.editor.contentassist.impl.services.TwoContextsTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class TwoContextsTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private TwoContextsTestLanguageGrammarAccess grammarAccess;
	
	@Override
	protected Solution internalSerialize(EObject obj) {
		IInstanceDescription inst = getDescr(obj);
		Solution s;
		if(inst.isInstanceOf(grammarAccess.getMainModelRule().getType().getClassifier()) && (s = new MainModel_Assignment_elements(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		if(inst.isInstanceOf(grammarAccess.getAnElementRule().getType().getClassifier()) && (s = new AnElement_Group(inst, null).firstSolution()) != null && isConsumed(s,null)) return s;
		return null;
	}
	

/************ begin Rule MainModel ****************
 *
 * MainModel:
 *   (elements+=AnElement)*;
 *
 **/

// (elements+=AnElement)*
protected class MainModel_Assignment_elements extends AssignmentToken  {
	
	public MainModel_Assignment_elements(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMainModelAccess().getElementsAssignment();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("elements",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");

		if(value instanceof EObject) { // xtext::RuleCall
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnElementRule().getType().getClassifier())) {
				Solution s = new AnElement_Group(param, this).firstSolution();
				while(s != null && !isConsumed(s,this)) s = s.getPredecessor().nextSolution(this,s);
				if(s != null) {
					type = AssignmentType.PRC; 
					return new Solution(obj,s.getPredecessor());
				} 
			}
		}

		return null;
	}
}

/************ end Rule MainModel ****************/


/************ begin Rule AnElement ****************
 *
 * AnElement:
 *   name=ID ("refersTo" referred=[AnElement])? ";";
 *
 **/

// name=ID ("refersTo" referred=[AnElement])? ";"
protected class AnElement_Group extends GroupToken {
	
	public AnElement_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnElementAccess().getGroup();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new AnElement_2_Keyword(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new AnElement_1_Group(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			while(s2 != null) {
				Solution s3 = new AnElement_0_Assignment_name(s2.getCurrent(), s2.getPredecessor()).firstSolution();
				if(s3 != null) {
					last = s3.getPredecessor();
					return s3;
				} else {
					s2 = s2.getPredecessor().nextSolution(this,s2);
				}
			}
			s1 = s1.getPredecessor().nextSolution(this,s1);
		}
		return null;
	}
}

// name=ID
protected class AnElement_0_Assignment_name extends AssignmentToken  {
	
	public AnElement_0_Assignment_name(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnElementAccess().getNameAssignment_0();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("name",IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // xtext::RuleCall FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAnElementAccess().getNameIDTerminalRuleCall_0_0();
			return new Solution(obj);
		}
		return null;
	}
}

// ("refersTo" referred=[AnElement])?
protected class AnElement_1_Group extends GroupToken {
	
	public AnElement_1_Group(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, !IS_REQUIRED);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnElementAccess().getGroup_1();
	}

	@Override
	protected Solution createSolution() {	
		Solution s1 = new AnElement_1_1_Assignment_referred(current, this).firstSolution();
		while(s1 != null) {
			Solution s2 = new AnElement_1_0_Keyword_refersTo(s1.getCurrent(), s1.getPredecessor()).firstSolution();
			if(s2 != null) {
				last = s2.getPredecessor();
				return s2;
			} else {
				s1 = s1.getPredecessor().nextSolution(this,s1);
			}
		}
		return null;
	}
}

// "refersTo"
protected class AnElement_1_0_Keyword_refersTo extends KeywordToken  {
	
	public AnElement_1_0_Keyword_refersTo(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAnElementAccess().getRefersToKeyword_1_0();
	}	
}

// referred=[AnElement]
protected class AnElement_1_1_Assignment_referred extends AssignmentToken  {
	
	public AnElement_1_1_Assignment_referred(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnElementAccess().getReferredAssignment_1_1();
	}
	
	@Override
	protected Solution createSolution() {
		if((value = current.getConsumable("referred",!IS_REQUIRED)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("referred");
		if(value instanceof EObject) { // xtext::CrossReference
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnElementAccess().getReferredAnElementCrossReference_1_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAnElementAccess().getReferredAnElementCrossReference_1_1_0(); 
				return new Solution(obj);
			}
		}
		return null;
	}
}


// ";"
protected class AnElement_2_Keyword extends KeywordToken  {
	
	public AnElement_2_Keyword(IInstanceDescription curr, AbstractToken pred) {
		super(curr, pred, !IS_MANY, IS_REQUIRED);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAnElementAccess().getSemicolonKeyword_2();
	}	
}


/************ end Rule AnElement ****************/

}
