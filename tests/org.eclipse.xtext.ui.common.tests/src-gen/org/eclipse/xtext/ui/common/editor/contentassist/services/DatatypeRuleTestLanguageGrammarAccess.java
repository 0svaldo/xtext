/*
* generated by Xtext
*/

package org.eclipse.xtext.ui.common.editor.contentassist.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DatatypeRuleTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class ModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final RuleCall cTypesParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Model:
		//  Types;
		public ParserRule getRule() { return rule; }

		//Types
		public RuleCall getTypesParserRuleCall() { return cTypesParserRuleCall; }
	}

	public class TypesElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Types");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_1_0 = (RuleCall)cTypesAssignment_1.eContents().get(0);
		
		//Types:
		//  "Types" types+=Type*;
		public ParserRule getRule() { return rule; }

		//"Types" types+=Type*
		public Group getGroup() { return cGroup; }

		//"Types"
		public Keyword getTypesKeyword_0() { return cTypesKeyword_0; }

		//types+=Type*
		public Assignment getTypesAssignment_1() { return cTypesAssignment_1; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_1_0() { return cTypesTypeParserRuleCall_1_0; }
	}

	public class TypeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositeTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//  SimpleType|CompositeType;
		public ParserRule getRule() { return rule; }

		//SimpleType|CompositeType
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleType
		public RuleCall getSimpleTypeParserRuleCall_0() { return cSimpleTypeParserRuleCall_0; }

		//CompositeType
		public RuleCall getCompositeTypeParserRuleCall_1() { return cCompositeTypeParserRuleCall_1; }
	}

	public class SimpleTypeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SimpleType:
		//  "Type" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"Type" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"Type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class CompositeTypeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompositeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cBaseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBaseTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBaseTypeCompositeTypeEntryParserRuleCall_3_0 = (RuleCall)cBaseTypeAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CompositeType:
		//  "Composite" name=ID "base" baseType=CompositeTypeEntry ";";
		public ParserRule getRule() { return rule; }

		//"Composite" name=ID "base" baseType=CompositeTypeEntry ";"
		public Group getGroup() { return cGroup; }

		//"Composite"
		public Keyword getCompositeKeyword_0() { return cCompositeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"base"
		public Keyword getBaseKeyword_2() { return cBaseKeyword_2; }

		//baseType=CompositeTypeEntry
		public Assignment getBaseTypeAssignment_3() { return cBaseTypeAssignment_3; }

		//CompositeTypeEntry
		public RuleCall getBaseTypeCompositeTypeEntryParserRuleCall_3_0() { return cBaseTypeCompositeTypeEntryParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class CompositeTypeEntryElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeTypeEntry");
		private final Assignment cDataTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cDataTypeTypeCrossReference_0 = (CrossReference)cDataTypeAssignment.eContents().get(0);
		private final RuleCall cDataTypeTypeTypeIdParserRuleCall_0_1 = (RuleCall)cDataTypeTypeCrossReference_0.eContents().get(1);
		
		//CompositeTypeEntry:
		//  dataType=[Type|TypeId];
		public ParserRule getRule() { return rule; }

		//dataType=[Type|TypeId]
		public Assignment getDataTypeAssignment() { return cDataTypeAssignment; }

		//[Type|TypeId]
		public CrossReference getDataTypeTypeCrossReference_0() { return cDataTypeTypeCrossReference_0; }

		//TypeId
		public RuleCall getDataTypeTypeTypeIdParserRuleCall_0_1() { return cDataTypeTypeTypeIdParserRuleCall_0_1; }
	}

	public class TypeIdElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTypeIdParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final RuleCall cTypeIdParserRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//TypeId returns ecore::EString:
		//  ID ("<" TypeId ("," TypeId)* ">")?;
		public ParserRule getRule() { return rule; }

		//ID ("<" TypeId ("," TypeId)* ">")?
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("<" TypeId ("," TypeId)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//TypeId
		public RuleCall getTypeIdParserRuleCall_1_1() { return cTypeIdParserRuleCall_1_1; }

		//("," TypeId)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//TypeId
		public RuleCall getTypeIdParserRuleCall_1_2_1() { return cTypeIdParserRuleCall_1_2_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
	}
	
	
	private ModelElements pModel;
	private TypesElements pTypes;
	private TypeElements pType;
	private SimpleTypeElements pSimpleType;
	private CompositeTypeElements pCompositeType;
	private CompositeTypeEntryElements pCompositeTypeEntry;
	private TypeIdElements pTypeId;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DatatypeRuleTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//  Types;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Types:
	//  "Types" types+=Type*;
	public TypesElements getTypesAccess() {
		return (pTypes != null) ? pTypes : (pTypes = new TypesElements());
	}
	
	public ParserRule getTypesRule() {
		return getTypesAccess().getRule();
	}

	//Type:
	//  SimpleType|CompositeType;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//SimpleType:
	//  "Type" name=ID ";";
	public SimpleTypeElements getSimpleTypeAccess() {
		return (pSimpleType != null) ? pSimpleType : (pSimpleType = new SimpleTypeElements());
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}

	//CompositeType:
	//  "Composite" name=ID "base" baseType=CompositeTypeEntry ";";
	public CompositeTypeElements getCompositeTypeAccess() {
		return (pCompositeType != null) ? pCompositeType : (pCompositeType = new CompositeTypeElements());
	}
	
	public ParserRule getCompositeTypeRule() {
		return getCompositeTypeAccess().getRule();
	}

	//CompositeTypeEntry:
	//  dataType=[Type|TypeId];
	public CompositeTypeEntryElements getCompositeTypeEntryAccess() {
		return (pCompositeTypeEntry != null) ? pCompositeTypeEntry : (pCompositeTypeEntry = new CompositeTypeEntryElements());
	}
	
	public ParserRule getCompositeTypeEntryRule() {
		return getCompositeTypeEntryAccess().getRule();
	}

	//TypeId returns ecore::EString:
	//  ID ("<" TypeId ("," TypeId)* ">")?;
	public TypeIdElements getTypeIdAccess() {
		return (pTypeId != null) ? pTypeId : (pTypeId = new TypeIdElements());
	}
	
	public ParserRule getTypeIdRule() {
		return getTypeIdAccess().getRule();
	}

	//terminal ID:
	//  "^" ? ( "a" .. "z" | "A" .. "Z" | "_" ) ( "a" .. "z" | "A" .. "Z" | "_" | "0" .. "9" ) *;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0" .. "9" +;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ( "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" ) | ! ( "\\" | "\"" ) ) * "\"" | "\'" ( "\\" ( "b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" ) | ! ( "\\" | "\'" ) ) * "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *" -> "* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" ! ( "\n" | "\r" ) * ( "\r" ? "\n" ) ?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  ( " " | "\t" | "\r" | "\n" ) +;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
