
/*
 * generated by Xtext
 */
package org.eclipse.xtext.ui.common.tests;

import org.eclipse.xtext.ui.common.service.UIPluginModule;

import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.osgi.framework.BundleContext;

import com.google.inject.Guice;
import com.google.inject.Injector;

import java.util.Map;
import java.util.HashMap;

/**
 * Generated
 */
public class Activator extends AbstractUIPlugin {

	private Map<String,Injector> injectors = new HashMap<String,Injector>();
	private static Activator INSTANCE;

	public Injector getInjector(String languageName) {
		return injectors.get(languageName);
	}
	
	@Override
	public void start(BundleContext context) throws Exception {
		super.start(context);
		INSTANCE = this;
		
		injectors.put("org.eclipse.xtext.XtextGrammarTestLanguage", Guice.createInjector(
			new org.eclipse.xtext.XtextGrammarTestLanguageUiModule(),
			createUIPluginModule()
		));
		
		injectors.put("org.eclipse.xtext.ui.common.editor.contentassist.TwoContextsTestLanguage", Guice.createInjector(
			new org.eclipse.xtext.ui.common.editor.contentassist.TwoContextsTestLanguageUiModule(),
			createUIPluginModule()
		));
		
		injectors.put("org.eclipse.xtext.ui.common.editor.contentassist.Bug286935TestLanguage", Guice.createInjector(
			new org.eclipse.xtext.ui.common.editor.contentassist.Bug286935TestLanguageUiModule(),
			createUIPluginModule()
		));
		
		injectors.put("org.eclipse.xtext.ui.common.editor.contentassist.ContentAssistContextTestLanguage", Guice.createInjector(
			new org.eclipse.xtext.ui.common.editor.contentassist.ContentAssistContextTestLanguageUiModule(),
			createUIPluginModule()
		));
		
		injectors.put("org.eclipse.xtext.ui.common.editor.contentassist.CrossReferenceProposalTestLanguage", Guice.createInjector(
			new org.eclipse.xtext.ui.common.editor.contentassist.CrossReferenceProposalTestLanguageUiModule(),
			createUIPluginModule()
		));
		
		injectors.put("org.eclipse.xtext.ui.common.editor.contentassist.DatatypeRuleTestLanguage", Guice.createInjector(
			new org.eclipse.xtext.ui.common.editor.contentassist.DatatypeRuleTestLanguageUiModule(),
			createUIPluginModule()
		));
		
		injectors.put("org.eclipse.xtext.ui.common.editor.contentassist.LookAheadContentAssistTestLanguage", Guice.createInjector(
			new org.eclipse.xtext.ui.common.editor.contentassist.LookAheadContentAssistTestLanguageUiModule(),
			createUIPluginModule()
		));
		
		injectors.put("org.eclipse.xtext.ui.common.editor.contentassist.DomainModelTestLanguage", Guice.createInjector(
			new org.eclipse.xtext.ui.common.editor.contentassist.DomainModelTestLanguageUiModule(),
			createUIPluginModule()
		));
		
		injectors.put("org.eclipse.xtext.grammarinheritance.AbstractTestLanguage", Guice.createInjector(
			new org.eclipse.xtext.grammarinheritance.AbstractTestLanguageUiModule(),
			createUIPluginModule()
		));
		
		injectors.put("org.eclipse.xtext.parser.keywords.KeywordsTestLanguage", Guice.createInjector(
			new org.eclipse.xtext.parser.keywords.KeywordsTestLanguageUiModule(),
			createUIPluginModule()
		));
		
		injectors.put("org.eclipse.xtext.testlanguages.ContentAssistTestLanguage", Guice.createInjector(
			new org.eclipse.xtext.testlanguages.ContentAssistTestLanguageUiModule(),
			createUIPluginModule()
		));
		
		injectors.put("org.eclipse.xtext.testlanguages.ReferenceGrammarTestLanguage", Guice.createInjector(
			new org.eclipse.xtext.testlanguages.ReferenceGrammarTestLanguageUiModule(),
			createUIPluginModule()
		));
		
		injectors.put("org.eclipse.xtext.testlanguages.TreeTestLanguage", Guice.createInjector(
			new org.eclipse.xtext.testlanguages.TreeTestLanguageUiModule(),
			createUIPluginModule()
		));
		
		injectors.put("org.eclipse.xtext.enumrules.EnumRulesTestLanguage", Guice.createInjector(
			new org.eclipse.xtext.enumrules.EnumRulesTestLanguageUiModule(),
			createUIPluginModule()
		));
		
	}
	
	public static Activator getInstance() {
		return INSTANCE;
	}
	
	protected UIPluginModule createUIPluginModule() {
		return new UIPluginModule(this);
	}
	
}
