/*
* generated by Xtext
*/

package org.eclipse.xtext.ui.common.editor.contentassist.impl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TwoContextsTestLanguageGrammarAccess implements IGrammarAccess {
	
	
	public class MainModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MainModel");
		private final Assignment cAssignmentElements = (Assignment)rule.eContents().get(1);
		private final RuleCall c0ParserRuleCallAnElement = (RuleCall)cAssignmentElements.eContents().get(0);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Assignment eleAssignmentElements() { return cAssignmentElements; }

		// not supported
		public RuleCall ele0ParserRuleCallAnElement() { return c0ParserRuleCallAnElement; }
	}

	public class AnElementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group c0Group = (Group)cGroup.eContents().get(0);
		private final Assignment c00AssignmentName = (Assignment)c0Group.eContents().get(0);
		private final RuleCall c000TerminalRuleCallID = (RuleCall)c00AssignmentName.eContents().get(0);
		private final Group c01Group = (Group)c0Group.eContents().get(1);
		private final Keyword c010KeywordRefersTo = (Keyword)c01Group.eContents().get(0);
		private final Assignment c011AssignmentReferred = (Assignment)c01Group.eContents().get(1);
		private final CrossReference c0110CrossReferenceEStringAnElement = (CrossReference)c011AssignmentReferred.eContents().get(0);
		private final Keyword c1KeywordSemicolon = (Keyword)cGroup.eContents().get(1);
		
		// not supported
		public ParserRule getRule() { return rule; }

		// not supported
		public Group eleGroup() { return cGroup; }

		// not supported
		public Group ele0Group() { return c0Group; }

		// not supported
		public Assignment ele00AssignmentName() { return c00AssignmentName; }

		// not supported
		public RuleCall ele000TerminalRuleCallID() { return c000TerminalRuleCallID; }

		// not supported
		public Group ele01Group() { return c01Group; }

		// not supported
		public Keyword ele010KeywordRefersTo() { return c010KeywordRefersTo; }

		// not supported
		public Assignment ele011AssignmentReferred() { return c011AssignmentReferred; }

		// not supported
		public CrossReference ele0110CrossReferenceEStringAnElement() { return c0110CrossReferenceEStringAnElement; }

		// not supported
		public Keyword ele1KeywordSemicolon() { return c1KeywordSemicolon; }
	}
	
	private MainModelElements pMainModel;
	private AnElementElements pAnElement;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess terminalsGrammarAccess;

	@Inject
	public TwoContextsTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess terminalsGrammarAccess) {
		this.grammarProvider = grammarProvider;
		this.terminalsGrammarAccess = terminalsGrammarAccess;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return terminalsGrammarAccess;
	}

	
	// not supported
	public MainModelElements prMainModel() {
		return (pMainModel != null) ? pMainModel : (pMainModel = new MainModelElements());
	} 

	// not supported
	public AnElementElements prAnElement() {
		return (pAnElement != null) ? pAnElement : (pAnElement = new AnElementElements());
	} 

	// not supported
	public TerminalRule trID() {
		return terminalsGrammarAccess.trID();
	} 

	// not supported
	public TerminalRule trINT() {
		return terminalsGrammarAccess.trINT();
	} 

	// not supported
	public TerminalRule trSTRING() {
		return terminalsGrammarAccess.trSTRING();
	} 

	// not supported
	public TerminalRule trML_COMMENT() {
		return terminalsGrammarAccess.trML_COMMENT();
	} 

	// not supported
	public TerminalRule trSL_COMMENT() {
		return terminalsGrammarAccess.trSL_COMMENT();
	} 

	// not supported
	public TerminalRule trWS() {
		return terminalsGrammarAccess.trWS();
	} 

	// not supported
	public TerminalRule trANY_OTHER() {
		return terminalsGrammarAccess.trANY_OTHER();
	} 
}
