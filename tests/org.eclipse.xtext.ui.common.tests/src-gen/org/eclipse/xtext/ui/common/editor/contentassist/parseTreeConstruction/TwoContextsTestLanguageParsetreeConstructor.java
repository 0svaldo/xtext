/*
* generated by Xtext
*/
package org.eclipse.xtext.ui.common.editor.contentassist.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor2;

import org.eclipse.xtext.ui.common.editor.contentassist.services.TwoContextsTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class TwoContextsTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor2 {
		
	@Inject
	private TwoContextsTestLanguageGrammarAccess grammarAccess;
		
	public TwoContextsTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken2 getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MainModel_ElementsAssignment(this, this, 0, inst);
			case 1: return new AnElement_Group(this, this, 1, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule MainModel ****************
 *
 * MainModel:
 *   elements+=AnElement*;
 *
 **/

// elements+=AnElement*
protected class MainModel_ElementsAssignment extends AssignmentToken  {
	
	public MainModel_ElementsAssignment(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMainModelAccess().getElementsAssignment();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMainModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMainModelAccess().getElementsAnElementParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken2 createParentFollower(AbstractToken2 next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MainModel_ElementsAssignment(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

/************ end Rule MainModel ****************/


/************ begin Rule AnElement ****************
 *
 * AnElement:
 *   name=ID ("refersTo" referred=[AnElement])? ";";
 *
 **/

// name=ID ("refersTo" referred=[AnElement])? ";"
protected class AnElement_Group extends GroupToken {
	
	public AnElement_Group(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAnElementAccess().getGroup();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnElement_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAnElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class AnElement_NameAssignment_0 extends AssignmentToken  {
	
	public AnElement_NameAssignment_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAnElementAccess().getNameAssignment_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAnElementAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ("refersTo" referred=[AnElement])?
protected class AnElement_Group_1 extends GroupToken {
	
	public AnElement_Group_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAnElementAccess().getGroup_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnElement_ReferredAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "refersTo"
protected class AnElement_RefersToKeyword_1_0 extends KeywordToken  {
	
	public AnElement_RefersToKeyword_1_0(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAnElementAccess().getRefersToKeyword_1_0();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnElement_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// referred=[AnElement]
protected class AnElement_ReferredAssignment_1_1 extends AssignmentToken  {
	
	public AnElement_ReferredAssignment_1_1(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAnElementAccess().getReferredAssignment_1_1();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnElement_RefersToKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("referred",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("referred");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnElementAccess().getReferredAnElementCrossReference_1_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAnElementAccess().getReferredAnElementCrossReference_1_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// ";"
protected class AnElement_SemicolonKeyword_2 extends KeywordToken  {
	
	public AnElement_SemicolonKeyword_2(AbstractToken2 parent, AbstractToken2 next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAnElementAccess().getSemicolonKeyword_2();
	}

	public AbstractToken2 createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnElement_Group_1(parent, this, 0, inst);
			case 1: return new AnElement_NameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule AnElement ****************/

}
