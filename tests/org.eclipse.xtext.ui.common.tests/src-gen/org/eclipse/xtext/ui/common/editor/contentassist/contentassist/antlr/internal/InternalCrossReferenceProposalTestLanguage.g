/*
* generated by Xtext
*/
grammar InternalCrossReferenceProposalTestLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipse.xtext.ui.common.editor.contentassist.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.xtext.ui.common.editor.contentassist.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.common.editor.contentassist.services.CrossReferenceProposalTestLanguageGrammarAccess;

}

@parser::members {
 
 	private CrossReferenceProposalTestLanguageGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CrossReferenceProposalTestLanguageGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

}




// Entry rule entryRuleModel
entryRuleModel :
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getModelAccess().getElementsAssignment()); }
(	
(
{ before(grammarAccess.getModelAccess().getElementsClassParserRuleCall_0()); }
	ruleClass{ after(grammarAccess.getModelAccess().getElementsClassParserRuleCall_0()); }
)
 
)*{ after(grammarAccess.getModelAccess().getElementsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClass
entryRuleClass :
{ before(grammarAccess.getClassRule()); }
	 ruleClass
{ after(grammarAccess.getClassRule()); } 
	 EOF 
;

// Rule Class
ruleClass 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getClassAccess().getGroup()); }
(rule__Class__Group){ after(grammarAccess.getClassAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





rule__Class__Group
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getGroup_0()); }
(rule__Class__Group_0)?{ after(grammarAccess.getClassAccess().getGroup_0()); }
)
(
{ before(grammarAccess.getClassAccess().getNameAssignment_1()); }
(	
(
{ before(grammarAccess.getClassAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getClassAccess().getNameIDTerminalRuleCall_1_0()); }
)
 
){ after(grammarAccess.getClassAccess().getNameAssignment_1()); }
)
(
{ before(grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 
{ after(grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_2()); }
)
(
{ before(grammarAccess.getClassAccess().getRightCurlyBracketKeyword_3()); }

	'}' 
{ after(grammarAccess.getClassAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getSuperClassAssignment_0_0()); }
(	
(
{ before(grammarAccess.getClassAccess().getSuperClassClassCrossReference_0_0_0()); }
(
{ before(grammarAccess.getClassAccess().getSuperClassClassIDTerminalRuleCall_0_0_0_1()); }
	RULE_ID{ after(grammarAccess.getClassAccess().getSuperClassClassIDTerminalRuleCall_0_0_0_1()); }
)
{ after(grammarAccess.getClassAccess().getSuperClassClassCrossReference_0_0_0()); }
)
 
){ after(grammarAccess.getClassAccess().getSuperClassAssignment_0_0()); }
)
(
{ before(grammarAccess.getClassAccess().getLessThanSignHyphenMinusKeyword_0_1()); }

	'<-' 
{ after(grammarAccess.getClassAccess().getLessThanSignHyphenMinusKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


