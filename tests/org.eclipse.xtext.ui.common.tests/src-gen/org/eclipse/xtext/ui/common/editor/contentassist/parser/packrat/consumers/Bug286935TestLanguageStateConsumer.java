/*
* generated by Xtext
*/
package org.eclipse.xtext.ui.common.editor.contentassist.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.ui.common.editor.contentassist.services.Bug286935TestLanguageGrammarAccess.StateElements;

public final class Bug286935TestLanguageStateConsumer extends NonTerminalConsumer {

	private StateElements rule;	

	private ITerminalConsumer idConsumer;

	private INonTerminalConsumer stateTypeConsumer;

	private ITerminalConsumer stringConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer alternatives$2$Consumer;

	private IElementConsumer assignment$3$Consumer;

	private IElementConsumer keyword$4$Consumer;

	private IElementConsumer assignment$5$Consumer;

	private IElementConsumer keyword$6$Consumer;

	private IElementConsumer assignment$7$Consumer;

	private IElementConsumer ruleCall$8$Consumer;

	private IElementConsumer group$9$Consumer;

	private IElementConsumer assignment$10$Consumer;

	private IElementConsumer keyword$11$Consumer;

	private IElementConsumer assignment$12$Consumer;

	private IElementConsumer ruleCall$13$Consumer;

	private IElementConsumer group$14$Consumer;

	private IElementConsumer assignment$15$Consumer;

	private IElementConsumer keyword$16$Consumer;

	private IElementConsumer assignment$17$Consumer;

	private IElementConsumer ruleCall$18$Consumer;

	private IElementConsumer assignment$19$Consumer;

	private IElementConsumer keyword$20$Consumer;

	private IElementConsumer keyword$21$Consumer;

	private IElementConsumer assignment$22$Consumer;

	private IElementConsumer ruleCall$23$Consumer;

	private IElementConsumer assignment$24$Consumer;

	private IElementConsumer ruleCall$25$Consumer;

	private ICharacterClass keyword$11$Delimiter;

	private ICharacterClass keyword$16$Delimiter;

	private ICharacterClass keyword$20$Delimiter;

	private ICharacterClass keyword$21$Delimiter;

	private ICharacterClass keyword$4$Delimiter;

	private ICharacterClass keyword$6$Delimiter;

	private ISequenceMatcher ruleCall$23$Delimiter;

	private ISequenceMatcher ruleCall$25$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(alternatives$2$Consumer);
			acceptor.accept(keyword$21$Consumer);
			acceptor.accept(assignment$22$Consumer);
			acceptor.accept(assignment$24$Consumer);
		}
	}

	protected class Alternatives$2$Consumer extends OptionalAlternativesConsumer {
		
		protected Alternatives$2$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$3$Consumer);
			acceptor.accept(assignment$5$Consumer);
			acceptor.accept(assignment$7$Consumer);
			acceptor.accept(group$9$Consumer);
			acceptor.accept(group$14$Consumer);
		}
	}

	protected class Assignment$3$Consumer extends AssignmentConsumer {
		
		protected Assignment$3$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$4$Consumer;
		}
	}

	protected class Keyword$4$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$4$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "isInitial", false, true, getKeyword$4$Delimiter(), optional);
		}
	}

	protected class Assignment$5$Consumer extends AssignmentConsumer {
		
		protected Assignment$5$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$6$Consumer;
		}
	}

	protected class Keyword$6$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$6$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "isFinal", false, true, getKeyword$6$Delimiter(), optional);
		}
	}

	protected class Assignment$7$Consumer extends AssignmentConsumer {
		
		protected Assignment$7$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$8$Consumer;
		}
	}

	protected class RuleCall$8$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$8$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(stateTypeConsumer, "stateKind", false, false, false, getElement(), optional);
		}
	}

	protected class Group$9$Consumer extends GroupConsumer {
		
		protected Group$9$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$10$Consumer);
			acceptor.accept(assignment$12$Consumer);
		}
	}

	protected class Assignment$10$Consumer extends AssignmentConsumer {
		
		protected Assignment$10$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$11$Consumer;
		}
	}

	protected class Keyword$11$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$11$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "isInitial", false, true, getKeyword$11$Delimiter(), optional);
		}
	}

	protected class Assignment$12$Consumer extends AssignmentConsumer {
		
		protected Assignment$12$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$13$Consumer;
		}
	}

	protected class RuleCall$13$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$13$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(stateTypeConsumer, "stateKind", false, false, false, getElement(), optional);
		}
	}

	protected class Group$14$Consumer extends GroupConsumer {
		
		protected Group$14$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$15$Consumer);
			acceptor.accept(assignment$17$Consumer);
			acceptor.accept(assignment$19$Consumer);
		}
	}

	protected class Assignment$15$Consumer extends AssignmentConsumer {
		
		protected Assignment$15$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$16$Consumer;
		}
	}

	protected class Keyword$16$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$16$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "isInitial", false, true, getKeyword$16$Delimiter(), optional);
		}
	}

	protected class Assignment$17$Consumer extends AssignmentConsumer {
		
		protected Assignment$17$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$18$Consumer;
		}
	}

	protected class RuleCall$18$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$18$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(stateTypeConsumer, "stateKind", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$19$Consumer extends AssignmentConsumer {
		
		protected Assignment$19$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$20$Consumer;
		}
	}

	protected class Keyword$20$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$20$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "isFinal", false, true, getKeyword$20$Delimiter(), optional);
		}
	}

	protected class Keyword$21$Consumer extends OptionalElementConsumer<Keyword> {
		
		protected Keyword$21$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$21$Delimiter(), optional);
		}
	}

	protected class Assignment$22$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$22$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$23$Consumer;
		}
	}

	protected class RuleCall$23$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$23$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "stateName", false, false, getElement(), getRuleCall$23$Delimiter(), optional);
		}
	}

	protected class Assignment$24$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$24$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$25$Consumer;
		}
	}

	protected class RuleCall$25$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$25$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "label", false, false, getElement(), getRuleCall$25$Delimiter(), optional);
		}
	}

	public Bug286935TestLanguageStateConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$11$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$16$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$20$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$21$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$4$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$6$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$23$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$25$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public StateElements getRule() {
		return rule;
	}
	
	public void setRule(StateElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		alternatives$2$Consumer = new Alternatives$2$Consumer(rule.getAlternatives_0());
		assignment$3$Consumer = new Assignment$3$Consumer(rule.getIsInitialAssignment_0_0());
		keyword$4$Consumer = new Keyword$4$Consumer(rule.getIsInitialInitKeyword_0_0_0());
		assignment$5$Consumer = new Assignment$5$Consumer(rule.getIsFinalAssignment_0_1());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.getIsFinalFinalKeyword_0_1_0());
		assignment$7$Consumer = new Assignment$7$Consumer(rule.getStateKindAssignment_0_2());
		ruleCall$8$Consumer = new RuleCall$8$Consumer(rule.getStateKindStateTypeEnumRuleCall_0_2_0());
		group$9$Consumer = new Group$9$Consumer(rule.getGroup_0_3());
		assignment$10$Consumer = new Assignment$10$Consumer(rule.getIsInitialAssignment_0_3_0());
		keyword$11$Consumer = new Keyword$11$Consumer(rule.getIsInitialInitKeyword_0_3_0_0());
		assignment$12$Consumer = new Assignment$12$Consumer(rule.getStateKindAssignment_0_3_1());
		ruleCall$13$Consumer = new RuleCall$13$Consumer(rule.getStateKindStateTypeEnumRuleCall_0_3_1_0());
		group$14$Consumer = new Group$14$Consumer(rule.getGroup_0_4());
		assignment$15$Consumer = new Assignment$15$Consumer(rule.getIsInitialAssignment_0_4_0());
		keyword$16$Consumer = new Keyword$16$Consumer(rule.getIsInitialInitKeyword_0_4_0_0());
		assignment$17$Consumer = new Assignment$17$Consumer(rule.getStateKindAssignment_0_4_1());
		ruleCall$18$Consumer = new RuleCall$18$Consumer(rule.getStateKindStateTypeEnumRuleCall_0_4_1_0());
		assignment$19$Consumer = new Assignment$19$Consumer(rule.getIsFinalAssignment_0_4_2());
		keyword$20$Consumer = new Keyword$20$Consumer(rule.getIsFinalFinalKeyword_0_4_2_0());
		keyword$21$Consumer = new Keyword$21$Consumer(rule.getStateKeyword_1());
		assignment$22$Consumer = new Assignment$22$Consumer(rule.getStateNameAssignment_2());
		ruleCall$23$Consumer = new RuleCall$23$Consumer(rule.getStateNameIDTerminalRuleCall_2_0());
		assignment$24$Consumer = new Assignment$24$Consumer(rule.getLabelAssignment_3());
		ruleCall$25$Consumer = new RuleCall$25$Consumer(rule.getLabelSTRINGTerminalRuleCall_3_0());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setStateTypeConsumer(INonTerminalConsumer stateTypeConsumer) {
		this.stateTypeConsumer = stateTypeConsumer;
	}
	
	public void setStringConsumer(ITerminalConsumer stringConsumer) {
		this.stringConsumer = stringConsumer;
	}
	
	public ICharacterClass getKeyword$11$Delimiter() {
		return keyword$11$Delimiter;
	}
	
	public void setKeyword$11$Delimiter(ICharacterClass characterClass) {
		keyword$11$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$16$Delimiter() {
		return keyword$16$Delimiter;
	}
	
	public void setKeyword$16$Delimiter(ICharacterClass characterClass) {
		keyword$16$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$20$Delimiter() {
		return keyword$20$Delimiter;
	}
	
	public void setKeyword$20$Delimiter(ICharacterClass characterClass) {
		keyword$20$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$21$Delimiter() {
		return keyword$21$Delimiter;
	}
	
	public void setKeyword$21$Delimiter(ICharacterClass characterClass) {
		keyword$21$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$4$Delimiter() {
		return keyword$4$Delimiter;
	}
	
	public void setKeyword$4$Delimiter(ICharacterClass characterClass) {
		keyword$4$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$6$Delimiter() {
		return keyword$6$Delimiter;
	}
	
	public void setKeyword$6$Delimiter(ICharacterClass characterClass) {
		keyword$6$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$23$Delimiter() {
		return ruleCall$23$Delimiter;
	}
	
	public void setRuleCall$23$Delimiter(ISequenceMatcher matcher) {
		ruleCall$23$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$25$Delimiter() {
		return ruleCall$25$Delimiter;
	}
	
	public void setRuleCall$25$Delimiter(ISequenceMatcher matcher) {
		ruleCall$25$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
