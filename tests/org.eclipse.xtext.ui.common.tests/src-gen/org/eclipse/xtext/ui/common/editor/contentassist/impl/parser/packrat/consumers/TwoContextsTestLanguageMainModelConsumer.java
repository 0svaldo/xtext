/*
* generated by Xtext
*/
package org.eclipse.xtext.ui.common.editor.contentassist.impl.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;

import org.eclipse.xtext.ui.common.editor.contentassist.impl.services.TwoContextsTestLanguageGrammarAccess.MainModelElements;

public final class TwoContextsTestLanguageMainModelConsumer extends NonTerminalConsumer {

	private MainModelElements rule;	

	private INonTerminalConsumer anElementConsumer;

	private IElementConsumer assignment$1$Consumer;

	private IElementConsumer ruleCall$2$Consumer;

	protected class Assignment$1$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$1$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$2$Consumer;
		}
	}

	protected class RuleCall$2$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$2$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(anElementConsumer, "elements", true, false, false, getElement(), optional);
		}
	}

	public TwoContextsTestLanguageMainModelConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
	}
	
	@Override
	protected int doConsume() throws Exception {
		return assignment$1$Consumer.consume();
	}

	public MainModelElements getRule() {
		return rule;
	}
	
	public void setRule(MainModelElements rule) {
		this.rule = rule;
		
		assignment$1$Consumer = new Assignment$1$Consumer(rule.eleAssignmentElements());
		ruleCall$2$Consumer = new RuleCall$2$Consumer(rule.ele0ParserRuleCallAnElement());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setAnElementConsumer(INonTerminalConsumer anElementConsumer) {
		this.anElementConsumer = anElementConsumer;
	}
	
}
