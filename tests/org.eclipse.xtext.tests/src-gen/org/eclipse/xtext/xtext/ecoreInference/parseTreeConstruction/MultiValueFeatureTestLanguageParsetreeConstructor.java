/*
* generated by Xtext
*/
package org.eclipse.xtext.xtext.ecoreInference.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.xtext.ecoreInference.services.MultiValueFeatureTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class MultiValueFeatureTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private MultiValueFeatureTestLanguageGrammarAccess grammarAccess;
	
	@Override	
	public MultiValueFeatureTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Start_FeatureAAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Start ****************
 *
 * Start:
 *   featureA+=ID+;
 *
 **/

// featureA+=ID+
protected class Start_FeatureAAssignment extends AssignmentToken  {
	
	public Start_FeatureAAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStartAccess().getFeatureAAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Start_FeatureAAssignment(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStartRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("featureA",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("featureA");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStartAccess().getFeatureAIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule Start ****************/

}
