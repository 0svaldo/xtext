/*
* generated by Xtext
*/
grammar InternalUnassignedRuleCallTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.xtext.ecoreInference.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.xtext.ecoreInference.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.xtext.ecoreInference.services.UnassignedRuleCallTestLanguageGrammarAccess;

}

@parser::members {

 	private UnassignedRuleCallTestLanguageGrammarAccess grammarAccess;
 	
    public InternalUnassignedRuleCallTestLanguageParser(TokenStream input, IAstFactory factory, UnassignedRuleCallTestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected UnassignedRuleCallTestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='model' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getModelAccess().getModelKeyword_0(), null);
    }
(this_INT_1=RULE_INT
    { 
    createLeafNode(this_INT_1, grammarAccess.getModelAccess().getINTTerminalRuleCall_1(), null); 
    }
)+(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getModelFeaturesModelFeaturesParserRuleCall_2_0(), currentNode); 
	    }
		lv_modelFeatures_2_0=ruleModelFeatures		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"modelFeatures",
        		lv_modelFeatures_2_0, 
        		"ModelFeatures", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleModelFeatures
entryRuleModelFeatures returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelFeaturesRule(), currentNode); }
	 iv_ruleModelFeatures=ruleModelFeatures 
	 { $current=$iv_ruleModelFeatures.current; } 
	 EOF 
;

// Rule ModelFeatures
ruleModelFeatures returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='feature' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getModelFeaturesAccess().getFeatureKeyword_0(), null);
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(lv_name_1_0, grammarAccess.getModelFeaturesAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModelFeaturesRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID", 
        		lastConsumedNode);
	    }

)
)
    { 
        currentNode=createCompositeNode(grammarAccess.getModelFeaturesAccess().getDataTypeRuleParserRuleCall_2(), currentNode); 
    }
ruleDataTypeRule
    { 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }
	otherlv_3=';' 
    {
    	createLeafNode(otherlv_3, grammarAccess.getModelFeaturesAccess().getSemicolonKeyword_3(), null);
    }
)
;





// Entry rule entryRuleDataTypeRule
entryRuleDataTypeRule returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataTypeRuleRule(), currentNode); } 
	 iv_ruleDataTypeRule=ruleDataTypeRule 
	 { $current=$iv_ruleDataTypeRule.current.getText(); }  
	 EOF 
;

// Rule DataTypeRule
ruleDataTypeRule returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(this_INT_0, grammarAccess.getDataTypeRuleAccess().getINTTerminalRuleCall_0(), null); 
    }

	kw='keyword' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getDataTypeRuleAccess().getKeywordKeyword_1(), null); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    createLeafNode(this_INT_2, grammarAccess.getDataTypeRuleAccess().getINTTerminalRuleCall_2(), null); 
    }
(    this_STRING_3=RULE_STRING    {
		$current.merge(this_STRING_3);
    }

    { 
    createLeafNode(this_STRING_3, grammarAccess.getDataTypeRuleAccess().getSTRINGTerminalRuleCall_3(), null); 
    }
)?)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


