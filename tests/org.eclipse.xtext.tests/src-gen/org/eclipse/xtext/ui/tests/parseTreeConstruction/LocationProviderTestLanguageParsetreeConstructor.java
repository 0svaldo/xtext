/*
* generated by Xtext
*/
package org.eclipse.xtext.ui.tests.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.ui.tests.services.LocationProviderTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class LocationProviderTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private LocationProviderTestLanguageGrammarAccess grammarAccess;
	
	@Override	
	public LocationProviderTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_ElementsAssignment(this, this, 0, inst);
			case 1: return new Element_Group(this, this, 1, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 *   elements+=Element*;
 *
 **/

// elements+=Element*
protected class Model_ElementsAssignment extends AssignmentToken  {
	
	public Model_ElementsAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getElementsAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getElementsElementParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_ElementsAssignment(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

/************ end Rule Model ****************/


/************ begin Rule Element ****************
 *
 * Element:
 *   "element" name=ID ("singleref" singleref=[Element])? ("multiref" multirefs+=[Element]
 *   )*;
 *
 **/

// "element" name=ID ("singleref" singleref=[Element])? ("multiref" multirefs+=[Element]
// )*
protected class Element_Group extends GroupToken {
	
	public Element_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_Group_3(parent, this, 0, inst);
			case 1: return new Element_Group_2(parent, this, 1, inst);
			case 2: return new Element_NameAssignment_1(parent, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getElementRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// "element"
protected class Element_ElementKeyword_0 extends KeywordToken  {
	
	public Element_ElementKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElementAccess().getElementKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

}

// name=ID
protected class Element_NameAssignment_1 extends AssignmentToken  {
	
	public Element_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_ElementKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getElementAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("singleref" singleref=[Element])?
protected class Element_Group_2 extends GroupToken {
	
	public Element_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElementAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_SinglerefAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "singleref"
protected class Element_SinglerefKeyword_2_0 extends KeywordToken  {
	
	public Element_SinglerefKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElementAccess().getSinglerefKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// singleref=[Element]
protected class Element_SinglerefAssignment_2_1 extends AssignmentToken  {
	
	public Element_SinglerefAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementAccess().getSinglerefAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_SinglerefKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("singleref",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("singleref");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementAccess().getSinglerefElementCrossReference_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getElementAccess().getSinglerefElementCrossReference_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// ("multiref" multirefs+=[Element])*
protected class Element_Group_3 extends GroupToken {
	
	public Element_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElementAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_MultirefsAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "multiref"
protected class Element_MultirefKeyword_3_0 extends KeywordToken  {
	
	public Element_MultirefKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElementAccess().getMultirefKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_Group_3(parent, this, 0, inst);
			case 1: return new Element_Group_2(parent, this, 1, inst);
			case 2: return new Element_NameAssignment_1(parent, this, 2, inst);
			default: return null;
		}	
	}

}

// multirefs+=[Element]
protected class Element_MultirefsAssignment_3_1 extends AssignmentToken  {
	
	public Element_MultirefsAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementAccess().getMultirefsAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_MultirefKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("multirefs",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("multirefs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementAccess().getMultirefsElementCrossReference_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getElementAccess().getMultirefsElementCrossReference_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}



/************ end Rule Element ****************/

}
