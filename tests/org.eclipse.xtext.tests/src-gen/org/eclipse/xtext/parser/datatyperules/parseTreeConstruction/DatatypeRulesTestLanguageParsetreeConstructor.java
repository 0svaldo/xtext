/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.datatyperules.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.parser.datatyperules.services.DatatypeRulesTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class DatatypeRulesTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private DatatypeRulesTestLanguageGrammarAccess grammarAccess;
	
	@Override	
	public DatatypeRulesTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeModel_ModelAssignment(this, this, 0, inst);
			case 1: return new Model_Group(this, this, 1, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule CompositeModel ****************
 *
 * CompositeModel:
 *   model+=Model+;
 *
 **/

// model+=Model+
protected class CompositeModel_ModelAssignment extends AssignmentToken  {
	
	public CompositeModel_ModelAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeModelAccess().getModelAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("model",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("model");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompositeModelAccess().getModelModelParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompositeModel_ModelAssignment(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

/************ end Rule CompositeModel ****************/


/************ begin Rule Model ****************
 *
 * Model:
 *   id=NestedModelId (":" value=Fraction)? ("#" vector=Vector)? ("+" dots=Dots)?
 *   ("*" double=Double)? ";";
 *
 **/

// id=NestedModelId (":" value=Fraction)? ("#" vector=Vector)? ("+" dots=Dots)? (
// "*" double=Double)? ";"
protected class Model_Group extends GroupToken {
	
	public Model_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_SemicolonKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getModelRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// id=NestedModelId
protected class Model_IdAssignment_0 extends AssignmentToken  {
	
	public Model_IdAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getIdAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("id",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("id");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getModelAccess().getIdNestedModelIdParserRuleCall_0_0(), value, null)) {
			type = AssignmentType.DRC;
			element = grammarAccess.getModelAccess().getIdNestedModelIdParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// (":" value=Fraction)?
protected class Model_Group_1 extends GroupToken {
	
	public Model_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_ValueAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// ":"
protected class Model_ColonKeyword_1_0 extends KeywordToken  {
	
	public Model_ColonKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getColonKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_IdAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// value=Fraction
protected class Model_ValueAssignment_1_1 extends AssignmentToken  {
	
	public Model_ValueAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getValueAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_ColonKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getModelAccess().getValueFractionParserRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.DRC;
			element = grammarAccess.getModelAccess().getValueFractionParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// ("#" vector=Vector)?
protected class Model_Group_2 extends GroupToken {
	
	public Model_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_VectorAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "#"
protected class Model_NumberSignKeyword_2_0 extends KeywordToken  {
	
	public Model_NumberSignKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getNumberSignKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Group_1(parent, this, 0, inst);
			case 1: return new Model_IdAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// vector=Vector
protected class Model_VectorAssignment_2_1 extends AssignmentToken  {
	
	public Model_VectorAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getVectorAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_NumberSignKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("vector",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("vector");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getModelAccess().getVectorVectorParserRuleCall_2_1_0(), value, null)) {
			type = AssignmentType.DRC;
			element = grammarAccess.getModelAccess().getVectorVectorParserRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// ("+" dots=Dots)?
protected class Model_Group_3 extends GroupToken {
	
	public Model_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_DotsAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "+"
protected class Model_PlusSignKeyword_3_0 extends KeywordToken  {
	
	public Model_PlusSignKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getPlusSignKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Group_2(parent, this, 0, inst);
			case 1: return new Model_Group_1(parent, this, 1, inst);
			case 2: return new Model_IdAssignment_0(parent, this, 2, inst);
			default: return null;
		}	
	}

}

// dots=Dots
protected class Model_DotsAssignment_3_1 extends AssignmentToken  {
	
	public Model_DotsAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getDotsAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_PlusSignKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dots",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dots");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getModelAccess().getDotsDotsParserRuleCall_3_1_0(), value, null)) {
			type = AssignmentType.DRC;
			element = grammarAccess.getModelAccess().getDotsDotsParserRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}


// ("*" double=Double)?
protected class Model_Group_4 extends GroupToken {
	
	public Model_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_DoubleAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "*"
protected class Model_AsteriskKeyword_4_0 extends KeywordToken  {
	
	public Model_AsteriskKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getAsteriskKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Group_3(parent, this, 0, inst);
			case 1: return new Model_Group_2(parent, this, 1, inst);
			case 2: return new Model_Group_1(parent, this, 2, inst);
			case 3: return new Model_IdAssignment_0(parent, this, 3, inst);
			default: return null;
		}	
	}

}

// double=Double
protected class Model_DoubleAssignment_4_1 extends AssignmentToken  {
	
	public Model_DoubleAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getDoubleAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_AsteriskKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("double",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("double");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getModelAccess().getDoubleDoubleParserRuleCall_4_1_0(), value, null)) {
			type = AssignmentType.DRC;
			element = grammarAccess.getModelAccess().getDoubleDoubleParserRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}


// ";"
protected class Model_SemicolonKeyword_5 extends KeywordToken  {
	
	public Model_SemicolonKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getSemicolonKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Group_4(parent, this, 0, inst);
			case 1: return new Model_Group_3(parent, this, 1, inst);
			case 2: return new Model_Group_2(parent, this, 2, inst);
			case 3: return new Model_Group_1(parent, this, 3, inst);
			case 4: return new Model_IdAssignment_0(parent, this, 4, inst);
			default: return null;
		}	
	}

}


/************ end Rule Model ****************/







}
