/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.datatyperules.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;

import org.eclipse.xtext.parser.datatyperules.services.DatatypeRulesTestLanguageGrammarAccess.ModelElements;

@SuppressWarnings("all")
public final class DatatypeRulesTestLanguageModelConsumer extends NonTerminalConsumer {

	private ModelElements rule;	

	private INonTerminalConsumer dotsConsumer;

	private INonTerminalConsumer doubleConsumer;

	private INonTerminalConsumer fractionConsumer;

	private INonTerminalConsumer nestedModelIdConsumer;

	private INonTerminalConsumer vectorConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer assignment$2$Consumer;

	private IElementConsumer ruleCall$3$Consumer;

	private IElementConsumer group$4$Consumer;

	private IElementConsumer keyword$5$Consumer;

	private IElementConsumer assignment$6$Consumer;

	private IElementConsumer ruleCall$7$Consumer;

	private IElementConsumer group$8$Consumer;

	private IElementConsumer keyword$9$Consumer;

	private IElementConsumer assignment$10$Consumer;

	private IElementConsumer ruleCall$11$Consumer;

	private IElementConsumer group$12$Consumer;

	private IElementConsumer keyword$13$Consumer;

	private IElementConsumer assignment$14$Consumer;

	private IElementConsumer ruleCall$15$Consumer;

	private IElementConsumer group$16$Consumer;

	private IElementConsumer keyword$17$Consumer;

	private IElementConsumer assignment$18$Consumer;

	private IElementConsumer ruleCall$19$Consumer;

	private IElementConsumer keyword$20$Consumer;

	private ICharacterClass keyword$5$Delimiter;

	private ICharacterClass keyword$9$Delimiter;

	private ICharacterClass keyword$13$Delimiter;

	private ICharacterClass keyword$17$Delimiter;

	private ICharacterClass keyword$20$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$2$Consumer);
			acceptor.accept(group$4$Consumer);
			acceptor.accept(group$8$Consumer);
			acceptor.accept(group$12$Consumer);
			acceptor.accept(group$16$Consumer);
			acceptor.accept(keyword$20$Consumer);
		}
	}

	protected class Assignment$2$Consumer extends AssignmentConsumer {
		
		protected Assignment$2$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$3$Consumer;
		}
	}

	protected class RuleCall$3$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$3$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(nestedModelIdConsumer, "id", false, true, false, getElement(), optional);
		}
	}

	protected class Group$4$Consumer extends OptionalGroupConsumer {
		
		protected Group$4$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$5$Consumer);
			acceptor.accept(assignment$6$Consumer);
		}
	}

	protected class Keyword$5$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$5$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$5$Delimiter(), optional);
		}
	}

	protected class Assignment$6$Consumer extends AssignmentConsumer {
		
		protected Assignment$6$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$7$Consumer;
		}
	}

	protected class RuleCall$7$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$7$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(fractionConsumer, "value", false, true, false, getElement(), optional);
		}
	}

	protected class Group$8$Consumer extends OptionalGroupConsumer {
		
		protected Group$8$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$9$Consumer);
			acceptor.accept(assignment$10$Consumer);
		}
	}

	protected class Keyword$9$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$9$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$9$Delimiter(), optional);
		}
	}

	protected class Assignment$10$Consumer extends AssignmentConsumer {
		
		protected Assignment$10$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$11$Consumer;
		}
	}

	protected class RuleCall$11$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$11$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(vectorConsumer, "vector", false, true, false, getElement(), optional);
		}
	}

	protected class Group$12$Consumer extends OptionalGroupConsumer {
		
		protected Group$12$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$13$Consumer);
			acceptor.accept(assignment$14$Consumer);
		}
	}

	protected class Keyword$13$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$13$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$13$Delimiter(), optional);
		}
	}

	protected class Assignment$14$Consumer extends AssignmentConsumer {
		
		protected Assignment$14$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$15$Consumer;
		}
	}

	protected class RuleCall$15$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$15$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(dotsConsumer, "dots", false, true, false, getElement(), optional);
		}
	}

	protected class Group$16$Consumer extends OptionalGroupConsumer {
		
		protected Group$16$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$17$Consumer);
			acceptor.accept(assignment$18$Consumer);
		}
	}

	protected class Keyword$17$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$17$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$17$Delimiter(), optional);
		}
	}

	protected class Assignment$18$Consumer extends AssignmentConsumer {
		
		protected Assignment$18$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$19$Consumer;
		}
	}

	protected class RuleCall$19$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$19$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(doubleConsumer, "double", false, true, false, getElement(), optional);
		}
	}

	protected class Keyword$20$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$20$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$20$Delimiter(), optional);
		}
	}

	public DatatypeRulesTestLanguageModelConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$5$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$9$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$13$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$17$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$20$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public ModelElements getRule() {
		return rule;
	}
	
	public void setRule(ModelElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		assignment$2$Consumer = new Assignment$2$Consumer(rule.getIdAssignment_0());
		ruleCall$3$Consumer = new RuleCall$3$Consumer(rule.getIdNestedModelIdParserRuleCall_0_0());
		group$4$Consumer = new Group$4$Consumer(rule.getGroup_1());
		keyword$5$Consumer = new Keyword$5$Consumer(rule.getColonKeyword_1_0());
		assignment$6$Consumer = new Assignment$6$Consumer(rule.getValueAssignment_1_1());
		ruleCall$7$Consumer = new RuleCall$7$Consumer(rule.getValueFractionParserRuleCall_1_1_0());
		group$8$Consumer = new Group$8$Consumer(rule.getGroup_2());
		keyword$9$Consumer = new Keyword$9$Consumer(rule.getNumberSignKeyword_2_0());
		assignment$10$Consumer = new Assignment$10$Consumer(rule.getVectorAssignment_2_1());
		ruleCall$11$Consumer = new RuleCall$11$Consumer(rule.getVectorVectorParserRuleCall_2_1_0());
		group$12$Consumer = new Group$12$Consumer(rule.getGroup_3());
		keyword$13$Consumer = new Keyword$13$Consumer(rule.getPlusSignKeyword_3_0());
		assignment$14$Consumer = new Assignment$14$Consumer(rule.getDotsAssignment_3_1());
		ruleCall$15$Consumer = new RuleCall$15$Consumer(rule.getDotsDotsParserRuleCall_3_1_0());
		group$16$Consumer = new Group$16$Consumer(rule.getGroup_4());
		keyword$17$Consumer = new Keyword$17$Consumer(rule.getAsteriskKeyword_4_0());
		assignment$18$Consumer = new Assignment$18$Consumer(rule.getDoubleAssignment_4_1());
		ruleCall$19$Consumer = new RuleCall$19$Consumer(rule.getDoubleDoubleParserRuleCall_4_1_0());
		keyword$20$Consumer = new Keyword$20$Consumer(rule.getSemicolonKeyword_5());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setDotsConsumer(INonTerminalConsumer dotsConsumer) {
		this.dotsConsumer = dotsConsumer;
	}
	
	public void setDoubleConsumer(INonTerminalConsumer doubleConsumer) {
		this.doubleConsumer = doubleConsumer;
	}
	
	public void setFractionConsumer(INonTerminalConsumer fractionConsumer) {
		this.fractionConsumer = fractionConsumer;
	}
	
	public void setNestedModelIdConsumer(INonTerminalConsumer nestedModelIdConsumer) {
		this.nestedModelIdConsumer = nestedModelIdConsumer;
	}
	
	public void setVectorConsumer(INonTerminalConsumer vectorConsumer) {
		this.vectorConsumer = vectorConsumer;
	}
	
	public ICharacterClass getKeyword$5$Delimiter() {
		return keyword$5$Delimiter;
	}
	
	public void setKeyword$5$Delimiter(ICharacterClass characterClass) {
		keyword$5$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$9$Delimiter() {
		return keyword$9$Delimiter;
	}
	
	public void setKeyword$9$Delimiter(ICharacterClass characterClass) {
		keyword$9$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$13$Delimiter() {
		return keyword$13$Delimiter;
	}
	
	public void setKeyword$13$Delimiter(ICharacterClass characterClass) {
		keyword$13$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$17$Delimiter() {
		return keyword$17$Delimiter;
	}
	
	public void setKeyword$17$Delimiter(ICharacterClass characterClass) {
		keyword$17$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$20$Delimiter() {
		return keyword$20$Delimiter;
	}
	
	public void setKeyword$20$Delimiter(ICharacterClass characterClass) {
		keyword$20$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
