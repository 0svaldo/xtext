/*
* generated by Xtext
*/
grammar InternalDatatypeRulesTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.parser.datatyperules.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parser.datatyperules.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.parser.datatyperules.services.DatatypeRulesTestLanguageGrammarAccess;

}

@parser::members {

 	private DatatypeRulesTestLanguageGrammarAccess grammarAccess;
 	
    public InternalDatatypeRulesTestLanguageParser(TokenStream input, IAstFactory factory, DatatypeRulesTestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "CompositeModel";	
   	}
   	
   	@Override
   	protected DatatypeRulesTestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleCompositeModel
entryRuleCompositeModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCompositeModelRule(), currentNode); }
	 iv_ruleCompositeModel=ruleCompositeModel 
	 { $current=$iv_ruleCompositeModel.current; } 
	 EOF 
;

// Rule CompositeModel
ruleCompositeModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositeModelAccess().getModelModelParserRuleCall_0(), currentNode); 
	    }
		lv_model_0_0=ruleModel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositeModelRule());
	        }
       		add(
       			$current, 
       			"model",
        		lv_model_0_0, 
        		"Model", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getIdNestedModelIdParserRuleCall_0_0(), currentNode); 
	    }
		lv_id_0_0=ruleNestedModelId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"NestedModelId", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=':' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getModelAccess().getColonKeyword_1_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getValueFractionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_value_2_0=ruleFraction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Fraction", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_3='#' 
    {
    	createLeafNode(otherlv_3, grammarAccess.getModelAccess().getNumberSignKeyword_2_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getVectorVectorParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_vector_4_0=ruleVector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"vector",
        		lv_vector_4_0, 
        		"Vector", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='+' 
    {
    	createLeafNode(otherlv_5, grammarAccess.getModelAccess().getPlusSignKeyword_3_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getDotsDotsParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_dots_6_0=ruleDots		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"dots",
        		lv_dots_6_0, 
        		"Dots", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_7='*' 
    {
    	createLeafNode(otherlv_7, grammarAccess.getModelAccess().getAsteriskKeyword_4_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getDoubleDoubleParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_double_8_0=ruleDouble		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"double",
        		lv_double_8_0, 
        		"Double", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_9=';' 
    {
    	createLeafNode(otherlv_9, grammarAccess.getModelAccess().getSemicolonKeyword_5(), null);
    }
)
;





// Entry rule entryRuleModelId
entryRuleModelId returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelIdRule(), currentNode); } 
	 iv_ruleModelId=ruleModelId 
	 { $current=$iv_ruleModelId.current.getText(); }  
	 EOF 
;

// Rule ModelId
ruleModelId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(this_ID_0, grammarAccess.getModelIdAccess().getIDTerminalRuleCall_0(), null); 
    }

	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getModelIdAccess().getFullStopKeyword_1(), null); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    createLeafNode(this_ID_2, grammarAccess.getModelIdAccess().getIDTerminalRuleCall_2(), null); 
    }
)
    ;





// Entry rule entryRuleNestedModelId
entryRuleNestedModelId returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNestedModelIdRule(), currentNode); } 
	 iv_ruleNestedModelId=ruleNestedModelId 
	 { $current=$iv_ruleNestedModelId.current.getText(); }  
	 EOF 
;

// Rule NestedModelId
ruleNestedModelId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNestedModelIdAccess().getModelIdParserRuleCall_0(), currentNode); 
    }
    this_ModelId_0=ruleModelId    {
		$current.merge(this_ModelId_0);
    }

    { 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getNestedModelIdAccess().getFullStopKeyword_1(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getNestedModelIdAccess().getModelIdParserRuleCall_2(), currentNode); 
    }
    this_ModelId_2=ruleModelId    {
		$current.merge(this_ModelId_2);
    }

    { 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleFraction
entryRuleFraction returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFractionRule(), currentNode); } 
	 iv_ruleFraction=ruleFraction 
	 { $current=$iv_ruleFraction.current.getText(); }  
	 EOF 
;

// Rule Fraction
ruleFraction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(this_INT_0, grammarAccess.getFractionAccess().getINTTerminalRuleCall_0(), null); 
    }
(
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getFractionAccess().getSolidusKeyword_1_0(), null); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    createLeafNode(this_INT_2, grammarAccess.getFractionAccess().getINTTerminalRuleCall_1_1(), null); 
    }
)?)
    ;





// Entry rule entryRuleVector
entryRuleVector returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVectorRule(), currentNode); } 
	 iv_ruleVector=ruleVector 
	 { $current=$iv_ruleVector.current.getText(); }  
	 EOF 
;

// Rule Vector
ruleVector returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='(' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getVectorAccess().getLeftParenthesisKeyword_0(), null); 
    }
    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    createLeafNode(this_INT_1, grammarAccess.getVectorAccess().getINTTerminalRuleCall_1(), null); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    createLeafNode(this_INT_2, grammarAccess.getVectorAccess().getINTTerminalRuleCall_2(), null); 
    }

	kw=')' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getVectorAccess().getRightParenthesisKeyword_3(), null); 
    }
)
    ;





// Entry rule entryRuleDots
entryRuleDots returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDotsRule(), currentNode); } 
	 iv_ruleDots=ruleDots 
	 { $current=$iv_ruleDots.current.getText(); }  
	 EOF 
;

// Rule Dots
ruleDots returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
((
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getDotsAccess().getFullStopKeyword_0_0(), null); 
    }

	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getDotsAccess().getFullStopKeyword_0_1(), null); 
    }
)
    |
	kw='..' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getDotsAccess().getFullStopFullStopKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleDouble
entryRuleDouble returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDoubleRule(), currentNode); } 
	 iv_ruleDouble=ruleDouble 
	 { $current=$iv_ruleDouble.current.getText(); }  
	 EOF 
;

// Rule Double
ruleDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
((
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getDoubleAccess().getHyphenMinusKeyword_0(), null); 
    }
)?(    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    createLeafNode(this_INT_1, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_1(), null); 
    }
)?
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getDoubleAccess().getFullStopKeyword_2(), null); 
    }
    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    createLeafNode(this_INT_3, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_3(), null); 
    }
(
	kw='E' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getDoubleAccess().getEKeyword_4_0(), null); 
    }
(
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getDoubleAccess().getHyphenMinusKeyword_4_1(), null); 
    }
)?    this_INT_6=RULE_INT    {
		$current.merge(this_INT_6);
    }

    { 
    createLeafNode(this_INT_6, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_4_2(), null); 
    }
)?)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


