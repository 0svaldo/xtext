/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.datatyperules.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.parser.datatyperules.services.DatatypeRulesTestLanguageGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 
import org.eclipse.xtext.parser.datatyperules.parser.packrat.consumers.DatatypeRulesTestLanguageCompositeModelConsumer;
import org.eclipse.xtext.parser.datatyperules.parser.packrat.consumers.DatatypeRulesTestLanguageModelConsumer;
import org.eclipse.xtext.parser.datatyperules.parser.packrat.consumers.DatatypeRulesTestLanguageModelIdConsumer;
import org.eclipse.xtext.parser.datatyperules.parser.packrat.consumers.DatatypeRulesTestLanguageNestedModelIdConsumer;
import org.eclipse.xtext.parser.datatyperules.parser.packrat.consumers.DatatypeRulesTestLanguageFractionConsumer;
import org.eclipse.xtext.parser.datatyperules.parser.packrat.consumers.DatatypeRulesTestLanguageVectorConsumer;
import org.eclipse.xtext.parser.datatyperules.parser.packrat.consumers.DatatypeRulesTestLanguageDotsConsumer;
import org.eclipse.xtext.parser.datatyperules.parser.packrat.consumers.DatatypeRulesTestLanguageDoubleConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class DatatypeRulesTestLanguageParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 
    private DatatypeRulesTestLanguageCompositeModelConsumer compositeModelConsumer;
    private DatatypeRulesTestLanguageModelConsumer modelConsumer;
    private DatatypeRulesTestLanguageModelIdConsumer modelIdConsumer;
    private DatatypeRulesTestLanguageNestedModelIdConsumer nestedModelIdConsumer;
    private DatatypeRulesTestLanguageFractionConsumer fractionConsumer;
    private DatatypeRulesTestLanguageVectorConsumer vectorConsumer;
    private DatatypeRulesTestLanguageDotsConsumer dotsConsumer;
    private DatatypeRulesTestLanguageDoubleConsumer doubleConsumer;

	private DatatypeRulesTestLanguageGrammarAccess grammarAccess;

	public DatatypeRulesTestLanguageParserConfiguration(IInternalParserConfiguration configuration, DatatypeRulesTestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public DatatypeRulesTestLanguageCompositeModelConsumer getRootConsumer() {
		return compositeModelConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		compositeModelConsumer = new DatatypeRulesTestLanguageCompositeModelConsumer(
    		this, null
    	);
		modelConsumer = new DatatypeRulesTestLanguageModelConsumer(
    		this, null
    	);
		modelIdConsumer = new DatatypeRulesTestLanguageModelIdConsumer(
    		this, null
    	);
		nestedModelIdConsumer = new DatatypeRulesTestLanguageNestedModelIdConsumer(
    		this, null
    	);
		fractionConsumer = new DatatypeRulesTestLanguageFractionConsumer(
    		this, null
    	);
		vectorConsumer = new DatatypeRulesTestLanguageVectorConsumer(
    		this, null
    	);
		dotsConsumer = new DatatypeRulesTestLanguageDotsConsumer(
    		this, null
    	);
		doubleConsumer = new DatatypeRulesTestLanguageDoubleConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getCompositeModelConsumer().setRule(grammarAccess.getCompositeModelAccess());
		getModelConsumer().setRule(grammarAccess.getModelAccess());
		getModelIdConsumer().setRule(grammarAccess.getModelIdAccess());
		getNestedModelIdConsumer().setRule(grammarAccess.getNestedModelIdAccess());
		getFractionConsumer().setRule(grammarAccess.getFractionAccess());
		getVectorConsumer().setRule(grammarAccess.getVectorAccess());
		getDotsConsumer().setRule(grammarAccess.getDotsAccess());
		getDoubleConsumer().setRule(grammarAccess.getDoubleAccess());
		getIdConsumer().setRule(grammarAccess.getIDRule());
		getIntConsumer().setRule(grammarAccess.getINTRule());
		getStringConsumer().setRule(grammarAccess.getSTRINGRule());
		getMlCommentConsumer().setRule(grammarAccess.getML_COMMENTRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getAnyOtherConsumer().setRule(grammarAccess.getANY_OTHERRule());


		getCompositeModelConsumer().setModelConsumer(getModelConsumer());

		getModelConsumer().setDotsConsumer(getDotsConsumer());
		getModelConsumer().setDoubleConsumer(getDoubleConsumer());
		getModelConsumer().setFractionConsumer(getFractionConsumer());
		getModelConsumer().setNestedModelIdConsumer(getNestedModelIdConsumer());
		getModelConsumer().setVectorConsumer(getVectorConsumer());

		getModelIdConsumer().setIdConsumer(getIdConsumer());

		getNestedModelIdConsumer().setModelIdConsumer(getModelIdConsumer());

		getFractionConsumer().setIntConsumer(getIntConsumer());

		getVectorConsumer().setIntConsumer(getIntConsumer());

		getDoubleConsumer().setIntConsumer(getIntConsumer());

		getModelConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.keyword$12$Delimiter);
		getModelConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.keyword$12$Delimiter);
		getModelConsumer().setKeyword$13$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.keyword$12$Delimiter);
		getModelConsumer().setKeyword$17$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.keyword$12$Delimiter);
		getModelConsumer().setKeyword$20$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.keyword$12$Delimiter);
		getModelIdConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.keyword$12$Delimiter);
		getModelIdConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.ruleCall$31$Delimiter);
		getModelIdConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.ruleCall$31$Delimiter);
		getNestedModelIdConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.keyword$12$Delimiter);
		getFractionConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.keyword$12$Delimiter);
		getFractionConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.ruleCall$43$Delimiter);
		getFractionConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.ruleCall$43$Delimiter);
		getVectorConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.keyword$12$Delimiter);
		getVectorConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.keyword$12$Delimiter);
		getVectorConsumer().setRuleCall$3$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.ruleCall$43$Delimiter);
		getVectorConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.ruleCall$43$Delimiter);
		getDotsConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.keyword$12$Delimiter);
		getDotsConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.keyword$12$Delimiter);
		getDotsConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.keyword$12$Delimiter);
		getDoubleConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.keyword$12$Delimiter);
		getDoubleConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.keyword$12$Delimiter);
		getDoubleConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.keyword$69$Delimiter);
		getDoubleConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.keyword$12$Delimiter);
		getDoubleConsumer().setRuleCall$3$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.ruleCall$43$Delimiter);
		getDoubleConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.ruleCall$43$Delimiter);
		getDoubleConsumer().setRuleCall$9$Delimiter(org.eclipse.xtext.parser.datatyperules.parser.packrat.DatatypeRulesTestLanguageDelimiters.ruleCall$43$Delimiter);
	}
	
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public DatatypeRulesTestLanguageCompositeModelConsumer getCompositeModelConsumer() {
    	return compositeModelConsumer;
    }

    public DatatypeRulesTestLanguageModelConsumer getModelConsumer() {
    	return modelConsumer;
    }

    public DatatypeRulesTestLanguageModelIdConsumer getModelIdConsumer() {
    	return modelIdConsumer;
    }

    public DatatypeRulesTestLanguageNestedModelIdConsumer getNestedModelIdConsumer() {
    	return nestedModelIdConsumer;
    }

    public DatatypeRulesTestLanguageFractionConsumer getFractionConsumer() {
    	return fractionConsumer;
    }

    public DatatypeRulesTestLanguageVectorConsumer getVectorConsumer() {
    	return vectorConsumer;
    }

    public DatatypeRulesTestLanguageDotsConsumer getDotsConsumer() {
    	return dotsConsumer;
    }

    public DatatypeRulesTestLanguageDoubleConsumer getDoubleConsumer() {
    	return doubleConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
