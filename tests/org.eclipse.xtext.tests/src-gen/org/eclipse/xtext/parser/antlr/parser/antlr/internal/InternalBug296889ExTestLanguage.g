/*
* generated by Xtext
*/
parser grammar InternalBug296889ExTestLanguage;

options {
	tokenVocab=InternalBug296889ExTestLanguage;
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@header {
package org.eclipse.xtext.parser.antlr.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.parser.antlr.services.Bug296889ExTestLanguageGrammarAccess;

}

@members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 

 	private Bug296889ExTestLanguageGrammarAccess grammarAccess;
 	
    public InternalBug296889ExTestLanguageParser(TokenStream input, IAstFactory factory, Bug296889ExTestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/xtext/parser/antlr/parser/antlr/internal/InternalBug296889ExTestLanguage.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	} 
   	   	
   	@Override
   	protected Bug296889ExTestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getModelAccess().getModelKeyword_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getExpressionsExpressionParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_expressions_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_1_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
    |(
	KEYWORD_3 
    {
        createLeafNode(grammarAccess.getModelAccess().getDataTypeKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getValuesDataTypeExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_values_3_0=ruleDataTypeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"values",
	        		lv_values_3_0, 
	        		"DataTypeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getPostopParserRuleCall_0(), currentNode); 
    }
    this_Postop_0=rulePostop
    {
        $current = $this_Postop_0.current;
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getPreopParserRuleCall_1(), currentNode); 
    }
    this_Preop_1=rulePreop
    {
        $current = $this_Preop_1.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulePreop
entryRulePreop returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getPreopRule(), currentNode); }
	 iv_rulePreop=rulePreop 
	 { $current=$iv_rulePreop.current; } 
	 EOF 
;

// Rule Preop
rulePreop returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPreopAccess().getPreopAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPreopAccess().getPreopAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_functionName_1_0=
	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getPreopAccess().getFunctionNameHyphenMinusHyphenMinusKeyword_1_0(), "functionName"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreopRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "functionName", lv_functionName_1_0, "--", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPreopAccess().getExprVariableParserRuleCall_2_0(), currentNode); 
	    }
		lv_expr_2_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreopRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_2_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePostop
entryRulePostop returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getPostopRule(), currentNode); }
	 iv_rulePostop=rulePostop 
	 { $current=$iv_rulePostop.current; } 
	 EOF 
;

// Rule Postop
rulePostop returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPostopAccess().getVariableParserRuleCall_0(), currentNode); 
    }
    this_Variable_0=ruleVariable
    {
        $current = $this_Variable_0.current;
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPostopAccess().getPostopExprAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "expr", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPostopAccess().getPostopExprAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_functionName_2_0=
	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getPostopAccess().getFunctionNameHyphenMinusHyphenMinusKeyword_1_1_0(), "functionName"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostopRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "functionName", lv_functionName_2_0, "--", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableRule(), currentNode); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getVariableAccess().getVariableAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getVariableAccess().getVariableAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleDataTypeExpression
entryRuleDataTypeExpression returns [String current=null] 
:
	{ currentNode = createCompositeNode(grammarAccess.getDataTypeExpressionRule(), currentNode); } 
	 iv_ruleDataTypeExpression=ruleDataTypeExpression 
	 { $current=$iv_ruleDataTypeExpression.current.getText(); }  
	 EOF 
;

// Rule DataTypeExpression
ruleDataTypeExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getDataTypeExpressionAccess().getDataTypePostopParserRuleCall_0(), currentNode); 
    }
    this_DataTypePostop_0=ruleDataTypePostop    {
		$current.merge(this_DataTypePostop_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDataTypeExpressionAccess().getDataTypePreopParserRuleCall_1(), currentNode); 
    }
    this_DataTypePreop_1=ruleDataTypePreop    {
		$current.merge(this_DataTypePreop_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleDataTypePreop
entryRuleDataTypePreop returns [String current=null] 
:
	{ currentNode = createCompositeNode(grammarAccess.getDataTypePreopRule(), currentNode); } 
	 iv_ruleDataTypePreop=ruleDataTypePreop 
	 { $current=$iv_ruleDataTypePreop.current.getText(); }  
	 EOF 
;

// Rule DataTypePreop
ruleDataTypePreop returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw=KEYWORD_1 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataTypePreopAccess().getHyphenMinusHyphenMinusKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getDataTypePreopAccess().getDataTypeVariableParserRuleCall_1(), currentNode); 
    }
    this_DataTypeVariable_1=ruleDataTypeVariable    {
		$current.merge(this_DataTypeVariable_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleDataTypePostop
entryRuleDataTypePostop returns [String current=null] 
:
	{ currentNode = createCompositeNode(grammarAccess.getDataTypePostopRule(), currentNode); } 
	 iv_ruleDataTypePostop=ruleDataTypePostop 
	 { $current=$iv_ruleDataTypePostop.current.getText(); }  
	 EOF 
;

// Rule DataTypePostop
ruleDataTypePostop returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getDataTypePostopAccess().getDataTypeVariableParserRuleCall_0(), currentNode); 
    }
    this_DataTypeVariable_0=ruleDataTypeVariable    {
		$current.merge(this_DataTypeVariable_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
(
	kw=KEYWORD_1 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataTypePostopAccess().getHyphenMinusHyphenMinusKeyword_1(), null); 
    }
)?)
    ;





// Entry rule entryRuleDataTypeVariable
entryRuleDataTypeVariable returns [String current=null] 
:
	{ currentNode = createCompositeNode(grammarAccess.getDataTypeVariableRule(), currentNode); } 
	 iv_ruleDataTypeVariable=ruleDataTypeVariable 
	 { $current=$iv_ruleDataTypeVariable.current.getText(); }  
	 EOF 
;

// Rule DataTypeVariable
ruleDataTypeVariable returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getDataTypeVariableAccess().getIDTerminalRuleCall(), null); 
    }

    ;





