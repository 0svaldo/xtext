/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.antlr.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.parser.antlr.services.Bug289524ExTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class Bug289524ExTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private Bug289524ExTestLanguageGrammarAccess grammarAccess;
	
	@Override	
	public Bug289524ExTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Group(this, this, 0, inst);
			case 1: return new ModelElement_Group(this, this, 1, inst);
			case 2: return new Contained_Group(this, this, 2, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 *   {Model} "Model" refs+=ModelElement*;
 *
 **/

// {Model} "Model" refs+=ModelElement*
protected class Model_Group extends GroupToken {
	
	public Model_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_RefsAssignment_2(parent, this, 0, inst);
			case 1: return new Model_ModelKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getModelAccess().getModelAction_0().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// {Model}
protected class Model_ModelAction_0 extends ActionToken  {

	public Model_ModelAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getModelAccess().getModelAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "Model"
protected class Model_ModelKeyword_1 extends KeywordToken  {
	
	public Model_ModelKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getModelKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_ModelAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// refs+=ModelElement*
protected class Model_RefsAssignment_2 extends AssignmentToken  {
	
	public Model_RefsAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getRefsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModelElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("refs",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("refs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModelElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getRefsModelElementParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_RefsAssignment_2(parent, next, actIndex, consumed);
			case 1: return new Model_ModelKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Model ****************/


/************ begin Rule ModelElement ****************
 *
 * ModelElement:
 *   {ModelElement} (containments+=Contained|"reference" refs+=[Contained] ("$"
 *   refs+=[Contained])*)+;
 *
 **/

// {ModelElement} (containments+=Contained|"reference" refs+=[Contained] ("$" refs
// +=[Contained])*)+
protected class ModelElement_Group extends GroupToken {
	
	public ModelElement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelElementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModelElement_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getModelElementAccess().getModelElementAction_0().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// {ModelElement}
protected class ModelElement_ModelElementAction_0 extends ActionToken  {

	public ModelElement_ModelElementAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getModelElementAccess().getModelElementAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isConsumed()) return null;
		return current;
	}
}

// (containments+=Contained|"reference" refs+=[Contained] ("$" refs+=[Contained])*)
// +
protected class ModelElement_Alternatives_1 extends AlternativesToken {

	public ModelElement_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getModelElementAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModelElement_ContainmentsAssignment_1_0(parent, this, 0, inst);
			case 1: return new ModelElement_Group_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// containments+=Contained
protected class ModelElement_ContainmentsAssignment_1_0 extends AssignmentToken  {
	
	public ModelElement_ContainmentsAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelElementAccess().getContainmentsAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Contained_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("containments",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("containments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContainedRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelElementAccess().getContainmentsContainedParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ModelElement_Alternatives_1(parent, next, actIndex, consumed);
			case 1: return new ModelElement_ModelElementAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "reference" refs+=[Contained] ("$" refs+=[Contained])*
protected class ModelElement_Group_1_1 extends GroupToken {
	
	public ModelElement_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelElementAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModelElement_Group_1_1_2(parent, this, 0, inst);
			case 1: return new ModelElement_RefsAssignment_1_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// "reference"
protected class ModelElement_ReferenceKeyword_1_1_0 extends KeywordToken  {
	
	public ModelElement_ReferenceKeyword_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelElementAccess().getReferenceKeyword_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModelElement_Alternatives_1(parent, this, 0, inst);
			case 1: return new ModelElement_ModelElementAction_0(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// refs+=[Contained]
protected class ModelElement_RefsAssignment_1_1_1 extends AssignmentToken  {
	
	public ModelElement_RefsAssignment_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelElementAccess().getRefsAssignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModelElement_ReferenceKeyword_1_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("refs",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("refs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModelElementAccess().getRefsContainedCrossReference_1_1_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getModelElementAccess().getRefsContainedCrossReference_1_1_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("$" refs+=[Contained])*
protected class ModelElement_Group_1_1_2 extends GroupToken {
	
	public ModelElement_Group_1_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelElementAccess().getGroup_1_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModelElement_RefsAssignment_1_1_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// "$"
protected class ModelElement_DollarSignKeyword_1_1_2_0 extends KeywordToken  {
	
	public ModelElement_DollarSignKeyword_1_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelElementAccess().getDollarSignKeyword_1_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModelElement_Group_1_1_2(parent, this, 0, inst);
			case 1: return new ModelElement_RefsAssignment_1_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// refs+=[Contained]
protected class ModelElement_RefsAssignment_1_1_2_1 extends AssignmentToken  {
	
	public ModelElement_RefsAssignment_1_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelElementAccess().getRefsAssignment_1_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ModelElement_DollarSignKeyword_1_1_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("refs",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("refs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModelElementAccess().getRefsContainedCrossReference_1_1_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getModelElementAccess().getRefsContainedCrossReference_1_1_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}





/************ end Rule ModelElement ****************/


/************ begin Rule Contained ****************
 *
 * Contained:
 *   "containment" name=ID;
 *
 **/

// "containment" name=ID
protected class Contained_Group extends GroupToken {
	
	public Contained_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getContainedAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Contained_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getContainedRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// "containment"
protected class Contained_ContainmentKeyword_0 extends KeywordToken  {
	
	public Contained_ContainmentKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getContainedAccess().getContainmentKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

}

// name=ID
protected class Contained_NameAssignment_1 extends AssignmentToken  {
	
	public Contained_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getContainedAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Contained_ContainmentKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getContainedAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getContainedAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Contained ****************/

}
