/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.antlr.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;

import org.eclipse.xtext.parser.antlr.services.Bug296889TestLanguageGrammarAccess.PostopElements;

@SuppressWarnings("all")
public final class Bug296889TestLanguagePostopConsumer extends NonTerminalConsumer {

	private PostopElements rule;	

	private INonTerminalConsumer variableConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer ruleCall$2$Consumer;

	private IElementConsumer group$3$Consumer;

	private IElementConsumer action$4$Consumer;

	private IElementConsumer assignment$6$Consumer;

	private IElementConsumer keyword$7$Consumer;

	private ICharacterClass keyword$7$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(ruleCall$2$Consumer);
			acceptor.accept(group$3$Consumer);
		}
	}

	protected class RuleCall$2$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$2$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(variableConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class Group$3$Consumer extends OptionalGroupConsumer {
		
		protected Group$3$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(action$4$Consumer);
			acceptor.accept(assignment$6$Consumer);
		}
	}

	protected class Action$4$Consumer extends ElementConsumer<Action> {
		
		protected Action$4$Consumer(final Action action) {
			super(action);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			consumeAction(getElement(), false);
			return SUCCESS;
		}
	}

	protected class Assignment$6$Consumer extends AssignmentConsumer {
		
		protected Assignment$6$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$7$Consumer;
		}
	}

	protected class Keyword$7$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$7$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "functionName", false, false, getKeyword$7$Delimiter(), optional);
		}
	}

	public Bug296889TestLanguagePostopConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$7$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public PostopElements getRule() {
		return rule;
	}
	
	public void setRule(PostopElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		ruleCall$2$Consumer = new RuleCall$2$Consumer(rule.getVariableParserRuleCall_0());
		group$3$Consumer = new Group$3$Consumer(rule.getGroup_1());
		action$4$Consumer = new Action$4$Consumer(rule.getPostopExprAction_1_0());
		assignment$6$Consumer = new Assignment$6$Consumer(rule.getFunctionNameAssignment_1_1());
		keyword$7$Consumer = new Keyword$7$Consumer(rule.getFunctionNameHyphenMinusHyphenMinusKeyword_1_1_0());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setVariableConsumer(INonTerminalConsumer variableConsumer) {
		this.variableConsumer = variableConsumer;
	}
	
	public ICharacterClass getKeyword$7$Delimiter() {
		return keyword$7$Delimiter;
	}
	
	public void setKeyword$7$Delimiter(ICharacterClass characterClass) {
		keyword$7$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
