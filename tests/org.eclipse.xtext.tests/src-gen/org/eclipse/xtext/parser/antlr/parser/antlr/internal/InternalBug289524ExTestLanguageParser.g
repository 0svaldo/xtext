/*
* generated by Xtext
*/
parser grammar InternalBug289524ExTestLanguageParser;

options {
	tokenVocab=InternalBug289524ExTestLanguageLexer;
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@header {
package org.eclipse.xtext.parser.antlr.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.parser.antlr.services.Bug289524ExTestLanguageGrammarAccess;

}

@members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 

 	private Bug289524ExTestLanguageGrammarAccess grammarAccess;
 	
    public InternalBug289524ExTestLanguageParser(TokenStream input, IAstFactory factory, Bug289524ExTestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	} 
   	   	
   	@Override
   	protected Bug289524ExTestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelAccess().getModelAction_0(),
            $current);
    }
)
	otherlv_1=KEYWORD_2 
    {
    	createLeafNode(otherlv_1, grammarAccess.getModelAccess().getModelKeyword_1(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getRefsModelElementParserRuleCall_2_0(), currentNode); 
	    }
		lv_refs_2_0=ruleModelElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"refs",
        		lv_refs_2_0, 
        		"ModelElement", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleModelElement
entryRuleModelElement returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelElementRule(), currentNode); }
	 iv_ruleModelElement=ruleModelElement 
	 { $current=$iv_ruleModelElement.current; } 
	 EOF 
;

// Rule ModelElement
ruleModelElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelElementAccess().getModelElementAction_0(),
            $current);
    }
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelElementAccess().getContainmentsContainedParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_containments_1_0=ruleContained		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelElementRule());
	        }
       		add(
       			$current, 
       			"containments",
        		lv_containments_1_0, 
        		"Contained", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
	otherlv_2=KEYWORD_3 
    {
    	createLeafNode(otherlv_2, grammarAccess.getModelElementAccess().getReferenceKeyword_1_1_0(), null);
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getModelElementRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		createLeafNode(otherlv_3, grammarAccess.getModelElementAccess().getRefsContainedCrossReference_1_1_1_0(), "refs"); 
	}

)
)(
	otherlv_4=KEYWORD_1 
    {
    	createLeafNode(otherlv_4, grammarAccess.getModelElementAccess().getDollarSignKeyword_1_1_2_0(), null);
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getModelElementRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		createLeafNode(otherlv_5, grammarAccess.getModelElementAccess().getRefsContainedCrossReference_1_1_2_1_0(), "refs"); 
	}

)
))*))+)
;





// Entry rule entryRuleContained
entryRuleContained returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getContainedRule(), currentNode); }
	 iv_ruleContained=ruleContained 
	 { $current=$iv_ruleContained.current; } 
	 EOF 
;

// Rule Contained
ruleContained returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	otherlv_0=KEYWORD_4 
    {
    	createLeafNode(otherlv_0, grammarAccess.getContainedAccess().getContainmentKeyword_0(), null);
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(lv_name_1_0, grammarAccess.getContainedAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainedRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID", 
        		lastConsumedNode);
	    }

)
))
;





