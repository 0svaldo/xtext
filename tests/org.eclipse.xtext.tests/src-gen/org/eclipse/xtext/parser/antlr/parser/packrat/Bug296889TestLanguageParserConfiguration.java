/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.antlr.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.parser.antlr.services.Bug296889TestLanguageGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 
import org.eclipse.xtext.parser.antlr.parser.packrat.consumers.Bug296889TestLanguageModelConsumer;
import org.eclipse.xtext.parser.antlr.parser.packrat.consumers.Bug296889TestLanguageExpressionConsumer;
import org.eclipse.xtext.parser.antlr.parser.packrat.consumers.Bug296889TestLanguagePreopConsumer;
import org.eclipse.xtext.parser.antlr.parser.packrat.consumers.Bug296889TestLanguagePostopConsumer;
import org.eclipse.xtext.parser.antlr.parser.packrat.consumers.Bug296889TestLanguageVariableConsumer;
import org.eclipse.xtext.parser.antlr.parser.packrat.consumers.Bug296889TestLanguageDataTypeExpressionConsumer;
import org.eclipse.xtext.parser.antlr.parser.packrat.consumers.Bug296889TestLanguageDataTypePreopConsumer;
import org.eclipse.xtext.parser.antlr.parser.packrat.consumers.Bug296889TestLanguageDataTypePostopConsumer;
import org.eclipse.xtext.parser.antlr.parser.packrat.consumers.Bug296889TestLanguageDataTypeVariableConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class Bug296889TestLanguageParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 
    private Bug296889TestLanguageModelConsumer modelConsumer;
    private Bug296889TestLanguageExpressionConsumer expressionConsumer;
    private Bug296889TestLanguagePreopConsumer preopConsumer;
    private Bug296889TestLanguagePostopConsumer postopConsumer;
    private Bug296889TestLanguageVariableConsumer variableConsumer;
    private Bug296889TestLanguageDataTypeExpressionConsumer dataTypeExpressionConsumer;
    private Bug296889TestLanguageDataTypePreopConsumer dataTypePreopConsumer;
    private Bug296889TestLanguageDataTypePostopConsumer dataTypePostopConsumer;
    private Bug296889TestLanguageDataTypeVariableConsumer dataTypeVariableConsumer;

	private Bug296889TestLanguageGrammarAccess grammarAccess;

	public Bug296889TestLanguageParserConfiguration(IInternalParserConfiguration configuration, Bug296889TestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public Bug296889TestLanguageModelConsumer getRootConsumer() {
		return modelConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		modelConsumer = new Bug296889TestLanguageModelConsumer(
    		this, null
    	);
		expressionConsumer = new Bug296889TestLanguageExpressionConsumer(
    		this, null
    	);
		preopConsumer = new Bug296889TestLanguagePreopConsumer(
    		this, null
    	);
		postopConsumer = new Bug296889TestLanguagePostopConsumer(
    		this, null
    	);
		variableConsumer = new Bug296889TestLanguageVariableConsumer(
    		this, null
    	);
		dataTypeExpressionConsumer = new Bug296889TestLanguageDataTypeExpressionConsumer(
    		this, null
    	);
		dataTypePreopConsumer = new Bug296889TestLanguageDataTypePreopConsumer(
    		this, null
    	);
		dataTypePostopConsumer = new Bug296889TestLanguageDataTypePostopConsumer(
    		this, null
    	);
		dataTypeVariableConsumer = new Bug296889TestLanguageDataTypeVariableConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getModelConsumer().setRule(grammarAccess.getModelAccess());
		getExpressionConsumer().setRule(grammarAccess.getExpressionAccess());
		getPreopConsumer().setRule(grammarAccess.getPreopAccess());
		getPostopConsumer().setRule(grammarAccess.getPostopAccess());
		getVariableConsumer().setRule(grammarAccess.getVariableAccess());
		getDataTypeExpressionConsumer().setRule(grammarAccess.getDataTypeExpressionAccess());
		getDataTypePreopConsumer().setRule(grammarAccess.getDataTypePreopAccess());
		getDataTypePostopConsumer().setRule(grammarAccess.getDataTypePostopAccess());
		getDataTypeVariableConsumer().setRule(grammarAccess.getDataTypeVariableAccess());
		getIdConsumer().setRule(grammarAccess.getIDRule());
		getIntConsumer().setRule(grammarAccess.getINTRule());
		getStringConsumer().setRule(grammarAccess.getSTRINGRule());
		getMlCommentConsumer().setRule(grammarAccess.getML_COMMENTRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getAnyOtherConsumer().setRule(grammarAccess.getANY_OTHERRule());


		getModelConsumer().setDataTypeExpressionConsumer(getDataTypeExpressionConsumer());
		getModelConsumer().setExpressionConsumer(getExpressionConsumer());

		getExpressionConsumer().setPostopConsumer(getPostopConsumer());
		getExpressionConsumer().setPreopConsumer(getPreopConsumer());

		getPreopConsumer().setVariableConsumer(getVariableConsumer());

		getPostopConsumer().setVariableConsumer(getVariableConsumer());

		getVariableConsumer().setIdConsumer(getIdConsumer());

		getDataTypeExpressionConsumer().setDataTypePostopConsumer(getDataTypePostopConsumer());
		getDataTypeExpressionConsumer().setDataTypePreopConsumer(getDataTypePreopConsumer());

		getDataTypePreopConsumer().setDataTypeVariableConsumer(getDataTypeVariableConsumer());

		getDataTypePostopConsumer().setDataTypeVariableConsumer(getDataTypeVariableConsumer());

		getDataTypeVariableConsumer().setIdConsumer(getIdConsumer());

		getModelConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.parser.antlr.parser.packrat.Bug296889TestLanguageDelimiters.keyword$5$Delimiter);
		getModelConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.antlr.parser.packrat.Bug296889TestLanguageDelimiters.keyword$5$Delimiter);
		getPreopConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.parser.antlr.parser.packrat.Bug296889TestLanguageDelimiters.keyword$23$Delimiter);
		getPostopConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.antlr.parser.packrat.Bug296889TestLanguageDelimiters.keyword$23$Delimiter);
		getVariableConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.parser.antlr.parser.packrat.Bug296889TestLanguageDelimiters.ruleCall$41$Delimiter);
		getDataTypePreopConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parser.antlr.parser.packrat.Bug296889TestLanguageDelimiters.keyword$23$Delimiter);
		getDataTypePostopConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.parser.antlr.parser.packrat.Bug296889TestLanguageDelimiters.keyword$23$Delimiter);
		getDataTypeVariableConsumer().setRuleCall$1$Delimiter(org.eclipse.xtext.parser.antlr.parser.packrat.Bug296889TestLanguageDelimiters.ruleCall$41$Delimiter);
	}
	
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public Bug296889TestLanguageModelConsumer getModelConsumer() {
    	return modelConsumer;
    }

    public Bug296889TestLanguageExpressionConsumer getExpressionConsumer() {
    	return expressionConsumer;
    }

    public Bug296889TestLanguagePreopConsumer getPreopConsumer() {
    	return preopConsumer;
    }

    public Bug296889TestLanguagePostopConsumer getPostopConsumer() {
    	return postopConsumer;
    }

    public Bug296889TestLanguageVariableConsumer getVariableConsumer() {
    	return variableConsumer;
    }

    public Bug296889TestLanguageDataTypeExpressionConsumer getDataTypeExpressionConsumer() {
    	return dataTypeExpressionConsumer;
    }

    public Bug296889TestLanguageDataTypePreopConsumer getDataTypePreopConsumer() {
    	return dataTypePreopConsumer;
    }

    public Bug296889TestLanguageDataTypePostopConsumer getDataTypePostopConsumer() {
    	return dataTypePostopConsumer;
    }

    public Bug296889TestLanguageDataTypeVariableConsumer getDataTypeVariableConsumer() {
    	return dataTypeVariableConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
