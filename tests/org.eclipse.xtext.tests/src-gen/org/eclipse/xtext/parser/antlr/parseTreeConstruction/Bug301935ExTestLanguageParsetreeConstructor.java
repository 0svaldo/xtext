/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.antlr.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.parser.antlr.services.Bug301935ExTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class Bug301935ExTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private Bug301935ExTestLanguageGrammarAccess grammarAccess;
	
	@Override	
	public Bug301935ExTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DelegateModel_ModelParserRuleCall(this, this, 0, inst);
			case 1: return new Model_Group(this, this, 1, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule DelegateModel ****************
 *
 * DelegateModel returns Model:
 *   Model;
 *
 **/

// Model
protected class DelegateModel_ModelParserRuleCall extends RuleCallToken {
	
	public DelegateModel_ModelParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDelegateModelAccess().getModelParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getModelRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Model_Group.class, current)) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule DelegateModel ****************/


/************ begin Rule Model ****************
 *
 * Model:
 *   name=ID WS value=ID NL value2=ID WS;
 *
 **/

// name=ID WS value=ID NL value2=ID WS
protected class Model_Group extends GroupToken {
	
	public Model_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_WSTerminalRuleCall_5(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getModelRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// name=ID
protected class Model_NameAssignment_0 extends AssignmentToken  {
	
	public Model_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// WS
protected class Model_WSTerminalRuleCall_1 extends UnassignedTextToken {

	public Model_WSTerminalRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelAccess().getWSTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// value=ID
protected class Model_ValueAssignment_2 extends AssignmentToken  {
	
	public Model_ValueAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getValueAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_WSTerminalRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getValueIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// NL
protected class Model_NLParserRuleCall_3 extends UnassignedTextToken {

	public Model_NLParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelAccess().getNLParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_ValueAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// value2=ID
protected class Model_Value2Assignment_4 extends AssignmentToken  {
	
	public Model_Value2Assignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getValue2Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_NLParserRuleCall_3(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value2");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getValue2IDTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// WS
protected class Model_WSTerminalRuleCall_5 extends UnassignedTextToken {

	public Model_WSTerminalRuleCall_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelAccess().getWSTerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Value2Assignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Model ****************/


}
