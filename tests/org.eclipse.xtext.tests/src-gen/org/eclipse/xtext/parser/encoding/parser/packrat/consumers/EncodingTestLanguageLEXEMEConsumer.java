/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.encoding.parser.packrat.consumers;

import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.AbstractRuleAwareTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.ConsumeResult;


public final class EncodingTestLanguageLEXEMEConsumer extends AbstractRuleAwareTerminalConsumer {

	public EncodingTestLanguageLEXEMEConsumer(ITerminalConsumerConfiguration configuration) {
		super(configuration);
	}
	
	@Override
	protected int doConsume() {
		return consumeAlternatives$1() ? ConsumeResult.SUCCESS : ConsumeResult.EMPTY_MATCH;
	}

	protected boolean consumeAlternatives$1() {
		while(doConsumeAlternatives$1()) {}
		return true;
	}

	protected boolean doConsumeAlternatives$1() {
		if (consumeCharacterRange$2())
			return true;
		if (consumeCharacterRange$5())
			return true;
		if (consumeCharacterRange$8())
			return true;
		if (consumeKeyword$11())
			return true;
		if (consumeKeyword$12())
			return true;
		if (consumeKeyword$13())
			return true;
		if (consumeKeyword$14())
			return true;
		if (consumeKeyword$15())
			return true;
		if (consumeKeyword$16())
			return true;
		if (consumeKeyword$17())
			return true;
		return false;
	}

	protected boolean consumeCharacterRange$2() {
		return readCharBetween('a', 'z');
	}

	protected boolean consumeCharacterRange$5() {
		return readCharBetween('A', 'Z');
	}

	protected boolean consumeCharacterRange$8() {
		return readCharBetween('0', '9');
	}

	protected boolean consumeKeyword$11() {
		return readChar('\u00E4');
	}

	protected boolean consumeKeyword$12() {
		return readChar('\u00F6');
	}

	protected boolean consumeKeyword$13() {
		return readChar('\u00FC');
	}

	protected boolean consumeKeyword$14() {
		return readChar('\u00DF');
	}

	protected boolean consumeKeyword$15() {
		return readChar('\u00C4');
	}

	protected boolean consumeKeyword$16() {
		return readChar('\u00D6');
	}

	protected boolean consumeKeyword$17() {
		return readChar('\u00DC');
	}
	
}
