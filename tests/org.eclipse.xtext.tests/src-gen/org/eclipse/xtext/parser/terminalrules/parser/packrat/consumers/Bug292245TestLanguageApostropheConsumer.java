/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.parser.terminalrules.services.Bug292245TestLanguageGrammarAccess.ApostropheElements;

@SuppressWarnings("all")
public final class Bug292245TestLanguageApostropheConsumer extends NonTerminalConsumer {

	private ApostropheElements rule;	

	private ITerminalConsumer apostropheCharConsumer;

	private IElementConsumer ruleCall$1$Consumer;

	private ISequenceMatcher ruleCall$1$Delimiter;

	protected class RuleCall$1$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$1$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(apostropheCharConsumer, null, false, false, getElement(), getRuleCall$1$Delimiter(), optional);
		}
	}

	public Bug292245TestLanguageApostropheConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		ruleCall$1$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return ruleCall$1$Consumer.consume();
	}

	public ApostropheElements getRule() {
		return rule;
	}
	
	public void setRule(ApostropheElements rule) {
		this.rule = rule;
		
		ruleCall$1$Consumer = new RuleCall$1$Consumer(rule.getAPOSTROPHE_CHARTerminalRuleCall());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setApostropheCharConsumer(ITerminalConsumer apostropheCharConsumer) {
		this.apostropheCharConsumer = apostropheCharConsumer;
	}
	
	public ISequenceMatcher getRuleCall$1$Delimiter() {
		return ruleCall$1$Delimiter;
	}
	
	public void setRuleCall$1$Delimiter(ISequenceMatcher matcher) {
		ruleCall$1$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
