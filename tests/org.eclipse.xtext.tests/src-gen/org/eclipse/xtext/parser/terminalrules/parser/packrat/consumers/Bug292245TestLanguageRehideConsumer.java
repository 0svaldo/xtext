/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.terminalrules.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Keyword;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;

import org.eclipse.xtext.parser.terminalrules.services.Bug292245TestLanguageGrammarAccess.RehideElements;

public final class Bug292245TestLanguageRehideConsumer extends NonTerminalConsumer {

	private RehideElements rule;	

	private IElementConsumer keyword$1$Consumer;

	private ICharacterClass keyword$1$Delimiter;

	protected class Keyword$1$Consumer extends OptionalElementConsumer<Keyword> {
		
		protected Keyword$1$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$1$Delimiter(), optional);
		}
	}

	public Bug292245TestLanguageRehideConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$1$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return keyword$1$Consumer.consume();
	}

	public RehideElements getRule() {
		return rule;
	}
	
	public void setRule(RehideElements rule) {
		this.rule = rule;
		
		keyword$1$Consumer = new Keyword$1$Consumer(rule.getCircumflexAccentKeyword());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public ICharacterClass getKeyword$1$Delimiter() {
		return keyword$1$Delimiter;
	}
	
	public void setKeyword$1$Delimiter(ICharacterClass characterClass) {
		keyword$1$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
