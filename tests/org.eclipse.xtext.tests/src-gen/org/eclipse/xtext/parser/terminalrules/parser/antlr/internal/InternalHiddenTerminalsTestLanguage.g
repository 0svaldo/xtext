/*
* generated by Xtext
*/
grammar InternalHiddenTerminalsTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.parser.terminalrules.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parser.terminalrules.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.parser.terminalrules.services.HiddenTerminalsTestLanguageGrammarAccess;

}

@parser::members {

 	private HiddenTerminalsTestLanguageGrammarAccess grammarAccess;
 	
    public InternalHiddenTerminalsTestLanguageParser(TokenStream input, IAstFactory factory, HiddenTerminalsTestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected HiddenTerminalsTestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getModelAccess().getWithoutHiddensParserRuleCall_0(), currentNode); 
    }
    this_WithoutHiddens_0=ruleWithoutHiddens
    { 
        $current = $this_WithoutHiddens_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getModelAccess().getWithHiddensParserRuleCall_1(), currentNode); 
    }
    this_WithHiddens_1=ruleWithHiddens
    { 
        $current = $this_WithHiddens_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getModelAccess().getOverridingHiddensParserRuleCall_2(), currentNode); 
    }
    this_OverridingHiddens_2=ruleOverridingHiddens
    { 
        $current = $this_OverridingHiddens_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getModelAccess().getInheritingHiddensParserRuleCall_3(), currentNode); 
    }
    this_InheritingHiddens_3=ruleInheritingHiddens
    { 
        $current = $this_InheritingHiddens_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getModelAccess().getDatatypeHiddensParserRuleCall_4(), currentNode); 
    }
    this_DatatypeHiddens_4=ruleDatatypeHiddens
    { 
        $current = $this_DatatypeHiddens_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleWithoutHiddens
entryRuleWithoutHiddens returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWithoutHiddensRule(), currentNode); }
	 iv_ruleWithoutHiddens=ruleWithoutHiddens 
	 { $current=$iv_ruleWithoutHiddens.current; } 
	 EOF 
;

// Rule WithoutHiddens
ruleWithoutHiddens returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='without' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getWithoutHiddensAccess().getWithoutKeyword_0(), null);
    }
(
(
		lv_spaces_1_0=RULE_WS
		{
			createLeafNode(lv_spaces_1_0, grammarAccess.getWithoutHiddensAccess().getSpacesWSTerminalRuleCall_1_0(), "spaces"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWithoutHiddensRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"spaces",
	        		lv_spaces_1_0, 
	        		"WS", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	otherlv_2='hiddens' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getWithoutHiddensAccess().getHiddensKeyword_2(), null);
    }
(
(
		lv_spaces_3_0=RULE_WS
		{
			createLeafNode(lv_spaces_3_0, grammarAccess.getWithoutHiddensAccess().getSpacesWSTerminalRuleCall_3_0(), "spaces"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWithoutHiddensRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"spaces",
	        		lv_spaces_3_0, 
	        		"WS", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		lv_valid_4_0=	';' 
    {
        createLeafNode(lv_valid_4_0, grammarAccess.getWithoutHiddensAccess().getValidSemicolonKeyword_4_0(), "valid");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWithoutHiddensRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "valid", true, ";", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleWithHiddens
entryRuleWithHiddens returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getWithHiddensRule(), currentNode); }
	 iv_ruleWithHiddens=ruleWithHiddens 
	 { $current=$iv_ruleWithHiddens.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule WithHiddens
ruleWithHiddens returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='with' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getWithHiddensAccess().getWithKeyword_0(), null);
    }
	otherlv_1='hiddens' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getWithHiddensAccess().getHiddensKeyword_1(), null);
    }
(
(
		lv_valid_2_0=	';' 
    {
        createLeafNode(lv_valid_2_0, grammarAccess.getWithHiddensAccess().getValidSemicolonKeyword_2_0(), "valid");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWithHiddensRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "valid", true, ";", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleOverridingHiddens
entryRuleOverridingHiddens returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getOverridingHiddensRule(), currentNode); }
	 iv_ruleOverridingHiddens=ruleOverridingHiddens 
	 { $current=$iv_ruleOverridingHiddens.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule OverridingHiddens
ruleOverridingHiddens returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='overriding' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getOverridingHiddensAccess().getOverridingKeyword_0(), null);
    }
	otherlv_1='hiddens' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getOverridingHiddensAccess().getHiddensKeyword_1(), null);
    }
	otherlv_2='(' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getOverridingHiddensAccess().getLeftParenthesisKeyword_2(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOverridingHiddensAccess().getCalledOverridingHiddensCallParserRuleCall_3_0(), currentNode); 
	    }
		lv_called_3_0=ruleOverridingHiddensCall		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOverridingHiddensRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"called",
	        		lv_called_3_0, 
	        		"OverridingHiddensCall", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_4=')' 
    {
    	createLeafNode(otherlv_4, grammarAccess.getOverridingHiddensAccess().getRightParenthesisKeyword_4(), null);
    }
(
(
		lv_valid_5_0=	';' 
    {
        createLeafNode(lv_valid_5_0, grammarAccess.getOverridingHiddensAccess().getValidSemicolonKeyword_5_0(), "valid");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOverridingHiddensRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "valid", true, ";", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleOverridingHiddensCall
entryRuleOverridingHiddensCall returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getOverridingHiddensCallRule(), currentNode); }
	 iv_ruleOverridingHiddensCall=ruleOverridingHiddensCall 
	 { $current=$iv_ruleOverridingHiddensCall.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule OverridingHiddensCall
ruleOverridingHiddensCall returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='call' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getOverridingHiddensCallAccess().getCallKeyword_0(), null);
    }
(
(
		lv_spaces_1_0=RULE_WS
		{
			createLeafNode(lv_spaces_1_0, grammarAccess.getOverridingHiddensCallAccess().getSpacesWSTerminalRuleCall_1_0(), "spaces"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOverridingHiddensCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"spaces",
	        		lv_spaces_1_0, 
	        		"WS", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		lv_valid_2_0=	';' 
    {
        createLeafNode(lv_valid_2_0, grammarAccess.getOverridingHiddensCallAccess().getValidSemicolonKeyword_2_0(), "valid");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOverridingHiddensCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "valid", true, ";", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleInheritingHiddens
entryRuleInheritingHiddens returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getInheritingHiddensRule(), currentNode); }
	 iv_ruleInheritingHiddens=ruleInheritingHiddens 
	 { $current=$iv_ruleInheritingHiddens.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule InheritingHiddens
ruleInheritingHiddens returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='inheriting' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getInheritingHiddensAccess().getInheritingKeyword_0(), null);
    }
	otherlv_1='hiddens' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getInheritingHiddensAccess().getHiddensKeyword_1(), null);
    }
	otherlv_2='(' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getInheritingHiddensAccess().getLeftParenthesisKeyword_2(), null);
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInheritingHiddensAccess().getCalledInheritingHiddensCallParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_called_3_0=ruleInheritingHiddensCall		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInheritingHiddensRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"called",
	        		lv_called_3_0, 
	        		"InheritingHiddensCall", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInheritingHiddensAccess().getHidingCalledHidingHiddensParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_hidingCalled_4_0=ruleHidingHiddens		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInheritingHiddensRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"hidingCalled",
	        		lv_hidingCalled_4_0, 
	        		"HidingHiddens", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))	otherlv_5=')' 
    {
    	createLeafNode(otherlv_5, grammarAccess.getInheritingHiddensAccess().getRightParenthesisKeyword_4(), null);
    }
(
(
		lv_valid_6_0=	';' 
    {
        createLeafNode(lv_valid_6_0, grammarAccess.getInheritingHiddensAccess().getValidSemicolonKeyword_5_0(), "valid");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInheritingHiddensRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "valid", true, ";", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleDatatypeHiddens
entryRuleDatatypeHiddens returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDatatypeHiddensRule(), currentNode); }
	 iv_ruleDatatypeHiddens=ruleDatatypeHiddens 
	 { $current=$iv_ruleDatatypeHiddens.current; } 
	 EOF 
;

// Rule DatatypeHiddens
ruleDatatypeHiddens returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='datatype' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getDatatypeHiddensAccess().getDatatypeKeyword_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDatatypeHiddensAccess().getValidDatatypeRuleParserRuleCall_1_0(), currentNode); 
	    }
		lv_valid_1_0=ruleDatatypeRule		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDatatypeHiddensRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"valid",
	        		true, 
	        		"DatatypeRule", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleDatatypeRule
entryRuleDatatypeRule returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getDatatypeRuleRule(), currentNode); } 
	 iv_ruleDatatypeRule=ruleDatatypeRule 
	 { $current=$iv_ruleDatatypeRule.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule DatatypeRule
ruleDatatypeRule returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='rule' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getDatatypeRuleAccess().getRuleKeyword_0(), null); 
    }

	kw=';' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getDatatypeRuleAccess().getSemicolonKeyword_1(), null); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleHidingHiddens
entryRuleHidingHiddens returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getHidingHiddensRule(), currentNode); }
	 iv_ruleHidingHiddens=ruleHidingHiddens 
	 { $current=$iv_ruleHidingHiddens.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule HidingHiddens
ruleHidingHiddens returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='hiding' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getHidingHiddensAccess().getHidingKeyword_0(), null);
    }
(
(
		lv_space_1_0=RULE_WS
		{
			createLeafNode(lv_space_1_0, grammarAccess.getHidingHiddensAccess().getSpaceWSTerminalRuleCall_1_0(), "space"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getHidingHiddensRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"space",
	        		lv_space_1_0, 
	        		"WS", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getHidingHiddensAccess().getCalledInheritingHiddensCallParserRuleCall_2_0(), currentNode); 
	    }
		lv_called_2_0=ruleInheritingHiddensCall		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getHidingHiddensRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"called",
	        		lv_called_2_0, 
	        		"InheritingHiddensCall", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleInheritingHiddensCall
entryRuleInheritingHiddensCall returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInheritingHiddensCallRule(), currentNode); }
	 iv_ruleInheritingHiddensCall=ruleInheritingHiddensCall 
	 { $current=$iv_ruleInheritingHiddensCall.current; } 
	 EOF 
;

// Rule InheritingHiddensCall
ruleInheritingHiddensCall returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='call' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getInheritingHiddensCallAccess().getCallKeyword_0(), null);
    }
(
(
		lv_valid_1_0=	';' 
    {
        createLeafNode(lv_valid_1_0, grammarAccess.getInheritingHiddensCallAccess().getValidSemicolonKeyword_1_0(), "valid");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInheritingHiddensCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "valid", true, ";", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


