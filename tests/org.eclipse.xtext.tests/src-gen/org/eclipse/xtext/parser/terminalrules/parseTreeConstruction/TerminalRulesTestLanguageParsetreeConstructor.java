/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.terminalrules.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.parser.terminalrules.services.TerminalRulesTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class TerminalRulesTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private TerminalRulesTestLanguageGrammarAccess grammarAccess;
	
	@Override	
	public TerminalRulesTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 *   idValue=ID|intValue=INT|stringValue=STRING|mlCommentValue=ML_COMMENT|
 *   slCommentValue=SL_COMMENT|wsValue=WS|anyValue=ANY_OTHER;
 *
 **/

// idValue=ID|intValue=INT|stringValue=STRING|mlCommentValue=ML_COMMENT|
// slCommentValue=SL_COMMENT|wsValue=WS|anyValue=ANY_OTHER
protected class Model_Alternatives extends AlternativesToken {

	public Model_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getModelAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_IdValueAssignment_0(parent, this, 0, inst);
			case 1: return new Model_IntValueAssignment_1(parent, this, 1, inst);
			case 2: return new Model_StringValueAssignment_2(parent, this, 2, inst);
			case 3: return new Model_MlCommentValueAssignment_3(parent, this, 3, inst);
			case 4: return new Model_SlCommentValueAssignment_4(parent, this, 4, inst);
			case 5: return new Model_WsValueAssignment_5(parent, this, 5, inst);
			case 6: return new Model_AnyValueAssignment_6(parent, this, 6, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// idValue=ID
protected class Model_IdValueAssignment_0 extends AssignmentToken  {
	
	public Model_IdValueAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getIdValueAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("idValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("idValue");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getIdValueIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// intValue=INT
protected class Model_IntValueAssignment_1 extends AssignmentToken  {
	
	public Model_IntValueAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getIntValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("intValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("intValue");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getIntValueINTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// stringValue=STRING
protected class Model_StringValueAssignment_2 extends AssignmentToken  {
	
	public Model_StringValueAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getStringValueAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("stringValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("stringValue");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getStringValueSTRINGTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// mlCommentValue=ML_COMMENT
protected class Model_MlCommentValueAssignment_3 extends AssignmentToken  {
	
	public Model_MlCommentValueAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getMlCommentValueAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("mlCommentValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("mlCommentValue");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getMlCommentValueML_COMMENTTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// slCommentValue=SL_COMMENT
protected class Model_SlCommentValueAssignment_4 extends AssignmentToken  {
	
	public Model_SlCommentValueAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getSlCommentValueAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("slCommentValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("slCommentValue");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getSlCommentValueSL_COMMENTTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// wsValue=WS
protected class Model_WsValueAssignment_5 extends AssignmentToken  {
	
	public Model_WsValueAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getWsValueAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("wsValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("wsValue");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getWsValueWSTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// anyValue=ANY_OTHER
protected class Model_AnyValueAssignment_6 extends AssignmentToken  {
	
	public Model_AnyValueAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getAnyValueAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("anyValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("anyValue");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getAnyValueANY_OTHERTerminalRuleCall_6_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Model ****************/

}
