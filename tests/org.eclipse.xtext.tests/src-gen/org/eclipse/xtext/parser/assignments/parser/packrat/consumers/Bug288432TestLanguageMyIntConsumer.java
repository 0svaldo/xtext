/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.assignments.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.parser.assignments.services.Bug288432TestLanguageGrammarAccess.MyIntElements;

@SuppressWarnings("all")
public final class Bug288432TestLanguageMyIntConsumer extends NonTerminalConsumer {

	private MyIntElements rule;	

	private ITerminalConsumer intConsumer;

	private IElementConsumer assignment$1$Consumer;

	private IElementConsumer ruleCall$2$Consumer;

	private ISequenceMatcher ruleCall$2$Delimiter;

	protected class Assignment$1$Consumer extends AssignmentConsumer {
		
		protected Assignment$1$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$2$Consumer;
		}
	}

	protected class RuleCall$2$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$2$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(intConsumer, "int", false, false, getElement(), getRuleCall$2$Delimiter(), optional);
		}
	}

	public Bug288432TestLanguageMyIntConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		ruleCall$2$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return assignment$1$Consumer.consume();
	}

	public MyIntElements getRule() {
		return rule;
	}
	
	public void setRule(MyIntElements rule) {
		this.rule = rule;
		
		assignment$1$Consumer = new Assignment$1$Consumer(rule.getIntAssignment());
		ruleCall$2$Consumer = new RuleCall$2$Consumer(rule.getIntINTTerminalRuleCall_0());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setIntConsumer(ITerminalConsumer intConsumer) {
		this.intConsumer = intConsumer;
	}
	
	public ISequenceMatcher getRuleCall$2$Delimiter() {
		return ruleCall$2$Delimiter;
	}
	
	public void setRuleCall$2$Delimiter(ISequenceMatcher matcher) {
		ruleCall$2$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
