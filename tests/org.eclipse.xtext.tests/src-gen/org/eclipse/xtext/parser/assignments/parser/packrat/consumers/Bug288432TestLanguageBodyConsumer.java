/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.assignments.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;

import org.eclipse.xtext.parser.assignments.services.Bug288432TestLanguageGrammarAccess.BodyElements;

@SuppressWarnings("all")
public final class Bug288432TestLanguageBodyConsumer extends NonTerminalConsumer {

	private BodyElements rule;	

	private INonTerminalConsumer contentConsumer;

	private INonTerminalConsumer fooConsumer;

	private INonTerminalConsumer parameterConsumer;

	private INonTerminalConsumer parameterRefConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer group$2$Consumer;

	private IElementConsumer keyword$3$Consumer;

	private IElementConsumer assignment$4$Consumer;

	private IElementConsumer ruleCall$5$Consumer;

	private IElementConsumer group$6$Consumer;

	private IElementConsumer keyword$7$Consumer;

	private IElementConsumer assignment$8$Consumer;

	private IElementConsumer ruleCall$9$Consumer;

	private IElementConsumer keyword$10$Consumer;

	private IElementConsumer keyword$11$Consumer;

	private IElementConsumer assignment$12$Consumer;

	private IElementConsumer alternatives$13$Consumer;

	private IElementConsumer ruleCall$14$Consumer;

	private IElementConsumer ruleCall$15$Consumer;

	private IElementConsumer assignment$16$Consumer;

	private IElementConsumer ruleCall$17$Consumer;

	private IElementConsumer keyword$18$Consumer;

	private ICharacterClass keyword$10$Delimiter;

	private ICharacterClass keyword$11$Delimiter;

	private ICharacterClass keyword$18$Delimiter;

	private ICharacterClass keyword$3$Delimiter;

	private ICharacterClass keyword$7$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$2$Consumer);
			acceptor.accept(keyword$11$Consumer);
			acceptor.accept(assignment$12$Consumer);
			acceptor.accept(assignment$16$Consumer);
			acceptor.accept(keyword$18$Consumer);
		}
	}

	protected class Group$2$Consumer extends OptionalGroupConsumer {
		
		protected Group$2$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$3$Consumer);
			acceptor.accept(assignment$4$Consumer);
			acceptor.accept(group$6$Consumer);
			acceptor.accept(keyword$10$Consumer);
		}
	}

	protected class Keyword$3$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$3$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$3$Delimiter(), optional);
		}
	}

	protected class Assignment$4$Consumer extends AssignmentConsumer {
		
		protected Assignment$4$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$5$Consumer;
		}
	}

	protected class RuleCall$5$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$5$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(parameterConsumer, "parameter", true, false, false, getElement(), optional);
		}
	}

	protected class Group$6$Consumer extends LoopGroupConsumer {
		
		protected Group$6$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$7$Consumer);
			acceptor.accept(assignment$8$Consumer);
		}
	}

	protected class Keyword$7$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$7$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$7$Delimiter(), optional);
		}
	}

	protected class Assignment$8$Consumer extends AssignmentConsumer {
		
		protected Assignment$8$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$9$Consumer;
		}
	}

	protected class RuleCall$9$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$9$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(parameterConsumer, "parameter", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$10$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$10$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$10$Delimiter(), optional);
		}
	}

	protected class Keyword$11$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$11$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$11$Delimiter(), optional);
		}
	}

	protected class Assignment$12$Consumer extends AssignmentConsumer {
		
		protected Assignment$12$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return alternatives$13$Consumer;
		}
	}

	protected class Alternatives$13$Consumer extends AlternativesConsumer {
		
		protected Alternatives$13$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(ruleCall$14$Consumer);
			acceptor.accept(ruleCall$15$Consumer);
		}
	}

	protected class RuleCall$14$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$14$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(contentConsumer, "content", false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$15$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$15$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(parameterRefConsumer, "content", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$16$Consumer extends MandatoryLoopAssignmentConsumer {
		
		protected Assignment$16$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$17$Consumer;
		}
	}

	protected class RuleCall$17$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$17$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(fooConsumer, "foo", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$18$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$18$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$18$Delimiter(), optional);
		}
	}

	public Bug288432TestLanguageBodyConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$10$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$11$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$18$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$3$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$7$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public BodyElements getRule() {
		return rule;
	}
	
	public void setRule(BodyElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		group$2$Consumer = new Group$2$Consumer(rule.getGroup_0());
		keyword$3$Consumer = new Keyword$3$Consumer(rule.getLeftParenthesisKeyword_0_0());
		assignment$4$Consumer = new Assignment$4$Consumer(rule.getParameterAssignment_0_1());
		ruleCall$5$Consumer = new RuleCall$5$Consumer(rule.getParameterParameterParserRuleCall_0_1_0());
		group$6$Consumer = new Group$6$Consumer(rule.getGroup_0_2());
		keyword$7$Consumer = new Keyword$7$Consumer(rule.getCommaKeyword_0_2_0());
		assignment$8$Consumer = new Assignment$8$Consumer(rule.getParameterAssignment_0_2_1());
		ruleCall$9$Consumer = new RuleCall$9$Consumer(rule.getParameterParameterParserRuleCall_0_2_1_0());
		keyword$10$Consumer = new Keyword$10$Consumer(rule.getRightParenthesisKeyword_0_3());
		keyword$11$Consumer = new Keyword$11$Consumer(rule.getBodyKeyword_1());
		assignment$12$Consumer = new Assignment$12$Consumer(rule.getContentAssignment_2());
		alternatives$13$Consumer = new Alternatives$13$Consumer(rule.getContentAlternatives_2_0());
		ruleCall$14$Consumer = new RuleCall$14$Consumer(rule.getContentContentParserRuleCall_2_0_0());
		ruleCall$15$Consumer = new RuleCall$15$Consumer(rule.getContentParameterRefParserRuleCall_2_0_1());
		ruleCall$14$Consumer = new RuleCall$14$Consumer(rule.getContentContentParserRuleCall_2_0_0());
		ruleCall$15$Consumer = new RuleCall$15$Consumer(rule.getContentParameterRefParserRuleCall_2_0_1());
		assignment$16$Consumer = new Assignment$16$Consumer(rule.getFooAssignment_3());
		ruleCall$17$Consumer = new RuleCall$17$Consumer(rule.getFooFooParserRuleCall_3_0());
		keyword$18$Consumer = new Keyword$18$Consumer(rule.getEndBodyKeyword_4());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setContentConsumer(INonTerminalConsumer contentConsumer) {
		this.contentConsumer = contentConsumer;
	}
	
	public void setFooConsumer(INonTerminalConsumer fooConsumer) {
		this.fooConsumer = fooConsumer;
	}
	
	public void setParameterConsumer(INonTerminalConsumer parameterConsumer) {
		this.parameterConsumer = parameterConsumer;
	}
	
	public void setParameterRefConsumer(INonTerminalConsumer parameterRefConsumer) {
		this.parameterRefConsumer = parameterRefConsumer;
	}
	
	public ICharacterClass getKeyword$10$Delimiter() {
		return keyword$10$Delimiter;
	}
	
	public void setKeyword$10$Delimiter(ICharacterClass characterClass) {
		keyword$10$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$11$Delimiter() {
		return keyword$11$Delimiter;
	}
	
	public void setKeyword$11$Delimiter(ICharacterClass characterClass) {
		keyword$11$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$18$Delimiter() {
		return keyword$18$Delimiter;
	}
	
	public void setKeyword$18$Delimiter(ICharacterClass characterClass) {
		keyword$18$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$3$Delimiter() {
		return keyword$3$Delimiter;
	}
	
	public void setKeyword$3$Delimiter(ICharacterClass characterClass) {
		keyword$3$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$7$Delimiter() {
		return keyword$7$Delimiter;
	}
	
	public void setKeyword$7$Delimiter(ICharacterClass characterClass) {
		keyword$7$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
