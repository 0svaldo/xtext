/*
* generated by Xtext
*/
parser grammar InternalExUnorderedGroupsTestLanguage;

options {
	tokenVocab=InternalExUnorderedGroupsTestLanguage;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package org.eclipse.xtext.parser.unorderedGroups.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.parser.unorderedGroups.services.ExUnorderedGroupsTestLanguageGrammarAccess;

}

@members {


 	private ExUnorderedGroupsTestLanguageGrammarAccess grammarAccess;
 	
    public InternalExUnorderedGroupsTestLanguageParser(TokenStream input, IAstFactory factory, ExUnorderedGroupsTestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/xtext/parser/unorderedGroups/parser/antlr/internal/InternalExUnorderedGroupsTestLanguage.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "DelegateModel";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDelegateModel
entryRuleDelegateModel returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getDelegateModelRule(), currentNode); }
	 iv_ruleDelegateModel=ruleDelegateModel 
	 { $current=$iv_ruleDelegateModel.current; } 
	 EOF 
;

// Rule DelegateModel
ruleDelegateModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getDelegateModelAccess().getModelParserRuleCall(), currentNode); 
    }
    this_Model_0=ruleModel
    { 
        $current = $this_Model_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
	  boolean[] pred_2 = new boolean[2];
	  boolean[] pred_6 = new boolean[4];
	  boolean[] pred_12 = new boolean[2];
	  boolean[] pred_16 = new boolean[2];
	  boolean[] pred_20 = new boolean[2];
	  boolean[] pred_24 = new boolean[2];
	  boolean[] pred_28 = new boolean[2];
	  boolean[] pred_32 = new boolean[2];
	  boolean[] pred_40 = new boolean[2];
	  boolean[] pred_44 = new boolean[2];
	  boolean[] pred_48 = new boolean[2];
	  boolean[] pred_52 = new boolean[2];
	  boolean[] pred_55 = new boolean[2];
	  boolean[] pred_59 = new boolean[2];
	  boolean[] pred_65 = new boolean[2];
	  boolean[] pred_66 = new boolean[2];
	  boolean[] pred_69 = new boolean[2];
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getModelAccess().getModelAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getModelAccess().getModelAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getModelAccess().getDigitOneKeyword_1_0_0(), null); 
    }
(

(
	{ 
	  pred_2 = new boolean[2];
	  int remaining_pred_2 = 2;
	}
	(
		(

			( 
				{!pred_2[0]}?=>(
					{ 
	 				  pred_2[0] = true;
	 				  remaining_pred_2--;
	 				}
					(
(
		lv_first_3_0=
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getModelAccess().getFirstAKeyword_1_0_1_0_0(), "first"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "first", true, "a", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_2[1]}?=>(
					{ 
	 				  pred_2[1] = true;
	 				  remaining_pred_2--;
	 				}
					(
(
		lv_second_4_0=
	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getModelAccess().getSecondBKeyword_1_0_1_1_0(), "second"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "second", true, "b", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  

		)+
	  	{remaining_pred_2==0}?	
	)
)
	{ 
	  pred_2 = new boolean[2];
	}

))
    |(
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getModelAccess().getDigitTwoKeyword_1_1_0(), null); 
    }
(

(
	{ 
	  pred_6 = new boolean[4];
	  int remaining_pred_6 = 4;
	}
	(
		(

			( 
				{!pred_6[0]}?=>(
					{ 
	 				  pred_6[0] = true;
	 				  remaining_pred_6--;
	 				}
					(
(
		lv_first_7_0=
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getModelAccess().getFirstAKeyword_1_1_1_0_0(), "first"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "first", true, "a", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_6[1]}?=>(
					{ 
	 				  pred_6[1] = true;
	 				  remaining_pred_6--;
	 				}
					(
(
		lv_second_8_0=
	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getModelAccess().getSecondBKeyword_1_1_1_1_0(), "second"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "second", true, "b", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_6[2]}?=>(
					{ 
	 				  pred_6[2] = true;
	 				  remaining_pred_6--;
	 				}
					(
(
		lv_third_9_0=
	KEYWORD_12 
    {
        createLeafNode(grammarAccess.getModelAccess().getThirdCKeyword_1_1_1_2_0(), "third"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "third", true, "c", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_6[3]}?=>(
					{ 
	 				  pred_6[3] = true;
	 				  remaining_pred_6--;
	 				}
					(
(
		lv_forth_10_0=
	KEYWORD_13 
    {
        createLeafNode(grammarAccess.getModelAccess().getForthDKeyword_1_1_1_3_0(), "forth"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "forth", true, "d", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  

		)+
	  	{remaining_pred_6==0}?	
	)
)
	{ 
	  pred_6 = new boolean[4];
	}

))
    |(
	KEYWORD_3 
    {
        createLeafNode(grammarAccess.getModelAccess().getDigitThreeKeyword_1_2_0(), null); 
    }
(

(
	{ 
	  pred_12 = new boolean[2];
	}
	(
		(

			( 
				{!pred_12[0]}?=>(
					{ 
	 				  pred_12[0] = true;
	 				  
	 				}
					(
(
		lv_first_13_0=
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getModelAccess().getFirstAKeyword_1_2_1_0_0(), "first"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "first", true, "a", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_12[1]}?=>(
					{ 
	 				  pred_12[1] = true;
	 				  
	 				}
					(
(
		lv_second_14_0=
	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getModelAccess().getSecondBKeyword_1_2_1_1_0(), "second"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "second", true, "b", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  

		)*	
	)
)
	{ 
	  pred_12 = new boolean[2];
	}

))
    |(
	KEYWORD_4 
    {
        createLeafNode(grammarAccess.getModelAccess().getDigitFourKeyword_1_3_0(), null); 
    }
(

(
	{ 
	  pred_16 = new boolean[2];
	  int remaining_pred_16 = 1;
	}
	(
		(

			( 
				{!pred_16[0]}?=>(
					{ 
	 				  pred_16[0] = true;
	 				  remaining_pred_16--;
	 				}
					(
(
		lv_first_17_0=
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getModelAccess().getFirstAKeyword_1_3_1_0_0(), "first"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "first", true, "a", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_16[1]}?=>(
					{ 
	 				  pred_16[1] = true;
	 				  
	 				}
					(
(
		lv_second_18_0=
	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getModelAccess().getSecondBKeyword_1_3_1_1_0(), "second"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "second", true, "b", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  

		)+
	  	{remaining_pred_16==0}?	
	)
)
	{ 
	  pred_16 = new boolean[2];
	}

))
    |(
	KEYWORD_5 
    {
        createLeafNode(grammarAccess.getModelAccess().getDigitFiveKeyword_1_4_0(), null); 
    }
(

(
	{ 
	  pred_20 = new boolean[2];
	  int remaining_pred_20 = 1;
	}
	(
		(

			( 
				{!pred_20[0]}?=>(
					{ 
	 				  pred_20[0] = true;
	 				  
	 				}
					(
(
		lv_first_21_0=
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getModelAccess().getFirstAKeyword_1_4_1_0_0(), "first"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "first", true, "a", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_20[1]}?=>(
					{ 
	 				  pred_20[1] = true;
	 				  remaining_pred_20--;
	 				}
					(
(
		lv_second_22_0=
	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getModelAccess().getSecondBKeyword_1_4_1_1_0(), "second"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "second", true, "b", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  

		)+
	  	{remaining_pred_20==0}?	
	)
)
	{ 
	  pred_20 = new boolean[2];
	}

))
    |(
	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getModelAccess().getDigitSixKeyword_1_5_0(), null); 
    }
(

(
	{ 
	  pred_24 = new boolean[2];
	  int remaining_pred_24 = 1;
	}
	(
		(

			( 
				{!pred_24[0]}?=>(
					{ 
	 				  pred_24[0] = true;
	 				  remaining_pred_24--;
	 				}
					(
(
		lv_firstAsList_25_0=
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getModelAccess().getFirstAsListAKeyword_1_5_1_0_0(), "firstAsList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "firstAsList", lv_firstAsList_25_0, "a", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)+
 				)
			)  |

			( 
				{!pred_24[1]}?=>(
					{ 
	 				  pred_24[1] = true;
	 				  
	 				}
					(
(
		lv_secondAsList_26_0=
	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getModelAccess().getSecondAsListBKeyword_1_5_1_1_0(), "secondAsList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "secondAsList", lv_secondAsList_26_0, "b", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)+
 				)
			)  

		)+
	  	{remaining_pred_24==0}?	
	)
)
	{ 
	  pred_24 = new boolean[2];
	}

))
    |(
	KEYWORD_7 
    {
        createLeafNode(grammarAccess.getModelAccess().getDigitSevenKeyword_1_6_0(), null); 
    }
(

(
	{ 
	  pred_28 = new boolean[2];
	  int remaining_pred_28 = 1;
	}
	(
		(

			( 
				{!pred_28[0]}?=>(
					{ 
	 				  pred_28[0] = true;
	 				  
	 				}
					(
(
		lv_firstAsList_29_0=
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getModelAccess().getFirstAsListAKeyword_1_6_1_0_0(), "firstAsList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "firstAsList", lv_firstAsList_29_0, "a", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)+
 				)
			)  |

			( 
				{!pred_28[1]}?=>(
					{ 
	 				  pred_28[1] = true;
	 				  remaining_pred_28--;
	 				}
					(
(
		lv_secondAsList_30_0=
	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getModelAccess().getSecondAsListBKeyword_1_6_1_1_0(), "secondAsList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "secondAsList", lv_secondAsList_30_0, "b", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)+
 				)
			)  

		)+
	  	{remaining_pred_28==0}?	
	)
)
	{ 
	  pred_28 = new boolean[2];
	}

))
    |(
	KEYWORD_8 
    {
        createLeafNode(grammarAccess.getModelAccess().getDigitEightKeyword_1_7_0(), null); 
    }
(

(
	{ 
	  pred_32 = new boolean[2];
	  int remaining_pred_32 = 2;
	}
	(
		(

			( 
				{!pred_32[0]}?=>(
					{ 
	 				  pred_32[0] = true;
	 				  remaining_pred_32--;
	 				}
					(
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getModelAccess().getAKeyword_1_7_1_0_0(), null); 
    }

	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getModelAccess().getBKeyword_1_7_1_0_1(), null); 
    }
(
(
		lv_first_35_0=
	KEYWORD_12 
    {
        createLeafNode(grammarAccess.getModelAccess().getFirstCKeyword_1_7_1_0_2_0(), "first"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "first", true, "c", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
 				)
			)  |

			( 
				{!pred_32[1]}?=>(
					{ 
	 				  pred_32[1] = true;
	 				  remaining_pred_32--;
	 				}
					(
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getModelAccess().getAKeyword_1_7_1_1_0(), null); 
    }

	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getModelAccess().getBKeyword_1_7_1_1_1(), null); 
    }
(
(
		lv_second_38_0=
	KEYWORD_13 
    {
        createLeafNode(grammarAccess.getModelAccess().getSecondDKeyword_1_7_1_1_2_0(), "second"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "second", true, "d", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
 				)
			)  

		)+
	  	{remaining_pred_32==0}?	
	)
)
	{ 
	  pred_32 = new boolean[2];
	}

))
    |(
	KEYWORD_9 
    {
        createLeafNode(grammarAccess.getModelAccess().getDigitNineKeyword_1_8_0(), null); 
    }
(

(
	{ 
	  pred_40 = new boolean[2];
	  int remaining_pred_40 = 2;
	}
	(
		(

			( 
				{!pred_40[0]}?=>(
					{ 
	 				  pred_40[0] = true;
	 				  remaining_pred_40--;
	 				}
					(
(
		lv_firstAsList_41_0=
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getModelAccess().getFirstAsListAKeyword_1_8_1_0_0(), "firstAsList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "firstAsList", lv_firstAsList_41_0, "a", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_40[1]}?=>(
					{ 
	 				  pred_40[1] = true;
	 				  remaining_pred_40--;
	 				}
					(
(
		lv_secondAsList_42_0=
	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getModelAccess().getSecondAsListBKeyword_1_8_1_1_0(), "secondAsList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "secondAsList", lv_secondAsList_42_0, "b", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  

		)+
	  	{remaining_pred_40==0}?	
	)
)
	{ 
	  pred_40 = new boolean[2];
	}

)+)
    |(
	KEYWORD_14 
    {
        createLeafNode(grammarAccess.getModelAccess().getDigitOneDigitZeroKeyword_1_9_0(), null); 
    }
(

(
	{ 
	  pred_44 = new boolean[2];
	  int remaining_pred_44 = 2;
	}
	(
		(

			( 
				{!pred_44[0]}?=>(
					{ 
	 				  pred_44[0] = true;
	 				  remaining_pred_44--;
	 				}
					(
(
		lv_firstAsList_45_0=
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getModelAccess().getFirstAsListAKeyword_1_9_1_0_0(), "firstAsList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "firstAsList", lv_firstAsList_45_0, "a", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_44[1]}?=>(
					{ 
	 				  pred_44[1] = true;
	 				  remaining_pred_44--;
	 				}
					(
(
		lv_secondAsList_46_0=
	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getModelAccess().getSecondAsListBKeyword_1_9_1_1_0(), "secondAsList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "secondAsList", lv_secondAsList_46_0, "b", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  

		)+
	  	{remaining_pred_44==0}?	
	)
)
	{ 
	  pred_44 = new boolean[2];
	}

)*)
    |(
	KEYWORD_15 
    {
        createLeafNode(grammarAccess.getModelAccess().getDigitOneDigitOneKeyword_1_10_0(), null); 
    }
(

(
	{ 
	  pred_48 = new boolean[2];
	  int remaining_pred_48 = 2;
	}
	(
		(

			( 
				{!pred_48[0]}?=>(
					{ 
	 				  pred_48[0] = true;
	 				  remaining_pred_48--;
	 				}
					(
(
		lv_first_49_0=
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getModelAccess().getFirstAKeyword_1_10_1_0_0(), "first"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "first", true, "a", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_48[1]}?=>(
					{ 
	 				  pred_48[1] = true;
	 				  remaining_pred_48--;
	 				}
					(
(
		lv_second_50_0=
	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getModelAccess().getSecondBKeyword_1_10_1_1_0(), "second"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "second", true, "b", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  

		)+
	  	{remaining_pred_48==0}?	
	)
)
	{ 
	  pred_48 = new boolean[2];
	}

)?)
    |(
	KEYWORD_16 
    {
        createLeafNode(grammarAccess.getModelAccess().getDigitOneDigitTwoKeyword_1_11_0(), null); 
    }
(

(
	{ 
	  pred_52 = new boolean[2];
	  int remaining_pred_52 = 2;
	}
	(
		(

			( 
				{!pred_52[0]}?=>(
					{ 
	 				  pred_52[0] = true;
	 				  remaining_pred_52--;
	 				}
					(
(
		lv_firstAsList_53_0=
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getModelAccess().getFirstAsListAKeyword_1_11_1_0_0(), "firstAsList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "firstAsList", lv_firstAsList_53_0, "a", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_52[1]}?=>(
					{ 
	 				  pred_52[1] = true;
	 				  remaining_pred_52--;
	 				}
					(
(
		lv_secondAsList_54_0=
	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getModelAccess().getSecondAsListBKeyword_1_11_1_1_0(), "secondAsList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "secondAsList", lv_secondAsList_54_0, "b", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  

		)+
	  	{remaining_pred_52==0}?	
	)
)
	{ 
	  pred_52 = new boolean[2];
	}

)(

(
	{ 
	  pred_55 = new boolean[2];
	  int remaining_pred_55 = 2;
	}
	(
		(

			( 
				{!pred_55[0]}?=>(
					{ 
	 				  pred_55[0] = true;
	 				  remaining_pred_55--;
	 				}
					(
(
		lv_firstAsList_56_0=
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getModelAccess().getFirstAsListAKeyword_1_11_2_0_0(), "firstAsList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "firstAsList", lv_firstAsList_56_0, "a", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_55[1]}?=>(
					{ 
	 				  pred_55[1] = true;
	 				  remaining_pred_55--;
	 				}
					(
(
		lv_secondAsList_57_0=
	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getModelAccess().getSecondAsListBKeyword_1_11_2_1_0(), "secondAsList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "secondAsList", lv_secondAsList_57_0, "b", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  

		)+
	  	{remaining_pred_55==0}?	
	)
)
	{ 
	  pred_55 = new boolean[2];
	}

))
    |(
	KEYWORD_17 
    {
        createLeafNode(grammarAccess.getModelAccess().getDigitOneDigitThreeKeyword_1_12_0(), null); 
    }
(

(
	{ 
	  pred_59 = new boolean[2];
	  int remaining_pred_59 = 2;
	}
	(
		(

			( 
				{!pred_59[0]}?=>(
					{ 
	 				  pred_59[0] = true;
	 				  remaining_pred_59--;
	 				}
					(
(
		lv_firstAsList_60_0=
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getModelAccess().getFirstAsListAKeyword_1_12_1_0_0(), "firstAsList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "firstAsList", lv_firstAsList_60_0, "a", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_59[1]}?=>(
					{ 
	 				  pred_59[1] = true;
	 				  remaining_pred_59--;
	 				}
					(
(
		lv_secondAsList_61_0=
	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getModelAccess().getSecondAsListBKeyword_1_12_1_1_0(), "secondAsList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "secondAsList", lv_secondAsList_61_0, "b", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  

		)+
	  	{remaining_pred_59==0}?	
	)
)
	{ 
	  pred_59 = new boolean[2];
	}

)?(
(
		lv_firstAsList_62_0=
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getModelAccess().getFirstAsListAKeyword_1_12_2_0(), "firstAsList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "firstAsList", lv_firstAsList_62_0, "a", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_secondAsList_63_0=
	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getModelAccess().getSecondAsListBKeyword_1_12_3_0(), "secondAsList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "secondAsList", lv_secondAsList_63_0, "b", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |(
	KEYWORD_18 
    {
        createLeafNode(grammarAccess.getModelAccess().getDigitOneDigitFourKeyword_1_13_0(), null); 
    }
(

(
	{ 
	  pred_65 = new boolean[2];
	  int remaining_pred_65 = 2;
	}
	(
		(

			( 
				{!pred_65[0]}?=>(
					{ 
	 				  pred_65[0] = true;
	 				  remaining_pred_65--;
	 				}
					(

(
	{ 
	  pred_66 = new boolean[2];
	  int remaining_pred_66 = 2;
	}
	(
		(

			( 
				{!pred_66[0]}?=>(
					{ 
	 				  pred_66[0] = true;
	 				  remaining_pred_66--;
	 				}
					(
(
		lv_firstAsList_67_0=
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getModelAccess().getFirstAsListAKeyword_1_13_1_0_0_0(), "firstAsList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "firstAsList", lv_firstAsList_67_0, "a", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_66[1]}?=>(
					{ 
	 				  pred_66[1] = true;
	 				  remaining_pred_66--;
	 				}
					(
(
		lv_secondAsList_68_0=
	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getModelAccess().getSecondAsListBKeyword_1_13_1_0_1_0(), "secondAsList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "secondAsList", lv_secondAsList_68_0, "b", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  

		)+
	  	{remaining_pred_66==0}?	
	)
)
	{ 
	  pred_66 = new boolean[2];
	}

)
 				)
			)  |

			( 
				{!pred_65[1]}?=>(
					{ 
	 				  pred_65[1] = true;
	 				  remaining_pred_65--;
	 				}
					(

(
	{ 
	  pred_69 = new boolean[2];
	  int remaining_pred_69 = 2;
	}
	(
		(

			( 
				{!pred_69[0]}?=>(
					{ 
	 				  pred_69[0] = true;
	 				  remaining_pred_69--;
	 				}
					(
(
		lv_thirdAsList_70_0=
	KEYWORD_12 
    {
        createLeafNode(grammarAccess.getModelAccess().getThirdAsListCKeyword_1_13_1_1_0_0(), "thirdAsList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "thirdAsList", lv_thirdAsList_70_0, "c", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_69[1]}?=>(
					{ 
	 				  pred_69[1] = true;
	 				  remaining_pred_69--;
	 				}
					(
(
		lv_forthAsList_71_0=
	KEYWORD_13 
    {
        createLeafNode(grammarAccess.getModelAccess().getForthAsListDKeyword_1_13_1_1_1_0(), "forthAsList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "forthAsList", lv_forthAsList_71_0, "d", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  

		)+
	  	{remaining_pred_69==0}?	
	)
)
	{ 
	  pred_69 = new boolean[2];
	}

)
 				)
			)  

		)+
	  	{remaining_pred_65==0}?	
	)
)
	{ 
	  pred_65 = new boolean[2];
	}

)+)
    |(
	KEYWORD_19 
    {
        createLeafNode(grammarAccess.getModelAccess().getDatatypesKeyword_1_14_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getValueUnorderedDatatypeParserRuleCall_1_14_1_0(), currentNode); 
	    }
		lv_value_73_0=ruleUnorderedDatatype		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_73_0, 
	        		"UnorderedDatatype", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(
	KEYWORD_20 
    {
        createLeafNode(grammarAccess.getModelAccess().getSerializationKeyword_1_15_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getSerializedUnorderedSerializationParserRuleCall_1_15_1_0(), currentNode); 
	    }
		lv_serialized_75_0=ruleUnorderedSerialization		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"serialized",
	        		lv_serialized_75_0, 
	        		"UnorderedSerialization", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))))
;





// Entry rule entryRuleUnorderedDatatype
entryRuleUnorderedDatatype returns [String current=null] 
:
	{ currentNode = createCompositeNode(grammarAccess.getUnorderedDatatypeRule(), currentNode); } 
	 iv_ruleUnorderedDatatype=ruleUnorderedDatatype 
	 { $current=$iv_ruleUnorderedDatatype.current.getText(); }  
	 EOF 
;

// Rule UnorderedDatatype
ruleUnorderedDatatype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
	  boolean[] pred_1 = new boolean[2];
	  boolean[] pred_5 = new boolean[4];
	  boolean[] pred_11 = new boolean[2];
	  boolean[] pred_15 = new boolean[2];
	  boolean[] pred_19 = new boolean[2];
	  boolean[] pred_23 = new boolean[2];
	  boolean[] pred_27 = new boolean[2];
	  boolean[] pred_31 = new boolean[2];
	  boolean[] pred_39 = new boolean[2];
	  boolean[] pred_43 = new boolean[2];
	  boolean[] pred_47 = new boolean[2];
	  boolean[] pred_51 = new boolean[2];
	  boolean[] pred_54 = new boolean[2];
	  boolean[] pred_58 = new boolean[2];
	  boolean[] pred_64 = new boolean[2];
	  boolean[] pred_65 = new boolean[2];
	  boolean[] pred_68 = new boolean[2];
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
((
	kw=KEYWORD_1 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getDigitOneKeyword_0_0(), null); 
    }
(

(
	{ 
	  pred_1 = new boolean[2];
	  int remaining_pred_1 = 2;
	}
	(
		(

			( 
				{!pred_1[0]}?=>(
					{ 
	 				  pred_1[0] = true;
	 				  remaining_pred_1--;
	 				}
					(
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getAKeyword_0_1_0(), null); 
    }
)
 				)
			)  |

			( 
				{!pred_1[1]}?=>(
					{ 
	 				  pred_1[1] = true;
	 				  remaining_pred_1--;
	 				}
					(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getBKeyword_0_1_1(), null); 
    }
)
 				)
			)  

		)+
	  	{remaining_pred_1==0}?	
	)
)
	{ 
	  pred_1 = new boolean[2];
	}

))
    |(
	kw=KEYWORD_2 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getDigitTwoKeyword_1_0(), null); 
    }
(

(
	{ 
	  pred_5 = new boolean[4];
	  int remaining_pred_5 = 4;
	}
	(
		(

			( 
				{!pred_5[0]}?=>(
					{ 
	 				  pred_5[0] = true;
	 				  remaining_pred_5--;
	 				}
					(
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getAKeyword_1_1_0(), null); 
    }
)
 				)
			)  |

			( 
				{!pred_5[1]}?=>(
					{ 
	 				  pred_5[1] = true;
	 				  remaining_pred_5--;
	 				}
					(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getBKeyword_1_1_1(), null); 
    }
)
 				)
			)  |

			( 
				{!pred_5[2]}?=>(
					{ 
	 				  pred_5[2] = true;
	 				  remaining_pred_5--;
	 				}
					(
	kw=KEYWORD_12 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getCKeyword_1_1_2(), null); 
    }
)
 				)
			)  |

			( 
				{!pred_5[3]}?=>(
					{ 
	 				  pred_5[3] = true;
	 				  remaining_pred_5--;
	 				}
					(
	kw=KEYWORD_13 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getDKeyword_1_1_3(), null); 
    }
)
 				)
			)  

		)+
	  	{remaining_pred_5==0}?	
	)
)
	{ 
	  pred_5 = new boolean[4];
	}

))
    |(
	kw=KEYWORD_3 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getDigitThreeKeyword_2_0(), null); 
    }
(

(
	{ 
	  pred_11 = new boolean[2];
	}
	(
		(

			( 
				{!pred_11[0]}?=>(
					{ 
	 				  pred_11[0] = true;
	 				  
	 				}
					(
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getAKeyword_2_1_0(), null); 
    }
)
 				)
			)  |

			( 
				{!pred_11[1]}?=>(
					{ 
	 				  pred_11[1] = true;
	 				  
	 				}
					(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getBKeyword_2_1_1(), null); 
    }
)
 				)
			)  

		)*	
	)
)
	{ 
	  pred_11 = new boolean[2];
	}

))
    |(
	kw=KEYWORD_4 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getDigitFourKeyword_3_0(), null); 
    }
(

(
	{ 
	  pred_15 = new boolean[2];
	  int remaining_pred_15 = 1;
	}
	(
		(

			( 
				{!pred_15[0]}?=>(
					{ 
	 				  pred_15[0] = true;
	 				  remaining_pred_15--;
	 				}
					(
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getAKeyword_3_1_0(), null); 
    }
)
 				)
			)  |

			( 
				{!pred_15[1]}?=>(
					{ 
	 				  pred_15[1] = true;
	 				  
	 				}
					(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getBKeyword_3_1_1(), null); 
    }
)
 				)
			)  

		)+
	  	{remaining_pred_15==0}?	
	)
)
	{ 
	  pred_15 = new boolean[2];
	}

))
    |(
	kw=KEYWORD_5 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getDigitFiveKeyword_4_0(), null); 
    }
(

(
	{ 
	  pred_19 = new boolean[2];
	  int remaining_pred_19 = 1;
	}
	(
		(

			( 
				{!pred_19[0]}?=>(
					{ 
	 				  pred_19[0] = true;
	 				  
	 				}
					(
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getAKeyword_4_1_0(), null); 
    }
)
 				)
			)  |

			( 
				{!pred_19[1]}?=>(
					{ 
	 				  pred_19[1] = true;
	 				  remaining_pred_19--;
	 				}
					(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getBKeyword_4_1_1(), null); 
    }
)
 				)
			)  

		)+
	  	{remaining_pred_19==0}?	
	)
)
	{ 
	  pred_19 = new boolean[2];
	}

))
    |(
	kw=KEYWORD_6 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getDigitSixKeyword_5_0(), null); 
    }
(

(
	{ 
	  pred_23 = new boolean[2];
	  int remaining_pred_23 = 1;
	}
	(
		(

			( 
				{!pred_23[0]}?=>(
					{ 
	 				  pred_23[0] = true;
	 				  remaining_pred_23--;
	 				}
					(
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getAKeyword_5_1_0(), null); 
    }
)+
 				)
			)  |

			( 
				{!pred_23[1]}?=>(
					{ 
	 				  pred_23[1] = true;
	 				  
	 				}
					(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getBKeyword_5_1_1(), null); 
    }
)+
 				)
			)  

		)+
	  	{remaining_pred_23==0}?	
	)
)
	{ 
	  pred_23 = new boolean[2];
	}

))
    |(
	kw=KEYWORD_7 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getDigitSevenKeyword_6_0(), null); 
    }
(

(
	{ 
	  pred_27 = new boolean[2];
	  int remaining_pred_27 = 1;
	}
	(
		(

			( 
				{!pred_27[0]}?=>(
					{ 
	 				  pred_27[0] = true;
	 				  
	 				}
					(
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getAKeyword_6_1_0(), null); 
    }
)+
 				)
			)  |

			( 
				{!pred_27[1]}?=>(
					{ 
	 				  pred_27[1] = true;
	 				  remaining_pred_27--;
	 				}
					(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getBKeyword_6_1_1(), null); 
    }
)+
 				)
			)  

		)+
	  	{remaining_pred_27==0}?	
	)
)
	{ 
	  pred_27 = new boolean[2];
	}

))
    |(
	kw=KEYWORD_8 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getDigitEightKeyword_7_0(), null); 
    }
(

(
	{ 
	  pred_31 = new boolean[2];
	  int remaining_pred_31 = 2;
	}
	(
		(

			( 
				{!pred_31[0]}?=>(
					{ 
	 				  pred_31[0] = true;
	 				  remaining_pred_31--;
	 				}
					(
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getAKeyword_7_1_0_0(), null); 
    }

	kw=KEYWORD_11 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getBKeyword_7_1_0_1(), null); 
    }

	kw=KEYWORD_12 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getCKeyword_7_1_0_2(), null); 
    }
)
 				)
			)  |

			( 
				{!pred_31[1]}?=>(
					{ 
	 				  pred_31[1] = true;
	 				  remaining_pred_31--;
	 				}
					(
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getAKeyword_7_1_1_0(), null); 
    }

	kw=KEYWORD_11 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getBKeyword_7_1_1_1(), null); 
    }

	kw=KEYWORD_13 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getDKeyword_7_1_1_2(), null); 
    }
)
 				)
			)  

		)+
	  	{remaining_pred_31==0}?	
	)
)
	{ 
	  pred_31 = new boolean[2];
	}

))
    |(
	kw=KEYWORD_9 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getDigitNineKeyword_8_0(), null); 
    }
(

(
	{ 
	  pred_39 = new boolean[2];
	  int remaining_pred_39 = 2;
	}
	(
		(

			( 
				{!pred_39[0]}?=>(
					{ 
	 				  pred_39[0] = true;
	 				  remaining_pred_39--;
	 				}
					(
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getAKeyword_8_1_0(), null); 
    }
)
 				)
			)  |

			( 
				{!pred_39[1]}?=>(
					{ 
	 				  pred_39[1] = true;
	 				  remaining_pred_39--;
	 				}
					(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getBKeyword_8_1_1(), null); 
    }
)
 				)
			)  

		)+
	  	{remaining_pred_39==0}?	
	)
)
	{ 
	  pred_39 = new boolean[2];
	}

)+)
    |(
	kw=KEYWORD_14 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getDigitOneDigitZeroKeyword_9_0(), null); 
    }
(

(
	{ 
	  pred_43 = new boolean[2];
	  int remaining_pred_43 = 2;
	}
	(
		(

			( 
				{!pred_43[0]}?=>(
					{ 
	 				  pred_43[0] = true;
	 				  remaining_pred_43--;
	 				}
					(
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getAKeyword_9_1_0(), null); 
    }
)
 				)
			)  |

			( 
				{!pred_43[1]}?=>(
					{ 
	 				  pred_43[1] = true;
	 				  remaining_pred_43--;
	 				}
					(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getBKeyword_9_1_1(), null); 
    }
)
 				)
			)  

		)+
	  	{remaining_pred_43==0}?	
	)
)
	{ 
	  pred_43 = new boolean[2];
	}

)*)
    |(
	kw=KEYWORD_15 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getDigitOneDigitOneKeyword_10_0(), null); 
    }
(

(
	{ 
	  pred_47 = new boolean[2];
	  int remaining_pred_47 = 2;
	}
	(
		(

			( 
				{!pred_47[0]}?=>(
					{ 
	 				  pred_47[0] = true;
	 				  remaining_pred_47--;
	 				}
					(
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getAKeyword_10_1_0(), null); 
    }
)
 				)
			)  |

			( 
				{!pred_47[1]}?=>(
					{ 
	 				  pred_47[1] = true;
	 				  remaining_pred_47--;
	 				}
					(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getBKeyword_10_1_1(), null); 
    }
)
 				)
			)  

		)+
	  	{remaining_pred_47==0}?	
	)
)
	{ 
	  pred_47 = new boolean[2];
	}

)?)
    |(
	kw=KEYWORD_16 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getDigitOneDigitTwoKeyword_11_0(), null); 
    }
(

(
	{ 
	  pred_51 = new boolean[2];
	  int remaining_pred_51 = 2;
	}
	(
		(

			( 
				{!pred_51[0]}?=>(
					{ 
	 				  pred_51[0] = true;
	 				  remaining_pred_51--;
	 				}
					(
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getAKeyword_11_1_0(), null); 
    }
)
 				)
			)  |

			( 
				{!pred_51[1]}?=>(
					{ 
	 				  pred_51[1] = true;
	 				  remaining_pred_51--;
	 				}
					(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getBKeyword_11_1_1(), null); 
    }
)
 				)
			)  

		)+
	  	{remaining_pred_51==0}?	
	)
)
	{ 
	  pred_51 = new boolean[2];
	}

)(

(
	{ 
	  pred_54 = new boolean[2];
	  int remaining_pred_54 = 2;
	}
	(
		(

			( 
				{!pred_54[0]}?=>(
					{ 
	 				  pred_54[0] = true;
	 				  remaining_pred_54--;
	 				}
					(
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getAKeyword_11_2_0(), null); 
    }
)
 				)
			)  |

			( 
				{!pred_54[1]}?=>(
					{ 
	 				  pred_54[1] = true;
	 				  remaining_pred_54--;
	 				}
					(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getBKeyword_11_2_1(), null); 
    }
)
 				)
			)  

		)+
	  	{remaining_pred_54==0}?	
	)
)
	{ 
	  pred_54 = new boolean[2];
	}

))
    |(
	kw=KEYWORD_17 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getDigitOneDigitThreeKeyword_12_0(), null); 
    }
(

(
	{ 
	  pred_58 = new boolean[2];
	  int remaining_pred_58 = 2;
	}
	(
		(

			( 
				{!pred_58[0]}?=>(
					{ 
	 				  pred_58[0] = true;
	 				  remaining_pred_58--;
	 				}
					(
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getAKeyword_12_1_0(), null); 
    }
)
 				)
			)  |

			( 
				{!pred_58[1]}?=>(
					{ 
	 				  pred_58[1] = true;
	 				  remaining_pred_58--;
	 				}
					(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getBKeyword_12_1_1(), null); 
    }
)
 				)
			)  

		)+
	  	{remaining_pred_58==0}?	
	)
)
	{ 
	  pred_58 = new boolean[2];
	}

)?
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getAKeyword_12_2(), null); 
    }

	kw=KEYWORD_11 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getBKeyword_12_3(), null); 
    }
)
    |(
	kw=KEYWORD_18 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getDigitOneDigitFourKeyword_13_0(), null); 
    }
(

(
	{ 
	  pred_64 = new boolean[2];
	  int remaining_pred_64 = 2;
	}
	(
		(

			( 
				{!pred_64[0]}?=>(
					{ 
	 				  pred_64[0] = true;
	 				  remaining_pred_64--;
	 				}
					(

(
	{ 
	  pred_65 = new boolean[2];
	  int remaining_pred_65 = 2;
	}
	(
		(

			( 
				{!pred_65[0]}?=>(
					{ 
	 				  pred_65[0] = true;
	 				  remaining_pred_65--;
	 				}
					(
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getAKeyword_13_1_0_0(), null); 
    }
)
 				)
			)  |

			( 
				{!pred_65[1]}?=>(
					{ 
	 				  pred_65[1] = true;
	 				  remaining_pred_65--;
	 				}
					(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getBKeyword_13_1_0_1(), null); 
    }
)
 				)
			)  

		)+
	  	{remaining_pred_65==0}?	
	)
)
	{ 
	  pred_65 = new boolean[2];
	}

)
 				)
			)  |

			( 
				{!pred_64[1]}?=>(
					{ 
	 				  pred_64[1] = true;
	 				  remaining_pred_64--;
	 				}
					(

(
	{ 
	  pred_68 = new boolean[2];
	  int remaining_pred_68 = 2;
	}
	(
		(

			( 
				{!pred_68[0]}?=>(
					{ 
	 				  pred_68[0] = true;
	 				  remaining_pred_68--;
	 				}
					(
	kw=KEYWORD_12 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getCKeyword_13_1_1_0(), null); 
    }
)
 				)
			)  |

			( 
				{!pred_68[1]}?=>(
					{ 
	 				  pred_68[1] = true;
	 				  remaining_pred_68--;
	 				}
					(
	kw=KEYWORD_13 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnorderedDatatypeAccess().getDKeyword_13_1_1_1(), null); 
    }
)
 				)
			)  

		)+
	  	{remaining_pred_68==0}?	
	)
)
	{ 
	  pred_68 = new boolean[2];
	}

)
 				)
			)  

		)+
	  	{remaining_pred_64==0}?	
	)
)
	{ 
	  pred_64 = new boolean[2];
	}

)+))
    ;





// Entry rule entryRuleUnorderedSerialization
entryRuleUnorderedSerialization returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnorderedSerializationRule(), currentNode); }
	 iv_ruleUnorderedSerialization=ruleUnorderedSerialization 
	 { $current=$iv_ruleUnorderedSerialization.current; } 
	 EOF 
;

// Rule UnorderedSerialization
ruleUnorderedSerialization returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
	  boolean[] pred_1 = new boolean[4];
	  boolean[] pred_8 = new boolean[2];
	  boolean[] pred_12 = new boolean[2];
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getUnorderedSerializationAccess().getUnorderedSerializationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUnorderedSerializationAccess().getUnorderedSerializationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((

(
	{ 
	  pred_1 = new boolean[4];
	  int remaining_pred_1 = 1;
	}
	(
		(

			( 
				{!pred_1[0]}?=>(
					{ 
	 				  pred_1[0] = true;
	 				  remaining_pred_1--;
	 				}
					(
	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getUnorderedSerializationAccess().getDigitOneKeyword_1_0_0_0(), null); 
    }
(
(
		lv_first_3_0=
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getUnorderedSerializationAccess().getFirstAKeyword_1_0_0_1_0(), "first"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnorderedSerializationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "first", true, "a", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?)
 				)
			)  |

			( 
				{!pred_1[1]}?=>(
					{ 
	 				  pred_1[1] = true;
	 				  
	 				}
					(
(
		lv_second_4_0=
	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getUnorderedSerializationAccess().getSecondBKeyword_1_0_1_0(), "second"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnorderedSerializationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "second", true, "b", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_1[2]}?=>(
					{ 
	 				  pred_1[2] = true;
	 				  
	 				}
					(
(
		lv_third_5_0=
	KEYWORD_12 
    {
        createLeafNode(grammarAccess.getUnorderedSerializationAccess().getThirdCKeyword_1_0_2_0(), "third"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnorderedSerializationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "third", true, "c", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_1[3]}?=>(
					{ 
	 				  pred_1[3] = true;
	 				  
	 				}
					(
(
		lv_forth_6_0=
	KEYWORD_13 
    {
        createLeafNode(grammarAccess.getUnorderedSerializationAccess().getForthDKeyword_1_0_3_0(), "forth"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnorderedSerializationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "forth", true, "d", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  

		)+
	  	{remaining_pred_1==0}?	
	)
)
	{ 
	  pred_1 = new boolean[4];
	}

)
    |(
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getUnorderedSerializationAccess().getDigitTwoKeyword_1_1_0(), null); 
    }
(

(
	{ 
	  pred_8 = new boolean[2];
	  int remaining_pred_8 = 2;
	}
	(
		(

			( 
				{!pred_8[0]}?=>(
					{ 
	 				  pred_8[0] = true;
	 				  remaining_pred_8--;
	 				}
					(
(
		lv_firstAsList_9_0=
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getUnorderedSerializationAccess().getFirstAsListAKeyword_1_1_1_0_0(), "firstAsList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnorderedSerializationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "firstAsList", lv_firstAsList_9_0, "a", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_8[1]}?=>(
					{ 
	 				  pred_8[1] = true;
	 				  remaining_pred_8--;
	 				}
					(
(
		lv_secondAsList_10_0=
	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getUnorderedSerializationAccess().getSecondAsListBKeyword_1_1_1_1_0(), "secondAsList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnorderedSerializationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "secondAsList", lv_secondAsList_10_0, "b", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  

		)+
	  	{remaining_pred_8==0}?	
	)
)
	{ 
	  pred_8 = new boolean[2];
	}

)*)
    |(
	KEYWORD_3 
    {
        createLeafNode(grammarAccess.getUnorderedSerializationAccess().getDigitThreeKeyword_1_2_0(), null); 
    }
(

(
	{ 
	  pred_12 = new boolean[2];
	  int remaining_pred_12 = 2;
	}
	(
		(

			( 
				{!pred_12[0]}?=>(
					{ 
	 				  pred_12[0] = true;
	 				  remaining_pred_12--;
	 				}
					(
(
		lv_firstAsList_13_0=
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getUnorderedSerializationAccess().getFirstAsListAKeyword_1_2_1_0_0(), "firstAsList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnorderedSerializationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "firstAsList", lv_firstAsList_13_0, "a", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)+
 				)
			)  |

			( 
				{!pred_12[1]}?=>(
					{ 
	 				  pred_12[1] = true;
	 				  remaining_pred_12--;
	 				}
					(
(
		lv_second_14_0=
	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getUnorderedSerializationAccess().getSecondBKeyword_1_2_1_1_0(), "second"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnorderedSerializationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "second", true, "b", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  

		)+
	  	{remaining_pred_12==0}?	
	)
)
	{ 
	  pred_12 = new boolean[2];
	}

)*)))
;





