/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.unorderedGroups.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.UnorderedGroup;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;

import org.eclipse.xtext.parser.unorderedGroups.services.UnorderedGroupsTestLanguageGrammarAccess.UnorderedSerializationElements;

public final class UnorderedGroupsTestLanguageUnorderedSerializationConsumer extends NonTerminalConsumer {

	private UnorderedSerializationElements rule;	

	private IElementConsumer group$1$Consumer;

	private IElementConsumer action$2$Consumer;

	private IElementConsumer alternatives$4$Consumer;

	private IElementConsumer unorderedGroup$5$Consumer;

	private IElementConsumer group$6$Consumer;

	private IElementConsumer keyword$7$Consumer;

	private IElementConsumer assignment$8$Consumer;

	private IElementConsumer keyword$9$Consumer;

	private IElementConsumer assignment$10$Consumer;

	private IElementConsumer keyword$11$Consumer;

	private IElementConsumer assignment$12$Consumer;

	private IElementConsumer keyword$13$Consumer;

	private IElementConsumer assignment$14$Consumer;

	private IElementConsumer keyword$15$Consumer;

	private IElementConsumer group$16$Consumer;

	private IElementConsumer keyword$17$Consumer;

	private IElementConsumer unorderedGroup$18$Consumer;

	private IElementConsumer assignment$19$Consumer;

	private IElementConsumer keyword$20$Consumer;

	private IElementConsumer assignment$21$Consumer;

	private IElementConsumer keyword$22$Consumer;

	private IElementConsumer group$23$Consumer;

	private IElementConsumer keyword$24$Consumer;

	private IElementConsumer unorderedGroup$25$Consumer;

	private IElementConsumer assignment$26$Consumer;

	private IElementConsumer keyword$27$Consumer;

	private IElementConsumer assignment$28$Consumer;

	private IElementConsumer keyword$29$Consumer;

	private ICharacterClass keyword$7$Delimiter;

	private ICharacterClass keyword$9$Delimiter;

	private ICharacterClass keyword$11$Delimiter;

	private ICharacterClass keyword$13$Delimiter;

	private ICharacterClass keyword$15$Delimiter;

	private ICharacterClass keyword$17$Delimiter;

	private ICharacterClass keyword$20$Delimiter;

	private ICharacterClass keyword$22$Delimiter;

	private ICharacterClass keyword$24$Delimiter;

	private ICharacterClass keyword$27$Delimiter;

	private ICharacterClass keyword$29$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(action$2$Consumer);
			acceptor.accept(alternatives$4$Consumer);
		}
	}

	protected class Action$2$Consumer extends ElementConsumer<Action> {
		
		protected Action$2$Consumer(final Action action) {
			super(action);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			consumeAction(getElement(), false);
			return SUCCESS;
		}
	}

	protected class Alternatives$4$Consumer extends AlternativesConsumer {
		
		protected Alternatives$4$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(unorderedGroup$5$Consumer);
			acceptor.accept(group$16$Consumer);
			acceptor.accept(group$23$Consumer);
		}
	}

	protected class UnorderedGroup$5$Consumer extends UnorderedGroupConsumer {
		
		protected UnorderedGroup$5$Consumer(final UnorderedGroup unorderedGroup) {
			super(unorderedGroup);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$6$Consumer);
			acceptor.accept(assignment$10$Consumer);
			acceptor.accept(assignment$12$Consumer);
			acceptor.accept(assignment$14$Consumer);
		}
	}

	protected class Group$6$Consumer extends GroupConsumer {
		
		protected Group$6$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$7$Consumer);
			acceptor.accept(assignment$8$Consumer);
		}
	}

	protected class Keyword$7$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$7$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$7$Delimiter(), optional);
		}
	}

	protected class Assignment$8$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$8$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$9$Consumer;
		}
	}

	protected class Keyword$9$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$9$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "first", false, true, getKeyword$9$Delimiter(), optional);
		}
	}

	protected class Assignment$10$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$10$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$11$Consumer;
		}
	}

	protected class Keyword$11$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$11$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "second", false, true, getKeyword$11$Delimiter(), optional);
		}
	}

	protected class Assignment$12$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$12$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$13$Consumer;
		}
	}

	protected class Keyword$13$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$13$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "third", false, true, getKeyword$13$Delimiter(), optional);
		}
	}

	protected class Assignment$14$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$14$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$15$Consumer;
		}
	}

	protected class Keyword$15$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$15$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "forth", false, true, getKeyword$15$Delimiter(), optional);
		}
	}

	protected class Group$16$Consumer extends GroupConsumer {
		
		protected Group$16$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$17$Consumer);
			acceptor.accept(unorderedGroup$18$Consumer);
		}
	}

	protected class Keyword$17$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$17$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$17$Delimiter(), optional);
		}
	}

	protected class UnorderedGroup$18$Consumer extends LoopUnorderedGroupConsumer {
		
		protected UnorderedGroup$18$Consumer(final UnorderedGroup unorderedGroup) {
			super(unorderedGroup);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$19$Consumer);
			acceptor.accept(assignment$21$Consumer);
		}
	}

	protected class Assignment$19$Consumer extends AssignmentConsumer {
		
		protected Assignment$19$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$20$Consumer;
		}
	}

	protected class Keyword$20$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$20$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "firstAsList", true, false, getKeyword$20$Delimiter(), optional);
		}
	}

	protected class Assignment$21$Consumer extends AssignmentConsumer {
		
		protected Assignment$21$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$22$Consumer;
		}
	}

	protected class Keyword$22$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$22$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "secondAsList", true, false, getKeyword$22$Delimiter(), optional);
		}
	}

	protected class Group$23$Consumer extends GroupConsumer {
		
		protected Group$23$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$24$Consumer);
			acceptor.accept(unorderedGroup$25$Consumer);
		}
	}

	protected class Keyword$24$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$24$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$24$Delimiter(), optional);
		}
	}

	protected class UnorderedGroup$25$Consumer extends LoopUnorderedGroupConsumer {
		
		protected UnorderedGroup$25$Consumer(final UnorderedGroup unorderedGroup) {
			super(unorderedGroup);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$26$Consumer);
			acceptor.accept(assignment$28$Consumer);
		}
	}

	protected class Assignment$26$Consumer extends MandatoryLoopAssignmentConsumer {
		
		protected Assignment$26$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$27$Consumer;
		}
	}

	protected class Keyword$27$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$27$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "firstAsList", true, false, getKeyword$27$Delimiter(), optional);
		}
	}

	protected class Assignment$28$Consumer extends AssignmentConsumer {
		
		protected Assignment$28$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$29$Consumer;
		}
	}

	protected class Keyword$29$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$29$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "second", false, true, getKeyword$29$Delimiter(), optional);
		}
	}

	public UnorderedGroupsTestLanguageUnorderedSerializationConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$7$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$9$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$11$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$13$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$15$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$17$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$20$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$22$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$24$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$27$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$29$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public UnorderedSerializationElements getRule() {
		return rule;
	}
	
	public void setRule(UnorderedSerializationElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		action$2$Consumer = new Action$2$Consumer(rule.getUnorderedSerializationAction_0());
		alternatives$4$Consumer = new Alternatives$4$Consumer(rule.getAlternatives_1());
		unorderedGroup$5$Consumer = new UnorderedGroup$5$Consumer(rule.getUnorderedGroup_1_0());
		group$6$Consumer = new Group$6$Consumer(rule.getGroup_1_0_0());
		keyword$7$Consumer = new Keyword$7$Consumer(rule.getDigitOneKeyword_1_0_0_0());
		assignment$8$Consumer = new Assignment$8$Consumer(rule.getFirstAssignment_1_0_0_1());
		keyword$9$Consumer = new Keyword$9$Consumer(rule.getFirstAKeyword_1_0_0_1_0());
		assignment$10$Consumer = new Assignment$10$Consumer(rule.getSecondAssignment_1_0_1());
		keyword$11$Consumer = new Keyword$11$Consumer(rule.getSecondBKeyword_1_0_1_0());
		assignment$12$Consumer = new Assignment$12$Consumer(rule.getThirdAssignment_1_0_2());
		keyword$13$Consumer = new Keyword$13$Consumer(rule.getThirdCKeyword_1_0_2_0());
		assignment$14$Consumer = new Assignment$14$Consumer(rule.getForthAssignment_1_0_3());
		keyword$15$Consumer = new Keyword$15$Consumer(rule.getForthDKeyword_1_0_3_0());
		group$16$Consumer = new Group$16$Consumer(rule.getGroup_1_1());
		keyword$17$Consumer = new Keyword$17$Consumer(rule.getDigitTwoKeyword_1_1_0());
		unorderedGroup$18$Consumer = new UnorderedGroup$18$Consumer(rule.getUnorderedGroup_1_1_1());
		assignment$19$Consumer = new Assignment$19$Consumer(rule.getFirstAsListAssignment_1_1_1_0());
		keyword$20$Consumer = new Keyword$20$Consumer(rule.getFirstAsListAKeyword_1_1_1_0_0());
		assignment$21$Consumer = new Assignment$21$Consumer(rule.getSecondAsListAssignment_1_1_1_1());
		keyword$22$Consumer = new Keyword$22$Consumer(rule.getSecondAsListBKeyword_1_1_1_1_0());
		group$23$Consumer = new Group$23$Consumer(rule.getGroup_1_2());
		keyword$24$Consumer = new Keyword$24$Consumer(rule.getDigitThreeKeyword_1_2_0());
		unorderedGroup$25$Consumer = new UnorderedGroup$25$Consumer(rule.getUnorderedGroup_1_2_1());
		assignment$26$Consumer = new Assignment$26$Consumer(rule.getFirstAsListAssignment_1_2_1_0());
		keyword$27$Consumer = new Keyword$27$Consumer(rule.getFirstAsListAKeyword_1_2_1_0_0());
		assignment$28$Consumer = new Assignment$28$Consumer(rule.getSecondAssignment_1_2_1_1());
		keyword$29$Consumer = new Keyword$29$Consumer(rule.getSecondBKeyword_1_2_1_1_0());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public ICharacterClass getKeyword$7$Delimiter() {
		return keyword$7$Delimiter;
	}
	
	public void setKeyword$7$Delimiter(ICharacterClass characterClass) {
		keyword$7$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$9$Delimiter() {
		return keyword$9$Delimiter;
	}
	
	public void setKeyword$9$Delimiter(ICharacterClass characterClass) {
		keyword$9$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$11$Delimiter() {
		return keyword$11$Delimiter;
	}
	
	public void setKeyword$11$Delimiter(ICharacterClass characterClass) {
		keyword$11$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$13$Delimiter() {
		return keyword$13$Delimiter;
	}
	
	public void setKeyword$13$Delimiter(ICharacterClass characterClass) {
		keyword$13$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$15$Delimiter() {
		return keyword$15$Delimiter;
	}
	
	public void setKeyword$15$Delimiter(ICharacterClass characterClass) {
		keyword$15$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$17$Delimiter() {
		return keyword$17$Delimiter;
	}
	
	public void setKeyword$17$Delimiter(ICharacterClass characterClass) {
		keyword$17$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$20$Delimiter() {
		return keyword$20$Delimiter;
	}
	
	public void setKeyword$20$Delimiter(ICharacterClass characterClass) {
		keyword$20$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$22$Delimiter() {
		return keyword$22$Delimiter;
	}
	
	public void setKeyword$22$Delimiter(ICharacterClass characterClass) {
		keyword$22$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$24$Delimiter() {
		return keyword$24$Delimiter;
	}
	
	public void setKeyword$24$Delimiter(ICharacterClass characterClass) {
		keyword$24$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$27$Delimiter() {
		return keyword$27$Delimiter;
	}
	
	public void setKeyword$27$Delimiter(ICharacterClass characterClass) {
		keyword$27$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$29$Delimiter() {
		return keyword$29$Delimiter;
	}
	
	public void setKeyword$29$Delimiter(ICharacterClass characterClass) {
		keyword$29$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
