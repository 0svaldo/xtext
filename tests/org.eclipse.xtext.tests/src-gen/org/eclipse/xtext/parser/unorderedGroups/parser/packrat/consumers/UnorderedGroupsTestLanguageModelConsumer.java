/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.unorderedGroups.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.UnorderedGroup;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;

import org.eclipse.xtext.parser.unorderedGroups.services.UnorderedGroupsTestLanguageGrammarAccess.ModelElements;

@SuppressWarnings("all")
public final class UnorderedGroupsTestLanguageModelConsumer extends NonTerminalConsumer {

	private ModelElements rule;	

	private INonTerminalConsumer nestedModelConsumer;

	private INonTerminalConsumer unorderedDatatypeConsumer;

	private INonTerminalConsumer unorderedSerializationConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer action$2$Consumer;

	private IElementConsumer alternatives$4$Consumer;

	private IElementConsumer group$5$Consumer;

	private IElementConsumer keyword$6$Consumer;

	private IElementConsumer unorderedGroup$7$Consumer;

	private IElementConsumer assignment$8$Consumer;

	private IElementConsumer keyword$9$Consumer;

	private IElementConsumer assignment$10$Consumer;

	private IElementConsumer keyword$11$Consumer;

	private IElementConsumer group$12$Consumer;

	private IElementConsumer keyword$13$Consumer;

	private IElementConsumer unorderedGroup$14$Consumer;

	private IElementConsumer assignment$15$Consumer;

	private IElementConsumer keyword$16$Consumer;

	private IElementConsumer assignment$17$Consumer;

	private IElementConsumer keyword$18$Consumer;

	private IElementConsumer assignment$19$Consumer;

	private IElementConsumer keyword$20$Consumer;

	private IElementConsumer assignment$21$Consumer;

	private IElementConsumer keyword$22$Consumer;

	private IElementConsumer group$23$Consumer;

	private IElementConsumer keyword$24$Consumer;

	private IElementConsumer unorderedGroup$25$Consumer;

	private IElementConsumer assignment$26$Consumer;

	private IElementConsumer keyword$27$Consumer;

	private IElementConsumer assignment$28$Consumer;

	private IElementConsumer keyword$29$Consumer;

	private IElementConsumer group$30$Consumer;

	private IElementConsumer keyword$31$Consumer;

	private IElementConsumer unorderedGroup$32$Consumer;

	private IElementConsumer assignment$33$Consumer;

	private IElementConsumer keyword$34$Consumer;

	private IElementConsumer assignment$35$Consumer;

	private IElementConsumer keyword$36$Consumer;

	private IElementConsumer group$37$Consumer;

	private IElementConsumer keyword$38$Consumer;

	private IElementConsumer unorderedGroup$39$Consumer;

	private IElementConsumer assignment$40$Consumer;

	private IElementConsumer keyword$41$Consumer;

	private IElementConsumer assignment$42$Consumer;

	private IElementConsumer keyword$43$Consumer;

	private IElementConsumer group$44$Consumer;

	private IElementConsumer keyword$45$Consumer;

	private IElementConsumer unorderedGroup$46$Consumer;

	private IElementConsumer assignment$47$Consumer;

	private IElementConsumer keyword$48$Consumer;

	private IElementConsumer assignment$49$Consumer;

	private IElementConsumer keyword$50$Consumer;

	private IElementConsumer group$51$Consumer;

	private IElementConsumer keyword$52$Consumer;

	private IElementConsumer unorderedGroup$53$Consumer;

	private IElementConsumer assignment$54$Consumer;

	private IElementConsumer keyword$55$Consumer;

	private IElementConsumer assignment$56$Consumer;

	private IElementConsumer keyword$57$Consumer;

	private IElementConsumer group$58$Consumer;

	private IElementConsumer keyword$59$Consumer;

	private IElementConsumer unorderedGroup$60$Consumer;

	private IElementConsumer group$61$Consumer;

	private IElementConsumer keyword$62$Consumer;

	private IElementConsumer keyword$63$Consumer;

	private IElementConsumer assignment$64$Consumer;

	private IElementConsumer keyword$65$Consumer;

	private IElementConsumer group$66$Consumer;

	private IElementConsumer keyword$67$Consumer;

	private IElementConsumer keyword$68$Consumer;

	private IElementConsumer assignment$69$Consumer;

	private IElementConsumer keyword$70$Consumer;

	private IElementConsumer group$71$Consumer;

	private IElementConsumer keyword$72$Consumer;

	private IElementConsumer unorderedGroup$73$Consumer;

	private IElementConsumer assignment$74$Consumer;

	private IElementConsumer keyword$75$Consumer;

	private IElementConsumer assignment$76$Consumer;

	private IElementConsumer keyword$77$Consumer;

	private IElementConsumer group$78$Consumer;

	private IElementConsumer keyword$79$Consumer;

	private IElementConsumer unorderedGroup$80$Consumer;

	private IElementConsumer assignment$81$Consumer;

	private IElementConsumer keyword$82$Consumer;

	private IElementConsumer assignment$83$Consumer;

	private IElementConsumer keyword$84$Consumer;

	private IElementConsumer group$85$Consumer;

	private IElementConsumer keyword$86$Consumer;

	private IElementConsumer unorderedGroup$87$Consumer;

	private IElementConsumer assignment$88$Consumer;

	private IElementConsumer keyword$89$Consumer;

	private IElementConsumer assignment$90$Consumer;

	private IElementConsumer keyword$91$Consumer;

	private IElementConsumer group$92$Consumer;

	private IElementConsumer keyword$93$Consumer;

	private IElementConsumer unorderedGroup$94$Consumer;

	private IElementConsumer assignment$95$Consumer;

	private IElementConsumer keyword$96$Consumer;

	private IElementConsumer assignment$97$Consumer;

	private IElementConsumer keyword$98$Consumer;

	private IElementConsumer unorderedGroup$99$Consumer;

	private IElementConsumer assignment$100$Consumer;

	private IElementConsumer keyword$101$Consumer;

	private IElementConsumer assignment$102$Consumer;

	private IElementConsumer keyword$103$Consumer;

	private IElementConsumer group$104$Consumer;

	private IElementConsumer keyword$105$Consumer;

	private IElementConsumer unorderedGroup$106$Consumer;

	private IElementConsumer assignment$107$Consumer;

	private IElementConsumer keyword$108$Consumer;

	private IElementConsumer assignment$109$Consumer;

	private IElementConsumer keyword$110$Consumer;

	private IElementConsumer assignment$111$Consumer;

	private IElementConsumer keyword$112$Consumer;

	private IElementConsumer assignment$113$Consumer;

	private IElementConsumer keyword$114$Consumer;

	private IElementConsumer group$115$Consumer;

	private IElementConsumer keyword$116$Consumer;

	private IElementConsumer unorderedGroup$117$Consumer;

	private IElementConsumer unorderedGroup$118$Consumer;

	private IElementConsumer assignment$119$Consumer;

	private IElementConsumer keyword$120$Consumer;

	private IElementConsumer assignment$121$Consumer;

	private IElementConsumer keyword$122$Consumer;

	private IElementConsumer unorderedGroup$123$Consumer;

	private IElementConsumer assignment$124$Consumer;

	private IElementConsumer keyword$125$Consumer;

	private IElementConsumer assignment$126$Consumer;

	private IElementConsumer keyword$127$Consumer;

	private IElementConsumer group$128$Consumer;

	private IElementConsumer keyword$129$Consumer;

	private IElementConsumer assignment$130$Consumer;

	private IElementConsumer ruleCall$131$Consumer;

	private IElementConsumer group$132$Consumer;

	private IElementConsumer keyword$133$Consumer;

	private IElementConsumer assignment$134$Consumer;

	private IElementConsumer ruleCall$135$Consumer;

	private IElementConsumer group$136$Consumer;

	private IElementConsumer keyword$137$Consumer;

	private IElementConsumer assignment$138$Consumer;

	private IElementConsumer ruleCall$139$Consumer;

	private ICharacterClass keyword$98$Delimiter;

	private ICharacterClass keyword$101$Delimiter;

	private ICharacterClass keyword$103$Delimiter;

	private ICharacterClass keyword$105$Delimiter;

	private ICharacterClass keyword$9$Delimiter;

	private ICharacterClass keyword$108$Delimiter;

	private ICharacterClass keyword$110$Delimiter;

	private ICharacterClass keyword$112$Delimiter;

	private ICharacterClass keyword$114$Delimiter;

	private ICharacterClass keyword$116$Delimiter;

	private ICharacterClass keyword$120$Delimiter;

	private ICharacterClass keyword$122$Delimiter;

	private ICharacterClass keyword$125$Delimiter;

	private ICharacterClass keyword$127$Delimiter;

	private ICharacterClass keyword$11$Delimiter;

	private ICharacterClass keyword$129$Delimiter;

	private ICharacterClass keyword$133$Delimiter;

	private ICharacterClass keyword$137$Delimiter;

	private ICharacterClass keyword$13$Delimiter;

	private ICharacterClass keyword$16$Delimiter;

	private ICharacterClass keyword$18$Delimiter;

	private ICharacterClass keyword$20$Delimiter;

	private ICharacterClass keyword$22$Delimiter;

	private ICharacterClass keyword$24$Delimiter;

	private ICharacterClass keyword$27$Delimiter;

	private ICharacterClass keyword$29$Delimiter;

	private ICharacterClass keyword$31$Delimiter;

	private ICharacterClass keyword$34$Delimiter;

	private ICharacterClass keyword$36$Delimiter;

	private ICharacterClass keyword$38$Delimiter;

	private ICharacterClass keyword$41$Delimiter;

	private ICharacterClass keyword$43$Delimiter;

	private ICharacterClass keyword$45$Delimiter;

	private ICharacterClass keyword$48$Delimiter;

	private ICharacterClass keyword$50$Delimiter;

	private ICharacterClass keyword$52$Delimiter;

	private ICharacterClass keyword$55$Delimiter;

	private ICharacterClass keyword$57$Delimiter;

	private ICharacterClass keyword$59$Delimiter;

	private ICharacterClass keyword$62$Delimiter;

	private ICharacterClass keyword$63$Delimiter;

	private ICharacterClass keyword$65$Delimiter;

	private ICharacterClass keyword$67$Delimiter;

	private ICharacterClass keyword$68$Delimiter;

	private ICharacterClass keyword$70$Delimiter;

	private ICharacterClass keyword$72$Delimiter;

	private ICharacterClass keyword$75$Delimiter;

	private ICharacterClass keyword$77$Delimiter;

	private ICharacterClass keyword$6$Delimiter;

	private ICharacterClass keyword$79$Delimiter;

	private ICharacterClass keyword$82$Delimiter;

	private ICharacterClass keyword$84$Delimiter;

	private ICharacterClass keyword$86$Delimiter;

	private ICharacterClass keyword$89$Delimiter;

	private ICharacterClass keyword$91$Delimiter;

	private ICharacterClass keyword$93$Delimiter;

	private ICharacterClass keyword$96$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(action$2$Consumer);
			acceptor.accept(alternatives$4$Consumer);
		}
	}

	protected class Action$2$Consumer extends ElementConsumer<Action> {
		
		protected Action$2$Consumer(final Action action) {
			super(action);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			consumeAction(getElement(), false);
			return SUCCESS;
		}
	}

	protected class Alternatives$4$Consumer extends AlternativesConsumer {
		
		protected Alternatives$4$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$5$Consumer);
			acceptor.accept(group$12$Consumer);
			acceptor.accept(group$23$Consumer);
			acceptor.accept(group$30$Consumer);
			acceptor.accept(group$37$Consumer);
			acceptor.accept(group$44$Consumer);
			acceptor.accept(group$51$Consumer);
			acceptor.accept(group$58$Consumer);
			acceptor.accept(group$71$Consumer);
			acceptor.accept(group$78$Consumer);
			acceptor.accept(group$85$Consumer);
			acceptor.accept(group$92$Consumer);
			acceptor.accept(group$104$Consumer);
			acceptor.accept(group$115$Consumer);
			acceptor.accept(group$128$Consumer);
			acceptor.accept(group$132$Consumer);
			acceptor.accept(group$136$Consumer);
		}
	}

	protected class Group$5$Consumer extends GroupConsumer {
		
		protected Group$5$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$6$Consumer);
			acceptor.accept(unorderedGroup$7$Consumer);
		}
	}

	protected class Keyword$6$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$6$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$6$Delimiter(), optional);
		}
	}

	protected class UnorderedGroup$7$Consumer extends UnorderedGroupConsumer {
		
		protected UnorderedGroup$7$Consumer(final UnorderedGroup unorderedGroup) {
			super(unorderedGroup);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$8$Consumer);
			acceptor.accept(assignment$10$Consumer);
		}
	}

	protected class Assignment$8$Consumer extends AssignmentConsumer {
		
		protected Assignment$8$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$9$Consumer;
		}
	}

	protected class Keyword$9$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$9$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "first", false, true, getKeyword$9$Delimiter(), optional);
		}
	}

	protected class Assignment$10$Consumer extends AssignmentConsumer {
		
		protected Assignment$10$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$11$Consumer;
		}
	}

	protected class Keyword$11$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$11$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "second", false, true, getKeyword$11$Delimiter(), optional);
		}
	}

	protected class Group$12$Consumer extends GroupConsumer {
		
		protected Group$12$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$13$Consumer);
			acceptor.accept(unorderedGroup$14$Consumer);
		}
	}

	protected class Keyword$13$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$13$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$13$Delimiter(), optional);
		}
	}

	protected class UnorderedGroup$14$Consumer extends UnorderedGroupConsumer {
		
		protected UnorderedGroup$14$Consumer(final UnorderedGroup unorderedGroup) {
			super(unorderedGroup);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$15$Consumer);
			acceptor.accept(assignment$17$Consumer);
			acceptor.accept(assignment$19$Consumer);
			acceptor.accept(assignment$21$Consumer);
		}
	}

	protected class Assignment$15$Consumer extends AssignmentConsumer {
		
		protected Assignment$15$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$16$Consumer;
		}
	}

	protected class Keyword$16$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$16$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "first", false, true, getKeyword$16$Delimiter(), optional);
		}
	}

	protected class Assignment$17$Consumer extends AssignmentConsumer {
		
		protected Assignment$17$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$18$Consumer;
		}
	}

	protected class Keyword$18$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$18$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "second", false, true, getKeyword$18$Delimiter(), optional);
		}
	}

	protected class Assignment$19$Consumer extends AssignmentConsumer {
		
		protected Assignment$19$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$20$Consumer;
		}
	}

	protected class Keyword$20$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$20$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "third", false, true, getKeyword$20$Delimiter(), optional);
		}
	}

	protected class Assignment$21$Consumer extends AssignmentConsumer {
		
		protected Assignment$21$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$22$Consumer;
		}
	}

	protected class Keyword$22$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$22$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "forth", false, true, getKeyword$22$Delimiter(), optional);
		}
	}

	protected class Group$23$Consumer extends GroupConsumer {
		
		protected Group$23$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$24$Consumer);
			acceptor.accept(unorderedGroup$25$Consumer);
		}
	}

	protected class Keyword$24$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$24$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$24$Delimiter(), optional);
		}
	}

	protected class UnorderedGroup$25$Consumer extends UnorderedGroupConsumer {
		
		protected UnorderedGroup$25$Consumer(final UnorderedGroup unorderedGroup) {
			super(unorderedGroup);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$26$Consumer);
			acceptor.accept(assignment$28$Consumer);
		}
	}

	protected class Assignment$26$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$26$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$27$Consumer;
		}
	}

	protected class Keyword$27$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$27$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "first", false, true, getKeyword$27$Delimiter(), optional);
		}
	}

	protected class Assignment$28$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$28$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$29$Consumer;
		}
	}

	protected class Keyword$29$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$29$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "second", false, true, getKeyword$29$Delimiter(), optional);
		}
	}

	protected class Group$30$Consumer extends GroupConsumer {
		
		protected Group$30$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$31$Consumer);
			acceptor.accept(unorderedGroup$32$Consumer);
		}
	}

	protected class Keyword$31$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$31$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$31$Delimiter(), optional);
		}
	}

	protected class UnorderedGroup$32$Consumer extends UnorderedGroupConsumer {
		
		protected UnorderedGroup$32$Consumer(final UnorderedGroup unorderedGroup) {
			super(unorderedGroup);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$33$Consumer);
			acceptor.accept(assignment$35$Consumer);
		}
	}

	protected class Assignment$33$Consumer extends AssignmentConsumer {
		
		protected Assignment$33$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$34$Consumer;
		}
	}

	protected class Keyword$34$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$34$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "first", false, true, getKeyword$34$Delimiter(), optional);
		}
	}

	protected class Assignment$35$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$35$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$36$Consumer;
		}
	}

	protected class Keyword$36$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$36$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "second", false, true, getKeyword$36$Delimiter(), optional);
		}
	}

	protected class Group$37$Consumer extends GroupConsumer {
		
		protected Group$37$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$38$Consumer);
			acceptor.accept(unorderedGroup$39$Consumer);
		}
	}

	protected class Keyword$38$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$38$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$38$Delimiter(), optional);
		}
	}

	protected class UnorderedGroup$39$Consumer extends UnorderedGroupConsumer {
		
		protected UnorderedGroup$39$Consumer(final UnorderedGroup unorderedGroup) {
			super(unorderedGroup);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$40$Consumer);
			acceptor.accept(assignment$42$Consumer);
		}
	}

	protected class Assignment$40$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$40$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$41$Consumer;
		}
	}

	protected class Keyword$41$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$41$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "first", false, true, getKeyword$41$Delimiter(), optional);
		}
	}

	protected class Assignment$42$Consumer extends AssignmentConsumer {
		
		protected Assignment$42$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$43$Consumer;
		}
	}

	protected class Keyword$43$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$43$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "second", false, true, getKeyword$43$Delimiter(), optional);
		}
	}

	protected class Group$44$Consumer extends GroupConsumer {
		
		protected Group$44$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$45$Consumer);
			acceptor.accept(unorderedGroup$46$Consumer);
		}
	}

	protected class Keyword$45$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$45$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$45$Delimiter(), optional);
		}
	}

	protected class UnorderedGroup$46$Consumer extends UnorderedGroupConsumer {
		
		protected UnorderedGroup$46$Consumer(final UnorderedGroup unorderedGroup) {
			super(unorderedGroup);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$47$Consumer);
			acceptor.accept(assignment$49$Consumer);
		}
	}

	protected class Assignment$47$Consumer extends MandatoryLoopAssignmentConsumer {
		
		protected Assignment$47$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$48$Consumer;
		}
	}

	protected class Keyword$48$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$48$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "firstAsList", true, false, getKeyword$48$Delimiter(), optional);
		}
	}

	protected class Assignment$49$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$49$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$50$Consumer;
		}
	}

	protected class Keyword$50$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$50$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "secondAsList", true, false, getKeyword$50$Delimiter(), optional);
		}
	}

	protected class Group$51$Consumer extends GroupConsumer {
		
		protected Group$51$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$52$Consumer);
			acceptor.accept(unorderedGroup$53$Consumer);
		}
	}

	protected class Keyword$52$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$52$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$52$Delimiter(), optional);
		}
	}

	protected class UnorderedGroup$53$Consumer extends UnorderedGroupConsumer {
		
		protected UnorderedGroup$53$Consumer(final UnorderedGroup unorderedGroup) {
			super(unorderedGroup);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$54$Consumer);
			acceptor.accept(assignment$56$Consumer);
		}
	}

	protected class Assignment$54$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$54$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$55$Consumer;
		}
	}

	protected class Keyword$55$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$55$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "firstAsList", true, false, getKeyword$55$Delimiter(), optional);
		}
	}

	protected class Assignment$56$Consumer extends MandatoryLoopAssignmentConsumer {
		
		protected Assignment$56$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$57$Consumer;
		}
	}

	protected class Keyword$57$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$57$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "secondAsList", true, false, getKeyword$57$Delimiter(), optional);
		}
	}

	protected class Group$58$Consumer extends GroupConsumer {
		
		protected Group$58$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$59$Consumer);
			acceptor.accept(unorderedGroup$60$Consumer);
		}
	}

	protected class Keyword$59$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$59$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$59$Delimiter(), optional);
		}
	}

	protected class UnorderedGroup$60$Consumer extends UnorderedGroupConsumer {
		
		protected UnorderedGroup$60$Consumer(final UnorderedGroup unorderedGroup) {
			super(unorderedGroup);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$61$Consumer);
			acceptor.accept(group$66$Consumer);
		}
	}

	protected class Group$61$Consumer extends GroupConsumer {
		
		protected Group$61$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$62$Consumer);
			acceptor.accept(keyword$63$Consumer);
			acceptor.accept(assignment$64$Consumer);
		}
	}

	protected class Keyword$62$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$62$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$62$Delimiter(), optional);
		}
	}

	protected class Keyword$63$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$63$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$63$Delimiter(), optional);
		}
	}

	protected class Assignment$64$Consumer extends AssignmentConsumer {
		
		protected Assignment$64$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$65$Consumer;
		}
	}

	protected class Keyword$65$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$65$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "first", false, true, getKeyword$65$Delimiter(), optional);
		}
	}

	protected class Group$66$Consumer extends GroupConsumer {
		
		protected Group$66$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$67$Consumer);
			acceptor.accept(keyword$68$Consumer);
			acceptor.accept(assignment$69$Consumer);
		}
	}

	protected class Keyword$67$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$67$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$67$Delimiter(), optional);
		}
	}

	protected class Keyword$68$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$68$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$68$Delimiter(), optional);
		}
	}

	protected class Assignment$69$Consumer extends AssignmentConsumer {
		
		protected Assignment$69$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$70$Consumer;
		}
	}

	protected class Keyword$70$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$70$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "second", false, true, getKeyword$70$Delimiter(), optional);
		}
	}

	protected class Group$71$Consumer extends GroupConsumer {
		
		protected Group$71$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$72$Consumer);
			acceptor.accept(unorderedGroup$73$Consumer);
		}
	}

	protected class Keyword$72$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$72$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$72$Delimiter(), optional);
		}
	}

	protected class UnorderedGroup$73$Consumer extends MandatoryLoopUnorderedGroupConsumer {
		
		protected UnorderedGroup$73$Consumer(final UnorderedGroup unorderedGroup) {
			super(unorderedGroup);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$74$Consumer);
			acceptor.accept(assignment$76$Consumer);
		}
	}

	protected class Assignment$74$Consumer extends AssignmentConsumer {
		
		protected Assignment$74$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$75$Consumer;
		}
	}

	protected class Keyword$75$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$75$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "firstAsList", true, false, getKeyword$75$Delimiter(), optional);
		}
	}

	protected class Assignment$76$Consumer extends AssignmentConsumer {
		
		protected Assignment$76$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$77$Consumer;
		}
	}

	protected class Keyword$77$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$77$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "secondAsList", true, false, getKeyword$77$Delimiter(), optional);
		}
	}

	protected class Group$78$Consumer extends GroupConsumer {
		
		protected Group$78$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$79$Consumer);
			acceptor.accept(unorderedGroup$80$Consumer);
		}
	}

	protected class Keyword$79$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$79$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$79$Delimiter(), optional);
		}
	}

	protected class UnorderedGroup$80$Consumer extends LoopUnorderedGroupConsumer {
		
		protected UnorderedGroup$80$Consumer(final UnorderedGroup unorderedGroup) {
			super(unorderedGroup);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$81$Consumer);
			acceptor.accept(assignment$83$Consumer);
		}
	}

	protected class Assignment$81$Consumer extends AssignmentConsumer {
		
		protected Assignment$81$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$82$Consumer;
		}
	}

	protected class Keyword$82$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$82$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "firstAsList", true, false, getKeyword$82$Delimiter(), optional);
		}
	}

	protected class Assignment$83$Consumer extends AssignmentConsumer {
		
		protected Assignment$83$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$84$Consumer;
		}
	}

	protected class Keyword$84$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$84$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "secondAsList", true, false, getKeyword$84$Delimiter(), optional);
		}
	}

	protected class Group$85$Consumer extends GroupConsumer {
		
		protected Group$85$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$86$Consumer);
			acceptor.accept(unorderedGroup$87$Consumer);
		}
	}

	protected class Keyword$86$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$86$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$86$Delimiter(), optional);
		}
	}

	protected class UnorderedGroup$87$Consumer extends OptionalUnorderedGroupConsumer {
		
		protected UnorderedGroup$87$Consumer(final UnorderedGroup unorderedGroup) {
			super(unorderedGroup);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$88$Consumer);
			acceptor.accept(assignment$90$Consumer);
		}
	}

	protected class Assignment$88$Consumer extends AssignmentConsumer {
		
		protected Assignment$88$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$89$Consumer;
		}
	}

	protected class Keyword$89$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$89$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "first", false, true, getKeyword$89$Delimiter(), optional);
		}
	}

	protected class Assignment$90$Consumer extends AssignmentConsumer {
		
		protected Assignment$90$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$91$Consumer;
		}
	}

	protected class Keyword$91$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$91$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "second", false, true, getKeyword$91$Delimiter(), optional);
		}
	}

	protected class Group$92$Consumer extends GroupConsumer {
		
		protected Group$92$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$93$Consumer);
			acceptor.accept(unorderedGroup$94$Consumer);
			acceptor.accept(unorderedGroup$99$Consumer);
		}
	}

	protected class Keyword$93$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$93$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$93$Delimiter(), optional);
		}
	}

	protected class UnorderedGroup$94$Consumer extends UnorderedGroupConsumer {
		
		protected UnorderedGroup$94$Consumer(final UnorderedGroup unorderedGroup) {
			super(unorderedGroup);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$95$Consumer);
			acceptor.accept(assignment$97$Consumer);
		}
	}

	protected class Assignment$95$Consumer extends AssignmentConsumer {
		
		protected Assignment$95$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$96$Consumer;
		}
	}

	protected class Keyword$96$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$96$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "firstAsList", true, false, getKeyword$96$Delimiter(), optional);
		}
	}

	protected class Assignment$97$Consumer extends AssignmentConsumer {
		
		protected Assignment$97$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$98$Consumer;
		}
	}

	protected class Keyword$98$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$98$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "secondAsList", true, false, getKeyword$98$Delimiter(), optional);
		}
	}

	protected class UnorderedGroup$99$Consumer extends UnorderedGroupConsumer {
		
		protected UnorderedGroup$99$Consumer(final UnorderedGroup unorderedGroup) {
			super(unorderedGroup);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$100$Consumer);
			acceptor.accept(assignment$102$Consumer);
		}
	}

	protected class Assignment$100$Consumer extends AssignmentConsumer {
		
		protected Assignment$100$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$101$Consumer;
		}
	}

	protected class Keyword$101$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$101$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "firstAsList", true, false, getKeyword$101$Delimiter(), optional);
		}
	}

	protected class Assignment$102$Consumer extends AssignmentConsumer {
		
		protected Assignment$102$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$103$Consumer;
		}
	}

	protected class Keyword$103$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$103$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "secondAsList", true, false, getKeyword$103$Delimiter(), optional);
		}
	}

	protected class Group$104$Consumer extends GroupConsumer {
		
		protected Group$104$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$105$Consumer);
			acceptor.accept(unorderedGroup$106$Consumer);
			acceptor.accept(assignment$111$Consumer);
			acceptor.accept(assignment$113$Consumer);
		}
	}

	protected class Keyword$105$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$105$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$105$Delimiter(), optional);
		}
	}

	protected class UnorderedGroup$106$Consumer extends OptionalUnorderedGroupConsumer {
		
		protected UnorderedGroup$106$Consumer(final UnorderedGroup unorderedGroup) {
			super(unorderedGroup);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$107$Consumer);
			acceptor.accept(assignment$109$Consumer);
		}
	}

	protected class Assignment$107$Consumer extends AssignmentConsumer {
		
		protected Assignment$107$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$108$Consumer;
		}
	}

	protected class Keyword$108$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$108$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "firstAsList", true, false, getKeyword$108$Delimiter(), optional);
		}
	}

	protected class Assignment$109$Consumer extends AssignmentConsumer {
		
		protected Assignment$109$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$110$Consumer;
		}
	}

	protected class Keyword$110$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$110$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "secondAsList", true, false, getKeyword$110$Delimiter(), optional);
		}
	}

	protected class Assignment$111$Consumer extends AssignmentConsumer {
		
		protected Assignment$111$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$112$Consumer;
		}
	}

	protected class Keyword$112$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$112$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "firstAsList", true, false, getKeyword$112$Delimiter(), optional);
		}
	}

	protected class Assignment$113$Consumer extends AssignmentConsumer {
		
		protected Assignment$113$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$114$Consumer;
		}
	}

	protected class Keyword$114$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$114$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "secondAsList", true, false, getKeyword$114$Delimiter(), optional);
		}
	}

	protected class Group$115$Consumer extends GroupConsumer {
		
		protected Group$115$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$116$Consumer);
			acceptor.accept(unorderedGroup$117$Consumer);
		}
	}

	protected class Keyword$116$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$116$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$116$Delimiter(), optional);
		}
	}

	protected class UnorderedGroup$117$Consumer extends MandatoryLoopUnorderedGroupConsumer {
		
		protected UnorderedGroup$117$Consumer(final UnorderedGroup unorderedGroup) {
			super(unorderedGroup);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(unorderedGroup$118$Consumer);
			acceptor.accept(unorderedGroup$123$Consumer);
		}
	}

	protected class UnorderedGroup$118$Consumer extends UnorderedGroupConsumer {
		
		protected UnorderedGroup$118$Consumer(final UnorderedGroup unorderedGroup) {
			super(unorderedGroup);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$119$Consumer);
			acceptor.accept(assignment$121$Consumer);
		}
	}

	protected class Assignment$119$Consumer extends AssignmentConsumer {
		
		protected Assignment$119$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$120$Consumer;
		}
	}

	protected class Keyword$120$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$120$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "firstAsList", true, false, getKeyword$120$Delimiter(), optional);
		}
	}

	protected class Assignment$121$Consumer extends AssignmentConsumer {
		
		protected Assignment$121$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$122$Consumer;
		}
	}

	protected class Keyword$122$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$122$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "secondAsList", true, false, getKeyword$122$Delimiter(), optional);
		}
	}

	protected class UnorderedGroup$123$Consumer extends UnorderedGroupConsumer {
		
		protected UnorderedGroup$123$Consumer(final UnorderedGroup unorderedGroup) {
			super(unorderedGroup);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$124$Consumer);
			acceptor.accept(assignment$126$Consumer);
		}
	}

	protected class Assignment$124$Consumer extends AssignmentConsumer {
		
		protected Assignment$124$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$125$Consumer;
		}
	}

	protected class Keyword$125$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$125$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "thirdAsList", true, false, getKeyword$125$Delimiter(), optional);
		}
	}

	protected class Assignment$126$Consumer extends AssignmentConsumer {
		
		protected Assignment$126$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$127$Consumer;
		}
	}

	protected class Keyword$127$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$127$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "forthAsList", true, false, getKeyword$127$Delimiter(), optional);
		}
	}

	protected class Group$128$Consumer extends GroupConsumer {
		
		protected Group$128$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$129$Consumer);
			acceptor.accept(assignment$130$Consumer);
		}
	}

	protected class Keyword$129$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$129$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$129$Delimiter(), optional);
		}
	}

	protected class Assignment$130$Consumer extends AssignmentConsumer {
		
		protected Assignment$130$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$131$Consumer;
		}
	}

	protected class RuleCall$131$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$131$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(unorderedDatatypeConsumer, "value", false, true, false, getElement(), optional);
		}
	}

	protected class Group$132$Consumer extends GroupConsumer {
		
		protected Group$132$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$133$Consumer);
			acceptor.accept(assignment$134$Consumer);
		}
	}

	protected class Keyword$133$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$133$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$133$Delimiter(), optional);
		}
	}

	protected class Assignment$134$Consumer extends AssignmentConsumer {
		
		protected Assignment$134$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$135$Consumer;
		}
	}

	protected class RuleCall$135$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$135$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(unorderedSerializationConsumer, "serialized", false, false, false, getElement(), optional);
		}
	}

	protected class Group$136$Consumer extends GroupConsumer {
		
		protected Group$136$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$137$Consumer);
			acceptor.accept(assignment$138$Consumer);
		}
	}

	protected class Keyword$137$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$137$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$137$Delimiter(), optional);
		}
	}

	protected class Assignment$138$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$138$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$139$Consumer;
		}
	}

	protected class RuleCall$139$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$139$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(nestedModelConsumer, "nestedModel", true, false, false, getElement(), optional);
		}
	}

	public UnorderedGroupsTestLanguageModelConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$98$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$101$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$103$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$105$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$9$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$108$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$110$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$112$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$114$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$116$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$120$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$122$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$125$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$127$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$11$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$129$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$133$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$137$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$13$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$16$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$18$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$20$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$22$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$24$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$27$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$29$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$31$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$34$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$36$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$38$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$41$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$43$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$45$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$48$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$50$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$52$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$55$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$57$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$59$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$62$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$63$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$65$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$67$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$68$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$70$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$72$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$75$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$77$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$6$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$79$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$82$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$84$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$86$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$89$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$91$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$93$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$96$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public ModelElements getRule() {
		return rule;
	}
	
	public void setRule(ModelElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		action$2$Consumer = new Action$2$Consumer(rule.getModelAction_0());
		alternatives$4$Consumer = new Alternatives$4$Consumer(rule.getAlternatives_1());
		group$5$Consumer = new Group$5$Consumer(rule.getGroup_1_0());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.getDigitOneKeyword_1_0_0());
		unorderedGroup$7$Consumer = new UnorderedGroup$7$Consumer(rule.getUnorderedGroup_1_0_1());
		assignment$8$Consumer = new Assignment$8$Consumer(rule.getFirstAssignment_1_0_1_0());
		keyword$9$Consumer = new Keyword$9$Consumer(rule.getFirstAKeyword_1_0_1_0_0());
		assignment$10$Consumer = new Assignment$10$Consumer(rule.getSecondAssignment_1_0_1_1());
		keyword$11$Consumer = new Keyword$11$Consumer(rule.getSecondBKeyword_1_0_1_1_0());
		group$12$Consumer = new Group$12$Consumer(rule.getGroup_1_1());
		keyword$13$Consumer = new Keyword$13$Consumer(rule.getDigitTwoKeyword_1_1_0());
		unorderedGroup$14$Consumer = new UnorderedGroup$14$Consumer(rule.getUnorderedGroup_1_1_1());
		assignment$15$Consumer = new Assignment$15$Consumer(rule.getFirstAssignment_1_1_1_0());
		keyword$16$Consumer = new Keyword$16$Consumer(rule.getFirstAKeyword_1_1_1_0_0());
		assignment$17$Consumer = new Assignment$17$Consumer(rule.getSecondAssignment_1_1_1_1());
		keyword$18$Consumer = new Keyword$18$Consumer(rule.getSecondBKeyword_1_1_1_1_0());
		assignment$19$Consumer = new Assignment$19$Consumer(rule.getThirdAssignment_1_1_1_2());
		keyword$20$Consumer = new Keyword$20$Consumer(rule.getThirdCKeyword_1_1_1_2_0());
		assignment$21$Consumer = new Assignment$21$Consumer(rule.getForthAssignment_1_1_1_3());
		keyword$22$Consumer = new Keyword$22$Consumer(rule.getForthDKeyword_1_1_1_3_0());
		group$23$Consumer = new Group$23$Consumer(rule.getGroup_1_2());
		keyword$24$Consumer = new Keyword$24$Consumer(rule.getDigitThreeKeyword_1_2_0());
		unorderedGroup$25$Consumer = new UnorderedGroup$25$Consumer(rule.getUnorderedGroup_1_2_1());
		assignment$26$Consumer = new Assignment$26$Consumer(rule.getFirstAssignment_1_2_1_0());
		keyword$27$Consumer = new Keyword$27$Consumer(rule.getFirstAKeyword_1_2_1_0_0());
		assignment$28$Consumer = new Assignment$28$Consumer(rule.getSecondAssignment_1_2_1_1());
		keyword$29$Consumer = new Keyword$29$Consumer(rule.getSecondBKeyword_1_2_1_1_0());
		group$30$Consumer = new Group$30$Consumer(rule.getGroup_1_3());
		keyword$31$Consumer = new Keyword$31$Consumer(rule.getDigitFourKeyword_1_3_0());
		unorderedGroup$32$Consumer = new UnorderedGroup$32$Consumer(rule.getUnorderedGroup_1_3_1());
		assignment$33$Consumer = new Assignment$33$Consumer(rule.getFirstAssignment_1_3_1_0());
		keyword$34$Consumer = new Keyword$34$Consumer(rule.getFirstAKeyword_1_3_1_0_0());
		assignment$35$Consumer = new Assignment$35$Consumer(rule.getSecondAssignment_1_3_1_1());
		keyword$36$Consumer = new Keyword$36$Consumer(rule.getSecondBKeyword_1_3_1_1_0());
		group$37$Consumer = new Group$37$Consumer(rule.getGroup_1_4());
		keyword$38$Consumer = new Keyword$38$Consumer(rule.getDigitFiveKeyword_1_4_0());
		unorderedGroup$39$Consumer = new UnorderedGroup$39$Consumer(rule.getUnorderedGroup_1_4_1());
		assignment$40$Consumer = new Assignment$40$Consumer(rule.getFirstAssignment_1_4_1_0());
		keyword$41$Consumer = new Keyword$41$Consumer(rule.getFirstAKeyword_1_4_1_0_0());
		assignment$42$Consumer = new Assignment$42$Consumer(rule.getSecondAssignment_1_4_1_1());
		keyword$43$Consumer = new Keyword$43$Consumer(rule.getSecondBKeyword_1_4_1_1_0());
		group$44$Consumer = new Group$44$Consumer(rule.getGroup_1_5());
		keyword$45$Consumer = new Keyword$45$Consumer(rule.getDigitSixKeyword_1_5_0());
		unorderedGroup$46$Consumer = new UnorderedGroup$46$Consumer(rule.getUnorderedGroup_1_5_1());
		assignment$47$Consumer = new Assignment$47$Consumer(rule.getFirstAsListAssignment_1_5_1_0());
		keyword$48$Consumer = new Keyword$48$Consumer(rule.getFirstAsListAKeyword_1_5_1_0_0());
		assignment$49$Consumer = new Assignment$49$Consumer(rule.getSecondAsListAssignment_1_5_1_1());
		keyword$50$Consumer = new Keyword$50$Consumer(rule.getSecondAsListBKeyword_1_5_1_1_0());
		group$51$Consumer = new Group$51$Consumer(rule.getGroup_1_6());
		keyword$52$Consumer = new Keyword$52$Consumer(rule.getDigitSevenKeyword_1_6_0());
		unorderedGroup$53$Consumer = new UnorderedGroup$53$Consumer(rule.getUnorderedGroup_1_6_1());
		assignment$54$Consumer = new Assignment$54$Consumer(rule.getFirstAsListAssignment_1_6_1_0());
		keyword$55$Consumer = new Keyword$55$Consumer(rule.getFirstAsListAKeyword_1_6_1_0_0());
		assignment$56$Consumer = new Assignment$56$Consumer(rule.getSecondAsListAssignment_1_6_1_1());
		keyword$57$Consumer = new Keyword$57$Consumer(rule.getSecondAsListBKeyword_1_6_1_1_0());
		group$58$Consumer = new Group$58$Consumer(rule.getGroup_1_7());
		keyword$59$Consumer = new Keyword$59$Consumer(rule.getDigitEightKeyword_1_7_0());
		unorderedGroup$60$Consumer = new UnorderedGroup$60$Consumer(rule.getUnorderedGroup_1_7_1());
		group$61$Consumer = new Group$61$Consumer(rule.getGroup_1_7_1_0());
		keyword$62$Consumer = new Keyword$62$Consumer(rule.getAKeyword_1_7_1_0_0());
		keyword$63$Consumer = new Keyword$63$Consumer(rule.getBKeyword_1_7_1_0_1());
		assignment$64$Consumer = new Assignment$64$Consumer(rule.getFirstAssignment_1_7_1_0_2());
		keyword$65$Consumer = new Keyword$65$Consumer(rule.getFirstCKeyword_1_7_1_0_2_0());
		group$66$Consumer = new Group$66$Consumer(rule.getGroup_1_7_1_1());
		keyword$67$Consumer = new Keyword$67$Consumer(rule.getAKeyword_1_7_1_1_0());
		keyword$68$Consumer = new Keyword$68$Consumer(rule.getBKeyword_1_7_1_1_1());
		assignment$69$Consumer = new Assignment$69$Consumer(rule.getSecondAssignment_1_7_1_1_2());
		keyword$70$Consumer = new Keyword$70$Consumer(rule.getSecondDKeyword_1_7_1_1_2_0());
		group$71$Consumer = new Group$71$Consumer(rule.getGroup_1_8());
		keyword$72$Consumer = new Keyword$72$Consumer(rule.getDigitNineKeyword_1_8_0());
		unorderedGroup$73$Consumer = new UnorderedGroup$73$Consumer(rule.getUnorderedGroup_1_8_1());
		assignment$74$Consumer = new Assignment$74$Consumer(rule.getFirstAsListAssignment_1_8_1_0());
		keyword$75$Consumer = new Keyword$75$Consumer(rule.getFirstAsListAKeyword_1_8_1_0_0());
		assignment$76$Consumer = new Assignment$76$Consumer(rule.getSecondAsListAssignment_1_8_1_1());
		keyword$77$Consumer = new Keyword$77$Consumer(rule.getSecondAsListBKeyword_1_8_1_1_0());
		group$78$Consumer = new Group$78$Consumer(rule.getGroup_1_9());
		keyword$79$Consumer = new Keyword$79$Consumer(rule.getDigitOneDigitZeroKeyword_1_9_0());
		unorderedGroup$80$Consumer = new UnorderedGroup$80$Consumer(rule.getUnorderedGroup_1_9_1());
		assignment$81$Consumer = new Assignment$81$Consumer(rule.getFirstAsListAssignment_1_9_1_0());
		keyword$82$Consumer = new Keyword$82$Consumer(rule.getFirstAsListAKeyword_1_9_1_0_0());
		assignment$83$Consumer = new Assignment$83$Consumer(rule.getSecondAsListAssignment_1_9_1_1());
		keyword$84$Consumer = new Keyword$84$Consumer(rule.getSecondAsListBKeyword_1_9_1_1_0());
		group$85$Consumer = new Group$85$Consumer(rule.getGroup_1_10());
		keyword$86$Consumer = new Keyword$86$Consumer(rule.getDigitOneDigitOneKeyword_1_10_0());
		unorderedGroup$87$Consumer = new UnorderedGroup$87$Consumer(rule.getUnorderedGroup_1_10_1());
		assignment$88$Consumer = new Assignment$88$Consumer(rule.getFirstAssignment_1_10_1_0());
		keyword$89$Consumer = new Keyword$89$Consumer(rule.getFirstAKeyword_1_10_1_0_0());
		assignment$90$Consumer = new Assignment$90$Consumer(rule.getSecondAssignment_1_10_1_1());
		keyword$91$Consumer = new Keyword$91$Consumer(rule.getSecondBKeyword_1_10_1_1_0());
		group$92$Consumer = new Group$92$Consumer(rule.getGroup_1_11());
		keyword$93$Consumer = new Keyword$93$Consumer(rule.getDigitOneDigitTwoKeyword_1_11_0());
		unorderedGroup$94$Consumer = new UnorderedGroup$94$Consumer(rule.getUnorderedGroup_1_11_1());
		assignment$95$Consumer = new Assignment$95$Consumer(rule.getFirstAsListAssignment_1_11_1_0());
		keyword$96$Consumer = new Keyword$96$Consumer(rule.getFirstAsListAKeyword_1_11_1_0_0());
		assignment$97$Consumer = new Assignment$97$Consumer(rule.getSecondAsListAssignment_1_11_1_1());
		keyword$98$Consumer = new Keyword$98$Consumer(rule.getSecondAsListBKeyword_1_11_1_1_0());
		unorderedGroup$99$Consumer = new UnorderedGroup$99$Consumer(rule.getUnorderedGroup_1_11_2());
		assignment$100$Consumer = new Assignment$100$Consumer(rule.getFirstAsListAssignment_1_11_2_0());
		keyword$101$Consumer = new Keyword$101$Consumer(rule.getFirstAsListAKeyword_1_11_2_0_0());
		assignment$102$Consumer = new Assignment$102$Consumer(rule.getSecondAsListAssignment_1_11_2_1());
		keyword$103$Consumer = new Keyword$103$Consumer(rule.getSecondAsListBKeyword_1_11_2_1_0());
		group$104$Consumer = new Group$104$Consumer(rule.getGroup_1_12());
		keyword$105$Consumer = new Keyword$105$Consumer(rule.getDigitOneDigitThreeKeyword_1_12_0());
		unorderedGroup$106$Consumer = new UnorderedGroup$106$Consumer(rule.getUnorderedGroup_1_12_1());
		assignment$107$Consumer = new Assignment$107$Consumer(rule.getFirstAsListAssignment_1_12_1_0());
		keyword$108$Consumer = new Keyword$108$Consumer(rule.getFirstAsListAKeyword_1_12_1_0_0());
		assignment$109$Consumer = new Assignment$109$Consumer(rule.getSecondAsListAssignment_1_12_1_1());
		keyword$110$Consumer = new Keyword$110$Consumer(rule.getSecondAsListBKeyword_1_12_1_1_0());
		assignment$111$Consumer = new Assignment$111$Consumer(rule.getFirstAsListAssignment_1_12_2());
		keyword$112$Consumer = new Keyword$112$Consumer(rule.getFirstAsListAKeyword_1_12_2_0());
		assignment$113$Consumer = new Assignment$113$Consumer(rule.getSecondAsListAssignment_1_12_3());
		keyword$114$Consumer = new Keyword$114$Consumer(rule.getSecondAsListBKeyword_1_12_3_0());
		group$115$Consumer = new Group$115$Consumer(rule.getGroup_1_13());
		keyword$116$Consumer = new Keyword$116$Consumer(rule.getDigitOneDigitFourKeyword_1_13_0());
		unorderedGroup$117$Consumer = new UnorderedGroup$117$Consumer(rule.getUnorderedGroup_1_13_1());
		unorderedGroup$118$Consumer = new UnorderedGroup$118$Consumer(rule.getUnorderedGroup_1_13_1_0());
		assignment$119$Consumer = new Assignment$119$Consumer(rule.getFirstAsListAssignment_1_13_1_0_0());
		keyword$120$Consumer = new Keyword$120$Consumer(rule.getFirstAsListAKeyword_1_13_1_0_0_0());
		assignment$121$Consumer = new Assignment$121$Consumer(rule.getSecondAsListAssignment_1_13_1_0_1());
		keyword$122$Consumer = new Keyword$122$Consumer(rule.getSecondAsListBKeyword_1_13_1_0_1_0());
		unorderedGroup$123$Consumer = new UnorderedGroup$123$Consumer(rule.getUnorderedGroup_1_13_1_1());
		assignment$124$Consumer = new Assignment$124$Consumer(rule.getThirdAsListAssignment_1_13_1_1_0());
		keyword$125$Consumer = new Keyword$125$Consumer(rule.getThirdAsListCKeyword_1_13_1_1_0_0());
		assignment$126$Consumer = new Assignment$126$Consumer(rule.getForthAsListAssignment_1_13_1_1_1());
		keyword$127$Consumer = new Keyword$127$Consumer(rule.getForthAsListDKeyword_1_13_1_1_1_0());
		group$128$Consumer = new Group$128$Consumer(rule.getGroup_1_14());
		keyword$129$Consumer = new Keyword$129$Consumer(rule.getDatatypesKeyword_1_14_0());
		assignment$130$Consumer = new Assignment$130$Consumer(rule.getValueAssignment_1_14_1());
		ruleCall$131$Consumer = new RuleCall$131$Consumer(rule.getValueUnorderedDatatypeParserRuleCall_1_14_1_0());
		group$132$Consumer = new Group$132$Consumer(rule.getGroup_1_15());
		keyword$133$Consumer = new Keyword$133$Consumer(rule.getSerializationKeyword_1_15_0());
		assignment$134$Consumer = new Assignment$134$Consumer(rule.getSerializedAssignment_1_15_1());
		ruleCall$135$Consumer = new RuleCall$135$Consumer(rule.getSerializedUnorderedSerializationParserRuleCall_1_15_1_0());
		group$136$Consumer = new Group$136$Consumer(rule.getGroup_1_16());
		keyword$137$Consumer = new Keyword$137$Consumer(rule.getBug302585Keyword_1_16_0());
		assignment$138$Consumer = new Assignment$138$Consumer(rule.getNestedModelAssignment_1_16_1());
		ruleCall$139$Consumer = new RuleCall$139$Consumer(rule.getNestedModelNestedModelParserRuleCall_1_16_1_0());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setNestedModelConsumer(INonTerminalConsumer nestedModelConsumer) {
		this.nestedModelConsumer = nestedModelConsumer;
	}
	
	public void setUnorderedDatatypeConsumer(INonTerminalConsumer unorderedDatatypeConsumer) {
		this.unorderedDatatypeConsumer = unorderedDatatypeConsumer;
	}
	
	public void setUnorderedSerializationConsumer(INonTerminalConsumer unorderedSerializationConsumer) {
		this.unorderedSerializationConsumer = unorderedSerializationConsumer;
	}
	
	public ICharacterClass getKeyword$98$Delimiter() {
		return keyword$98$Delimiter;
	}
	
	public void setKeyword$98$Delimiter(ICharacterClass characterClass) {
		keyword$98$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$101$Delimiter() {
		return keyword$101$Delimiter;
	}
	
	public void setKeyword$101$Delimiter(ICharacterClass characterClass) {
		keyword$101$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$103$Delimiter() {
		return keyword$103$Delimiter;
	}
	
	public void setKeyword$103$Delimiter(ICharacterClass characterClass) {
		keyword$103$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$105$Delimiter() {
		return keyword$105$Delimiter;
	}
	
	public void setKeyword$105$Delimiter(ICharacterClass characterClass) {
		keyword$105$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$9$Delimiter() {
		return keyword$9$Delimiter;
	}
	
	public void setKeyword$9$Delimiter(ICharacterClass characterClass) {
		keyword$9$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$108$Delimiter() {
		return keyword$108$Delimiter;
	}
	
	public void setKeyword$108$Delimiter(ICharacterClass characterClass) {
		keyword$108$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$110$Delimiter() {
		return keyword$110$Delimiter;
	}
	
	public void setKeyword$110$Delimiter(ICharacterClass characterClass) {
		keyword$110$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$112$Delimiter() {
		return keyword$112$Delimiter;
	}
	
	public void setKeyword$112$Delimiter(ICharacterClass characterClass) {
		keyword$112$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$114$Delimiter() {
		return keyword$114$Delimiter;
	}
	
	public void setKeyword$114$Delimiter(ICharacterClass characterClass) {
		keyword$114$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$116$Delimiter() {
		return keyword$116$Delimiter;
	}
	
	public void setKeyword$116$Delimiter(ICharacterClass characterClass) {
		keyword$116$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$120$Delimiter() {
		return keyword$120$Delimiter;
	}
	
	public void setKeyword$120$Delimiter(ICharacterClass characterClass) {
		keyword$120$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$122$Delimiter() {
		return keyword$122$Delimiter;
	}
	
	public void setKeyword$122$Delimiter(ICharacterClass characterClass) {
		keyword$122$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$125$Delimiter() {
		return keyword$125$Delimiter;
	}
	
	public void setKeyword$125$Delimiter(ICharacterClass characterClass) {
		keyword$125$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$127$Delimiter() {
		return keyword$127$Delimiter;
	}
	
	public void setKeyword$127$Delimiter(ICharacterClass characterClass) {
		keyword$127$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$11$Delimiter() {
		return keyword$11$Delimiter;
	}
	
	public void setKeyword$11$Delimiter(ICharacterClass characterClass) {
		keyword$11$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$129$Delimiter() {
		return keyword$129$Delimiter;
	}
	
	public void setKeyword$129$Delimiter(ICharacterClass characterClass) {
		keyword$129$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$133$Delimiter() {
		return keyword$133$Delimiter;
	}
	
	public void setKeyword$133$Delimiter(ICharacterClass characterClass) {
		keyword$133$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$137$Delimiter() {
		return keyword$137$Delimiter;
	}
	
	public void setKeyword$137$Delimiter(ICharacterClass characterClass) {
		keyword$137$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$13$Delimiter() {
		return keyword$13$Delimiter;
	}
	
	public void setKeyword$13$Delimiter(ICharacterClass characterClass) {
		keyword$13$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$16$Delimiter() {
		return keyword$16$Delimiter;
	}
	
	public void setKeyword$16$Delimiter(ICharacterClass characterClass) {
		keyword$16$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$18$Delimiter() {
		return keyword$18$Delimiter;
	}
	
	public void setKeyword$18$Delimiter(ICharacterClass characterClass) {
		keyword$18$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$20$Delimiter() {
		return keyword$20$Delimiter;
	}
	
	public void setKeyword$20$Delimiter(ICharacterClass characterClass) {
		keyword$20$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$22$Delimiter() {
		return keyword$22$Delimiter;
	}
	
	public void setKeyword$22$Delimiter(ICharacterClass characterClass) {
		keyword$22$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$24$Delimiter() {
		return keyword$24$Delimiter;
	}
	
	public void setKeyword$24$Delimiter(ICharacterClass characterClass) {
		keyword$24$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$27$Delimiter() {
		return keyword$27$Delimiter;
	}
	
	public void setKeyword$27$Delimiter(ICharacterClass characterClass) {
		keyword$27$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$29$Delimiter() {
		return keyword$29$Delimiter;
	}
	
	public void setKeyword$29$Delimiter(ICharacterClass characterClass) {
		keyword$29$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$31$Delimiter() {
		return keyword$31$Delimiter;
	}
	
	public void setKeyword$31$Delimiter(ICharacterClass characterClass) {
		keyword$31$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$34$Delimiter() {
		return keyword$34$Delimiter;
	}
	
	public void setKeyword$34$Delimiter(ICharacterClass characterClass) {
		keyword$34$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$36$Delimiter() {
		return keyword$36$Delimiter;
	}
	
	public void setKeyword$36$Delimiter(ICharacterClass characterClass) {
		keyword$36$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$38$Delimiter() {
		return keyword$38$Delimiter;
	}
	
	public void setKeyword$38$Delimiter(ICharacterClass characterClass) {
		keyword$38$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$41$Delimiter() {
		return keyword$41$Delimiter;
	}
	
	public void setKeyword$41$Delimiter(ICharacterClass characterClass) {
		keyword$41$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$43$Delimiter() {
		return keyword$43$Delimiter;
	}
	
	public void setKeyword$43$Delimiter(ICharacterClass characterClass) {
		keyword$43$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$45$Delimiter() {
		return keyword$45$Delimiter;
	}
	
	public void setKeyword$45$Delimiter(ICharacterClass characterClass) {
		keyword$45$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$48$Delimiter() {
		return keyword$48$Delimiter;
	}
	
	public void setKeyword$48$Delimiter(ICharacterClass characterClass) {
		keyword$48$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$50$Delimiter() {
		return keyword$50$Delimiter;
	}
	
	public void setKeyword$50$Delimiter(ICharacterClass characterClass) {
		keyword$50$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$52$Delimiter() {
		return keyword$52$Delimiter;
	}
	
	public void setKeyword$52$Delimiter(ICharacterClass characterClass) {
		keyword$52$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$55$Delimiter() {
		return keyword$55$Delimiter;
	}
	
	public void setKeyword$55$Delimiter(ICharacterClass characterClass) {
		keyword$55$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$57$Delimiter() {
		return keyword$57$Delimiter;
	}
	
	public void setKeyword$57$Delimiter(ICharacterClass characterClass) {
		keyword$57$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$59$Delimiter() {
		return keyword$59$Delimiter;
	}
	
	public void setKeyword$59$Delimiter(ICharacterClass characterClass) {
		keyword$59$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$62$Delimiter() {
		return keyword$62$Delimiter;
	}
	
	public void setKeyword$62$Delimiter(ICharacterClass characterClass) {
		keyword$62$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$63$Delimiter() {
		return keyword$63$Delimiter;
	}
	
	public void setKeyword$63$Delimiter(ICharacterClass characterClass) {
		keyword$63$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$65$Delimiter() {
		return keyword$65$Delimiter;
	}
	
	public void setKeyword$65$Delimiter(ICharacterClass characterClass) {
		keyword$65$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$67$Delimiter() {
		return keyword$67$Delimiter;
	}
	
	public void setKeyword$67$Delimiter(ICharacterClass characterClass) {
		keyword$67$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$68$Delimiter() {
		return keyword$68$Delimiter;
	}
	
	public void setKeyword$68$Delimiter(ICharacterClass characterClass) {
		keyword$68$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$70$Delimiter() {
		return keyword$70$Delimiter;
	}
	
	public void setKeyword$70$Delimiter(ICharacterClass characterClass) {
		keyword$70$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$72$Delimiter() {
		return keyword$72$Delimiter;
	}
	
	public void setKeyword$72$Delimiter(ICharacterClass characterClass) {
		keyword$72$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$75$Delimiter() {
		return keyword$75$Delimiter;
	}
	
	public void setKeyword$75$Delimiter(ICharacterClass characterClass) {
		keyword$75$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$77$Delimiter() {
		return keyword$77$Delimiter;
	}
	
	public void setKeyword$77$Delimiter(ICharacterClass characterClass) {
		keyword$77$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$6$Delimiter() {
		return keyword$6$Delimiter;
	}
	
	public void setKeyword$6$Delimiter(ICharacterClass characterClass) {
		keyword$6$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$79$Delimiter() {
		return keyword$79$Delimiter;
	}
	
	public void setKeyword$79$Delimiter(ICharacterClass characterClass) {
		keyword$79$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$82$Delimiter() {
		return keyword$82$Delimiter;
	}
	
	public void setKeyword$82$Delimiter(ICharacterClass characterClass) {
		keyword$82$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$84$Delimiter() {
		return keyword$84$Delimiter;
	}
	
	public void setKeyword$84$Delimiter(ICharacterClass characterClass) {
		keyword$84$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$86$Delimiter() {
		return keyword$86$Delimiter;
	}
	
	public void setKeyword$86$Delimiter(ICharacterClass characterClass) {
		keyword$86$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$89$Delimiter() {
		return keyword$89$Delimiter;
	}
	
	public void setKeyword$89$Delimiter(ICharacterClass characterClass) {
		keyword$89$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$91$Delimiter() {
		return keyword$91$Delimiter;
	}
	
	public void setKeyword$91$Delimiter(ICharacterClass characterClass) {
		keyword$91$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$93$Delimiter() {
		return keyword$93$Delimiter;
	}
	
	public void setKeyword$93$Delimiter(ICharacterClass characterClass) {
		keyword$93$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$96$Delimiter() {
		return keyword$96$Delimiter;
	}
	
	public void setKeyword$96$Delimiter(ICharacterClass characterClass) {
		keyword$96$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
