/*
* generated by Xtext
*/
grammar InternalBug313089TestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.linking.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.linking.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.linking.services.Bug313089TestLanguageGrammarAccess;

}

@parser::members {

 	private Bug313089TestLanguageGrammarAccess grammarAccess;
 	
    public InternalBug313089TestLanguageParser(TokenStream input, IAstFactory factory, Bug313089TestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Foo";	
   	}
   	
   	@Override
   	protected Bug313089TestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleFoo
entryRuleFoo returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFooRule(), currentNode); }
	 iv_ruleFoo=ruleFoo 
	 { $current=$iv_ruleFoo.current; } 
	 EOF 
;

// Rule Foo
ruleFoo returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(lv_name_0_0, grammarAccess.getFooAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFooRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID", 
        		lastConsumedNode);
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFooAccess().getBarBarParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_bar_1_0=ruleBar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFooRule());
	        }
       		set(
       			$current, 
       			"bar",
        		lv_bar_1_0, 
        		"Bar", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFooAccess().getBazBazParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_baz_2_0=ruleBaz		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFooRule());
	        }
       		set(
       			$current, 
       			"baz",
        		lv_baz_2_0, 
        		"Baz", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFooRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		createLeafNode(otherlv_3, grammarAccess.getFooAccess().getRefFooCrossReference_2_0(), "ref"); 
	}

)
))
;





// Entry rule entryRuleBar
entryRuleBar returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBarRule(), currentNode); }
	 iv_ruleBar=ruleBar 
	 { $current=$iv_ruleBar.current; } 
	 EOF 
;

// Rule Bar
ruleBar returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBarAccess().getBarAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(lv_name_1_0, grammarAccess.getBarAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBarRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID", 
        		lastConsumedNode);
	    }

)
))
;





// Entry rule entryRuleBaz
entryRuleBaz returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBazRule(), currentNode); }
	 iv_ruleBaz=ruleBaz 
	 { $current=$iv_ruleBaz.current; } 
	 EOF 
;

// Rule Baz
ruleBaz returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='baz' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getBazAccess().getBazKeyword_0(), null);
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(lv_name_1_0, grammarAccess.getBazAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBazRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID", 
        		lastConsumedNode);
	    }

)
)((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBazAccess().getBazChildAction_2_0(),
            $current);
    }
)	otherlv_3='baz' 
    {
    	createLeafNode(otherlv_3, grammarAccess.getBazAccess().getBazKeyword_2_1(), null);
    }
(
(
		lv_name_4_0=RULE_ID
		{
			createLeafNode(lv_name_4_0, grammarAccess.getBazAccess().getNameIDTerminalRuleCall_2_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBazRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ID", 
        		lastConsumedNode);
	    }

)
))*)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


