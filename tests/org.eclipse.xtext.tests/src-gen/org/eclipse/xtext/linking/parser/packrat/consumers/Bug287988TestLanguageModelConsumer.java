/*
* generated by Xtext
*/
package org.eclipse.xtext.linking.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;

import org.eclipse.xtext.linking.services.Bug287988TestLanguageGrammarAccess.ModelElements;

@SuppressWarnings("all")
public final class Bug287988TestLanguageModelConsumer extends NonTerminalConsumer {

	private ModelElements rule;	

	private INonTerminalConsumer actionAttributeConsumer;

	private INonTerminalConsumer baseAttributeConsumer;

	private INonTerminalConsumer ruleCallAttribute2Consumer;

	private INonTerminalConsumer ruleCallAttribute3Consumer;

	private INonTerminalConsumer ruleCallAttributeConsumer;

	private INonTerminalConsumer simpleAttributeConsumer;

	private IElementConsumer alternatives$1$Consumer;

	private IElementConsumer group$2$Consumer;

	private IElementConsumer keyword$3$Consumer;

	private IElementConsumer assignment$4$Consumer;

	private IElementConsumer ruleCall$5$Consumer;

	private IElementConsumer group$6$Consumer;

	private IElementConsumer keyword$7$Consumer;

	private IElementConsumer assignment$8$Consumer;

	private IElementConsumer ruleCall$9$Consumer;

	private IElementConsumer group$10$Consumer;

	private IElementConsumer keyword$11$Consumer;

	private IElementConsumer assignment$12$Consumer;

	private IElementConsumer ruleCall$13$Consumer;

	private IElementConsumer group$14$Consumer;

	private IElementConsumer keyword$15$Consumer;

	private IElementConsumer assignment$16$Consumer;

	private IElementConsumer ruleCall$17$Consumer;

	private IElementConsumer group$18$Consumer;

	private IElementConsumer keyword$19$Consumer;

	private IElementConsumer assignment$20$Consumer;

	private IElementConsumer ruleCall$21$Consumer;

	private IElementConsumer group$22$Consumer;

	private IElementConsumer keyword$23$Consumer;

	private IElementConsumer assignment$24$Consumer;

	private IElementConsumer ruleCall$25$Consumer;

	private ICharacterClass keyword$11$Delimiter;

	private ICharacterClass keyword$15$Delimiter;

	private ICharacterClass keyword$19$Delimiter;

	private ICharacterClass keyword$23$Delimiter;

	private ICharacterClass keyword$3$Delimiter;

	private ICharacterClass keyword$7$Delimiter;

	protected class Alternatives$1$Consumer extends AlternativesConsumer {
		
		protected Alternatives$1$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$2$Consumer);
			acceptor.accept(group$6$Consumer);
			acceptor.accept(group$10$Consumer);
			acceptor.accept(group$14$Consumer);
			acceptor.accept(group$18$Consumer);
			acceptor.accept(group$22$Consumer);
		}
	}

	protected class Group$2$Consumer extends GroupConsumer {
		
		protected Group$2$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$3$Consumer);
			acceptor.accept(assignment$4$Consumer);
		}
	}

	protected class Keyword$3$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$3$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$3$Delimiter(), optional);
		}
	}

	protected class Assignment$4$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$4$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$5$Consumer;
		}
	}

	protected class RuleCall$5$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$5$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(baseAttributeConsumer, "attributes", true, false, false, getElement(), optional);
		}
	}

	protected class Group$6$Consumer extends GroupConsumer {
		
		protected Group$6$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$7$Consumer);
			acceptor.accept(assignment$8$Consumer);
		}
	}

	protected class Keyword$7$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$7$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$7$Delimiter(), optional);
		}
	}

	protected class Assignment$8$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$8$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$9$Consumer;
		}
	}

	protected class RuleCall$9$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$9$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(simpleAttributeConsumer, "attributes", true, false, false, getElement(), optional);
		}
	}

	protected class Group$10$Consumer extends GroupConsumer {
		
		protected Group$10$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$11$Consumer);
			acceptor.accept(assignment$12$Consumer);
		}
	}

	protected class Keyword$11$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$11$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$11$Delimiter(), optional);
		}
	}

	protected class Assignment$12$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$12$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$13$Consumer;
		}
	}

	protected class RuleCall$13$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$13$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(ruleCallAttributeConsumer, "attributes", true, false, false, getElement(), optional);
		}
	}

	protected class Group$14$Consumer extends GroupConsumer {
		
		protected Group$14$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$15$Consumer);
			acceptor.accept(assignment$16$Consumer);
		}
	}

	protected class Keyword$15$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$15$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$15$Delimiter(), optional);
		}
	}

	protected class Assignment$16$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$16$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$17$Consumer;
		}
	}

	protected class RuleCall$17$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$17$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(ruleCallAttribute2Consumer, "attributes", true, false, false, getElement(), optional);
		}
	}

	protected class Group$18$Consumer extends GroupConsumer {
		
		protected Group$18$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$19$Consumer);
			acceptor.accept(assignment$20$Consumer);
		}
	}

	protected class Keyword$19$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$19$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$19$Delimiter(), optional);
		}
	}

	protected class Assignment$20$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$20$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$21$Consumer;
		}
	}

	protected class RuleCall$21$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$21$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(ruleCallAttribute3Consumer, "attributes", true, false, false, getElement(), optional);
		}
	}

	protected class Group$22$Consumer extends GroupConsumer {
		
		protected Group$22$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$23$Consumer);
			acceptor.accept(assignment$24$Consumer);
		}
	}

	protected class Keyword$23$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$23$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$23$Delimiter(), optional);
		}
	}

	protected class Assignment$24$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$24$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$25$Consumer;
		}
	}

	protected class RuleCall$25$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$25$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(actionAttributeConsumer, "attributes", true, false, false, getElement(), optional);
		}
	}

	public Bug287988TestLanguageModelConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$11$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$15$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$19$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$23$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$3$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$7$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return alternatives$1$Consumer.consume();
	}

	public ModelElements getRule() {
		return rule;
	}
	
	public void setRule(ModelElements rule) {
		this.rule = rule;
		
		alternatives$1$Consumer = new Alternatives$1$Consumer(rule.getAlternatives());
		group$2$Consumer = new Group$2$Consumer(rule.getGroup_0());
		keyword$3$Consumer = new Keyword$3$Consumer(rule.getActionsKeyword_0_0());
		assignment$4$Consumer = new Assignment$4$Consumer(rule.getAttributesAssignment_0_1());
		ruleCall$5$Consumer = new RuleCall$5$Consumer(rule.getAttributesBaseAttributeParserRuleCall_0_1_0());
		group$6$Consumer = new Group$6$Consumer(rule.getGroup_1());
		keyword$7$Consumer = new Keyword$7$Consumer(rule.getSimpleKeyword_1_0());
		assignment$8$Consumer = new Assignment$8$Consumer(rule.getAttributesAssignment_1_1());
		ruleCall$9$Consumer = new RuleCall$9$Consumer(rule.getAttributesSimpleAttributeParserRuleCall_1_1_0());
		group$10$Consumer = new Group$10$Consumer(rule.getGroup_2());
		keyword$11$Consumer = new Keyword$11$Consumer(rule.getRulecallKeyword_2_0());
		assignment$12$Consumer = new Assignment$12$Consumer(rule.getAttributesAssignment_2_1());
		ruleCall$13$Consumer = new RuleCall$13$Consumer(rule.getAttributesRuleCallAttributeParserRuleCall_2_1_0());
		group$14$Consumer = new Group$14$Consumer(rule.getGroup_3());
		keyword$15$Consumer = new Keyword$15$Consumer(rule.getRulecall2Keyword_3_0());
		assignment$16$Consumer = new Assignment$16$Consumer(rule.getAttributesAssignment_3_1());
		ruleCall$17$Consumer = new RuleCall$17$Consumer(rule.getAttributesRuleCallAttribute2ParserRuleCall_3_1_0());
		group$18$Consumer = new Group$18$Consumer(rule.getGroup_4());
		keyword$19$Consumer = new Keyword$19$Consumer(rule.getRulecall3Keyword_4_0());
		assignment$20$Consumer = new Assignment$20$Consumer(rule.getAttributesAssignment_4_1());
		ruleCall$21$Consumer = new RuleCall$21$Consumer(rule.getAttributesRuleCallAttribute3ParserRuleCall_4_1_0());
		group$22$Consumer = new Group$22$Consumer(rule.getGroup_5());
		keyword$23$Consumer = new Keyword$23$Consumer(rule.getInlinedActionsKeyword_5_0());
		assignment$24$Consumer = new Assignment$24$Consumer(rule.getAttributesAssignment_5_1());
		ruleCall$25$Consumer = new RuleCall$25$Consumer(rule.getAttributesActionAttributeParserRuleCall_5_1_0());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setActionAttributeConsumer(INonTerminalConsumer actionAttributeConsumer) {
		this.actionAttributeConsumer = actionAttributeConsumer;
	}
	
	public void setBaseAttributeConsumer(INonTerminalConsumer baseAttributeConsumer) {
		this.baseAttributeConsumer = baseAttributeConsumer;
	}
	
	public void setRuleCallAttribute2Consumer(INonTerminalConsumer ruleCallAttribute2Consumer) {
		this.ruleCallAttribute2Consumer = ruleCallAttribute2Consumer;
	}
	
	public void setRuleCallAttribute3Consumer(INonTerminalConsumer ruleCallAttribute3Consumer) {
		this.ruleCallAttribute3Consumer = ruleCallAttribute3Consumer;
	}
	
	public void setRuleCallAttributeConsumer(INonTerminalConsumer ruleCallAttributeConsumer) {
		this.ruleCallAttributeConsumer = ruleCallAttributeConsumer;
	}
	
	public void setSimpleAttributeConsumer(INonTerminalConsumer simpleAttributeConsumer) {
		this.simpleAttributeConsumer = simpleAttributeConsumer;
	}
	
	public ICharacterClass getKeyword$11$Delimiter() {
		return keyword$11$Delimiter;
	}
	
	public void setKeyword$11$Delimiter(ICharacterClass characterClass) {
		keyword$11$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$15$Delimiter() {
		return keyword$15$Delimiter;
	}
	
	public void setKeyword$15$Delimiter(ICharacterClass characterClass) {
		keyword$15$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$19$Delimiter() {
		return keyword$19$Delimiter;
	}
	
	public void setKeyword$19$Delimiter(ICharacterClass characterClass) {
		keyword$19$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$23$Delimiter() {
		return keyword$23$Delimiter;
	}
	
	public void setKeyword$23$Delimiter(ICharacterClass characterClass) {
		keyword$23$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$3$Delimiter() {
		return keyword$3$Delimiter;
	}
	
	public void setKeyword$3$Delimiter(ICharacterClass characterClass) {
		keyword$3$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$7$Delimiter() {
		return keyword$7$Delimiter;
	}
	
	public void setKeyword$7$Delimiter(ICharacterClass characterClass) {
		keyword$7$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
