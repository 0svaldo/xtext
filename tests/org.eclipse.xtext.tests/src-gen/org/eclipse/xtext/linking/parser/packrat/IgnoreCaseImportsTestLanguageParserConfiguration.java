/*
* generated by Xtext
*/
package org.eclipse.xtext.linking.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.linking.services.IgnoreCaseImportsTestLanguageGrammarAccess;

import org.eclipse.xtext.linking.parser.packrat.AbstractIgnoreCaseLinkingTestLanguageParserConfiguration; 
import org.eclipse.xtext.linking.parser.packrat.consumers.IgnoreCaseImportsTestLanguageModelConsumer;
import org.eclipse.xtext.linking.parser.packrat.consumers.IgnoreCaseImportsTestLanguageImportConsumer;
import org.eclipse.xtext.linking.parser.packrat.consumers.AbstractIgnoreCaseLinkingTestLanguageElementConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class IgnoreCaseImportsTestLanguageParserConfiguration extends AbstractParserConfiguration {

	private final AbstractIgnoreCaseLinkingTestLanguageParserConfiguration abstractIgnoreCaseLinkingTestLanguageConfiguration; 
    private IgnoreCaseImportsTestLanguageModelConsumer modelConsumer;
    private IgnoreCaseImportsTestLanguageImportConsumer importConsumer;

	private IgnoreCaseImportsTestLanguageGrammarAccess grammarAccess;

	public IgnoreCaseImportsTestLanguageParserConfiguration(IInternalParserConfiguration configuration, IgnoreCaseImportsTestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.abstractIgnoreCaseLinkingTestLanguageConfiguration = new AbstractIgnoreCaseLinkingTestLanguageParserConfiguration(configuration, null);
	}

	public IgnoreCaseImportsTestLanguageModelConsumer getRootConsumer() {
		return modelConsumer;
	} 

	public void createNonTerminalConsumers() {
		getAbstractIgnoreCaseLinkingTestLanguageConfiguration().createNonTerminalConsumers();
		modelConsumer = new IgnoreCaseImportsTestLanguageModelConsumer(
    		this, null
    	);
		importConsumer = new IgnoreCaseImportsTestLanguageImportConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getAbstractIgnoreCaseLinkingTestLanguageConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getModelConsumer().setRule(grammarAccess.getModelAccess());
		getImportConsumer().setRule(grammarAccess.getImportAccess());
		getElementConsumer().setRule(grammarAccess.getElementAccess());
		getIdConsumer().setRule(grammarAccess.getIDRule());
		getIntConsumer().setRule(grammarAccess.getINTRule());
		getStringConsumer().setRule(grammarAccess.getSTRINGRule());
		getMlCommentConsumer().setRule(grammarAccess.getML_COMMENTRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getAnyOtherConsumer().setRule(grammarAccess.getANY_OTHERRule());


		getModelConsumer().setElementConsumer(getElementConsumer());
		getModelConsumer().setImportConsumer(getImportConsumer());

		getImportConsumer().setStringConsumer(getStringConsumer());

		getElementConsumer().setElementConsumer(getElementConsumer());
		getElementConsumer().setIdConsumer(getIdConsumer());

		getImportConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.linking.parser.packrat.IgnoreCaseImportsTestLanguageDelimiters.ruleCall$11$Delimiter);
		getElementConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.linking.parser.packrat.IgnoreCaseImportsTestLanguageDelimiters.keyword$14$Delimiter);
		getElementConsumer().setKeyword$11$Delimiter(org.eclipse.xtext.linking.parser.packrat.IgnoreCaseImportsTestLanguageDelimiters.keyword$17$Delimiter);
		getElementConsumer().setRuleCall$7$Delimiter(org.eclipse.xtext.linking.parser.packrat.IgnoreCaseImportsTestLanguageDelimiters.ruleCall$11$Delimiter);
		getElementConsumer().setRuleCall$3$Delimiter(org.eclipse.xtext.linking.parser.packrat.IgnoreCaseImportsTestLanguageDelimiters.ruleCall$11$Delimiter);
	}
	
	public AbstractIgnoreCaseLinkingTestLanguageParserConfiguration getAbstractIgnoreCaseLinkingTestLanguageConfiguration() {
		return abstractIgnoreCaseLinkingTestLanguageConfiguration;
	} 
	
    public IgnoreCaseImportsTestLanguageModelConsumer getModelConsumer() {
    	return modelConsumer;
    }

    public IgnoreCaseImportsTestLanguageImportConsumer getImportConsumer() {
    	return importConsumer;
    }

    public AbstractIgnoreCaseLinkingTestLanguageElementConsumer getElementConsumer() {
    	return getAbstractIgnoreCaseLinkingTestLanguageConfiguration().getElementConsumer();
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getAbstractIgnoreCaseLinkingTestLanguageConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getAbstractIgnoreCaseLinkingTestLanguageConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getAbstractIgnoreCaseLinkingTestLanguageConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getAbstractIgnoreCaseLinkingTestLanguageConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getAbstractIgnoreCaseLinkingTestLanguageConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getAbstractIgnoreCaseLinkingTestLanguageConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getAbstractIgnoreCaseLinkingTestLanguageConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getAbstractIgnoreCaseLinkingTestLanguageConfiguration().getInitialHiddenTerminals();
	}
	
}
