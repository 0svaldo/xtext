/*
* generated by Xtext
*/
package org.eclipse.xtext.linking.lazy.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.linking.lazy.services.Bug311337TestLanguageGrammarAccess.ReferenceElements;

@SuppressWarnings("all")
public final class Bug311337TestLanguageReferenceConsumer extends NonTerminalConsumer {

	private ReferenceElements rule;	

	private ITerminalConsumer idConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer keyword$2$Consumer;

	private IElementConsumer assignment$3$Consumer;

	private IElementConsumer crossReference$4$Consumer;

	private IElementConsumer ruleCall$6$Consumer;

	private IElementConsumer group$7$Consumer;

	private IElementConsumer keyword$8$Consumer;

	private IElementConsumer action$9$Consumer;

	private IElementConsumer assignment$11$Consumer;

	private IElementConsumer crossReference$12$Consumer;

	private IElementConsumer ruleCall$14$Consumer;

	private ICharacterClass keyword$2$Delimiter;

	private ICharacterClass keyword$8$Delimiter;

	private ISequenceMatcher ruleCall$6$Delimiter;

	private ISequenceMatcher ruleCall$14$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$2$Consumer);
			acceptor.accept(assignment$3$Consumer);
			acceptor.accept(group$7$Consumer);
		}
	}

	protected class Keyword$2$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$2$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$2$Delimiter(), optional);
		}
	}

	protected class Assignment$3$Consumer extends AssignmentConsumer {
		
		protected Assignment$3$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$4$Consumer;
		}
	}

	protected class CrossReference$4$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$4$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "refChild", false, false, getElement(), getRuleCall$6$Delimiter(), optional);
		}
	}

	protected class RuleCall$6$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$6$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "refChild", false, false, getElement(), getRuleCall$6$Delimiter(), optional);
		}
	}

	protected class Group$7$Consumer extends LoopGroupConsumer {
		
		protected Group$7$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$8$Consumer);
			acceptor.accept(action$9$Consumer);
			acceptor.accept(assignment$11$Consumer);
		}
	}

	protected class Keyword$8$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$8$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$8$Delimiter(), optional);
		}
	}

	protected class Action$9$Consumer extends ElementConsumer<Action> {
		
		protected Action$9$Consumer(final Action action) {
			super(action);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			consumeAction(getElement(), false);
			return SUCCESS;
		}
	}

	protected class Assignment$11$Consumer extends AssignmentConsumer {
		
		protected Assignment$11$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$12$Consumer;
		}
	}

	protected class CrossReference$12$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$12$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "refChild", false, false, getElement(), getRuleCall$14$Delimiter(), optional);
		}
	}

	protected class RuleCall$14$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$14$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "refChild", false, false, getElement(), getRuleCall$14$Delimiter(), optional);
		}
	}

	public Bug311337TestLanguageReferenceConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$2$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$8$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$6$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$14$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public ReferenceElements getRule() {
		return rule;
	}
	
	public void setRule(ReferenceElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		keyword$2$Consumer = new Keyword$2$Consumer(rule.getRefKeyword_0());
		assignment$3$Consumer = new Assignment$3$Consumer(rule.getRefChildAssignment_1());
		crossReference$4$Consumer = new CrossReference$4$Consumer(rule.getRefChildChildCrossReference_1_0());
		group$7$Consumer = new Group$7$Consumer(rule.getGroup_2());
		keyword$8$Consumer = new Keyword$8$Consumer(rule.getColonKeyword_2_0());
		action$9$Consumer = new Action$9$Consumer(rule.getNestedRefLeftAction_2_1());
		assignment$11$Consumer = new Assignment$11$Consumer(rule.getRefChildAssignment_2_2());
		crossReference$12$Consumer = new CrossReference$12$Consumer(rule.getRefChildChildCrossReference_2_2_0());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public ICharacterClass getKeyword$2$Delimiter() {
		return keyword$2$Delimiter;
	}
	
	public void setKeyword$2$Delimiter(ICharacterClass characterClass) {
		keyword$2$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$8$Delimiter() {
		return keyword$8$Delimiter;
	}
	
	public void setKeyword$8$Delimiter(ICharacterClass characterClass) {
		keyword$8$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$6$Delimiter() {
		return ruleCall$6$Delimiter;
	}
	
	public void setRuleCall$6$Delimiter(ISequenceMatcher matcher) {
		ruleCall$6$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$14$Delimiter() {
		return ruleCall$14$Delimiter;
	}
	
	public void setRuleCall$14$Delimiter(ISequenceMatcher matcher) {
		ruleCall$14$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
