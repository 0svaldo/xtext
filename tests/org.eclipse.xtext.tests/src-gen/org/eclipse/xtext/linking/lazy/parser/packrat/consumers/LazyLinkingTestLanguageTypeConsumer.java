/*
* generated by Xtext
*/
package org.eclipse.xtext.linking.lazy.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.linking.lazy.services.LazyLinkingTestLanguageGrammarAccess.TypeElements;

public final class LazyLinkingTestLanguageTypeConsumer extends NonTerminalConsumer {

	private TypeElements rule;	

	private ITerminalConsumer idConsumer;

	private INonTerminalConsumer propertyConsumer;

	private INonTerminalConsumer unresolvedProxyPropertyConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer keyword$2$Consumer;

	private IElementConsumer assignment$3$Consumer;

	private IElementConsumer ruleCall$4$Consumer;

	private IElementConsumer group$5$Consumer;

	private IElementConsumer keyword$6$Consumer;

	private IElementConsumer assignment$7$Consumer;

	private IElementConsumer crossReference$8$Consumer;

	private IElementConsumer ruleCall$10$Consumer;

	private IElementConsumer keyword$11$Consumer;

	private IElementConsumer assignment$12$Consumer;

	private IElementConsumer crossReference$13$Consumer;

	private IElementConsumer ruleCall$15$Consumer;

	private IElementConsumer group$16$Consumer;

	private IElementConsumer keyword$17$Consumer;

	private IElementConsumer assignment$18$Consumer;

	private IElementConsumer crossReference$19$Consumer;

	private IElementConsumer ruleCall$21$Consumer;

	private IElementConsumer keyword$22$Consumer;

	private IElementConsumer assignment$23$Consumer;

	private IElementConsumer crossReference$24$Consumer;

	private IElementConsumer ruleCall$26$Consumer;

	private IElementConsumer keyword$27$Consumer;

	private IElementConsumer assignment$28$Consumer;

	private IElementConsumer ruleCall$29$Consumer;

	private IElementConsumer assignment$30$Consumer;

	private IElementConsumer ruleCall$31$Consumer;

	private IElementConsumer keyword$32$Consumer;

	private ICharacterClass keyword$6$Delimiter;

	private ICharacterClass keyword$11$Delimiter;

	private ICharacterClass keyword$17$Delimiter;

	private ICharacterClass keyword$22$Delimiter;

	private ICharacterClass keyword$27$Delimiter;

	private ICharacterClass keyword$32$Delimiter;

	private ICharacterClass keyword$2$Delimiter;

	private ISequenceMatcher ruleCall$4$Delimiter;

	private ISequenceMatcher ruleCall$10$Delimiter;

	private ISequenceMatcher ruleCall$15$Delimiter;

	private ISequenceMatcher ruleCall$21$Delimiter;

	private ISequenceMatcher ruleCall$26$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$2$Consumer);
			acceptor.accept(assignment$3$Consumer);
			acceptor.accept(group$5$Consumer);
			acceptor.accept(group$16$Consumer);
			acceptor.accept(keyword$27$Consumer);
			acceptor.accept(assignment$28$Consumer);
			acceptor.accept(assignment$30$Consumer);
			acceptor.accept(keyword$32$Consumer);
		}
	}

	protected class Keyword$2$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$2$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$2$Delimiter(), optional);
		}
	}

	protected class Assignment$3$Consumer extends AssignmentConsumer {
		
		protected Assignment$3$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$4$Consumer;
		}
	}

	protected class RuleCall$4$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$4$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "name", false, false, getElement(), getRuleCall$4$Delimiter(), optional);
		}
	}

	protected class Group$5$Consumer extends OptionalGroupConsumer {
		
		protected Group$5$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$6$Consumer);
			acceptor.accept(assignment$7$Consumer);
			acceptor.accept(keyword$11$Consumer);
			acceptor.accept(assignment$12$Consumer);
		}
	}

	protected class Keyword$6$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$6$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$6$Delimiter(), optional);
		}
	}

	protected class Assignment$7$Consumer extends AssignmentConsumer {
		
		protected Assignment$7$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$8$Consumer;
		}
	}

	protected class CrossReference$8$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$8$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "extends", false, false, getElement(), getRuleCall$10$Delimiter(), optional);
		}
	}

	protected class RuleCall$10$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$10$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "extends", false, false, getElement(), getRuleCall$10$Delimiter(), optional);
		}
	}

	protected class Keyword$11$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$11$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$11$Delimiter(), optional);
		}
	}

	protected class Assignment$12$Consumer extends AssignmentConsumer {
		
		protected Assignment$12$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$13$Consumer;
		}
	}

	protected class CrossReference$13$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$13$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "parentId", false, false, getElement(), getRuleCall$15$Delimiter(), optional);
		}
	}

	protected class RuleCall$15$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$15$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "parentId", false, false, getElement(), getRuleCall$15$Delimiter(), optional);
		}
	}

	protected class Group$16$Consumer extends OptionalGroupConsumer {
		
		protected Group$16$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$17$Consumer);
			acceptor.accept(assignment$18$Consumer);
			acceptor.accept(keyword$22$Consumer);
			acceptor.accept(assignment$23$Consumer);
		}
	}

	protected class Keyword$17$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$17$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$17$Delimiter(), optional);
		}
	}

	protected class Assignment$18$Consumer extends AssignmentConsumer {
		
		protected Assignment$18$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$19$Consumer;
		}
	}

	protected class CrossReference$19$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$19$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "parentId", false, false, getElement(), getRuleCall$21$Delimiter(), optional);
		}
	}

	protected class RuleCall$21$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$21$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "parentId", false, false, getElement(), getRuleCall$21$Delimiter(), optional);
		}
	}

	protected class Keyword$22$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$22$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$22$Delimiter(), optional);
		}
	}

	protected class Assignment$23$Consumer extends AssignmentConsumer {
		
		protected Assignment$23$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$24$Consumer;
		}
	}

	protected class CrossReference$24$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$24$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "extends", false, false, getElement(), getRuleCall$26$Delimiter(), optional);
		}
	}

	protected class RuleCall$26$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$26$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "extends", false, false, getElement(), getRuleCall$26$Delimiter(), optional);
		}
	}

	protected class Keyword$27$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$27$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$27$Delimiter(), optional);
		}
	}

	protected class Assignment$28$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$28$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$29$Consumer;
		}
	}

	protected class RuleCall$29$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$29$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(propertyConsumer, "properties", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$30$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$30$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$31$Consumer;
		}
	}

	protected class RuleCall$31$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$31$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(unresolvedProxyPropertyConsumer, "unresolvedProxyProperty", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$32$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$32$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$32$Delimiter(), optional);
		}
	}

	public LazyLinkingTestLanguageTypeConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$6$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$11$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$17$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$22$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$27$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$32$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$2$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$4$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$10$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$15$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$21$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$26$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public TypeElements getRule() {
		return rule;
	}
	
	public void setRule(TypeElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		keyword$2$Consumer = new Keyword$2$Consumer(rule.getTypeKeyword_0());
		assignment$3$Consumer = new Assignment$3$Consumer(rule.getNameAssignment_1());
		ruleCall$4$Consumer = new RuleCall$4$Consumer(rule.getNameIDTerminalRuleCall_1_0());
		group$5$Consumer = new Group$5$Consumer(rule.getGroup_2());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.getExtendsKeyword_2_0());
		assignment$7$Consumer = new Assignment$7$Consumer(rule.getExtendsAssignment_2_1());
		crossReference$8$Consumer = new CrossReference$8$Consumer(rule.getExtendsTypeCrossReference_2_1_0());
		keyword$11$Consumer = new Keyword$11$Consumer(rule.getFullStopKeyword_2_2());
		assignment$12$Consumer = new Assignment$12$Consumer(rule.getParentIdAssignment_2_3());
		crossReference$13$Consumer = new CrossReference$13$Consumer(rule.getParentIdPropertyCrossReference_2_3_0());
		group$16$Consumer = new Group$16$Consumer(rule.getGroup_3());
		keyword$17$Consumer = new Keyword$17$Consumer(rule.getForKeyword_3_0());
		assignment$18$Consumer = new Assignment$18$Consumer(rule.getParentIdAssignment_3_1());
		crossReference$19$Consumer = new CrossReference$19$Consumer(rule.getParentIdPropertyCrossReference_3_1_0());
		keyword$22$Consumer = new Keyword$22$Consumer(rule.getInKeyword_3_2());
		assignment$23$Consumer = new Assignment$23$Consumer(rule.getExtendsAssignment_3_3());
		crossReference$24$Consumer = new CrossReference$24$Consumer(rule.getExtendsTypeCrossReference_3_3_0());
		keyword$27$Consumer = new Keyword$27$Consumer(rule.getLeftCurlyBracketKeyword_4());
		assignment$28$Consumer = new Assignment$28$Consumer(rule.getPropertiesAssignment_5());
		ruleCall$29$Consumer = new RuleCall$29$Consumer(rule.getPropertiesPropertyParserRuleCall_5_0());
		assignment$30$Consumer = new Assignment$30$Consumer(rule.getUnresolvedProxyPropertyAssignment_6());
		ruleCall$31$Consumer = new RuleCall$31$Consumer(rule.getUnresolvedProxyPropertyUnresolvedProxyPropertyParserRuleCall_6_0());
		keyword$32$Consumer = new Keyword$32$Consumer(rule.getRightCurlyBracketKeyword_7());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setPropertyConsumer(INonTerminalConsumer propertyConsumer) {
		this.propertyConsumer = propertyConsumer;
	}
	
	public void setUnresolvedProxyPropertyConsumer(INonTerminalConsumer unresolvedProxyPropertyConsumer) {
		this.unresolvedProxyPropertyConsumer = unresolvedProxyPropertyConsumer;
	}
	
	public ICharacterClass getKeyword$6$Delimiter() {
		return keyword$6$Delimiter;
	}
	
	public void setKeyword$6$Delimiter(ICharacterClass characterClass) {
		keyword$6$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$11$Delimiter() {
		return keyword$11$Delimiter;
	}
	
	public void setKeyword$11$Delimiter(ICharacterClass characterClass) {
		keyword$11$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$17$Delimiter() {
		return keyword$17$Delimiter;
	}
	
	public void setKeyword$17$Delimiter(ICharacterClass characterClass) {
		keyword$17$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$22$Delimiter() {
		return keyword$22$Delimiter;
	}
	
	public void setKeyword$22$Delimiter(ICharacterClass characterClass) {
		keyword$22$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$27$Delimiter() {
		return keyword$27$Delimiter;
	}
	
	public void setKeyword$27$Delimiter(ICharacterClass characterClass) {
		keyword$27$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$32$Delimiter() {
		return keyword$32$Delimiter;
	}
	
	public void setKeyword$32$Delimiter(ICharacterClass characterClass) {
		keyword$32$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$2$Delimiter() {
		return keyword$2$Delimiter;
	}
	
	public void setKeyword$2$Delimiter(ICharacterClass characterClass) {
		keyword$2$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$4$Delimiter() {
		return ruleCall$4$Delimiter;
	}
	
	public void setRuleCall$4$Delimiter(ISequenceMatcher matcher) {
		ruleCall$4$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$10$Delimiter() {
		return ruleCall$10$Delimiter;
	}
	
	public void setRuleCall$10$Delimiter(ISequenceMatcher matcher) {
		ruleCall$10$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$15$Delimiter() {
		return ruleCall$15$Delimiter;
	}
	
	public void setRuleCall$15$Delimiter(ISequenceMatcher matcher) {
		ruleCall$15$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$21$Delimiter() {
		return ruleCall$21$Delimiter;
	}
	
	public void setRuleCall$21$Delimiter(ISequenceMatcher matcher) {
		ruleCall$21$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$26$Delimiter() {
		return ruleCall$26$Delimiter;
	}
	
	public void setRuleCall$26$Delimiter(ISequenceMatcher matcher) {
		ruleCall$26$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
