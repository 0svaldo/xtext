/*
* generated by Xtext
*/
grammar InternalBug311337TestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.linking.lazy.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.linking.lazy.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.linking.lazy.services.Bug311337TestLanguageGrammarAccess;

}

@parser::members {

 	private Bug311337TestLanguageGrammarAccess grammarAccess;
 	
    public InternalBug311337TestLanguageParser(TokenStream input, IAstFactory factory, Bug311337TestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected Bug311337TestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getDefDefinitionParserRuleCall_0(), currentNode); 
	    }
		lv_def_0_0=ruleDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"def",
        		lv_def_0_0, 
        		"Definition", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDefinitionRule(), currentNode); }
	 iv_ruleDefinition=ruleDefinition 
	 { $current=$iv_ruleDefinition.current; } 
	 EOF 
;

// Rule Definition
ruleDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='(def)' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getDefinitionAccess().getDefKeyword_0(), null);
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(lv_name_1_0, grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID", 
        		lastConsumedNode);
	    }

)
)	otherlv_2=':' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getDefinitionAccess().getColonKeyword_2(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefinitionAccess().getChildChildParserRuleCall_3_0(), currentNode); 
	    }
		lv_child_3_0=ruleChild		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionRule());
	        }
       		add(
       			$current, 
       			"child",
        		lv_child_3_0, 
        		"Child", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefinitionAccess().getRefReferenceParserRuleCall_4_0(), currentNode); 
	    }
		lv_ref_4_0=ruleReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionRule());
	        }
       		add(
       			$current, 
       			"ref",
        		lv_ref_4_0, 
        		"Reference", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleChild
entryRuleChild returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getChildRule(), currentNode); }
	 iv_ruleChild=ruleChild 
	 { $current=$iv_ruleChild.current; } 
	 EOF 
;

// Rule Child
ruleChild returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='(child)' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getChildAccess().getChildKeyword_0(), null);
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(lv_name_1_0, grammarAccess.getChildAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChildRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID", 
        		lastConsumedNode);
	    }

)
)	otherlv_2=':' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getChildAccess().getColonKeyword_2(), null);
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getChildRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		createLeafNode(otherlv_3, grammarAccess.getChildAccess().getLinkDefinitionCrossReference_3_0(), "link"); 
	}

)
)?)
;





// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReferenceRule(), currentNode); }
	 iv_ruleReference=ruleReference 
	 { $current=$iv_ruleReference.current; } 
	 EOF 
;

// Rule Reference
ruleReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='(ref)' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getReferenceAccess().getRefKeyword_0(), null);
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		createLeafNode(otherlv_1, grammarAccess.getReferenceAccess().getRefChildChildCrossReference_1_0(), "refChild"); 
	}

)
)(	otherlv_2=':' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getReferenceAccess().getColonKeyword_2_0(), null);
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getReferenceAccess().getNestedRefLeftAction_2_1(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		createLeafNode(otherlv_4, grammarAccess.getReferenceAccess().getRefChildChildCrossReference_2_2_0(), "refChild"); 
	}

)
))*)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


