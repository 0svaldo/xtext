/*
* generated by Xtext
*/
package org.eclipse.xtext.valueconverter.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.valueconverter.services.Bug250313GrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 
import org.eclipse.xtext.valueconverter.parser.packrat.consumers.Bug250313ModelConsumer;
import org.eclipse.xtext.valueconverter.parser.packrat.consumers.Bug250313DatatypeConsumer;
import org.eclipse.xtext.valueconverter.parser.packrat.consumers.Bug250313NestedDatatypeConsumer;
import org.eclipse.xtext.valueconverter.parser.packrat.consumers.Bug250313ChildConsumer;
import org.eclipse.xtext.valueconverter.parser.packrat.consumers.Bug250313Child1Consumer;
import org.eclipse.xtext.valueconverter.parser.packrat.consumers.Bug250313Child2Consumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class Bug250313ParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 
    private Bug250313ModelConsumer modelConsumer;
    private Bug250313DatatypeConsumer datatypeConsumer;
    private Bug250313NestedDatatypeConsumer nestedDatatypeConsumer;
    private Bug250313ChildConsumer childConsumer;
    private Bug250313Child1Consumer child1Consumer;
    private Bug250313Child2Consumer child2Consumer;

	private Bug250313GrammarAccess grammarAccess;

	public Bug250313ParserConfiguration(IInternalParserConfiguration configuration, Bug250313GrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public Bug250313ModelConsumer getRootConsumer() {
		return modelConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		modelConsumer = new Bug250313ModelConsumer(
    		this, null
    	);
		datatypeConsumer = new Bug250313DatatypeConsumer(
    		this, null
    	);
		nestedDatatypeConsumer = new Bug250313NestedDatatypeConsumer(
    		this, null
    	);
		childConsumer = new Bug250313ChildConsumer(
    		this, null
    	);
		child1Consumer = new Bug250313Child1Consumer(
    		this, null
    	);
		child2Consumer = new Bug250313Child2Consumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getModelConsumer().setRule(grammarAccess.getModelAccess());
		getDatatypeConsumer().setRule(grammarAccess.getDatatypeAccess());
		getNestedDatatypeConsumer().setRule(grammarAccess.getNestedDatatypeAccess());
		getChildConsumer().setRule(grammarAccess.getChildAccess());
		getChild1Consumer().setRule(grammarAccess.getChild1Access());
		getChild2Consumer().setRule(grammarAccess.getChild2Access());
		getIdConsumer().setRule(grammarAccess.getIDRule());
		getIntConsumer().setRule(grammarAccess.getINTRule());
		getStringConsumer().setRule(grammarAccess.getSTRINGRule());
		getMlCommentConsumer().setRule(grammarAccess.getML_COMMENTRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getAnyOtherConsumer().setRule(grammarAccess.getANY_OTHERRule());


		getModelConsumer().setChildConsumer(getChildConsumer());
		getModelConsumer().setDatatypeConsumer(getDatatypeConsumer());
		getModelConsumer().setIdConsumer(getIdConsumer());
		getModelConsumer().setNestedDatatypeConsumer(getNestedDatatypeConsumer());
		getModelConsumer().setStringConsumer(getStringConsumer());

		getDatatypeConsumer().setIdConsumer(getIdConsumer());

		getNestedDatatypeConsumer().setDatatypeConsumer(getDatatypeConsumer());
		getNestedDatatypeConsumer().setIdConsumer(getIdConsumer());

		getChildConsumer().setChild1Consumer(getChild1Consumer());
		getChildConsumer().setChild2Consumer(getChild2Consumer());

		getChild1Consumer().setIdConsumer(getIdConsumer());

		getChild2Consumer().setStringConsumer(getStringConsumer());

		getModelConsumer().setKeyword$12$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.keyword$5$Delimiter);
		getModelConsumer().setKeyword$15$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.keyword$8$Delimiter);
		getModelConsumer().setKeyword$21$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.keyword$5$Delimiter);
		getModelConsumer().setKeyword$25$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.keyword$5$Delimiter);
		getModelConsumer().setKeyword$29$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.keyword$5$Delimiter);
		getModelConsumer().setKeyword$33$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.keyword$5$Delimiter);
		getModelConsumer().setKeyword$37$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.keyword$5$Delimiter);
		getModelConsumer().setKeyword$41$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.keyword$5$Delimiter);
		getModelConsumer().setKeyword$46$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.keyword$8$Delimiter);
		getModelConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.keyword$5$Delimiter);
		getModelConsumer().setKeyword$50$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.keyword$8$Delimiter);
		getModelConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.keyword$8$Delimiter);
		getModelConsumer().setRuleCall$10$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.ruleCall$12$Delimiter);
		getModelConsumer().setRuleCall$16$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.ruleCall$9$Delimiter);
		getModelConsumer().setRuleCall$19$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.ruleCall$12$Delimiter);
		getModelConsumer().setRuleCall$23$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.ruleCall$9$Delimiter);
		getModelConsumer().setRuleCall$27$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.ruleCall$9$Delimiter);
		getModelConsumer().setRuleCall$55$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.ruleCall$9$Delimiter);
		getModelConsumer().setRuleCall$58$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.ruleCall$12$Delimiter);
		getModelConsumer().setRuleCall$7$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.ruleCall$9$Delimiter);
		getDatatypeConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.keyword$5$Delimiter);
		getDatatypeConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.ruleCall$12$Delimiter);
		getDatatypeConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.ruleCall$12$Delimiter);
		getNestedDatatypeConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.keyword$5$Delimiter);
		getNestedDatatypeConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.ruleCall$12$Delimiter);
		getChild1Consumer().setRuleCall$2$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.ruleCall$12$Delimiter);
		getChild2Consumer().setRuleCall$2$Delimiter(org.eclipse.xtext.valueconverter.parser.packrat.Bug250313Delimiters.ruleCall$9$Delimiter);
	}
	
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public Bug250313ModelConsumer getModelConsumer() {
    	return modelConsumer;
    }

    public Bug250313DatatypeConsumer getDatatypeConsumer() {
    	return datatypeConsumer;
    }

    public Bug250313NestedDatatypeConsumer getNestedDatatypeConsumer() {
    	return nestedDatatypeConsumer;
    }

    public Bug250313ChildConsumer getChildConsumer() {
    	return childConsumer;
    }

    public Bug250313Child1Consumer getChild1Consumer() {
    	return child1Consumer;
    }

    public Bug250313Child2Consumer getChild2Consumer() {
    	return child2Consumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
