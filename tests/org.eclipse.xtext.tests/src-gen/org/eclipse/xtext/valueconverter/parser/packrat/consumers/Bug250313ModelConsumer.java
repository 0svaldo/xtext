/*
* generated by Xtext
*/
package org.eclipse.xtext.valueconverter.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.valueconverter.services.Bug250313GrammarAccess.ModelElements;

@SuppressWarnings("all")
public final class Bug250313ModelConsumer extends NonTerminalConsumer {

	private ModelElements rule;	

	private INonTerminalConsumer childConsumer;

	private INonTerminalConsumer datatypeConsumer;

	private ITerminalConsumer idConsumer;

	private INonTerminalConsumer nestedDatatypeConsumer;

	private ITerminalConsumer stringConsumer;

	private IElementConsumer alternatives$1$Consumer;

	private IElementConsumer group$2$Consumer;

	private IElementConsumer keyword$3$Consumer;

	private IElementConsumer assignment$4$Consumer;

	private IElementConsumer alternatives$5$Consumer;

	private IElementConsumer keyword$6$Consumer;

	private IElementConsumer ruleCall$7$Consumer;

	private IElementConsumer ruleCall$8$Consumer;

	private IElementConsumer ruleCall$9$Consumer;

	private IElementConsumer ruleCall$10$Consumer;

	private IElementConsumer group$11$Consumer;

	private IElementConsumer keyword$12$Consumer;

	private IElementConsumer assignment$13$Consumer;

	private IElementConsumer alternatives$14$Consumer;

	private IElementConsumer keyword$15$Consumer;

	private IElementConsumer ruleCall$16$Consumer;

	private IElementConsumer ruleCall$17$Consumer;

	private IElementConsumer ruleCall$18$Consumer;

	private IElementConsumer ruleCall$19$Consumer;

	private IElementConsumer group$20$Consumer;

	private IElementConsumer keyword$21$Consumer;

	private IElementConsumer assignment$22$Consumer;

	private IElementConsumer ruleCall$23$Consumer;

	private IElementConsumer group$24$Consumer;

	private IElementConsumer keyword$25$Consumer;

	private IElementConsumer assignment$26$Consumer;

	private IElementConsumer ruleCall$27$Consumer;

	private IElementConsumer group$28$Consumer;

	private IElementConsumer keyword$29$Consumer;

	private IElementConsumer assignment$30$Consumer;

	private IElementConsumer ruleCall$31$Consumer;

	private IElementConsumer group$32$Consumer;

	private IElementConsumer keyword$33$Consumer;

	private IElementConsumer assignment$34$Consumer;

	private IElementConsumer ruleCall$35$Consumer;

	private IElementConsumer group$36$Consumer;

	private IElementConsumer keyword$37$Consumer;

	private IElementConsumer assignment$38$Consumer;

	private IElementConsumer ruleCall$39$Consumer;

	private IElementConsumer group$40$Consumer;

	private IElementConsumer keyword$41$Consumer;

	private IElementConsumer assignment$42$Consumer;

	private IElementConsumer ruleCall$43$Consumer;

	private IElementConsumer group$44$Consumer;

	private IElementConsumer keyword$46$Consumer;

	private IElementConsumer assignment$47$Consumer;

	private IElementConsumer ruleCall$48$Consumer;

	private IElementConsumer group$49$Consumer;

	private IElementConsumer keyword$50$Consumer;

	private IElementConsumer assignment$51$Consumer;

	private IElementConsumer alternatives$52$Consumer;

	private IElementConsumer crossReference$53$Consumer;

	private IElementConsumer ruleCall$55$Consumer;

	private IElementConsumer crossReference$56$Consumer;

	private IElementConsumer ruleCall$58$Consumer;

	private ICharacterClass keyword$12$Delimiter;

	private ICharacterClass keyword$15$Delimiter;

	private ICharacterClass keyword$21$Delimiter;

	private ICharacterClass keyword$25$Delimiter;

	private ICharacterClass keyword$29$Delimiter;

	private ICharacterClass keyword$33$Delimiter;

	private ICharacterClass keyword$37$Delimiter;

	private ICharacterClass keyword$41$Delimiter;

	private ICharacterClass keyword$46$Delimiter;

	private ICharacterClass keyword$3$Delimiter;

	private ICharacterClass keyword$50$Delimiter;

	private ICharacterClass keyword$6$Delimiter;

	private ISequenceMatcher ruleCall$10$Delimiter;

	private ISequenceMatcher ruleCall$16$Delimiter;

	private ISequenceMatcher ruleCall$19$Delimiter;

	private ISequenceMatcher ruleCall$23$Delimiter;

	private ISequenceMatcher ruleCall$27$Delimiter;

	private ISequenceMatcher ruleCall$55$Delimiter;

	private ISequenceMatcher ruleCall$58$Delimiter;

	private ISequenceMatcher ruleCall$7$Delimiter;

	protected class Alternatives$1$Consumer extends AlternativesConsumer {
		
		protected Alternatives$1$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$2$Consumer);
			acceptor.accept(group$11$Consumer);
			acceptor.accept(group$20$Consumer);
			acceptor.accept(group$24$Consumer);
			acceptor.accept(group$28$Consumer);
			acceptor.accept(group$32$Consumer);
			acceptor.accept(group$36$Consumer);
			acceptor.accept(group$40$Consumer);
			acceptor.accept(group$44$Consumer);
		}
	}

	protected class Group$2$Consumer extends GroupConsumer {
		
		protected Group$2$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$3$Consumer);
			acceptor.accept(assignment$4$Consumer);
		}
	}

	protected class Keyword$3$Consumer extends OptionalElementConsumer<Keyword> {
		
		protected Keyword$3$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$3$Delimiter(), optional);
		}
	}

	protected class Assignment$4$Consumer extends AssignmentConsumer {
		
		protected Assignment$4$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return alternatives$5$Consumer;
		}
	}

	protected class Alternatives$5$Consumer extends AlternativesConsumer {
		
		protected Alternatives$5$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$6$Consumer);
			acceptor.accept(ruleCall$7$Consumer);
			acceptor.accept(ruleCall$8$Consumer);
			acceptor.accept(ruleCall$9$Consumer);
			acceptor.accept(ruleCall$10$Consumer);
		}
	}

	protected class Keyword$6$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$6$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "value", false, false, getKeyword$6$Delimiter(), optional);
		}
	}

	protected class RuleCall$7$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$7$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "value", false, false, getElement(), getRuleCall$7$Delimiter(), optional);
		}
	}

	protected class RuleCall$8$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$8$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(nestedDatatypeConsumer, "value", false, true, false, getElement(), optional);
		}
	}

	protected class RuleCall$9$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$9$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(datatypeConsumer, "value", false, true, false, getElement(), optional);
		}
	}

	protected class RuleCall$10$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$10$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "value", false, false, getElement(), getRuleCall$10$Delimiter(), optional);
		}
	}

	protected class Group$11$Consumer extends GroupConsumer {
		
		protected Group$11$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$12$Consumer);
			acceptor.accept(assignment$13$Consumer);
		}
	}

	protected class Keyword$12$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$12$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$12$Delimiter(), optional);
		}
	}

	protected class Assignment$13$Consumer extends AssignmentConsumer {
		
		protected Assignment$13$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return alternatives$14$Consumer;
		}
	}

	protected class Alternatives$14$Consumer extends AlternativesConsumer {
		
		protected Alternatives$14$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$15$Consumer);
			acceptor.accept(ruleCall$16$Consumer);
			acceptor.accept(ruleCall$17$Consumer);
			acceptor.accept(ruleCall$18$Consumer);
			acceptor.accept(ruleCall$19$Consumer);
		}
	}

	protected class Keyword$15$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$15$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "multiValue", true, false, getKeyword$15$Delimiter(), optional);
		}
	}

	protected class RuleCall$16$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$16$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "multiValue", true, false, getElement(), getRuleCall$16$Delimiter(), optional);
		}
	}

	protected class RuleCall$17$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$17$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(nestedDatatypeConsumer, "multiValue", true, true, false, getElement(), optional);
		}
	}

	protected class RuleCall$18$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$18$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(datatypeConsumer, "multiValue", true, true, false, getElement(), optional);
		}
	}

	protected class RuleCall$19$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$19$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "multiValue", true, false, getElement(), getRuleCall$19$Delimiter(), optional);
		}
	}

	protected class Group$20$Consumer extends GroupConsumer {
		
		protected Group$20$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$21$Consumer);
			acceptor.accept(assignment$22$Consumer);
		}
	}

	protected class Keyword$21$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$21$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$21$Delimiter(), optional);
		}
	}

	protected class Assignment$22$Consumer extends AssignmentConsumer {
		
		protected Assignment$22$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$23$Consumer;
		}
	}

	protected class RuleCall$23$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$23$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "value", false, false, getElement(), getRuleCall$23$Delimiter(), optional);
		}
	}

	protected class Group$24$Consumer extends GroupConsumer {
		
		protected Group$24$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$25$Consumer);
			acceptor.accept(assignment$26$Consumer);
		}
	}

	protected class Keyword$25$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$25$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$25$Delimiter(), optional);
		}
	}

	protected class Assignment$26$Consumer extends AssignmentConsumer {
		
		protected Assignment$26$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$27$Consumer;
		}
	}

	protected class RuleCall$27$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$27$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "multiValue", true, false, getElement(), getRuleCall$27$Delimiter(), optional);
		}
	}

	protected class Group$28$Consumer extends GroupConsumer {
		
		protected Group$28$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$29$Consumer);
			acceptor.accept(assignment$30$Consumer);
		}
	}

	protected class Keyword$29$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$29$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$29$Delimiter(), optional);
		}
	}

	protected class Assignment$30$Consumer extends AssignmentConsumer {
		
		protected Assignment$30$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$31$Consumer;
		}
	}

	protected class RuleCall$31$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$31$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(datatypeConsumer, "value", false, true, false, getElement(), optional);
		}
	}

	protected class Group$32$Consumer extends GroupConsumer {
		
		protected Group$32$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$33$Consumer);
			acceptor.accept(assignment$34$Consumer);
		}
	}

	protected class Keyword$33$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$33$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$33$Delimiter(), optional);
		}
	}

	protected class Assignment$34$Consumer extends AssignmentConsumer {
		
		protected Assignment$34$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$35$Consumer;
		}
	}

	protected class RuleCall$35$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$35$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(datatypeConsumer, "multiValue", true, true, false, getElement(), optional);
		}
	}

	protected class Group$36$Consumer extends GroupConsumer {
		
		protected Group$36$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$37$Consumer);
			acceptor.accept(assignment$38$Consumer);
		}
	}

	protected class Keyword$37$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$37$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$37$Delimiter(), optional);
		}
	}

	protected class Assignment$38$Consumer extends AssignmentConsumer {
		
		protected Assignment$38$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$39$Consumer;
		}
	}

	protected class RuleCall$39$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$39$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(nestedDatatypeConsumer, "value", false, true, false, getElement(), optional);
		}
	}

	protected class Group$40$Consumer extends GroupConsumer {
		
		protected Group$40$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$41$Consumer);
			acceptor.accept(assignment$42$Consumer);
		}
	}

	protected class Keyword$41$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$41$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$41$Delimiter(), optional);
		}
	}

	protected class Assignment$42$Consumer extends AssignmentConsumer {
		
		protected Assignment$42$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$43$Consumer;
		}
	}

	protected class RuleCall$43$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$43$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(nestedDatatypeConsumer, "multiValue", true, true, false, getElement(), optional);
		}
	}

	protected class Group$44$Consumer extends GroupConsumer {
		
		protected Group$44$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$46$Consumer);
			acceptor.accept(assignment$47$Consumer);
			acceptor.accept(group$49$Consumer);
		}
	}

	protected class Keyword$46$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$46$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$46$Delimiter(), optional);
		}
	}

	protected class Assignment$47$Consumer extends AssignmentConsumer {
		
		protected Assignment$47$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$48$Consumer;
		}
	}

	protected class RuleCall$48$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$48$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(childConsumer, "children", false, false, false, getElement(), optional);
		}
	}

	protected class Group$49$Consumer extends OptionalGroupConsumer {
		
		protected Group$49$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$50$Consumer);
			acceptor.accept(assignment$51$Consumer);
		}
	}

	protected class Keyword$50$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$50$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$50$Delimiter(), optional);
		}
	}

	protected class Assignment$51$Consumer extends AssignmentConsumer {
		
		protected Assignment$51$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return alternatives$52$Consumer;
		}
	}

	protected class Alternatives$52$Consumer extends AlternativesConsumer {
		
		protected Alternatives$52$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(crossReference$53$Consumer);
			acceptor.accept(crossReference$56$Consumer);
		}
	}

	protected class CrossReference$53$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$53$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "ref", false, false, getElement(), getRuleCall$55$Delimiter(), optional);
		}
	}

	protected class RuleCall$55$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$55$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "ref", false, false, getElement(), getRuleCall$55$Delimiter(), optional);
		}
	}

	protected class CrossReference$56$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$56$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "ref", false, false, getElement(), getRuleCall$58$Delimiter(), optional);
		}
	}

	protected class RuleCall$58$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$58$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "ref", false, false, getElement(), getRuleCall$58$Delimiter(), optional);
		}
	}

	public Bug250313ModelConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$12$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$15$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$21$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$25$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$29$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$33$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$37$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$41$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$46$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$3$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$50$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$6$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$10$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$16$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$19$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$23$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$27$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$55$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$58$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$7$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return alternatives$1$Consumer.consume();
	}

	public ModelElements getRule() {
		return rule;
	}
	
	public void setRule(ModelElements rule) {
		this.rule = rule;
		
		alternatives$1$Consumer = new Alternatives$1$Consumer(rule.getAlternatives());
		group$2$Consumer = new Group$2$Consumer(rule.getGroup_0());
		keyword$3$Consumer = new Keyword$3$Consumer(rule.getDigitOneKeyword_0_0());
		assignment$4$Consumer = new Assignment$4$Consumer(rule.getValueAssignment_0_1());
		alternatives$5$Consumer = new Alternatives$5$Consumer(rule.getValueAlternatives_0_1_0());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.getValueMykeyword1Keyword_0_1_0_0());
		ruleCall$7$Consumer = new RuleCall$7$Consumer(rule.getValueSTRINGTerminalRuleCall_0_1_0_1());
		ruleCall$8$Consumer = new RuleCall$8$Consumer(rule.getValueNestedDatatypeParserRuleCall_0_1_0_2());
		ruleCall$9$Consumer = new RuleCall$9$Consumer(rule.getValueDatatypeParserRuleCall_0_1_0_3());
		ruleCall$10$Consumer = new RuleCall$10$Consumer(rule.getValueIDTerminalRuleCall_0_1_0_4());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.getValueMykeyword1Keyword_0_1_0_0());
		ruleCall$7$Consumer = new RuleCall$7$Consumer(rule.getValueSTRINGTerminalRuleCall_0_1_0_1());
		ruleCall$8$Consumer = new RuleCall$8$Consumer(rule.getValueNestedDatatypeParserRuleCall_0_1_0_2());
		ruleCall$9$Consumer = new RuleCall$9$Consumer(rule.getValueDatatypeParserRuleCall_0_1_0_3());
		ruleCall$10$Consumer = new RuleCall$10$Consumer(rule.getValueIDTerminalRuleCall_0_1_0_4());
		group$11$Consumer = new Group$11$Consumer(rule.getGroup_1());
		keyword$12$Consumer = new Keyword$12$Consumer(rule.getDigitOnePlusSignKeyword_1_0());
		assignment$13$Consumer = new Assignment$13$Consumer(rule.getMultiValueAssignment_1_1());
		alternatives$14$Consumer = new Alternatives$14$Consumer(rule.getMultiValueAlternatives_1_1_0());
		keyword$15$Consumer = new Keyword$15$Consumer(rule.getMultiValueMykeyword1Keyword_1_1_0_0());
		ruleCall$16$Consumer = new RuleCall$16$Consumer(rule.getMultiValueSTRINGTerminalRuleCall_1_1_0_1());
		ruleCall$17$Consumer = new RuleCall$17$Consumer(rule.getMultiValueNestedDatatypeParserRuleCall_1_1_0_2());
		ruleCall$18$Consumer = new RuleCall$18$Consumer(rule.getMultiValueDatatypeParserRuleCall_1_1_0_3());
		ruleCall$19$Consumer = new RuleCall$19$Consumer(rule.getMultiValueIDTerminalRuleCall_1_1_0_4());
		keyword$15$Consumer = new Keyword$15$Consumer(rule.getMultiValueMykeyword1Keyword_1_1_0_0());
		ruleCall$16$Consumer = new RuleCall$16$Consumer(rule.getMultiValueSTRINGTerminalRuleCall_1_1_0_1());
		ruleCall$17$Consumer = new RuleCall$17$Consumer(rule.getMultiValueNestedDatatypeParserRuleCall_1_1_0_2());
		ruleCall$18$Consumer = new RuleCall$18$Consumer(rule.getMultiValueDatatypeParserRuleCall_1_1_0_3());
		ruleCall$19$Consumer = new RuleCall$19$Consumer(rule.getMultiValueIDTerminalRuleCall_1_1_0_4());
		group$20$Consumer = new Group$20$Consumer(rule.getGroup_2());
		keyword$21$Consumer = new Keyword$21$Consumer(rule.getDigitTwoKeyword_2_0());
		assignment$22$Consumer = new Assignment$22$Consumer(rule.getValueAssignment_2_1());
		ruleCall$23$Consumer = new RuleCall$23$Consumer(rule.getValueSTRINGTerminalRuleCall_2_1_0());
		group$24$Consumer = new Group$24$Consumer(rule.getGroup_3());
		keyword$25$Consumer = new Keyword$25$Consumer(rule.getDigitTwoPlusSignKeyword_3_0());
		assignment$26$Consumer = new Assignment$26$Consumer(rule.getMultiValueAssignment_3_1());
		ruleCall$27$Consumer = new RuleCall$27$Consumer(rule.getMultiValueSTRINGTerminalRuleCall_3_1_0());
		group$28$Consumer = new Group$28$Consumer(rule.getGroup_4());
		keyword$29$Consumer = new Keyword$29$Consumer(rule.getDigitThreeKeyword_4_0());
		assignment$30$Consumer = new Assignment$30$Consumer(rule.getValueAssignment_4_1());
		ruleCall$31$Consumer = new RuleCall$31$Consumer(rule.getValueDatatypeParserRuleCall_4_1_0());
		group$32$Consumer = new Group$32$Consumer(rule.getGroup_5());
		keyword$33$Consumer = new Keyword$33$Consumer(rule.getDigitThreePlusSignKeyword_5_0());
		assignment$34$Consumer = new Assignment$34$Consumer(rule.getMultiValueAssignment_5_1());
		ruleCall$35$Consumer = new RuleCall$35$Consumer(rule.getMultiValueDatatypeParserRuleCall_5_1_0());
		group$36$Consumer = new Group$36$Consumer(rule.getGroup_6());
		keyword$37$Consumer = new Keyword$37$Consumer(rule.getDigitFourKeyword_6_0());
		assignment$38$Consumer = new Assignment$38$Consumer(rule.getValueAssignment_6_1());
		ruleCall$39$Consumer = new RuleCall$39$Consumer(rule.getValueNestedDatatypeParserRuleCall_6_1_0());
		group$40$Consumer = new Group$40$Consumer(rule.getGroup_7());
		keyword$41$Consumer = new Keyword$41$Consumer(rule.getDigitFourPlusSignKeyword_7_0());
		assignment$42$Consumer = new Assignment$42$Consumer(rule.getMultiValueAssignment_7_1());
		ruleCall$43$Consumer = new RuleCall$43$Consumer(rule.getMultiValueNestedDatatypeParserRuleCall_7_1_0());
		group$44$Consumer = new Group$44$Consumer(rule.getGroup_8());
		keyword$46$Consumer = new Keyword$46$Consumer(rule.getContentKeyword_8_0_0());
		assignment$47$Consumer = new Assignment$47$Consumer(rule.getChildrenAssignment_8_0_1());
		ruleCall$48$Consumer = new RuleCall$48$Consumer(rule.getChildrenChildParserRuleCall_8_0_1_0());
		group$49$Consumer = new Group$49$Consumer(rule.getGroup_8_1());
		keyword$50$Consumer = new Keyword$50$Consumer(rule.getRefKeyword_8_1_0());
		assignment$51$Consumer = new Assignment$51$Consumer(rule.getRefAssignment_8_1_1());
		alternatives$52$Consumer = new Alternatives$52$Consumer(rule.getRefAlternatives_8_1_1_0());
		crossReference$53$Consumer = new CrossReference$53$Consumer(rule.getRefChild1CrossReference_8_1_1_0_0());
		crossReference$56$Consumer = new CrossReference$56$Consumer(rule.getRefChild2CrossReference_8_1_1_0_1());
		crossReference$53$Consumer = new CrossReference$53$Consumer(rule.getRefChild1CrossReference_8_1_1_0_0());
		crossReference$56$Consumer = new CrossReference$56$Consumer(rule.getRefChild2CrossReference_8_1_1_0_1());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setChildConsumer(INonTerminalConsumer childConsumer) {
		this.childConsumer = childConsumer;
	}
	
	public void setDatatypeConsumer(INonTerminalConsumer datatypeConsumer) {
		this.datatypeConsumer = datatypeConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setNestedDatatypeConsumer(INonTerminalConsumer nestedDatatypeConsumer) {
		this.nestedDatatypeConsumer = nestedDatatypeConsumer;
	}
	
	public void setStringConsumer(ITerminalConsumer stringConsumer) {
		this.stringConsumer = stringConsumer;
	}
	
	public ICharacterClass getKeyword$12$Delimiter() {
		return keyword$12$Delimiter;
	}
	
	public void setKeyword$12$Delimiter(ICharacterClass characterClass) {
		keyword$12$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$15$Delimiter() {
		return keyword$15$Delimiter;
	}
	
	public void setKeyword$15$Delimiter(ICharacterClass characterClass) {
		keyword$15$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$21$Delimiter() {
		return keyword$21$Delimiter;
	}
	
	public void setKeyword$21$Delimiter(ICharacterClass characterClass) {
		keyword$21$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$25$Delimiter() {
		return keyword$25$Delimiter;
	}
	
	public void setKeyword$25$Delimiter(ICharacterClass characterClass) {
		keyword$25$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$29$Delimiter() {
		return keyword$29$Delimiter;
	}
	
	public void setKeyword$29$Delimiter(ICharacterClass characterClass) {
		keyword$29$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$33$Delimiter() {
		return keyword$33$Delimiter;
	}
	
	public void setKeyword$33$Delimiter(ICharacterClass characterClass) {
		keyword$33$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$37$Delimiter() {
		return keyword$37$Delimiter;
	}
	
	public void setKeyword$37$Delimiter(ICharacterClass characterClass) {
		keyword$37$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$41$Delimiter() {
		return keyword$41$Delimiter;
	}
	
	public void setKeyword$41$Delimiter(ICharacterClass characterClass) {
		keyword$41$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$46$Delimiter() {
		return keyword$46$Delimiter;
	}
	
	public void setKeyword$46$Delimiter(ICharacterClass characterClass) {
		keyword$46$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$3$Delimiter() {
		return keyword$3$Delimiter;
	}
	
	public void setKeyword$3$Delimiter(ICharacterClass characterClass) {
		keyword$3$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$50$Delimiter() {
		return keyword$50$Delimiter;
	}
	
	public void setKeyword$50$Delimiter(ICharacterClass characterClass) {
		keyword$50$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$6$Delimiter() {
		return keyword$6$Delimiter;
	}
	
	public void setKeyword$6$Delimiter(ICharacterClass characterClass) {
		keyword$6$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$10$Delimiter() {
		return ruleCall$10$Delimiter;
	}
	
	public void setRuleCall$10$Delimiter(ISequenceMatcher matcher) {
		ruleCall$10$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$16$Delimiter() {
		return ruleCall$16$Delimiter;
	}
	
	public void setRuleCall$16$Delimiter(ISequenceMatcher matcher) {
		ruleCall$16$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$19$Delimiter() {
		return ruleCall$19$Delimiter;
	}
	
	public void setRuleCall$19$Delimiter(ISequenceMatcher matcher) {
		ruleCall$19$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$23$Delimiter() {
		return ruleCall$23$Delimiter;
	}
	
	public void setRuleCall$23$Delimiter(ISequenceMatcher matcher) {
		ruleCall$23$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$27$Delimiter() {
		return ruleCall$27$Delimiter;
	}
	
	public void setRuleCall$27$Delimiter(ISequenceMatcher matcher) {
		ruleCall$27$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$55$Delimiter() {
		return ruleCall$55$Delimiter;
	}
	
	public void setRuleCall$55$Delimiter(ISequenceMatcher matcher) {
		ruleCall$55$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$58$Delimiter() {
		return ruleCall$58$Delimiter;
	}
	
	public void setRuleCall$58$Delimiter(ISequenceMatcher matcher) {
		ruleCall$58$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$7$Delimiter() {
		return ruleCall$7$Delimiter;
	}
	
	public void setRuleCall$7$Delimiter(ISequenceMatcher matcher) {
		ruleCall$7$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
