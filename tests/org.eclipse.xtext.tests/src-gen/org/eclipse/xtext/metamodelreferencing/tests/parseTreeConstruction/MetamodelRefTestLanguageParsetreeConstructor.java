/*
* generated by Xtext
*/
package org.eclipse.xtext.metamodelreferencing.tests.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.metamodelreferencing.tests.services.MetamodelRefTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class MetamodelRefTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private MetamodelRefTestLanguageGrammarAccess grammarAccess;
	
	@Override	
	public MetamodelRefTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Foo_Group(this, this, 0, inst);
			case 1: return new NameRef_RuleAssignment(this, this, 1, inst);
			case 2: return new MyRule_NameAssignment(this, this, 2, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Foo ****************
 *
 * Foo:
 *   name=ID nameRefs+=NameRef*;
 *
 **/

// name=ID nameRefs+=NameRef*
protected class Foo_Group extends GroupToken {
	
	public Foo_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFooAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Foo_NameRefsAssignment_1(parent, this, 0, inst);
			case 1: return new Foo_NameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFooRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class Foo_NameAssignment_0 extends AssignmentToken  {
	
	public Foo_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFooAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getFooAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// nameRefs+=NameRef*
protected class Foo_NameRefsAssignment_1 extends AssignmentToken  {
	
	public Foo_NameRefsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFooAccess().getNameRefsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NameRef_RuleAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("nameRefs",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("nameRefs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNameRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFooAccess().getNameRefsNameRefParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Foo_NameRefsAssignment_1(parent, next, actIndex, consumed);
			case 1: return new Foo_NameAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Foo ****************/


/************ begin Rule NameRef ****************
 *
 * NameRef returns xtext::RuleCall:
 *   rule=[xtext::ParserRule];
 *
 **/

// rule=[xtext::ParserRule]
protected class NameRef_RuleAssignment extends AssignmentToken  {
	
	public NameRef_RuleAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNameRefAccess().getRuleAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNameRefRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("rule",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("rule");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNameRefAccess().getRuleParserRuleCrossReference_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getNameRefAccess().getRuleParserRuleCrossReference_0(); 
				return obj;
			}
		}
		return null;
	}

}

/************ end Rule NameRef ****************/


/************ begin Rule MyRule ****************
 *
 * MyRule returns xtext::ParserRule:
 *   name=ID;
 *
 **/

// name=ID
protected class MyRule_NameAssignment extends AssignmentToken  {
	
	public MyRule_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMyRuleAccess().getNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMyRuleRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getMyRuleAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule MyRule ****************/

}
