/*
* generated by Xtext
*/
package org.eclipse.xtext.metamodelreferencing.tests.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.metamodelreferencing.tests.services.MetamodelRefTestLanguageGrammarAccess.NameRefElements;

public final class MetamodelRefTestLanguageNameRefConsumer extends NonTerminalConsumer {

	private NameRefElements rule;	

	private ITerminalConsumer idConsumer;

	private IElementConsumer assignment$1$Consumer;

	private IElementConsumer crossReference$2$Consumer;

	private IElementConsumer ruleCall$4$Consumer;

	private ISequenceMatcher ruleCall$4$Delimiter;

	protected class Assignment$1$Consumer extends AssignmentConsumer {
		
		protected Assignment$1$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$2$Consumer;
		}
	}

	protected class CrossReference$2$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$2$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "rule", false, false, getElement(), getRuleCall$4$Delimiter(), optional);
		}
	}

	protected class RuleCall$4$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$4$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "rule", false, false, getElement(), getRuleCall$4$Delimiter(), optional);
		}
	}

	public MetamodelRefTestLanguageNameRefConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		ruleCall$4$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return assignment$1$Consumer.consume();
	}

	public NameRefElements getRule() {
		return rule;
	}
	
	public void setRule(NameRefElements rule) {
		this.rule = rule;
		
		assignment$1$Consumer = new Assignment$1$Consumer(rule.getRuleAssignment());
		crossReference$2$Consumer = new CrossReference$2$Consumer(rule.getRuleParserRuleCrossReference_0());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public ISequenceMatcher getRuleCall$4$Delimiter() {
		return ruleCall$4$Delimiter;
	}
	
	public void setRuleCall$4$Delimiter(ISequenceMatcher matcher) {
		ruleCall$4$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
