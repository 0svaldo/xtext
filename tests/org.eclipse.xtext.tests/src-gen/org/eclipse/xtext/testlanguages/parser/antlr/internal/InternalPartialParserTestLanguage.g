/*
* generated by Xtext
*/
grammar InternalPartialParserTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.testlanguages.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.testlanguages.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.testlanguages.services.PartialParserTestLanguageGrammarAccess;

}

@parser::members {

 	private PartialParserTestLanguageGrammarAccess grammarAccess;
 	
    public InternalPartialParserTestLanguageParser(TokenStream input, IAstFactory factory, PartialParserTestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "SomeContainer";	
   	}
   	
   	@Override
   	protected PartialParserTestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSomeContainer
entryRuleSomeContainer returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSomeContainerRule(), currentNode); }
	 iv_ruleSomeContainer=ruleSomeContainer 
	 { $current=$iv_ruleSomeContainer.current; } 
	 EOF 
;

// Rule SomeContainer
ruleSomeContainer returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='container' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getSomeContainerAccess().getContainerKeyword_0(), null);
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(lv_name_1_0, grammarAccess.getSomeContainerAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSomeContainerRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID", 
        		lastConsumedNode);
	    }

)
)	otherlv_2='{' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getSomeContainerAccess().getLeftCurlyBracketKeyword_2(), null);
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSomeContainerAccess().getNestedNestedParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_nested_3_0=ruleNested		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSomeContainerRule());
	        }
       		add(
       			$current, 
       			"nested",
        		lv_nested_3_0, 
        		"Nested", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSomeContainerAccess().getContentContentParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_content_4_0=ruleContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSomeContainerRule());
	        }
       		add(
       			$current, 
       			"content",
        		lv_content_4_0, 
        		"Content", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	createLeafNode(otherlv_5, grammarAccess.getSomeContainerAccess().getRightCurlyBracketKeyword_4(), null);
    }
)
;





// Entry rule entryRuleNested
entryRuleNested returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNestedRule(), currentNode); }
	 iv_ruleNested=ruleNested 
	 { $current=$iv_ruleNested.current; } 
	 EOF 
;

// Rule Nested
ruleNested returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='nested' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getNestedAccess().getNestedKeyword_0(), null);
    }
	otherlv_1='{' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getNestedAccess().getLeftCurlyBracketKeyword_1(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNestedAccess().getNestedSomeContainerParserRuleCall_2_0(), currentNode); 
	    }
		lv_nested_2_0=ruleSomeContainer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNestedRule());
	        }
       		add(
       			$current, 
       			"nested",
        		lv_nested_2_0, 
        		"SomeContainer", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}' 
    {
    	createLeafNode(otherlv_3, grammarAccess.getNestedAccess().getRightCurlyBracketKeyword_3(), null);
    }
)
;





// Entry rule entryRuleContent
entryRuleContent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getContentRule(), currentNode); }
	 iv_ruleContent=ruleContent 
	 { $current=$iv_ruleContent.current; } 
	 EOF 
;

// Rule Content
ruleContent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getContentAccess().getChildrenParserRuleCall_0(), currentNode); 
    }
    this_Children_0=ruleChildren
    { 
        $current = $this_Children_0.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getContentAccess().getAbstractChildrenParserRuleCall_1(), currentNode); 
    }
    this_AbstractChildren_1=ruleAbstractChildren
    { 
        $current = $this_AbstractChildren_1.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleChildren
entryRuleChildren returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getChildrenRule(), currentNode); }
	 iv_ruleChildren=ruleChildren 
	 { $current=$iv_ruleChildren.current; } 
	 EOF 
;

// Rule Children
ruleChildren returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='children' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getChildrenAccess().getChildrenKeyword_0(), null);
    }
	otherlv_1='{' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getChildrenAccess().getLeftCurlyBracketKeyword_1(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getChildrenAccess().getChildrenChildParserRuleCall_2_0(), currentNode); 
	    }
		lv_children_2_0=ruleChild		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChildrenRule());
	        }
       		add(
       			$current, 
       			"children",
        		lv_children_2_0, 
        		"Child", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	createLeafNode(otherlv_3, grammarAccess.getChildrenAccess().getCommaKeyword_3_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getChildrenAccess().getChildrenChildParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_children_4_0=ruleChild		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChildrenRule());
	        }
       		add(
       			$current, 
       			"children",
        		lv_children_4_0, 
        		"Child", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	createLeafNode(otherlv_5, grammarAccess.getChildrenAccess().getRightCurlyBracketKeyword_4(), null);
    }
)
;





// Entry rule entryRuleChild
entryRuleChild returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getChildRule(), currentNode); }
	 iv_ruleChild=ruleChild 
	 { $current=$iv_ruleChild.current; } 
	 EOF 
;

// Rule Child
ruleChild returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='->' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getChildAccess().getHyphenMinusGreaterThanSignKeyword_0(), null);
    }
	otherlv_1='C' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getChildAccess().getCKeyword_1(), null);
    }
	otherlv_2='(' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getChildAccess().getLeftParenthesisKeyword_2(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getChildAccess().getValueNamedParserRuleCall_3_0(), currentNode); 
	    }
		lv_value_3_0=ruleNamed		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChildRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Named", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	createLeafNode(otherlv_4, grammarAccess.getChildAccess().getRightParenthesisKeyword_4(), null);
    }
)
;





// Entry rule entryRuleAbstractChildren
entryRuleAbstractChildren returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbstractChildrenRule(), currentNode); }
	 iv_ruleAbstractChildren=ruleAbstractChildren 
	 { $current=$iv_ruleAbstractChildren.current; } 
	 EOF 
;

// Rule AbstractChildren
ruleAbstractChildren returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='abstract children' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getAbstractChildrenAccess().getAbstractChildrenKeyword_0(), null);
    }
	otherlv_1='{' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getAbstractChildrenAccess().getLeftCurlyBracketKeyword_1(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAbstractChildrenAccess().getAbstractChildrenAbstractChildParserRuleCall_2_0(), currentNode); 
	    }
		lv_abstractChildren_2_0=ruleAbstractChild		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractChildrenRule());
	        }
       		add(
       			$current, 
       			"abstractChildren",
        		lv_abstractChildren_2_0, 
        		"AbstractChild", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}' 
    {
    	createLeafNode(otherlv_3, grammarAccess.getAbstractChildrenAccess().getRightCurlyBracketKeyword_3(), null);
    }
)
;





// Entry rule entryRuleAbstractChild
entryRuleAbstractChild returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbstractChildRule(), currentNode); }
	 iv_ruleAbstractChild=ruleAbstractChild 
	 { $current=$iv_ruleAbstractChild.current; } 
	 EOF 
;

// Rule AbstractChild
ruleAbstractChild returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractChildAccess().getFirstConcreteParserRuleCall_0(), currentNode); 
    }
    this_FirstConcrete_0=ruleFirstConcrete
    { 
        $current = $this_FirstConcrete_0.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractChildAccess().getSecondConcreteParserRuleCall_1(), currentNode); 
    }
    this_SecondConcrete_1=ruleSecondConcrete
    { 
        $current = $this_SecondConcrete_1.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFirstConcrete
entryRuleFirstConcrete returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFirstConcreteRule(), currentNode); }
	 iv_ruleFirstConcrete=ruleFirstConcrete 
	 { $current=$iv_ruleFirstConcrete.current; } 
	 EOF 
;

// Rule FirstConcrete
ruleFirstConcrete returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='->' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getFirstConcreteAccess().getHyphenMinusGreaterThanSignKeyword_0(), null);
    }
	otherlv_1='F' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getFirstConcreteAccess().getFKeyword_1(), null);
    }
	otherlv_2='(' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getFirstConcreteAccess().getLeftParenthesisKeyword_2(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFirstConcreteAccess().getValueNamedParserRuleCall_3_0(), currentNode); 
	    }
		lv_value_3_0=ruleNamed		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFirstConcreteRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Named", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFirstConcreteRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		createLeafNode(otherlv_4, grammarAccess.getFirstConcreteAccess().getReferencedContainerSomeContainerCrossReference_4_0(), "referencedContainer"); 
	}

)
)?	otherlv_5=')' 
    {
    	createLeafNode(otherlv_5, grammarAccess.getFirstConcreteAccess().getRightParenthesisKeyword_5(), null);
    }
)
;





// Entry rule entryRuleSecondConcrete
entryRuleSecondConcrete returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSecondConcreteRule(), currentNode); }
	 iv_ruleSecondConcrete=ruleSecondConcrete 
	 { $current=$iv_ruleSecondConcrete.current; } 
	 EOF 
;

// Rule SecondConcrete
ruleSecondConcrete returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='->' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getSecondConcreteAccess().getHyphenMinusGreaterThanSignKeyword_0(), null);
    }
	otherlv_1='F' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getSecondConcreteAccess().getFKeyword_1(), null);
    }
	otherlv_2='S' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getSecondConcreteAccess().getSKeyword_2(), null);
    }
	otherlv_3='(' 
    {
    	createLeafNode(otherlv_3, grammarAccess.getSecondConcreteAccess().getLeftParenthesisKeyword_3(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSecondConcreteAccess().getValueNamedParserRuleCall_4_0(), currentNode); 
	    }
		lv_value_4_0=ruleNamed		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSecondConcreteRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"Named", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSecondConcreteRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		createLeafNode(otherlv_5, grammarAccess.getSecondConcreteAccess().getReferencedChildrenChildCrossReference_5_0(), "referencedChildren"); 
	}

)
)?	otherlv_6=')' 
    {
    	createLeafNode(otherlv_6, grammarAccess.getSecondConcreteAccess().getRightParenthesisKeyword_6(), null);
    }
)
;





// Entry rule entryRuleNamed
entryRuleNamed returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNamedRule(), currentNode); }
	 iv_ruleNamed=ruleNamed 
	 { $current=$iv_ruleNamed.current; } 
	 EOF 
;

// Rule Named
ruleNamed returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(lv_name_0_0, grammarAccess.getNamedAccess().getNameIDTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNamedRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID", 
        		lastConsumedNode);
	    }

)
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


