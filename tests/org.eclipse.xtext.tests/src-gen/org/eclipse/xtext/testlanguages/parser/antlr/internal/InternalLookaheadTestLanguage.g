/*
* generated by Xtext
*/
grammar InternalLookaheadTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.testlanguages.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.testlanguages.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.testlanguages.services.LookaheadTestLanguageGrammarAccess;

}

@parser::members {

 	private LookaheadTestLanguageGrammarAccess grammarAccess;
 	
    public InternalLookaheadTestLanguageParser(TokenStream input, IAstFactory factory, LookaheadTestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Entry";	
   	}
   	
   	@Override
   	protected LookaheadTestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleEntry
entryRuleEntry returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEntryRule(), currentNode); }
	 iv_ruleEntry=ruleEntry 
	 { $current=$iv_ruleEntry.current; } 
	 EOF 
;

// Rule Entry
ruleEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEntryAccess().getContentsAltsParserRuleCall_0(), currentNode); 
	    }
		lv_contents_0_0=ruleAlts		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntryRule());
	        }
       		add(
       			$current, 
       			"contents",
        		lv_contents_0_0, 
        		"Alts", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleAlts
entryRuleAlts returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAltsRule(), currentNode); }
	 iv_ruleAlts=ruleAlts 
	 { $current=$iv_ruleAlts.current; } 
	 EOF 
;

// Rule Alts
ruleAlts returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAltsAccess().getLookAhead0ParserRuleCall_0(), currentNode); 
    }
    this_LookAhead0_0=ruleLookAhead0
    { 
        $current = $this_LookAhead0_0.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAltsAccess().getLookAhead1ParserRuleCall_1(), currentNode); 
    }
    this_LookAhead1_1=ruleLookAhead1
    { 
        $current = $this_LookAhead1_1.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAltsAccess().getLookAhead3ParserRuleCall_2(), currentNode); 
    }
    this_LookAhead3_2=ruleLookAhead3
    { 
        $current = $this_LookAhead3_2.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLookAhead0
entryRuleLookAhead0 returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLookAhead0Rule(), currentNode); }
	 iv_ruleLookAhead0=ruleLookAhead0 
	 { $current=$iv_ruleLookAhead0.current; } 
	 EOF 
;

// Rule LookAhead0
ruleLookAhead0 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='bar' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getLookAhead0Access().getBarKeyword_0(), null);
    }
(
(
		lv_x_1_0=	'a' 
    {
        createLeafNode(lv_x_1_0, grammarAccess.getLookAhead0Access().getXAKeyword_1_0(), "x");
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLookAhead0Rule());
	        }
       		set($current, "x", lv_x_1_0, "a", lastConsumedNode);
	    }

)
))
;





// Entry rule entryRuleLookAhead1
entryRuleLookAhead1 returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLookAhead1Rule(), currentNode); }
	 iv_ruleLookAhead1=ruleLookAhead1 
	 { $current=$iv_ruleLookAhead1.current; } 
	 EOF 
;

// Rule LookAhead1
ruleLookAhead1 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='foo' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getLookAhead1Access().getFooKeyword_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLookAhead1Access().getYLookAhead2ParserRuleCall_1_0(), currentNode); 
	    }
		lv_y_1_0=ruleLookAhead2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLookAhead1Rule());
	        }
       		set(
       			$current, 
       			"y",
        		lv_y_1_0, 
        		"LookAhead2", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_x_2_0=	'b' 
    {
        createLeafNode(lv_x_2_0, grammarAccess.getLookAhead1Access().getXBKeyword_2_0(), "x");
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLookAhead1Rule());
	        }
       		set($current, "x", lv_x_2_0, "b", lastConsumedNode);
	    }

)
)(
(
		lv_x_3_0=	'd' 
    {
        createLeafNode(lv_x_3_0, grammarAccess.getLookAhead1Access().getXDKeyword_3_0(), "x");
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLookAhead1Rule());
	        }
       		set($current, "x", lv_x_3_0, "d", lastConsumedNode);
	    }

)
))
;





// Entry rule entryRuleLookAhead2
entryRuleLookAhead2 returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLookAhead2Rule(), currentNode); }
	 iv_ruleLookAhead2=ruleLookAhead2 
	 { $current=$iv_ruleLookAhead2.current; } 
	 EOF 
;

// Rule LookAhead2
ruleLookAhead2 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		lv_z_0_0=	'foo' 
    {
        createLeafNode(lv_z_0_0, grammarAccess.getLookAhead2Access().getZFooKeyword_0_0_0(), "z");
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLookAhead2Rule());
	        }
       		set($current, "z", lv_z_0_0, "foo", lastConsumedNode);
	    }

)
)
    |(
(
		lv_z_1_0=	'bar' 
    {
        createLeafNode(lv_z_1_0, grammarAccess.getLookAhead2Access().getZBarKeyword_0_1_0(), "z");
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLookAhead2Rule());
	        }
       		set($current, "z", lv_z_1_0, "bar", lastConsumedNode);
	    }

)
))	otherlv_2='c' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getLookAhead2Access().getCKeyword_1(), null);
    }
)
;





// Entry rule entryRuleLookAhead3
entryRuleLookAhead3 returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLookAhead3Rule(), currentNode); }
	 iv_ruleLookAhead3=ruleLookAhead3 
	 { $current=$iv_ruleLookAhead3.current; } 
	 EOF 
;

// Rule LookAhead3
ruleLookAhead3 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='foo' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getLookAhead3Access().getFooKeyword_0(), null);
    }
	otherlv_1='bar' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getLookAhead3Access().getBarKeyword_1(), null);
    }
(
(
		lv_x_2_0=	'b' 
    {
        createLeafNode(lv_x_2_0, grammarAccess.getLookAhead3Access().getXBKeyword_2_0(), "x");
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLookAhead3Rule());
	        }
       		set($current, "x", lv_x_2_0, "b", lastConsumedNode);
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLookAhead3Access().getZLookAhead4ParserRuleCall_3_0(), currentNode); 
	    }
		lv_z_3_0=ruleLookAhead4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLookAhead3Rule());
	        }
       		set(
       			$current, 
       			"z",
        		lv_z_3_0, 
        		"LookAhead4", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLookAhead4
entryRuleLookAhead4 returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLookAhead4Rule(), currentNode); }
	 iv_ruleLookAhead4=ruleLookAhead4 
	 { $current=$iv_ruleLookAhead4.current; } 
	 EOF 
;

// Rule LookAhead4
ruleLookAhead4 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_x_0_0=	'c' 
    {
        createLeafNode(lv_x_0_0, grammarAccess.getLookAhead4Access().getXCKeyword_0_0(), "x");
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLookAhead4Rule());
	        }
       		set($current, "x", lv_x_0_0, "c", lastConsumedNode);
	    }

)
)
    |(
(
		lv_x_1_0=	'd' 
    {
        createLeafNode(lv_x_1_0, grammarAccess.getLookAhead4Access().getXDKeyword_1_0(), "x");
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLookAhead4Rule());
	        }
       		set($current, "x", lv_x_1_0, "d", lastConsumedNode);
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


