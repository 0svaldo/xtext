/*
* generated by Xtext
*/
package org.eclipse.xtext.testlanguages.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Keyword;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;

import org.eclipse.xtext.testlanguages.services.ReferenceGrammarTestLanguageGrammarAccess.FarbeElements;

@SuppressWarnings("all")
public final class ReferenceGrammarTestLanguageFarbeConsumer extends NonTerminalConsumer {

	private FarbeElements rule;	

	private IElementConsumer assignment$1$Consumer;

	private IElementConsumer alternatives$2$Consumer;

	private IElementConsumer keyword$3$Consumer;

	private IElementConsumer keyword$4$Consumer;

	private IElementConsumer keyword$5$Consumer;

	private IElementConsumer keyword$6$Consumer;

	private ICharacterClass keyword$3$Delimiter;

	private ICharacterClass keyword$4$Delimiter;

	private ICharacterClass keyword$5$Delimiter;

	private ICharacterClass keyword$6$Delimiter;

	protected class Assignment$1$Consumer extends AssignmentConsumer {
		
		protected Assignment$1$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return alternatives$2$Consumer;
		}
	}

	protected class Alternatives$2$Consumer extends AlternativesConsumer {
		
		protected Alternatives$2$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$3$Consumer);
			acceptor.accept(keyword$4$Consumer);
			acceptor.accept(keyword$5$Consumer);
			acceptor.accept(keyword$6$Consumer);
		}
	}

	protected class Keyword$3$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$3$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "wert", false, false, getKeyword$3$Delimiter(), optional);
		}
	}

	protected class Keyword$4$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$4$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "wert", false, false, getKeyword$4$Delimiter(), optional);
		}
	}

	protected class Keyword$5$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$5$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "wert", false, false, getKeyword$5$Delimiter(), optional);
		}
	}

	protected class Keyword$6$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$6$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "wert", false, false, getKeyword$6$Delimiter(), optional);
		}
	}

	public ReferenceGrammarTestLanguageFarbeConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$3$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$4$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$5$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$6$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return assignment$1$Consumer.consume();
	}

	public FarbeElements getRule() {
		return rule;
	}
	
	public void setRule(FarbeElements rule) {
		this.rule = rule;
		
		assignment$1$Consumer = new Assignment$1$Consumer(rule.getWertAssignment());
		alternatives$2$Consumer = new Alternatives$2$Consumer(rule.getWertAlternatives_0());
		keyword$3$Consumer = new Keyword$3$Consumer(rule.getWertROTKeyword_0_0());
		keyword$4$Consumer = new Keyword$4$Consumer(rule.getWertBLAUKeyword_0_1());
		keyword$5$Consumer = new Keyword$5$Consumer(rule.getWertGELBKeyword_0_2());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.getWertGRÜNKeyword_0_3());
		keyword$3$Consumer = new Keyword$3$Consumer(rule.getWertROTKeyword_0_0());
		keyword$4$Consumer = new Keyword$4$Consumer(rule.getWertBLAUKeyword_0_1());
		keyword$5$Consumer = new Keyword$5$Consumer(rule.getWertGELBKeyword_0_2());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.getWertGRÜNKeyword_0_3());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public ICharacterClass getKeyword$3$Delimiter() {
		return keyword$3$Delimiter;
	}
	
	public void setKeyword$3$Delimiter(ICharacterClass characterClass) {
		keyword$3$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$4$Delimiter() {
		return keyword$4$Delimiter;
	}
	
	public void setKeyword$4$Delimiter(ICharacterClass characterClass) {
		keyword$4$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$5$Delimiter() {
		return keyword$5$Delimiter;
	}
	
	public void setKeyword$5$Delimiter(ICharacterClass characterClass) {
		keyword$5$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$6$Delimiter() {
		return keyword$6$Delimiter;
	}
	
	public void setKeyword$6$Delimiter(ICharacterClass characterClass) {
		keyword$6$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
