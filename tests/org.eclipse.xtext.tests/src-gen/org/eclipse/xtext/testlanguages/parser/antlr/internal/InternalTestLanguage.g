/*
* generated by Xtext
*/
grammar InternalTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.testlanguages.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.testlanguages.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.testlanguages.services.TestLanguageGrammarAccess;

}

@parser::members {

 	private TestLanguageGrammarAccess grammarAccess;
 	
    public InternalTestLanguageParser(TokenStream input, IAstFactory factory, TestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "EntryRule";	
   	}
   	
   	@Override
   	protected TestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleEntryRule
entryRuleEntryRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEntryRuleRule(), currentNode); }
	 iv_ruleEntryRule=ruleEntryRule 
	 { $current=$iv_ruleEntryRule.current; } 
	 EOF 
;

// Rule EntryRule
ruleEntryRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEntryRuleAccess().getMultiFeatureAbstractRuleParserRuleCall_0(), currentNode); 
	    }
		lv_multiFeature_0_0=ruleAbstractRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntryRuleRule());
	        }
       		add(
       			$current, 
       			"multiFeature",
        		lv_multiFeature_0_0, 
        		"AbstractRule", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleAbstractRule
entryRuleAbstractRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbstractRuleRule(), currentNode); }
	 iv_ruleAbstractRule=ruleAbstractRule 
	 { $current=$iv_ruleAbstractRule.current; } 
	 EOF 
;

// Rule AbstractRule
ruleAbstractRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractRuleAccess().getChoiceRuleParserRuleCall_0(), currentNode); 
    }
    this_ChoiceRule_0=ruleChoiceRule
    { 
        $current = $this_ChoiceRule_0.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractRuleAccess().getReducibleRuleParserRuleCall_1(), currentNode); 
    }
    this_ReducibleRule_1=ruleReducibleRule
    { 
        $current = $this_ReducibleRule_1.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleChoiceRule
entryRuleChoiceRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getChoiceRuleRule(), currentNode); }
	 iv_ruleChoiceRule=ruleChoiceRule 
	 { $current=$iv_ruleChoiceRule.current; } 
	 EOF 
;

// Rule ChoiceRule
ruleChoiceRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='choice' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getChoiceRuleAccess().getChoiceKeyword_0(), null);
    }
(
(
		lv_optionalKeyword_1_0=	'optional' 
    {
        createLeafNode(lv_optionalKeyword_1_0, grammarAccess.getChoiceRuleAccess().getOptionalKeywordOptionalKeyword_1_0(), "optionalKeyword");
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChoiceRuleRule());
	        }
       		set($current, "optionalKeyword", true, "optional", lastConsumedNode);
	    }

)
)?(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(lv_name_2_0, grammarAccess.getChoiceRuleAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChoiceRuleRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID", 
        		lastConsumedNode);
	    }

)
))
;





// Entry rule entryRuleReducibleRule
entryRuleReducibleRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReducibleRuleRule(), currentNode); }
	 iv_ruleReducibleRule=ruleReducibleRule 
	 { $current=$iv_ruleReducibleRule.current; } 
	 EOF 
;

// Rule ReducibleRule
ruleReducibleRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='reducible' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getReducibleRuleAccess().getReducibleKeyword_0(), null);
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getReducibleRuleAccess().getTerminalRuleParserRuleCall_1(), currentNode); 
    }
    this_TerminalRule_1=ruleTerminalRule
    { 
        $current = $this_TerminalRule_1.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getReducibleRuleAccess().getReducibleCompositeActionFeatureAction_2_0(),
            $current);
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReducibleRuleAccess().getActionFeatureTerminalRuleParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_actionFeature_3_0=ruleTerminalRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReducibleRuleRule());
	        }
       		add(
       			$current, 
       			"actionFeature",
        		lv_actionFeature_3_0, 
        		"TerminalRule", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTerminalRule
entryRuleTerminalRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTerminalRuleRule(), currentNode); }
	 iv_ruleTerminalRule=ruleTerminalRule 
	 { $current=$iv_ruleTerminalRule.current; } 
	 EOF 
;

// Rule TerminalRule
ruleTerminalRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_stringFeature_0_0=RULE_STRING
		{
			createLeafNode(lv_stringFeature_0_0, grammarAccess.getTerminalRuleAccess().getStringFeatureSTRINGTerminalRuleCall_0(), "stringFeature"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalRuleRule());
	        }
       		set(
       			$current, 
       			"stringFeature",
        		lv_stringFeature_0_0, 
        		"STRING", 
        		lastConsumedNode);
	    }

)
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


