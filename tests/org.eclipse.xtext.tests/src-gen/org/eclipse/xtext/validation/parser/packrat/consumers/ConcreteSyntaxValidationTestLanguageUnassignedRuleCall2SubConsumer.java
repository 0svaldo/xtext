/*
* generated by Xtext
*/
package org.eclipse.xtext.validation.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Action;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;

import org.eclipse.xtext.validation.services.ConcreteSyntaxValidationTestLanguageGrammarAccess.UnassignedRuleCall2SubElements;

@SuppressWarnings("all")
public final class ConcreteSyntaxValidationTestLanguageUnassignedRuleCall2SubConsumer extends NonTerminalConsumer {

	private UnassignedRuleCall2SubElements rule;	

	private IElementConsumer action$1$Consumer;

	protected class Action$1$Consumer extends ElementConsumer<Action> {
		
		protected Action$1$Consumer(final Action action) {
			super(action);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			consumeAction(getElement(), false);
			return SUCCESS;
		}
	}

	public ConcreteSyntaxValidationTestLanguageUnassignedRuleCall2SubConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
	}
	
	@Override
	protected int doConsume() throws Exception {
		return action$1$Consumer.consume();
	}

	public UnassignedRuleCall2SubElements getRule() {
		return rule;
	}
	
	public void setRule(UnassignedRuleCall2SubElements rule) {
		this.rule = rule;
		
		action$1$Consumer = new Action$1$Consumer(rule.getUnassignedRuleCall2SubActionAction());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
}
