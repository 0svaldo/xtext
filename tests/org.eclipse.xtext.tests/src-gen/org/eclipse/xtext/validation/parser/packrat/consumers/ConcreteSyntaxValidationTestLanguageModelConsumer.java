/*
* generated by Xtext
*/
package org.eclipse.xtext.validation.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;

import org.eclipse.xtext.validation.services.ConcreteSyntaxValidationTestLanguageGrammarAccess.ModelElements;

public final class ConcreteSyntaxValidationTestLanguageModelConsumer extends NonTerminalConsumer {

	private ModelElements rule;	

	private INonTerminalConsumer altList1Consumer;

	private INonTerminalConsumer altList2Consumer;

	private INonTerminalConsumer alternativeMultiplicitiesConsumer;

	private INonTerminalConsumer assignedActionConsumer;

	private INonTerminalConsumer assignedActionSecondConsumer;

	private INonTerminalConsumer combination1Consumer;

	private INonTerminalConsumer combination2Consumer;

	private INonTerminalConsumer combination3Consumer;

	private INonTerminalConsumer combination4Consumer;

	private INonTerminalConsumer groupMultiplicitiesConsumer;

	private INonTerminalConsumer list1Consumer;

	private INonTerminalConsumer list2Consumer;

	private INonTerminalConsumer list3Consumer;

	private INonTerminalConsumer list4Consumer;

	private INonTerminalConsumer list5Consumer;

	private INonTerminalConsumer simpleAlternativeConsumer;

	private INonTerminalConsumer simpleGroupConsumer;

	private INonTerminalConsumer simpleMultiplicitiesConsumer;

	private INonTerminalConsumer transientObjectConsumer;

	private INonTerminalConsumer transientSerializeables1Consumer;

	private INonTerminalConsumer unassignedAction1Consumer;

	private INonTerminalConsumer unassignedAction2Consumer;

	private INonTerminalConsumer unassignedAction3Consumer;

	private INonTerminalConsumer unassignedRuleCall1Consumer;

	private INonTerminalConsumer unassignedRuleCall2Consumer;

	private IElementConsumer alternatives$1$Consumer;

	private IElementConsumer assignment$2$Consumer;

	private IElementConsumer ruleCall$3$Consumer;

	private IElementConsumer assignment$4$Consumer;

	private IElementConsumer ruleCall$5$Consumer;

	private IElementConsumer assignment$6$Consumer;

	private IElementConsumer ruleCall$7$Consumer;

	private IElementConsumer assignment$8$Consumer;

	private IElementConsumer ruleCall$9$Consumer;

	private IElementConsumer assignment$10$Consumer;

	private IElementConsumer ruleCall$11$Consumer;

	private IElementConsumer assignment$12$Consumer;

	private IElementConsumer ruleCall$13$Consumer;

	private IElementConsumer assignment$14$Consumer;

	private IElementConsumer ruleCall$15$Consumer;

	private IElementConsumer assignment$16$Consumer;

	private IElementConsumer ruleCall$17$Consumer;

	private IElementConsumer assignment$18$Consumer;

	private IElementConsumer ruleCall$19$Consumer;

	private IElementConsumer assignment$20$Consumer;

	private IElementConsumer ruleCall$21$Consumer;

	private IElementConsumer assignment$22$Consumer;

	private IElementConsumer ruleCall$23$Consumer;

	private IElementConsumer assignment$24$Consumer;

	private IElementConsumer ruleCall$25$Consumer;

	private IElementConsumer assignment$26$Consumer;

	private IElementConsumer ruleCall$27$Consumer;

	private IElementConsumer assignment$28$Consumer;

	private IElementConsumer ruleCall$29$Consumer;

	private IElementConsumer assignment$30$Consumer;

	private IElementConsumer ruleCall$31$Consumer;

	private IElementConsumer assignment$32$Consumer;

	private IElementConsumer ruleCall$33$Consumer;

	private IElementConsumer assignment$34$Consumer;

	private IElementConsumer ruleCall$35$Consumer;

	private IElementConsumer assignment$36$Consumer;

	private IElementConsumer ruleCall$37$Consumer;

	private IElementConsumer assignment$38$Consumer;

	private IElementConsumer ruleCall$39$Consumer;

	private IElementConsumer assignment$40$Consumer;

	private IElementConsumer ruleCall$41$Consumer;

	private IElementConsumer assignment$42$Consumer;

	private IElementConsumer ruleCall$43$Consumer;

	private IElementConsumer assignment$44$Consumer;

	private IElementConsumer ruleCall$45$Consumer;

	private IElementConsumer assignment$46$Consumer;

	private IElementConsumer ruleCall$47$Consumer;

	private IElementConsumer assignment$48$Consumer;

	private IElementConsumer ruleCall$49$Consumer;

	private IElementConsumer assignment$50$Consumer;

	private IElementConsumer ruleCall$51$Consumer;

	protected class Alternatives$1$Consumer extends AlternativesConsumer {
		
		protected Alternatives$1$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$2$Consumer);
			acceptor.accept(assignment$4$Consumer);
			acceptor.accept(assignment$6$Consumer);
			acceptor.accept(assignment$8$Consumer);
			acceptor.accept(assignment$10$Consumer);
			acceptor.accept(assignment$12$Consumer);
			acceptor.accept(assignment$14$Consumer);
			acceptor.accept(assignment$16$Consumer);
			acceptor.accept(assignment$18$Consumer);
			acceptor.accept(assignment$20$Consumer);
			acceptor.accept(assignment$22$Consumer);
			acceptor.accept(assignment$24$Consumer);
			acceptor.accept(assignment$26$Consumer);
			acceptor.accept(assignment$28$Consumer);
			acceptor.accept(assignment$30$Consumer);
			acceptor.accept(assignment$32$Consumer);
			acceptor.accept(assignment$34$Consumer);
			acceptor.accept(assignment$36$Consumer);
			acceptor.accept(assignment$38$Consumer);
			acceptor.accept(assignment$40$Consumer);
			acceptor.accept(assignment$42$Consumer);
			acceptor.accept(assignment$44$Consumer);
			acceptor.accept(assignment$46$Consumer);
			acceptor.accept(assignment$48$Consumer);
			acceptor.accept(assignment$50$Consumer);
		}
	}

	protected class Assignment$2$Consumer extends AssignmentConsumer {
		
		protected Assignment$2$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$3$Consumer;
		}
	}

	protected class RuleCall$3$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$3$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(simpleGroupConsumer, "x1", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$4$Consumer extends AssignmentConsumer {
		
		protected Assignment$4$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$5$Consumer;
		}
	}

	protected class RuleCall$5$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$5$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(simpleAlternativeConsumer, "x2", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$6$Consumer extends AssignmentConsumer {
		
		protected Assignment$6$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$7$Consumer;
		}
	}

	protected class RuleCall$7$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$7$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(simpleMultiplicitiesConsumer, "x3", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$8$Consumer extends AssignmentConsumer {
		
		protected Assignment$8$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$9$Consumer;
		}
	}

	protected class RuleCall$9$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$9$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(groupMultiplicitiesConsumer, "x4", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$10$Consumer extends AssignmentConsumer {
		
		protected Assignment$10$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$11$Consumer;
		}
	}

	protected class RuleCall$11$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$11$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(alternativeMultiplicitiesConsumer, "x5", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$12$Consumer extends AssignmentConsumer {
		
		protected Assignment$12$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$13$Consumer;
		}
	}

	protected class RuleCall$13$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$13$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(assignedActionConsumer, "x6", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$14$Consumer extends AssignmentConsumer {
		
		protected Assignment$14$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$15$Consumer;
		}
	}

	protected class RuleCall$15$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$15$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(assignedActionSecondConsumer, "x7", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$16$Consumer extends AssignmentConsumer {
		
		protected Assignment$16$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$17$Consumer;
		}
	}

	protected class RuleCall$17$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$17$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(unassignedAction1Consumer, "x8", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$18$Consumer extends AssignmentConsumer {
		
		protected Assignment$18$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$19$Consumer;
		}
	}

	protected class RuleCall$19$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$19$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(unassignedAction2Consumer, "x9", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$20$Consumer extends AssignmentConsumer {
		
		protected Assignment$20$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$21$Consumer;
		}
	}

	protected class RuleCall$21$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$21$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(unassignedAction3Consumer, "x10", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$22$Consumer extends AssignmentConsumer {
		
		protected Assignment$22$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$23$Consumer;
		}
	}

	protected class RuleCall$23$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$23$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(unassignedRuleCall1Consumer, "x11", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$24$Consumer extends AssignmentConsumer {
		
		protected Assignment$24$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$25$Consumer;
		}
	}

	protected class RuleCall$25$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$25$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(unassignedRuleCall2Consumer, "x12", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$26$Consumer extends AssignmentConsumer {
		
		protected Assignment$26$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$27$Consumer;
		}
	}

	protected class RuleCall$27$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$27$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(combination1Consumer, "x13", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$28$Consumer extends AssignmentConsumer {
		
		protected Assignment$28$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$29$Consumer;
		}
	}

	protected class RuleCall$29$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$29$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(combination2Consumer, "x14", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$30$Consumer extends AssignmentConsumer {
		
		protected Assignment$30$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$31$Consumer;
		}
	}

	protected class RuleCall$31$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$31$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(combination3Consumer, "x15", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$32$Consumer extends AssignmentConsumer {
		
		protected Assignment$32$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$33$Consumer;
		}
	}

	protected class RuleCall$33$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$33$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(combination4Consumer, "x16", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$34$Consumer extends AssignmentConsumer {
		
		protected Assignment$34$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$35$Consumer;
		}
	}

	protected class RuleCall$35$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$35$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(list1Consumer, "x17", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$36$Consumer extends AssignmentConsumer {
		
		protected Assignment$36$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$37$Consumer;
		}
	}

	protected class RuleCall$37$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$37$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(list2Consumer, "x18", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$38$Consumer extends AssignmentConsumer {
		
		protected Assignment$38$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$39$Consumer;
		}
	}

	protected class RuleCall$39$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$39$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(list3Consumer, "x19", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$40$Consumer extends AssignmentConsumer {
		
		protected Assignment$40$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$41$Consumer;
		}
	}

	protected class RuleCall$41$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$41$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(list4Consumer, "x20", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$42$Consumer extends AssignmentConsumer {
		
		protected Assignment$42$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$43$Consumer;
		}
	}

	protected class RuleCall$43$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$43$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(list5Consumer, "x21", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$44$Consumer extends AssignmentConsumer {
		
		protected Assignment$44$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$45$Consumer;
		}
	}

	protected class RuleCall$45$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$45$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(altList1Consumer, "x22", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$46$Consumer extends AssignmentConsumer {
		
		protected Assignment$46$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$47$Consumer;
		}
	}

	protected class RuleCall$47$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$47$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(altList2Consumer, "x23", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$48$Consumer extends AssignmentConsumer {
		
		protected Assignment$48$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$49$Consumer;
		}
	}

	protected class RuleCall$49$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$49$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(transientObjectConsumer, "x24", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$50$Consumer extends AssignmentConsumer {
		
		protected Assignment$50$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$51$Consumer;
		}
	}

	protected class RuleCall$51$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$51$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(transientSerializeables1Consumer, "x25", false, false, false, getElement(), optional);
		}
	}

	public ConcreteSyntaxValidationTestLanguageModelConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
	}
	
	@Override
	protected int doConsume() throws Exception {
		return alternatives$1$Consumer.consume();
	}

	public ModelElements getRule() {
		return rule;
	}
	
	public void setRule(ModelElements rule) {
		this.rule = rule;
		
		alternatives$1$Consumer = new Alternatives$1$Consumer(rule.getAlternatives());
		assignment$2$Consumer = new Assignment$2$Consumer(rule.getX1Assignment_0());
		ruleCall$3$Consumer = new RuleCall$3$Consumer(rule.getX1SimpleGroupParserRuleCall_0_0());
		assignment$4$Consumer = new Assignment$4$Consumer(rule.getX2Assignment_1());
		ruleCall$5$Consumer = new RuleCall$5$Consumer(rule.getX2SimpleAlternativeParserRuleCall_1_0());
		assignment$6$Consumer = new Assignment$6$Consumer(rule.getX3Assignment_2());
		ruleCall$7$Consumer = new RuleCall$7$Consumer(rule.getX3SimpleMultiplicitiesParserRuleCall_2_0());
		assignment$8$Consumer = new Assignment$8$Consumer(rule.getX4Assignment_3());
		ruleCall$9$Consumer = new RuleCall$9$Consumer(rule.getX4GroupMultiplicitiesParserRuleCall_3_0());
		assignment$10$Consumer = new Assignment$10$Consumer(rule.getX5Assignment_4());
		ruleCall$11$Consumer = new RuleCall$11$Consumer(rule.getX5AlternativeMultiplicitiesParserRuleCall_4_0());
		assignment$12$Consumer = new Assignment$12$Consumer(rule.getX6Assignment_5());
		ruleCall$13$Consumer = new RuleCall$13$Consumer(rule.getX6AssignedActionParserRuleCall_5_0());
		assignment$14$Consumer = new Assignment$14$Consumer(rule.getX7Assignment_6());
		ruleCall$15$Consumer = new RuleCall$15$Consumer(rule.getX7AssignedActionSecondParserRuleCall_6_0());
		assignment$16$Consumer = new Assignment$16$Consumer(rule.getX8Assignment_7());
		ruleCall$17$Consumer = new RuleCall$17$Consumer(rule.getX8UnassignedAction1ParserRuleCall_7_0());
		assignment$18$Consumer = new Assignment$18$Consumer(rule.getX9Assignment_8());
		ruleCall$19$Consumer = new RuleCall$19$Consumer(rule.getX9UnassignedAction2ParserRuleCall_8_0());
		assignment$20$Consumer = new Assignment$20$Consumer(rule.getX10Assignment_9());
		ruleCall$21$Consumer = new RuleCall$21$Consumer(rule.getX10UnassignedAction3ParserRuleCall_9_0());
		assignment$22$Consumer = new Assignment$22$Consumer(rule.getX11Assignment_10());
		ruleCall$23$Consumer = new RuleCall$23$Consumer(rule.getX11UnassignedRuleCall1ParserRuleCall_10_0());
		assignment$24$Consumer = new Assignment$24$Consumer(rule.getX12Assignment_11());
		ruleCall$25$Consumer = new RuleCall$25$Consumer(rule.getX12UnassignedRuleCall2ParserRuleCall_11_0());
		assignment$26$Consumer = new Assignment$26$Consumer(rule.getX13Assignment_12());
		ruleCall$27$Consumer = new RuleCall$27$Consumer(rule.getX13Combination1ParserRuleCall_12_0());
		assignment$28$Consumer = new Assignment$28$Consumer(rule.getX14Assignment_13());
		ruleCall$29$Consumer = new RuleCall$29$Consumer(rule.getX14Combination2ParserRuleCall_13_0());
		assignment$30$Consumer = new Assignment$30$Consumer(rule.getX15Assignment_14());
		ruleCall$31$Consumer = new RuleCall$31$Consumer(rule.getX15Combination3ParserRuleCall_14_0());
		assignment$32$Consumer = new Assignment$32$Consumer(rule.getX16Assignment_15());
		ruleCall$33$Consumer = new RuleCall$33$Consumer(rule.getX16Combination4ParserRuleCall_15_0());
		assignment$34$Consumer = new Assignment$34$Consumer(rule.getX17Assignment_16());
		ruleCall$35$Consumer = new RuleCall$35$Consumer(rule.getX17List1ParserRuleCall_16_0());
		assignment$36$Consumer = new Assignment$36$Consumer(rule.getX18Assignment_17());
		ruleCall$37$Consumer = new RuleCall$37$Consumer(rule.getX18List2ParserRuleCall_17_0());
		assignment$38$Consumer = new Assignment$38$Consumer(rule.getX19Assignment_18());
		ruleCall$39$Consumer = new RuleCall$39$Consumer(rule.getX19List3ParserRuleCall_18_0());
		assignment$40$Consumer = new Assignment$40$Consumer(rule.getX20Assignment_19());
		ruleCall$41$Consumer = new RuleCall$41$Consumer(rule.getX20List4ParserRuleCall_19_0());
		assignment$42$Consumer = new Assignment$42$Consumer(rule.getX21Assignment_20());
		ruleCall$43$Consumer = new RuleCall$43$Consumer(rule.getX21List5ParserRuleCall_20_0());
		assignment$44$Consumer = new Assignment$44$Consumer(rule.getX22Assignment_21());
		ruleCall$45$Consumer = new RuleCall$45$Consumer(rule.getX22AltList1ParserRuleCall_21_0());
		assignment$46$Consumer = new Assignment$46$Consumer(rule.getX23Assignment_22());
		ruleCall$47$Consumer = new RuleCall$47$Consumer(rule.getX23AltList2ParserRuleCall_22_0());
		assignment$48$Consumer = new Assignment$48$Consumer(rule.getX24Assignment_23());
		ruleCall$49$Consumer = new RuleCall$49$Consumer(rule.getX24TransientObjectParserRuleCall_23_0());
		assignment$50$Consumer = new Assignment$50$Consumer(rule.getX25Assignment_24());
		ruleCall$51$Consumer = new RuleCall$51$Consumer(rule.getX25TransientSerializeables1ParserRuleCall_24_0());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setAltList1Consumer(INonTerminalConsumer altList1Consumer) {
		this.altList1Consumer = altList1Consumer;
	}
	
	public void setAltList2Consumer(INonTerminalConsumer altList2Consumer) {
		this.altList2Consumer = altList2Consumer;
	}
	
	public void setAlternativeMultiplicitiesConsumer(INonTerminalConsumer alternativeMultiplicitiesConsumer) {
		this.alternativeMultiplicitiesConsumer = alternativeMultiplicitiesConsumer;
	}
	
	public void setAssignedActionConsumer(INonTerminalConsumer assignedActionConsumer) {
		this.assignedActionConsumer = assignedActionConsumer;
	}
	
	public void setAssignedActionSecondConsumer(INonTerminalConsumer assignedActionSecondConsumer) {
		this.assignedActionSecondConsumer = assignedActionSecondConsumer;
	}
	
	public void setCombination1Consumer(INonTerminalConsumer combination1Consumer) {
		this.combination1Consumer = combination1Consumer;
	}
	
	public void setCombination2Consumer(INonTerminalConsumer combination2Consumer) {
		this.combination2Consumer = combination2Consumer;
	}
	
	public void setCombination3Consumer(INonTerminalConsumer combination3Consumer) {
		this.combination3Consumer = combination3Consumer;
	}
	
	public void setCombination4Consumer(INonTerminalConsumer combination4Consumer) {
		this.combination4Consumer = combination4Consumer;
	}
	
	public void setGroupMultiplicitiesConsumer(INonTerminalConsumer groupMultiplicitiesConsumer) {
		this.groupMultiplicitiesConsumer = groupMultiplicitiesConsumer;
	}
	
	public void setList1Consumer(INonTerminalConsumer list1Consumer) {
		this.list1Consumer = list1Consumer;
	}
	
	public void setList2Consumer(INonTerminalConsumer list2Consumer) {
		this.list2Consumer = list2Consumer;
	}
	
	public void setList3Consumer(INonTerminalConsumer list3Consumer) {
		this.list3Consumer = list3Consumer;
	}
	
	public void setList4Consumer(INonTerminalConsumer list4Consumer) {
		this.list4Consumer = list4Consumer;
	}
	
	public void setList5Consumer(INonTerminalConsumer list5Consumer) {
		this.list5Consumer = list5Consumer;
	}
	
	public void setSimpleAlternativeConsumer(INonTerminalConsumer simpleAlternativeConsumer) {
		this.simpleAlternativeConsumer = simpleAlternativeConsumer;
	}
	
	public void setSimpleGroupConsumer(INonTerminalConsumer simpleGroupConsumer) {
		this.simpleGroupConsumer = simpleGroupConsumer;
	}
	
	public void setSimpleMultiplicitiesConsumer(INonTerminalConsumer simpleMultiplicitiesConsumer) {
		this.simpleMultiplicitiesConsumer = simpleMultiplicitiesConsumer;
	}
	
	public void setTransientObjectConsumer(INonTerminalConsumer transientObjectConsumer) {
		this.transientObjectConsumer = transientObjectConsumer;
	}
	
	public void setTransientSerializeables1Consumer(INonTerminalConsumer transientSerializeables1Consumer) {
		this.transientSerializeables1Consumer = transientSerializeables1Consumer;
	}
	
	public void setUnassignedAction1Consumer(INonTerminalConsumer unassignedAction1Consumer) {
		this.unassignedAction1Consumer = unassignedAction1Consumer;
	}
	
	public void setUnassignedAction2Consumer(INonTerminalConsumer unassignedAction2Consumer) {
		this.unassignedAction2Consumer = unassignedAction2Consumer;
	}
	
	public void setUnassignedAction3Consumer(INonTerminalConsumer unassignedAction3Consumer) {
		this.unassignedAction3Consumer = unassignedAction3Consumer;
	}
	
	public void setUnassignedRuleCall1Consumer(INonTerminalConsumer unassignedRuleCall1Consumer) {
		this.unassignedRuleCall1Consumer = unassignedRuleCall1Consumer;
	}
	
	public void setUnassignedRuleCall2Consumer(INonTerminalConsumer unassignedRuleCall2Consumer) {
		this.unassignedRuleCall2Consumer = unassignedRuleCall2Consumer;
	}
	
}
