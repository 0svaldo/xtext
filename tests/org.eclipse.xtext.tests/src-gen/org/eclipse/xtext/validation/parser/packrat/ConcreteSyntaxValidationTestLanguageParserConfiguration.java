/*
* generated by Xtext
*/
package org.eclipse.xtext.validation.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.validation.services.ConcreteSyntaxValidationTestLanguageGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageModelConsumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageSimpleGroupConsumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageSimpleAlternativeConsumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageSimpleMultiplicitiesConsumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageGroupMultiplicitiesConsumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageAlternativeMultiplicitiesConsumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageAssignedActionConsumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageAssignedActionSecondConsumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageUnassignedAction1Consumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageUnassignedAction2Consumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageUnassignedAction3Consumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageUnassignedRuleCall1Consumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageUnassignedRuleCall1SubConsumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageUnassignedRuleCall2Consumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageUnassignedRuleCall2SubConsumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageCombination1Consumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageCombination2Consumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageCombination3Consumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageCombination4Consumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageList1Consumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageList2Consumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageList3Consumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageList4Consumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageList5Consumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageAltList1Consumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageAltList2Consumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageTransientObjectConsumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageTransientObjectSubConsumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageTransientSerializeables1Consumer;
import org.eclipse.xtext.validation.parser.packrat.consumers.ConcreteSyntaxValidationTestLanguageTransientSerializeables1EnumConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class ConcreteSyntaxValidationTestLanguageParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 
    private ConcreteSyntaxValidationTestLanguageModelConsumer modelConsumer;
    private ConcreteSyntaxValidationTestLanguageSimpleGroupConsumer simpleGroupConsumer;
    private ConcreteSyntaxValidationTestLanguageSimpleAlternativeConsumer simpleAlternativeConsumer;
    private ConcreteSyntaxValidationTestLanguageSimpleMultiplicitiesConsumer simpleMultiplicitiesConsumer;
    private ConcreteSyntaxValidationTestLanguageGroupMultiplicitiesConsumer groupMultiplicitiesConsumer;
    private ConcreteSyntaxValidationTestLanguageAlternativeMultiplicitiesConsumer alternativeMultiplicitiesConsumer;
    private ConcreteSyntaxValidationTestLanguageAssignedActionConsumer assignedActionConsumer;
    private ConcreteSyntaxValidationTestLanguageAssignedActionSecondConsumer assignedActionSecondConsumer;
    private ConcreteSyntaxValidationTestLanguageUnassignedAction1Consumer unassignedAction1Consumer;
    private ConcreteSyntaxValidationTestLanguageUnassignedAction2Consumer unassignedAction2Consumer;
    private ConcreteSyntaxValidationTestLanguageUnassignedAction3Consumer unassignedAction3Consumer;
    private ConcreteSyntaxValidationTestLanguageUnassignedRuleCall1Consumer unassignedRuleCall1Consumer;
    private ConcreteSyntaxValidationTestLanguageUnassignedRuleCall1SubConsumer unassignedRuleCall1SubConsumer;
    private ConcreteSyntaxValidationTestLanguageUnassignedRuleCall2Consumer unassignedRuleCall2Consumer;
    private ConcreteSyntaxValidationTestLanguageUnassignedRuleCall2SubConsumer unassignedRuleCall2SubConsumer;
    private ConcreteSyntaxValidationTestLanguageCombination1Consumer combination1Consumer;
    private ConcreteSyntaxValidationTestLanguageCombination2Consumer combination2Consumer;
    private ConcreteSyntaxValidationTestLanguageCombination3Consumer combination3Consumer;
    private ConcreteSyntaxValidationTestLanguageCombination4Consumer combination4Consumer;
    private ConcreteSyntaxValidationTestLanguageList1Consumer list1Consumer;
    private ConcreteSyntaxValidationTestLanguageList2Consumer list2Consumer;
    private ConcreteSyntaxValidationTestLanguageList3Consumer list3Consumer;
    private ConcreteSyntaxValidationTestLanguageList4Consumer list4Consumer;
    private ConcreteSyntaxValidationTestLanguageList5Consumer list5Consumer;
    private ConcreteSyntaxValidationTestLanguageAltList1Consumer altList1Consumer;
    private ConcreteSyntaxValidationTestLanguageAltList2Consumer altList2Consumer;
    private ConcreteSyntaxValidationTestLanguageTransientObjectConsumer transientObjectConsumer;
    private ConcreteSyntaxValidationTestLanguageTransientObjectSubConsumer transientObjectSubConsumer;
    private ConcreteSyntaxValidationTestLanguageTransientSerializeables1Consumer transientSerializeables1Consumer;
    private ConcreteSyntaxValidationTestLanguageTransientSerializeables1EnumConsumer transientSerializeables1EnumConsumer;

	private ConcreteSyntaxValidationTestLanguageGrammarAccess grammarAccess;

	public ConcreteSyntaxValidationTestLanguageParserConfiguration(IInternalParserConfiguration configuration, ConcreteSyntaxValidationTestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public ConcreteSyntaxValidationTestLanguageModelConsumer getRootConsumer() {
		return modelConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		modelConsumer = new ConcreteSyntaxValidationTestLanguageModelConsumer(
    		this, null
    	);
		simpleGroupConsumer = new ConcreteSyntaxValidationTestLanguageSimpleGroupConsumer(
    		this, null
    	);
		simpleAlternativeConsumer = new ConcreteSyntaxValidationTestLanguageSimpleAlternativeConsumer(
    		this, null
    	);
		simpleMultiplicitiesConsumer = new ConcreteSyntaxValidationTestLanguageSimpleMultiplicitiesConsumer(
    		this, null
    	);
		groupMultiplicitiesConsumer = new ConcreteSyntaxValidationTestLanguageGroupMultiplicitiesConsumer(
    		this, null
    	);
		alternativeMultiplicitiesConsumer = new ConcreteSyntaxValidationTestLanguageAlternativeMultiplicitiesConsumer(
    		this, null
    	);
		assignedActionConsumer = new ConcreteSyntaxValidationTestLanguageAssignedActionConsumer(
    		this, null
    	);
		assignedActionSecondConsumer = new ConcreteSyntaxValidationTestLanguageAssignedActionSecondConsumer(
    		this, null
    	);
		unassignedAction1Consumer = new ConcreteSyntaxValidationTestLanguageUnassignedAction1Consumer(
    		this, null
    	);
		unassignedAction2Consumer = new ConcreteSyntaxValidationTestLanguageUnassignedAction2Consumer(
    		this, null
    	);
		unassignedAction3Consumer = new ConcreteSyntaxValidationTestLanguageUnassignedAction3Consumer(
    		this, null
    	);
		unassignedRuleCall1Consumer = new ConcreteSyntaxValidationTestLanguageUnassignedRuleCall1Consumer(
    		this, null
    	);
		unassignedRuleCall1SubConsumer = new ConcreteSyntaxValidationTestLanguageUnassignedRuleCall1SubConsumer(
    		this, null
    	);
		unassignedRuleCall2Consumer = new ConcreteSyntaxValidationTestLanguageUnassignedRuleCall2Consumer(
    		this, null
    	);
		unassignedRuleCall2SubConsumer = new ConcreteSyntaxValidationTestLanguageUnassignedRuleCall2SubConsumer(
    		this, null
    	);
		combination1Consumer = new ConcreteSyntaxValidationTestLanguageCombination1Consumer(
    		this, null
    	);
		combination2Consumer = new ConcreteSyntaxValidationTestLanguageCombination2Consumer(
    		this, null
    	);
		combination3Consumer = new ConcreteSyntaxValidationTestLanguageCombination3Consumer(
    		this, null
    	);
		combination4Consumer = new ConcreteSyntaxValidationTestLanguageCombination4Consumer(
    		this, null
    	);
		list1Consumer = new ConcreteSyntaxValidationTestLanguageList1Consumer(
    		this, null
    	);
		list2Consumer = new ConcreteSyntaxValidationTestLanguageList2Consumer(
    		this, null
    	);
		list3Consumer = new ConcreteSyntaxValidationTestLanguageList3Consumer(
    		this, null
    	);
		list4Consumer = new ConcreteSyntaxValidationTestLanguageList4Consumer(
    		this, null
    	);
		list5Consumer = new ConcreteSyntaxValidationTestLanguageList5Consumer(
    		this, null
    	);
		altList1Consumer = new ConcreteSyntaxValidationTestLanguageAltList1Consumer(
    		this, null
    	);
		altList2Consumer = new ConcreteSyntaxValidationTestLanguageAltList2Consumer(
    		this, null
    	);
		transientObjectConsumer = new ConcreteSyntaxValidationTestLanguageTransientObjectConsumer(
    		this, null
    	);
		transientObjectSubConsumer = new ConcreteSyntaxValidationTestLanguageTransientObjectSubConsumer(
    		this, null
    	);
		transientSerializeables1Consumer = new ConcreteSyntaxValidationTestLanguageTransientSerializeables1Consumer(
    		this, null
    	);
		transientSerializeables1EnumConsumer = new ConcreteSyntaxValidationTestLanguageTransientSerializeables1EnumConsumer(this, null);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getModelConsumer().setRule(grammarAccess.getModelAccess());
		getSimpleGroupConsumer().setRule(grammarAccess.getSimpleGroupAccess());
		getSimpleAlternativeConsumer().setRule(grammarAccess.getSimpleAlternativeAccess());
		getSimpleMultiplicitiesConsumer().setRule(grammarAccess.getSimpleMultiplicitiesAccess());
		getGroupMultiplicitiesConsumer().setRule(grammarAccess.getGroupMultiplicitiesAccess());
		getAlternativeMultiplicitiesConsumer().setRule(grammarAccess.getAlternativeMultiplicitiesAccess());
		getAssignedActionConsumer().setRule(grammarAccess.getAssignedActionAccess());
		getAssignedActionSecondConsumer().setRule(grammarAccess.getAssignedActionSecondAccess());
		getUnassignedAction1Consumer().setRule(grammarAccess.getUnassignedAction1Access());
		getUnassignedAction2Consumer().setRule(grammarAccess.getUnassignedAction2Access());
		getUnassignedAction3Consumer().setRule(grammarAccess.getUnassignedAction3Access());
		getUnassignedRuleCall1Consumer().setRule(grammarAccess.getUnassignedRuleCall1Access());
		getUnassignedRuleCall1SubConsumer().setRule(grammarAccess.getUnassignedRuleCall1SubAccess());
		getUnassignedRuleCall2Consumer().setRule(grammarAccess.getUnassignedRuleCall2Access());
		getUnassignedRuleCall2SubConsumer().setRule(grammarAccess.getUnassignedRuleCall2SubAccess());
		getCombination1Consumer().setRule(grammarAccess.getCombination1Access());
		getCombination2Consumer().setRule(grammarAccess.getCombination2Access());
		getCombination3Consumer().setRule(grammarAccess.getCombination3Access());
		getCombination4Consumer().setRule(grammarAccess.getCombination4Access());
		getList1Consumer().setRule(grammarAccess.getList1Access());
		getList2Consumer().setRule(grammarAccess.getList2Access());
		getList3Consumer().setRule(grammarAccess.getList3Access());
		getList4Consumer().setRule(grammarAccess.getList4Access());
		getList5Consumer().setRule(grammarAccess.getList5Access());
		getAltList1Consumer().setRule(grammarAccess.getAltList1Access());
		getAltList2Consumer().setRule(grammarAccess.getAltList2Access());
		getTransientObjectConsumer().setRule(grammarAccess.getTransientObjectAccess());
		getTransientObjectSubConsumer().setRule(grammarAccess.getTransientObjectSubAccess());
		getTransientSerializeables1Consumer().setRule(grammarAccess.getTransientSerializeables1Access());
		getTransientSerializeables1EnumConsumer().setRule(grammarAccess.getTransientSerializeables1EnumAccess());
		getIdConsumer().setRule(grammarAccess.getIDRule());
		getIntConsumer().setRule(grammarAccess.getINTRule());
		getStringConsumer().setRule(grammarAccess.getSTRINGRule());
		getMlCommentConsumer().setRule(grammarAccess.getML_COMMENTRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getAnyOtherConsumer().setRule(grammarAccess.getANY_OTHERRule());


		getModelConsumer().setAltList1Consumer(getAltList1Consumer());
		getModelConsumer().setAltList2Consumer(getAltList2Consumer());
		getModelConsumer().setAlternativeMultiplicitiesConsumer(getAlternativeMultiplicitiesConsumer());
		getModelConsumer().setAssignedActionConsumer(getAssignedActionConsumer());
		getModelConsumer().setAssignedActionSecondConsumer(getAssignedActionSecondConsumer());
		getModelConsumer().setCombination1Consumer(getCombination1Consumer());
		getModelConsumer().setCombination2Consumer(getCombination2Consumer());
		getModelConsumer().setCombination3Consumer(getCombination3Consumer());
		getModelConsumer().setCombination4Consumer(getCombination4Consumer());
		getModelConsumer().setGroupMultiplicitiesConsumer(getGroupMultiplicitiesConsumer());
		getModelConsumer().setList1Consumer(getList1Consumer());
		getModelConsumer().setList2Consumer(getList2Consumer());
		getModelConsumer().setList3Consumer(getList3Consumer());
		getModelConsumer().setList4Consumer(getList4Consumer());
		getModelConsumer().setList5Consumer(getList5Consumer());
		getModelConsumer().setSimpleAlternativeConsumer(getSimpleAlternativeConsumer());
		getModelConsumer().setSimpleGroupConsumer(getSimpleGroupConsumer());
		getModelConsumer().setSimpleMultiplicitiesConsumer(getSimpleMultiplicitiesConsumer());
		getModelConsumer().setTransientObjectConsumer(getTransientObjectConsumer());
		getModelConsumer().setTransientSerializeables1Consumer(getTransientSerializeables1Consumer());
		getModelConsumer().setUnassignedAction1Consumer(getUnassignedAction1Consumer());
		getModelConsumer().setUnassignedAction2Consumer(getUnassignedAction2Consumer());
		getModelConsumer().setUnassignedAction3Consumer(getUnassignedAction3Consumer());
		getModelConsumer().setUnassignedRuleCall1Consumer(getUnassignedRuleCall1Consumer());
		getModelConsumer().setUnassignedRuleCall2Consumer(getUnassignedRuleCall2Consumer());

		getSimpleGroupConsumer().setIdConsumer(getIdConsumer());

		getSimpleAlternativeConsumer().setIdConsumer(getIdConsumer());

		getSimpleMultiplicitiesConsumer().setIdConsumer(getIdConsumer());

		getGroupMultiplicitiesConsumer().setIdConsumer(getIdConsumer());

		getAlternativeMultiplicitiesConsumer().setIdConsumer(getIdConsumer());

		getAssignedActionConsumer().setIdConsumer(getIdConsumer());

		getAssignedActionSecondConsumer().setIdConsumer(getIdConsumer());

		getUnassignedAction1Consumer().setIdConsumer(getIdConsumer());

		getUnassignedAction2Consumer().setIdConsumer(getIdConsumer());

		getUnassignedAction3Consumer().setIdConsumer(getIdConsumer());

		getUnassignedRuleCall1Consumer().setIdConsumer(getIdConsumer());
		getUnassignedRuleCall1Consumer().setUnassignedRuleCall1SubConsumer(getUnassignedRuleCall1SubConsumer());

		getUnassignedRuleCall1SubConsumer().setIdConsumer(getIdConsumer());

		getUnassignedRuleCall2Consumer().setIdConsumer(getIdConsumer());
		getUnassignedRuleCall2Consumer().setUnassignedRuleCall2SubConsumer(getUnassignedRuleCall2SubConsumer());

		getCombination1Consumer().setIdConsumer(getIdConsumer());

		getCombination2Consumer().setIdConsumer(getIdConsumer());

		getCombination3Consumer().setIdConsumer(getIdConsumer());
		getCombination3Consumer().setIntConsumer(getIntConsumer());
		getCombination3Consumer().setStringConsumer(getStringConsumer());

		getCombination4Consumer().setIdConsumer(getIdConsumer());

		getList1Consumer().setIdConsumer(getIdConsumer());

		getList2Consumer().setIdConsumer(getIdConsumer());

		getList3Consumer().setIdConsumer(getIdConsumer());

		getList4Consumer().setIdConsumer(getIdConsumer());

		getList5Consumer().setIdConsumer(getIdConsumer());

		getAltList1Consumer().setIdConsumer(getIdConsumer());

		getAltList2Consumer().setIdConsumer(getIdConsumer());

		getTransientObjectConsumer().setIdConsumer(getIdConsumer());
		getTransientObjectConsumer().setTransientObjectSubConsumer(getTransientObjectSubConsumer());

		getTransientObjectSubConsumer().setIdConsumer(getIdConsumer());

		getTransientSerializeables1Consumer().setIdConsumer(getIdConsumer());
		getTransientSerializeables1Consumer().setIntConsumer(getIntConsumer());
		getTransientSerializeables1Consumer().setTransientSerializeables1EnumConsumer(getTransientSerializeables1EnumConsumer());

		getSimpleGroupConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getSimpleGroupConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getSimpleGroupConsumer().setRuleCall$6$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getSimpleAlternativeConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getSimpleAlternativeConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getSimpleAlternativeConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getSimpleAlternativeConsumer().setRuleCall$7$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getSimpleAlternativeConsumer().setRuleCall$11$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getSimpleMultiplicitiesConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getSimpleMultiplicitiesConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getSimpleMultiplicitiesConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getSimpleMultiplicitiesConsumer().setKeyword$11$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getSimpleMultiplicitiesConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getSimpleMultiplicitiesConsumer().setRuleCall$7$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getSimpleMultiplicitiesConsumer().setRuleCall$10$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getSimpleMultiplicitiesConsumer().setRuleCall$13$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getGroupMultiplicitiesConsumer().setKeyword$11$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getGroupMultiplicitiesConsumer().setKeyword$17$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getGroupMultiplicitiesConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getGroupMultiplicitiesConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getGroupMultiplicitiesConsumer().setRuleCall$10$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getGroupMultiplicitiesConsumer().setRuleCall$14$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getGroupMultiplicitiesConsumer().setRuleCall$16$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getGroupMultiplicitiesConsumer().setRuleCall$20$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getGroupMultiplicitiesConsumer().setRuleCall$22$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getGroupMultiplicitiesConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getGroupMultiplicitiesConsumer().setRuleCall$8$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getAlternativeMultiplicitiesConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getAlternativeMultiplicitiesConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getAlternativeMultiplicitiesConsumer().setKeyword$10$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getAlternativeMultiplicitiesConsumer().setKeyword$15$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getAlternativeMultiplicitiesConsumer().setKeyword$18$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getAlternativeMultiplicitiesConsumer().setKeyword$23$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getAlternativeMultiplicitiesConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getAlternativeMultiplicitiesConsumer().setRuleCall$9$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getAlternativeMultiplicitiesConsumer().setRuleCall$13$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getAlternativeMultiplicitiesConsumer().setRuleCall$17$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getAlternativeMultiplicitiesConsumer().setRuleCall$21$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getAlternativeMultiplicitiesConsumer().setRuleCall$25$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getAssignedActionConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getAssignedActionConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getAssignedActionConsumer().setRuleCall$9$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getAssignedActionSecondConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getAssignedActionSecondConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getAssignedActionSecondConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getAssignedActionSecondConsumer().setRuleCall$7$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getUnassignedAction1Consumer().setKeyword$4$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getUnassignedAction1Consumer().setRuleCall$6$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getUnassignedAction1Consumer().setRuleCall$8$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getUnassignedAction2Consumer().setKeyword$4$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getUnassignedAction2Consumer().setRuleCall$6$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getUnassignedAction2Consumer().setRuleCall$8$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getUnassignedAction3Consumer().setKeyword$2$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getUnassignedAction3Consumer().setKeyword$5$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getUnassignedAction3Consumer().setKeyword$9$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getUnassignedAction3Consumer().setRuleCall$13$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getUnassignedAction3Consumer().setRuleCall$15$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getUnassignedRuleCall1Consumer().setKeyword$2$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getUnassignedRuleCall1Consumer().setRuleCall$5$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getUnassignedRuleCall1SubConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getUnassignedRuleCall2Consumer().setKeyword$2$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getUnassignedRuleCall2Consumer().setRuleCall$5$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getCombination1Consumer().setKeyword$2$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getCombination1Consumer().setKeyword$6$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getCombination1Consumer().setKeyword$11$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getCombination1Consumer().setRuleCall$4$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getCombination1Consumer().setRuleCall$8$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getCombination1Consumer().setRuleCall$13$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getCombination1Consumer().setRuleCall$15$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getCombination2Consumer().setKeyword$2$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getCombination2Consumer().setKeyword$7$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getCombination2Consumer().setRuleCall$4$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getCombination2Consumer().setRuleCall$9$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getCombination2Consumer().setRuleCall$12$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getCombination2Consumer().setRuleCall$14$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getCombination3Consumer().setKeyword$2$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getCombination3Consumer().setRuleCall$5$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getCombination3Consumer().setRuleCall$7$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$261$Delimiter);
		getCombination3Consumer().setRuleCall$9$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$261$Delimiter);
		getCombination4Consumer().setKeyword$2$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getCombination4Consumer().setKeyword$4$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getCombination4Consumer().setRuleCall$6$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getCombination4Consumer().setRuleCall$8$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getCombination4Consumer().setRuleCall$10$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getList1Consumer().setKeyword$2$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getList1Consumer().setKeyword$6$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getList1Consumer().setRuleCall$4$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getList1Consumer().setRuleCall$8$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getList2Consumer().setKeyword$2$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getList2Consumer().setKeyword$7$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getList2Consumer().setRuleCall$5$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getList2Consumer().setRuleCall$9$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getList3Consumer().setKeyword$3$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getList3Consumer().setKeyword$8$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getList3Consumer().setKeyword$12$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getList3Consumer().setRuleCall$6$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getList3Consumer().setRuleCall$10$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getList3Consumer().setRuleCall$14$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getList4Consumer().setKeyword$2$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getList4Consumer().setKeyword$6$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getList4Consumer().setKeyword$9$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getList4Consumer().setRuleCall$4$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getList4Consumer().setRuleCall$8$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getList4Consumer().setRuleCall$11$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getList5Consumer().setKeyword$2$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getList5Consumer().setKeyword$8$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getList5Consumer().setKeyword$11$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getList5Consumer().setRuleCall$6$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getList5Consumer().setRuleCall$10$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getList5Consumer().setRuleCall$13$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getList5Consumer().setRuleCall$15$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getAltList1Consumer().setKeyword$2$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getAltList1Consumer().setKeyword$10$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getAltList1Consumer().setKeyword$16$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getAltList1Consumer().setRuleCall$6$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getAltList1Consumer().setRuleCall$8$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getAltList1Consumer().setRuleCall$12$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getAltList1Consumer().setRuleCall$14$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getAltList1Consumer().setRuleCall$18$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getAltList1Consumer().setRuleCall$20$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getAltList2Consumer().setKeyword$2$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getAltList2Consumer().setKeyword$10$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$68$Delimiter);
		getAltList2Consumer().setKeyword$14$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getAltList2Consumer().setRuleCall$6$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getAltList2Consumer().setRuleCall$8$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getAltList2Consumer().setRuleCall$12$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getAltList2Consumer().setRuleCall$16$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getAltList2Consumer().setRuleCall$18$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getTransientObjectConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getTransientObjectConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getTransientObjectSubConsumer().setRuleCall$3$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getTransientObjectSubConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getTransientSerializeables1Consumer().setKeyword$2$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.keyword$57$Delimiter);
		getTransientSerializeables1Consumer().setRuleCall$5$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getTransientSerializeables1Consumer().setRuleCall$10$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$59$Delimiter);
		getTransientSerializeables1Consumer().setRuleCall$12$Delimiter(org.eclipse.xtext.validation.parser.packrat.ConcreteSyntaxValidationTestLanguageDelimiters.ruleCall$261$Delimiter);
	}
	
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public ConcreteSyntaxValidationTestLanguageModelConsumer getModelConsumer() {
    	return modelConsumer;
    }

    public ConcreteSyntaxValidationTestLanguageSimpleGroupConsumer getSimpleGroupConsumer() {
    	return simpleGroupConsumer;
    }

    public ConcreteSyntaxValidationTestLanguageSimpleAlternativeConsumer getSimpleAlternativeConsumer() {
    	return simpleAlternativeConsumer;
    }

    public ConcreteSyntaxValidationTestLanguageSimpleMultiplicitiesConsumer getSimpleMultiplicitiesConsumer() {
    	return simpleMultiplicitiesConsumer;
    }

    public ConcreteSyntaxValidationTestLanguageGroupMultiplicitiesConsumer getGroupMultiplicitiesConsumer() {
    	return groupMultiplicitiesConsumer;
    }

    public ConcreteSyntaxValidationTestLanguageAlternativeMultiplicitiesConsumer getAlternativeMultiplicitiesConsumer() {
    	return alternativeMultiplicitiesConsumer;
    }

    public ConcreteSyntaxValidationTestLanguageAssignedActionConsumer getAssignedActionConsumer() {
    	return assignedActionConsumer;
    }

    public ConcreteSyntaxValidationTestLanguageAssignedActionSecondConsumer getAssignedActionSecondConsumer() {
    	return assignedActionSecondConsumer;
    }

    public ConcreteSyntaxValidationTestLanguageUnassignedAction1Consumer getUnassignedAction1Consumer() {
    	return unassignedAction1Consumer;
    }

    public ConcreteSyntaxValidationTestLanguageUnassignedAction2Consumer getUnassignedAction2Consumer() {
    	return unassignedAction2Consumer;
    }

    public ConcreteSyntaxValidationTestLanguageUnassignedAction3Consumer getUnassignedAction3Consumer() {
    	return unassignedAction3Consumer;
    }

    public ConcreteSyntaxValidationTestLanguageUnassignedRuleCall1Consumer getUnassignedRuleCall1Consumer() {
    	return unassignedRuleCall1Consumer;
    }

    public ConcreteSyntaxValidationTestLanguageUnassignedRuleCall1SubConsumer getUnassignedRuleCall1SubConsumer() {
    	return unassignedRuleCall1SubConsumer;
    }

    public ConcreteSyntaxValidationTestLanguageUnassignedRuleCall2Consumer getUnassignedRuleCall2Consumer() {
    	return unassignedRuleCall2Consumer;
    }

    public ConcreteSyntaxValidationTestLanguageUnassignedRuleCall2SubConsumer getUnassignedRuleCall2SubConsumer() {
    	return unassignedRuleCall2SubConsumer;
    }

    public ConcreteSyntaxValidationTestLanguageCombination1Consumer getCombination1Consumer() {
    	return combination1Consumer;
    }

    public ConcreteSyntaxValidationTestLanguageCombination2Consumer getCombination2Consumer() {
    	return combination2Consumer;
    }

    public ConcreteSyntaxValidationTestLanguageCombination3Consumer getCombination3Consumer() {
    	return combination3Consumer;
    }

    public ConcreteSyntaxValidationTestLanguageCombination4Consumer getCombination4Consumer() {
    	return combination4Consumer;
    }

    public ConcreteSyntaxValidationTestLanguageList1Consumer getList1Consumer() {
    	return list1Consumer;
    }

    public ConcreteSyntaxValidationTestLanguageList2Consumer getList2Consumer() {
    	return list2Consumer;
    }

    public ConcreteSyntaxValidationTestLanguageList3Consumer getList3Consumer() {
    	return list3Consumer;
    }

    public ConcreteSyntaxValidationTestLanguageList4Consumer getList4Consumer() {
    	return list4Consumer;
    }

    public ConcreteSyntaxValidationTestLanguageList5Consumer getList5Consumer() {
    	return list5Consumer;
    }

    public ConcreteSyntaxValidationTestLanguageAltList1Consumer getAltList1Consumer() {
    	return altList1Consumer;
    }

    public ConcreteSyntaxValidationTestLanguageAltList2Consumer getAltList2Consumer() {
    	return altList2Consumer;
    }

    public ConcreteSyntaxValidationTestLanguageTransientObjectConsumer getTransientObjectConsumer() {
    	return transientObjectConsumer;
    }

    public ConcreteSyntaxValidationTestLanguageTransientObjectSubConsumer getTransientObjectSubConsumer() {
    	return transientObjectSubConsumer;
    }

    public ConcreteSyntaxValidationTestLanguageTransientSerializeables1Consumer getTransientSerializeables1Consumer() {
    	return transientSerializeables1Consumer;
    }

    public ConcreteSyntaxValidationTestLanguageTransientSerializeables1EnumConsumer getTransientSerializeables1EnumConsumer() {
    	return transientSerializeables1EnumConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
