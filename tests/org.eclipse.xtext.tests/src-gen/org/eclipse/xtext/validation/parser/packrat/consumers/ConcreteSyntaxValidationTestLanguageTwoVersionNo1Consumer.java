/*
* generated by Xtext
*/
package org.eclipse.xtext.validation.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.validation.services.ConcreteSyntaxValidationTestLanguageGrammarAccess.TwoVersionNo1Elements;

@SuppressWarnings("all")
public final class ConcreteSyntaxValidationTestLanguageTwoVersionNo1Consumer extends NonTerminalConsumer {

	private TwoVersionNo1Elements rule;	

	private ITerminalConsumer idConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer assignment$2$Consumer;

	private IElementConsumer ruleCall$3$Consumer;

	private IElementConsumer assignment$4$Consumer;

	private IElementConsumer ruleCall$5$Consumer;

	private IElementConsumer keyword$6$Consumer;

	private IElementConsumer group$7$Consumer;

	private IElementConsumer assignment$8$Consumer;

	private IElementConsumer ruleCall$9$Consumer;

	private IElementConsumer assignment$10$Consumer;

	private IElementConsumer ruleCall$11$Consumer;

	private IElementConsumer keyword$12$Consumer;

	private IElementConsumer assignment$13$Consumer;

	private IElementConsumer ruleCall$14$Consumer;

	private ICharacterClass keyword$6$Delimiter;

	private ICharacterClass keyword$12$Delimiter;

	private ISequenceMatcher ruleCall$3$Delimiter;

	private ISequenceMatcher ruleCall$5$Delimiter;

	private ISequenceMatcher ruleCall$9$Delimiter;

	private ISequenceMatcher ruleCall$11$Delimiter;

	private ISequenceMatcher ruleCall$14$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$2$Consumer);
			acceptor.accept(assignment$4$Consumer);
			acceptor.accept(keyword$6$Consumer);
			acceptor.accept(group$7$Consumer);
			acceptor.accept(keyword$12$Consumer);
			acceptor.accept(assignment$13$Consumer);
		}
	}

	protected class Assignment$2$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$2$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$3$Consumer;
		}
	}

	protected class RuleCall$3$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$3$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "shared1", false, false, getElement(), getRuleCall$3$Delimiter(), optional);
		}
	}

	protected class Assignment$4$Consumer extends AssignmentConsumer {
		
		protected Assignment$4$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$5$Consumer;
		}
	}

	protected class RuleCall$5$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$5$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "shared2", false, false, getElement(), getRuleCall$5$Delimiter(), optional);
		}
	}

	protected class Keyword$6$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$6$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$6$Delimiter(), optional);
		}
	}

	protected class Group$7$Consumer extends OptionalGroupConsumer {
		
		protected Group$7$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$8$Consumer);
			acceptor.accept(assignment$10$Consumer);
		}
	}

	protected class Assignment$8$Consumer extends AssignmentConsumer {
		
		protected Assignment$8$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$9$Consumer;
		}
	}

	protected class RuleCall$9$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$9$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "shared3", true, false, getElement(), getRuleCall$9$Delimiter(), optional);
		}
	}

	protected class Assignment$10$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$10$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$11$Consumer;
		}
	}

	protected class RuleCall$11$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$11$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "shared3", true, false, getElement(), getRuleCall$11$Delimiter(), optional);
		}
	}

	protected class Keyword$12$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$12$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$12$Delimiter(), optional);
		}
	}

	protected class Assignment$13$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$13$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$14$Consumer;
		}
	}

	protected class RuleCall$14$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$14$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "version1", false, false, getElement(), getRuleCall$14$Delimiter(), optional);
		}
	}

	public ConcreteSyntaxValidationTestLanguageTwoVersionNo1Consumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$6$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$12$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$3$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$5$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$9$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$11$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$14$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public TwoVersionNo1Elements getRule() {
		return rule;
	}
	
	public void setRule(TwoVersionNo1Elements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		assignment$2$Consumer = new Assignment$2$Consumer(rule.getShared1Assignment_0());
		ruleCall$3$Consumer = new RuleCall$3$Consumer(rule.getShared1IDTerminalRuleCall_0_0());
		assignment$4$Consumer = new Assignment$4$Consumer(rule.getShared2Assignment_1());
		ruleCall$5$Consumer = new RuleCall$5$Consumer(rule.getShared2IDTerminalRuleCall_1_0());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.getShortKeyword_2());
		group$7$Consumer = new Group$7$Consumer(rule.getGroup_3());
		assignment$8$Consumer = new Assignment$8$Consumer(rule.getShared3Assignment_3_0());
		ruleCall$9$Consumer = new RuleCall$9$Consumer(rule.getShared3IDTerminalRuleCall_3_0_0());
		assignment$10$Consumer = new Assignment$10$Consumer(rule.getShared3Assignment_3_1());
		ruleCall$11$Consumer = new RuleCall$11$Consumer(rule.getShared3IDTerminalRuleCall_3_1_0());
		keyword$12$Consumer = new Keyword$12$Consumer(rule.getOneKeyword_4());
		assignment$13$Consumer = new Assignment$13$Consumer(rule.getVersion1Assignment_5());
		ruleCall$14$Consumer = new RuleCall$14$Consumer(rule.getVersion1IDTerminalRuleCall_5_0());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public ICharacterClass getKeyword$6$Delimiter() {
		return keyword$6$Delimiter;
	}
	
	public void setKeyword$6$Delimiter(ICharacterClass characterClass) {
		keyword$6$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$12$Delimiter() {
		return keyword$12$Delimiter;
	}
	
	public void setKeyword$12$Delimiter(ICharacterClass characterClass) {
		keyword$12$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$3$Delimiter() {
		return ruleCall$3$Delimiter;
	}
	
	public void setRuleCall$3$Delimiter(ISequenceMatcher matcher) {
		ruleCall$3$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$5$Delimiter() {
		return ruleCall$5$Delimiter;
	}
	
	public void setRuleCall$5$Delimiter(ISequenceMatcher matcher) {
		ruleCall$5$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$9$Delimiter() {
		return ruleCall$9$Delimiter;
	}
	
	public void setRuleCall$9$Delimiter(ISequenceMatcher matcher) {
		ruleCall$9$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$11$Delimiter() {
		return ruleCall$11$Delimiter;
	}
	
	public void setRuleCall$11$Delimiter(ISequenceMatcher matcher) {
		ruleCall$11$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$14$Delimiter() {
		return ruleCall$14$Delimiter;
	}
	
	public void setRuleCall$14$Delimiter(ISequenceMatcher matcher) {
		ruleCall$14$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
