/*
* generated by Xtext
*/
package org.eclipse.xtext.validation.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.validation.services.ConcreteSyntaxValidationTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class ConcreteSyntaxValidationTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private ConcreteSyntaxValidationTestLanguageGrammarAccess grammarAccess;
	
	@Override	
	public ConcreteSyntaxValidationTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Alternatives(this, this, 0, inst);
			case 1: return new SimpleGroup_Group(this, this, 1, inst);
			case 2: return new SimpleAlternative_Group(this, this, 2, inst);
			case 3: return new SimpleMultiplicities_Group(this, this, 3, inst);
			case 4: return new GroupMultiplicities_Group(this, this, 4, inst);
			case 5: return new AlternativeMultiplicities_Group(this, this, 5, inst);
			case 6: return new AssignedAction_Group(this, this, 6, inst);
			case 7: return new AssignedActionSecond_Group(this, this, 7, inst);
			case 8: return new UnassignedAction1_Group(this, this, 8, inst);
			case 9: return new UnassignedAction2_Group(this, this, 9, inst);
			case 10: return new UnassignedAction3_Group(this, this, 10, inst);
			case 11: return new UnassignedRuleCall1_Group(this, this, 11, inst);
			case 12: return new UnassignedRuleCall1Sub_Val1Assignment(this, this, 12, inst);
			case 13: return new UnassignedRuleCall2_Group(this, this, 13, inst);
			case 14: return new UnassignedRuleCall2Sub_UnassignedRuleCall2SubActionAction(this, this, 14, inst);
			case 15: return new Combination1_Group(this, this, 15, inst);
			case 16: return new Combination2_Group(this, this, 16, inst);
			case 17: return new Combination3_Group(this, this, 17, inst);
			case 18: return new Combination4_Group(this, this, 18, inst);
			case 19: return new List1_Group(this, this, 19, inst);
			case 20: return new List2_Group(this, this, 20, inst);
			case 21: return new List3_Alternatives(this, this, 21, inst);
			case 22: return new List4_Group(this, this, 22, inst);
			case 23: return new List5_Group(this, this, 23, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 *   x1=SimpleGroup|x2=SimpleAlternative|x3=SimpleMultiplicities|x4=
 *   GroupMultiplicities|x5=AlternativeMultiplicities|x6=AssignedAction|x7=
 *   AssignedActionSecond|x8=UnassignedAction1|x9=UnassignedAction2|x10=
 *   UnassignedAction3|x11=UnassignedRuleCall1|x12=UnassignedRuleCall2|x13=
 *   Combination1|x14=Combination2|x15=Combination3|x16=Combination4|x17=List1|x18=
 *   List2|x19=List3|x20=List4|x21=List5;
 *
 **/

// x1=SimpleGroup|x2=SimpleAlternative|x3=SimpleMultiplicities|x4=
// GroupMultiplicities|x5=AlternativeMultiplicities|x6=AssignedAction|x7=
// AssignedActionSecond|x8=UnassignedAction1|x9=UnassignedAction2|x10=
// UnassignedAction3|x11=UnassignedRuleCall1|x12=UnassignedRuleCall2|x13=
// Combination1|x14=Combination2|x15=Combination3|x16=Combination4|x17=List1|x18=
// List2|x19=List3|x20=List4|x21=List5
protected class Model_Alternatives extends AlternativesToken {

	public Model_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getModelAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_X1Assignment_0(parent, this, 0, inst);
			case 1: return new Model_X2Assignment_1(parent, this, 1, inst);
			case 2: return new Model_X3Assignment_2(parent, this, 2, inst);
			case 3: return new Model_X4Assignment_3(parent, this, 3, inst);
			case 4: return new Model_X5Assignment_4(parent, this, 4, inst);
			case 5: return new Model_X6Assignment_5(parent, this, 5, inst);
			case 6: return new Model_X7Assignment_6(parent, this, 6, inst);
			case 7: return new Model_X8Assignment_7(parent, this, 7, inst);
			case 8: return new Model_X9Assignment_8(parent, this, 8, inst);
			case 9: return new Model_X10Assignment_9(parent, this, 9, inst);
			case 10: return new Model_X11Assignment_10(parent, this, 10, inst);
			case 11: return new Model_X12Assignment_11(parent, this, 11, inst);
			case 12: return new Model_X13Assignment_12(parent, this, 12, inst);
			case 13: return new Model_X14Assignment_13(parent, this, 13, inst);
			case 14: return new Model_X15Assignment_14(parent, this, 14, inst);
			case 15: return new Model_X16Assignment_15(parent, this, 15, inst);
			case 16: return new Model_X17Assignment_16(parent, this, 16, inst);
			case 17: return new Model_X18Assignment_17(parent, this, 17, inst);
			case 18: return new Model_X19Assignment_18(parent, this, 18, inst);
			case 19: return new Model_X20Assignment_19(parent, this, 19, inst);
			case 20: return new Model_X21Assignment_20(parent, this, 20, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// x1=SimpleGroup
protected class Model_X1Assignment_0 extends AssignmentToken  {
	
	public Model_X1Assignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getX1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleGroup_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleGroupRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getX1SimpleGroupParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// x2=SimpleAlternative
protected class Model_X2Assignment_1 extends AssignmentToken  {
	
	public Model_X2Assignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getX2Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleAlternative_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleAlternativeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getX2SimpleAlternativeParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// x3=SimpleMultiplicities
protected class Model_X3Assignment_2 extends AssignmentToken  {
	
	public Model_X3Assignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getX3Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleMultiplicities_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x3",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x3");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleMultiplicitiesRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getX3SimpleMultiplicitiesParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// x4=GroupMultiplicities
protected class Model_X4Assignment_3 extends AssignmentToken  {
	
	public Model_X4Assignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getX4Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GroupMultiplicities_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x4",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x4");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGroupMultiplicitiesRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getX4GroupMultiplicitiesParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// x5=AlternativeMultiplicities
protected class Model_X5Assignment_4 extends AssignmentToken  {
	
	public Model_X5Assignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getX5Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AlternativeMultiplicities_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x5",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x5");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAlternativeMultiplicitiesRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getX5AlternativeMultiplicitiesParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// x6=AssignedAction
protected class Model_X6Assignment_5 extends AssignmentToken  {
	
	public Model_X6Assignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getX6Assignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignedAction_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x6",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x6");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssignedActionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getX6AssignedActionParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// x7=AssignedActionSecond
protected class Model_X7Assignment_6 extends AssignmentToken  {
	
	public Model_X7Assignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getX7Assignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignedActionSecond_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x7",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x7");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssignedActionSecondRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getX7AssignedActionSecondParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// x8=UnassignedAction1
protected class Model_X8Assignment_7 extends AssignmentToken  {
	
	public Model_X8Assignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getX8Assignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedAction1_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x8",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x8");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnassignedAction1Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getX8UnassignedAction1ParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// x9=UnassignedAction2
protected class Model_X9Assignment_8 extends AssignmentToken  {
	
	public Model_X9Assignment_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getX9Assignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedAction2_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x9",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x9");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnassignedAction2Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getX9UnassignedAction2ParserRuleCall_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// x10=UnassignedAction3
protected class Model_X10Assignment_9 extends AssignmentToken  {
	
	public Model_X10Assignment_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getX10Assignment_9();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedAction3_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x10",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x10");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnassignedAction3Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getX10UnassignedAction3ParserRuleCall_9_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// x11=UnassignedRuleCall1
protected class Model_X11Assignment_10 extends AssignmentToken  {
	
	public Model_X11Assignment_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getX11Assignment_10();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedRuleCall1_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x11",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x11");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnassignedRuleCall1Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getX11UnassignedRuleCall1ParserRuleCall_10_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// x12=UnassignedRuleCall2
protected class Model_X12Assignment_11 extends AssignmentToken  {
	
	public Model_X12Assignment_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getX12Assignment_11();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedRuleCall2_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x12",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x12");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUnassignedRuleCall2Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getX12UnassignedRuleCall2ParserRuleCall_11_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// x13=Combination1
protected class Model_X13Assignment_12 extends AssignmentToken  {
	
	public Model_X13Assignment_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getX13Assignment_12();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination1_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x13",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x13");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCombination1Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getX13Combination1ParserRuleCall_12_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// x14=Combination2
protected class Model_X14Assignment_13 extends AssignmentToken  {
	
	public Model_X14Assignment_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getX14Assignment_13();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination2_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x14",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x14");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCombination2Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getX14Combination2ParserRuleCall_13_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// x15=Combination3
protected class Model_X15Assignment_14 extends AssignmentToken  {
	
	public Model_X15Assignment_14(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getX15Assignment_14();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination3_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x15",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x15");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCombination3Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getX15Combination3ParserRuleCall_14_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// x16=Combination4
protected class Model_X16Assignment_15 extends AssignmentToken  {
	
	public Model_X16Assignment_15(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getX16Assignment_15();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination4_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x16",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x16");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCombination4Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getX16Combination4ParserRuleCall_15_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// x17=List1
protected class Model_X17Assignment_16 extends AssignmentToken  {
	
	public Model_X17Assignment_16(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getX17Assignment_16();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List1_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x17",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x17");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getList1Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getX17List1ParserRuleCall_16_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// x18=List2
protected class Model_X18Assignment_17 extends AssignmentToken  {
	
	public Model_X18Assignment_17(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getX18Assignment_17();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List2_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x18",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x18");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getList2Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getX18List2ParserRuleCall_17_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// x19=List3
protected class Model_X19Assignment_18 extends AssignmentToken  {
	
	public Model_X19Assignment_18(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getX19Assignment_18();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List3_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x19",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x19");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getList3Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getX19List3ParserRuleCall_18_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// x20=List4
protected class Model_X20Assignment_19 extends AssignmentToken  {
	
	public Model_X20Assignment_19(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getX20Assignment_19();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List4_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x20",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x20");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getList4Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getX20List4ParserRuleCall_19_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// x21=List5
protected class Model_X21Assignment_20 extends AssignmentToken  {
	
	public Model_X21Assignment_20(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getX21Assignment_20();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List5_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x21",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x21");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getList5Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getX21List5ParserRuleCall_20_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule Model ****************/


/************ begin Rule SimpleGroup ****************
 *
 * SimpleGroup:
 *   "#1" val1=ID val2=ID;
 *
 **/

// "#1" val1=ID val2=ID
protected class SimpleGroup_Group extends GroupToken {
	
	public SimpleGroup_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleGroupAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleGroup_Val2Assignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSimpleGroupRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#1"
protected class SimpleGroup_NumberSignDigitOneKeyword_0 extends KeywordToken  {
	
	public SimpleGroup_NumberSignDigitOneKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleGroupAccess().getNumberSignDigitOneKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// val1=ID
protected class SimpleGroup_Val1Assignment_1 extends AssignmentToken  {
	
	public SimpleGroup_Val1Assignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleGroupAccess().getVal1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleGroup_NumberSignDigitOneKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getSimpleGroupAccess().getVal1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// val2=ID
protected class SimpleGroup_Val2Assignment_2 extends AssignmentToken  {
	
	public SimpleGroup_Val2Assignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleGroupAccess().getVal2Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleGroup_Val1Assignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val2");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getSimpleGroupAccess().getVal2IDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule SimpleGroup ****************/


/************ begin Rule SimpleAlternative ****************
 *
 * SimpleAlternative:
 *   "#2" ("kw1" val1=ID|"kw2" val2=ID);
 *
 **/

// "#2" ("kw1" val1=ID|"kw2" val2=ID)
protected class SimpleAlternative_Group extends GroupToken {
	
	public SimpleAlternative_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleAlternativeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleAlternative_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSimpleAlternativeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#2"
protected class SimpleAlternative_NumberSignDigitTwoKeyword_0 extends KeywordToken  {
	
	public SimpleAlternative_NumberSignDigitTwoKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleAlternativeAccess().getNumberSignDigitTwoKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "kw1" val1=ID|"kw2" val2=ID
protected class SimpleAlternative_Alternatives_1 extends AlternativesToken {

	public SimpleAlternative_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSimpleAlternativeAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleAlternative_Group_1_0(parent, this, 0, inst);
			case 1: return new SimpleAlternative_Group_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "kw1" val1=ID
protected class SimpleAlternative_Group_1_0 extends GroupToken {
	
	public SimpleAlternative_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleAlternativeAccess().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleAlternative_Val1Assignment_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "kw1"
protected class SimpleAlternative_Kw1Keyword_1_0_0 extends KeywordToken  {
	
	public SimpleAlternative_Kw1Keyword_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleAlternativeAccess().getKw1Keyword_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleAlternative_NumberSignDigitTwoKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// val1=ID
protected class SimpleAlternative_Val1Assignment_1_0_1 extends AssignmentToken  {
	
	public SimpleAlternative_Val1Assignment_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleAlternativeAccess().getVal1Assignment_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleAlternative_Kw1Keyword_1_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getSimpleAlternativeAccess().getVal1IDTerminalRuleCall_1_0_1_0();
			return obj;
		}
		return null;
	}

}


// "kw2" val2=ID
protected class SimpleAlternative_Group_1_1 extends GroupToken {
	
	public SimpleAlternative_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleAlternativeAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleAlternative_Val2Assignment_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "kw2"
protected class SimpleAlternative_Kw2Keyword_1_1_0 extends KeywordToken  {
	
	public SimpleAlternative_Kw2Keyword_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleAlternativeAccess().getKw2Keyword_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleAlternative_NumberSignDigitTwoKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// val2=ID
protected class SimpleAlternative_Val2Assignment_1_1_1 extends AssignmentToken  {
	
	public SimpleAlternative_Val2Assignment_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleAlternativeAccess().getVal2Assignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleAlternative_Kw2Keyword_1_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val2");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getSimpleAlternativeAccess().getVal2IDTerminalRuleCall_1_1_1_0();
			return obj;
		}
		return null;
	}

}




/************ end Rule SimpleAlternative ****************/


/************ begin Rule SimpleMultiplicities ****************
 *
 * SimpleMultiplicities:
 *   "#3" val1=ID "kw1" val2=ID? "kw2" val3+=ID+ "kw3" val4+=ID*;
 *
 **/

// "#3" val1=ID "kw1" val2=ID? "kw2" val3+=ID+ "kw3" val4+=ID*
protected class SimpleMultiplicities_Group extends GroupToken {
	
	public SimpleMultiplicities_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleMultiplicitiesAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleMultiplicities_Val4Assignment_7(parent, this, 0, inst);
			case 1: return new SimpleMultiplicities_Kw3Keyword_6(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSimpleMultiplicitiesRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#3"
protected class SimpleMultiplicities_NumberSignDigitThreeKeyword_0 extends KeywordToken  {
	
	public SimpleMultiplicities_NumberSignDigitThreeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleMultiplicitiesAccess().getNumberSignDigitThreeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// val1=ID
protected class SimpleMultiplicities_Val1Assignment_1 extends AssignmentToken  {
	
	public SimpleMultiplicities_Val1Assignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleMultiplicitiesAccess().getVal1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleMultiplicities_NumberSignDigitThreeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getSimpleMultiplicitiesAccess().getVal1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "kw1"
protected class SimpleMultiplicities_Kw1Keyword_2 extends KeywordToken  {
	
	public SimpleMultiplicities_Kw1Keyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleMultiplicitiesAccess().getKw1Keyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleMultiplicities_Val1Assignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// val2=ID?
protected class SimpleMultiplicities_Val2Assignment_3 extends AssignmentToken  {
	
	public SimpleMultiplicities_Val2Assignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleMultiplicitiesAccess().getVal2Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleMultiplicities_Kw1Keyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val2",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val2");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getSimpleMultiplicitiesAccess().getVal2IDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "kw2"
protected class SimpleMultiplicities_Kw2Keyword_4 extends KeywordToken  {
	
	public SimpleMultiplicities_Kw2Keyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleMultiplicitiesAccess().getKw2Keyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleMultiplicities_Val2Assignment_3(parent, this, 0, inst);
			case 1: return new SimpleMultiplicities_Kw1Keyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// val3+=ID+
protected class SimpleMultiplicities_Val3Assignment_5 extends AssignmentToken  {
	
	public SimpleMultiplicities_Val3Assignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleMultiplicitiesAccess().getVal3Assignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleMultiplicities_Val3Assignment_5(parent, this, 0, inst);
			case 1: return new SimpleMultiplicities_Kw2Keyword_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val3",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val3");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getSimpleMultiplicitiesAccess().getVal3IDTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// "kw3"
protected class SimpleMultiplicities_Kw3Keyword_6 extends KeywordToken  {
	
	public SimpleMultiplicities_Kw3Keyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleMultiplicitiesAccess().getKw3Keyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleMultiplicities_Val3Assignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// val4+=ID*
protected class SimpleMultiplicities_Val4Assignment_7 extends AssignmentToken  {
	
	public SimpleMultiplicities_Val4Assignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleMultiplicitiesAccess().getVal4Assignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleMultiplicities_Val4Assignment_7(parent, this, 0, inst);
			case 1: return new SimpleMultiplicities_Kw3Keyword_6(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val4",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val4");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getSimpleMultiplicitiesAccess().getVal4IDTerminalRuleCall_7_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule SimpleMultiplicities ****************/


/************ begin Rule GroupMultiplicities ****************
 *
 * GroupMultiplicities:
 *   "#4" val1=ID "kw1" (val2=ID val3=ID)? "kw2" (val4+=ID val5+=ID)+ "kw3" (val6+=ID val7+=ID)
 *   *;
 *
 **/

// "#4" val1=ID "kw1" (val2=ID val3=ID)? "kw2" (val4+=ID val5+=ID)+ "kw3" (val6+=ID val7+=ID)
// *
protected class GroupMultiplicities_Group extends GroupToken {
	
	public GroupMultiplicities_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGroupMultiplicitiesAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GroupMultiplicities_Group_7(parent, this, 0, inst);
			case 1: return new GroupMultiplicities_Kw3Keyword_6(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getGroupMultiplicitiesRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#4"
protected class GroupMultiplicities_NumberSignDigitFourKeyword_0 extends KeywordToken  {
	
	public GroupMultiplicities_NumberSignDigitFourKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupMultiplicitiesAccess().getNumberSignDigitFourKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// val1=ID
protected class GroupMultiplicities_Val1Assignment_1 extends AssignmentToken  {
	
	public GroupMultiplicities_Val1Assignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupMultiplicitiesAccess().getVal1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GroupMultiplicities_NumberSignDigitFourKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getGroupMultiplicitiesAccess().getVal1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "kw1"
protected class GroupMultiplicities_Kw1Keyword_2 extends KeywordToken  {
	
	public GroupMultiplicities_Kw1Keyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupMultiplicitiesAccess().getKw1Keyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GroupMultiplicities_Val1Assignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (val2=ID val3=ID)?
protected class GroupMultiplicities_Group_3 extends GroupToken {
	
	public GroupMultiplicities_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGroupMultiplicitiesAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GroupMultiplicities_Val3Assignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// val2=ID
protected class GroupMultiplicities_Val2Assignment_3_0 extends AssignmentToken  {
	
	public GroupMultiplicities_Val2Assignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupMultiplicitiesAccess().getVal2Assignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GroupMultiplicities_Kw1Keyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val2");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getGroupMultiplicitiesAccess().getVal2IDTerminalRuleCall_3_0_0();
			return obj;
		}
		return null;
	}

}

// val3=ID
protected class GroupMultiplicities_Val3Assignment_3_1 extends AssignmentToken  {
	
	public GroupMultiplicities_Val3Assignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupMultiplicitiesAccess().getVal3Assignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GroupMultiplicities_Val2Assignment_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val3",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val3");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getGroupMultiplicitiesAccess().getVal3IDTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}


// "kw2"
protected class GroupMultiplicities_Kw2Keyword_4 extends KeywordToken  {
	
	public GroupMultiplicities_Kw2Keyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupMultiplicitiesAccess().getKw2Keyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GroupMultiplicities_Group_3(parent, this, 0, inst);
			case 1: return new GroupMultiplicities_Kw1Keyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// (val4+=ID val5+=ID)+
protected class GroupMultiplicities_Group_5 extends GroupToken {
	
	public GroupMultiplicities_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGroupMultiplicitiesAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GroupMultiplicities_Val5Assignment_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// val4+=ID
protected class GroupMultiplicities_Val4Assignment_5_0 extends AssignmentToken  {
	
	public GroupMultiplicities_Val4Assignment_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupMultiplicitiesAccess().getVal4Assignment_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GroupMultiplicities_Group_5(parent, this, 0, inst);
			case 1: return new GroupMultiplicities_Kw2Keyword_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val4",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val4");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getGroupMultiplicitiesAccess().getVal4IDTerminalRuleCall_5_0_0();
			return obj;
		}
		return null;
	}

}

// val5+=ID
protected class GroupMultiplicities_Val5Assignment_5_1 extends AssignmentToken  {
	
	public GroupMultiplicities_Val5Assignment_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupMultiplicitiesAccess().getVal5Assignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GroupMultiplicities_Val4Assignment_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val5",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val5");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getGroupMultiplicitiesAccess().getVal5IDTerminalRuleCall_5_1_0();
			return obj;
		}
		return null;
	}

}


// "kw3"
protected class GroupMultiplicities_Kw3Keyword_6 extends KeywordToken  {
	
	public GroupMultiplicities_Kw3Keyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupMultiplicitiesAccess().getKw3Keyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GroupMultiplicities_Group_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (val6+=ID val7+=ID)*
protected class GroupMultiplicities_Group_7 extends GroupToken {
	
	public GroupMultiplicities_Group_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGroupMultiplicitiesAccess().getGroup_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GroupMultiplicities_Val7Assignment_7_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// val6+=ID
protected class GroupMultiplicities_Val6Assignment_7_0 extends AssignmentToken  {
	
	public GroupMultiplicities_Val6Assignment_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupMultiplicitiesAccess().getVal6Assignment_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GroupMultiplicities_Group_7(parent, this, 0, inst);
			case 1: return new GroupMultiplicities_Kw3Keyword_6(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val6",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val6");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getGroupMultiplicitiesAccess().getVal6IDTerminalRuleCall_7_0_0();
			return obj;
		}
		return null;
	}

}

// val7+=ID
protected class GroupMultiplicities_Val7Assignment_7_1 extends AssignmentToken  {
	
	public GroupMultiplicities_Val7Assignment_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupMultiplicitiesAccess().getVal7Assignment_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GroupMultiplicities_Val6Assignment_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val7",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val7");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getGroupMultiplicitiesAccess().getVal7IDTerminalRuleCall_7_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule GroupMultiplicities ****************/


/************ begin Rule AlternativeMultiplicities ****************
 *
 * AlternativeMultiplicities:
 *   "#5" (val2=ID|"kw1" val3=ID)? "kw2" (val4+=ID|"kw3" val5+=ID)+ "kw4" (val6+=ID|"kw5"
 *   val7+=ID)*;
 *
 **/

// "#5" (val2=ID|"kw1" val3=ID)? "kw2" (val4+=ID|"kw3" val5+=ID)+ "kw4" (val6+=ID|"kw5"
// val7+=ID)*
protected class AlternativeMultiplicities_Group extends GroupToken {
	
	public AlternativeMultiplicities_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAlternativeMultiplicitiesAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AlternativeMultiplicities_Alternatives_5(parent, this, 0, inst);
			case 1: return new AlternativeMultiplicities_Kw4Keyword_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAlternativeMultiplicitiesRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#5"
protected class AlternativeMultiplicities_NumberSignDigitFiveKeyword_0 extends KeywordToken  {
	
	public AlternativeMultiplicities_NumberSignDigitFiveKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAlternativeMultiplicitiesAccess().getNumberSignDigitFiveKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// (val2=ID|"kw1" val3=ID)?
protected class AlternativeMultiplicities_Alternatives_1 extends AlternativesToken {

	public AlternativeMultiplicities_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAlternativeMultiplicitiesAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AlternativeMultiplicities_Val2Assignment_1_0(parent, this, 0, inst);
			case 1: return new AlternativeMultiplicities_Group_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// val2=ID
protected class AlternativeMultiplicities_Val2Assignment_1_0 extends AssignmentToken  {
	
	public AlternativeMultiplicities_Val2Assignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAlternativeMultiplicitiesAccess().getVal2Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AlternativeMultiplicities_NumberSignDigitFiveKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val2");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getAlternativeMultiplicitiesAccess().getVal2IDTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// "kw1" val3=ID
protected class AlternativeMultiplicities_Group_1_1 extends GroupToken {
	
	public AlternativeMultiplicities_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAlternativeMultiplicitiesAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AlternativeMultiplicities_Val3Assignment_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "kw1"
protected class AlternativeMultiplicities_Kw1Keyword_1_1_0 extends KeywordToken  {
	
	public AlternativeMultiplicities_Kw1Keyword_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAlternativeMultiplicitiesAccess().getKw1Keyword_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AlternativeMultiplicities_NumberSignDigitFiveKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// val3=ID
protected class AlternativeMultiplicities_Val3Assignment_1_1_1 extends AssignmentToken  {
	
	public AlternativeMultiplicities_Val3Assignment_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAlternativeMultiplicitiesAccess().getVal3Assignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AlternativeMultiplicities_Kw1Keyword_1_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val3",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val3");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getAlternativeMultiplicitiesAccess().getVal3IDTerminalRuleCall_1_1_1_0();
			return obj;
		}
		return null;
	}

}



// "kw2"
protected class AlternativeMultiplicities_Kw2Keyword_2 extends KeywordToken  {
	
	public AlternativeMultiplicities_Kw2Keyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAlternativeMultiplicitiesAccess().getKw2Keyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AlternativeMultiplicities_Alternatives_1(parent, this, 0, inst);
			case 1: return new AlternativeMultiplicities_NumberSignDigitFiveKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// (val4+=ID|"kw3" val5+=ID)+
protected class AlternativeMultiplicities_Alternatives_3 extends AlternativesToken {

	public AlternativeMultiplicities_Alternatives_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAlternativeMultiplicitiesAccess().getAlternatives_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AlternativeMultiplicities_Val4Assignment_3_0(parent, this, 0, inst);
			case 1: return new AlternativeMultiplicities_Group_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// val4+=ID
protected class AlternativeMultiplicities_Val4Assignment_3_0 extends AssignmentToken  {
	
	public AlternativeMultiplicities_Val4Assignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAlternativeMultiplicitiesAccess().getVal4Assignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AlternativeMultiplicities_Alternatives_3(parent, this, 0, inst);
			case 1: return new AlternativeMultiplicities_Kw2Keyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val4",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val4");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getAlternativeMultiplicitiesAccess().getVal4IDTerminalRuleCall_3_0_0();
			return obj;
		}
		return null;
	}

}

// "kw3" val5+=ID
protected class AlternativeMultiplicities_Group_3_1 extends GroupToken {
	
	public AlternativeMultiplicities_Group_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAlternativeMultiplicitiesAccess().getGroup_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AlternativeMultiplicities_Val5Assignment_3_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "kw3"
protected class AlternativeMultiplicities_Kw3Keyword_3_1_0 extends KeywordToken  {
	
	public AlternativeMultiplicities_Kw3Keyword_3_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAlternativeMultiplicitiesAccess().getKw3Keyword_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AlternativeMultiplicities_Alternatives_3(parent, this, 0, inst);
			case 1: return new AlternativeMultiplicities_Kw2Keyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// val5+=ID
protected class AlternativeMultiplicities_Val5Assignment_3_1_1 extends AssignmentToken  {
	
	public AlternativeMultiplicities_Val5Assignment_3_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAlternativeMultiplicitiesAccess().getVal5Assignment_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AlternativeMultiplicities_Kw3Keyword_3_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val5",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val5");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getAlternativeMultiplicitiesAccess().getVal5IDTerminalRuleCall_3_1_1_0();
			return obj;
		}
		return null;
	}

}



// "kw4"
protected class AlternativeMultiplicities_Kw4Keyword_4 extends KeywordToken  {
	
	public AlternativeMultiplicities_Kw4Keyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAlternativeMultiplicitiesAccess().getKw4Keyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AlternativeMultiplicities_Alternatives_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (val6+=ID|"kw5" val7+=ID)*
protected class AlternativeMultiplicities_Alternatives_5 extends AlternativesToken {

	public AlternativeMultiplicities_Alternatives_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAlternativeMultiplicitiesAccess().getAlternatives_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AlternativeMultiplicities_Val6Assignment_5_0(parent, this, 0, inst);
			case 1: return new AlternativeMultiplicities_Group_5_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// val6+=ID
protected class AlternativeMultiplicities_Val6Assignment_5_0 extends AssignmentToken  {
	
	public AlternativeMultiplicities_Val6Assignment_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAlternativeMultiplicitiesAccess().getVal6Assignment_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AlternativeMultiplicities_Alternatives_5(parent, this, 0, inst);
			case 1: return new AlternativeMultiplicities_Kw4Keyword_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val6",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val6");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getAlternativeMultiplicitiesAccess().getVal6IDTerminalRuleCall_5_0_0();
			return obj;
		}
		return null;
	}

}

// "kw5" val7+=ID
protected class AlternativeMultiplicities_Group_5_1 extends GroupToken {
	
	public AlternativeMultiplicities_Group_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAlternativeMultiplicitiesAccess().getGroup_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AlternativeMultiplicities_Val7Assignment_5_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "kw5"
protected class AlternativeMultiplicities_Kw5Keyword_5_1_0 extends KeywordToken  {
	
	public AlternativeMultiplicities_Kw5Keyword_5_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAlternativeMultiplicitiesAccess().getKw5Keyword_5_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AlternativeMultiplicities_Alternatives_5(parent, this, 0, inst);
			case 1: return new AlternativeMultiplicities_Kw4Keyword_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// val7+=ID
protected class AlternativeMultiplicities_Val7Assignment_5_1_1 extends AssignmentToken  {
	
	public AlternativeMultiplicities_Val7Assignment_5_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAlternativeMultiplicitiesAccess().getVal7Assignment_5_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AlternativeMultiplicities_Kw5Keyword_5_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val7",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val7");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getAlternativeMultiplicitiesAccess().getVal7IDTerminalRuleCall_5_1_1_0();
			return obj;
		}
		return null;
	}

}




/************ end Rule AlternativeMultiplicities ****************/


/************ begin Rule AssignedAction ****************
 *
 * AssignedAction:
 *   "#6" val1=ID ({AssignedAction.child=current} val1=ID)+;
 *
 **/

// "#6" val1=ID ({AssignedAction.child=current} val1=ID)+
protected class AssignedAction_Group extends GroupToken {
	
	public AssignedAction_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssignedActionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignedAction_Group_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAssignedActionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#6"
protected class AssignedAction_NumberSignDigitSixKeyword_0 extends KeywordToken  {
	
	public AssignedAction_NumberSignDigitSixKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAssignedActionAccess().getNumberSignDigitSixKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// val1=ID
protected class AssignedAction_Val1Assignment_1 extends AssignmentToken  {
	
	public AssignedAction_Val1Assignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignedActionAccess().getVal1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignedAction_NumberSignDigitSixKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getAssignedActionAccess().getVal1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ({AssignedAction.child=current} val1=ID)+
protected class AssignedAction_Group_2 extends GroupToken {
	
	public AssignedAction_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssignedActionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignedAction_Val1Assignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {AssignedAction.child=current}
protected class AssignedAction_AssignedActionChildAction_2_0 extends ActionToken  {

	public AssignedAction_AssignedActionChildAction_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAssignedActionAccess().getAssignedActionChildAction_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignedAction_Group_2(parent, this, 0, inst);
			case 1: return new AssignedAction_Val1Assignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getAssignedActionAccess().getAssignedActionChildAction_2_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("child", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("child")) return null;
		return getDescr((EObject) val);
	}
}

// val1=ID
protected class AssignedAction_Val1Assignment_2_1 extends AssignmentToken  {
	
	public AssignedAction_Val1Assignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignedActionAccess().getVal1Assignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignedAction_AssignedActionChildAction_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getAssignedActionAccess().getVal1IDTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule AssignedAction ****************/


/************ begin Rule AssignedActionSecond ****************
 *
 * AssignedActionSecond returns AssignedAction:
 *   "#7" val1=ID "kw1" val2=ID;
 *
 **/

// "#7" val1=ID "kw1" val2=ID
protected class AssignedActionSecond_Group extends GroupToken {
	
	public AssignedActionSecond_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssignedActionSecondAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignedActionSecond_Val2Assignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAssignedActionSecondRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#7"
protected class AssignedActionSecond_NumberSignDigitSevenKeyword_0 extends KeywordToken  {
	
	public AssignedActionSecond_NumberSignDigitSevenKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAssignedActionSecondAccess().getNumberSignDigitSevenKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// val1=ID
protected class AssignedActionSecond_Val1Assignment_1 extends AssignmentToken  {
	
	public AssignedActionSecond_Val1Assignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignedActionSecondAccess().getVal1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignedActionSecond_NumberSignDigitSevenKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getAssignedActionSecondAccess().getVal1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "kw1"
protected class AssignedActionSecond_Kw1Keyword_2 extends KeywordToken  {
	
	public AssignedActionSecond_Kw1Keyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAssignedActionSecondAccess().getKw1Keyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignedActionSecond_Val1Assignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// val2=ID
protected class AssignedActionSecond_Val2Assignment_3 extends AssignmentToken  {
	
	public AssignedActionSecond_Val2Assignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignedActionSecondAccess().getVal2Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssignedActionSecond_Kw1Keyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val2");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getAssignedActionSecondAccess().getVal2IDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AssignedActionSecond ****************/


/************ begin Rule UnassignedAction1 ****************
 *
 * UnassignedAction1:
 *   {UnassignedAction1} "#8" val1=ID val2=ID?;
 *
 **/

// {UnassignedAction1} "#8" val1=ID val2=ID?
protected class UnassignedAction1_Group extends GroupToken {
	
	public UnassignedAction1_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnassignedAction1Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedAction1_Val2Assignment_3(parent, this, 0, inst);
			case 1: return new UnassignedAction1_Val1Assignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnassignedAction1Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {UnassignedAction1}
protected class UnassignedAction1_UnassignedAction1Action_0 extends ActionToken  {

	public UnassignedAction1_UnassignedAction1Action_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getUnassignedAction1Access().getUnassignedAction1Action_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getUnassignedAction1Access().getUnassignedAction1Action_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "#8"
protected class UnassignedAction1_NumberSignDigitEightKeyword_1 extends KeywordToken  {
	
	public UnassignedAction1_NumberSignDigitEightKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnassignedAction1Access().getNumberSignDigitEightKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedAction1_UnassignedAction1Action_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// val1=ID
protected class UnassignedAction1_Val1Assignment_2 extends AssignmentToken  {
	
	public UnassignedAction1_Val1Assignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnassignedAction1Access().getVal1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedAction1_NumberSignDigitEightKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getUnassignedAction1Access().getVal1IDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// val2=ID?
protected class UnassignedAction1_Val2Assignment_3 extends AssignmentToken  {
	
	public UnassignedAction1_Val2Assignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnassignedAction1Access().getVal2Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedAction1_Val1Assignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val2",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val2");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getUnassignedAction1Access().getVal2IDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule UnassignedAction1 ****************/


/************ begin Rule UnassignedAction2 ****************
 *
 * UnassignedAction2:
 *   {UnassignedAction2Sub} "#9" val1=ID val2=ID?;
 *
 **/

// {UnassignedAction2Sub} "#9" val1=ID val2=ID?
protected class UnassignedAction2_Group extends GroupToken {
	
	public UnassignedAction2_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnassignedAction2Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedAction2_Val2Assignment_3(parent, this, 0, inst);
			case 1: return new UnassignedAction2_Val1Assignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnassignedAction2Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {UnassignedAction2Sub}
protected class UnassignedAction2_UnassignedAction2SubAction_0 extends ActionToken  {

	public UnassignedAction2_UnassignedAction2SubAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getUnassignedAction2Access().getUnassignedAction2SubAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getUnassignedAction2Access().getUnassignedAction2SubAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "#9"
protected class UnassignedAction2_NumberSignDigitNineKeyword_1 extends KeywordToken  {
	
	public UnassignedAction2_NumberSignDigitNineKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnassignedAction2Access().getNumberSignDigitNineKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedAction2_UnassignedAction2SubAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// val1=ID
protected class UnassignedAction2_Val1Assignment_2 extends AssignmentToken  {
	
	public UnassignedAction2_Val1Assignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnassignedAction2Access().getVal1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedAction2_NumberSignDigitNineKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getUnassignedAction2Access().getVal1IDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// val2=ID?
protected class UnassignedAction2_Val2Assignment_3 extends AssignmentToken  {
	
	public UnassignedAction2_Val2Assignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnassignedAction2Access().getVal2Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedAction2_Val1Assignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val2",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val2");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getUnassignedAction2Access().getVal2IDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule UnassignedAction2 ****************/


/************ begin Rule UnassignedAction3 ****************
 *
 * UnassignedAction3:
 *   "#10" ("kw1" {UnassignedAction2Sub1}|"kw2" {UnassignedAction2Sub2}) val1=ID val2=ID?;
 *
 **/

// "#10" ("kw1" {UnassignedAction2Sub1}|"kw2" {UnassignedAction2Sub2}) val1=ID val2=ID?
protected class UnassignedAction3_Group extends GroupToken {
	
	public UnassignedAction3_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnassignedAction3Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedAction3_Val2Assignment_3(parent, this, 0, inst);
			case 1: return new UnassignedAction3_Val1Assignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnassignedAction3Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#10"
protected class UnassignedAction3_NumberSignDigitOneDigitZeroKeyword_0 extends KeywordToken  {
	
	public UnassignedAction3_NumberSignDigitOneDigitZeroKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnassignedAction3Access().getNumberSignDigitOneDigitZeroKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "kw1" {UnassignedAction2Sub1}|"kw2" {UnassignedAction2Sub2}
protected class UnassignedAction3_Alternatives_1 extends AlternativesToken {

	public UnassignedAction3_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getUnassignedAction3Access().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedAction3_Group_1_0(parent, this, 0, inst);
			case 1: return new UnassignedAction3_Group_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "kw1" {UnassignedAction2Sub1}
protected class UnassignedAction3_Group_1_0 extends GroupToken {
	
	public UnassignedAction3_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnassignedAction3Access().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedAction3_UnassignedAction2Sub1Action_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "kw1"
protected class UnassignedAction3_Kw1Keyword_1_0_0 extends KeywordToken  {
	
	public UnassignedAction3_Kw1Keyword_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnassignedAction3Access().getKw1Keyword_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedAction3_NumberSignDigitOneDigitZeroKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {UnassignedAction2Sub1}
protected class UnassignedAction3_UnassignedAction2Sub1Action_1_0_1 extends ActionToken  {

	public UnassignedAction3_UnassignedAction2Sub1Action_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getUnassignedAction3Access().getUnassignedAction2Sub1Action_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedAction3_Kw1Keyword_1_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getUnassignedAction3Access().getUnassignedAction2Sub1Action_1_0_1().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}


// "kw2" {UnassignedAction2Sub2}
protected class UnassignedAction3_Group_1_1 extends GroupToken {
	
	public UnassignedAction3_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnassignedAction3Access().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedAction3_UnassignedAction2Sub2Action_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "kw2"
protected class UnassignedAction3_Kw2Keyword_1_1_0 extends KeywordToken  {
	
	public UnassignedAction3_Kw2Keyword_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnassignedAction3Access().getKw2Keyword_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedAction3_NumberSignDigitOneDigitZeroKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {UnassignedAction2Sub2}
protected class UnassignedAction3_UnassignedAction2Sub2Action_1_1_1 extends ActionToken  {

	public UnassignedAction3_UnassignedAction2Sub2Action_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getUnassignedAction3Access().getUnassignedAction2Sub2Action_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedAction3_Kw2Keyword_1_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getUnassignedAction3Access().getUnassignedAction2Sub2Action_1_1_1().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}



// val1=ID
protected class UnassignedAction3_Val1Assignment_2 extends AssignmentToken  {
	
	public UnassignedAction3_Val1Assignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnassignedAction3Access().getVal1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedAction3_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getUnassignedAction3Access().getVal1IDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// val2=ID?
protected class UnassignedAction3_Val2Assignment_3 extends AssignmentToken  {
	
	public UnassignedAction3_Val2Assignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnassignedAction3Access().getVal2Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedAction3_Val1Assignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val2",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val2");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getUnassignedAction3Access().getVal2IDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule UnassignedAction3 ****************/


/************ begin Rule UnassignedRuleCall1 ****************
 *
 * UnassignedRuleCall1:
 *   "#11" UnassignedRuleCall1Sub val2=ID;
 *
 **/

// "#11" UnassignedRuleCall1Sub val2=ID
protected class UnassignedRuleCall1_Group extends GroupToken {
	
	public UnassignedRuleCall1_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnassignedRuleCall1Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedRuleCall1_Val2Assignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnassignedRuleCall1Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#11"
protected class UnassignedRuleCall1_NumberSignDigitOneDigitOneKeyword_0 extends KeywordToken  {
	
	public UnassignedRuleCall1_NumberSignDigitOneDigitOneKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnassignedRuleCall1Access().getNumberSignDigitOneDigitOneKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// UnassignedRuleCall1Sub
protected class UnassignedRuleCall1_UnassignedRuleCall1SubParserRuleCall_1 extends RuleCallToken {
	
	public UnassignedRuleCall1_UnassignedRuleCall1SubParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnassignedRuleCall1Access().getUnassignedRuleCall1SubParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedRuleCall1Sub_Val1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UnassignedRuleCall1Sub_Val1Assignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUnassignedRuleCall1SubRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedRuleCall1_NumberSignDigitOneDigitOneKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// val2=ID
protected class UnassignedRuleCall1_Val2Assignment_2 extends AssignmentToken  {
	
	public UnassignedRuleCall1_Val2Assignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnassignedRuleCall1Access().getVal2Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedRuleCall1_UnassignedRuleCall1SubParserRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val2");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getUnassignedRuleCall1Access().getVal2IDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule UnassignedRuleCall1 ****************/


/************ begin Rule UnassignedRuleCall1Sub ****************
 *
 * UnassignedRuleCall1Sub:
 *   val1=ID;
 *
 **/

// val1=ID
protected class UnassignedRuleCall1Sub_Val1Assignment extends AssignmentToken  {
	
	public UnassignedRuleCall1Sub_Val1Assignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnassignedRuleCall1SubAccess().getVal1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnassignedRuleCall1SubRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getUnassignedRuleCall1SubAccess().getVal1IDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule UnassignedRuleCall1Sub ****************/


/************ begin Rule UnassignedRuleCall2 ****************
 *
 * UnassignedRuleCall2:
 *   "#12" UnassignedRuleCall2Sub val2=ID;
 *
 **/

// "#12" UnassignedRuleCall2Sub val2=ID
protected class UnassignedRuleCall2_Group extends GroupToken {
	
	public UnassignedRuleCall2_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnassignedRuleCall2Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedRuleCall2_Val2Assignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnassignedRuleCall2Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#12"
protected class UnassignedRuleCall2_NumberSignDigitOneDigitTwoKeyword_0 extends KeywordToken  {
	
	public UnassignedRuleCall2_NumberSignDigitOneDigitTwoKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnassignedRuleCall2Access().getNumberSignDigitOneDigitTwoKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// UnassignedRuleCall2Sub
protected class UnassignedRuleCall2_UnassignedRuleCall2SubParserRuleCall_1 extends RuleCallToken {
	
	public UnassignedRuleCall2_UnassignedRuleCall2SubParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnassignedRuleCall2Access().getUnassignedRuleCall2SubParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedRuleCall2Sub_UnassignedRuleCall2SubActionAction(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UnassignedRuleCall2Sub_UnassignedRuleCall2SubActionAction.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUnassignedRuleCall2SubRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedRuleCall2_NumberSignDigitOneDigitTwoKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// val2=ID
protected class UnassignedRuleCall2_Val2Assignment_2 extends AssignmentToken  {
	
	public UnassignedRuleCall2_Val2Assignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnassignedRuleCall2Access().getVal2Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnassignedRuleCall2_UnassignedRuleCall2SubParserRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val2");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getUnassignedRuleCall2Access().getVal2IDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule UnassignedRuleCall2 ****************/


/************ begin Rule UnassignedRuleCall2Sub ****************
 *
 * UnassignedRuleCall2Sub:
 *   {UnassignedRuleCall2SubAction};
 *
 **/

// {UnassignedRuleCall2SubAction}
protected class UnassignedRuleCall2Sub_UnassignedRuleCall2SubActionAction extends ActionToken  {

	public UnassignedRuleCall2Sub_UnassignedRuleCall2SubActionAction(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getUnassignedRuleCall2SubAccess().getUnassignedRuleCall2SubActionAction();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnassignedRuleCall2SubRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getUnassignedRuleCall2SubAccess().getUnassignedRuleCall2SubActionAction().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

/************ end Rule UnassignedRuleCall2Sub ****************/


/************ begin Rule Combination1 ****************
 *
 * Combination1:
 *   "#13" val1=ID ("kw1" val2=ID ("kw2" val3=ID|val4=ID))?;
 *
 **/

// "#13" val1=ID ("kw1" val2=ID ("kw2" val3=ID|val4=ID))?
protected class Combination1_Group extends GroupToken {
	
	public Combination1_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCombination1Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination1_Group_2(parent, this, 0, inst);
			case 1: return new Combination1_Val1Assignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCombination1Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#13"
protected class Combination1_NumberSignDigitOneDigitThreeKeyword_0 extends KeywordToken  {
	
	public Combination1_NumberSignDigitOneDigitThreeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCombination1Access().getNumberSignDigitOneDigitThreeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// val1=ID
protected class Combination1_Val1Assignment_1 extends AssignmentToken  {
	
	public Combination1_Val1Assignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCombination1Access().getVal1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination1_NumberSignDigitOneDigitThreeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getCombination1Access().getVal1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("kw1" val2=ID ("kw2" val3=ID|val4=ID))?
protected class Combination1_Group_2 extends GroupToken {
	
	public Combination1_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCombination1Access().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination1_Alternatives_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "kw1"
protected class Combination1_Kw1Keyword_2_0 extends KeywordToken  {
	
	public Combination1_Kw1Keyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCombination1Access().getKw1Keyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination1_Val1Assignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// val2=ID
protected class Combination1_Val2Assignment_2_1 extends AssignmentToken  {
	
	public Combination1_Val2Assignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCombination1Access().getVal2Assignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination1_Kw1Keyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val2");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getCombination1Access().getVal2IDTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}

// "kw2" val3=ID|val4=ID
protected class Combination1_Alternatives_2_2 extends AlternativesToken {

	public Combination1_Alternatives_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getCombination1Access().getAlternatives_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination1_Group_2_2_0(parent, this, 0, inst);
			case 1: return new Combination1_Val4Assignment_2_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "kw2" val3=ID
protected class Combination1_Group_2_2_0 extends GroupToken {
	
	public Combination1_Group_2_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCombination1Access().getGroup_2_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination1_Val3Assignment_2_2_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "kw2"
protected class Combination1_Kw2Keyword_2_2_0_0 extends KeywordToken  {
	
	public Combination1_Kw2Keyword_2_2_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCombination1Access().getKw2Keyword_2_2_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination1_Val2Assignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// val3=ID
protected class Combination1_Val3Assignment_2_2_0_1 extends AssignmentToken  {
	
	public Combination1_Val3Assignment_2_2_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCombination1Access().getVal3Assignment_2_2_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination1_Kw2Keyword_2_2_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val3",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val3");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getCombination1Access().getVal3IDTerminalRuleCall_2_2_0_1_0();
			return obj;
		}
		return null;
	}

}


// val4=ID
protected class Combination1_Val4Assignment_2_2_1 extends AssignmentToken  {
	
	public Combination1_Val4Assignment_2_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCombination1Access().getVal4Assignment_2_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination1_Val2Assignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val4",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val4");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getCombination1Access().getVal4IDTerminalRuleCall_2_2_1_0();
			return obj;
		}
		return null;
	}

}




/************ end Rule Combination1 ****************/


/************ begin Rule Combination2 ****************
 *
 * Combination2:
 *   "#14" val1=ID ("kw1" val2=ID|(val3+=ID val4+=ID)*);
 *
 **/

// "#14" val1=ID ("kw1" val2=ID|(val3+=ID val4+=ID)*)
protected class Combination2_Group extends GroupToken {
	
	public Combination2_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCombination2Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination2_Alternatives_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCombination2Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#14"
protected class Combination2_NumberSignDigitOneDigitFourKeyword_0 extends KeywordToken  {
	
	public Combination2_NumberSignDigitOneDigitFourKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCombination2Access().getNumberSignDigitOneDigitFourKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// val1=ID
protected class Combination2_Val1Assignment_1 extends AssignmentToken  {
	
	public Combination2_Val1Assignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCombination2Access().getVal1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination2_NumberSignDigitOneDigitFourKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getCombination2Access().getVal1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "kw1" val2=ID|(val3+=ID val4+=ID)*
protected class Combination2_Alternatives_2 extends AlternativesToken {

	public Combination2_Alternatives_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getCombination2Access().getAlternatives_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination2_Group_2_0(parent, this, 0, inst);
			case 1: return new Combination2_Group_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "kw1" val2=ID
protected class Combination2_Group_2_0 extends GroupToken {
	
	public Combination2_Group_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCombination2Access().getGroup_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination2_Val2Assignment_2_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "kw1"
protected class Combination2_Kw1Keyword_2_0_0 extends KeywordToken  {
	
	public Combination2_Kw1Keyword_2_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCombination2Access().getKw1Keyword_2_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination2_Val1Assignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// val2=ID
protected class Combination2_Val2Assignment_2_0_1 extends AssignmentToken  {
	
	public Combination2_Val2Assignment_2_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCombination2Access().getVal2Assignment_2_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination2_Kw1Keyword_2_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val2");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getCombination2Access().getVal2IDTerminalRuleCall_2_0_1_0();
			return obj;
		}
		return null;
	}

}


// (val3+=ID val4+=ID)*
protected class Combination2_Group_2_1 extends GroupToken {
	
	public Combination2_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCombination2Access().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination2_Val4Assignment_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// val3+=ID
protected class Combination2_Val3Assignment_2_1_0 extends AssignmentToken  {
	
	public Combination2_Val3Assignment_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCombination2Access().getVal3Assignment_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination2_Group_2_1(parent, this, 0, inst);
			case 1: return new Combination2_Val1Assignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val3",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val3");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getCombination2Access().getVal3IDTerminalRuleCall_2_1_0_0();
			return obj;
		}
		return null;
	}

}

// val4+=ID
protected class Combination2_Val4Assignment_2_1_1 extends AssignmentToken  {
	
	public Combination2_Val4Assignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCombination2Access().getVal4Assignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination2_Val3Assignment_2_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val4",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val4");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getCombination2Access().getVal4IDTerminalRuleCall_2_1_1_0();
			return obj;
		}
		return null;
	}

}




/************ end Rule Combination2 ****************/


/************ begin Rule Combination3 ****************
 *
 * Combination3:
 *   "#15" (val1=ID|val2=INT|val3=STRING)*;
 *
 **/

// "#15" (val1=ID|val2=INT|val3=STRING)*
protected class Combination3_Group extends GroupToken {
	
	public Combination3_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCombination3Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination3_Alternatives_1(parent, this, 0, inst);
			case 1: return new Combination3_NumberSignDigitOneDigitFiveKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCombination3Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#15"
protected class Combination3_NumberSignDigitOneDigitFiveKeyword_0 extends KeywordToken  {
	
	public Combination3_NumberSignDigitOneDigitFiveKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCombination3Access().getNumberSignDigitOneDigitFiveKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// (val1=ID|val2=INT|val3=STRING)*
protected class Combination3_Alternatives_1 extends AlternativesToken {

	public Combination3_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getCombination3Access().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination3_Val1Assignment_1_0(parent, this, 0, inst);
			case 1: return new Combination3_Val2Assignment_1_1(parent, this, 1, inst);
			case 2: return new Combination3_Val3Assignment_1_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// val1=ID
protected class Combination3_Val1Assignment_1_0 extends AssignmentToken  {
	
	public Combination3_Val1Assignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCombination3Access().getVal1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination3_Alternatives_1(parent, this, 0, inst);
			case 1: return new Combination3_NumberSignDigitOneDigitFiveKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getCombination3Access().getVal1IDTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// val2=INT
protected class Combination3_Val2Assignment_1_1 extends AssignmentToken  {
	
	public Combination3_Val2Assignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCombination3Access().getVal2Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination3_Alternatives_1(parent, this, 0, inst);
			case 1: return new Combination3_NumberSignDigitOneDigitFiveKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val2");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getCombination3Access().getVal2INTTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// val3=STRING
protected class Combination3_Val3Assignment_1_2 extends AssignmentToken  {
	
	public Combination3_Val3Assignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCombination3Access().getVal3Assignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination3_Alternatives_1(parent, this, 0, inst);
			case 1: return new Combination3_NumberSignDigitOneDigitFiveKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val3",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val3");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getCombination3Access().getVal3STRINGTerminalRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule Combination3 ****************/


/************ begin Rule Combination4 ****************
 *
 * Combination4:
 *   "#16" ("group" val1+=ID val2+=ID val3+=ID)+;
 *
 **/

// "#16" ("group" val1+=ID val2+=ID val3+=ID)+
protected class Combination4_Group extends GroupToken {
	
	public Combination4_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCombination4Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination4_Group_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCombination4Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#16"
protected class Combination4_NumberSignDigitOneDigitSixKeyword_0 extends KeywordToken  {
	
	public Combination4_NumberSignDigitOneDigitSixKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCombination4Access().getNumberSignDigitOneDigitSixKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// ("group" val1+=ID val2+=ID val3+=ID)+
protected class Combination4_Group_1 extends GroupToken {
	
	public Combination4_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCombination4Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination4_Val3Assignment_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "group"
protected class Combination4_GroupKeyword_1_0 extends KeywordToken  {
	
	public Combination4_GroupKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCombination4Access().getGroupKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination4_Group_1(parent, this, 0, inst);
			case 1: return new Combination4_NumberSignDigitOneDigitSixKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// val1+=ID
protected class Combination4_Val1Assignment_1_1 extends AssignmentToken  {
	
	public Combination4_Val1Assignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCombination4Access().getVal1Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination4_GroupKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getCombination4Access().getVal1IDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// val2+=ID
protected class Combination4_Val2Assignment_1_2 extends AssignmentToken  {
	
	public Combination4_Val2Assignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCombination4Access().getVal2Assignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination4_Val1Assignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val2");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getCombination4Access().getVal2IDTerminalRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}

// val3+=ID
protected class Combination4_Val3Assignment_1_3 extends AssignmentToken  {
	
	public Combination4_Val3Assignment_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCombination4Access().getVal3Assignment_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Combination4_Val2Assignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val3",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val3");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getCombination4Access().getVal3IDTerminalRuleCall_1_3_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule Combination4 ****************/


/************ begin Rule List1 ****************
 *
 * List1:
 *   "#17" val1+=ID ("," val1+=ID)*;
 *
 **/

// "#17" val1+=ID ("," val1+=ID)*
protected class List1_Group extends GroupToken {
	
	public List1_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getList1Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List1_Group_2(parent, this, 0, inst);
			case 1: return new List1_Val1Assignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getList1Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#17"
protected class List1_NumberSignDigitOneDigitSevenKeyword_0 extends KeywordToken  {
	
	public List1_NumberSignDigitOneDigitSevenKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getList1Access().getNumberSignDigitOneDigitSevenKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// val1+=ID
protected class List1_Val1Assignment_1 extends AssignmentToken  {
	
	public List1_Val1Assignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getList1Access().getVal1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List1_NumberSignDigitOneDigitSevenKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getList1Access().getVal1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("," val1+=ID)*
protected class List1_Group_2 extends GroupToken {
	
	public List1_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getList1Access().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List1_Val1Assignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class List1_CommaKeyword_2_0 extends KeywordToken  {
	
	public List1_CommaKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getList1Access().getCommaKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List1_Group_2(parent, this, 0, inst);
			case 1: return new List1_Val1Assignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// val1+=ID
protected class List1_Val1Assignment_2_1 extends AssignmentToken  {
	
	public List1_Val1Assignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getList1Access().getVal1Assignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List1_CommaKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getList1Access().getVal1IDTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule List1 ****************/


/************ begin Rule List2 ****************
 *
 * List2:
 *   "#18" (val1+=ID ("," val1+=ID)*)?;
 *
 **/

// "#18" (val1+=ID ("," val1+=ID)*)?
protected class List2_Group extends GroupToken {
	
	public List2_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getList2Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List2_Group_1(parent, this, 0, inst);
			case 1: return new List2_NumberSignDigitOneDigitEightKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getList2Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#18"
protected class List2_NumberSignDigitOneDigitEightKeyword_0 extends KeywordToken  {
	
	public List2_NumberSignDigitOneDigitEightKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getList2Access().getNumberSignDigitOneDigitEightKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// (val1+=ID ("," val1+=ID)*)?
protected class List2_Group_1 extends GroupToken {
	
	public List2_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getList2Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List2_Group_1_1(parent, this, 0, inst);
			case 1: return new List2_Val1Assignment_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// val1+=ID
protected class List2_Val1Assignment_1_0 extends AssignmentToken  {
	
	public List2_Val1Assignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getList2Access().getVal1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List2_NumberSignDigitOneDigitEightKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getList2Access().getVal1IDTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// ("," val1+=ID)*
protected class List2_Group_1_1 extends GroupToken {
	
	public List2_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getList2Access().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List2_Val1Assignment_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class List2_CommaKeyword_1_1_0 extends KeywordToken  {
	
	public List2_CommaKeyword_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getList2Access().getCommaKeyword_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List2_Group_1_1(parent, this, 0, inst);
			case 1: return new List2_Val1Assignment_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// val1+=ID
protected class List2_Val1Assignment_1_1_1 extends AssignmentToken  {
	
	public List2_Val1Assignment_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getList2Access().getVal1Assignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List2_CommaKeyword_1_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getList2Access().getVal1IDTerminalRuleCall_1_1_1_0();
			return obj;
		}
		return null;
	}

}




/************ end Rule List2 ****************/


/************ begin Rule List3 ****************
 *
 * List3:
 *   "#19" (val1+=ID ("," val1+=ID)*)|"kw3" val2=ID;
 *
 **/

// "#19" (val1+=ID ("," val1+=ID)*)|"kw3" val2=ID
protected class List3_Alternatives extends AlternativesToken {

	public List3_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getList3Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List3_Group_0(parent, this, 0, inst);
			case 1: return new List3_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getList3Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#19" (val1+=ID ("," val1+=ID)*)
protected class List3_Group_0 extends GroupToken {
	
	public List3_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getList3Access().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List3_Group_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "#19"
protected class List3_NumberSignDigitOneDigitNineKeyword_0_0 extends KeywordToken  {
	
	public List3_NumberSignDigitOneDigitNineKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getList3Access().getNumberSignDigitOneDigitNineKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// val1+=ID ("," val1+=ID)*
protected class List3_Group_0_1 extends GroupToken {
	
	public List3_Group_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getList3Access().getGroup_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List3_Group_0_1_1(parent, this, 0, inst);
			case 1: return new List3_Val1Assignment_0_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// val1+=ID
protected class List3_Val1Assignment_0_1_0 extends AssignmentToken  {
	
	public List3_Val1Assignment_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getList3Access().getVal1Assignment_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List3_NumberSignDigitOneDigitNineKeyword_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getList3Access().getVal1IDTerminalRuleCall_0_1_0_0();
			return obj;
		}
		return null;
	}

}

// ("," val1+=ID)*
protected class List3_Group_0_1_1 extends GroupToken {
	
	public List3_Group_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getList3Access().getGroup_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List3_Val1Assignment_0_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class List3_CommaKeyword_0_1_1_0 extends KeywordToken  {
	
	public List3_CommaKeyword_0_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getList3Access().getCommaKeyword_0_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List3_Group_0_1_1(parent, this, 0, inst);
			case 1: return new List3_Val1Assignment_0_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// val1+=ID
protected class List3_Val1Assignment_0_1_1_1 extends AssignmentToken  {
	
	public List3_Val1Assignment_0_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getList3Access().getVal1Assignment_0_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List3_CommaKeyword_0_1_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getList3Access().getVal1IDTerminalRuleCall_0_1_1_1_0();
			return obj;
		}
		return null;
	}

}




// "kw3" val2=ID
protected class List3_Group_1 extends GroupToken {
	
	public List3_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getList3Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List3_Val2Assignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "kw3"
protected class List3_Kw3Keyword_1_0 extends KeywordToken  {
	
	public List3_Kw3Keyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getList3Access().getKw3Keyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// val2=ID
protected class List3_Val2Assignment_1_1 extends AssignmentToken  {
	
	public List3_Val2Assignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getList3Access().getVal2Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List3_Kw3Keyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val2");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getList3Access().getVal2IDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule List3 ****************/


/************ begin Rule List4 ****************
 *
 * List4:
 *   "#20" val1+=ID ("," val1+=ID)* "kw3" val2=ID;
 *
 **/

// "#20" val1+=ID ("," val1+=ID)* "kw3" val2=ID
protected class List4_Group extends GroupToken {
	
	public List4_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getList4Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List4_Val2Assignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getList4Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#20"
protected class List4_NumberSignDigitTwoDigitZeroKeyword_0 extends KeywordToken  {
	
	public List4_NumberSignDigitTwoDigitZeroKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getList4Access().getNumberSignDigitTwoDigitZeroKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// val1+=ID
protected class List4_Val1Assignment_1 extends AssignmentToken  {
	
	public List4_Val1Assignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getList4Access().getVal1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List4_NumberSignDigitTwoDigitZeroKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getList4Access().getVal1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("," val1+=ID)*
protected class List4_Group_2 extends GroupToken {
	
	public List4_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getList4Access().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List4_Val1Assignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class List4_CommaKeyword_2_0 extends KeywordToken  {
	
	public List4_CommaKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getList4Access().getCommaKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List4_Group_2(parent, this, 0, inst);
			case 1: return new List4_Val1Assignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// val1+=ID
protected class List4_Val1Assignment_2_1 extends AssignmentToken  {
	
	public List4_Val1Assignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getList4Access().getVal1Assignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List4_CommaKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getList4Access().getVal1IDTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// "kw3"
protected class List4_Kw3Keyword_3 extends KeywordToken  {
	
	public List4_Kw3Keyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getList4Access().getKw3Keyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List4_Group_2(parent, this, 0, inst);
			case 1: return new List4_Val1Assignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// val2=ID
protected class List4_Val2Assignment_4 extends AssignmentToken  {
	
	public List4_Val2Assignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getList4Access().getVal2Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List4_Kw3Keyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val2");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getList4Access().getVal2IDTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule List4 ****************/


/************ begin Rule List5 ****************
 *
 * List5:
 *   "#21" (val1+=ID ("," val1+=ID)* "kw3" val2=ID|val3=ID);
 *
 **/

// "#21" (val1+=ID ("," val1+=ID)* "kw3" val2=ID|val3=ID)
protected class List5_Group extends GroupToken {
	
	public List5_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getList5Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List5_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getList5Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "#21"
protected class List5_NumberSignDigitTwoDigitOneKeyword_0 extends KeywordToken  {
	
	public List5_NumberSignDigitTwoDigitOneKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getList5Access().getNumberSignDigitTwoDigitOneKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// val1+=ID ("," val1+=ID)* "kw3" val2=ID|val3=ID
protected class List5_Alternatives_1 extends AlternativesToken {

	public List5_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getList5Access().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List5_Group_1_0(parent, this, 0, inst);
			case 1: return new List5_Val3Assignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// val1+=ID ("," val1+=ID)* "kw3" val2=ID
protected class List5_Group_1_0 extends GroupToken {
	
	public List5_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getList5Access().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List5_Val2Assignment_1_0_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// val1+=ID
protected class List5_Val1Assignment_1_0_0 extends AssignmentToken  {
	
	public List5_Val1Assignment_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getList5Access().getVal1Assignment_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List5_NumberSignDigitTwoDigitOneKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getList5Access().getVal1IDTerminalRuleCall_1_0_0_0();
			return obj;
		}
		return null;
	}

}

// ("," val1+=ID)*
protected class List5_Group_1_0_1 extends GroupToken {
	
	public List5_Group_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getList5Access().getGroup_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List5_Val1Assignment_1_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class List5_CommaKeyword_1_0_1_0 extends KeywordToken  {
	
	public List5_CommaKeyword_1_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getList5Access().getCommaKeyword_1_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List5_Group_1_0_1(parent, this, 0, inst);
			case 1: return new List5_Val1Assignment_1_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// val1+=ID
protected class List5_Val1Assignment_1_0_1_1 extends AssignmentToken  {
	
	public List5_Val1Assignment_1_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getList5Access().getVal1Assignment_1_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List5_CommaKeyword_1_0_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val1",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val1");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getList5Access().getVal1IDTerminalRuleCall_1_0_1_1_0();
			return obj;
		}
		return null;
	}

}


// "kw3"
protected class List5_Kw3Keyword_1_0_2 extends KeywordToken  {
	
	public List5_Kw3Keyword_1_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getList5Access().getKw3Keyword_1_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List5_Group_1_0_1(parent, this, 0, inst);
			case 1: return new List5_Val1Assignment_1_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// val2=ID
protected class List5_Val2Assignment_1_0_3 extends AssignmentToken  {
	
	public List5_Val2Assignment_1_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getList5Access().getVal2Assignment_1_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List5_Kw3Keyword_1_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val2");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getList5Access().getVal2IDTerminalRuleCall_1_0_3_0();
			return obj;
		}
		return null;
	}

}


// val3=ID
protected class List5_Val3Assignment_1_1 extends AssignmentToken  {
	
	public List5_Val3Assignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getList5Access().getVal3Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new List5_NumberSignDigitTwoDigitOneKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val3",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val3");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getList5Access().getVal3IDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule List5 ****************/

}
