/*
* generated by Xtext
*/
package org.eclipse.xtext.generator.ecore.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.generator.ecore.services.SubTestLanguageGrammarAccess;

import org.eclipse.xtext.generator.ecore.parser.packrat.SuperTestLanguageParserConfiguration; 
import org.eclipse.xtext.generator.ecore.parser.packrat.consumers.SubTestLanguageSubMainConsumer;
import org.eclipse.xtext.generator.ecore.parser.packrat.consumers.SuperTestLanguageSuperMainConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class SubTestLanguageParserConfiguration extends AbstractParserConfiguration {

	private final SuperTestLanguageParserConfiguration superTestLanguageConfiguration; 
    private SubTestLanguageSubMainConsumer subMainConsumer;

	private SubTestLanguageGrammarAccess grammarAccess;

	public SubTestLanguageParserConfiguration(IInternalParserConfiguration configuration, SubTestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.superTestLanguageConfiguration = new SuperTestLanguageParserConfiguration(configuration, null);
	}

	public SubTestLanguageSubMainConsumer getRootConsumer() {
		return subMainConsumer;
	} 

	public void createNonTerminalConsumers() {
		getSuperTestLanguageConfiguration().createNonTerminalConsumers();
		subMainConsumer = new SubTestLanguageSubMainConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getSuperTestLanguageConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getSubMainConsumer().setRule(grammarAccess.getSubMainAccess());
		getSuperMainConsumer().setRule(grammarAccess.getSuperMainAccess());
		getIdConsumer().setRule(grammarAccess.getIDRule());
		getIntConsumer().setRule(grammarAccess.getINTRule());
		getStringConsumer().setRule(grammarAccess.getSTRINGRule());
		getMlCommentConsumer().setRule(grammarAccess.getML_COMMENTRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getAnyOtherConsumer().setRule(grammarAccess.getANY_OTHERRule());


		getSubMainConsumer().setSuperMainConsumer(getSuperMainConsumer());

		getSuperMainConsumer().setIdConsumer(getIdConsumer());

		getSubMainConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.generator.ecore.parser.packrat.SubTestLanguageDelimiters.keyword$5$Delimiter);
		getSubMainConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.generator.ecore.parser.packrat.SubTestLanguageDelimiters.keyword$5$Delimiter);
		getSuperMainConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.generator.ecore.parser.packrat.SubTestLanguageDelimiters.keyword$4$Delimiter);
		getSuperMainConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.generator.ecore.parser.packrat.SubTestLanguageDelimiters.ruleCall$6$Delimiter);
	}
	
	public SuperTestLanguageParserConfiguration getSuperTestLanguageConfiguration() {
		return superTestLanguageConfiguration;
	} 
	
    public SubTestLanguageSubMainConsumer getSubMainConsumer() {
    	return subMainConsumer;
    }

    public SuperTestLanguageSuperMainConsumer getSuperMainConsumer() {
    	return getSuperTestLanguageConfiguration().getSuperMainConsumer();
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getSuperTestLanguageConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getSuperTestLanguageConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getSuperTestLanguageConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getSuperTestLanguageConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getSuperTestLanguageConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getSuperTestLanguageConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getSuperTestLanguageConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getSuperTestLanguageConfiguration().getInitialHiddenTerminals();
	}
	
}
