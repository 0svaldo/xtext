/*
* generated by Xtext
*/

package org.eclipse.xtext.generator.ecore.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EcoreFragmentTestLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SecondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Second");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cFirstKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFirstAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFirstFirstCrossReference_2_0 = (CrossReference)cFirstAssignment_2.eContents().get(0);
		private final RuleCall cFirstFirstIDTerminalRuleCall_2_0_1 = (RuleCall)cFirstFirstCrossReference_2_0.eContents().get(1);
		
		//org.eclipse.xtext.parsetree.reconstr.XtextSerializationException: Could not serialize cross reference from Grammar'org.eclipse.xtext.generator.ecore.EcoreFragmentTestLanguage'.rules[0]->ParserRule'Second'.alternatives->Group.elements[2]->Assignment.terminal->CrossReference.type->TypeRef.classifier to EPackage'first'.eClassifiers[0]->EClass'First'
		public ParserRule getRule() { return rule; }

		//org.eclipse.xtext.parsetree.reconstr.XtextSerializationException: Could not serialize cross reference from Grammar'org.eclipse.xtext.generator.ecore.EcoreFragmentTestLanguage'.rules[0]->ParserRule'Second'.alternatives->Group.elements[2]->Assignment.terminal->CrossReference.type->TypeRef.classifier to EPackage'first'.eClassifiers[0]->EClass'First'
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"first"
		public Keyword getFirstKeyword_1() { return cFirstKeyword_1; }

		//org.eclipse.xtext.parsetree.reconstr.XtextSerializationException: Could not serialize cross reference from Grammar'org.eclipse.xtext.generator.ecore.EcoreFragmentTestLanguage'.rules[0]->ParserRule'Second'.alternatives->Group.elements[2]->Assignment.terminal->CrossReference.type->TypeRef.classifier to EPackage'first'.eClassifiers[0]->EClass'First'
		public Assignment getFirstAssignment_2() { return cFirstAssignment_2; }

		//org.eclipse.xtext.parsetree.reconstr.XtextSerializationException: Could not serialize cross reference from Grammar'org.eclipse.xtext.generator.ecore.EcoreFragmentTestLanguage'.rules[0]->ParserRule'Second'.alternatives->Group.elements[2]->Assignment.terminal->CrossReference.type->TypeRef.classifier to EPackage'first'.eClassifiers[0]->EClass'First'
		public CrossReference getFirstFirstCrossReference_2_0() { return cFirstFirstCrossReference_2_0; }

		//ID
		public RuleCall getFirstFirstIDTerminalRuleCall_2_0_1() { return cFirstFirstIDTerminalRuleCall_2_0_1; }
	}
	
	
	private SecondElements pSecond;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public EcoreFragmentTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//org.eclipse.xtext.parsetree.reconstr.XtextSerializationException: Could not serialize cross reference from Grammar'org.eclipse.xtext.generator.ecore.EcoreFragmentTestLanguage'.rules[0]->ParserRule'Second'.alternatives->Group.elements[2]->Assignment.terminal->CrossReference.type->TypeRef.classifier to EPackage'first'.eClassifiers[0]->EClass'First'
	public SecondElements getSecondAccess() {
		return (pSecond != null) ? pSecond : (pSecond = new SecondElements());
	}
	
	public ParserRule getSecondRule() {
		return getSecondAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
