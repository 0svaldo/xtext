/*
* generated by Xtext
*/
grammar InternalContextFinderTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.serializer.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.serializer.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.serializer.services.ContextFinderTestLanguageGrammarAccess;

}

@parser::members {

 	private ContextFinderTestLanguageGrammarAccess grammarAccess;
 	
    public InternalContextFinderTestLanguageParser(TokenStream input, ContextFinderTestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected ContextFinderTestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='#1' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModelAccess().getNumberSignDigitOneKeyword_0_0());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getAttributeExclusionAttributeExclusionTest1ParserRuleCall_0_1_0_0()); 
	    }
		lv_attributeExclusion_1_1=ruleAttributeExclusionTest1		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"attributeExclusion",
        		lv_attributeExclusion_1_1, 
        		"AttributeExclusionTest1");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getAttributeExclusionAttributeExclusionTest2ParserRuleCall_0_1_0_1()); 
	    }
		lv_attributeExclusion_1_2=ruleAttributeExclusionTest2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"attributeExclusion",
        		lv_attributeExclusion_1_2, 
        		"AttributeExclusionTest2");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
    |(	otherlv_2='#2' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModelAccess().getNumberSignDigitTwoKeyword_1_0());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getNestedTypeNestedTypeTest1ParserRuleCall_1_1_0_0()); 
	    }
		lv_nestedType_3_1=ruleNestedTypeTest1		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"nestedType",
        		lv_nestedType_3_1, 
        		"NestedTypeTest1");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getNestedTypeNestedTypeTest2ParserRuleCall_1_1_0_1()); 
	    }
		lv_nestedType_3_2=ruleNestedTypeTest2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"nestedType",
        		lv_nestedType_3_2, 
        		"NestedTypeTest2");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
    |(	otherlv_4='#3' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getModelAccess().getNumberSignDigitThreeKeyword_2_0());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getNestedTypeRecursiveTest2NestedTypeRecursiveTest1ParserRuleCall_2_1_0_0()); 
	    }
		lv_nestedTypeRecursiveTest2_5_1=ruleNestedTypeRecursiveTest1		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"nestedTypeRecursiveTest2",
        		lv_nestedTypeRecursiveTest2_5_1, 
        		"NestedTypeRecursiveTest1");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getNestedTypeRecursiveTest2NestedTypeRecursiveTest2ParserRuleCall_2_1_0_1()); 
	    }
		lv_nestedTypeRecursiveTest2_5_2=ruleNestedTypeRecursiveTest2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"nestedTypeRecursiveTest2",
        		lv_nestedTypeRecursiveTest2_5_2, 
        		"NestedTypeRecursiveTest2");
	        afterParserOrEnumRuleCall();
	    }

)

)
)))
;





// Entry rule entryRuleAttributeExclusionTest1
entryRuleAttributeExclusionTest1 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeExclusionTest1Rule()); }
	 iv_ruleAttributeExclusionTest1=ruleAttributeExclusionTest1 
	 { $current=$iv_ruleAttributeExclusionTest1.current; } 
	 EOF 
;

// Rule AttributeExclusionTest1
ruleAttributeExclusionTest1 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='kw1' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAttributeExclusionTest1Access().getKw1Keyword_0());
    }
(
(
		lv_attr1_1_0=RULE_ID
		{
			newLeafNode(lv_attr1_1_0, grammarAccess.getAttributeExclusionTest1Access().getAttr1IDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeExclusionTest1Rule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"attr1",
        		lv_attr1_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleAttributeExclusionTest2
entryRuleAttributeExclusionTest2 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeExclusionTest2Rule()); }
	 iv_ruleAttributeExclusionTest2=ruleAttributeExclusionTest2 
	 { $current=$iv_ruleAttributeExclusionTest2.current; } 
	 EOF 
;

// Rule AttributeExclusionTest2
ruleAttributeExclusionTest2 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='kw2' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAttributeExclusionTest2Access().getKw2Keyword_0());
    }
(
(
		lv_attr2_1_0=RULE_ID
		{
			newLeafNode(lv_attr2_1_0, grammarAccess.getAttributeExclusionTest2Access().getAttr2IDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeExclusionTest2Rule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"attr2",
        		lv_attr2_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleNestedTypeTest1
entryRuleNestedTypeTest1 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNestedTypeTest1Rule()); }
	 iv_ruleNestedTypeTest1=ruleNestedTypeTest1 
	 { $current=$iv_ruleNestedTypeTest1.current; } 
	 EOF 
;

// Rule NestedTypeTest1
ruleNestedTypeTest1 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getNestedTypeTest1Access().getNestedNestedTypeChild1ParserRuleCall_0()); 
	    }
		lv_nested_0_0=ruleNestedTypeChild1		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNestedTypeTest1Rule());
	        }
       		set(
       			$current, 
       			"nested",
        		lv_nested_0_0, 
        		"NestedTypeChild1");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleNestedTypeTest2
entryRuleNestedTypeTest2 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNestedTypeTest2Rule()); }
	 iv_ruleNestedTypeTest2=ruleNestedTypeTest2 
	 { $current=$iv_ruleNestedTypeTest2.current; } 
	 EOF 
;

// Rule NestedTypeTest2
ruleNestedTypeTest2 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getNestedTypeTest2Access().getNestedNestedTypeChild2ParserRuleCall_0()); 
	    }
		lv_nested_0_0=ruleNestedTypeChild2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNestedTypeTest2Rule());
	        }
       		set(
       			$current, 
       			"nested",
        		lv_nested_0_0, 
        		"NestedTypeChild2");
	        afterParserOrEnumRuleCall();
	    }

)
)
;







// Entry rule entryRuleNestedTypeChild1
entryRuleNestedTypeChild1 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNestedTypeChild1Rule()); }
	 iv_ruleNestedTypeChild1=ruleNestedTypeChild1 
	 { $current=$iv_ruleNestedTypeChild1.current; } 
	 EOF 
;

// Rule NestedTypeChild1
ruleNestedTypeChild1 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='kw1' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNestedTypeChild1Access().getKw1Keyword_0());
    }
(
(
		lv_val_1_0=RULE_ID
		{
			newLeafNode(lv_val_1_0, grammarAccess.getNestedTypeChild1Access().getValIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNestedTypeChild1Rule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleNestedTypeChild2
entryRuleNestedTypeChild2 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNestedTypeChild2Rule()); }
	 iv_ruleNestedTypeChild2=ruleNestedTypeChild2 
	 { $current=$iv_ruleNestedTypeChild2.current; } 
	 EOF 
;

// Rule NestedTypeChild2
ruleNestedTypeChild2 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='kw2' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNestedTypeChild2Access().getKw2Keyword_0());
    }
(
(
		lv_val_1_0=RULE_ID
		{
			newLeafNode(lv_val_1_0, grammarAccess.getNestedTypeChild2Access().getValIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNestedTypeChild2Rule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleNestedTypeRecursiveTest1
entryRuleNestedTypeRecursiveTest1 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNestedTypeRecursiveTest1Rule()); }
	 iv_ruleNestedTypeRecursiveTest1=ruleNestedTypeRecursiveTest1 
	 { $current=$iv_ruleNestedTypeRecursiveTest1.current; } 
	 EOF 
;

// Rule NestedTypeRecursiveTest1
ruleNestedTypeRecursiveTest1 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNestedTypeRecursiveTest1Access().getNestedTypeRecursiveTest1Action_0(),
            $current);
    }
)	otherlv_1='kw1' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNestedTypeRecursiveTest1Access().getKw1Keyword_1());
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getNestedTypeRecursiveTest1Access().getNestedTypeRecursiveTestLeftAction_2_0(),
            $current);
    }
)	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNestedTypeRecursiveTest1Access().getFullStopKeyword_2_1());
    }
)+)
;





// Entry rule entryRuleNestedTypeRecursiveTest2
entryRuleNestedTypeRecursiveTest2 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNestedTypeRecursiveTest2Rule()); }
	 iv_ruleNestedTypeRecursiveTest2=ruleNestedTypeRecursiveTest2 
	 { $current=$iv_ruleNestedTypeRecursiveTest2.current; } 
	 EOF 
;

// Rule NestedTypeRecursiveTest2
ruleNestedTypeRecursiveTest2 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNestedTypeRecursiveTest2Access().getNestedTypeRecursiveTest2Action_0(),
            $current);
    }
)	otherlv_1='kw2' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNestedTypeRecursiveTest2Access().getKw2Keyword_1());
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getNestedTypeRecursiveTest2Access().getNestedTypeRecursiveTestLeftAction_2_0(),
            $current);
    }
)	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNestedTypeRecursiveTest2Access().getFullStopKeyword_2_1());
    }
)+)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


