/*
* generated by Xtext
*/
grammar InternalTransientValuesTest;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.parsetree.transientvalues.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parsetree.transientvalues.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.parsetree.transientvalues.services.TransientValuesTestGrammarAccess;

}

@parser::members {

 	private TransientValuesTestGrammarAccess grammarAccess;
 	
    public InternalTransientValuesTestParser(TokenStream input, IAstFactory factory, TransientValuesTestGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Root";	
   	}
   	
   	@Override
   	protected TransientValuesTestGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRoot
entryRuleRoot returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRootRule(), currentNode); }
	 iv_ruleRoot=ruleRoot 
	 { $current=$iv_ruleRoot.current; } 
	 EOF 
;

// Rule Root
ruleRoot returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='test' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getRootAccess().getTestKeyword_0(), null);
    }
(
    { 
        currentNode=createCompositeNode(grammarAccess.getRootAccess().getTestRequiredParserRuleCall_1_0(), currentNode); 
    }
    this_TestRequired_1=ruleTestRequired
    { 
        $current = $this_TestRequired_1.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getRootAccess().getTestOptionalParserRuleCall_1_1(), currentNode); 
    }
    this_TestOptional_2=ruleTestOptional
    { 
        $current = $this_TestOptional_2.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getRootAccess().getTestListParserRuleCall_1_2(), currentNode); 
    }
    this_TestList_3=ruleTestList
    { 
        $current = $this_TestList_3.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleTestRequired
entryRuleTestRequired returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTestRequiredRule(), currentNode); }
	 iv_ruleTestRequired=ruleTestRequired 
	 { $current=$iv_ruleTestRequired.current; } 
	 EOF 
;

// Rule TestRequired
ruleTestRequired returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='required' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getTestRequiredAccess().getRequiredKeyword_0(), null);
    }
(
(
		lv_required1_1_0=RULE_INT
		{
			createLeafNode(lv_required1_1_0, grammarAccess.getTestRequiredAccess().getRequired1INTTerminalRuleCall_1_0(), "required1"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTestRequiredRule());
	        }
       		set(
       			$current, 
       			"required1",
        		lv_required1_1_0, 
        		"INT", 
        		lastConsumedNode);
	    }

)
)(
(
		lv_required2_2_0=RULE_INT
		{
			createLeafNode(lv_required2_2_0, grammarAccess.getTestRequiredAccess().getRequired2INTTerminalRuleCall_2_0(), "required2"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTestRequiredRule());
	        }
       		set(
       			$current, 
       			"required2",
        		lv_required2_2_0, 
        		"INT", 
        		lastConsumedNode);
	    }

)
))
;





// Entry rule entryRuleTestOptional
entryRuleTestOptional returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTestOptionalRule(), currentNode); }
	 iv_ruleTestOptional=ruleTestOptional 
	 { $current=$iv_ruleTestOptional.current; } 
	 EOF 
;

// Rule TestOptional
ruleTestOptional returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='optional' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getTestOptionalAccess().getOptionalKeyword_0(), null);
    }
(
(
		lv_opt1_1_0=RULE_INT
		{
			createLeafNode(lv_opt1_1_0, grammarAccess.getTestOptionalAccess().getOpt1INTTerminalRuleCall_1_0(), "opt1"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTestOptionalRule());
	        }
       		set(
       			$current, 
       			"opt1",
        		lv_opt1_1_0, 
        		"INT", 
        		lastConsumedNode);
	    }

)
)?(	otherlv_2=':' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getTestOptionalAccess().getColonKeyword_2_0(), null);
    }
(
(
		lv_opt2_3_0=RULE_INT
		{
			createLeafNode(lv_opt2_3_0, grammarAccess.getTestOptionalAccess().getOpt2INTTerminalRuleCall_2_1_0(), "opt2"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTestOptionalRule());
	        }
       		set(
       			$current, 
       			"opt2",
        		lv_opt2_3_0, 
        		"INT", 
        		lastConsumedNode);
	    }

)
))?)
;





// Entry rule entryRuleTestList
entryRuleTestList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTestListRule(), currentNode); }
	 iv_ruleTestList=ruleTestList 
	 { $current=$iv_ruleTestList.current; } 
	 EOF 
;

// Rule TestList
ruleTestList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='list' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getTestListAccess().getListKeyword_0(), null);
    }
(
(
		lv_item_1_0=RULE_INT
		{
			createLeafNode(lv_item_1_0, grammarAccess.getTestListAccess().getItemINTTerminalRuleCall_1_0(), "item"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTestListRule());
	        }
       		add(
       			$current, 
       			"item",
        		lv_item_1_0, 
        		"INT", 
        		lastConsumedNode);
	    }

)
)*)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


