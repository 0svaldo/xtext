/*
* generated by Xtext
*/

package org.eclipse.xtext.parsetree.transientvalues.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TransientValuesTestGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cTestRequiredParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cTestOptionalParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cTestListParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		
		//Root:
		//	"test" (TestRequired | TestOptional | TestList);
		public ParserRule getRule() { return rule; }

		//"test" (TestRequired | TestOptional | TestList)
		public Group getGroup() { return cGroup; }

		//"test"
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }

		//TestRequired | TestOptional | TestList
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//TestRequired
		public RuleCall getTestRequiredParserRuleCall_1_0() { return cTestRequiredParserRuleCall_1_0; }

		//TestOptional
		public RuleCall getTestOptionalParserRuleCall_1_1() { return cTestOptionalParserRuleCall_1_1; }

		//TestList
		public RuleCall getTestListParserRuleCall_1_2() { return cTestListParserRuleCall_1_2; }
	}

	public class TestRequiredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestRequired");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequiredKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRequired1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRequired1INTTerminalRuleCall_1_0 = (RuleCall)cRequired1Assignment_1.eContents().get(0);
		private final Assignment cRequired2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRequired2INTTerminalRuleCall_2_0 = (RuleCall)cRequired2Assignment_2.eContents().get(0);
		
		//TestRequired:
		//	"required" required1=INT required2=INT;
		public ParserRule getRule() { return rule; }

		//"required" required1=INT required2=INT
		public Group getGroup() { return cGroup; }

		//"required"
		public Keyword getRequiredKeyword_0() { return cRequiredKeyword_0; }

		//required1=INT
		public Assignment getRequired1Assignment_1() { return cRequired1Assignment_1; }

		//INT
		public RuleCall getRequired1INTTerminalRuleCall_1_0() { return cRequired1INTTerminalRuleCall_1_0; }

		//required2=INT
		public Assignment getRequired2Assignment_2() { return cRequired2Assignment_2; }

		//INT
		public RuleCall getRequired2INTTerminalRuleCall_2_0() { return cRequired2INTTerminalRuleCall_2_0; }
	}

	public class TestOptionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestOptional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOpt1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpt1INTTerminalRuleCall_1_0 = (RuleCall)cOpt1Assignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOpt2Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOpt2INTTerminalRuleCall_2_1_0 = (RuleCall)cOpt2Assignment_2_1.eContents().get(0);
		
		//TestOptional:
		//	"optional" opt1=INT? (":" opt2=INT)?;
		public ParserRule getRule() { return rule; }

		//"optional" opt1=INT? (":" opt2=INT)?
		public Group getGroup() { return cGroup; }

		//"optional"
		public Keyword getOptionalKeyword_0() { return cOptionalKeyword_0; }

		//opt1=INT?
		public Assignment getOpt1Assignment_1() { return cOpt1Assignment_1; }

		//INT
		public RuleCall getOpt1INTTerminalRuleCall_1_0() { return cOpt1INTTerminalRuleCall_1_0; }

		//(":" opt2=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//opt2=INT
		public Assignment getOpt2Assignment_2_1() { return cOpt2Assignment_2_1; }

		//INT
		public RuleCall getOpt2INTTerminalRuleCall_2_1_0() { return cOpt2INTTerminalRuleCall_2_1_0; }
	}

	public class TestListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemINTTerminalRuleCall_1_0 = (RuleCall)cItemAssignment_1.eContents().get(0);
		
		//TestList:
		//	"list" item+=INT*;
		public ParserRule getRule() { return rule; }

		//"list" item+=INT*
		public Group getGroup() { return cGroup; }

		//"list"
		public Keyword getListKeyword_0() { return cListKeyword_0; }

		//item+=INT*
		public Assignment getItemAssignment_1() { return cItemAssignment_1; }

		//INT
		public RuleCall getItemINTTerminalRuleCall_1_0() { return cItemINTTerminalRuleCall_1_0; }
	}
	
	
	private RootElements pRoot;
	private TestRequiredElements pTestRequired;
	private TestOptionalElements pTestOptional;
	private TestListElements pTestList;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public TransientValuesTestGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Root:
	//	"test" (TestRequired | TestOptional | TestList);
	public RootElements getRootAccess() {
		return (pRoot != null) ? pRoot : (pRoot = new RootElements());
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//TestRequired:
	//	"required" required1=INT required2=INT;
	public TestRequiredElements getTestRequiredAccess() {
		return (pTestRequired != null) ? pTestRequired : (pTestRequired = new TestRequiredElements());
	}
	
	public ParserRule getTestRequiredRule() {
		return getTestRequiredAccess().getRule();
	}

	//TestOptional:
	//	"optional" opt1=INT? (":" opt2=INT)?;
	public TestOptionalElements getTestOptionalAccess() {
		return (pTestOptional != null) ? pTestOptional : (pTestOptional = new TestOptionalElements());
	}
	
	public ParserRule getTestOptionalRule() {
		return getTestOptionalAccess().getRule();
	}

	//TestList:
	//	"list" item+=INT*;
	public TestListElements getTestListAccess() {
		return (pTestList != null) ? pTestList : (pTestList = new TestListElements());
	}
	
	public ParserRule getTestListRule() {
		return getTestListAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
