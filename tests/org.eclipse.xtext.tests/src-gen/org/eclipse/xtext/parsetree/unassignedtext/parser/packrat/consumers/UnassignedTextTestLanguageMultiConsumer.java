/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.unassignedtext.parser.packrat.consumers;

import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.AbstractRuleAwareTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.ConsumeResult;

import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

@SuppressWarnings("all")
public final class UnassignedTextTestLanguageMultiConsumer extends AbstractRuleAwareTerminalConsumer {

	private ITerminalConsumer multi2Consumer;

	public UnassignedTextTestLanguageMultiConsumer(ITerminalConsumerConfiguration configuration) {
		super(configuration);
	}
	
	@Override
	protected int doConsume() {
		return consumeGroup$1() ? ConsumeResult.SUCCESS : ConsumeResult.EMPTY_MATCH;
	}

	protected boolean consumeGroup$1() {
		final int marker = mark();
		if (!consumeKeyword$2()) {
			rollbackTo(marker);
			return false;
		}
		if (!consumeKeyword$3()) {
			rollbackTo(marker);
			return false;
		}
		if (!consumeKeyword$4()) {
			rollbackTo(marker);
			return false;
		}
		if (!consumeKeyword$5()) {
			rollbackTo(marker);
			return false;
		}
		if (!consumeAlternatives$6()) {
			rollbackTo(marker);
			return false;
		}
		if (!consumeAlternatives$9()) {
			rollbackTo(marker);
			return false;
		}
		if (!consumeRuleCall$14()) {
			rollbackTo(marker);
			return false;
		}
		if (!consumeCharacterRange$15()) {
			rollbackTo(marker);
			return false;
		}
		if (!consumeCharacterRange$18()) {
			rollbackTo(marker);
			return false;
		}
		return true;
	}

	protected boolean consumeKeyword$2() {
		return readChar('a');
	}

	protected boolean consumeKeyword$3() {
		doConsumeKeyword$3();
		return true;
	}

	protected boolean doConsumeKeyword$3() {
		return readChar('b');
	}

	protected boolean consumeKeyword$4() {
		if (doConsumeKeyword$4()) {
			while(doConsumeKeyword$4()) {}
			return true;
		}
		return false;
	}

	protected boolean doConsumeKeyword$4() {
		return readChar('c');
	}

	protected boolean consumeKeyword$5() {
		while(doConsumeKeyword$5()) {}
		return true;
	}

	protected boolean doConsumeKeyword$5() {
		return readChar('d');
	}

	protected boolean consumeAlternatives$6() {
		if (consumeKeyword$7())
			return true;
		if (consumeKeyword$8())
			return true;
		return false;
	}

	protected boolean consumeKeyword$7() {
		return readChar('e');
	}

	protected boolean consumeKeyword$8() {
		return readChar('f');
	}

	protected boolean consumeAlternatives$9() {
		if (consumeKeyword$11())
			return true;
		if (consumeKeyword$12())
			return true;
		if (consumeKeyword$13())
			return true;
		return false;
	}

	protected boolean consumeKeyword$11() {
		return readChar('g');
	}

	protected boolean consumeKeyword$12() {
		return readChar('h');
	}

	protected boolean consumeKeyword$13() {
		if (doConsumeKeyword$13()) {
			while(doConsumeKeyword$13()) {}
			return true;
		}
		return false;
	}

	protected boolean doConsumeKeyword$13() {
		return readChar('i');
	}

	protected boolean consumeRuleCall$14() {
		return multi2Consumer.consume() == SUCCESS;
	}

	protected boolean consumeCharacterRange$15() {
		return readCharBetween('0', '9');
	}

	protected boolean consumeCharacterRange$18() {
		if (doConsumeCharacterRange$18()) {
			while(doConsumeCharacterRange$18()) {}
			return true;
		}
		return false;
	}

	protected boolean doConsumeCharacterRange$18() {
		return readCharBetween('0', '9');
	}
	
	public void setMulti2Consumer(ITerminalConsumer multi2Consumer) {
		this.multi2Consumer = multi2Consumer;
	}
	
}
