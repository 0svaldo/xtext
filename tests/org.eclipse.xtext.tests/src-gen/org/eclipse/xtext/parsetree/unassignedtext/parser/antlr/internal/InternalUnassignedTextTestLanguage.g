/*
* generated by Xtext
*/
grammar InternalUnassignedTextTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.parsetree.unassignedtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parsetree.unassignedtext.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.parsetree.unassignedtext.services.UnassignedTextTestLanguageGrammarAccess;

}

@parser::members {

 	private UnassignedTextTestLanguageGrammarAccess grammarAccess;
 	
    public InternalUnassignedTextTestLanguageParser(TokenStream input, IAstFactory factory, UnassignedTextTestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/xtext/parsetree/unassignedtext/parser/antlr/internal/InternalUnassignedTextTestLanguage.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected UnassignedTextTestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getModelAccess().getCaseInsensitiveKeywordRuleParserRuleCall_0(), currentNode); 
    }
    this_CaseInsensitiveKeywordRule_0=ruleCaseInsensitiveKeywordRule
    { 
        $current = $this_CaseInsensitiveKeywordRule_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getModelAccess().getPluralRuleParserRuleCall_1(), currentNode); 
    }
    this_PluralRule_1=rulePluralRule
    { 
        $current = $this_PluralRule_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getModelAccess().getMultiRuleParserRuleCall_2(), currentNode); 
    }
    this_MultiRule_2=ruleMultiRule
    { 
        $current = $this_MultiRule_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getModelAccess().getDatatypeRuleParserRuleCall_3(), currentNode); 
    }
    this_DatatypeRule_3=ruleDatatypeRule
    { 
        $current = $this_DatatypeRule_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getModelAccess().getCommonTerminalsRuleParserRuleCall_4(), currentNode); 
    }
    this_CommonTerminalsRule_4=ruleCommonTerminalsRule
    { 
        $current = $this_CommonTerminalsRule_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleCaseInsensitiveKeywordRule
entryRuleCaseInsensitiveKeywordRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCaseInsensitiveKeywordRuleRule(), currentNode); }
	 iv_ruleCaseInsensitiveKeywordRule=ruleCaseInsensitiveKeywordRule 
	 { $current=$iv_ruleCaseInsensitiveKeywordRule.current; } 
	 EOF 
;

// Rule CaseInsensitiveKeywordRule
ruleCaseInsensitiveKeywordRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(RULE_CASEINSENSITIVEKEYWORD
    { 
    createLeafNode(grammarAccess.getCaseInsensitiveKeywordRuleAccess().getCaseInsensitiveKeywordTerminalRuleCall_0(), null); 
    }
(
(
		lv_val_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getCaseInsensitiveKeywordRuleAccess().getValINTTerminalRuleCall_1_0(), "val"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseInsensitiveKeywordRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"val",
	        		lv_val_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRulePluralRule
entryRulePluralRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPluralRuleRule(), currentNode); }
	 iv_rulePluralRule=rulePluralRule 
	 { $current=$iv_rulePluralRule.current; } 
	 EOF 
;

// Rule PluralRule
rulePluralRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'contents:' 
    {
        createLeafNode(grammarAccess.getPluralRuleAccess().getContentsKeyword_0(), null); 
    }
(
(
		lv_count_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getPluralRuleAccess().getCountINTTerminalRuleCall_1_0(), "count"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPluralRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"count",
	        		lv_count_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)RULE_PLURAL
    { 
    createLeafNode(grammarAccess.getPluralRuleAccess().getPluralTerminalRuleCall_2(), null); 
    }
)
;





// Entry rule entryRuleMultiRule
entryRuleMultiRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultiRuleRule(), currentNode); }
	 iv_ruleMultiRule=ruleMultiRule 
	 { $current=$iv_ruleMultiRule.current; } 
	 EOF 
;

// Rule MultiRule
ruleMultiRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'multi' 
    {
        createLeafNode(grammarAccess.getMultiRuleAccess().getMultiKeyword_0(), null); 
    }
(
(
		lv_val_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getMultiRuleAccess().getValINTTerminalRuleCall_1_0(), "val"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"val",
	        		lv_val_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)RULE_MULTI
    { 
    createLeafNode(grammarAccess.getMultiRuleAccess().getMultiTerminalRuleCall_2(), null); 
    }
RULE_MULTI
    { 
    createLeafNode(grammarAccess.getMultiRuleAccess().getMultiTerminalRuleCall_3(), null); 
    }
RULE_MULTI
    { 
    createLeafNode(grammarAccess.getMultiRuleAccess().getMultiTerminalRuleCall_4(), null); 
    }
)
;





// Entry rule entryRuleDatatypeRule
entryRuleDatatypeRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDatatypeRuleRule(), currentNode); }
	 iv_ruleDatatypeRule=ruleDatatypeRule 
	 { $current=$iv_ruleDatatypeRule.current; } 
	 EOF 
;

// Rule DatatypeRule
ruleDatatypeRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'datatype' 
    {
        createLeafNode(grammarAccess.getDatatypeRuleAccess().getDatatypeKeyword_0(), null); 
    }
(
(
		lv_val_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getDatatypeRuleAccess().getValINTTerminalRuleCall_1_0(), "val"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDatatypeRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"val",
	        		lv_val_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    { 
        currentNode=createCompositeNode(grammarAccess.getDatatypeRuleAccess().getDatatypeParserRuleCall_2(), currentNode); 
    }
ruleDatatype
    { 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleDatatype
entryRuleDatatype returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDatatypeRule(), currentNode); } 
	 iv_ruleDatatype=ruleDatatype 
	 { $current=$iv_ruleDatatype.current.getText(); }  
	 EOF 
;

// Rule Datatype
ruleDatatype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='str' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDatatypeAccess().getStrKeyword_0(), null); 
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    createLeafNode(grammarAccess.getDatatypeAccess().getINTTerminalRuleCall_1(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDatatypeAccess().getDatatype2ParserRuleCall_2(), currentNode); 
    }
    this_Datatype2_2=ruleDatatype2    {
		$current.merge(this_Datatype2_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleDatatype2
entryRuleDatatype2 returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDatatype2Rule(), currentNode); } 
	 iv_ruleDatatype2=ruleDatatype2 
	 { $current=$iv_ruleDatatype2.current.getText(); }  
	 EOF 
;

// Rule Datatype2
ruleDatatype2 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getDatatype2Access().getSTRINGTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleCommonTerminalsRule
entryRuleCommonTerminalsRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCommonTerminalsRuleRule(), currentNode); }
	 iv_ruleCommonTerminalsRule=ruleCommonTerminalsRule 
	 { $current=$iv_ruleCommonTerminalsRule.current; } 
	 EOF 
;

// Rule CommonTerminalsRule
ruleCommonTerminalsRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'terminals' 
    {
        createLeafNode(grammarAccess.getCommonTerminalsRuleAccess().getTerminalsKeyword_0(), null); 
    }
RULE_ID
    { 
    createLeafNode(grammarAccess.getCommonTerminalsRuleAccess().getIDTerminalRuleCall_1(), null); 
    }
RULE_INT
    { 
    createLeafNode(grammarAccess.getCommonTerminalsRuleAccess().getINTTerminalRuleCall_2(), null); 
    }
RULE_STRING
    { 
    createLeafNode(grammarAccess.getCommonTerminalsRuleAccess().getSTRINGTerminalRuleCall_3(), null); 
    }
(
(
		lv_val_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getCommonTerminalsRuleAccess().getValIDTerminalRuleCall_4_0(), "val"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCommonTerminalsRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"val",
	        		lv_val_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





RULE_CASEINSENSITIVEKEYWORD : ('k'|'K') ('e'|'E') ('y'|'Y') ('w'|'W') ('o'|'O') ('r'|'R') ('d'|'D');

RULE_PLURAL : ('item'|'items');

RULE_MULTI : 'a' 'b'? 'c'+ 'd'* ('e'|'f') (('g'|'h')|'i'+) RULE_MULTI2 '0'..'9' ('0'..'9')+;

RULE_MULTI2 : 'j';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


