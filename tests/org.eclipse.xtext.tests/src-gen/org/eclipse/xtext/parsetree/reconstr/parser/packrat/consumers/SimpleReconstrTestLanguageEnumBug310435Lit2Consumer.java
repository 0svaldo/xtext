/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.Keyword;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;

import org.eclipse.xtext.parsetree.reconstr.services.SimpleReconstrTestLanguageGrammarAccess.EnumBug310435Lit2Elements;

public final class SimpleReconstrTestLanguageEnumBug310435Lit2Consumer extends NonTerminalConsumer {

	private EnumBug310435Lit2Elements rule;	

	private IElementConsumer enumLiteralDeclaration$1$Consumer;

	private ICharacterClass keyword$2$Delimiter;

	protected class EnumLiteralDeclaration$1$Consumer extends ElementConsumer<EnumLiteralDeclaration> {
		
		protected EnumLiteralDeclaration$1$Consumer(final EnumLiteralDeclaration enumLiteralDeclaration) {
			super(enumLiteralDeclaration);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeEnum(getElement(), getKeyword$2$Delimiter());
		}
	}

	public SimpleReconstrTestLanguageEnumBug310435Lit2Consumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$2$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return enumLiteralDeclaration$1$Consumer.consume();
	}

	public EnumBug310435Lit2Elements getRule() {
		return rule;
	}
	
	public void setRule(EnumBug310435Lit2Elements rule) {
		this.rule = rule;
		
		enumLiteralDeclaration$1$Consumer = new EnumLiteralDeclaration$1$Consumer(rule.getLit2EnumLiteralDeclaration());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public ICharacterClass getKeyword$2$Delimiter() {
		return keyword$2$Delimiter;
	}
	
	public void setKeyword$2$Delimiter(ICharacterClass characterClass) {
		keyword$2$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
