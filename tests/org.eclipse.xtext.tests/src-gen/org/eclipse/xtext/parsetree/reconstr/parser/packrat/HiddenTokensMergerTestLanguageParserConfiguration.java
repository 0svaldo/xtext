/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.reconstr.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.parsetree.reconstr.services.HiddenTokensMergerTestLanguageGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.HiddenTokensMergerTestLanguageModelConsumer;
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.HiddenTokensMergerTestLanguageDatatypeBug286557Consumer;
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.HiddenTokensMergerTestLanguageFQNConsumer;
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.HiddenTokensMergerTestLanguageEnumBugConsumer;
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.HiddenTokensMergerTestLanguageEnumBugEnumConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class HiddenTokensMergerTestLanguageParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 
    private HiddenTokensMergerTestLanguageModelConsumer modelConsumer;
    private HiddenTokensMergerTestLanguageDatatypeBug286557Consumer datatypeBug286557Consumer;
    private HiddenTokensMergerTestLanguageFQNConsumer fqnConsumer;
    private HiddenTokensMergerTestLanguageEnumBugConsumer enumBugConsumer;
    private HiddenTokensMergerTestLanguageEnumBugEnumConsumer enumBugEnumConsumer;

	private HiddenTokensMergerTestLanguageGrammarAccess grammarAccess;

	public HiddenTokensMergerTestLanguageParserConfiguration(IInternalParserConfiguration configuration, HiddenTokensMergerTestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public HiddenTokensMergerTestLanguageModelConsumer getRootConsumer() {
		return modelConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		modelConsumer = new HiddenTokensMergerTestLanguageModelConsumer(
    		this, null
    	);
		datatypeBug286557Consumer = new HiddenTokensMergerTestLanguageDatatypeBug286557Consumer(
    		this, null
    	);
		fqnConsumer = new HiddenTokensMergerTestLanguageFQNConsumer(
    		this, null
    	);
		enumBugConsumer = new HiddenTokensMergerTestLanguageEnumBugConsumer(
    		this, null
    	);
		enumBugEnumConsumer = new HiddenTokensMergerTestLanguageEnumBugEnumConsumer(this, null);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getModelConsumer().setRule(grammarAccess.getModelAccess());
		getDatatypeBug286557Consumer().setRule(grammarAccess.getDatatypeBug286557Access());
		getFqnConsumer().setRule(grammarAccess.getFQNAccess());
		getEnumBugConsumer().setRule(grammarAccess.getEnumBugAccess());
		getEnumBugEnumConsumer().setRule(grammarAccess.getEnumBugEnumAccess());
		getIdConsumer().setRule(grammarAccess.getIDRule());
		getIntConsumer().setRule(grammarAccess.getINTRule());
		getStringConsumer().setRule(grammarAccess.getSTRINGRule());
		getMlCommentConsumer().setRule(grammarAccess.getML_COMMENTRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getAnyOtherConsumer().setRule(grammarAccess.getANY_OTHERRule());


		getModelConsumer().setDatatypeBug286557Consumer(getDatatypeBug286557Consumer());
		getModelConsumer().setEnumBugConsumer(getEnumBugConsumer());

		getDatatypeBug286557Consumer().setFqnConsumer(getFqnConsumer());

		getFqnConsumer().setIdConsumer(getIdConsumer());

		getEnumBugConsumer().setEnumBugEnumConsumer(getEnumBugEnumConsumer());
		getEnumBugConsumer().setIdConsumer(getIdConsumer());

		getDatatypeBug286557Consumer().setKeyword$6$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.HiddenTokensMergerTestLanguageDelimiters.keyword$13$Delimiter);
		getDatatypeBug286557Consumer().setKeyword$11$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.HiddenTokensMergerTestLanguageDelimiters.keyword$9$Delimiter);
		getDatatypeBug286557Consumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.HiddenTokensMergerTestLanguageDelimiters.keyword$9$Delimiter);
		getFqnConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.HiddenTokensMergerTestLanguageDelimiters.keyword$9$Delimiter);
		getFqnConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.HiddenTokensMergerTestLanguageDelimiters.ruleCall$22$Delimiter);
		getFqnConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.HiddenTokensMergerTestLanguageDelimiters.ruleCall$22$Delimiter);
		getEnumBugConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.HiddenTokensMergerTestLanguageDelimiters.keyword$9$Delimiter);
		getEnumBugConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.HiddenTokensMergerTestLanguageDelimiters.keyword$13$Delimiter);
		getEnumBugConsumer().setRuleCall$7$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.HiddenTokensMergerTestLanguageDelimiters.ruleCall$22$Delimiter);
	}
	
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public HiddenTokensMergerTestLanguageModelConsumer getModelConsumer() {
    	return modelConsumer;
    }

    public HiddenTokensMergerTestLanguageDatatypeBug286557Consumer getDatatypeBug286557Consumer() {
    	return datatypeBug286557Consumer;
    }

    public HiddenTokensMergerTestLanguageFQNConsumer getFqnConsumer() {
    	return fqnConsumer;
    }

    public HiddenTokensMergerTestLanguageEnumBugConsumer getEnumBugConsumer() {
    	return enumBugConsumer;
    }

    public HiddenTokensMergerTestLanguageEnumBugEnumConsumer getEnumBugEnumConsumer() {
    	return enumBugEnumConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
