/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.parsetree.reconstr.services.SimpleReconstrTestLanguageGrammarAccess.Loop2Elements;

@SuppressWarnings("all")
public final class SimpleReconstrTestLanguageLoop2Consumer extends NonTerminalConsumer {

	private Loop2Elements rule;	

	private ITerminalConsumer idConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer keyword$2$Consumer;

	private IElementConsumer assignment$3$Consumer;

	private IElementConsumer ruleCall$4$Consumer;

	private IElementConsumer alternatives$5$Consumer;

	private IElementConsumer keyword$6$Consumer;

	private IElementConsumer group$7$Consumer;

	private IElementConsumer assignment$8$Consumer;

	private IElementConsumer ruleCall$9$Consumer;

	private IElementConsumer keyword$10$Consumer;

	private IElementConsumer alternatives$11$Consumer;

	private IElementConsumer keyword$12$Consumer;

	private IElementConsumer group$13$Consumer;

	private IElementConsumer assignment$14$Consumer;

	private IElementConsumer ruleCall$15$Consumer;

	private IElementConsumer keyword$16$Consumer;

	private IElementConsumer alternatives$17$Consumer;

	private IElementConsumer keyword$18$Consumer;

	private IElementConsumer keyword$19$Consumer;

	private ICharacterClass keyword$2$Delimiter;

	private ICharacterClass keyword$6$Delimiter;

	private ICharacterClass keyword$10$Delimiter;

	private ICharacterClass keyword$12$Delimiter;

	private ICharacterClass keyword$16$Delimiter;

	private ICharacterClass keyword$18$Delimiter;

	private ICharacterClass keyword$19$Delimiter;

	private ISequenceMatcher ruleCall$4$Delimiter;

	private ISequenceMatcher ruleCall$9$Delimiter;

	private ISequenceMatcher ruleCall$15$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$2$Consumer);
			acceptor.accept(assignment$3$Consumer);
			acceptor.accept(alternatives$5$Consumer);
			acceptor.accept(alternatives$11$Consumer);
			acceptor.accept(alternatives$17$Consumer);
		}
	}

	protected class Keyword$2$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$2$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$2$Delimiter(), optional);
		}
	}

	protected class Assignment$3$Consumer extends AssignmentConsumer {
		
		protected Assignment$3$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$4$Consumer;
		}
	}

	protected class RuleCall$4$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$4$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "id", true, false, getElement(), getRuleCall$4$Delimiter(), optional);
		}
	}

	protected class Alternatives$5$Consumer extends AlternativesConsumer {
		
		protected Alternatives$5$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$6$Consumer);
			acceptor.accept(group$7$Consumer);
		}
	}

	protected class Keyword$6$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$6$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$6$Delimiter(), optional);
		}
	}

	protected class Group$7$Consumer extends GroupConsumer {
		
		protected Group$7$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$8$Consumer);
			acceptor.accept(keyword$10$Consumer);
		}
	}

	protected class Assignment$8$Consumer extends AssignmentConsumer {
		
		protected Assignment$8$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$9$Consumer;
		}
	}

	protected class RuleCall$9$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$9$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "id", true, false, getElement(), getRuleCall$9$Delimiter(), optional);
		}
	}

	protected class Keyword$10$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$10$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$10$Delimiter(), optional);
		}
	}

	protected class Alternatives$11$Consumer extends OptionalAlternativesConsumer {
		
		protected Alternatives$11$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$12$Consumer);
			acceptor.accept(group$13$Consumer);
		}
	}

	protected class Keyword$12$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$12$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$12$Delimiter(), optional);
		}
	}

	protected class Group$13$Consumer extends GroupConsumer {
		
		protected Group$13$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$14$Consumer);
			acceptor.accept(keyword$16$Consumer);
		}
	}

	protected class Assignment$14$Consumer extends AssignmentConsumer {
		
		protected Assignment$14$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$15$Consumer;
		}
	}

	protected class RuleCall$15$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$15$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "id", true, false, getElement(), getRuleCall$15$Delimiter(), optional);
		}
	}

	protected class Keyword$16$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$16$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$16$Delimiter(), optional);
		}
	}

	protected class Alternatives$17$Consumer extends AlternativesConsumer {
		
		protected Alternatives$17$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$18$Consumer);
			acceptor.accept(keyword$19$Consumer);
		}
	}

	protected class Keyword$18$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$18$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$18$Delimiter(), optional);
		}
	}

	protected class Keyword$19$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$19$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$19$Delimiter(), optional);
		}
	}

	public SimpleReconstrTestLanguageLoop2Consumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$2$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$6$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$10$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$12$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$16$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$18$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$19$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$4$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$9$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$15$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public Loop2Elements getRule() {
		return rule;
	}
	
	public void setRule(Loop2Elements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		keyword$2$Consumer = new Keyword$2$Consumer(rule.getNumberSignDigitNineKeyword_0());
		assignment$3$Consumer = new Assignment$3$Consumer(rule.getIdAssignment_1());
		ruleCall$4$Consumer = new RuleCall$4$Consumer(rule.getIdIDTerminalRuleCall_1_0());
		alternatives$5$Consumer = new Alternatives$5$Consumer(rule.getAlternatives_2());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.getKw1Keyword_2_0());
		group$7$Consumer = new Group$7$Consumer(rule.getGroup_2_1());
		assignment$8$Consumer = new Assignment$8$Consumer(rule.getIdAssignment_2_1_0());
		ruleCall$9$Consumer = new RuleCall$9$Consumer(rule.getIdIDTerminalRuleCall_2_1_0_0());
		keyword$10$Consumer = new Keyword$10$Consumer(rule.getKw2Keyword_2_1_1());
		alternatives$11$Consumer = new Alternatives$11$Consumer(rule.getAlternatives_3());
		keyword$12$Consumer = new Keyword$12$Consumer(rule.getKw3Keyword_3_0());
		group$13$Consumer = new Group$13$Consumer(rule.getGroup_3_1());
		assignment$14$Consumer = new Assignment$14$Consumer(rule.getIdAssignment_3_1_0());
		ruleCall$15$Consumer = new RuleCall$15$Consumer(rule.getIdIDTerminalRuleCall_3_1_0_0());
		keyword$16$Consumer = new Keyword$16$Consumer(rule.getKw4Keyword_3_1_1());
		alternatives$17$Consumer = new Alternatives$17$Consumer(rule.getAlternatives_4());
		keyword$18$Consumer = new Keyword$18$Consumer(rule.getKw5Keyword_4_0());
		keyword$19$Consumer = new Keyword$19$Consumer(rule.getKw6Keyword_4_1());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public ICharacterClass getKeyword$2$Delimiter() {
		return keyword$2$Delimiter;
	}
	
	public void setKeyword$2$Delimiter(ICharacterClass characterClass) {
		keyword$2$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$6$Delimiter() {
		return keyword$6$Delimiter;
	}
	
	public void setKeyword$6$Delimiter(ICharacterClass characterClass) {
		keyword$6$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$10$Delimiter() {
		return keyword$10$Delimiter;
	}
	
	public void setKeyword$10$Delimiter(ICharacterClass characterClass) {
		keyword$10$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$12$Delimiter() {
		return keyword$12$Delimiter;
	}
	
	public void setKeyword$12$Delimiter(ICharacterClass characterClass) {
		keyword$12$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$16$Delimiter() {
		return keyword$16$Delimiter;
	}
	
	public void setKeyword$16$Delimiter(ICharacterClass characterClass) {
		keyword$16$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$18$Delimiter() {
		return keyword$18$Delimiter;
	}
	
	public void setKeyword$18$Delimiter(ICharacterClass characterClass) {
		keyword$18$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$19$Delimiter() {
		return keyword$19$Delimiter;
	}
	
	public void setKeyword$19$Delimiter(ICharacterClass characterClass) {
		keyword$19$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$4$Delimiter() {
		return ruleCall$4$Delimiter;
	}
	
	public void setRuleCall$4$Delimiter(ISequenceMatcher matcher) {
		ruleCall$4$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$9$Delimiter() {
		return ruleCall$9$Delimiter;
	}
	
	public void setRuleCall$9$Delimiter(ISequenceMatcher matcher) {
		ruleCall$9$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$15$Delimiter() {
		return ruleCall$15$Delimiter;
	}
	
	public void setRuleCall$15$Delimiter(ISequenceMatcher matcher) {
		ruleCall$15$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
