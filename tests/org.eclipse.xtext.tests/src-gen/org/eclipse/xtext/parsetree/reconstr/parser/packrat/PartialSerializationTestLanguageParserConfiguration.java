/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.reconstr.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.parsetree.reconstr.services.PartialSerializationTestLanguageGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.PartialSerializationTestLanguageModelConsumer;
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.PartialSerializationTestLanguageNodeRootConsumer;
import org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers.PartialSerializationTestLanguageNodeConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class PartialSerializationTestLanguageParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 
    private PartialSerializationTestLanguageModelConsumer modelConsumer;
    private PartialSerializationTestLanguageNodeRootConsumer nodeRootConsumer;
    private PartialSerializationTestLanguageNodeConsumer nodeConsumer;

	private PartialSerializationTestLanguageGrammarAccess grammarAccess;

	public PartialSerializationTestLanguageParserConfiguration(IInternalParserConfiguration configuration, PartialSerializationTestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public PartialSerializationTestLanguageModelConsumer getRootConsumer() {
		return modelConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		modelConsumer = new PartialSerializationTestLanguageModelConsumer(
    		this, null
    	);
		nodeRootConsumer = new PartialSerializationTestLanguageNodeRootConsumer(
    		this, null
    	);
		nodeConsumer = new PartialSerializationTestLanguageNodeConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getModelConsumer().setRule(grammarAccess.getModelAccess());
		getNodeRootConsumer().setRule(grammarAccess.getNodeRootAccess());
		getNodeConsumer().setRule(grammarAccess.getNodeAccess());
		getIdConsumer().setRule(grammarAccess.getIDRule());
		getIntConsumer().setRule(grammarAccess.getINTRule());
		getStringConsumer().setRule(grammarAccess.getSTRINGRule());
		getMlCommentConsumer().setRule(grammarAccess.getML_COMMENTRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getAnyOtherConsumer().setRule(grammarAccess.getANY_OTHERRule());


		getModelConsumer().setNodeRootConsumer(getNodeRootConsumer());

		getNodeRootConsumer().setNodeConsumer(getNodeConsumer());

		getNodeConsumer().setIdConsumer(getIdConsumer());
		getNodeConsumer().setNodeConsumer(getNodeConsumer());

		getNodeRootConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.PartialSerializationTestLanguageDelimiters.keyword$7$Delimiter);
		getNodeConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.PartialSerializationTestLanguageDelimiters.keyword$13$Delimiter);
		getNodeConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.PartialSerializationTestLanguageDelimiters.keyword$7$Delimiter);
		getNodeConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.PartialSerializationTestLanguageDelimiters.keyword$7$Delimiter);
		getNodeConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parsetree.reconstr.parser.packrat.PartialSerializationTestLanguageDelimiters.ruleCall$15$Delimiter);
	}
	
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public PartialSerializationTestLanguageModelConsumer getModelConsumer() {
    	return modelConsumer;
    }

    public PartialSerializationTestLanguageNodeRootConsumer getNodeRootConsumer() {
    	return nodeRootConsumer;
    }

    public PartialSerializationTestLanguageNodeConsumer getNodeConsumer() {
    	return nodeConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
