/*
* generated by Xtext
*/
grammar InternalSerializationErrorTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.parsetree.reconstr.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parsetree.reconstr.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.parsetree.reconstr.services.SerializationErrorTestLanguageGrammarAccess;

}

@parser::members {

 	private SerializationErrorTestLanguageGrammarAccess grammarAccess;
 	
    public InternalSerializationErrorTestLanguageParser(TokenStream input, IAstFactory factory, SerializationErrorTestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected SerializationErrorTestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getTestTestParserRuleCall_0_0(), currentNode); 
	    }
		lv_test_0_0=ruleTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"test",
        		lv_test_0_0, 
        		"Test", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getTestParenthesisParserRuleCall_1_0(), currentNode); 
	    }
		lv_test_1_0=ruleParenthesis		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"test",
        		lv_test_1_0, 
        		"Parenthesis", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParenthesis
entryRuleParenthesis returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParenthesisRule(), currentNode); }
	 iv_ruleParenthesis=ruleParenthesis 
	 { $current=$iv_ruleParenthesis.current; } 
	 EOF 
;

// Rule Parenthesis
ruleParenthesis returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='(' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getParenthesisAccess().getLeftParenthesisKeyword_0(), null);
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getParenthesisAccess().getTestParserRuleCall_1(), currentNode); 
    }
    this_Test_1=ruleTest
    { 
        $current = $this_Test_1.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getParenthesisAccess().getRightParenthesisKeyword_2(), null);
    }
)
;





// Entry rule entryRuleTest
entryRuleTest returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTestRule(), currentNode); }
	 iv_ruleTest=ruleTest 
	 { $current=$iv_ruleTest.current; } 
	 EOF 
;

// Rule Test
ruleTest returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTestAccess().getTwoRequiredParserRuleCall_0(), currentNode); 
    }
    this_TwoRequired_0=ruleTwoRequired
    { 
        $current = $this_TwoRequired_0.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTestAccess().getTwoOptionsParserRuleCall_1(), currentNode); 
    }
    this_TwoOptions_1=ruleTwoOptions
    { 
        $current = $this_TwoOptions_1.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTestAccess().getIndentParserRuleCall_2(), currentNode); 
    }
    this_Indent_2=ruleIndent
    { 
        $current = $this_Indent_2.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTwoRequired
entryRuleTwoRequired returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTwoRequiredRule(), currentNode); }
	 iv_ruleTwoRequired=ruleTwoRequired 
	 { $current=$iv_ruleTwoRequired.current; } 
	 EOF 
;

// Rule TwoRequired
ruleTwoRequired returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='tworequired' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getTwoRequiredAccess().getTworequiredKeyword_0(), null);
    }
(
(
		lv_one_1_0=RULE_ID
		{
			createLeafNode(lv_one_1_0, grammarAccess.getTwoRequiredAccess().getOneIDTerminalRuleCall_1_0(), "one"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTwoRequiredRule());
	        }
       		set(
       			$current, 
       			"one",
        		lv_one_1_0, 
        		"ID", 
        		lastConsumedNode);
	    }

)
)(
(
		lv_two_2_0=RULE_ID
		{
			createLeafNode(lv_two_2_0, grammarAccess.getTwoRequiredAccess().getTwoIDTerminalRuleCall_2_0(), "two"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTwoRequiredRule());
	        }
       		set(
       			$current, 
       			"two",
        		lv_two_2_0, 
        		"ID", 
        		lastConsumedNode);
	    }

)
))
;





// Entry rule entryRuleTwoOptions
entryRuleTwoOptions returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTwoOptionsRule(), currentNode); }
	 iv_ruleTwoOptions=ruleTwoOptions 
	 { $current=$iv_ruleTwoOptions.current; } 
	 EOF 
;

// Rule TwoOptions
ruleTwoOptions returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='twooptions' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getTwoOptionsAccess().getTwooptionsKeyword_0(), null);
    }
((	otherlv_1='one' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getTwoOptionsAccess().getOneKeyword_1_0_0(), null);
    }
(
(
		lv_one_2_0=RULE_ID
		{
			createLeafNode(lv_one_2_0, grammarAccess.getTwoOptionsAccess().getOneIDTerminalRuleCall_1_0_1_0(), "one"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTwoOptionsRule());
	        }
       		set(
       			$current, 
       			"one",
        		lv_one_2_0, 
        		"ID", 
        		lastConsumedNode);
	    }

)
))
    |(	otherlv_3='two' 
    {
    	createLeafNode(otherlv_3, grammarAccess.getTwoOptionsAccess().getTwoKeyword_1_1_0(), null);
    }
(
(
		lv_two_4_0=RULE_ID
		{
			createLeafNode(lv_two_4_0, grammarAccess.getTwoOptionsAccess().getTwoIDTerminalRuleCall_1_1_1_0(), "two"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTwoOptionsRule());
	        }
       		set(
       			$current, 
       			"two",
        		lv_two_4_0, 
        		"ID", 
        		lastConsumedNode);
	    }

)
))))
;





// Entry rule entryRuleIndent
entryRuleIndent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIndentRule(), currentNode); }
	 iv_ruleIndent=ruleIndent 
	 { $current=$iv_ruleIndent.current; } 
	 EOF 
;

// Rule Indent
ruleIndent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='{' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getIndentAccess().getLeftCurlyBracketKeyword_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIndentAccess().getReqTwoRequiredParserRuleCall_1_0(), currentNode); 
	    }
		lv_req_1_0=ruleTwoRequired		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIndentRule());
	        }
       		set(
       			$current, 
       			"req",
        		lv_req_1_0, 
        		"TwoRequired", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIndentAccess().getOptTwoOptionsParserRuleCall_2_0(), currentNode); 
	    }
		lv_opt_2_0=ruleTwoOptions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIndentRule());
	        }
       		set(
       			$current, 
       			"opt",
        		lv_opt_2_0, 
        		"TwoOptions", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIndentAccess().getIndentIndentParserRuleCall_3_0(), currentNode); 
	    }
		lv_indent_3_0=ruleIndent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIndentRule());
	        }
       		add(
       			$current, 
       			"indent",
        		lv_indent_3_0, 
        		"Indent", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	createLeafNode(otherlv_4, grammarAccess.getIndentAccess().getRightCurlyBracketKeyword_4(), null);
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


