/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.reconstr.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.parsetree.reconstr.services.Bug299395TestLanguageGrammarAccess;

import com.google.inject.Inject;

public class Bug299395TestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private Bug299395TestLanguageGrammarAccess grammarAccess;
	
	@Override	
	public Bug299395TestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Group(this, this, 0, inst);
			case 1: return new SubModel_Group(this, this, 1, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 *   {Model} ("{" strings+=STRING? "}")* ("[" (keys+=STRING values+=STRING)* "]")* (
 *   "subModel" subModel=SubModel)?;
 *
 **/

// {Model} ("{" strings+=STRING? "}")* ("[" (keys+=STRING values+=STRING)* "]")* (
// "subModel" subModel=SubModel)?
protected class Model_Group extends GroupToken {
	
	public Model_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Group_3(parent, this, 0, inst);
			case 1: return new Model_Group_2(parent, this, 1, inst);
			case 2: return new Model_Group_1(parent, this, 2, inst);
			case 3: return new Model_ModelAction_0(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {Model}
protected class Model_ModelAction_0 extends ActionToken  {

	public Model_ModelAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getModelAccess().getModelAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getModelAccess().getModelAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// ("{" strings+=STRING? "}")*
protected class Model_Group_1 extends GroupToken {
	
	public Model_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_RightCurlyBracketKeyword_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Model_LeftCurlyBracketKeyword_1_0 extends KeywordToken  {
	
	public Model_LeftCurlyBracketKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Group_1(parent, this, 0, inst);
			case 1: return new Model_ModelAction_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// strings+=STRING?
protected class Model_StringsAssignment_1_1 extends AssignmentToken  {
	
	public Model_StringsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getStringsAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_LeftCurlyBracketKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("strings",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("strings");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getStringsSTRINGTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class Model_RightCurlyBracketKeyword_1_2 extends KeywordToken  {
	
	public Model_RightCurlyBracketKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getRightCurlyBracketKeyword_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_StringsAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("[" (keys+=STRING values+=STRING)* "]")*
protected class Model_Group_2 extends GroupToken {
	
	public Model_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_RightSquareBracketKeyword_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class Model_LeftSquareBracketKeyword_2_0 extends KeywordToken  {
	
	public Model_LeftSquareBracketKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getLeftSquareBracketKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Group_1(parent, this, 0, inst);
			case 1: return new Model_ModelAction_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// (keys+=STRING values+=STRING)*
protected class Model_Group_2_1 extends GroupToken {
	
	public Model_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_ValuesAssignment_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// keys+=STRING
protected class Model_KeysAssignment_2_1_0 extends AssignmentToken  {
	
	public Model_KeysAssignment_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getKeysAssignment_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Group_2_1(parent, this, 0, inst);
			case 1: return new Model_LeftSquareBracketKeyword_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("keys",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("keys");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getKeysSTRINGTerminalRuleCall_2_1_0_0();
			return obj;
		}
		return null;
	}

}

// values+=STRING
protected class Model_ValuesAssignment_2_1_1 extends AssignmentToken  {
	
	public Model_ValuesAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getValuesAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_KeysAssignment_2_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("values",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("values");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getValuesSTRINGTerminalRuleCall_2_1_1_0();
			return obj;
		}
		return null;
	}

}


// "]"
protected class Model_RightSquareBracketKeyword_2_2 extends KeywordToken  {
	
	public Model_RightSquareBracketKeyword_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getRightSquareBracketKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Group_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("subModel" subModel=SubModel)?
protected class Model_Group_3 extends GroupToken {
	
	public Model_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_SubModelAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "subModel"
protected class Model_SubModelKeyword_3_0 extends KeywordToken  {
	
	public Model_SubModelKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getSubModelKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Group_2(parent, this, 0, inst);
			case 1: return new Model_Group_1(parent, this, 1, inst);
			case 2: return new Model_ModelAction_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// subModel=SubModel
protected class Model_SubModelAssignment_3_1 extends AssignmentToken  {
	
	public Model_SubModelAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getSubModelAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubModel_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("subModel",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("subModel");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSubModelRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getSubModelSubModelParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_SubModelKeyword_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Model ****************/


/************ begin Rule SubModel ****************
 *
 * SubModel:
 *   {SubModel} ("1" "2" strings+=STRING?)*;
 *
 **/

// {SubModel} ("1" "2" strings+=STRING?)*
protected class SubModel_Group extends GroupToken {
	
	public SubModel_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSubModelAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubModel_Group_1(parent, this, 0, inst);
			case 1: return new SubModel_SubModelAction_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSubModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {SubModel}
protected class SubModel_SubModelAction_0 extends ActionToken  {

	public SubModel_SubModelAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSubModelAccess().getSubModelAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getSubModelAccess().getSubModelAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// ("1" "2" strings+=STRING?)*
protected class SubModel_Group_1 extends GroupToken {
	
	public SubModel_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSubModelAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubModel_StringsAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "1"
protected class SubModel_DigitOneKeyword_1_0 extends KeywordToken  {
	
	public SubModel_DigitOneKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSubModelAccess().getDigitOneKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubModel_Group_1(parent, this, 0, inst);
			case 1: return new SubModel_SubModelAction_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "2"
protected class SubModel_DigitTwoKeyword_1_1 extends KeywordToken  {
	
	public SubModel_DigitTwoKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSubModelAccess().getDigitTwoKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubModel_DigitOneKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// strings+=STRING?
protected class SubModel_StringsAssignment_1_2 extends AssignmentToken  {
	
	public SubModel_StringsAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSubModelAccess().getStringsAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubModel_DigitTwoKeyword_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("strings",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("strings");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getSubModelAccess().getStringsSTRINGTerminalRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule SubModel ****************/

}
