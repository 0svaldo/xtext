/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.reconstr.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.parsetree.reconstr.services.ComplexReconstrTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class ComplexReconstrTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private ComplexReconstrTestLanguageGrammarAccess grammarAccess;
	
	@Override	
	public ComplexReconstrTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_Alternatives(this, this, 0, inst);
			case 1: return new Op_Group(this, this, 1, inst);
			case 2: return new Term_Alternatives(this, this, 2, inst);
			case 3: return new Atom_NameAssignment(this, this, 3, inst);
			case 4: return new Parens_Group(this, this, 4, inst);
			case 5: return new TrickyA_Group(this, this, 5, inst);
			case 6: return new TrickyA1_NameAssignment(this, this, 6, inst);
			case 7: return new TrickyB_Group(this, this, 7, inst);
			case 8: return new TrickyC_Group(this, this, 8, inst);
			case 9: return new TrickyD_Group(this, this, 9, inst);
			case 10: return new TrickyE_Group(this, this, 10, inst);
			case 11: return new TrickyF_Group(this, this, 11, inst);
			case 12: return new TrickyG_Group(this, this, 12, inst);
			case 13: return new TrickyG1_Group(this, this, 13, inst);
			case 14: return new TrickyG2_Alternatives(this, this, 14, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Root ****************
 *
 * Root:
 *   Op|TrickyG;
 *
 **/

// Op|TrickyG
protected class Root_Alternatives extends AlternativesToken {

	public Root_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRootAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_OpParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Root_TrickyGParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getOpAccess().getMinusMinusOperandsAction_1_1_0().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getTrickyGRule().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getOpAccess().getAddAddOperandsAction_1_0_0().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getAtomRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// Op
protected class Root_OpParserRuleCall_0 extends RuleCallToken {
	
	public Root_OpParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRootAccess().getOpParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Op_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getOpAccess().getMinusMinusOperandsAction_1_1_0().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getOpAccess().getAddAddOperandsAction_1_0_0().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getAtomRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Op_Group.class, current)) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// TrickyG
protected class Root_TrickyGParserRuleCall_1 extends RuleCallToken {
	
	public Root_TrickyGParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRootAccess().getTrickyGParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyG_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getTrickyGRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(TrickyG_Group.class, current)) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Root ****************/


/************ begin Rule Op ****************
 *
 * Op returns Expression:
 *   Term ({Add.addOperands+=current} "+" addOperands+=Term|{Minus.minusOperands+=
 *   current} "-" minusOperands+=Term)*;
 *
 **/

// Term ({Add.addOperands+=current} "+" addOperands+=Term|{Minus.minusOperands+=
// current} "-" minusOperands+=Term)*
protected class Op_Group extends GroupToken {
	
	public Op_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Op_Alternatives_1(parent, this, 0, inst);
			case 1: return new Op_TermParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getOpAccess().getMinusMinusOperandsAction_1_1_0().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getOpAccess().getAddAddOperandsAction_1_0_0().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getAtomRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// Term
protected class Op_TermParserRuleCall_0 extends RuleCallToken {
	
	public Op_TermParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOpAccess().getTermParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Term_Alternatives.class, current)) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({Add.addOperands+=current} "+" addOperands+=Term|{Minus.minusOperands+=current}
// "-" minusOperands+=Term)*
protected class Op_Alternatives_1 extends AlternativesToken {

	public Op_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getOpAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Op_Group_1_0(parent, this, 0, inst);
			case 1: return new Op_Group_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getOpAccess().getMinusMinusOperandsAction_1_1_0().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getOpAccess().getAddAddOperandsAction_1_0_0().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// {Add.addOperands+=current} "+" addOperands+=Term
protected class Op_Group_1_0 extends GroupToken {
	
	public Op_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpAccess().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Op_AddOperandsAssignment_1_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getOpAccess().getAddAddOperandsAction_1_0_0().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// {Add.addOperands+=current}
protected class Op_AddAddOperandsAction_1_0_0 extends ActionToken  {

	public Op_AddAddOperandsAction_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOpAccess().getAddAddOperandsAction_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Op_Alternatives_1(parent, this, 0, inst);
			case 1: return new Op_TermParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		Object val = current.getConsumable("addOperands", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("addOperands")) return null;
		return getDescr((EObject) val);
	}
}

// "+"
protected class Op_PlusSignKeyword_1_0_1 extends KeywordToken  {
	
	public Op_PlusSignKeyword_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOpAccess().getPlusSignKeyword_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Op_AddAddOperandsAction_1_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// addOperands+=Term
protected class Op_AddOperandsAssignment_1_0_2 extends AssignmentToken  {
	
	public Op_AddOperandsAssignment_1_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOpAccess().getAddOperandsAssignment_1_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("addOperands",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("addOperands");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOpAccess().getAddOperandsTermParserRuleCall_1_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Op_PlusSignKeyword_1_0_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {Minus.minusOperands+=current} "-" minusOperands+=Term
protected class Op_Group_1_1 extends GroupToken {
	
	public Op_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Op_MinusOperandsAssignment_1_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getOpAccess().getMinusMinusOperandsAction_1_1_0().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// {Minus.minusOperands+=current}
protected class Op_MinusMinusOperandsAction_1_1_0 extends ActionToken  {

	public Op_MinusMinusOperandsAction_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOpAccess().getMinusMinusOperandsAction_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Op_Alternatives_1(parent, this, 0, inst);
			case 1: return new Op_TermParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		Object val = current.getConsumable("minusOperands", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("minusOperands")) return null;
		return getDescr((EObject) val);
	}
}

// "-"
protected class Op_HyphenMinusKeyword_1_1_1 extends KeywordToken  {
	
	public Op_HyphenMinusKeyword_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOpAccess().getHyphenMinusKeyword_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Op_MinusMinusOperandsAction_1_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// minusOperands+=Term
protected class Op_MinusOperandsAssignment_1_1_2 extends AssignmentToken  {
	
	public Op_MinusOperandsAssignment_1_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOpAccess().getMinusOperandsAssignment_1_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("minusOperands",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("minusOperands");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOpAccess().getMinusOperandsTermParserRuleCall_1_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Op_HyphenMinusKeyword_1_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule Op ****************/


/************ begin Rule Term ****************
 *
 * Term returns Expression:
 *   Atom|Parens;
 *
 **/

// Atom|Parens
protected class Term_Alternatives extends AlternativesToken {

	public Term_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTermAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_AtomParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Term_ParensParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getOpAccess().getMinusMinusOperandsAction_1_1_0().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getOpAccess().getAddAddOperandsAction_1_0_0().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getAtomRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// Atom
protected class Term_AtomParserRuleCall_0 extends RuleCallToken {
	
	public Term_AtomParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getAtomParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Atom_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getAtomRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Atom_NameAssignment.class, current)) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Parens
protected class Term_ParensParserRuleCall_1 extends RuleCallToken {
	
	public Term_ParensParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getParensParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parens_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Parens_Group.class, current)) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Term ****************/


/************ begin Rule Atom ****************
 *
 * Atom:
 *   name=ID;
 *
 **/

// name=ID
protected class Atom_NameAssignment extends AssignmentToken  {
	
	public Atom_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAtomAccess().getNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getAtomRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getAtomAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule Atom ****************/


/************ begin Rule Parens ****************
 *
 * Parens returns Expression:
 *   "(" Op ")" em="!"?;
 *
 **/

// "(" Op ")" em="!"?
protected class Parens_Group extends GroupToken {
	
	public Parens_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParensAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parens_EmAssignment_3(parent, this, 0, inst);
			case 1: return new Parens_RightParenthesisKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getOpAccess().getMinusMinusOperandsAction_1_1_0().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getOpAccess().getAddAddOperandsAction_1_0_0().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getAtomRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// "("
protected class Parens_LeftParenthesisKeyword_0 extends KeywordToken  {
	
	public Parens_LeftParenthesisKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParensAccess().getLeftParenthesisKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

}

// Op
protected class Parens_OpParserRuleCall_1 extends RuleCallToken {
	
	public Parens_OpParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getParensAccess().getOpParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Op_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Op_Group.class, current)) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parens_LeftParenthesisKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ")"
protected class Parens_RightParenthesisKeyword_2 extends KeywordToken  {
	
	public Parens_RightParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParensAccess().getRightParenthesisKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parens_OpParserRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// em="!"?
protected class Parens_EmAssignment_3 extends AssignmentToken  {
	
	public Parens_EmAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParensAccess().getEmAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parens_RightParenthesisKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("em",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("em");
		if("!".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getParensAccess().getEmExclamationMarkKeyword_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Parens ****************/


/************ begin Rule TrickyA ****************
 *
 * / * TODO not working yet
 * StrangeStuff :
 * 	'->' (foo=ID)? ({OtherStuff.strangeStuff=current} ',' bla=ID)? ({OtherStuff2.stuff=current} ',' bla2=ID)?;
 * * /
 * 
 * TrickyA returns TypeA1:
 *   "TA" TrickyA1 name+=ID* ({TypeB.x=current} "x"|{TypeC.x=current} "y")? name+=STRING;
 *
 **/

// "TA" TrickyA1 name+=ID* ({TypeB.x=current} "x"|{TypeC.x=current} "y")? name+=STRING
protected class TrickyA_Group extends GroupToken {
	
	public TrickyA_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyA_NameAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getTrickyA1Rule().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getTrickyAAccess().getTypeCXAction_3_1_0().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getTrickyAAccess().getTypeBXAction_3_0_0().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// "TA"
protected class TrickyA_TAKeyword_0 extends KeywordToken  {
	
	public TrickyA_TAKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getTAKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

}

// TrickyA1
protected class TrickyA_TrickyA1ParserRuleCall_1 extends RuleCallToken {
	
	public TrickyA_TrickyA1ParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getTrickyA1ParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyA1_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getTrickyA1Rule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(TrickyA1_NameAssignment.class, current)) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyA_TAKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// name+=ID*
protected class TrickyA_NameAssignment_2 extends AssignmentToken  {
	
	public TrickyA_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyA_NameAssignment_2(parent, this, 0, inst);
			case 1: return new TrickyA_TrickyA1ParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getTrickyA1Rule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyAAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ({TypeB.x=current} "x"|{TypeC.x=current} "y")?
protected class TrickyA_Alternatives_3 extends AlternativesToken {

	public TrickyA_Alternatives_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getAlternatives_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyA_Group_3_0(parent, this, 0, inst);
			case 1: return new TrickyA_Group_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getTrickyAAccess().getTypeCXAction_3_1_0().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getTrickyAAccess().getTypeBXAction_3_0_0().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// {TypeB.x=current} "x"
protected class TrickyA_Group_3_0 extends GroupToken {
	
	public TrickyA_Group_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getGroup_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyA_XKeyword_3_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getTrickyAAccess().getTypeBXAction_3_0_0().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// {TypeB.x=current}
protected class TrickyA_TypeBXAction_3_0_0 extends ActionToken  {

	public TrickyA_TypeBXAction_3_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getTypeBXAction_3_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyA_NameAssignment_2(parent, this, 0, inst);
			case 1: return new TrickyA_TrickyA1ParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		Object val = current.getConsumable("x", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("x")) return null;
		return getDescr((EObject) val);
	}
}

// "x"
protected class TrickyA_XKeyword_3_0_1 extends KeywordToken  {
	
	public TrickyA_XKeyword_3_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getXKeyword_3_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyA_TypeBXAction_3_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}

}


// {TypeC.x=current} "y"
protected class TrickyA_Group_3_1 extends GroupToken {
	
	public TrickyA_Group_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getGroup_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyA_YKeyword_3_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getTrickyAAccess().getTypeCXAction_3_1_0().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// {TypeC.x=current}
protected class TrickyA_TypeCXAction_3_1_0 extends ActionToken  {

	public TrickyA_TypeCXAction_3_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getTypeCXAction_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyA_NameAssignment_2(parent, this, 0, inst);
			case 1: return new TrickyA_TrickyA1ParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		Object val = current.getConsumable("x", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("x")) return null;
		return getDescr((EObject) val);
	}
}

// "y"
protected class TrickyA_YKeyword_3_1_1 extends KeywordToken  {
	
	public TrickyA_YKeyword_3_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getYKeyword_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyA_TypeCXAction_3_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}

}



// name+=STRING
protected class TrickyA_NameAssignment_4 extends AssignmentToken  {
	
	public TrickyA_NameAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyAAccess().getNameAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyA_Alternatives_3(parent, this, 0, inst);
			case 1: return new TrickyA_NameAssignment_2(parent, this, 1, inst);
			case 2: return new TrickyA_TrickyA1ParserRuleCall_1(parent, this, 2, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyAAccess().getNameSTRINGTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule TrickyA ****************/


/************ begin Rule TrickyA1 ****************
 *
 * TrickyA1 returns TypeD:
 *   name+=ID;
 *
 **/

// name+=ID
protected class TrickyA1_NameAssignment extends AssignmentToken  {
	
	public TrickyA1_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyA1Access().getNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getTrickyA1Rule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyA1Access().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule TrickyA1 ****************/


/************ begin Rule TrickyB ****************
 *
 * TrickyB:
 *   "TB" (name=ID type+=INT)? type+=INT*;
 *
 **/

// "TB" (name=ID type+=INT)? type+=INT*
protected class TrickyB_Group extends GroupToken {
	
	public TrickyB_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyBAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyB_TypeAssignment_2(parent, this, 0, inst);
			case 1: return new TrickyB_Group_1(parent, this, 1, inst);
			case 2: return new TrickyB_TBKeyword_0(parent, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getTrickyBRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// "TB"
protected class TrickyB_TBKeyword_0 extends KeywordToken  {
	
	public TrickyB_TBKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyBAccess().getTBKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

}

// (name=ID type+=INT)?
protected class TrickyB_Group_1 extends GroupToken {
	
	public TrickyB_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyBAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyB_TypeAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class TrickyB_NameAssignment_1_0 extends AssignmentToken  {
	
	public TrickyB_NameAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyBAccess().getNameAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyB_TBKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyBAccess().getNameIDTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// type+=INT
protected class TrickyB_TypeAssignment_1_1 extends AssignmentToken  {
	
	public TrickyB_TypeAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyBAccess().getTypeAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyB_NameAssignment_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyBAccess().getTypeINTTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// type+=INT*
protected class TrickyB_TypeAssignment_2 extends AssignmentToken  {
	
	public TrickyB_TypeAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyBAccess().getTypeAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyB_TypeAssignment_2(parent, this, 0, inst);
			case 1: return new TrickyB_Group_1(parent, this, 1, inst);
			case 2: return new TrickyB_TBKeyword_0(parent, this, 2, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyBAccess().getTypeINTTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule TrickyB ****************/


/************ begin Rule TrickyC ****************
 *
 * TrickyC:
 *   "TC" name=ID ({C1.x=current} "x")? ({C2.y=current} "y")? ({C3.z=current} "z")?;
 *
 **/

// "TC" name=ID ({C1.x=current} "x")? ({C2.y=current} "y")? ({C3.z=current} "z")?
protected class TrickyC_Group extends GroupToken {
	
	public TrickyC_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyC_Group_4(parent, this, 0, inst);
			case 1: return new TrickyC_Group_3(parent, this, 1, inst);
			case 2: return new TrickyC_Group_2(parent, this, 2, inst);
			case 3: return new TrickyC_NameAssignment_1(parent, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getTrickyCRule().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getTrickyCAccess().getC3ZAction_4_0().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getTrickyCAccess().getC1XAction_2_0().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getTrickyCAccess().getC2YAction_3_0().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// "TC"
protected class TrickyC_TCKeyword_0 extends KeywordToken  {
	
	public TrickyC_TCKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getTCKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

}

// name=ID
protected class TrickyC_NameAssignment_1 extends AssignmentToken  {
	
	public TrickyC_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyC_TCKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getTrickyCRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyCAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ({C1.x=current} "x")?
protected class TrickyC_Group_2 extends GroupToken {
	
	public TrickyC_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyC_XKeyword_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getTrickyCAccess().getC1XAction_2_0().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// {C1.x=current}
protected class TrickyC_C1XAction_2_0 extends ActionToken  {

	public TrickyC_C1XAction_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getC1XAction_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyC_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		Object val = current.getConsumable("x", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("x")) return null;
		return getDescr((EObject) val);
	}
}

// "x"
protected class TrickyC_XKeyword_2_1 extends KeywordToken  {
	
	public TrickyC_XKeyword_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getXKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyC_C1XAction_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}

}


// ({C2.y=current} "y")?
protected class TrickyC_Group_3 extends GroupToken {
	
	public TrickyC_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyC_YKeyword_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getTrickyCAccess().getC2YAction_3_0().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// {C2.y=current}
protected class TrickyC_C2YAction_3_0 extends ActionToken  {

	public TrickyC_C2YAction_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getC2YAction_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyC_Group_2(parent, this, 0, inst);
			case 1: return new TrickyC_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		Object val = current.getConsumable("y", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("y")) return null;
		return getDescr((EObject) val);
	}
}

// "y"
protected class TrickyC_YKeyword_3_1 extends KeywordToken  {
	
	public TrickyC_YKeyword_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getYKeyword_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyC_C2YAction_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}

}


// ({C3.z=current} "z")?
protected class TrickyC_Group_4 extends GroupToken {
	
	public TrickyC_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyC_ZKeyword_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getTrickyCAccess().getC3ZAction_4_0().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// {C3.z=current}
protected class TrickyC_C3ZAction_4_0 extends ActionToken  {

	public TrickyC_C3ZAction_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getC3ZAction_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyC_Group_3(parent, this, 0, inst);
			case 1: return new TrickyC_Group_2(parent, this, 1, inst);
			case 2: return new TrickyC_NameAssignment_1(parent, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		Object val = current.getConsumable("z", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("z")) return null;
		return getDescr((EObject) val);
	}
}

// "z"
protected class TrickyC_ZKeyword_4_1 extends KeywordToken  {
	
	public TrickyC_ZKeyword_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyCAccess().getZKeyword_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyC_C3ZAction_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule TrickyC ****************/


/************ begin Rule TrickyD ****************
 *
 * TrickyD:
 *   "TD" (name+=INT foo=STRING type+=ID)? (name+=INT type+=ID)? type+=ID*;
 *
 **/

// "TD" (name+=INT foo=STRING type+=ID)? (name+=INT type+=ID)? type+=ID*
protected class TrickyD_Group extends GroupToken {
	
	public TrickyD_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyDAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyD_TypeAssignment_3(parent, this, 0, inst);
			case 1: return new TrickyD_Group_2(parent, this, 1, inst);
			case 2: return new TrickyD_Group_1(parent, this, 2, inst);
			case 3: return new TrickyD_TDKeyword_0(parent, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getTrickyDRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// "TD"
protected class TrickyD_TDKeyword_0 extends KeywordToken  {
	
	public TrickyD_TDKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyDAccess().getTDKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

}

// (name+=INT foo=STRING type+=ID)?
protected class TrickyD_Group_1 extends GroupToken {
	
	public TrickyD_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyDAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyD_TypeAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// name+=INT
protected class TrickyD_NameAssignment_1_0 extends AssignmentToken  {
	
	public TrickyD_NameAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyDAccess().getNameAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyD_TDKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyDAccess().getNameINTTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// foo=STRING
protected class TrickyD_FooAssignment_1_1 extends AssignmentToken  {
	
	public TrickyD_FooAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyDAccess().getFooAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyD_NameAssignment_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("foo",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("foo");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyDAccess().getFooSTRINGTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// type+=ID
protected class TrickyD_TypeAssignment_1_2 extends AssignmentToken  {
	
	public TrickyD_TypeAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyDAccess().getTypeAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyD_FooAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyDAccess().getTypeIDTerminalRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}


// (name+=INT type+=ID)?
protected class TrickyD_Group_2 extends GroupToken {
	
	public TrickyD_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyDAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyD_TypeAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// name+=INT
protected class TrickyD_NameAssignment_2_0 extends AssignmentToken  {
	
	public TrickyD_NameAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyDAccess().getNameAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyD_Group_1(parent, this, 0, inst);
			case 1: return new TrickyD_TDKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyDAccess().getNameINTTerminalRuleCall_2_0_0();
			return obj;
		}
		return null;
	}

}

// type+=ID
protected class TrickyD_TypeAssignment_2_1 extends AssignmentToken  {
	
	public TrickyD_TypeAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyDAccess().getTypeAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyD_NameAssignment_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyDAccess().getTypeIDTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// type+=ID*
protected class TrickyD_TypeAssignment_3 extends AssignmentToken  {
	
	public TrickyD_TypeAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyDAccess().getTypeAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyD_TypeAssignment_3(parent, this, 0, inst);
			case 1: return new TrickyD_Group_2(parent, this, 1, inst);
			case 2: return new TrickyD_Group_1(parent, this, 2, inst);
			case 3: return new TrickyD_TDKeyword_0(parent, this, 3, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyDAccess().getTypeIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule TrickyD ****************/


/************ begin Rule TrickyE ****************
 *
 * // 34 "abc" XX 123 "de" YY x 34 DD 45 CC
 * 
 * 
 * TrickyE:
 *   "TE" (name+=INT foo+=STRING type+=ID)* "x" (name+=INT type+=ID)*;
 *
 **/

// "TE" (name+=INT foo+=STRING type+=ID)* "x" (name+=INT type+=ID)*
protected class TrickyE_Group extends GroupToken {
	
	public TrickyE_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyEAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyE_Group_3(parent, this, 0, inst);
			case 1: return new TrickyE_XKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getTrickyERule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// "TE"
protected class TrickyE_TEKeyword_0 extends KeywordToken  {
	
	public TrickyE_TEKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyEAccess().getTEKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

}

// (name+=INT foo+=STRING type+=ID)*
protected class TrickyE_Group_1 extends GroupToken {
	
	public TrickyE_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyEAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyE_TypeAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// name+=INT
protected class TrickyE_NameAssignment_1_0 extends AssignmentToken  {
	
	public TrickyE_NameAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyEAccess().getNameAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyE_Group_1(parent, this, 0, inst);
			case 1: return new TrickyE_TEKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyEAccess().getNameINTTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// foo+=STRING
protected class TrickyE_FooAssignment_1_1 extends AssignmentToken  {
	
	public TrickyE_FooAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyEAccess().getFooAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyE_NameAssignment_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("foo",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("foo");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyEAccess().getFooSTRINGTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// type+=ID
protected class TrickyE_TypeAssignment_1_2 extends AssignmentToken  {
	
	public TrickyE_TypeAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyEAccess().getTypeAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyE_FooAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyEAccess().getTypeIDTerminalRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}


// "x"
protected class TrickyE_XKeyword_2 extends KeywordToken  {
	
	public TrickyE_XKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyEAccess().getXKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyE_Group_1(parent, this, 0, inst);
			case 1: return new TrickyE_TEKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// (name+=INT type+=ID)*
protected class TrickyE_Group_3 extends GroupToken {
	
	public TrickyE_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyEAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyE_TypeAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// name+=INT
protected class TrickyE_NameAssignment_3_0 extends AssignmentToken  {
	
	public TrickyE_NameAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyEAccess().getNameAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyE_Group_3(parent, this, 0, inst);
			case 1: return new TrickyE_XKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyEAccess().getNameINTTerminalRuleCall_3_0_0();
			return obj;
		}
		return null;
	}

}

// type+=ID
protected class TrickyE_TypeAssignment_3_1 extends AssignmentToken  {
	
	public TrickyE_TypeAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyEAccess().getTypeAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyE_NameAssignment_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyEAccess().getTypeIDTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule TrickyE ****************/


/************ begin Rule TrickyF ****************
 *
 * // 
 * 
 * 
 * TrickyF:
 *   "TF" (name+=ID type+=INT)* (name+=ID|type+=INT);
 *
 **/

// "TF" (name+=ID type+=INT)* (name+=ID|type+=INT)
protected class TrickyF_Group extends GroupToken {
	
	public TrickyF_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyFAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyF_Alternatives_2(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getTrickyFRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// "TF"
protected class TrickyF_TFKeyword_0 extends KeywordToken  {
	
	public TrickyF_TFKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyFAccess().getTFKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

}

// (name+=ID type+=INT)*
protected class TrickyF_Group_1 extends GroupToken {
	
	public TrickyF_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyFAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyF_TypeAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// name+=ID
protected class TrickyF_NameAssignment_1_0 extends AssignmentToken  {
	
	public TrickyF_NameAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyFAccess().getNameAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyF_Group_1(parent, this, 0, inst);
			case 1: return new TrickyF_TFKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyFAccess().getNameIDTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// type+=INT
protected class TrickyF_TypeAssignment_1_1 extends AssignmentToken  {
	
	public TrickyF_TypeAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyFAccess().getTypeAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyF_NameAssignment_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyFAccess().getTypeINTTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// name+=ID|type+=INT
protected class TrickyF_Alternatives_2 extends AlternativesToken {

	public TrickyF_Alternatives_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTrickyFAccess().getAlternatives_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyF_NameAssignment_2_0(parent, this, 0, inst);
			case 1: return new TrickyF_TypeAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// name+=ID
protected class TrickyF_NameAssignment_2_0 extends AssignmentToken  {
	
	public TrickyF_NameAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyFAccess().getNameAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyF_Group_1(parent, this, 0, inst);
			case 1: return new TrickyF_TFKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyFAccess().getNameIDTerminalRuleCall_2_0_0();
			return obj;
		}
		return null;
	}

}

// type+=INT
protected class TrickyF_TypeAssignment_2_1 extends AssignmentToken  {
	
	public TrickyF_TypeAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyFAccess().getTypeAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyF_Group_1(parent, this, 0, inst);
			case 1: return new TrickyF_TFKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyFAccess().getTypeINTTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule TrickyF ****************/


/************ begin Rule TrickyG ****************
 *
 * TrickyG:
 *   "TG" tree=TrickyG1;
 *
 **/

// "TG" tree=TrickyG1
protected class TrickyG_Group extends GroupToken {
	
	public TrickyG_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyGAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyG_TreeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getTrickyGRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// "TG"
protected class TrickyG_TGKeyword_0 extends KeywordToken  {
	
	public TrickyG_TGKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyGAccess().getTGKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

}

// tree=TrickyG1
protected class TrickyG_TreeAssignment_1 extends AssignmentToken  {
	
	public TrickyG_TreeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyGAccess().getTreeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyG1_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("tree",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("tree");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTrickyG1Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTrickyGAccess().getTreeTrickyG1ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TrickyG_TGKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule TrickyG ****************/


/************ begin Rule TrickyG1 ****************
 *
 * TrickyG1:
 *   "[" (vals+=TrickyG2 ("," vals+=TrickyG2)*)? "]";
 *
 **/

// "[" (vals+=TrickyG2 ("," vals+=TrickyG2)*)? "]"
protected class TrickyG1_Group extends GroupToken {
	
	public TrickyG1_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyG1Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyG1_RightSquareBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getTrickyG1Rule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// "["
protected class TrickyG1_LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public TrickyG1_LeftSquareBracketKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyG1Access().getLeftSquareBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

}

// (vals+=TrickyG2 ("," vals+=TrickyG2)*)?
protected class TrickyG1_Group_1 extends GroupToken {
	
	public TrickyG1_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyG1Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyG1_Group_1_1(parent, this, 0, inst);
			case 1: return new TrickyG1_ValsAssignment_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// vals+=TrickyG2
protected class TrickyG1_ValsAssignment_1_0 extends AssignmentToken  {
	
	public TrickyG1_ValsAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyG1Access().getValsAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyG2_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("vals",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("vals");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTrickyG2Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTrickyG1Access().getValsTrickyG2ParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TrickyG1_LeftSquareBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," vals+=TrickyG2)*
protected class TrickyG1_Group_1_1 extends GroupToken {
	
	public TrickyG1_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTrickyG1Access().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyG1_ValsAssignment_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class TrickyG1_CommaKeyword_1_1_0 extends KeywordToken  {
	
	public TrickyG1_CommaKeyword_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyG1Access().getCommaKeyword_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyG1_Group_1_1(parent, this, 0, inst);
			case 1: return new TrickyG1_ValsAssignment_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}

}

// vals+=TrickyG2
protected class TrickyG1_ValsAssignment_1_1_1 extends AssignmentToken  {
	
	public TrickyG1_ValsAssignment_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyG1Access().getValsAssignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyG2_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("vals",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("vals");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTrickyG2Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTrickyG1Access().getValsTrickyG2ParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TrickyG1_CommaKeyword_1_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "]"
protected class TrickyG1_RightSquareBracketKeyword_2 extends KeywordToken  {
	
	public TrickyG1_RightSquareBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTrickyG1Access().getRightSquareBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyG1_Group_1(parent, this, 0, inst);
			case 1: return new TrickyG1_LeftSquareBracketKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule TrickyG1 ****************/


/************ begin Rule TrickyG2 ****************
 *
 * TrickyG2:
 *   TrickyG1|val=INT;
 *
 **/

// TrickyG1|val=INT
protected class TrickyG2_Alternatives extends AlternativesToken {

	public TrickyG2_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTrickyG2Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyG2_TrickyG1ParserRuleCall_0(parent, this, 0, inst);
			case 1: return new TrickyG2_ValAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getTrickyG2Rule().getType().getClassifier() || 
		   current.getDelegate().eClass() == grammarAccess.getTrickyG1Rule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// TrickyG1
protected class TrickyG2_TrickyG1ParserRuleCall_0 extends RuleCallToken {
	
	public TrickyG2_TrickyG1ParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTrickyG2Access().getTrickyG1ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TrickyG1_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getTrickyG1Rule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(TrickyG1_Group.class, current)) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// val=INT
protected class TrickyG2_ValAssignment_1 extends AssignmentToken  {
	
	public TrickyG2_ValAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrickyG2Access().getValAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getTrickyG2Rule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getTrickyG2Access().getValINTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule TrickyG2 ****************/

}
