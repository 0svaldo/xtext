/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.reconstr.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;

import org.eclipse.xtext.parsetree.reconstr.services.HiddenTokensMergerTestLanguageGrammarAccess.ModelElements;

public final class HiddenTokensMergerTestLanguageModelConsumer extends NonTerminalConsumer {

	private ModelElements rule;	

	private INonTerminalConsumer appendToFileEndConsumer;

	private INonTerminalConsumer commentableConsumer;

	private INonTerminalConsumer datatypeBug286557Consumer;

	private INonTerminalConsumer enumBugConsumer;

	private INonTerminalConsumer refListConsumer;

	private INonTerminalConsumer valueListConsumer;

	private IElementConsumer alternatives$1$Consumer;

	private IElementConsumer ruleCall$2$Consumer;

	private IElementConsumer ruleCall$3$Consumer;

	private IElementConsumer ruleCall$4$Consumer;

	private IElementConsumer ruleCall$5$Consumer;

	private IElementConsumer ruleCall$6$Consumer;

	private IElementConsumer ruleCall$7$Consumer;

	protected class Alternatives$1$Consumer extends AlternativesConsumer {
		
		protected Alternatives$1$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(ruleCall$2$Consumer);
			acceptor.accept(ruleCall$3$Consumer);
			acceptor.accept(ruleCall$4$Consumer);
			acceptor.accept(ruleCall$5$Consumer);
			acceptor.accept(ruleCall$6$Consumer);
			acceptor.accept(ruleCall$7$Consumer);
		}
	}

	protected class RuleCall$2$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$2$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(datatypeBug286557Consumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$3$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$3$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(enumBugConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$4$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$4$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(commentableConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$5$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$5$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(valueListConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$6$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$6$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(refListConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$7$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$7$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(appendToFileEndConsumer, null, false, false, false, getElement(), optional);
		}
	}

	public HiddenTokensMergerTestLanguageModelConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
	}
	
	@Override
	protected int doConsume() throws Exception {
		return alternatives$1$Consumer.consume();
	}

	public ModelElements getRule() {
		return rule;
	}
	
	public void setRule(ModelElements rule) {
		this.rule = rule;
		
		alternatives$1$Consumer = new Alternatives$1$Consumer(rule.getAlternatives());
		ruleCall$2$Consumer = new RuleCall$2$Consumer(rule.getDatatypeBug286557ParserRuleCall_0());
		ruleCall$3$Consumer = new RuleCall$3$Consumer(rule.getEnumBugParserRuleCall_1());
		ruleCall$4$Consumer = new RuleCall$4$Consumer(rule.getCommentableParserRuleCall_2());
		ruleCall$5$Consumer = new RuleCall$5$Consumer(rule.getValueListParserRuleCall_3());
		ruleCall$6$Consumer = new RuleCall$6$Consumer(rule.getRefListParserRuleCall_4());
		ruleCall$7$Consumer = new RuleCall$7$Consumer(rule.getAppendToFileEndParserRuleCall_5());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setAppendToFileEndConsumer(INonTerminalConsumer appendToFileEndConsumer) {
		this.appendToFileEndConsumer = appendToFileEndConsumer;
	}
	
	public void setCommentableConsumer(INonTerminalConsumer commentableConsumer) {
		this.commentableConsumer = commentableConsumer;
	}
	
	public void setDatatypeBug286557Consumer(INonTerminalConsumer datatypeBug286557Consumer) {
		this.datatypeBug286557Consumer = datatypeBug286557Consumer;
	}
	
	public void setEnumBugConsumer(INonTerminalConsumer enumBugConsumer) {
		this.enumBugConsumer = enumBugConsumer;
	}
	
	public void setRefListConsumer(INonTerminalConsumer refListConsumer) {
		this.refListConsumer = refListConsumer;
	}
	
	public void setValueListConsumer(INonTerminalConsumer valueListConsumer) {
		this.valueListConsumer = valueListConsumer;
	}
	
}
