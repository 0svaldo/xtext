/*
* generated by Xtext
*/

package org.eclipse.xtext.parsetree.formatter.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FormatterTestLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cTestLinewrapParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cTestIndentationParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//Root:
		//  "test" (TestLinewrap|TestIndentation);
		public ParserRule getRule() { return rule; }

		//"test" (TestLinewrap|TestIndentation)
		public Group getGroup() { return cGroup; }

		//"test"
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }

		//TestLinewrap|TestIndentation
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//TestLinewrap
		public RuleCall getTestLinewrapParserRuleCall_1_0() { return cTestLinewrapParserRuleCall_1_0; }

		//TestIndentation
		public RuleCall getTestIndentationParserRuleCall_1_1() { return cTestIndentationParserRuleCall_1_1; }
	}

	public class LineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cDeclParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cAssignParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cMethParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cFqnObjParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cFqnRefParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cEnumerationParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Line:
		//  (Decl|Assign|Meth|FqnObj|FqnRef|Enumeration) ";";
		public ParserRule getRule() { return rule; }

		//(Decl|Assign|Meth|FqnObj|FqnRef|Enumeration) ";"
		public Group getGroup() { return cGroup; }

		//Decl|Assign|Meth|FqnObj|FqnRef|Enumeration
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//Decl
		public RuleCall getDeclParserRuleCall_0_0() { return cDeclParserRuleCall_0_0; }

		//Assign
		public RuleCall getAssignParserRuleCall_0_1() { return cAssignParserRuleCall_0_1; }

		//Meth
		public RuleCall getMethParserRuleCall_0_2() { return cMethParserRuleCall_0_2; }

		//FqnObj
		public RuleCall getFqnObjParserRuleCall_0_3() { return cFqnObjParserRuleCall_0_3; }

		//FqnRef
		public RuleCall getFqnRefParserRuleCall_0_4() { return cFqnRefParserRuleCall_0_4; }

		//Enumeration
		public RuleCall getEnumerationParserRuleCall_0_5() { return cEnumerationParserRuleCall_0_5; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class DeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Decl:
		//  type+=ID name+=ID;
		public ParserRule getRule() { return rule; }

		//type+=ID name+=ID
		public Group getGroup() { return cGroup; }

		//type+=ID
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_0_0() { return cTypeIDTerminalRuleCall_0_0; }

		//name+=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class AssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarIDTerminalRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_1_0_0 = (Keyword)cOpAlternatives_1_0.eContents().get(0);
		private final Keyword cOpPlusSignEqualsSignKeyword_1_0_1 = (Keyword)cOpAlternatives_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cValAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cValINTTerminalRuleCall_3_0_0 = (RuleCall)cValAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cValAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_3_1_1_0 = (RuleCall)cValAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Assign:
		//  var=ID op=( "=" | "+=" ) "[" (val+=INT ("," val+=INT)*)? "]";
		public ParserRule getRule() { return rule; }

		//var=ID op=( "=" | "+=" ) "[" (val+=INT ("," val+=INT)*)? "]"
		public Group getGroup() { return cGroup; }

		//var=ID
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }

		//ID
		public RuleCall getVarIDTerminalRuleCall_0_0() { return cVarIDTerminalRuleCall_0_0; }

		//op=( "=" | "+=" )
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }

		//"="|"+="
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }

		//"="
		public Keyword getOpEqualsSignKeyword_1_0_0() { return cOpEqualsSignKeyword_1_0_0; }

		//"+="
		public Keyword getOpPlusSignEqualsSignKeyword_1_0_1() { return cOpPlusSignEqualsSignKeyword_1_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//(val+=INT ("," val+=INT)*)?
		public Group getGroup_3() { return cGroup_3; }

		//val+=INT
		public Assignment getValAssignment_3_0() { return cValAssignment_3_0; }

		//INT
		public RuleCall getValINTTerminalRuleCall_3_0_0() { return cValINTTerminalRuleCall_3_0_0; }

		//("," val+=INT)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//val+=INT
		public Assignment getValAssignment_3_1_1() { return cValAssignment_3_1_1; }

		//INT
		public RuleCall getValINTTerminalRuleCall_3_1_1_0() { return cValINTTerminalRuleCall_3_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class MethElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Meth");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVoidKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamParamParserRuleCall_3_0_0 = (RuleCall)cParamAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamParamParserRuleCall_3_1_1_0 = (RuleCall)cParamAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Meth:
		//  "void" name=ID "(" (param+=Param ("," param+=Param)*)? ")";
		public ParserRule getRule() { return rule; }

		//"void" name=ID "(" (param+=Param ("," param+=Param)*)? ")"
		public Group getGroup() { return cGroup; }

		//"void"
		public Keyword getVoidKeyword_0() { return cVoidKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(param+=Param ("," param+=Param)*)?
		public Group getGroup_3() { return cGroup_3; }

		//param+=Param
		public Assignment getParamAssignment_3_0() { return cParamAssignment_3_0; }

		//Param
		public RuleCall getParamParamParserRuleCall_3_0_0() { return cParamParamParserRuleCall_3_0_0; }

		//("," param+=Param)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//param+=Param
		public Assignment getParamAssignment_3_1_1() { return cParamAssignment_3_1_1; }

		//Param
		public RuleCall getParamParamParserRuleCall_3_1_1_0() { return cParamParamParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Param:
		//  name+=ID ":" type+=ID;
		public ParserRule getRule() { return rule; }

		//name+=ID ":" type+=ID
		public Group getGroup() { return cGroup; }

		//name+=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type+=ID
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_0() { return cTypeIDTerminalRuleCall_2_0; }
	}

	public class TestLinewrapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestLinewrap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinewrapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemsLineParserRuleCall_1_0 = (RuleCall)cItemsAssignment_1.eContents().get(0);
		
		//TestLinewrap:
		//  "linewrap" items+=Line*;
		public ParserRule getRule() { return rule; }

		//"linewrap" items+=Line*
		public Group getGroup() { return cGroup; }

		//"linewrap"
		public Keyword getLinewrapKeyword_0() { return cLinewrapKeyword_0; }

		//items+=Line*
		public Assignment getItemsAssignment_1() { return cItemsAssignment_1; }

		//Line
		public RuleCall getItemsLineParserRuleCall_1_0() { return cItemsLineParserRuleCall_1_0; }
	}

	public class TestIndentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestIndentation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIndentationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSubAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cSubTestIndentationParserRuleCall_2_0_0 = (RuleCall)cSubAssignment_2_0.eContents().get(0);
		private final Assignment cItemsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cItemsLineParserRuleCall_2_1_0 = (RuleCall)cItemsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSemiAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cSemiSemicolonKeyword_4_0 = (Keyword)cSemiAssignment_4.eContents().get(0);
		
		//TestIndentation:
		//  "indentation" "{" (sub+=TestIndentation|items+=Line)* "}" semi?=";"?;
		public ParserRule getRule() { return rule; }

		//"indentation" "{" (sub+=TestIndentation|items+=Line)* "}" semi?=";"?
		public Group getGroup() { return cGroup; }

		//"indentation"
		public Keyword getIndentationKeyword_0() { return cIndentationKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(sub+=TestIndentation|items+=Line)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//sub+=TestIndentation
		public Assignment getSubAssignment_2_0() { return cSubAssignment_2_0; }

		//TestIndentation
		public RuleCall getSubTestIndentationParserRuleCall_2_0_0() { return cSubTestIndentationParserRuleCall_2_0_0; }

		//items+=Line
		public Assignment getItemsAssignment_2_1() { return cItemsAssignment_2_1; }

		//Line
		public RuleCall getItemsLineParserRuleCall_2_1_0() { return cItemsLineParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//semi?=";"?
		public Assignment getSemiAssignment_4() { return cSemiAssignment_4; }

		//";"
		public Keyword getSemiSemicolonKeyword_4_0() { return cSemiSemicolonKeyword_4_0; }
	}

	public class FqnObjElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FqnObj");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFqnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//FqnObj:
		//  "fqn" name=FQN;
		public ParserRule getRule() { return rule; }

		//"fqn" name=FQN
		public Group getGroup() { return cGroup; }

		//"fqn"
		public Keyword getFqnKeyword_0() { return cFqnKeyword_0; }

		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN returns ecore::EString:
		//  ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class FqnRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FqnRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFqnrefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefFqnObjCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefFqnObjFQNParserRuleCall_1_0_1 = (RuleCall)cRefFqnObjCrossReference_1_0.eContents().get(1);
		
		//FqnRef:
		//  "fqnref" ref=[FqnObj|FQN];
		public ParserRule getRule() { return rule; }

		//"fqnref" ref=[FqnObj|FQN]
		public Group getGroup() { return cGroup; }

		//"fqnref"
		public Keyword getFqnrefKeyword_0() { return cFqnrefKeyword_0; }

		//ref=[FqnObj|FQN]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[FqnObj|FQN]
		public CrossReference getRefFqnObjCrossReference_1_0() { return cRefFqnObjCrossReference_1_0; }

		//FQN
		public RuleCall getRefFqnObjFQNParserRuleCall_1_0_1() { return cRefFqnObjFQNParserRuleCall_1_0_1; }
	}

	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValEnum1EnumRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValEnum1EnumRuleCall_2_1_0 = (RuleCall)cValAssignment_2_1.eContents().get(0);
		
		//Enumeration:
		//  "enum" val+=Enum1+ ("," val+=Enum1)*;
		public ParserRule getRule() { return rule; }

		//"enum" val+=Enum1+ ("," val+=Enum1)*
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//val+=Enum1+
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//Enum1
		public RuleCall getValEnum1EnumRuleCall_1_0() { return cValEnum1EnumRuleCall_1_0; }

		//("," val+=Enum1)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//val+=Enum1
		public Assignment getValAssignment_2_1() { return cValAssignment_2_1; }

		//Enum1
		public RuleCall getValEnum1EnumRuleCall_2_1_0() { return cValEnum1EnumRuleCall_2_1_0; }
	}
	
	
	public class Enum1Elements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Enum1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLit1EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLit1Lit1Keyword_0_0 = (Keyword)cLit1EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLit2EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLit2Lit2Keyword_1_0 = (Keyword)cLit2EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLit3EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLit3Lit3Keyword_2_0 = (Keyword)cLit3EnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Enum1:
		//  lit1 | lit2 | lit3;
		public EnumRule getRule() { return rule; }

		//lit1 | lit2 | lit3
		public Alternatives getAlternatives() { return cAlternatives; }

		//lit1
		public EnumLiteralDeclaration getLit1EnumLiteralDeclaration_0() { return cLit1EnumLiteralDeclaration_0; }

		//"lit1"
		public Keyword getLit1Lit1Keyword_0_0() { return cLit1Lit1Keyword_0_0; }

		//lit2
		public EnumLiteralDeclaration getLit2EnumLiteralDeclaration_1() { return cLit2EnumLiteralDeclaration_1; }

		//"lit2"
		public Keyword getLit2Lit2Keyword_1_0() { return cLit2Lit2Keyword_1_0; }

		//lit3
		public EnumLiteralDeclaration getLit3EnumLiteralDeclaration_2() { return cLit3EnumLiteralDeclaration_2; }

		//"lit3"
		public Keyword getLit3Lit3Keyword_2_0() { return cLit3Lit3Keyword_2_0; }
	}
	
	private RootElements pRoot;
	private LineElements pLine;
	private DeclElements pDecl;
	private AssignElements pAssign;
	private MethElements pMeth;
	private ParamElements pParam;
	private TestLinewrapElements pTestLinewrap;
	private TestIndentationElements pTestIndentation;
	private FqnObjElements pFqnObj;
	private FQNElements pFQN;
	private FqnRefElements pFqnRef;
	private EnumerationElements pEnumeration;
	private Enum1Elements unknownRuleEnum1;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public FormatterTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Root:
	//  "test" (TestLinewrap|TestIndentation);
	public RootElements getRootAccess() {
		return (pRoot != null) ? pRoot : (pRoot = new RootElements());
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//Line:
	//  (Decl|Assign|Meth|FqnObj|FqnRef|Enumeration) ";";
	public LineElements getLineAccess() {
		return (pLine != null) ? pLine : (pLine = new LineElements());
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}

	//Decl:
	//  type+=ID name+=ID;
	public DeclElements getDeclAccess() {
		return (pDecl != null) ? pDecl : (pDecl = new DeclElements());
	}
	
	public ParserRule getDeclRule() {
		return getDeclAccess().getRule();
	}

	//Assign:
	//  var=ID op=( "=" | "+=" ) "[" (val+=INT ("," val+=INT)*)? "]";
	public AssignElements getAssignAccess() {
		return (pAssign != null) ? pAssign : (pAssign = new AssignElements());
	}
	
	public ParserRule getAssignRule() {
		return getAssignAccess().getRule();
	}

	//Meth:
	//  "void" name=ID "(" (param+=Param ("," param+=Param)*)? ")";
	public MethElements getMethAccess() {
		return (pMeth != null) ? pMeth : (pMeth = new MethElements());
	}
	
	public ParserRule getMethRule() {
		return getMethAccess().getRule();
	}

	//Param:
	//  name+=ID ":" type+=ID;
	public ParamElements getParamAccess() {
		return (pParam != null) ? pParam : (pParam = new ParamElements());
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	//TestLinewrap:
	//  "linewrap" items+=Line*;
	public TestLinewrapElements getTestLinewrapAccess() {
		return (pTestLinewrap != null) ? pTestLinewrap : (pTestLinewrap = new TestLinewrapElements());
	}
	
	public ParserRule getTestLinewrapRule() {
		return getTestLinewrapAccess().getRule();
	}

	//TestIndentation:
	//  "indentation" "{" (sub+=TestIndentation|items+=Line)* "}" semi?=";"?;
	public TestIndentationElements getTestIndentationAccess() {
		return (pTestIndentation != null) ? pTestIndentation : (pTestIndentation = new TestIndentationElements());
	}
	
	public ParserRule getTestIndentationRule() {
		return getTestIndentationAccess().getRule();
	}

	//FqnObj:
	//  "fqn" name=FQN;
	public FqnObjElements getFqnObjAccess() {
		return (pFqnObj != null) ? pFqnObj : (pFqnObj = new FqnObjElements());
	}
	
	public ParserRule getFqnObjRule() {
		return getFqnObjAccess().getRule();
	}

	//FQN returns ecore::EString:
	//  ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//FqnRef:
	//  "fqnref" ref=[FqnObj|FQN];
	public FqnRefElements getFqnRefAccess() {
		return (pFqnRef != null) ? pFqnRef : (pFqnRef = new FqnRefElements());
	}
	
	public ParserRule getFqnRefRule() {
		return getFqnRefAccess().getRule();
	}

	//Enumeration:
	//  "enum" val+=Enum1+ ("," val+=Enum1)*;
	public EnumerationElements getEnumerationAccess() {
		return (pEnumeration != null) ? pEnumeration : (pEnumeration = new EnumerationElements());
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}

	//enum Enum1:
	//  lit1 | lit2 | lit3;
	public Enum1Elements getEnum1Access() {
		return (unknownRuleEnum1 != null) ? unknownRuleEnum1 : (unknownRuleEnum1 = new Enum1Elements());
	}
	
	public EnumRule getEnum1Rule() {
		return getEnum1Access().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""
	//  ))* "\"" | "\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !(
	//  "\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
