/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;

import org.eclipse.xtext.parsetree.formatter.services.ElementMatcherTestLanguageGrammarAccess.OptionalCallsSub1Elements;

@SuppressWarnings("all")
public final class ElementMatcherTestLanguageOptionalCallsSub1Consumer extends NonTerminalConsumer {

	private OptionalCallsSub1Elements rule;	

	private INonTerminalConsumer optionalCallsSub2Consumer;

	private INonTerminalConsumer optionalCallsSub3Consumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer action$2$Consumer;

	private IElementConsumer assignment$4$Consumer;

	private IElementConsumer ruleCall$5$Consumer;

	private IElementConsumer keyword$6$Consumer;

	private IElementConsumer assignment$7$Consumer;

	private IElementConsumer ruleCall$8$Consumer;

	private ICharacterClass keyword$6$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(action$2$Consumer);
			acceptor.accept(assignment$4$Consumer);
			acceptor.accept(keyword$6$Consumer);
			acceptor.accept(assignment$7$Consumer);
		}
	}

	protected class Action$2$Consumer extends ElementConsumer<Action> {
		
		protected Action$2$Consumer(final Action action) {
			super(action);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			consumeAction(getElement(), false);
			return SUCCESS;
		}
	}

	protected class Assignment$4$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$4$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$5$Consumer;
		}
	}

	protected class RuleCall$5$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$5$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(optionalCallsSub2Consumer, "opt2", false, false, false, getElement(), optional);
		}
	}

	protected class Keyword$6$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$6$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$6$Delimiter(), optional);
		}
	}

	protected class Assignment$7$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$7$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$8$Consumer;
		}
	}

	protected class RuleCall$8$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$8$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(optionalCallsSub3Consumer, "opt3", false, false, false, getElement(), optional);
		}
	}

	public ElementMatcherTestLanguageOptionalCallsSub1Consumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$6$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public OptionalCallsSub1Elements getRule() {
		return rule;
	}
	
	public void setRule(OptionalCallsSub1Elements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		action$2$Consumer = new Action$2$Consumer(rule.getOptionalCallsSub1Action_0());
		assignment$4$Consumer = new Assignment$4$Consumer(rule.getOpt2Assignment_1());
		ruleCall$5$Consumer = new RuleCall$5$Consumer(rule.getOpt2OptionalCallsSub2ParserRuleCall_1_0());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.getSubKeyword_2());
		assignment$7$Consumer = new Assignment$7$Consumer(rule.getOpt3Assignment_3());
		ruleCall$8$Consumer = new RuleCall$8$Consumer(rule.getOpt3OptionalCallsSub3ParserRuleCall_3_0());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setOptionalCallsSub2Consumer(INonTerminalConsumer optionalCallsSub2Consumer) {
		this.optionalCallsSub2Consumer = optionalCallsSub2Consumer;
	}
	
	public void setOptionalCallsSub3Consumer(INonTerminalConsumer optionalCallsSub3Consumer) {
		this.optionalCallsSub3Consumer = optionalCallsSub3Consumer;
	}
	
	public ICharacterClass getKeyword$6$Delimiter() {
		return keyword$6$Delimiter;
	}
	
	public void setKeyword$6$Delimiter(ICharacterClass characterClass) {
		keyword$6$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
