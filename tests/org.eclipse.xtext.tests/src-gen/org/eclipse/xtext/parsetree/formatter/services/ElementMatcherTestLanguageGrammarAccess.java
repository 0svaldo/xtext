/*
* generated by Xtext
*/

package org.eclipse.xtext.parsetree.formatter.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ElementMatcherTestLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleCallsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOptionalCallsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRecursionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLoopParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Model:
		//  Simple|RuleCalls|OptionalCalls|Recursion|Loop;
		public ParserRule getRule() { return rule; }

		//Simple|RuleCalls|OptionalCalls|Recursion|Loop
		public Alternatives getAlternatives() { return cAlternatives; }

		//Simple
		public RuleCall getSimpleParserRuleCall_0() { return cSimpleParserRuleCall_0; }

		//RuleCalls
		public RuleCall getRuleCallsParserRuleCall_1() { return cRuleCallsParserRuleCall_1; }

		//OptionalCalls
		public RuleCall getOptionalCallsParserRuleCall_2() { return cOptionalCallsParserRuleCall_2; }

		//Recursion
		public RuleCall getRecursionParserRuleCall_3() { return cRecursionParserRuleCall_3; }

		//Loop
		public RuleCall getLoopParserRuleCall_4() { return cLoopParserRuleCall_4; }
	}

	public class SimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Simple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitOneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cKw1Keyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOptionalAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOptionalIDTerminalRuleCall_2_1_0 = (RuleCall)cOptionalAssignment_2_1.eContents().get(0);
		private final Assignment cDatatypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDatatypeFQNParserRuleCall_3_0 = (RuleCall)cDatatypeAssignment_3.eContents().get(0);
		
		//Simple:
		//  "#1" name=ID ("kw1" optional=ID)? datatype=FQN;
		public ParserRule getRule() { return rule; }

		//"#1" name=ID ("kw1" optional=ID)? datatype=FQN
		public Group getGroup() { return cGroup; }

		//"#1"
		public Keyword getNumberSignDigitOneKeyword_0() { return cNumberSignDigitOneKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("kw1" optional=ID)?
		public Group getGroup_2() { return cGroup_2; }

		//"kw1"
		public Keyword getKw1Keyword_2_0() { return cKw1Keyword_2_0; }

		//optional=ID
		public Assignment getOptionalAssignment_2_1() { return cOptionalAssignment_2_1; }

		//ID
		public RuleCall getOptionalIDTerminalRuleCall_2_1_0() { return cOptionalIDTerminalRuleCall_2_1_0; }

		//datatype=FQN
		public Assignment getDatatypeAssignment_3() { return cDatatypeAssignment_3; }

		//FQN
		public RuleCall getDatatypeFQNParserRuleCall_3_0() { return cDatatypeFQNParserRuleCall_3_0; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN returns ecore::EString:
		//  ID ("." ID);
		public ParserRule getRule() { return rule; }

		//ID ("." ID)
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"." ID
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class RuleCallsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleCalls");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitTwoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRuleCallsSubParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cCall1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCall1RuleCallsAss1ParserRuleCall_3_0 = (RuleCall)cCall1Assignment_3.eContents().get(0);
		private final Assignment cCall2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCall2RuleCallsAss2ParserRuleCall_4_0 = (RuleCall)cCall2Assignment_4.eContents().get(0);
		
		//RuleCalls:
		//  "#2" RuleCallsSub name=ID call1=RuleCallsAss1? call2=RuleCallsAss2?;
		public ParserRule getRule() { return rule; }

		//"#2" RuleCallsSub name=ID call1=RuleCallsAss1? call2=RuleCallsAss2?
		public Group getGroup() { return cGroup; }

		//"#2"
		public Keyword getNumberSignDigitTwoKeyword_0() { return cNumberSignDigitTwoKeyword_0; }

		//RuleCallsSub
		public RuleCall getRuleCallsSubParserRuleCall_1() { return cRuleCallsSubParserRuleCall_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//call1=RuleCallsAss1?
		public Assignment getCall1Assignment_3() { return cCall1Assignment_3; }

		//RuleCallsAss1
		public RuleCall getCall1RuleCallsAss1ParserRuleCall_3_0() { return cCall1RuleCallsAss1ParserRuleCall_3_0; }

		//call2=RuleCallsAss2?
		public Assignment getCall2Assignment_4() { return cCall2Assignment_4; }

		//RuleCallsAss2
		public RuleCall getCall2RuleCallsAss2ParserRuleCall_4_0() { return cCall2RuleCallsAss2ParserRuleCall_4_0; }
	}

	public class RuleCallsSubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleCallsSub");
		private final Assignment cSubAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cSubSubKeyword_0 = (Keyword)cSubAssignment.eContents().get(0);
		
		//RuleCallsSub:
		//  sub="sub";
		public ParserRule getRule() { return rule; }

		//sub="sub"
		public Assignment getSubAssignment() { return cSubAssignment; }

		//"sub"
		public Keyword getSubSubKeyword_0() { return cSubSubKeyword_0; }
	}

	public class RuleCallsAss1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleCallsAss1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAss1Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//RuleCallsAss1:
		//  "ass1" name=ID;
		public ParserRule getRule() { return rule; }

		//"ass1" name=ID
		public Group getGroup() { return cGroup; }

		//"ass1"
		public Keyword getAss1Keyword_0() { return cAss1Keyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class RuleCallsAss2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleCallsAss2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAss2Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//RuleCallsAss2:
		//  "ass2" name=ID;
		public ParserRule getRule() { return rule; }

		//"ass2" name=ID
		public Group getGroup() { return cGroup; }

		//"ass2"
		public Keyword getAss2Keyword_0() { return cAss2Keyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class OptionalCallsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionalCalls");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitThreeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cOptionalCallsAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cOpt1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpt1OptionalCallsSub1ParserRuleCall_2_0 = (RuleCall)cOpt1Assignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//OptionalCalls:
		//  "#3" {OptionalCalls} opt1=OptionalCallsSub1? name=ID;
		public ParserRule getRule() { return rule; }

		//"#3" {OptionalCalls} opt1=OptionalCallsSub1? name=ID
		public Group getGroup() { return cGroup; }

		//"#3"
		public Keyword getNumberSignDigitThreeKeyword_0() { return cNumberSignDigitThreeKeyword_0; }

		//{OptionalCalls}
		public Action getOptionalCallsAction_1() { return cOptionalCallsAction_1; }

		//opt1=OptionalCallsSub1?
		public Assignment getOpt1Assignment_2() { return cOpt1Assignment_2; }

		//OptionalCallsSub1
		public RuleCall getOpt1OptionalCallsSub1ParserRuleCall_2_0() { return cOpt1OptionalCallsSub1ParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}

	public class OptionalCallsSub1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionalCallsSub1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOptionalCallsSub1Action_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpt2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpt2OptionalCallsSub2ParserRuleCall_1_0 = (RuleCall)cOpt2Assignment_1.eContents().get(0);
		private final Keyword cSubKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOpt3Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOpt3OptionalCallsSub3ParserRuleCall_3_0 = (RuleCall)cOpt3Assignment_3.eContents().get(0);
		
		//OptionalCallsSub1:
		//  {OptionalCallsSub1} opt2=OptionalCallsSub2? "sub" opt3=OptionalCallsSub3?;
		public ParserRule getRule() { return rule; }

		//{OptionalCallsSub1} opt2=OptionalCallsSub2? "sub" opt3=OptionalCallsSub3?
		public Group getGroup() { return cGroup; }

		//{OptionalCallsSub1}
		public Action getOptionalCallsSub1Action_0() { return cOptionalCallsSub1Action_0; }

		//opt2=OptionalCallsSub2?
		public Assignment getOpt2Assignment_1() { return cOpt2Assignment_1; }

		//OptionalCallsSub2
		public RuleCall getOpt2OptionalCallsSub2ParserRuleCall_1_0() { return cOpt2OptionalCallsSub2ParserRuleCall_1_0; }

		//"sub"
		public Keyword getSubKeyword_2() { return cSubKeyword_2; }

		//opt3=OptionalCallsSub3?
		public Assignment getOpt3Assignment_3() { return cOpt3Assignment_3; }

		//OptionalCallsSub3
		public RuleCall getOpt3OptionalCallsSub3ParserRuleCall_3_0() { return cOpt3OptionalCallsSub3ParserRuleCall_3_0; }
	}

	public class OptionalCallsSub2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionalCallsSub2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSub2Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//OptionalCallsSub2:
		//  "sub2" name=ID;
		public ParserRule getRule() { return rule; }

		//"sub2" name=ID
		public Group getGroup() { return cGroup; }

		//"sub2"
		public Keyword getSub2Keyword_0() { return cSub2Keyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class OptionalCallsSub3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionalCallsSub3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSub3Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//OptionalCallsSub3:
		//  "sub3" name=ID;
		public ParserRule getRule() { return rule; }

		//"sub3" name=ID
		public Group getGroup() { return cGroup; }

		//"sub3"
		public Keyword getSub3Keyword_0() { return cSub3Keyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class RecursionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Recursion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitFourKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRecursionSubParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Recursion:
		//  "#4" RecursionSub;
		public ParserRule getRule() { return rule; }

		//"#4" RecursionSub
		public Group getGroup() { return cGroup; }

		//"#4"
		public Keyword getNumberSignDigitFourKeyword_0() { return cNumberSignDigitFourKeyword_0; }

		//RecursionSub
		public RuleCall getRecursionSubParserRuleCall_1() { return cRecursionSubParserRuleCall_1; }
	}

	public class RecursionSubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RecursionSub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRecursionSubAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSubAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cSubRecursionSubParserRuleCall_2_0_0 = (RuleCall)cSubAssignment_2_0.eContents().get(0);
		private final Assignment cValsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cValsIDTerminalRuleCall_2_1_0 = (RuleCall)cValsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSemiAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cSemiSemicolonKeyword_4_0 = (Keyword)cSemiAssignment_4.eContents().get(0);
		
		//RecursionSub:
		//  {RecursionSub} "{" (sub+=RecursionSub|vals+=ID)* "}" semi?=";"?;
		public ParserRule getRule() { return rule; }

		//{RecursionSub} "{" (sub+=RecursionSub|vals+=ID)* "}" semi?=";"?
		public Group getGroup() { return cGroup; }

		//{RecursionSub}
		public Action getRecursionSubAction_0() { return cRecursionSubAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(sub+=RecursionSub|vals+=ID)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//sub+=RecursionSub
		public Assignment getSubAssignment_2_0() { return cSubAssignment_2_0; }

		//RecursionSub
		public RuleCall getSubRecursionSubParserRuleCall_2_0_0() { return cSubRecursionSubParserRuleCall_2_0_0; }

		//vals+=ID
		public Assignment getValsAssignment_2_1() { return cValsAssignment_2_1; }

		//ID
		public RuleCall getValsIDTerminalRuleCall_2_1_0() { return cValsIDTerminalRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//semi?=";"?
		public Assignment getSemiAssignment_4() { return cSemiAssignment_4; }

		//";"
		public Keyword getSemiSemicolonKeyword_4_0() { return cSemiSemicolonKeyword_4_0; }
	}

	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitFiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamesIDTerminalRuleCall_1_0 = (RuleCall)cNamesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cGrKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGrAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGrIDTerminalRuleCall_2_1_0 = (RuleCall)cGrAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cIntsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cIntsINTTerminalRuleCall_3_0_0 = (RuleCall)cIntsAssignment_3_0.eContents().get(0);
		private final Assignment cStringsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cStringsSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cStringsAssignment_3_1.eContents().get(0);
		
		//Loop:
		//  "#5" names+=ID+ ("gr" gr+=ID)* (ints+=INT|strings+=STRING)*;
		public ParserRule getRule() { return rule; }

		//"#5" names+=ID+ ("gr" gr+=ID)* (ints+=INT|strings+=STRING)*
		public Group getGroup() { return cGroup; }

		//"#5"
		public Keyword getNumberSignDigitFiveKeyword_0() { return cNumberSignDigitFiveKeyword_0; }

		//names+=ID+
		public Assignment getNamesAssignment_1() { return cNamesAssignment_1; }

		//ID
		public RuleCall getNamesIDTerminalRuleCall_1_0() { return cNamesIDTerminalRuleCall_1_0; }

		//("gr" gr+=ID)*
		public Group getGroup_2() { return cGroup_2; }

		//"gr"
		public Keyword getGrKeyword_2_0() { return cGrKeyword_2_0; }

		//gr+=ID
		public Assignment getGrAssignment_2_1() { return cGrAssignment_2_1; }

		//ID
		public RuleCall getGrIDTerminalRuleCall_2_1_0() { return cGrIDTerminalRuleCall_2_1_0; }

		//(ints+=INT|strings+=STRING)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//ints+=INT
		public Assignment getIntsAssignment_3_0() { return cIntsAssignment_3_0; }

		//INT
		public RuleCall getIntsINTTerminalRuleCall_3_0_0() { return cIntsINTTerminalRuleCall_3_0_0; }

		//strings+=STRING
		public Assignment getStringsAssignment_3_1() { return cStringsAssignment_3_1; }

		//STRING
		public RuleCall getStringsSTRINGTerminalRuleCall_3_1_0() { return cStringsSTRINGTerminalRuleCall_3_1_0; }
	}
	
	
	private ModelElements pModel;
	private SimpleElements pSimple;
	private FQNElements pFQN;
	private RuleCallsElements pRuleCalls;
	private RuleCallsSubElements pRuleCallsSub;
	private RuleCallsAss1Elements pRuleCallsAss1;
	private RuleCallsAss2Elements pRuleCallsAss2;
	private OptionalCallsElements pOptionalCalls;
	private OptionalCallsSub1Elements pOptionalCallsSub1;
	private OptionalCallsSub2Elements pOptionalCallsSub2;
	private OptionalCallsSub3Elements pOptionalCallsSub3;
	private RecursionElements pRecursion;
	private RecursionSubElements pRecursionSub;
	private LoopElements pLoop;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ElementMatcherTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//  Simple|RuleCalls|OptionalCalls|Recursion|Loop;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Simple:
	//  "#1" name=ID ("kw1" optional=ID)? datatype=FQN;
	public SimpleElements getSimpleAccess() {
		return (pSimple != null) ? pSimple : (pSimple = new SimpleElements());
	}
	
	public ParserRule getSimpleRule() {
		return getSimpleAccess().getRule();
	}

	//FQN returns ecore::EString:
	//  ID ("." ID);
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//RuleCalls:
	//  "#2" RuleCallsSub name=ID call1=RuleCallsAss1? call2=RuleCallsAss2?;
	public RuleCallsElements getRuleCallsAccess() {
		return (pRuleCalls != null) ? pRuleCalls : (pRuleCalls = new RuleCallsElements());
	}
	
	public ParserRule getRuleCallsRule() {
		return getRuleCallsAccess().getRule();
	}

	//RuleCallsSub:
	//  sub="sub";
	public RuleCallsSubElements getRuleCallsSubAccess() {
		return (pRuleCallsSub != null) ? pRuleCallsSub : (pRuleCallsSub = new RuleCallsSubElements());
	}
	
	public ParserRule getRuleCallsSubRule() {
		return getRuleCallsSubAccess().getRule();
	}

	//RuleCallsAss1:
	//  "ass1" name=ID;
	public RuleCallsAss1Elements getRuleCallsAss1Access() {
		return (pRuleCallsAss1 != null) ? pRuleCallsAss1 : (pRuleCallsAss1 = new RuleCallsAss1Elements());
	}
	
	public ParserRule getRuleCallsAss1Rule() {
		return getRuleCallsAss1Access().getRule();
	}

	//RuleCallsAss2:
	//  "ass2" name=ID;
	public RuleCallsAss2Elements getRuleCallsAss2Access() {
		return (pRuleCallsAss2 != null) ? pRuleCallsAss2 : (pRuleCallsAss2 = new RuleCallsAss2Elements());
	}
	
	public ParserRule getRuleCallsAss2Rule() {
		return getRuleCallsAss2Access().getRule();
	}

	//OptionalCalls:
	//  "#3" {OptionalCalls} opt1=OptionalCallsSub1? name=ID;
	public OptionalCallsElements getOptionalCallsAccess() {
		return (pOptionalCalls != null) ? pOptionalCalls : (pOptionalCalls = new OptionalCallsElements());
	}
	
	public ParserRule getOptionalCallsRule() {
		return getOptionalCallsAccess().getRule();
	}

	//OptionalCallsSub1:
	//  {OptionalCallsSub1} opt2=OptionalCallsSub2? "sub" opt3=OptionalCallsSub3?;
	public OptionalCallsSub1Elements getOptionalCallsSub1Access() {
		return (pOptionalCallsSub1 != null) ? pOptionalCallsSub1 : (pOptionalCallsSub1 = new OptionalCallsSub1Elements());
	}
	
	public ParserRule getOptionalCallsSub1Rule() {
		return getOptionalCallsSub1Access().getRule();
	}

	//OptionalCallsSub2:
	//  "sub2" name=ID;
	public OptionalCallsSub2Elements getOptionalCallsSub2Access() {
		return (pOptionalCallsSub2 != null) ? pOptionalCallsSub2 : (pOptionalCallsSub2 = new OptionalCallsSub2Elements());
	}
	
	public ParserRule getOptionalCallsSub2Rule() {
		return getOptionalCallsSub2Access().getRule();
	}

	//OptionalCallsSub3:
	//  "sub3" name=ID;
	public OptionalCallsSub3Elements getOptionalCallsSub3Access() {
		return (pOptionalCallsSub3 != null) ? pOptionalCallsSub3 : (pOptionalCallsSub3 = new OptionalCallsSub3Elements());
	}
	
	public ParserRule getOptionalCallsSub3Rule() {
		return getOptionalCallsSub3Access().getRule();
	}

	//Recursion:
	//  "#4" RecursionSub;
	public RecursionElements getRecursionAccess() {
		return (pRecursion != null) ? pRecursion : (pRecursion = new RecursionElements());
	}
	
	public ParserRule getRecursionRule() {
		return getRecursionAccess().getRule();
	}

	//RecursionSub:
	//  {RecursionSub} "{" (sub+=RecursionSub|vals+=ID)* "}" semi?=";"?;
	public RecursionSubElements getRecursionSubAccess() {
		return (pRecursionSub != null) ? pRecursionSub : (pRecursionSub = new RecursionSubElements());
	}
	
	public ParserRule getRecursionSubRule() {
		return getRecursionSubAccess().getRule();
	}

	//Loop:
	//  "#5" names+=ID+ ("gr" gr+=ID)* (ints+=INT|strings+=STRING)*;
	public LoopElements getLoopAccess() {
		return (pLoop != null) ? pLoop : (pLoop = new LoopElements());
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""
	//  ))* "\"" | "\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !(
	//  "\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
