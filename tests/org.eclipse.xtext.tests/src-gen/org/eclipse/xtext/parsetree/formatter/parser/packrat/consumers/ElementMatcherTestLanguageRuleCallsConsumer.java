/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.parsetree.formatter.services.ElementMatcherTestLanguageGrammarAccess.RuleCallsElements;

@SuppressWarnings("all")
public final class ElementMatcherTestLanguageRuleCallsConsumer extends NonTerminalConsumer {

	private RuleCallsElements rule;	

	private ITerminalConsumer idConsumer;

	private INonTerminalConsumer ruleCallsAss1Consumer;

	private INonTerminalConsumer ruleCallsAss2Consumer;

	private INonTerminalConsumer ruleCallsSubConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer keyword$2$Consumer;

	private IElementConsumer ruleCall$3$Consumer;

	private IElementConsumer assignment$4$Consumer;

	private IElementConsumer ruleCall$5$Consumer;

	private IElementConsumer assignment$6$Consumer;

	private IElementConsumer ruleCall$7$Consumer;

	private IElementConsumer assignment$8$Consumer;

	private IElementConsumer ruleCall$9$Consumer;

	private ICharacterClass keyword$2$Delimiter;

	private ISequenceMatcher ruleCall$5$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$2$Consumer);
			acceptor.accept(ruleCall$3$Consumer);
			acceptor.accept(assignment$4$Consumer);
			acceptor.accept(assignment$6$Consumer);
			acceptor.accept(assignment$8$Consumer);
		}
	}

	protected class Keyword$2$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$2$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$2$Delimiter(), optional);
		}
	}

	protected class RuleCall$3$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$3$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(ruleCallsSubConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$4$Consumer extends AssignmentConsumer {
		
		protected Assignment$4$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$5$Consumer;
		}
	}

	protected class RuleCall$5$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$5$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "name", false, false, getElement(), getRuleCall$5$Delimiter(), optional);
		}
	}

	protected class Assignment$6$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$6$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$7$Consumer;
		}
	}

	protected class RuleCall$7$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$7$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(ruleCallsAss1Consumer, "call1", false, false, false, getElement(), optional);
		}
	}

	protected class Assignment$8$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$8$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$9$Consumer;
		}
	}

	protected class RuleCall$9$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$9$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(ruleCallsAss2Consumer, "call2", false, false, false, getElement(), optional);
		}
	}

	public ElementMatcherTestLanguageRuleCallsConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$2$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$5$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public RuleCallsElements getRule() {
		return rule;
	}
	
	public void setRule(RuleCallsElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		keyword$2$Consumer = new Keyword$2$Consumer(rule.getNumberSignDigitTwoKeyword_0());
		ruleCall$3$Consumer = new RuleCall$3$Consumer(rule.getRuleCallsSubParserRuleCall_1());
		assignment$4$Consumer = new Assignment$4$Consumer(rule.getNameAssignment_2());
		ruleCall$5$Consumer = new RuleCall$5$Consumer(rule.getNameIDTerminalRuleCall_2_0());
		assignment$6$Consumer = new Assignment$6$Consumer(rule.getCall1Assignment_3());
		ruleCall$7$Consumer = new RuleCall$7$Consumer(rule.getCall1RuleCallsAss1ParserRuleCall_3_0());
		assignment$8$Consumer = new Assignment$8$Consumer(rule.getCall2Assignment_4());
		ruleCall$9$Consumer = new RuleCall$9$Consumer(rule.getCall2RuleCallsAss2ParserRuleCall_4_0());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setRuleCallsAss1Consumer(INonTerminalConsumer ruleCallsAss1Consumer) {
		this.ruleCallsAss1Consumer = ruleCallsAss1Consumer;
	}
	
	public void setRuleCallsAss2Consumer(INonTerminalConsumer ruleCallsAss2Consumer) {
		this.ruleCallsAss2Consumer = ruleCallsAss2Consumer;
	}
	
	public void setRuleCallsSubConsumer(INonTerminalConsumer ruleCallsSubConsumer) {
		this.ruleCallsSubConsumer = ruleCallsSubConsumer;
	}
	
	public ICharacterClass getKeyword$2$Delimiter() {
		return keyword$2$Delimiter;
	}
	
	public void setKeyword$2$Delimiter(ICharacterClass characterClass) {
		keyword$2$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$5$Delimiter() {
		return ruleCall$5$Delimiter;
	}
	
	public void setRuleCall$5$Delimiter(ISequenceMatcher matcher) {
		ruleCall$5$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
