/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.formatter.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.parsetree.formatter.services.FormatterTestLanguageGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.FormatterTestLanguageRootConsumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.FormatterTestLanguageLineConsumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.FormatterTestLanguageDeclConsumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.FormatterTestLanguageAssignConsumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.FormatterTestLanguageMethConsumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.FormatterTestLanguageParamConsumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.FormatterTestLanguageTestLinewrapConsumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.FormatterTestLanguageTestIndentationConsumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.FormatterTestLanguageFqnObjConsumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.FormatterTestLanguageFQNConsumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.FormatterTestLanguageFqnRefConsumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.FormatterTestLanguageEnumerationConsumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.FormatterTestLanguageEnum1Consumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class FormatterTestLanguageParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 
    private FormatterTestLanguageRootConsumer rootConsumer;
    private FormatterTestLanguageLineConsumer lineConsumer;
    private FormatterTestLanguageDeclConsumer declConsumer;
    private FormatterTestLanguageAssignConsumer assignConsumer;
    private FormatterTestLanguageMethConsumer methConsumer;
    private FormatterTestLanguageParamConsumer paramConsumer;
    private FormatterTestLanguageTestLinewrapConsumer testLinewrapConsumer;
    private FormatterTestLanguageTestIndentationConsumer testIndentationConsumer;
    private FormatterTestLanguageFqnObjConsumer fqnObjConsumer;
    private FormatterTestLanguageFQNConsumer fqnConsumer;
    private FormatterTestLanguageFqnRefConsumer fqnRefConsumer;
    private FormatterTestLanguageEnumerationConsumer enumerationConsumer;
    private FormatterTestLanguageEnum1Consumer enum1Consumer;

	private FormatterTestLanguageGrammarAccess grammarAccess;

	public FormatterTestLanguageParserConfiguration(IInternalParserConfiguration configuration, FormatterTestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public FormatterTestLanguageRootConsumer getRootConsumer() {
		return rootConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		rootConsumer = new FormatterTestLanguageRootConsumer(
    		this, null
    	);
		lineConsumer = new FormatterTestLanguageLineConsumer(
    		this, null
    	);
		declConsumer = new FormatterTestLanguageDeclConsumer(
    		this, null
    	);
		assignConsumer = new FormatterTestLanguageAssignConsumer(
    		this, null
    	);
		methConsumer = new FormatterTestLanguageMethConsumer(
    		this, null
    	);
		paramConsumer = new FormatterTestLanguageParamConsumer(
    		this, null
    	);
		testLinewrapConsumer = new FormatterTestLanguageTestLinewrapConsumer(
    		this, null
    	);
		testIndentationConsumer = new FormatterTestLanguageTestIndentationConsumer(
    		this, null
    	);
		fqnObjConsumer = new FormatterTestLanguageFqnObjConsumer(
    		this, null
    	);
		fqnConsumer = new FormatterTestLanguageFQNConsumer(
    		this, null
    	);
		fqnRefConsumer = new FormatterTestLanguageFqnRefConsumer(
    		this, null
    	);
		enumerationConsumer = new FormatterTestLanguageEnumerationConsumer(
    		this, null
    	);
		enum1Consumer = new FormatterTestLanguageEnum1Consumer(this, null);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getRootConsumer().setRule(grammarAccess.getRootAccess());
		getLineConsumer().setRule(grammarAccess.getLineAccess());
		getDeclConsumer().setRule(grammarAccess.getDeclAccess());
		getAssignConsumer().setRule(grammarAccess.getAssignAccess());
		getMethConsumer().setRule(grammarAccess.getMethAccess());
		getParamConsumer().setRule(grammarAccess.getParamAccess());
		getTestLinewrapConsumer().setRule(grammarAccess.getTestLinewrapAccess());
		getTestIndentationConsumer().setRule(grammarAccess.getTestIndentationAccess());
		getFqnObjConsumer().setRule(grammarAccess.getFqnObjAccess());
		getFqnConsumer().setRule(grammarAccess.getFQNAccess());
		getFqnRefConsumer().setRule(grammarAccess.getFqnRefAccess());
		getEnumerationConsumer().setRule(grammarAccess.getEnumerationAccess());
		getEnum1Consumer().setRule(grammarAccess.getEnum1Access());
		getIdConsumer().setRule(grammarAccess.getIDRule());
		getIntConsumer().setRule(grammarAccess.getINTRule());
		getStringConsumer().setRule(grammarAccess.getSTRINGRule());
		getMlCommentConsumer().setRule(grammarAccess.getML_COMMENTRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getAnyOtherConsumer().setRule(grammarAccess.getANY_OTHERRule());


		getRootConsumer$().setTestIndentationConsumer(getTestIndentationConsumer());
		getRootConsumer$().setTestLinewrapConsumer(getTestLinewrapConsumer());

		getLineConsumer().setAssignConsumer(getAssignConsumer());
		getLineConsumer().setDeclConsumer(getDeclConsumer());
		getLineConsumer().setEnumerationConsumer(getEnumerationConsumer());
		getLineConsumer().setFqnObjConsumer(getFqnObjConsumer());
		getLineConsumer().setFqnRefConsumer(getFqnRefConsumer());
		getLineConsumer().setMethConsumer(getMethConsumer());

		getDeclConsumer().setIdConsumer(getIdConsumer());

		getAssignConsumer().setIdConsumer(getIdConsumer());
		getAssignConsumer().setIntConsumer(getIntConsumer());

		getMethConsumer().setIdConsumer(getIdConsumer());
		getMethConsumer().setParamConsumer(getParamConsumer());

		getParamConsumer().setIdConsumer(getIdConsumer());

		getTestLinewrapConsumer().setLineConsumer(getLineConsumer());

		getTestIndentationConsumer().setLineConsumer(getLineConsumer());
		getTestIndentationConsumer().setTestIndentationConsumer(getTestIndentationConsumer());

		getFqnObjConsumer().setFqnConsumer(getFqnConsumer());

		getFqnConsumer().setIdConsumer(getIdConsumer());

		getFqnRefConsumer().setFqnConsumer(getFqnConsumer());

		getEnumerationConsumer().setEnum1Consumer(getEnum1Consumer());

		getRootConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$4$Delimiter);
		getLineConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$18$Delimiter);
		getDeclConsumer().setRuleCall$3$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.ruleCall$23$Delimiter);
		getDeclConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.ruleCall$23$Delimiter);
		getAssignConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$18$Delimiter);
		getAssignConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$18$Delimiter);
		getAssignConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$18$Delimiter);
		getAssignConsumer().setKeyword$13$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$18$Delimiter);
		getAssignConsumer().setKeyword$16$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$18$Delimiter);
		getAssignConsumer().setRuleCall$3$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.ruleCall$23$Delimiter);
		getAssignConsumer().setRuleCall$11$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.ruleCall$38$Delimiter);
		getAssignConsumer().setRuleCall$15$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.ruleCall$38$Delimiter);
		getMethConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$4$Delimiter);
		getMethConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$18$Delimiter);
		getMethConsumer().setKeyword$10$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$18$Delimiter);
		getMethConsumer().setKeyword$13$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$18$Delimiter);
		getMethConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.ruleCall$23$Delimiter);
		getParamConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$18$Delimiter);
		getParamConsumer().setRuleCall$3$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.ruleCall$23$Delimiter);
		getParamConsumer().setRuleCall$6$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.ruleCall$23$Delimiter);
		getTestLinewrapConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$4$Delimiter);
		getTestIndentationConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$4$Delimiter);
		getTestIndentationConsumer().setKeyword$3$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$18$Delimiter);
		getTestIndentationConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$18$Delimiter);
		getTestIndentationConsumer().setKeyword$11$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$18$Delimiter);
		getFqnObjConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$4$Delimiter);
		getFqnConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$18$Delimiter);
		getFqnConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.ruleCall$23$Delimiter);
		getFqnConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.ruleCall$23$Delimiter);
		getFqnRefConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$4$Delimiter);
		getEnumerationConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$4$Delimiter);
		getEnumerationConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.FormatterTestLanguageDelimiters.keyword$18$Delimiter);
	}
	
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
	public FormatterTestLanguageRootConsumer getRootConsumer$() {
    	return rootConsumer;
    }

    public FormatterTestLanguageLineConsumer getLineConsumer() {
    	return lineConsumer;
    }

    public FormatterTestLanguageDeclConsumer getDeclConsumer() {
    	return declConsumer;
    }

    public FormatterTestLanguageAssignConsumer getAssignConsumer() {
    	return assignConsumer;
    }

    public FormatterTestLanguageMethConsumer getMethConsumer() {
    	return methConsumer;
    }

    public FormatterTestLanguageParamConsumer getParamConsumer() {
    	return paramConsumer;
    }

    public FormatterTestLanguageTestLinewrapConsumer getTestLinewrapConsumer() {
    	return testLinewrapConsumer;
    }

    public FormatterTestLanguageTestIndentationConsumer getTestIndentationConsumer() {
    	return testIndentationConsumer;
    }

    public FormatterTestLanguageFqnObjConsumer getFqnObjConsumer() {
    	return fqnObjConsumer;
    }

    public FormatterTestLanguageFQNConsumer getFqnConsumer() {
    	return fqnConsumer;
    }

    public FormatterTestLanguageFqnRefConsumer getFqnRefConsumer() {
    	return fqnRefConsumer;
    }

    public FormatterTestLanguageEnumerationConsumer getEnumerationConsumer() {
    	return enumerationConsumer;
    }

    public FormatterTestLanguageEnum1Consumer getEnum1Consumer() {
    	return enum1Consumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
