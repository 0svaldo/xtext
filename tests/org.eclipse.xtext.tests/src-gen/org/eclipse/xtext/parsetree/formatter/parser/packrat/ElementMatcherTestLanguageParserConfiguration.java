/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.formatter.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.parsetree.formatter.services.ElementMatcherTestLanguageGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.ElementMatcherTestLanguageModelConsumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.ElementMatcherTestLanguageSimpleConsumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.ElementMatcherTestLanguageFQNConsumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.ElementMatcherTestLanguageRuleCallsConsumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.ElementMatcherTestLanguageRuleCallsSubConsumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.ElementMatcherTestLanguageRuleCallsAss1Consumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.ElementMatcherTestLanguageRuleCallsAss2Consumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.ElementMatcherTestLanguageOptionalCallsConsumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.ElementMatcherTestLanguageOptionalCallsSub1Consumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.ElementMatcherTestLanguageOptionalCallsSub2Consumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.ElementMatcherTestLanguageOptionalCallsSub3Consumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.ElementMatcherTestLanguageRecursionConsumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.ElementMatcherTestLanguageRecursionSubConsumer;
import org.eclipse.xtext.parsetree.formatter.parser.packrat.consumers.ElementMatcherTestLanguageLoopConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class ElementMatcherTestLanguageParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 
    private ElementMatcherTestLanguageModelConsumer modelConsumer;
    private ElementMatcherTestLanguageSimpleConsumer simpleConsumer;
    private ElementMatcherTestLanguageFQNConsumer fqnConsumer;
    private ElementMatcherTestLanguageRuleCallsConsumer ruleCallsConsumer;
    private ElementMatcherTestLanguageRuleCallsSubConsumer ruleCallsSubConsumer;
    private ElementMatcherTestLanguageRuleCallsAss1Consumer ruleCallsAss1Consumer;
    private ElementMatcherTestLanguageRuleCallsAss2Consumer ruleCallsAss2Consumer;
    private ElementMatcherTestLanguageOptionalCallsConsumer optionalCallsConsumer;
    private ElementMatcherTestLanguageOptionalCallsSub1Consumer optionalCallsSub1Consumer;
    private ElementMatcherTestLanguageOptionalCallsSub2Consumer optionalCallsSub2Consumer;
    private ElementMatcherTestLanguageOptionalCallsSub3Consumer optionalCallsSub3Consumer;
    private ElementMatcherTestLanguageRecursionConsumer recursionConsumer;
    private ElementMatcherTestLanguageRecursionSubConsumer recursionSubConsumer;
    private ElementMatcherTestLanguageLoopConsumer loopConsumer;

	private ElementMatcherTestLanguageGrammarAccess grammarAccess;

	public ElementMatcherTestLanguageParserConfiguration(IInternalParserConfiguration configuration, ElementMatcherTestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public ElementMatcherTestLanguageModelConsumer getRootConsumer() {
		return modelConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		modelConsumer = new ElementMatcherTestLanguageModelConsumer(
    		this, null
    	);
		simpleConsumer = new ElementMatcherTestLanguageSimpleConsumer(
    		this, null
    	);
		fqnConsumer = new ElementMatcherTestLanguageFQNConsumer(
    		this, null
    	);
		ruleCallsConsumer = new ElementMatcherTestLanguageRuleCallsConsumer(
    		this, null
    	);
		ruleCallsSubConsumer = new ElementMatcherTestLanguageRuleCallsSubConsumer(
    		this, null
    	);
		ruleCallsAss1Consumer = new ElementMatcherTestLanguageRuleCallsAss1Consumer(
    		this, null
    	);
		ruleCallsAss2Consumer = new ElementMatcherTestLanguageRuleCallsAss2Consumer(
    		this, null
    	);
		optionalCallsConsumer = new ElementMatcherTestLanguageOptionalCallsConsumer(
    		this, null
    	);
		optionalCallsSub1Consumer = new ElementMatcherTestLanguageOptionalCallsSub1Consumer(
    		this, null
    	);
		optionalCallsSub2Consumer = new ElementMatcherTestLanguageOptionalCallsSub2Consumer(
    		this, null
    	);
		optionalCallsSub3Consumer = new ElementMatcherTestLanguageOptionalCallsSub3Consumer(
    		this, null
    	);
		recursionConsumer = new ElementMatcherTestLanguageRecursionConsumer(
    		this, null
    	);
		recursionSubConsumer = new ElementMatcherTestLanguageRecursionSubConsumer(
    		this, null
    	);
		loopConsumer = new ElementMatcherTestLanguageLoopConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getModelConsumer().setRule(grammarAccess.getModelAccess());
		getSimpleConsumer().setRule(grammarAccess.getSimpleAccess());
		getFqnConsumer().setRule(grammarAccess.getFQNAccess());
		getRuleCallsConsumer().setRule(grammarAccess.getRuleCallsAccess());
		getRuleCallsSubConsumer().setRule(grammarAccess.getRuleCallsSubAccess());
		getRuleCallsAss1Consumer().setRule(grammarAccess.getRuleCallsAss1Access());
		getRuleCallsAss2Consumer().setRule(grammarAccess.getRuleCallsAss2Access());
		getOptionalCallsConsumer().setRule(grammarAccess.getOptionalCallsAccess());
		getOptionalCallsSub1Consumer().setRule(grammarAccess.getOptionalCallsSub1Access());
		getOptionalCallsSub2Consumer().setRule(grammarAccess.getOptionalCallsSub2Access());
		getOptionalCallsSub3Consumer().setRule(grammarAccess.getOptionalCallsSub3Access());
		getRecursionConsumer().setRule(grammarAccess.getRecursionAccess());
		getRecursionSubConsumer().setRule(grammarAccess.getRecursionSubAccess());
		getLoopConsumer().setRule(grammarAccess.getLoopAccess());
		getIdConsumer().setRule(grammarAccess.getIDRule());
		getIntConsumer().setRule(grammarAccess.getINTRule());
		getStringConsumer().setRule(grammarAccess.getSTRINGRule());
		getMlCommentConsumer().setRule(grammarAccess.getML_COMMENTRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getAnyOtherConsumer().setRule(grammarAccess.getANY_OTHERRule());


		getModelConsumer().setLoopConsumer(getLoopConsumer());
		getModelConsumer().setOptionalCallsConsumer(getOptionalCallsConsumer());
		getModelConsumer().setRecursionConsumer(getRecursionConsumer());
		getModelConsumer().setRuleCallsConsumer(getRuleCallsConsumer());
		getModelConsumer().setSimpleConsumer(getSimpleConsumer());

		getSimpleConsumer().setFqnConsumer(getFqnConsumer());
		getSimpleConsumer().setIdConsumer(getIdConsumer());

		getFqnConsumer().setIdConsumer(getIdConsumer());

		getRuleCallsConsumer().setIdConsumer(getIdConsumer());
		getRuleCallsConsumer().setRuleCallsAss1Consumer(getRuleCallsAss1Consumer());
		getRuleCallsConsumer().setRuleCallsAss2Consumer(getRuleCallsAss2Consumer());
		getRuleCallsConsumer().setRuleCallsSubConsumer(getRuleCallsSubConsumer());

		getRuleCallsAss1Consumer().setIdConsumer(getIdConsumer());

		getRuleCallsAss2Consumer().setIdConsumer(getIdConsumer());

		getOptionalCallsConsumer().setIdConsumer(getIdConsumer());
		getOptionalCallsConsumer().setOptionalCallsSub1Consumer(getOptionalCallsSub1Consumer());

		getOptionalCallsSub1Consumer().setOptionalCallsSub2Consumer(getOptionalCallsSub2Consumer());
		getOptionalCallsSub1Consumer().setOptionalCallsSub3Consumer(getOptionalCallsSub3Consumer());

		getOptionalCallsSub2Consumer().setIdConsumer(getIdConsumer());

		getOptionalCallsSub3Consumer().setIdConsumer(getIdConsumer());

		getRecursionConsumer().setRecursionSubConsumer(getRecursionSubConsumer());

		getRecursionSubConsumer().setIdConsumer(getIdConsumer());
		getRecursionSubConsumer().setRecursionSubConsumer(getRecursionSubConsumer());

		getLoopConsumer().setIdConsumer(getIdConsumer());
		getLoopConsumer().setIntConsumer(getIntConsumer());
		getLoopConsumer().setStringConsumer(getStringConsumer());

		getSimpleConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.keyword$12$Delimiter);
		getSimpleConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.keyword$16$Delimiter);
		getSimpleConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.ruleCall$14$Delimiter);
		getSimpleConsumer().setRuleCall$8$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.ruleCall$14$Delimiter);
		getFqnConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.keyword$12$Delimiter);
		getFqnConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.ruleCall$14$Delimiter);
		getFqnConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.ruleCall$14$Delimiter);
		getRuleCallsConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.keyword$12$Delimiter);
		getRuleCallsConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.ruleCall$14$Delimiter);
		getRuleCallsSubConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.keyword$16$Delimiter);
		getRuleCallsAss1Consumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.keyword$16$Delimiter);
		getRuleCallsAss1Consumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.ruleCall$14$Delimiter);
		getRuleCallsAss2Consumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.keyword$16$Delimiter);
		getRuleCallsAss2Consumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.ruleCall$14$Delimiter);
		getOptionalCallsConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.keyword$12$Delimiter);
		getOptionalCallsConsumer().setRuleCall$8$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.ruleCall$14$Delimiter);
		getOptionalCallsSub1Consumer().setKeyword$6$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.keyword$16$Delimiter);
		getOptionalCallsSub2Consumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.keyword$16$Delimiter);
		getOptionalCallsSub2Consumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.ruleCall$14$Delimiter);
		getOptionalCallsSub3Consumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.keyword$16$Delimiter);
		getOptionalCallsSub3Consumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.ruleCall$14$Delimiter);
		getRecursionConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.keyword$12$Delimiter);
		getRecursionSubConsumer().setKeyword$10$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.keyword$12$Delimiter);
		getRecursionSubConsumer().setKeyword$12$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.keyword$12$Delimiter);
		getRecursionSubConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.keyword$12$Delimiter);
		getRecursionSubConsumer().setRuleCall$9$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.ruleCall$14$Delimiter);
		getLoopConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.keyword$12$Delimiter);
		getLoopConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.keyword$16$Delimiter);
		getLoopConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.ruleCall$14$Delimiter);
		getLoopConsumer().setRuleCall$8$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.ruleCall$14$Delimiter);
		getLoopConsumer().setRuleCall$11$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.ruleCall$118$Delimiter);
		getLoopConsumer().setRuleCall$13$Delimiter(org.eclipse.xtext.parsetree.formatter.parser.packrat.ElementMatcherTestLanguageDelimiters.ruleCall$118$Delimiter);
	}
	
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public ElementMatcherTestLanguageModelConsumer getModelConsumer() {
    	return modelConsumer;
    }

    public ElementMatcherTestLanguageSimpleConsumer getSimpleConsumer() {
    	return simpleConsumer;
    }

    public ElementMatcherTestLanguageFQNConsumer getFqnConsumer() {
    	return fqnConsumer;
    }

    public ElementMatcherTestLanguageRuleCallsConsumer getRuleCallsConsumer() {
    	return ruleCallsConsumer;
    }

    public ElementMatcherTestLanguageRuleCallsSubConsumer getRuleCallsSubConsumer() {
    	return ruleCallsSubConsumer;
    }

    public ElementMatcherTestLanguageRuleCallsAss1Consumer getRuleCallsAss1Consumer() {
    	return ruleCallsAss1Consumer;
    }

    public ElementMatcherTestLanguageRuleCallsAss2Consumer getRuleCallsAss2Consumer() {
    	return ruleCallsAss2Consumer;
    }

    public ElementMatcherTestLanguageOptionalCallsConsumer getOptionalCallsConsumer() {
    	return optionalCallsConsumer;
    }

    public ElementMatcherTestLanguageOptionalCallsSub1Consumer getOptionalCallsSub1Consumer() {
    	return optionalCallsSub1Consumer;
    }

    public ElementMatcherTestLanguageOptionalCallsSub2Consumer getOptionalCallsSub2Consumer() {
    	return optionalCallsSub2Consumer;
    }

    public ElementMatcherTestLanguageOptionalCallsSub3Consumer getOptionalCallsSub3Consumer() {
    	return optionalCallsSub3Consumer;
    }

    public ElementMatcherTestLanguageRecursionConsumer getRecursionConsumer() {
    	return recursionConsumer;
    }

    public ElementMatcherTestLanguageRecursionSubConsumer getRecursionSubConsumer() {
    	return recursionSubConsumer;
    }

    public ElementMatcherTestLanguageLoopConsumer getLoopConsumer() {
    	return loopConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
