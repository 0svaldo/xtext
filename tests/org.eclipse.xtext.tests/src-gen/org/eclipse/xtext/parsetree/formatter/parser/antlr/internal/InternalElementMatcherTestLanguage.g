/*
* generated by Xtext
*/
grammar InternalElementMatcherTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.parsetree.formatter.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parsetree.formatter.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.parsetree.formatter.services.ElementMatcherTestLanguageGrammarAccess;

}

@parser::members {

 	private ElementMatcherTestLanguageGrammarAccess grammarAccess;
 	
    public InternalElementMatcherTestLanguageParser(TokenStream input, IAstFactory factory, ElementMatcherTestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/xtext/parsetree/formatter/parser/antlr/internal/InternalElementMatcherTestLanguage.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected ElementMatcherTestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getModelAccess().getSimpleParserRuleCall_0(), currentNode); 
    }
    this_Simple_0=ruleSimple
    { 
        $current = $this_Simple_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getModelAccess().getRuleCallsParserRuleCall_1(), currentNode); 
    }
    this_RuleCalls_1=ruleRuleCalls
    { 
        $current = $this_RuleCalls_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getModelAccess().getOptionalCallsParserRuleCall_2(), currentNode); 
    }
    this_OptionalCalls_2=ruleOptionalCalls
    { 
        $current = $this_OptionalCalls_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getModelAccess().getRecursionParserRuleCall_3(), currentNode); 
    }
    this_Recursion_3=ruleRecursion
    { 
        $current = $this_Recursion_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getModelAccess().getLoopParserRuleCall_4(), currentNode); 
    }
    this_Loop_4=ruleLoop
    { 
        $current = $this_Loop_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getModelAccess().getExpressionParserRuleCall_5(), currentNode); 
    }
    this_Expression_5=ruleExpression
    { 
        $current = $this_Expression_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getModelAccess().getRuleCalls12ParserRuleCall_6(), currentNode); 
    }
    this_RuleCalls12_6=ruleRuleCalls12
    { 
        $current = $this_RuleCalls12_6.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleSimple
entryRuleSimple returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimpleRule(), currentNode); }
	 iv_ruleSimple=ruleSimple 
	 { $current=$iv_ruleSimple.current; } 
	 EOF 
;

// Rule Simple
ruleSimple returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'#1' 
    {
        createLeafNode(grammarAccess.getSimpleAccess().getNumberSignDigitOneKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSimpleAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'kw1' 
    {
        createLeafNode(grammarAccess.getSimpleAccess().getKw1Keyword_2_0(), null); 
    }
(
(
		lv_optional_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSimpleAccess().getOptionalIDTerminalRuleCall_2_1_0(), "optional"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"optional",
	        		lv_optional_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimpleAccess().getDatatypeFQNParserRuleCall_3_0(), currentNode); 
	    }
		lv_datatype_4_0=ruleFQN		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"datatype",
	        		lv_datatype_4_0, 
	        		"FQN", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFQNRule(), currentNode); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0(), null); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getFQNAccess().getFullStopKeyword_1_0(), null); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    createLeafNode(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1(), null); 
    }
))
    ;





// Entry rule entryRuleRuleCalls
entryRuleRuleCalls returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRuleCallsRule(), currentNode); }
	 iv_ruleRuleCalls=ruleRuleCalls 
	 { $current=$iv_ruleRuleCalls.current; } 
	 EOF 
;

// Rule RuleCalls
ruleRuleCalls returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'#2' 
    {
        createLeafNode(grammarAccess.getRuleCallsAccess().getNumberSignDigitTwoKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getRuleCallsAccess().getRuleCallsSubParserRuleCall_1(), currentNode); 
    }
    this_RuleCallsSub_1=ruleRuleCallsSub
    { 
        $current = $this_RuleCallsSub_1.current; 
        currentNode = currentNode.getParent();
    }
(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getRuleCallsAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRuleCallsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRuleCallsAccess().getCall1RuleCallsAss1ParserRuleCall_3_0(), currentNode); 
	    }
		lv_call1_3_0=ruleRuleCallsAss1		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRuleCallsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"call1",
	        		lv_call1_3_0, 
	        		"RuleCallsAss1", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRuleCallsAccess().getCall2RuleCallsAss2ParserRuleCall_4_0(), currentNode); 
	    }
		lv_call2_4_0=ruleRuleCallsAss2		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRuleCallsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"call2",
	        		lv_call2_4_0, 
	        		"RuleCallsAss2", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleRuleCallsSub
entryRuleRuleCallsSub returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRuleCallsSubRule(), currentNode); }
	 iv_ruleRuleCallsSub=ruleRuleCallsSub 
	 { $current=$iv_ruleRuleCallsSub.current; } 
	 EOF 
;

// Rule RuleCallsSub
ruleRuleCallsSub returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_sub_0_0=	'sub' 
    {
        createLeafNode(grammarAccess.getRuleCallsSubAccess().getSubSubKeyword_0(), "sub"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRuleCallsSubRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "sub", lv_sub_0_0, "sub", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleRuleCallsAss1
entryRuleRuleCallsAss1 returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRuleCallsAss1Rule(), currentNode); }
	 iv_ruleRuleCallsAss1=ruleRuleCallsAss1 
	 { $current=$iv_ruleRuleCallsAss1.current; } 
	 EOF 
;

// Rule RuleCallsAss1
ruleRuleCallsAss1 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'ass1' 
    {
        createLeafNode(grammarAccess.getRuleCallsAss1Access().getAss1Keyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getRuleCallsAss1Access().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRuleCallsAss1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleRuleCallsAss2
entryRuleRuleCallsAss2 returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRuleCallsAss2Rule(), currentNode); }
	 iv_ruleRuleCallsAss2=ruleRuleCallsAss2 
	 { $current=$iv_ruleRuleCallsAss2.current; } 
	 EOF 
;

// Rule RuleCallsAss2
ruleRuleCallsAss2 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'ass2' 
    {
        createLeafNode(grammarAccess.getRuleCallsAss2Access().getAss2Keyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getRuleCallsAss2Access().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRuleCallsAss2Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleOptionalCalls
entryRuleOptionalCalls returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOptionalCallsRule(), currentNode); }
	 iv_ruleOptionalCalls=ruleOptionalCalls 
	 { $current=$iv_ruleOptionalCalls.current; } 
	 EOF 
;

// Rule OptionalCalls
ruleOptionalCalls returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'#3' 
    {
        createLeafNode(grammarAccess.getOptionalCallsAccess().getNumberSignDigitThreeKeyword_0(), null); 
    }
(
    { 
        temp=factory.create(grammarAccess.getOptionalCallsAccess().getOptionalCallsAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOptionalCallsAccess().getOptionalCallsAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOptionalCallsAccess().getOpt1OptionalCallsSub1ParserRuleCall_2_0(), currentNode); 
	    }
		lv_opt1_2_0=ruleOptionalCallsSub1		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOptionalCallsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"opt1",
	        		lv_opt1_2_0, 
	        		"OptionalCallsSub1", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		lv_name_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getOptionalCallsAccess().getNameIDTerminalRuleCall_3_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOptionalCallsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleOptionalCallsSub1
entryRuleOptionalCallsSub1 returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOptionalCallsSub1Rule(), currentNode); }
	 iv_ruleOptionalCallsSub1=ruleOptionalCallsSub1 
	 { $current=$iv_ruleOptionalCallsSub1.current; } 
	 EOF 
;

// Rule OptionalCallsSub1
ruleOptionalCallsSub1 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getOptionalCallsSub1Access().getOptionalCallsSub1Action_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOptionalCallsSub1Access().getOptionalCallsSub1Action_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOptionalCallsSub1Access().getOpt2OptionalCallsSub2ParserRuleCall_1_0(), currentNode); 
	    }
		lv_opt2_1_0=ruleOptionalCallsSub2		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOptionalCallsSub1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"opt2",
	        		lv_opt2_1_0, 
	        		"OptionalCallsSub2", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	'sub' 
    {
        createLeafNode(grammarAccess.getOptionalCallsSub1Access().getSubKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOptionalCallsSub1Access().getOpt3OptionalCallsSub3ParserRuleCall_3_0(), currentNode); 
	    }
		lv_opt3_3_0=ruleOptionalCallsSub3		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOptionalCallsSub1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"opt3",
	        		lv_opt3_3_0, 
	        		"OptionalCallsSub3", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleOptionalCallsSub2
entryRuleOptionalCallsSub2 returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOptionalCallsSub2Rule(), currentNode); }
	 iv_ruleOptionalCallsSub2=ruleOptionalCallsSub2 
	 { $current=$iv_ruleOptionalCallsSub2.current; } 
	 EOF 
;

// Rule OptionalCallsSub2
ruleOptionalCallsSub2 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'sub2' 
    {
        createLeafNode(grammarAccess.getOptionalCallsSub2Access().getSub2Keyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getOptionalCallsSub2Access().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOptionalCallsSub2Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleOptionalCallsSub3
entryRuleOptionalCallsSub3 returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOptionalCallsSub3Rule(), currentNode); }
	 iv_ruleOptionalCallsSub3=ruleOptionalCallsSub3 
	 { $current=$iv_ruleOptionalCallsSub3.current; } 
	 EOF 
;

// Rule OptionalCallsSub3
ruleOptionalCallsSub3 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'sub3' 
    {
        createLeafNode(grammarAccess.getOptionalCallsSub3Access().getSub3Keyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getOptionalCallsSub3Access().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOptionalCallsSub3Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleRecursion
entryRuleRecursion returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRecursionRule(), currentNode); }
	 iv_ruleRecursion=ruleRecursion 
	 { $current=$iv_ruleRecursion.current; } 
	 EOF 
;

// Rule Recursion
ruleRecursion returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'#4' 
    {
        createLeafNode(grammarAccess.getRecursionAccess().getNumberSignDigitFourKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getRecursionAccess().getRecursionSubParserRuleCall_1(), currentNode); 
    }
    this_RecursionSub_1=ruleRecursionSub
    { 
        $current = $this_RecursionSub_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleRecursionSub
entryRuleRecursionSub returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRecursionSubRule(), currentNode); }
	 iv_ruleRecursionSub=ruleRecursionSub 
	 { $current=$iv_ruleRecursionSub.current; } 
	 EOF 
;

// Rule RecursionSub
ruleRecursionSub returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getRecursionSubAccess().getRecursionSubAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRecursionSubAccess().getRecursionSubAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'{' 
    {
        createLeafNode(grammarAccess.getRecursionSubAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRecursionSubAccess().getSubRecursionSubParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_sub_2_0=ruleRecursionSub		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRecursionSubRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"sub",
	        		lv_sub_2_0, 
	        		"RecursionSub", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_vals_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getRecursionSubAccess().getValsIDTerminalRuleCall_2_1_0(), "vals"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRecursionSubRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"vals",
	        		lv_vals_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getRecursionSubAccess().getRightCurlyBracketKeyword_3(), null); 
    }
(
(
		lv_semi_5_0=	';' 
    {
        createLeafNode(grammarAccess.getRecursionSubAccess().getSemiSemicolonKeyword_4_0(), "semi"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRecursionSubRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "semi", true, ";", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?)
;





// Entry rule entryRuleLoop
entryRuleLoop returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLoopRule(), currentNode); }
	 iv_ruleLoop=ruleLoop 
	 { $current=$iv_ruleLoop.current; } 
	 EOF 
;

// Rule Loop
ruleLoop returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'#5' 
    {
        createLeafNode(grammarAccess.getLoopAccess().getNumberSignDigitFiveKeyword_0(), null); 
    }
(
(
		lv_names_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLoopAccess().getNamesIDTerminalRuleCall_1_0(), "names"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"names",
	        		lv_names_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)+(	'gr' 
    {
        createLeafNode(grammarAccess.getLoopAccess().getGrKeyword_2_0(), null); 
    }
(
(
		lv_gr_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLoopAccess().getGrIDTerminalRuleCall_2_1_0(), "gr"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"gr",
	        		lv_gr_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))*((
(
		lv_ints_4_0=RULE_INT
		{
			createLeafNode(grammarAccess.getLoopAccess().getIntsINTTerminalRuleCall_3_0_0(), "ints"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ints",
	        		lv_ints_4_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_strings_5_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getLoopAccess().getStringsSTRINGTerminalRuleCall_3_1_0(), "strings"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"strings",
	        		lv_strings_5_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))*)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'#6' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getNumberSignDigitSixKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getAddParserRuleCall_1(), currentNode); 
    }
    this_Add_1=ruleAdd
    { 
        $current = $this_Add_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAdd
entryRuleAdd returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAddRule(), currentNode); }
	 iv_ruleAdd=ruleAdd 
	 { $current=$iv_ruleAdd.current; } 
	 EOF 
;

// Rule Add
ruleAdd returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAddAccess().getMultParserRuleCall_0(), currentNode); 
    }
    this_Mult_0=ruleMult
    { 
        $current = $this_Mult_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getAddAccess().getAddLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAddAccess().getAddLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'+' 
    {
        createLeafNode(grammarAccess.getAddAccess().getPlusSignKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAddAccess().getRightMultParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_right_3_0=ruleMult		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAddRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_3_0, 
	        		"Mult", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleMult
entryRuleMult returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultRule(), currentNode); }
	 iv_ruleMult=ruleMult 
	 { $current=$iv_ruleMult.current; } 
	 EOF 
;

// Rule Mult
ruleMult returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getMultAccess().getPrimParserRuleCall_0(), currentNode); 
    }
    this_Prim_0=rulePrim
    { 
        $current = $this_Prim_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getMultAccess().getMultLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMultAccess().getMultLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'*' 
    {
        createLeafNode(grammarAccess.getMultAccess().getAsteriskKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultAccess().getRightPrimParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_right_3_0=rulePrim		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_3_0, 
	        		"Prim", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulePrim
entryRulePrim returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimRule(), currentNode); }
	 iv_rulePrim=rulePrim 
	 { $current=$iv_rulePrim.current; } 
	 EOF 
;

// Rule Prim
rulePrim returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
    { 
        temp=factory.create(grammarAccess.getPrimAccess().getValueAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPrimAccess().getValueAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_val_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getPrimAccess().getValINTTerminalRuleCall_0_1_0(), "val"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"val",
	        		lv_val_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |((
    { 
        temp=factory.create(grammarAccess.getPrimAccess().getFunctionAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPrimAccess().getFunctionAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_func_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPrimAccess().getFuncIDTerminalRuleCall_1_1_0(), "func"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"func",
	        		lv_func_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getPrimAccess().getLeftParenthesisKeyword_1_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimAccess().getParamAddParserRuleCall_1_3_0(), currentNode); 
	    }
		lv_param_5_0=ruleAdd		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"param",
	        		lv_param_5_0, 
	        		"Add", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getPrimAccess().getCommaKeyword_1_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimAccess().getParamAddParserRuleCall_1_4_1_0(), currentNode); 
	    }
		lv_param_7_0=ruleAdd		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"param",
	        		lv_param_7_0, 
	        		"Add", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	')' 
    {
        createLeafNode(grammarAccess.getPrimAccess().getRightParenthesisKeyword_1_5(), null); 
    }
)
    |((
    { 
        temp=factory.create(grammarAccess.getPrimAccess().getPointerAction_2_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPrimAccess().getPointerAction_2_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'=>' 
    {
        createLeafNode(grammarAccess.getPrimAccess().getEqualsSignGreaterThanSignKeyword_2_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimAccess().getTargetPrimParserRuleCall_2_2_0(), currentNode); 
	    }
		lv_target_11_0=rulePrim		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"target",
	        		lv_target_11_0, 
	        		"Prim", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'(' 
    {
        createLeafNode(grammarAccess.getPrimAccess().getLeftParenthesisKeyword_3_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getPrimAccess().getAddParserRuleCall_3_1(), currentNode); 
    }
    this_Add_13=ruleAdd
    { 
        $current = $this_Add_13.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getPrimAccess().getRightParenthesisKeyword_3_2(), null); 
    }
))
;





// Entry rule entryRuleRuleCalls12
entryRuleRuleCalls12 returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRuleCalls12Rule(), currentNode); }
	 iv_ruleRuleCalls12=ruleRuleCalls12 
	 { $current=$iv_ruleRuleCalls12.current; } 
	 EOF 
;

// Rule RuleCalls12
ruleRuleCalls12 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'#7' 
    {
        createLeafNode(grammarAccess.getRuleCalls12Access().getNumberSignDigitSevenKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRuleCalls12Access().getConstructorConstructorParserRuleCall_1_0(), currentNode); 
	    }
		lv_constructor_1_0=ruleConstructor		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRuleCalls12Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"constructor",
	        		lv_constructor_1_0, 
	        		"Constructor", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRuleCalls12Access().getFieldsFieldParserRuleCall_2_0(), currentNode); 
	    }
		lv_fields_2_0=ruleField		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRuleCalls12Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"fields",
	        		lv_fields_2_0, 
	        		"Field", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'kw3' 
    {
        createLeafNode(grammarAccess.getRuleCalls12Access().getKw3Keyword_3(), null); 
    }
)
;





// Entry rule entryRuleConstructor
entryRuleConstructor returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstructorRule(), currentNode); }
	 iv_ruleConstructor=ruleConstructor 
	 { $current=$iv_ruleConstructor.current; } 
	 EOF 
;

// Rule Constructor
ruleConstructor returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getConstructorAccess().getConstructorAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getConstructorAccess().getConstructorAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_kw1_1_0=	'kw1' 
    {
        createLeafNode(grammarAccess.getConstructorAccess().getKw1Kw1Keyword_1_0(), "kw1"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "kw1", true, "kw1", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?)
;





// Entry rule entryRuleField
entryRuleField returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFieldRule(), currentNode); }
	 iv_ruleField=ruleField 
	 { $current=$iv_ruleField.current; } 
	 EOF 
;

// Rule Field
ruleField returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(RULE_ID
    { 
    createLeafNode(grammarAccess.getFieldAccess().getIDTerminalRuleCall_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getFieldAccess().getParameterParserRuleCall_1(), currentNode); 
    }
    this_Parameter_1=ruleParameter
    { 
        $current = $this_Parameter_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterRule(), currentNode); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getParameterAccess().getParameterAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getParameterAccess().getParameterAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_kw2_1_0=	'kw2' 
    {
        createLeafNode(grammarAccess.getParameterAccess().getKw2Kw2Keyword_1_0(), "kw2"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "kw2", true, "kw2", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


