/*
* generated by Xtext
*/
package org.eclipse.xtext.lexer.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.lexer.services.BacktrackingLexerTestLanguageGrammarAccess;

import org.eclipse.xtext.lexer.parser.packrat.consumers.BacktrackingLexerTestLanguageModelConsumer;
import org.eclipse.xtext.lexer.parser.packrat.consumers.BacktrackingLexerTestLanguageAbConsumer;
import org.eclipse.xtext.lexer.parser.packrat.consumers.BacktrackingLexerTestLanguageXbConsumer;
import org.eclipse.xtext.lexer.parser.packrat.consumers.BacktrackingLexerTestLanguageCharAConsumer;
import org.eclipse.xtext.lexer.parser.packrat.consumers.BacktrackingLexerTestLanguageCharbConsumer;
import org.eclipse.xtext.lexer.parser.packrat.consumers.BacktrackingLexerTestLanguageCharXConsumer;
import org.eclipse.xtext.lexer.parser.packrat.consumers.BacktrackingLexerTestLanguageEnumNameConsumer;
import org.eclipse.xtext.lexer.parser.packrat.consumers.BacktrackingLexerTestLanguageWSConsumer;
import org.eclipse.xtext.lexer.parser.packrat.consumers.BacktrackingLexerTestLanguageSL_COMMENTConsumer;

public class BacktrackingLexerTestLanguageParserConfiguration extends AbstractParserConfiguration {

    private BacktrackingLexerTestLanguageModelConsumer modelConsumer;
    private BacktrackingLexerTestLanguageAbConsumer abConsumer;
    private BacktrackingLexerTestLanguageXbConsumer xbConsumer;
    private BacktrackingLexerTestLanguageCharAConsumer charAConsumer;
    private BacktrackingLexerTestLanguageCharbConsumer charbConsumer;
    private BacktrackingLexerTestLanguageCharXConsumer charXConsumer;
    private BacktrackingLexerTestLanguageEnumNameConsumer enumNameConsumer;
    private BacktrackingLexerTestLanguageWSConsumer wsConsumer;
    private BacktrackingLexerTestLanguageSL_COMMENTConsumer slCommentConsumer;

	private BacktrackingLexerTestLanguageGrammarAccess grammarAccess;

	public BacktrackingLexerTestLanguageParserConfiguration(IInternalParserConfiguration configuration, BacktrackingLexerTestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
	}

	public BacktrackingLexerTestLanguageModelConsumer getRootConsumer() {
		return modelConsumer;
	} 

	public void createNonTerminalConsumers() {
		modelConsumer = new BacktrackingLexerTestLanguageModelConsumer(
    		this, null
    	);
		abConsumer = new BacktrackingLexerTestLanguageAbConsumer(
    		this, null
    	);
		xbConsumer = new BacktrackingLexerTestLanguageXbConsumer(
    		this, null
    	);
		enumNameConsumer = new BacktrackingLexerTestLanguageEnumNameConsumer(this, null);
	}
	
	public void createTerminalConsumers() {
		charAConsumer = new BacktrackingLexerTestLanguageCharAConsumer(this);
		charbConsumer = new BacktrackingLexerTestLanguageCharbConsumer(this);
		charXConsumer = new BacktrackingLexerTestLanguageCharXConsumer(this);
		wsConsumer = new BacktrackingLexerTestLanguageWSConsumer(this);
		slCommentConsumer = new BacktrackingLexerTestLanguageSL_COMMENTConsumer(this);
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getModelConsumer().setRule(grammarAccess.getModelAccess());
		getAbConsumer().setRule(grammarAccess.getAbAccess());
		getXbConsumer().setRule(grammarAccess.getXbAccess());
		getCharAConsumer().setRule(grammarAccess.getCharARule());
		getCharbConsumer().setRule(grammarAccess.getCharbRule());
		getCharXConsumer().setRule(grammarAccess.getCharXRule());
		getEnumNameConsumer().setRule(grammarAccess.getEnumNameAccess());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());


		getModelConsumer().setAbConsumer(getAbConsumer());
		getModelConsumer().setEnumNameConsumer(getEnumNameConsumer());
		getModelConsumer().setXbConsumer(getXbConsumer());

		getAbConsumer().setCharAConsumer(getCharAConsumer());
		getAbConsumer().setCharbConsumer(getCharbConsumer());

		getXbConsumer().setCharXConsumer(getCharXConsumer());
		getXbConsumer().setCharbConsumer(getCharbConsumer());

		getAbConsumer().setRuleCall$3$Delimiter(org.eclipse.xtext.lexer.parser.packrat.BacktrackingLexerTestLanguageDelimiters.ruleCall$15$Delimiter);
		getAbConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.lexer.parser.packrat.BacktrackingLexerTestLanguageDelimiters.ruleCall$15$Delimiter);
		getXbConsumer().setRuleCall$3$Delimiter(org.eclipse.xtext.lexer.parser.packrat.BacktrackingLexerTestLanguageDelimiters.ruleCall$15$Delimiter);
		getXbConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.lexer.parser.packrat.BacktrackingLexerTestLanguageDelimiters.ruleCall$15$Delimiter);
	}
	
    public BacktrackingLexerTestLanguageModelConsumer getModelConsumer() {
    	return modelConsumer;
    }

    public BacktrackingLexerTestLanguageAbConsumer getAbConsumer() {
    	return abConsumer;
    }

    public BacktrackingLexerTestLanguageXbConsumer getXbConsumer() {
    	return xbConsumer;
    }

    public BacktrackingLexerTestLanguageCharAConsumer getCharAConsumer() {
    	return charAConsumer;
    }

    public BacktrackingLexerTestLanguageCharbConsumer getCharbConsumer() {
    	return charbConsumer;
    }

    public BacktrackingLexerTestLanguageCharXConsumer getCharXConsumer() {
    	return charXConsumer;
    }

    public BacktrackingLexerTestLanguageEnumNameConsumer getEnumNameConsumer() {
    	return enumNameConsumer;
    }

    public BacktrackingLexerTestLanguageWSConsumer getWsConsumer() {
    	return wsConsumer;
    }

    public BacktrackingLexerTestLanguageSL_COMMENTConsumer getSlCommentConsumer() {
    	return slCommentConsumer;
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return new ITerminalConsumer[]{ getWsConsumer(), getSlCommentConsumer() };
	}
	
}
