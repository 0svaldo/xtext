/*
* generated by Xtext
*/
package org.eclipse.xtext.lexer.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;

import org.eclipse.xtext.lexer.services.BacktrackingLexerTestLanguageGrammarAccess.ModelElements;

@SuppressWarnings("all")
public final class BacktrackingLexerTestLanguageModelConsumer extends NonTerminalConsumer {

	private ModelElements rule;	

	private INonTerminalConsumer abConsumer;

	private INonTerminalConsumer enumNameConsumer;

	private INonTerminalConsumer xbConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer assignment$2$Consumer;

	private IElementConsumer ruleCall$3$Consumer;

	private IElementConsumer assignment$4$Consumer;

	private IElementConsumer ruleCall$5$Consumer;

	private IElementConsumer assignment$6$Consumer;

	private IElementConsumer ruleCall$7$Consumer;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$2$Consumer);
			acceptor.accept(assignment$4$Consumer);
			acceptor.accept(assignment$6$Consumer);
		}
	}

	protected class Assignment$2$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$2$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$3$Consumer;
		}
	}

	protected class RuleCall$3$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$3$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(enumNameConsumer, "enums", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$4$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$4$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$5$Consumer;
		}
	}

	protected class RuleCall$5$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$5$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(abConsumer, "abs", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$6$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$6$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$7$Consumer;
		}
	}

	protected class RuleCall$7$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$7$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(xbConsumer, "xbs", true, false, false, getElement(), optional);
		}
	}

	public BacktrackingLexerTestLanguageModelConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public ModelElements getRule() {
		return rule;
	}
	
	public void setRule(ModelElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		assignment$2$Consumer = new Assignment$2$Consumer(rule.getEnumsAssignment_0());
		ruleCall$3$Consumer = new RuleCall$3$Consumer(rule.getEnumsEnumNameEnumRuleCall_0_0());
		assignment$4$Consumer = new Assignment$4$Consumer(rule.getAbsAssignment_1());
		ruleCall$5$Consumer = new RuleCall$5$Consumer(rule.getAbsAbParserRuleCall_1_0());
		assignment$6$Consumer = new Assignment$6$Consumer(rule.getXbsAssignment_2());
		ruleCall$7$Consumer = new RuleCall$7$Consumer(rule.getXbsXbParserRuleCall_2_0());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setAbConsumer(INonTerminalConsumer abConsumer) {
		this.abConsumer = abConsumer;
	}
	
	public void setEnumNameConsumer(INonTerminalConsumer enumNameConsumer) {
		this.enumNameConsumer = enumNameConsumer;
	}
	
	public void setXbConsumer(INonTerminalConsumer xbConsumer) {
		this.xbConsumer = xbConsumer;
	}
	
}
