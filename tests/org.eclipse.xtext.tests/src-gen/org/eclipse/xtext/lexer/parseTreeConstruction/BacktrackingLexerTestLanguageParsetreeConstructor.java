/*
* generated by Xtext
*/
package org.eclipse.xtext.lexer.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.lexer.services.BacktrackingLexerTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class BacktrackingLexerTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private BacktrackingLexerTestLanguageGrammarAccess grammarAccess;
	
	@Override	
	public BacktrackingLexerTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Group(this, this, 0, inst);
			case 1: return new Ab_Group(this, this, 1, inst);
			case 2: return new Xb_Group(this, this, 2, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 *   enums+=EnumName* abs+=Ab* xbs+=Xb*;
 *
 **/

// enums+=EnumName* abs+=Ab* xbs+=Xb*
protected class Model_Group extends GroupToken {
	
	public Model_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_XbsAssignment_2(parent, this, 0, inst);
			case 1: return new Model_AbsAssignment_1(parent, this, 1, inst);
			case 2: return new Model_EnumsAssignment_0(parent, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getModelRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// enums+=EnumName*
protected class Model_EnumsAssignment_0 extends AssignmentToken  {
	
	public Model_EnumsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getEnumsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_EnumsAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("enums",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("enums");
		if(Boolean.TRUE.booleanValue()) {  
			type = AssignmentType.ERC;
			element = grammarAccess.getModelAccess().getEnumsEnumNameEnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// abs+=Ab*
protected class Model_AbsAssignment_1 extends AssignmentToken  {
	
	public Model_AbsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getAbsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Ab_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("abs",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("abs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getAbsAbParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_AbsAssignment_1(parent, next, actIndex, consumed);
			case 1: return new Model_EnumsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}

// xbs+=Xb*
protected class Model_XbsAssignment_2 extends AssignmentToken  {
	
	public Model_XbsAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getXbsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Xb_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("xbs",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("xbs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXbRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getXbsXbParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_XbsAssignment_2(parent, next, actIndex, consumed);
			case 1: return new Model_AbsAssignment_1(parent, next, actIndex, consumed);
			case 2: return new Model_EnumsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 3, consumed);
		}	
	}	
}


/************ end Rule Model ****************/


/************ begin Rule Ab ****************
 *
 * Ab:
 *   x=CharA y=Charb;
 *
 **/

// x=CharA y=Charb
protected class Ab_Group extends GroupToken {
	
	public Ab_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAbAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Ab_YAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getAbRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// x=CharA
protected class Ab_XAssignment_0 extends AssignmentToken  {
	
	public Ab_XAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAbAccess().getXAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getAbAccess().getXCharATerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// y=Charb
protected class Ab_YAssignment_1 extends AssignmentToken  {
	
	public Ab_YAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAbAccess().getYAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Ab_XAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("y",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("y");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getAbAccess().getYCharbTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Ab ****************/


/************ begin Rule Xb ****************
 *
 * Xb:
 *   x=CharX y=Charb;
 *
 **/

// x=CharX y=Charb
protected class Xb_Group extends GroupToken {
	
	public Xb_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getXbAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Xb_YAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getXbRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// x=CharX
protected class Xb_XAssignment_0 extends AssignmentToken  {
	
	public Xb_XAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXbAccess().getXAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("x",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("x");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getXbAccess().getXCharXTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// y=Charb
protected class Xb_YAssignment_1 extends AssignmentToken  {
	
	public Xb_YAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXbAccess().getYAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Xb_XAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("y",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("y");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getXbAccess().getYCharbTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Xb ****************/

}
