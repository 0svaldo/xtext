/*
* generated by Xtext
*/
package org.eclipse.xtext.resource.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.resource.services.EObjectAtOffsetTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class EObjectAtOffsetTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private EObjectAtOffsetTestLanguageGrammarAccess grammarAccess;
	
	@Override	
	public EObjectAtOffsetTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Alternatives(this, this, 0, inst);
			case 1: return new AbstractBar_Group(this, this, 1, inst);
			case 2: return new Bar_Group(this, this, 2, inst);
			case 3: return new Foo_Group(this, this, 3, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 *   (foos+=Foo|bars+=AbstractBar)*;
 *
 **/

// (foos+=Foo|bars+=AbstractBar)*
protected class Model_Alternatives extends AlternativesToken {

	public Model_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getModelAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_FoosAssignment_0(parent, this, 0, inst);
			case 1: return new Model_BarsAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// foos+=Foo
protected class Model_FoosAssignment_0 extends AssignmentToken  {
	
	public Model_FoosAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getFoosAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Foo_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("foos",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("foos");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFooRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getFoosFooParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_Alternatives(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// bars+=AbstractBar
protected class Model_BarsAssignment_1 extends AssignmentToken  {
	
	public Model_BarsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getBarsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbstractBar_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("bars",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("bars");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbstractBarRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getBarsAbstractBarParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_Alternatives(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule Model ****************/


/************ begin Rule AbstractBar ****************
 *
 * AbstractBar:
 *   Bar ({FooBar.bar=current} "foobar" foo+=[Foo])?;
 *
 **/

// Bar ({FooBar.bar=current} "foobar" foo+=[Foo])?
protected class AbstractBar_Group extends GroupToken {
	
	public AbstractBar_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAbstractBarAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbstractBar_Group_1(parent, this, 0, inst);
			case 1: return new AbstractBar_BarParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAbstractBarRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Bar
protected class AbstractBar_BarParserRuleCall_0 extends RuleCallToken {
	
	public AbstractBar_BarParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractBarAccess().getBarParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Bar_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Bar_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBarRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({FooBar.bar=current} "foobar" foo+=[Foo])?
protected class AbstractBar_Group_1 extends GroupToken {
	
	public AbstractBar_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAbstractBarAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbstractBar_FooAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {FooBar.bar=current}
protected class AbstractBar_FooBarBarAction_1_0 extends ActionToken  {

	public AbstractBar_FooBarBarAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAbstractBarAccess().getFooBarBarAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbstractBar_BarParserRuleCall_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getAbstractBarAccess().getFooBarBarAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("bar", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("bar")) return null;
		return getDescr((EObject) val);
	}
}

// "foobar"
protected class AbstractBar_FoobarKeyword_1_1 extends KeywordToken  {
	
	public AbstractBar_FoobarKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAbstractBarAccess().getFoobarKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbstractBar_FooBarBarAction_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// foo+=[Foo]
protected class AbstractBar_FooAssignment_1_2 extends AssignmentToken  {
	
	public AbstractBar_FooAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAbstractBarAccess().getFooAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbstractBar_FoobarKeyword_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("foo",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("foo");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbstractBarAccess().getFooFooCrossReference_1_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAbstractBarAccess().getFooFooCrossReference_1_2_0(); 
				return obj;
			}
		}
		return null;
	}

}



/************ end Rule AbstractBar ****************/


/************ begin Rule Bar ****************
 *
 * Bar:
 *   "bar" name=ID foo+=[Foo] ("," foo+=[Foo])*;
 *
 **/

// "bar" name=ID foo+=[Foo] ("," foo+=[Foo])*
protected class Bar_Group extends GroupToken {
	
	public Bar_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBarAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Bar_Group_3(parent, this, 0, inst);
			case 1: return new Bar_FooAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBarRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "bar"
protected class Bar_BarKeyword_0 extends KeywordToken  {
	
	public Bar_BarKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBarAccess().getBarKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Bar_NameAssignment_1 extends AssignmentToken  {
	
	public Bar_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBarAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Bar_BarKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getBarAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// foo+=[Foo]
protected class Bar_FooAssignment_2 extends AssignmentToken  {
	
	public Bar_FooAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBarAccess().getFooAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Bar_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("foo",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("foo");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBarAccess().getFooFooCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getBarAccess().getFooFooCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("," foo+=[Foo])*
protected class Bar_Group_3 extends GroupToken {
	
	public Bar_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBarAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Bar_FooAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Bar_CommaKeyword_3_0 extends KeywordToken  {
	
	public Bar_CommaKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBarAccess().getCommaKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Bar_Group_3(parent, this, 0, inst);
			case 1: return new Bar_FooAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// foo+=[Foo]
protected class Bar_FooAssignment_3_1 extends AssignmentToken  {
	
	public Bar_FooAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBarAccess().getFooAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Bar_CommaKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("foo",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("foo");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBarAccess().getFooFooCrossReference_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getBarAccess().getFooFooCrossReference_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}



/************ end Rule Bar ****************/


/************ begin Rule Foo ****************
 *
 * Foo:
 *   "foo" name=ID;
 *
 **/

// "foo" name=ID
protected class Foo_Group extends GroupToken {
	
	public Foo_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFooAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Foo_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFooRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "foo"
protected class Foo_FooKeyword_0 extends KeywordToken  {
	
	public Foo_FooKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFooAccess().getFooKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Foo_NameAssignment_1 extends AssignmentToken  {
	
	public Foo_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFooAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Foo_FooKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getFooAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Foo ****************/

}
