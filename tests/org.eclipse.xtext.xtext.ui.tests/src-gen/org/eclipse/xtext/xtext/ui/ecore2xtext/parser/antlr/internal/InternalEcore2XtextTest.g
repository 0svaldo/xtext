/*
* generated by Xtext
*/
grammar InternalEcore2XtextTest;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.xtext.ui.ecore2xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.xtext.ui.ecore2xtext.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.xtext.ui.ecore2xtext.services.Ecore2XtextTestGrammarAccess;

}

@parser::members {

 	private Ecore2XtextTestGrammarAccess grammarAccess;
 	
    public InternalEcore2XtextTestParser(TokenStream input, IAstFactory factory, Ecore2XtextTestGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/xtext/xtext/ui/ecore2xtext/parser/antlr/internal/InternalEcore2XtextTest.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Root";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRoot
entryRuleRoot returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRootRule(), currentNode); }
	 iv_ruleRoot=ruleRoot 
	 { $current=$iv_ruleRoot.current; } 
	 EOF 
;

// Rule Root
ruleRoot returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getRootAccess().getRootAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRootAccess().getRootAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'Root' 
    {
        createLeafNode(grammarAccess.getRootAccess().getRootKeyword_1(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getRootAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(	'name' 
    {
        createLeafNode(grammarAccess.getRootAccess().getNameKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRootAccess().getNameINT0ParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_name_4_0=ruleINT0		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRootRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"INT0", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'classes' 
    {
        createLeafNode(grammarAccess.getRootAccess().getClassesKeyword_4_0(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getRootAccess().getLeftCurlyBracketKeyword_4_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRootAccess().getClassesAbstractParserRuleCall_4_2_0(), currentNode); 
	    }
		lv_classes_7_0=ruleAbstract		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRootRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"classes",
	        		lv_classes_7_0, 
	        		"Abstract", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getRootAccess().getCommaKeyword_4_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRootAccess().getClassesAbstractParserRuleCall_4_3_1_0(), currentNode); 
	    }
		lv_classes_9_0=ruleAbstract		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRootRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"classes",
	        		lv_classes_9_0, 
	        		"Abstract", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getRootAccess().getRightCurlyBracketKeyword_4_4(), null); 
    }
)?	'}' 
    {
        createLeafNode(grammarAccess.getRootAccess().getRightCurlyBracketKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleAbstract
entryRuleAbstract returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbstractRule(), currentNode); }
	 iv_ruleAbstract=ruleAbstract 
	 { $current=$iv_ruleAbstract.current; } 
	 EOF 
;

// Rule Abstract
ruleAbstract returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractAccess().getConcrete0ParserRuleCall_0(), currentNode); 
    }
    this_Concrete0_0=ruleConcrete0
    { 
        $current = $this_Concrete0_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractAccess().getConcrete1ParserRuleCall_1(), currentNode); 
    }
    this_Concrete1_1=ruleConcrete1
    { 
        $current = $this_Concrete1_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleConcrete0
entryRuleConcrete0 returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConcrete0Rule(), currentNode); }
	 iv_ruleConcrete0=ruleConcrete0 
	 { $current=$iv_ruleConcrete0.current; } 
	 EOF 
;

// Rule Concrete0
ruleConcrete0 returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getConcrete0Access().getConcrete0Action_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getConcrete0Access().getConcrete0Action_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'Concrete0' 
    {
        createLeafNode(grammarAccess.getConcrete0Access().getConcrete0Keyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConcrete0Access().getNameEStringParserRuleCall_2_0(), currentNode); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcrete0Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"EString", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleConcrete1
entryRuleConcrete1 returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConcrete1Rule(), currentNode); }
	 iv_ruleConcrete1=ruleConcrete1 
	 { $current=$iv_ruleConcrete1.current; } 
	 EOF 
;

// Rule Concrete1
ruleConcrete1 returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getConcrete1Access().getConcrete1Action_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getConcrete1Access().getConcrete1Action_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'Concrete1' 
    {
        createLeafNode(grammarAccess.getConcrete1Access().getConcrete1Keyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConcrete1Access().getNameEStringParserRuleCall_2_0(), currentNode); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcrete1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"EString", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleINT0
entryRuleINT0 returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getINT0Rule(), currentNode); } 
	 iv_ruleINT0=ruleINT0 
	 { $current=$iv_ruleINT0.current.getText(); }  
	 EOF 
;

// Rule INT0
ruleINT0 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='INT' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getINT0Access().getINTKeyword(), null); 
    }

    ;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEStringRule(), currentNode); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0(), null); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    createLeafNode(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1(), null); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


