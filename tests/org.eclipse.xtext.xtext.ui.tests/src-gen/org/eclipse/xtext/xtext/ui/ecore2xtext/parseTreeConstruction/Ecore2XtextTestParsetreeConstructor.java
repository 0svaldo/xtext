/*
* generated by Xtext
*/
package org.eclipse.xtext.xtext.ui.ecore2xtext.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.xtext.ui.ecore2xtext.services.Ecore2XtextTestGrammarAccess;

import com.google.inject.Inject;

public class Ecore2XtextTestParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private Ecore2XtextTestGrammarAccess grammarAccess;
	
	@Override	
	public Ecore2XtextTestGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_Group(this, this, 0, inst);
			case 1: return new Abstract_Alternatives(this, this, 1, inst);
			case 2: return new Concrete0_Group(this, this, 2, inst);
			case 3: return new Concrete1_Group(this, this, 3, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Root ****************
 *
 * Root:
 *   {Root} "Root" name=INT0 "{" ("classes" "{" classes+=Abstract ("," classes+=Abstract)* "}"
 *   )? "}";
 *
 **/

// {Root} "Root" name=INT0 "{" ("classes" "{" classes+=Abstract ("," classes+=Abstract)* "}"
// )? "}"
protected class Root_Group extends GroupToken {
	
	public Root_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRootAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_RightCurlyBracketKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRootRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {Root}
protected class Root_RootAction_0 extends ActionToken  {

	public Root_RootAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRootAccess().getRootAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getRootAccess().getRootAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "Root"
protected class Root_RootKeyword_1 extends KeywordToken  {
	
	public Root_RootKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRootAccess().getRootKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_RootAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=INT0
protected class Root_NameAssignment_2 extends AssignmentToken  {
	
	public Root_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRootAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_RootKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getRootAccess().getNameINT0ParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class Root_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public Root_LeftCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRootAccess().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("classes" "{" classes+=Abstract ("," classes+=Abstract)* "}")?
protected class Root_Group_4 extends GroupToken {
	
	public Root_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRootAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_RightCurlyBracketKeyword_4_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "classes"
protected class Root_ClassesKeyword_4_0 extends KeywordToken  {
	
	public Root_ClassesKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRootAccess().getClassesKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_LeftCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Root_LeftCurlyBracketKeyword_4_1 extends KeywordToken  {
	
	public Root_LeftCurlyBracketKeyword_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRootAccess().getLeftCurlyBracketKeyword_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_ClassesKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// classes+=Abstract
protected class Root_ClassesAssignment_4_2 extends AssignmentToken  {
	
	public Root_ClassesAssignment_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRootAccess().getClassesAssignment_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Abstract_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("classes",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("classes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbstractRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRootAccess().getClassesAbstractParserRuleCall_4_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Root_LeftCurlyBracketKeyword_4_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," classes+=Abstract)*
protected class Root_Group_4_3 extends GroupToken {
	
	public Root_Group_4_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRootAccess().getGroup_4_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_ClassesAssignment_4_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Root_CommaKeyword_4_3_0 extends KeywordToken  {
	
	public Root_CommaKeyword_4_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRootAccess().getCommaKeyword_4_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_Group_4_3(parent, this, 0, inst);
			case 1: return new Root_ClassesAssignment_4_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// classes+=Abstract
protected class Root_ClassesAssignment_4_3_1 extends AssignmentToken  {
	
	public Root_ClassesAssignment_4_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRootAccess().getClassesAssignment_4_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Abstract_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("classes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("classes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbstractRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRootAccess().getClassesAbstractParserRuleCall_4_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Root_CommaKeyword_4_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class Root_RightCurlyBracketKeyword_4_4 extends KeywordToken  {
	
	public Root_RightCurlyBracketKeyword_4_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRootAccess().getRightCurlyBracketKeyword_4_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_Group_4_3(parent, this, 0, inst);
			case 1: return new Root_ClassesAssignment_4_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// "}"
protected class Root_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public Root_RightCurlyBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRootAccess().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Root_Group_4(parent, this, 0, inst);
			case 1: return new Root_LeftCurlyBracketKeyword_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Root ****************/


/************ begin Rule Abstract ****************
 *
 * Abstract:
 *   Concrete0|Concrete1;
 *
 **/

// Concrete0|Concrete1
protected class Abstract_Alternatives extends AlternativesToken {

	public Abstract_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAbstractAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Abstract_Concrete0ParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Abstract_Concrete1ParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAbstractRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Concrete0
protected class Abstract_Concrete0ParserRuleCall_0 extends RuleCallToken {
	
	public Abstract_Concrete0ParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractAccess().getConcrete0ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Concrete0_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Concrete0_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getConcrete0Rule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Concrete1
protected class Abstract_Concrete1ParserRuleCall_1 extends RuleCallToken {
	
	public Abstract_Concrete1ParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractAccess().getConcrete1ParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Concrete1_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Concrete1_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getConcrete1Rule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Abstract ****************/


/************ begin Rule Concrete0 ****************
 *
 * Concrete0:
 *   {Concrete0} "Concrete0" name=EString;
 *
 **/

// {Concrete0} "Concrete0" name=EString
protected class Concrete0_Group extends GroupToken {
	
	public Concrete0_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConcrete0Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Concrete0_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConcrete0Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {Concrete0}
protected class Concrete0_Concrete0Action_0 extends ActionToken  {

	public Concrete0_Concrete0Action_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getConcrete0Access().getConcrete0Action_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getConcrete0Access().getConcrete0Action_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "Concrete0"
protected class Concrete0_Concrete0Keyword_1 extends KeywordToken  {
	
	public Concrete0_Concrete0Keyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConcrete0Access().getConcrete0Keyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Concrete0_Concrete0Action_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=EString
protected class Concrete0_NameAssignment_2 extends AssignmentToken  {
	
	public Concrete0_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConcrete0Access().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Concrete0_Concrete0Keyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getConcrete0Access().getNameEStringParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Concrete0 ****************/


/************ begin Rule Concrete1 ****************
 *
 * Concrete1:
 *   {Concrete1} "Concrete1" name=EString;
 *
 **/

// {Concrete1} "Concrete1" name=EString
protected class Concrete1_Group extends GroupToken {
	
	public Concrete1_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConcrete1Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Concrete1_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConcrete1Rule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {Concrete1}
protected class Concrete1_Concrete1Action_0 extends ActionToken  {

	public Concrete1_Concrete1Action_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getConcrete1Access().getConcrete1Action_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getConcrete1Access().getConcrete1Action_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "Concrete1"
protected class Concrete1_Concrete1Keyword_1 extends KeywordToken  {
	
	public Concrete1_Concrete1Keyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConcrete1Access().getConcrete1Keyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Concrete1_Concrete1Action_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=EString
protected class Concrete1_NameAssignment_2 extends AssignmentToken  {
	
	public Concrete1_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConcrete1Access().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Concrete1_Concrete1Keyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getConcrete1Access().getNameEStringParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Concrete1 ****************/



}
