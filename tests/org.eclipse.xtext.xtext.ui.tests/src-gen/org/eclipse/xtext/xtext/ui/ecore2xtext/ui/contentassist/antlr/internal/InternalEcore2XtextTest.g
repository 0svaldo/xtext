/*
* generated by Xtext
*/
grammar InternalEcore2XtextTest;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipse.xtext.xtext.ui.ecore2xtext.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.xtext.xtext.ui.ecore2xtext.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.xtext.ui.ecore2xtext.services.Ecore2XtextTestGrammarAccess;

}

@parser::members {
 
 	private Ecore2XtextTestGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(Ecore2XtextTestGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleRoot
entryRuleRoot 
:
{ before(grammarAccess.getRootRule()); }
	 ruleRoot
{ after(grammarAccess.getRootRule()); } 
	 EOF 
;

// Rule Root
ruleRoot
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRootAccess().getGroup()); }
(rule__Root__Group__0)
{ after(grammarAccess.getRootAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstract
entryRuleAbstract 
:
{ before(grammarAccess.getAbstractRule()); }
	 ruleAbstract
{ after(grammarAccess.getAbstractRule()); } 
	 EOF 
;

// Rule Abstract
ruleAbstract
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractAccess().getAlternatives()); }
(rule__Abstract__Alternatives)
{ after(grammarAccess.getAbstractAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConcrete0
entryRuleConcrete0 
:
{ before(grammarAccess.getConcrete0Rule()); }
	 ruleConcrete0
{ after(grammarAccess.getConcrete0Rule()); } 
	 EOF 
;

// Rule Concrete0
ruleConcrete0
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConcrete0Access().getGroup()); }
(rule__Concrete0__Group__0)
{ after(grammarAccess.getConcrete0Access().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConcrete1
entryRuleConcrete1 
:
{ before(grammarAccess.getConcrete1Rule()); }
	 ruleConcrete1
{ after(grammarAccess.getConcrete1Rule()); } 
	 EOF 
;

// Rule Concrete1
ruleConcrete1
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConcrete1Access().getGroup()); }
(rule__Concrete1__Group__0)
{ after(grammarAccess.getConcrete1Access().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleINT0
entryRuleINT0 
:
{ before(grammarAccess.getINT0Rule()); }
	 ruleINT0
{ after(grammarAccess.getINT0Rule()); } 
	 EOF 
;

// Rule INT0
ruleINT0
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getINT0Access().getINTKeyword()); }

	'INT' 

{ after(grammarAccess.getINT0Access().getINTKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEString
entryRuleEString 
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEStringAccess().getAlternatives()); }
(rule__EString__Alternatives)
{ after(grammarAccess.getEStringAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Abstract__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractAccess().getConcrete0ParserRuleCall_0()); }
	ruleConcrete0
{ after(grammarAccess.getAbstractAccess().getConcrete0ParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAbstractAccess().getConcrete1ParserRuleCall_1()); }
	ruleConcrete1
{ after(grammarAccess.getAbstractAccess().getConcrete1ParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Root__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getRootAction_0()); }
(

)
{ after(grammarAccess.getRootAccess().getRootAction_0()); }
)

	rule__Root__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Root__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getRootKeyword_1()); }

	'Root' 

{ after(grammarAccess.getRootAccess().getRootKeyword_1()); }
)

	rule__Root__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Root__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getNameAssignment_2()); }
(rule__Root__NameAssignment_2)
{ after(grammarAccess.getRootAccess().getNameAssignment_2()); }
)

	rule__Root__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Root__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getRootAccess().getLeftCurlyBracketKeyword_3()); }
)

	rule__Root__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__Root__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getGroup_4()); }
(rule__Root__Group_4__0)?
{ after(grammarAccess.getRootAccess().getGroup_4()); }
)

	rule__Root__Group__5
;
finally {
	restoreStackSize(stackSize);
}


rule__Root__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getRootAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Root__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getClassesKeyword_4_0()); }

	'classes' 

{ after(grammarAccess.getRootAccess().getClassesKeyword_4_0()); }
)

	rule__Root__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Root__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getLeftCurlyBracketKeyword_4_1()); }

	'{' 

{ after(grammarAccess.getRootAccess().getLeftCurlyBracketKeyword_4_1()); }
)

	rule__Root__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Root__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getClassesAssignment_4_2()); }
(rule__Root__ClassesAssignment_4_2)
{ after(grammarAccess.getRootAccess().getClassesAssignment_4_2()); }
)

	rule__Root__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Root__Group_4__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getGroup_4_3()); }
(rule__Root__Group_4_3__0)*
{ after(grammarAccess.getRootAccess().getGroup_4_3()); }
)

	rule__Root__Group_4__4
;
finally {
	restoreStackSize(stackSize);
}


rule__Root__Group_4__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getRightCurlyBracketKeyword_4_4()); }

	'}' 

{ after(grammarAccess.getRootAccess().getRightCurlyBracketKeyword_4_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Root__Group_4_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getCommaKeyword_4_3_0()); }

	',' 

{ after(grammarAccess.getRootAccess().getCommaKeyword_4_3_0()); }
)

	rule__Root__Group_4_3__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Root__Group_4_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getClassesAssignment_4_3_1()); }
(rule__Root__ClassesAssignment_4_3_1)
{ after(grammarAccess.getRootAccess().getClassesAssignment_4_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Concrete0__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcrete0Access().getConcrete0Action_0()); }
(

)
{ after(grammarAccess.getConcrete0Access().getConcrete0Action_0()); }
)

	rule__Concrete0__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Concrete0__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcrete0Access().getConcrete0Keyword_1()); }

	'Concrete0' 

{ after(grammarAccess.getConcrete0Access().getConcrete0Keyword_1()); }
)

	rule__Concrete0__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Concrete0__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcrete0Access().getNameAssignment_2()); }
(rule__Concrete0__NameAssignment_2)
{ after(grammarAccess.getConcrete0Access().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Concrete1__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcrete1Access().getConcrete1Action_0()); }
(

)
{ after(grammarAccess.getConcrete1Access().getConcrete1Action_0()); }
)

	rule__Concrete1__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Concrete1__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcrete1Access().getConcrete1Keyword_1()); }

	'Concrete1' 

{ after(grammarAccess.getConcrete1Access().getConcrete1Keyword_1()); }
)

	rule__Concrete1__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Concrete1__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcrete1Access().getNameAssignment_2()); }
(rule__Concrete1__NameAssignment_2)
{ after(grammarAccess.getConcrete1Access().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Root__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getNameINT0ParserRuleCall_2_0()); }
	ruleINT0{ after(grammarAccess.getRootAccess().getNameINT0ParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Root__ClassesAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getClassesAbstractParserRuleCall_4_2_0()); }
	ruleAbstract{ after(grammarAccess.getRootAccess().getClassesAbstractParserRuleCall_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Root__ClassesAssignment_4_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getClassesAbstractParserRuleCall_4_3_1_0()); }
	ruleAbstract{ after(grammarAccess.getRootAccess().getClassesAbstractParserRuleCall_4_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Concrete0__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcrete0Access().getNameEStringParserRuleCall_2_0()); }
	ruleEString{ after(grammarAccess.getConcrete0Access().getNameEStringParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Concrete1__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcrete1Access().getNameEStringParserRuleCall_2_0()); }
	ruleEString{ after(grammarAccess.getConcrete1Access().getNameEStringParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


