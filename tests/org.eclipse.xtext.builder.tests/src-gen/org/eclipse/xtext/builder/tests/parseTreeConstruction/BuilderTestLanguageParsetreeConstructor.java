/*
* generated by Xtext
*/
package org.eclipse.xtext.builder.tests.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.builder.tests.services.BuilderTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class BuilderTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private BuilderTestLanguageGrammarAccess grammarAccess;
	
	@Override	
	public BuilderTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedElement_Alternatives(this, this, 0, inst);
			case 1: return new Namespace_Group(this, this, 1, inst);
			case 2: return new Import_Group(this, this, 2, inst);
			case 3: return new Element_Group(this, this, 3, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule NamedElement ****************
 *
 * NamedElement:
 *   Namespace|Element;
 *
 **/

// Namespace|Element
protected class NamedElement_Alternatives extends AlternativesToken {

	public NamedElement_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getNamedElementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedElement_NamespaceParserRuleCall_0(parent, this, 0, inst);
			case 1: return new NamedElement_ElementParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNamedElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Namespace
protected class NamedElement_NamespaceParserRuleCall_0 extends RuleCallToken {
	
	public NamedElement_NamespaceParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNamedElementAccess().getNamespaceParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Namespace_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Namespace_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getNamespaceRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Element
protected class NamedElement_ElementParserRuleCall_1 extends RuleCallToken {
	
	public NamedElement_ElementParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNamedElementAccess().getElementParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Element_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getElementRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule NamedElement ****************/


/************ begin Rule Namespace ****************
 *
 * Namespace:
 *   "namespace" name=QualifiedName "{" imports+=Import* elements+=NamedElement* "}";
 *
 **/

// "namespace" name=QualifiedName "{" imports+=Import* elements+=NamedElement* "}"
protected class Namespace_Group extends GroupToken {
	
	public Namespace_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNamespaceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Namespace_RightCurlyBracketKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNamespaceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "namespace"
protected class Namespace_NamespaceKeyword_0 extends KeywordToken  {
	
	public Namespace_NamespaceKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNamespaceAccess().getNamespaceKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=QualifiedName
protected class Namespace_NameAssignment_1 extends AssignmentToken  {
	
	public Namespace_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNamespaceAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Namespace_NamespaceKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getNamespaceAccess().getNameQualifiedNameParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class Namespace_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public Namespace_LeftCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNamespaceAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Namespace_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// imports+=Import*
protected class Namespace_ImportsAssignment_3 extends AssignmentToken  {
	
	public Namespace_ImportsAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNamespaceAccess().getImportsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("imports",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("imports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getNamespaceAccess().getImportsImportParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Namespace_ImportsAssignment_3(parent, next, actIndex, consumed);
			case 1: return new Namespace_LeftCurlyBracketKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// elements+=NamedElement*
protected class Namespace_ElementsAssignment_4 extends AssignmentToken  {
	
	public Namespace_ElementsAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNamespaceAccess().getElementsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNamedElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getNamespaceAccess().getElementsNamedElementParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Namespace_ElementsAssignment_4(parent, next, actIndex, consumed);
			case 1: return new Namespace_ImportsAssignment_3(parent, next, actIndex, consumed);
			case 2: return new Namespace_LeftCurlyBracketKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Namespace_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public Namespace_RightCurlyBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNamespaceAccess().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Namespace_ElementsAssignment_4(parent, this, 0, inst);
			case 1: return new Namespace_ImportsAssignment_3(parent, this, 1, inst);
			case 2: return new Namespace_LeftCurlyBracketKeyword_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Namespace ****************/


/************ begin Rule Import ****************
 *
 * Import:
 *   "import" importedNamespace=QualifiedName;
 *
 **/

// "import" importedNamespace=QualifiedName
protected class Import_Group extends GroupToken {
	
	public Import_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImportAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ImportedNamespaceAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "import"
protected class Import_ImportKeyword_0 extends KeywordToken  {
	
	public Import_ImportKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getImportKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// importedNamespace=QualifiedName
protected class Import_ImportedNamespaceAssignment_1 extends AssignmentToken  {
	
	public Import_ImportedNamespaceAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getImportedNamespaceAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ImportKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("importedNamespace",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("importedNamespace");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Import ****************/


/************ begin Rule Element ****************
 *
 * Element:
 *   "object" name=ID ("references" references=[Element|QualifiedName])? ("otherRefs"
 *   otherRefs+=[Element|QualifiedName] ("," otherRefs+=[Element|QualifiedName])*)?;
 *
 **/

// "object" name=ID ("references" references=[Element|QualifiedName])? ("otherRefs"
// otherRefs+=[Element|QualifiedName] ("," otherRefs+=[Element|QualifiedName])*)?
protected class Element_Group extends GroupToken {
	
	public Element_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_Group_3(parent, this, 0, inst);
			case 1: return new Element_Group_2(parent, this, 1, inst);
			case 2: return new Element_NameAssignment_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "object"
protected class Element_ObjectKeyword_0 extends KeywordToken  {
	
	public Element_ObjectKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElementAccess().getObjectKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Element_NameAssignment_1 extends AssignmentToken  {
	
	public Element_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_ObjectKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getElementAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("references" references=[Element|QualifiedName])?
protected class Element_Group_2 extends GroupToken {
	
	public Element_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElementAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_ReferencesAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "references"
protected class Element_ReferencesKeyword_2_0 extends KeywordToken  {
	
	public Element_ReferencesKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElementAccess().getReferencesKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// references=[Element|QualifiedName]
protected class Element_ReferencesAssignment_2_1 extends AssignmentToken  {
	
	public Element_ReferencesAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementAccess().getReferencesAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_ReferencesKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("references",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("references");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementAccess().getReferencesElementCrossReference_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getElementAccess().getReferencesElementCrossReference_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// ("otherRefs" otherRefs+=[Element|QualifiedName] ("," otherRefs+=[Element|
// QualifiedName])*)?
protected class Element_Group_3 extends GroupToken {
	
	public Element_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElementAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_Group_3_2(parent, this, 0, inst);
			case 1: return new Element_OtherRefsAssignment_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "otherRefs"
protected class Element_OtherRefsKeyword_3_0 extends KeywordToken  {
	
	public Element_OtherRefsKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElementAccess().getOtherRefsKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_Group_2(parent, this, 0, inst);
			case 1: return new Element_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// otherRefs+=[Element|QualifiedName]
protected class Element_OtherRefsAssignment_3_1 extends AssignmentToken  {
	
	public Element_OtherRefsAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementAccess().getOtherRefsAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_OtherRefsKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("otherRefs",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("otherRefs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementAccess().getOtherRefsElementCrossReference_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getElementAccess().getOtherRefsElementCrossReference_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("," otherRefs+=[Element|QualifiedName])*
protected class Element_Group_3_2 extends GroupToken {
	
	public Element_Group_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElementAccess().getGroup_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_OtherRefsAssignment_3_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Element_CommaKeyword_3_2_0 extends KeywordToken  {
	
	public Element_CommaKeyword_3_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElementAccess().getCommaKeyword_3_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_Group_3_2(parent, this, 0, inst);
			case 1: return new Element_OtherRefsAssignment_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// otherRefs+=[Element|QualifiedName]
protected class Element_OtherRefsAssignment_3_2_1 extends AssignmentToken  {
	
	public Element_OtherRefsAssignment_3_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementAccess().getOtherRefsAssignment_3_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_CommaKeyword_3_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("otherRefs",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("otherRefs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementAccess().getOtherRefsElementCrossReference_3_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getElementAccess().getOtherRefsElementCrossReference_3_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}




/************ end Rule Element ****************/


}
