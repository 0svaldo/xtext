/*
 * generated by Xtext
 */
package org.eclipse.xtext.ui.tests.editor.contentassist.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug360834TestLanguage.Alternative;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug360834TestLanguage.Bug360834TestLanguagePackage;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug360834TestLanguage.ClassMember;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug360834TestLanguage.Model;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug360834TestLanguage.Modifiers;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug360834TestLanguage.RecursiveClassDeclaration;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug360834TestLanguage.SimpleClassDeclaration;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug360834TestLanguage.Unordered;
import org.eclipse.xtext.ui.tests.editor.contentassist.services.Bug360834TestLanguageGrammarAccess;

@SuppressWarnings("all")
public class Bug360834TestLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private Bug360834TestLanguageGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == Bug360834TestLanguagePackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case Bug360834TestLanguagePackage.ALTERNATIVE:
				sequence_Alternative(context, (Alternative) semanticObject); 
				return; 
			case Bug360834TestLanguagePackage.CLASS_MEMBER:
				sequence_ClassMember(context, (ClassMember) semanticObject); 
				return; 
			case Bug360834TestLanguagePackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case Bug360834TestLanguagePackage.MODIFIERS:
				if(context == grammarAccess.getAlternativeClassModifiersRule()) {
					sequence_AlternativeClassModifiers(context, (Modifiers) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getUnorderedModifiersRule()) {
					sequence_UnorderedModifiers(context, (Modifiers) semanticObject); 
					return; 
				}
				else break;
			case Bug360834TestLanguagePackage.RECURSIVE_CLASS_DECLARATION:
				sequence_RecursiveClassDeclaration(context, (RecursiveClassDeclaration) semanticObject); 
				return; 
			case Bug360834TestLanguagePackage.SIMPLE_CLASS_DECLARATION:
				sequence_SimpleClassDeclaration(context, (SimpleClassDeclaration) semanticObject); 
				return; 
			case Bug360834TestLanguagePackage.UNORDERED:
				sequence_Unordered(context, (Unordered) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (final?='final' | abstract?='abstract' | extern?='extern' | visibility=Visibility?)
	 */
	protected void sequence_AlternativeClassModifiers(EObject context, Modifiers semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=FQN rootDeclaration=RecursiveClassDeclaration)
	 */
	protected void sequence_Alternative(EObject context, Alternative semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, Bug360834TestLanguagePackage.Literals.ALTERNATIVE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Bug360834TestLanguagePackage.Literals.ALTERNATIVE__NAME));
			if(transientValues.isValueTransient(semanticObject, Bug360834TestLanguagePackage.Literals.ALTERNATIVE__ROOT_DECLARATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Bug360834TestLanguagePackage.Literals.ALTERNATIVE__ROOT_DECLARATION));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getAlternativeAccess().getNameFQNParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAlternativeAccess().getRootDeclarationRecursiveClassDeclarationParserRuleCall_3_0(), semanticObject.getRootDeclaration());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (modifiers=UnorderedModifiers name=ID)
	 */
	protected void sequence_ClassMember(EObject context, ClassMember semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, Bug360834TestLanguagePackage.Literals.CLASS_MEMBER__MODIFIERS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Bug360834TestLanguagePackage.Literals.CLASS_MEMBER__MODIFIERS));
			if(transientValues.isValueTransient(semanticObject, Bug360834TestLanguagePackage.Literals.CLASS_MEMBER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Bug360834TestLanguagePackage.Literals.CLASS_MEMBER__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getClassMemberAccess().getModifiersUnorderedModifiersParserRuleCall_0_0(), semanticObject.getModifiers());
		feeder.accept(grammarAccess.getClassMemberAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (element=Alternative | element=Unordered)
	 */
	protected void sequence_Model(EObject context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (modifiers=AlternativeClassModifiers name=ID members+=RecursiveClassDeclaration*)
	 */
	protected void sequence_RecursiveClassDeclaration(EObject context, RecursiveClassDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (modifiers=UnorderedModifiers name=ID members+=ClassMember*)
	 */
	protected void sequence_SimpleClassDeclaration(EObject context, SimpleClassDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (final?='final'? abstract?='abstract'? extern?='extern'? visibility=Visibility?)
	 */
	protected void sequence_UnorderedModifiers(EObject context, Modifiers semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=FQN rootDeclaration=SimpleClassDeclaration)
	 */
	protected void sequence_Unordered(EObject context, Unordered semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, Bug360834TestLanguagePackage.Literals.UNORDERED__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Bug360834TestLanguagePackage.Literals.UNORDERED__NAME));
			if(transientValues.isValueTransient(semanticObject, Bug360834TestLanguagePackage.Literals.UNORDERED__ROOT_DECLARATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Bug360834TestLanguagePackage.Literals.UNORDERED__ROOT_DECLARATION));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getUnorderedAccess().getNameFQNParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getUnorderedAccess().getRootDeclarationSimpleClassDeclarationParserRuleCall_3_0(), semanticObject.getRootDeclaration());
		feeder.finish();
	}
}
