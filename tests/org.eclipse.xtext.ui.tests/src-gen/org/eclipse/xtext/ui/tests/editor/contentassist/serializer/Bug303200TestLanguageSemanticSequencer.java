/*
 * generated by Xtext
 */
package org.eclipse.xtext.ui.tests.editor.contentassist.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug303200TestLanguage.Attribute;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug303200TestLanguage.Block;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug303200TestLanguage.BracketAttribute;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug303200TestLanguage.Bug303200TestLanguagePackage;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug303200TestLanguage.ExpressionStatement;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug303200TestLanguage.FunctionDefinition;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug303200TestLanguage.FunctionExpression;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug303200TestLanguage.Identifier;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug303200TestLanguage.Invocation;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug303200TestLanguage.ListExpression;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug303200TestLanguage.Parameters;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug303200TestLanguage.PostfixExpression;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug303200TestLanguage.Program;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug303200TestLanguage.PropertyOperator;
import org.eclipse.xtext.ui.tests.editor.contentassist.services.Bug303200TestLanguageGrammarAccess;

@SuppressWarnings("all")
public class Bug303200TestLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private Bug303200TestLanguageGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == Bug303200TestLanguagePackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case Bug303200TestLanguagePackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case Bug303200TestLanguagePackage.BLOCK:
				sequence_Block(context, (Block) semanticObject); 
				return; 
			case Bug303200TestLanguagePackage.BRACKET_ATTRIBUTE:
				sequence_Attribute(context, (BracketAttribute) semanticObject); 
				return; 
			case Bug303200TestLanguagePackage.EXPRESSION_STATEMENT:
				sequence_Statement(context, (ExpressionStatement) semanticObject); 
				return; 
			case Bug303200TestLanguagePackage.FUNCTION_DEFINITION:
				sequence_FunctionDefinition(context, (FunctionDefinition) semanticObject); 
				return; 
			case Bug303200TestLanguagePackage.FUNCTION_EXPRESSION:
				sequence_PrimaryExpression(context, (FunctionExpression) semanticObject); 
				return; 
			case Bug303200TestLanguagePackage.IDENTIFIER:
				sequence_PrimaryExpression(context, (Identifier) semanticObject); 
				return; 
			case Bug303200TestLanguagePackage.INVOCATION:
				sequence_PostfixExpression(context, (Invocation) semanticObject); 
				return; 
			case Bug303200TestLanguagePackage.LIST_EXPRESSION:
				sequence_ListExpression(context, (ListExpression) semanticObject); 
				return; 
			case Bug303200TestLanguagePackage.PARAMETERS:
				sequence_Parameters(context, (Parameters) semanticObject); 
				return; 
			case Bug303200TestLanguagePackage.POSTFIX_EXPRESSION:
				sequence_PostfixExpression(context, (PostfixExpression) semanticObject); 
				return; 
			case Bug303200TestLanguagePackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case Bug303200TestLanguagePackage.PROPERTY_OPERATOR:
				sequence_PropertyOperator(context, (PropertyOperator) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     ident=ID
	 */
	protected void sequence_Attribute(EObject context, Attribute semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, Bug303200TestLanguagePackage.Literals.ATTRIBUTE__IDENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Bug303200TestLanguagePackage.Literals.ATTRIBUTE__IDENT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getAttributeAccess().getIdentIDTerminalRuleCall_0_0(), semanticObject.getIdent());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     expression=PostfixExpression
	 */
	protected void sequence_Attribute(EObject context, BracketAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (directives+=Statement*)
	 */
	protected void sequence_Block(EObject context, Block semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (attributes+=Attribute* name=ID params=Parameters body=Block)
	 */
	protected void sequence_FunctionDefinition(EObject context, FunctionDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (expressions+=PostfixExpression expressions+=PostfixExpression*)
	 */
	protected void sequence_ListExpression(EObject context, ListExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((params+=ID params+=ID*)?)
	 */
	protected void sequence_Parameters(EObject context, Parameters semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((expression=PostfixExpression_Invocation_1_1_0 arguments=ListExpression?) | expression=PostfixExpression_Invocation_1_1_0)
	 */
	protected void sequence_PostfixExpression(EObject context, Invocation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (expression=PostfixExpression_PostfixExpression_1_0_0 property=PropertyOperator)
	 */
	protected void sequence_PostfixExpression(EObject context, PostfixExpression semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, Bug303200TestLanguagePackage.Literals.POSTFIX_EXPRESSION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Bug303200TestLanguagePackage.Literals.POSTFIX_EXPRESSION__EXPRESSION));
			if(transientValues.isValueTransient(semanticObject, Bug303200TestLanguagePackage.Literals.POSTFIX_EXPRESSION__PROPERTY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Bug303200TestLanguagePackage.Literals.POSTFIX_EXPRESSION__PROPERTY));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPostfixExpressionAccess().getPostfixExpressionExpressionAction_1_0_0(), semanticObject.getExpression());
		feeder.accept(grammarAccess.getPostfixExpressionAccess().getPropertyPropertyOperatorParserRuleCall_1_0_2_0(), semanticObject.getProperty());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (params=Parameters body=Block)
	 */
	protected void sequence_PrimaryExpression(EObject context, FunctionExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_PrimaryExpression(EObject context, Identifier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (directives+=ProgramDirective*)
	 */
	protected void sequence_Program(EObject context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID | expressions=ListExpression)
	 */
	protected void sequence_PropertyOperator(EObject context, PropertyOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     expression=PostfixExpression
	 */
	protected void sequence_Statement(EObject context, ExpressionStatement semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, Bug303200TestLanguagePackage.Literals.EXPRESSION_STATEMENT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Bug303200TestLanguagePackage.Literals.EXPRESSION_STATEMENT__EXPRESSION));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getStatementAccess().getExpressionPostfixExpressionParserRuleCall_1_1_0(), semanticObject.getExpression());
		feeder.finish();
	}
}
