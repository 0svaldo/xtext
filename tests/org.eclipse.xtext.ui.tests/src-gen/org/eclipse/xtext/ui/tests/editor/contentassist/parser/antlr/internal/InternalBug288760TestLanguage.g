/*
* generated by Xtext
*/
grammar InternalBug288760TestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.ui.tests.editor.contentassist.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.ui.tests.editor.contentassist.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.ui.tests.editor.contentassist.services.Bug288760TestLanguageGrammarAccess;

}

@parser::members {

 	private Bug288760TestLanguageGrammarAccess grammarAccess;
 	
    public InternalBug288760TestLanguageParser(TokenStream input, IAstFactory factory, Bug288760TestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "WorkflowElement";	
   	}
   	
   	@Override
   	protected Bug288760TestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleWorkflowElement
entryRuleWorkflowElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWorkflowElementRule(), currentNode); }
	 iv_ruleWorkflowElement=ruleWorkflowElement 
	 { $current=$iv_ruleWorkflowElement.current; } 
	 EOF 
;

// Rule WorkflowElement
ruleWorkflowElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		lv_name_0_0=RULE_START_TAG
		{
			createLeafNode(lv_name_0_0, grammarAccess.getWorkflowElementAccess().getNameSTART_TAGTerminalRuleCall_0_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWorkflowElementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"START_TAG", 
        		lastConsumedNode);
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWorkflowElementAccess().getAttributesAttributeParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_attributes_1_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWorkflowElementRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_1_0, 
        		"Attribute", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)*this_END_TAG_SHORT_2=RULE_END_TAG_SHORT
    { 
    createLeafNode(this_END_TAG_SHORT_2, grammarAccess.getWorkflowElementAccess().getEND_TAG_SHORTTerminalRuleCall_0_2(), null); 
    }
)
    |((
(
		lv_name_3_0=RULE_START_TAG
		{
			createLeafNode(lv_name_3_0, grammarAccess.getWorkflowElementAccess().getNameSTART_TAGTerminalRuleCall_1_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWorkflowElementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"START_TAG", 
        		lastConsumedNode);
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWorkflowElementAccess().getAttributesAttributeParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_attributes_4_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWorkflowElementRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_4_0, 
        		"Attribute", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)*this_GT_5=RULE_GT
    { 
    createLeafNode(this_GT_5, grammarAccess.getWorkflowElementAccess().getGTTerminalRuleCall_1_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWorkflowElementAccess().getChildrenWorkflowElementParserRuleCall_1_3_0(), currentNode); 
	    }
		lv_children_6_0=ruleWorkflowElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWorkflowElementRule());
	        }
       		add(
       			$current, 
       			"children",
        		lv_children_6_0, 
        		"WorkflowElement", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_end_7_0=RULE_END_TAG
		{
			createLeafNode(lv_end_7_0, grammarAccess.getWorkflowElementAccess().getEndEND_TAGTerminalRuleCall_1_4_0(), "end"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWorkflowElementRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_7_0, 
        		"END_TAG", 
        		lastConsumedNode);
	    }

)
)))
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttributeRule(), currentNode); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(lv_name_0_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID", 
        		lastConsumedNode);
	    }

)
)this_EQ_1=RULE_EQ
    { 
    createLeafNode(this_EQ_1, grammarAccess.getAttributeAccess().getEQTerminalRuleCall_1(), null); 
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			createLeafNode(lv_value_2_0, grammarAccess.getAttributeAccess().getValueSTRINGTerminalRuleCall_2_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING", 
        		lastConsumedNode);
	    }

)
))
;





RULE_ML_COMMENT : '<!--' ( options {greedy=false;} : . )*'-->';

RULE_START_TAG : RULE_LT RULE_ID;

RULE_LT : '<';

RULE_GT : '>';

RULE_EQ : '=';

RULE_END_TAG_SHORT : '/>';

RULE_END_TAG_START : '</';

RULE_END_TAG : RULE_END_TAG_START RULE_ID RULE_GT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


