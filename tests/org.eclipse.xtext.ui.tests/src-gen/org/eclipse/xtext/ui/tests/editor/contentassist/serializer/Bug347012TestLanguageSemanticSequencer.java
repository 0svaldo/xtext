/*
 * generated by Xtext
 */
package org.eclipse.xtext.ui.tests.editor.contentassist.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug347012TestLanguage.Bug347012TestLanguagePackage;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug347012TestLanguage.Identifier;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug347012TestLanguage.Literal;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug347012TestLanguage.MyAttribute;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug347012TestLanguage.MyAttributes;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug347012TestLanguage.MyBinding;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug347012TestLanguage.MyClass;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug347012TestLanguage.MyField;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug347012TestLanguage.MyPackage;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug347012TestLanguage.MyProgram;
import org.eclipse.xtext.ui.tests.editor.contentassist.services.Bug347012TestLanguageGrammarAccess;

@SuppressWarnings("all")
public class Bug347012TestLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private Bug347012TestLanguageGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == Bug347012TestLanguagePackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case Bug347012TestLanguagePackage.IDENTIFIER:
				sequence_Identifier(context, (Identifier) semanticObject); 
				return; 
			case Bug347012TestLanguagePackage.LITERAL:
				sequence_Literal(context, (Literal) semanticObject); 
				return; 
			case Bug347012TestLanguagePackage.MY_ATTRIBUTE:
				sequence_MyAttribute(context, (MyAttribute) semanticObject); 
				return; 
			case Bug347012TestLanguagePackage.MY_ATTRIBUTES:
				sequence_MyAttributes(context, (MyAttributes) semanticObject); 
				return; 
			case Bug347012TestLanguagePackage.MY_BINDING:
				sequence_MyBinding(context, (MyBinding) semanticObject); 
				return; 
			case Bug347012TestLanguagePackage.MY_CLASS:
				sequence_MyClass(context, (MyClass) semanticObject); 
				return; 
			case Bug347012TestLanguagePackage.MY_FIELD:
				sequence_MyField(context, (MyField) semanticObject); 
				return; 
			case Bug347012TestLanguagePackage.MY_PACKAGE:
				sequence_MyPackage(context, (MyPackage) semanticObject); 
				return; 
			case Bug347012TestLanguagePackage.MY_PROGRAM:
				sequence_MyProgram(context, (MyProgram) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Identifier(EObject context, Identifier semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, Bug347012TestLanguagePackage.Literals.IDENTIFIER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Bug347012TestLanguagePackage.Literals.IDENTIFIER__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getIdentifierAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (num=NUMBER | str=STRING | bool='true' | bool='false')
	 */
	protected void sequence_Literal(EObject context, Literal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (PUBLIC='public' | PRIVATE='private')
	 */
	protected void sequence_MyAttribute(EObject context, MyAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (attributes+=MyAttribute*)
	 */
	protected void sequence_MyAttributes(EObject context, MyAttributes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID type=FQN? expression=MyPrimary?)
	 */
	protected void sequence_MyBinding(EObject context, MyBinding semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID directives+=MyField*)
	 */
	protected void sequence_MyClass(EObject context, MyClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (attr=MyAttributes bindings+=MyBinding bindings+=MyBinding*)
	 */
	protected void sequence_MyField(EObject context, MyField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=FQN directives+=MyClass*)
	 */
	protected void sequence_MyPackage(EObject context, MyPackage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     package=MyPackage
	 */
	protected void sequence_MyProgram(EObject context, MyProgram semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, Bug347012TestLanguagePackage.Literals.MY_PROGRAM__PACKAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Bug347012TestLanguagePackage.Literals.MY_PROGRAM__PACKAGE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getMyProgramAccess().getPackageMyPackageParserRuleCall_2_0(), semanticObject.getPackage());
		feeder.finish();
	}
}
