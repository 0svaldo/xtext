/*
* generated by Xtext
*/
grammar InternalRefactoringTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.ui.tests.refactoring.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.ui.tests.refactoring.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.ui.tests.refactoring.services.RefactoringTestLanguageGrammarAccess;

}

@parser::members {

 	private RefactoringTestLanguageGrammarAccess grammarAccess;
 	
    public InternalRefactoringTestLanguageParser(TokenStream input, IAstFactory factory, RefactoringTestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Main";	
   	}
   	
   	@Override
   	protected RefactoringTestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleMain
entryRuleMain returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMainRule(), currentNode); }
	 iv_ruleMain=ruleMain 
	 { $current=$iv_ruleMain.current; } 
	 EOF 
;

// Rule Main
ruleMain returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMainAccess().getElementsAbstractElementParserRuleCall_0(), currentNode); 
	    }
		lv_elements_0_0=ruleAbstractElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"AbstractElement", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleAbstractElement
entryRuleAbstractElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbstractElementRule(), currentNode); }
	 iv_ruleAbstractElement=ruleAbstractElement 
	 { $current=$iv_ruleAbstractElement.current; } 
	 EOF 
;

// Rule AbstractElement
ruleAbstractElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractElementAccess().getElementParserRuleCall_0(), currentNode); 
    }
    this_Element_0=ruleElement
    { 
        $current = $this_Element_0.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractElementAccess().getImportParserRuleCall_1(), currentNode); 
    }
    this_Import_1=ruleImport
    { 
        $current = $this_Import_1.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImportRule(), currentNode); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='import' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceFQNWithWCParserRuleCall_1_0(), currentNode); 
	    }
		lv_importedNamespace_1_0=ruleFQNWithWC		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"FQNWithWC", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getElementRule(), currentNode); }
	 iv_ruleElement=ruleElement 
	 { $current=$iv_ruleElement.current; } 
	 EOF 
;

// Rule Element
ruleElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(lv_name_0_0, grammarAccess.getElementAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID", 
        		lastConsumedNode);
	    }

)
)(	otherlv_1='{' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getElementAccess().getLeftCurlyBracketKeyword_1_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElementAccess().getContainedElementParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_contained_2_0=ruleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElementRule());
	        }
       		add(
       			$current, 
       			"contained",
        		lv_contained_2_0, 
        		"Element", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_3='ref' 
    {
    	createLeafNode(otherlv_3, grammarAccess.getElementAccess().getRefKeyword_1_2_0(), null);
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementRule());
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElementAccess().getReferencedElementCrossReference_1_2_1_0(), currentNode); 
	    }
		ruleFQN		{ 
	        // currentNode = currentNode.getParent();
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	createLeafNode(otherlv_5, grammarAccess.getElementAccess().getRightCurlyBracketKeyword_1_3(), null);
    }
)?)
;





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFQNRule(), currentNode); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0(), null); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0(), null); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    createLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1(), null); 
    }
)*)
    ;





// Entry rule entryRuleFQNWithWC
entryRuleFQNWithWC returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFQNWithWCRule(), currentNode); } 
	 iv_ruleFQNWithWC=ruleFQNWithWC 
	 { $current=$iv_ruleFQNWithWC.current.getText(); }  
	 EOF 
;

// Rule FQNWithWC
ruleFQNWithWC returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getFQNWithWCAccess().getFQNParserRuleCall_0(), currentNode); 
    }
    this_FQN_0=ruleFQN    {
		$current.merge(this_FQN_0);
    }

    { 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }
(
	kw='.*' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getFQNWithWCAccess().getFullStopAsteriskKeyword_1(), null); 
    }
)?)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


