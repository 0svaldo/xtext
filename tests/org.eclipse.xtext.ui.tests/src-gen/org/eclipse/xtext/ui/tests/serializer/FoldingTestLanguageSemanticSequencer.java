/*
 * generated by Xtext
 */
package org.eclipse.xtext.ui.tests.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.ui.tests.folding.Element;
import org.eclipse.xtext.ui.tests.folding.FoldingModel;
import org.eclipse.xtext.ui.tests.folding.FoldingPackage;
import org.eclipse.xtext.ui.tests.services.FoldingTestLanguageGrammarAccess;

@SuppressWarnings("all")
public class FoldingTestLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FoldingTestLanguageGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == FoldingPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case FoldingPackage.ELEMENT:
				sequence_Element(context, (Element) semanticObject); 
				return; 
			case FoldingPackage.FOLDING_MODEL:
				sequence_FoldingModel(context, (FoldingModel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (name=ID subelements+=Element*)
	 */
	protected void sequence_Element(EObject context, Element semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     elements+=Element*
	 */
	protected void sequence_FoldingModel(EObject context, FoldingModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
