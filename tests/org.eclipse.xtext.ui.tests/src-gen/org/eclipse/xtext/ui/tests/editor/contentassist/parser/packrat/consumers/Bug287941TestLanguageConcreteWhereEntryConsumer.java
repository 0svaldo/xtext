/*
* generated by Xtext
*/
package org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;

import org.eclipse.xtext.ui.tests.editor.contentassist.services.Bug287941TestLanguageGrammarAccess.ConcreteWhereEntryElements;

public final class Bug287941TestLanguageConcreteWhereEntryConsumer extends NonTerminalConsumer {

	private ConcreteWhereEntryElements rule;	

	private INonTerminalConsumer aliasWhereEntryConsumer;

	private INonTerminalConsumer attributeWhereEntryConsumer;

	private INonTerminalConsumer nullWhereEntryConsumer;

	private INonTerminalConsumer parWhereEntryConsumer;

	private INonTerminalConsumer referenceAliasWhereEntryConsumer;

	private INonTerminalConsumer subselectWhereEntryConsumer;

	private IElementConsumer alternatives$1$Consumer;

	private IElementConsumer ruleCall$2$Consumer;

	private IElementConsumer ruleCall$3$Consumer;

	private IElementConsumer ruleCall$4$Consumer;

	private IElementConsumer ruleCall$5$Consumer;

	private IElementConsumer ruleCall$6$Consumer;

	private IElementConsumer ruleCall$7$Consumer;

	protected class Alternatives$1$Consumer extends AlternativesConsumer {
		
		protected Alternatives$1$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(ruleCall$2$Consumer);
			acceptor.accept(ruleCall$3$Consumer);
			acceptor.accept(ruleCall$4$Consumer);
			acceptor.accept(ruleCall$5$Consumer);
			acceptor.accept(ruleCall$6$Consumer);
			acceptor.accept(ruleCall$7$Consumer);
		}
	}

	protected class RuleCall$2$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$2$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(parWhereEntryConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$3$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$3$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(attributeWhereEntryConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$4$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$4$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(nullWhereEntryConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$5$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$5$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(referenceAliasWhereEntryConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$6$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$6$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(aliasWhereEntryConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$7$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$7$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(subselectWhereEntryConsumer, null, false, false, false, getElement(), optional);
		}
	}

	public Bug287941TestLanguageConcreteWhereEntryConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
	}
	
	@Override
	protected int doConsume() throws Exception {
		return alternatives$1$Consumer.consume();
	}

	public ConcreteWhereEntryElements getRule() {
		return rule;
	}
	
	public void setRule(ConcreteWhereEntryElements rule) {
		this.rule = rule;
		
		alternatives$1$Consumer = new Alternatives$1$Consumer(rule.getAlternatives());
		ruleCall$2$Consumer = new RuleCall$2$Consumer(rule.getParWhereEntryParserRuleCall_0());
		ruleCall$3$Consumer = new RuleCall$3$Consumer(rule.getAttributeWhereEntryParserRuleCall_1());
		ruleCall$4$Consumer = new RuleCall$4$Consumer(rule.getNullWhereEntryParserRuleCall_2());
		ruleCall$5$Consumer = new RuleCall$5$Consumer(rule.getReferenceAliasWhereEntryParserRuleCall_3());
		ruleCall$6$Consumer = new RuleCall$6$Consumer(rule.getAliasWhereEntryParserRuleCall_4());
		ruleCall$7$Consumer = new RuleCall$7$Consumer(rule.getSubselectWhereEntryParserRuleCall_5());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setAliasWhereEntryConsumer(INonTerminalConsumer aliasWhereEntryConsumer) {
		this.aliasWhereEntryConsumer = aliasWhereEntryConsumer;
	}
	
	public void setAttributeWhereEntryConsumer(INonTerminalConsumer attributeWhereEntryConsumer) {
		this.attributeWhereEntryConsumer = attributeWhereEntryConsumer;
	}
	
	public void setNullWhereEntryConsumer(INonTerminalConsumer nullWhereEntryConsumer) {
		this.nullWhereEntryConsumer = nullWhereEntryConsumer;
	}
	
	public void setParWhereEntryConsumer(INonTerminalConsumer parWhereEntryConsumer) {
		this.parWhereEntryConsumer = parWhereEntryConsumer;
	}
	
	public void setReferenceAliasWhereEntryConsumer(INonTerminalConsumer referenceAliasWhereEntryConsumer) {
		this.referenceAliasWhereEntryConsumer = referenceAliasWhereEntryConsumer;
	}
	
	public void setSubselectWhereEntryConsumer(INonTerminalConsumer subselectWhereEntryConsumer) {
		this.subselectWhereEntryConsumer = subselectWhereEntryConsumer;
	}
	
}
