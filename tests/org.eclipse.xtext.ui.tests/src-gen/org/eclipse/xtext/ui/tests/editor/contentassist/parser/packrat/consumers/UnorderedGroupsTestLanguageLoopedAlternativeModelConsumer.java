/*
* generated by Xtext
*/
package org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.ui.tests.editor.contentassist.services.UnorderedGroupsTestLanguageGrammarAccess.LoopedAlternativeModelElements;

public final class UnorderedGroupsTestLanguageLoopedAlternativeModelConsumer extends NonTerminalConsumer {

	private LoopedAlternativeModelElements rule;	

	private ITerminalConsumer idConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer alternatives$2$Consumer;

	private IElementConsumer assignment$3$Consumer;

	private IElementConsumer alternatives$4$Consumer;

	private IElementConsumer keyword$5$Consumer;

	private IElementConsumer keyword$6$Consumer;

	private IElementConsumer keyword$7$Consumer;

	private IElementConsumer assignment$8$Consumer;

	private IElementConsumer keyword$9$Consumer;

	private IElementConsumer assignment$10$Consumer;

	private IElementConsumer keyword$11$Consumer;

	private IElementConsumer assignment$13$Consumer;

	private IElementConsumer keyword$14$Consumer;

	private IElementConsumer assignment$15$Consumer;

	private IElementConsumer keyword$16$Consumer;

	private IElementConsumer group$17$Consumer;

	private IElementConsumer keyword$18$Consumer;

	private IElementConsumer keyword$19$Consumer;

	private IElementConsumer keyword$20$Consumer;

	private IElementConsumer assignment$21$Consumer;

	private IElementConsumer ruleCall$22$Consumer;

	private IElementConsumer keyword$23$Consumer;

	private IElementConsumer keyword$24$Consumer;

	private ICharacterClass keyword$5$Delimiter;

	private ICharacterClass keyword$6$Delimiter;

	private ICharacterClass keyword$7$Delimiter;

	private ICharacterClass keyword$9$Delimiter;

	private ICharacterClass keyword$11$Delimiter;

	private ICharacterClass keyword$14$Delimiter;

	private ICharacterClass keyword$16$Delimiter;

	private ICharacterClass keyword$18$Delimiter;

	private ICharacterClass keyword$19$Delimiter;

	private ICharacterClass keyword$20$Delimiter;

	private ICharacterClass keyword$23$Delimiter;

	private ICharacterClass keyword$24$Delimiter;

	private ISequenceMatcher ruleCall$22$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(alternatives$2$Consumer);
			acceptor.accept(keyword$20$Consumer);
			acceptor.accept(assignment$21$Consumer);
			acceptor.accept(keyword$23$Consumer);
			acceptor.accept(keyword$24$Consumer);
		}
	}

	protected class Alternatives$2$Consumer extends LoopAlternativesConsumer {
		
		protected Alternatives$2$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$3$Consumer);
			acceptor.accept(assignment$8$Consumer);
			acceptor.accept(assignment$10$Consumer);
			acceptor.accept(assignment$13$Consumer);
			acceptor.accept(assignment$15$Consumer);
			acceptor.accept(group$17$Consumer);
		}
	}

	protected class Assignment$3$Consumer extends AssignmentConsumer {
		
		protected Assignment$3$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return alternatives$4$Consumer;
		}
	}

	protected class Alternatives$4$Consumer extends AlternativesConsumer {
		
		protected Alternatives$4$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$5$Consumer);
			acceptor.accept(keyword$6$Consumer);
			acceptor.accept(keyword$7$Consumer);
		}
	}

	protected class Keyword$5$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$5$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "visibility", true, false, getKeyword$5$Delimiter(), optional);
		}
	}

	protected class Keyword$6$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$6$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "visibility", true, false, getKeyword$6$Delimiter(), optional);
		}
	}

	protected class Keyword$7$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$7$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "visibility", true, false, getKeyword$7$Delimiter(), optional);
		}
	}

	protected class Assignment$8$Consumer extends AssignmentConsumer {
		
		protected Assignment$8$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$9$Consumer;
		}
	}

	protected class Keyword$9$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$9$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "static", true, false, getKeyword$9$Delimiter(), optional);
		}
	}

	protected class Assignment$10$Consumer extends AssignmentConsumer {
		
		protected Assignment$10$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$11$Consumer;
		}
	}

	protected class Keyword$11$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$11$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "synchronized", true, false, getKeyword$11$Delimiter(), optional);
		}
	}

	protected class Assignment$13$Consumer extends AssignmentConsumer {
		
		protected Assignment$13$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$14$Consumer;
		}
	}

	protected class Keyword$14$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$14$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "abstract", true, false, getKeyword$14$Delimiter(), optional);
		}
	}

	protected class Assignment$15$Consumer extends AssignmentConsumer {
		
		protected Assignment$15$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$16$Consumer;
		}
	}

	protected class Keyword$16$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$16$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "final", true, false, getKeyword$16$Delimiter(), optional);
		}
	}

	protected class Group$17$Consumer extends GroupConsumer {
		
		protected Group$17$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$18$Consumer);
			acceptor.accept(keyword$19$Consumer);
		}
	}

	protected class Keyword$18$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$18$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$18$Delimiter(), optional);
		}
	}

	protected class Keyword$19$Consumer extends LoopElementConsumer<Keyword> {
		
		protected Keyword$19$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$19$Delimiter(), optional);
		}
	}

	protected class Keyword$20$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$20$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$20$Delimiter(), optional);
		}
	}

	protected class Assignment$21$Consumer extends AssignmentConsumer {
		
		protected Assignment$21$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$22$Consumer;
		}
	}

	protected class RuleCall$22$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$22$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "name", false, false, getElement(), getRuleCall$22$Delimiter(), optional);
		}
	}

	protected class Keyword$23$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$23$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$23$Delimiter(), optional);
		}
	}

	protected class Keyword$24$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$24$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$24$Delimiter(), optional);
		}
	}

	public UnorderedGroupsTestLanguageLoopedAlternativeModelConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$5$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$6$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$7$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$9$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$11$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$14$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$16$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$18$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$19$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$20$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$23$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$24$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$22$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public LoopedAlternativeModelElements getRule() {
		return rule;
	}
	
	public void setRule(LoopedAlternativeModelElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		alternatives$2$Consumer = new Alternatives$2$Consumer(rule.getAlternatives_0());
		assignment$3$Consumer = new Assignment$3$Consumer(rule.getVisibilityAssignment_0_0());
		alternatives$4$Consumer = new Alternatives$4$Consumer(rule.getVisibilityAlternatives_0_0_0());
		keyword$5$Consumer = new Keyword$5$Consumer(rule.getVisibilityPublicKeyword_0_0_0_0());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.getVisibilityPrivateKeyword_0_0_0_1());
		keyword$7$Consumer = new Keyword$7$Consumer(rule.getVisibilityProtectedKeyword_0_0_0_2());
		keyword$5$Consumer = new Keyword$5$Consumer(rule.getVisibilityPublicKeyword_0_0_0_0());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.getVisibilityPrivateKeyword_0_0_0_1());
		keyword$7$Consumer = new Keyword$7$Consumer(rule.getVisibilityProtectedKeyword_0_0_0_2());
		assignment$8$Consumer = new Assignment$8$Consumer(rule.getStaticAssignment_0_1());
		keyword$9$Consumer = new Keyword$9$Consumer(rule.getStaticStaticKeyword_0_1_0());
		assignment$10$Consumer = new Assignment$10$Consumer(rule.getSynchronizedAssignment_0_2());
		keyword$11$Consumer = new Keyword$11$Consumer(rule.getSynchronizedSynchronizedKeyword_0_2_0());
		assignment$13$Consumer = new Assignment$13$Consumer(rule.getAbstractAssignment_0_3_0());
		keyword$14$Consumer = new Keyword$14$Consumer(rule.getAbstractAbstractKeyword_0_3_0_0());
		assignment$15$Consumer = new Assignment$15$Consumer(rule.getFinalAssignment_0_3_1());
		keyword$16$Consumer = new Keyword$16$Consumer(rule.getFinalFinalKeyword_0_3_1_0());
		group$17$Consumer = new Group$17$Consumer(rule.getGroup_0_4());
		keyword$18$Consumer = new Keyword$18$Consumer(rule.getBeforeKeyword_0_4_0());
		keyword$19$Consumer = new Keyword$19$Consumer(rule.getAfterKeyword_0_4_1());
		keyword$20$Consumer = new Keyword$20$Consumer(rule.getClassKeyword_1());
		assignment$21$Consumer = new Assignment$21$Consumer(rule.getNameAssignment_2());
		ruleCall$22$Consumer = new RuleCall$22$Consumer(rule.getNameIDTerminalRuleCall_2_0());
		keyword$23$Consumer = new Keyword$23$Consumer(rule.getLeftCurlyBracketKeyword_3());
		keyword$24$Consumer = new Keyword$24$Consumer(rule.getRightCurlyBracketKeyword_4());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public ICharacterClass getKeyword$5$Delimiter() {
		return keyword$5$Delimiter;
	}
	
	public void setKeyword$5$Delimiter(ICharacterClass characterClass) {
		keyword$5$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$6$Delimiter() {
		return keyword$6$Delimiter;
	}
	
	public void setKeyword$6$Delimiter(ICharacterClass characterClass) {
		keyword$6$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$7$Delimiter() {
		return keyword$7$Delimiter;
	}
	
	public void setKeyword$7$Delimiter(ICharacterClass characterClass) {
		keyword$7$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$9$Delimiter() {
		return keyword$9$Delimiter;
	}
	
	public void setKeyword$9$Delimiter(ICharacterClass characterClass) {
		keyword$9$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$11$Delimiter() {
		return keyword$11$Delimiter;
	}
	
	public void setKeyword$11$Delimiter(ICharacterClass characterClass) {
		keyword$11$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$14$Delimiter() {
		return keyword$14$Delimiter;
	}
	
	public void setKeyword$14$Delimiter(ICharacterClass characterClass) {
		keyword$14$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$16$Delimiter() {
		return keyword$16$Delimiter;
	}
	
	public void setKeyword$16$Delimiter(ICharacterClass characterClass) {
		keyword$16$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$18$Delimiter() {
		return keyword$18$Delimiter;
	}
	
	public void setKeyword$18$Delimiter(ICharacterClass characterClass) {
		keyword$18$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$19$Delimiter() {
		return keyword$19$Delimiter;
	}
	
	public void setKeyword$19$Delimiter(ICharacterClass characterClass) {
		keyword$19$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$20$Delimiter() {
		return keyword$20$Delimiter;
	}
	
	public void setKeyword$20$Delimiter(ICharacterClass characterClass) {
		keyword$20$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$23$Delimiter() {
		return keyword$23$Delimiter;
	}
	
	public void setKeyword$23$Delimiter(ICharacterClass characterClass) {
		keyword$23$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$24$Delimiter() {
		return keyword$24$Delimiter;
	}
	
	public void setKeyword$24$Delimiter(ICharacterClass characterClass) {
		keyword$24$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$22$Delimiter() {
		return ruleCall$22$Delimiter;
	}
	
	public void setRuleCall$22$Delimiter(ISequenceMatcher matcher) {
		ruleCall$22$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
