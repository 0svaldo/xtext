/*
* generated by Xtext
*/
grammar InternalBmTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.ui.tests.editor.bracketmatching.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.ui.tests.editor.bracketmatching.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.ui.tests.editor.bracketmatching.services.BmTestLanguageGrammarAccess;

}

@parser::members {

 	private BmTestLanguageGrammarAccess grammarAccess;
 	
    public InternalBmTestLanguageParser(TokenStream input, IAstFactory factory, BmTestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/xtext/ui/tests/editor/bracketmatching/parser/antlr/internal/InternalBmTestLanguage.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "File";	
   	}
   	
   	@Override
   	protected BmTestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleFile
entryRuleFile returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFileRule(), currentNode); }
	 iv_ruleFile=ruleFile 
	 { $current=$iv_ruleFile.current; } 
	 EOF 
;

// Rule File
ruleFile returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFileAccess().getExpressionExpressionParserRuleCall_0(), currentNode); 
	    }
		lv_expression_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFileRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expression",
	        		lv_expression_0_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getSExpressionParserRuleCall_0(), currentNode); 
    }
    this_SExpression_0=ruleSExpression
    { 
        $current = $this_SExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getAtomParserRuleCall_1(), currentNode); 
    }
    this_Atom_1=ruleAtom
    { 
        $current = $this_Atom_1.current; 
        currentNode = currentNode.getParent();
    }

    |(	'[' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getLeftSquareBracketKeyword_2_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getExpressionParserRuleCall_2_1(), currentNode); 
    }
    this_Expression_3=ruleExpression
    { 
        $current = $this_Expression_3.current; 
        currentNode = currentNode.getParent();
    }
	']' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getRightSquareBracketKeyword_2_2(), null); 
    }
))
;





// Entry rule entryRuleSExpression
entryRuleSExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSExpressionRule(), currentNode); }
	 iv_ruleSExpression=ruleSExpression 
	 { $current=$iv_ruleSExpression.current; } 
	 EOF 
;

// Rule SExpression
ruleSExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getSExpressionAccess().getSExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSExpressionAccess().getSExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((	'(' 
    {
        createLeafNode(grammarAccess.getSExpressionAccess().getLeftParenthesisKeyword_1_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSExpressionAccess().getElementExpressionParserRuleCall_1_0_1_0(), currentNode); 
	    }
		lv_element_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"element",
	        		lv_element_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	')' 
    {
        createLeafNode(grammarAccess.getSExpressionAccess().getRightParenthesisKeyword_1_0_2(), null); 
    }
)
    |(	'begin' 
    {
        createLeafNode(grammarAccess.getSExpressionAccess().getBeginKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSExpressionAccess().getElementExpressionParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_element_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"element",
	        		lv_element_5_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'end' 
    {
        createLeafNode(grammarAccess.getSExpressionAccess().getEndKeyword_1_1_2(), null); 
    }
)))
;





// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAtomRule(), currentNode); }
	 iv_ruleAtom=ruleAtom 
	 { $current=$iv_ruleAtom.current; } 
	 EOF 
;

// Rule Atom
ruleAtom returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getValueVALUEParserRuleCall_0(), currentNode); 
	    }
		lv_value_0_0=ruleVALUE		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAtomRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"VALUE", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleVALUE
entryRuleVALUE returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVALUERule(), currentNode); } 
	 iv_ruleVALUE=ruleVALUE 
	 { $current=$iv_ruleVALUE.current.getText(); }  
	 EOF 
;

// Rule VALUE
ruleVALUE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getVALUEAccess().getIDTerminalRuleCall_0(), null); 
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    createLeafNode(grammarAccess.getVALUEAccess().getINTTerminalRuleCall_1(), null); 
    }

    |    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    createLeafNode(grammarAccess.getVALUEAccess().getSTRINGTerminalRuleCall_2(), null); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


