/*
* generated by Xtext
*/
package org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.ui.tests.editor.contentassist.services.Bug288760TestLanguageGrammarAccess.WorkflowElementElements;

public final class Bug288760TestLanguageWorkflowElementConsumer extends NonTerminalConsumer {

	private WorkflowElementElements rule;	

	private INonTerminalConsumer attributeConsumer;

	private ITerminalConsumer endTagConsumer;

	private ITerminalConsumer endTagShortConsumer;

	private ITerminalConsumer gtConsumer;

	private ITerminalConsumer startTagConsumer;

	private INonTerminalConsumer workflowElementConsumer;

	private IElementConsumer alternatives$1$Consumer;

	private IElementConsumer group$2$Consumer;

	private IElementConsumer assignment$3$Consumer;

	private IElementConsumer ruleCall$4$Consumer;

	private IElementConsumer assignment$5$Consumer;

	private IElementConsumer ruleCall$6$Consumer;

	private IElementConsumer ruleCall$7$Consumer;

	private IElementConsumer group$8$Consumer;

	private IElementConsumer assignment$9$Consumer;

	private IElementConsumer ruleCall$10$Consumer;

	private IElementConsumer assignment$11$Consumer;

	private IElementConsumer ruleCall$12$Consumer;

	private IElementConsumer ruleCall$13$Consumer;

	private IElementConsumer assignment$14$Consumer;

	private IElementConsumer ruleCall$15$Consumer;

	private IElementConsumer assignment$16$Consumer;

	private IElementConsumer ruleCall$17$Consumer;

	private ISequenceMatcher ruleCall$7$Delimiter;

	private ISequenceMatcher ruleCall$10$Delimiter;

	private ISequenceMatcher ruleCall$13$Delimiter;

	private ISequenceMatcher ruleCall$17$Delimiter;

	private ISequenceMatcher ruleCall$4$Delimiter;

	protected class Alternatives$1$Consumer extends AlternativesConsumer {
		
		protected Alternatives$1$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$2$Consumer);
			acceptor.accept(group$8$Consumer);
		}
	}

	protected class Group$2$Consumer extends GroupConsumer {
		
		protected Group$2$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$3$Consumer);
			acceptor.accept(assignment$5$Consumer);
			acceptor.accept(ruleCall$7$Consumer);
		}
	}

	protected class Assignment$3$Consumer extends AssignmentConsumer {
		
		protected Assignment$3$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$4$Consumer;
		}
	}

	protected class RuleCall$4$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$4$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(startTagConsumer, "name", false, false, getElement(), getRuleCall$4$Delimiter(), optional);
		}
	}

	protected class Assignment$5$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$5$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$6$Consumer;
		}
	}

	protected class RuleCall$6$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$6$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(attributeConsumer, "attributes", true, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$7$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$7$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(endTagShortConsumer, null, false, false, getElement(), getRuleCall$7$Delimiter(), optional);
		}
	}

	protected class Group$8$Consumer extends GroupConsumer {
		
		protected Group$8$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$9$Consumer);
			acceptor.accept(assignment$11$Consumer);
			acceptor.accept(ruleCall$13$Consumer);
			acceptor.accept(assignment$14$Consumer);
			acceptor.accept(assignment$16$Consumer);
		}
	}

	protected class Assignment$9$Consumer extends AssignmentConsumer {
		
		protected Assignment$9$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$10$Consumer;
		}
	}

	protected class RuleCall$10$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$10$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(startTagConsumer, "name", false, false, getElement(), getRuleCall$10$Delimiter(), optional);
		}
	}

	protected class Assignment$11$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$11$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$12$Consumer;
		}
	}

	protected class RuleCall$12$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$12$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(attributeConsumer, "attributes", true, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$13$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$13$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(gtConsumer, null, false, false, getElement(), getRuleCall$13$Delimiter(), optional);
		}
	}

	protected class Assignment$14$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$14$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$15$Consumer;
		}
	}

	protected class RuleCall$15$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$15$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(workflowElementConsumer, "children", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$16$Consumer extends AssignmentConsumer {
		
		protected Assignment$16$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$17$Consumer;
		}
	}

	protected class RuleCall$17$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$17$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(endTagConsumer, "end", false, false, getElement(), getRuleCall$17$Delimiter(), optional);
		}
	}

	public Bug288760TestLanguageWorkflowElementConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		ruleCall$7$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$10$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$13$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$17$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$4$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return alternatives$1$Consumer.consume();
	}

	public WorkflowElementElements getRule() {
		return rule;
	}
	
	public void setRule(WorkflowElementElements rule) {
		this.rule = rule;
		
		alternatives$1$Consumer = new Alternatives$1$Consumer(rule.getAlternatives());
		group$2$Consumer = new Group$2$Consumer(rule.getGroup_0());
		assignment$3$Consumer = new Assignment$3$Consumer(rule.getNameAssignment_0_0());
		ruleCall$4$Consumer = new RuleCall$4$Consumer(rule.getNameSTART_TAGTerminalRuleCall_0_0_0());
		assignment$5$Consumer = new Assignment$5$Consumer(rule.getAttributesAssignment_0_1());
		ruleCall$6$Consumer = new RuleCall$6$Consumer(rule.getAttributesAttributeParserRuleCall_0_1_0());
		ruleCall$7$Consumer = new RuleCall$7$Consumer(rule.getEND_TAG_SHORTTerminalRuleCall_0_2());
		group$8$Consumer = new Group$8$Consumer(rule.getGroup_1());
		assignment$9$Consumer = new Assignment$9$Consumer(rule.getNameAssignment_1_0());
		ruleCall$10$Consumer = new RuleCall$10$Consumer(rule.getNameSTART_TAGTerminalRuleCall_1_0_0());
		assignment$11$Consumer = new Assignment$11$Consumer(rule.getAttributesAssignment_1_1());
		ruleCall$12$Consumer = new RuleCall$12$Consumer(rule.getAttributesAttributeParserRuleCall_1_1_0());
		ruleCall$13$Consumer = new RuleCall$13$Consumer(rule.getGTTerminalRuleCall_1_2());
		assignment$14$Consumer = new Assignment$14$Consumer(rule.getChildrenAssignment_1_3());
		ruleCall$15$Consumer = new RuleCall$15$Consumer(rule.getChildrenWorkflowElementParserRuleCall_1_3_0());
		assignment$16$Consumer = new Assignment$16$Consumer(rule.getEndAssignment_1_4());
		ruleCall$17$Consumer = new RuleCall$17$Consumer(rule.getEndEND_TAGTerminalRuleCall_1_4_0());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setAttributeConsumer(INonTerminalConsumer attributeConsumer) {
		this.attributeConsumer = attributeConsumer;
	}
	
	public void setEndTagConsumer(ITerminalConsumer endTagConsumer) {
		this.endTagConsumer = endTagConsumer;
	}
	
	public void setEndTagShortConsumer(ITerminalConsumer endTagShortConsumer) {
		this.endTagShortConsumer = endTagShortConsumer;
	}
	
	public void setGtConsumer(ITerminalConsumer gtConsumer) {
		this.gtConsumer = gtConsumer;
	}
	
	public void setStartTagConsumer(ITerminalConsumer startTagConsumer) {
		this.startTagConsumer = startTagConsumer;
	}
	
	public void setWorkflowElementConsumer(INonTerminalConsumer workflowElementConsumer) {
		this.workflowElementConsumer = workflowElementConsumer;
	}
	
	public ISequenceMatcher getRuleCall$7$Delimiter() {
		return ruleCall$7$Delimiter;
	}
	
	public void setRuleCall$7$Delimiter(ISequenceMatcher matcher) {
		ruleCall$7$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$10$Delimiter() {
		return ruleCall$10$Delimiter;
	}
	
	public void setRuleCall$10$Delimiter(ISequenceMatcher matcher) {
		ruleCall$10$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$13$Delimiter() {
		return ruleCall$13$Delimiter;
	}
	
	public void setRuleCall$13$Delimiter(ISequenceMatcher matcher) {
		ruleCall$13$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$17$Delimiter() {
		return ruleCall$17$Delimiter;
	}
	
	public void setRuleCall$17$Delimiter(ISequenceMatcher matcher) {
		ruleCall$17$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$4$Delimiter() {
		return ruleCall$4$Delimiter;
	}
	
	public void setRuleCall$4$Delimiter(ISequenceMatcher matcher) {
		ruleCall$4$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
