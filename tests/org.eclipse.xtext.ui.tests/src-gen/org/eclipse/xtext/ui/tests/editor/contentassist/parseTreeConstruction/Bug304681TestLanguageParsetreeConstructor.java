/*
* generated by Xtext
*/
package org.eclipse.xtext.ui.tests.editor.contentassist.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.ui.tests.editor.contentassist.services.Bug304681TestLanguageGrammarAccess;

import com.google.inject.Inject;

public class Bug304681TestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private Bug304681TestLanguageGrammarAccess grammarAccess;
	
	@Override	
	public Bug304681TestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PackageDefinition_Group(this, this, 0, inst);
			case 1: return new Object_Group(this, this, 1, inst);
			case 2: return new Feature_Alternatives(this, this, 2, inst);
			case 3: return new Attribute_Group(this, this, 3, inst);
			case 4: return new Reference_Group(this, this, 4, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule PackageDefinition ****************
 *
 * PackageDefinition:
 *   {PackageDefinition} "package" namespace=ID ";" contents+=Object*;
 *
 **/

// {PackageDefinition} "package" namespace=ID ";" contents+=Object*
protected class PackageDefinition_Group extends GroupToken {
	
	public PackageDefinition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPackageDefinitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PackageDefinition_ContentsAssignment_4(parent, this, 0, inst);
			case 1: return new PackageDefinition_SemicolonKeyword_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPackageDefinitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {PackageDefinition}
protected class PackageDefinition_PackageDefinitionAction_0 extends ActionToken  {

	public PackageDefinition_PackageDefinitionAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPackageDefinitionAccess().getPackageDefinitionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getPackageDefinitionAccess().getPackageDefinitionAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "package"
protected class PackageDefinition_PackageKeyword_1 extends KeywordToken  {
	
	public PackageDefinition_PackageKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPackageDefinitionAccess().getPackageKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PackageDefinition_PackageDefinitionAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// namespace=ID
protected class PackageDefinition_NamespaceAssignment_2 extends AssignmentToken  {
	
	public PackageDefinition_NamespaceAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPackageDefinitionAccess().getNamespaceAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PackageDefinition_PackageKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("namespace",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("namespace");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getPackageDefinitionAccess().getNamespaceIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class PackageDefinition_SemicolonKeyword_3 extends KeywordToken  {
	
	public PackageDefinition_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPackageDefinitionAccess().getSemicolonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PackageDefinition_NamespaceAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// contents+=Object*
protected class PackageDefinition_ContentsAssignment_4 extends AssignmentToken  {
	
	public PackageDefinition_ContentsAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPackageDefinitionAccess().getContentsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contents",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contents");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getObjectRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPackageDefinitionAccess().getContentsObjectParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PackageDefinition_ContentsAssignment_4(parent, next, actIndex, consumed);
			case 1: return new PackageDefinition_SemicolonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule PackageDefinition ****************/


/************ begin Rule Object ****************
 *
 * Object:
 *   (enabled?="enabled"|abstract?="abstract")? "object" name=ID ("extends" parent=[
 *   Object])? "{" (("shortDescription" shortDescription=STRING ";")? & ("longDescription"
 *   longDescription=STRING ";")? & ("serialUID" serialVersionUID=INT ";")? & (cloneable?=
 *   "cloneable" ";")? & features+=Feature* & ("before" features+=Feature* "after")? & (
 *   "optionalLoop" features+=Feature*)? & ("mandatoryLoop" features+=Feature+)?) "}";
 *
 **/

// (enabled?="enabled"|abstract?="abstract")? "object" name=ID ("extends" parent=[
// Object])? "{" (("shortDescription" shortDescription=STRING ";")? & ("longDescription"
// longDescription=STRING ";")? & ("serialUID" serialVersionUID=INT ";")? & (cloneable?=
// "cloneable" ";")? & features+=Feature* & ("before" features+=Feature* "after")? & (
// "optionalLoop" features+=Feature*)? & ("mandatoryLoop" features+=Feature+)?) "}"
protected class Object_Group extends GroupToken {
	
	public Object_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getObjectAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_RightCurlyBracketKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getObjectRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// (enabled?="enabled"|abstract?="abstract")?
protected class Object_Alternatives_0 extends AlternativesToken {

	public Object_Alternatives_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getObjectAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_EnabledAssignment_0_0(parent, this, 0, inst);
			case 1: return new Object_AbstractAssignment_0_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// enabled?="enabled"
protected class Object_EnabledAssignment_0_0 extends AssignmentToken  {
	
	public Object_EnabledAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getObjectAccess().getEnabledAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("enabled",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("enabled");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getObjectAccess().getEnabledEnabledKeyword_0_0_0();
			return obj;
		}
		return null;
	}

}

// abstract?="abstract"
protected class Object_AbstractAssignment_0_1 extends AssignmentToken  {
	
	public Object_AbstractAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getObjectAccess().getAbstractAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("abstract",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("abstract");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getObjectAccess().getAbstractAbstractKeyword_0_1_0();
			return obj;
		}
		return null;
	}

}


// "object"
protected class Object_ObjectKeyword_1 extends KeywordToken  {
	
	public Object_ObjectKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getObjectAccess().getObjectKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_Alternatives_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class Object_NameAssignment_2 extends AssignmentToken  {
	
	public Object_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getObjectAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_ObjectKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getObjectAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("extends" parent=[Object])?
protected class Object_Group_3 extends GroupToken {
	
	public Object_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getObjectAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_ParentAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "extends"
protected class Object_ExtendsKeyword_3_0 extends KeywordToken  {
	
	public Object_ExtendsKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getObjectAccess().getExtendsKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// parent=[Object]
protected class Object_ParentAssignment_3_1 extends AssignmentToken  {
	
	public Object_ParentAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getObjectAccess().getParentAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_ExtendsKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parent",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parent");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getObjectAccess().getParentObjectCrossReference_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getObjectAccess().getParentObjectCrossReference_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "{"
protected class Object_LeftCurlyBracketKeyword_4 extends KeywordToken  {
	
	public Object_LeftCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getObjectAccess().getLeftCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_Group_3(parent, this, 0, inst);
			case 1: return new Object_NameAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ("shortDescription" shortDescription=STRING ";")? & ("longDescription"
// longDescription=STRING ";")? & ("serialUID" serialVersionUID=INT ";")? & (cloneable?=
// "cloneable" ";")? & features+=Feature* & ("before" features+=Feature* "after")? & (
// "optionalLoop" features+=Feature*)? & ("mandatoryLoop" features+=Feature+)?
protected class Object_UnorderedGroup_5 extends UnorderedGroupToken {
	
	public Object_UnorderedGroup_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public UnorderedGroup getGrammarElement() {
		return grammarAccess.getObjectAccess().getUnorderedGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_Group_5_7(parent, this, 0, inst);
			case 1: return new Object_Group_5_6(parent, this, 1, inst);
			case 2: return new Object_Group_5_5(parent, this, 2, inst);
			case 3: return new Object_FeaturesAssignment_5_4(parent, this, 3, inst);
			case 4: return new Object_Group_5_3(parent, this, 4, inst);
			case 5: return new Object_Group_5_2(parent, this, 5, inst);
			case 6: return new Object_Group_5_1(parent, this, 6, inst);
			case 7: return new Object_Group_5_0(parent, this, 7, inst);
			default: return null;
		}	
	}	
		
}

// ("shortDescription" shortDescription=STRING ";")?
protected class Object_Group_5_0 extends GroupToken {
	
	public Object_Group_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getObjectAccess().getGroup_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_SemicolonKeyword_5_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "shortDescription"
protected class Object_ShortDescriptionKeyword_5_0_0 extends KeywordToken  {
	
	public Object_ShortDescriptionKeyword_5_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getObjectAccess().getShortDescriptionKeyword_5_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_LeftCurlyBracketKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// shortDescription=STRING
protected class Object_ShortDescriptionAssignment_5_0_1 extends AssignmentToken  {
	
	public Object_ShortDescriptionAssignment_5_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getObjectAccess().getShortDescriptionAssignment_5_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_ShortDescriptionKeyword_5_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("shortDescription",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("shortDescription");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getObjectAccess().getShortDescriptionSTRINGTerminalRuleCall_5_0_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Object_SemicolonKeyword_5_0_2 extends KeywordToken  {
	
	public Object_SemicolonKeyword_5_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getObjectAccess().getSemicolonKeyword_5_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_ShortDescriptionAssignment_5_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("longDescription" longDescription=STRING ";")?
protected class Object_Group_5_1 extends GroupToken {
	
	public Object_Group_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getObjectAccess().getGroup_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_SemicolonKeyword_5_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "longDescription"
protected class Object_LongDescriptionKeyword_5_1_0 extends KeywordToken  {
	
	public Object_LongDescriptionKeyword_5_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getObjectAccess().getLongDescriptionKeyword_5_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_Group_5_0(parent, this, 0, inst);
			case 1: return new Object_LeftCurlyBracketKeyword_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// longDescription=STRING
protected class Object_LongDescriptionAssignment_5_1_1 extends AssignmentToken  {
	
	public Object_LongDescriptionAssignment_5_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getObjectAccess().getLongDescriptionAssignment_5_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_LongDescriptionKeyword_5_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("longDescription",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("longDescription");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getObjectAccess().getLongDescriptionSTRINGTerminalRuleCall_5_1_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Object_SemicolonKeyword_5_1_2 extends KeywordToken  {
	
	public Object_SemicolonKeyword_5_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getObjectAccess().getSemicolonKeyword_5_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_LongDescriptionAssignment_5_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("serialUID" serialVersionUID=INT ";")?
protected class Object_Group_5_2 extends GroupToken {
	
	public Object_Group_5_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getObjectAccess().getGroup_5_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_SemicolonKeyword_5_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "serialUID"
protected class Object_SerialUIDKeyword_5_2_0 extends KeywordToken  {
	
	public Object_SerialUIDKeyword_5_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getObjectAccess().getSerialUIDKeyword_5_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_Group_5_1(parent, this, 0, inst);
			case 1: return new Object_Group_5_0(parent, this, 1, inst);
			case 2: return new Object_LeftCurlyBracketKeyword_4(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// serialVersionUID=INT
protected class Object_SerialVersionUIDAssignment_5_2_1 extends AssignmentToken  {
	
	public Object_SerialVersionUIDAssignment_5_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getObjectAccess().getSerialVersionUIDAssignment_5_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_SerialUIDKeyword_5_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("serialVersionUID",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("serialVersionUID");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getObjectAccess().getSerialVersionUIDINTTerminalRuleCall_5_2_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Object_SemicolonKeyword_5_2_2 extends KeywordToken  {
	
	public Object_SemicolonKeyword_5_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getObjectAccess().getSemicolonKeyword_5_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_SerialVersionUIDAssignment_5_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// (cloneable?="cloneable" ";")?
protected class Object_Group_5_3 extends GroupToken {
	
	public Object_Group_5_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getObjectAccess().getGroup_5_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_SemicolonKeyword_5_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// cloneable?="cloneable"
protected class Object_CloneableAssignment_5_3_0 extends AssignmentToken  {
	
	public Object_CloneableAssignment_5_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getObjectAccess().getCloneableAssignment_5_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_Group_5_2(parent, this, 0, inst);
			case 1: return new Object_Group_5_1(parent, this, 1, inst);
			case 2: return new Object_Group_5_0(parent, this, 2, inst);
			case 3: return new Object_LeftCurlyBracketKeyword_4(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("cloneable",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("cloneable");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getObjectAccess().getCloneableCloneableKeyword_5_3_0_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Object_SemicolonKeyword_5_3_1 extends KeywordToken  {
	
	public Object_SemicolonKeyword_5_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getObjectAccess().getSemicolonKeyword_5_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_CloneableAssignment_5_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// features+=Feature*
protected class Object_FeaturesAssignment_5_4 extends AssignmentToken  {
	
	public Object_FeaturesAssignment_5_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getObjectAccess().getFeaturesAssignment_5_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Feature_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("features",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("features");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getObjectAccess().getFeaturesFeatureParserRuleCall_5_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Object_FeaturesAssignment_5_4(parent, next, actIndex, consumed);
			case 1: return new Object_Group_5_3(parent, next, actIndex, consumed);
			case 2: return new Object_Group_5_2(parent, next, actIndex, consumed);
			case 3: return new Object_Group_5_1(parent, next, actIndex, consumed);
			case 4: return new Object_Group_5_0(parent, next, actIndex, consumed);
			case 5: return new Object_LeftCurlyBracketKeyword_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("before" features+=Feature* "after")?
protected class Object_Group_5_5 extends GroupToken {
	
	public Object_Group_5_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getObjectAccess().getGroup_5_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_AfterKeyword_5_5_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "before"
protected class Object_BeforeKeyword_5_5_0 extends KeywordToken  {
	
	public Object_BeforeKeyword_5_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getObjectAccess().getBeforeKeyword_5_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_FeaturesAssignment_5_4(parent, this, 0, inst);
			case 1: return new Object_Group_5_3(parent, this, 1, inst);
			case 2: return new Object_Group_5_2(parent, this, 2, inst);
			case 3: return new Object_Group_5_1(parent, this, 3, inst);
			case 4: return new Object_Group_5_0(parent, this, 4, inst);
			case 5: return new Object_LeftCurlyBracketKeyword_4(parent, this, 5, inst);
			default: return null;
		}	
	}	
		
}

// features+=Feature*
protected class Object_FeaturesAssignment_5_5_1 extends AssignmentToken  {
	
	public Object_FeaturesAssignment_5_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getObjectAccess().getFeaturesAssignment_5_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Feature_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("features",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("features");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getObjectAccess().getFeaturesFeatureParserRuleCall_5_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Object_FeaturesAssignment_5_5_1(parent, next, actIndex, consumed);
			case 1: return new Object_BeforeKeyword_5_5_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "after"
protected class Object_AfterKeyword_5_5_2 extends KeywordToken  {
	
	public Object_AfterKeyword_5_5_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getObjectAccess().getAfterKeyword_5_5_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_FeaturesAssignment_5_5_1(parent, this, 0, inst);
			case 1: return new Object_BeforeKeyword_5_5_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// ("optionalLoop" features+=Feature*)?
protected class Object_Group_5_6 extends GroupToken {
	
	public Object_Group_5_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getObjectAccess().getGroup_5_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_FeaturesAssignment_5_6_1(parent, this, 0, inst);
			case 1: return new Object_OptionalLoopKeyword_5_6_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "optionalLoop"
protected class Object_OptionalLoopKeyword_5_6_0 extends KeywordToken  {
	
	public Object_OptionalLoopKeyword_5_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getObjectAccess().getOptionalLoopKeyword_5_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_Group_5_5(parent, this, 0, inst);
			case 1: return new Object_FeaturesAssignment_5_4(parent, this, 1, inst);
			case 2: return new Object_Group_5_3(parent, this, 2, inst);
			case 3: return new Object_Group_5_2(parent, this, 3, inst);
			case 4: return new Object_Group_5_1(parent, this, 4, inst);
			case 5: return new Object_Group_5_0(parent, this, 5, inst);
			case 6: return new Object_LeftCurlyBracketKeyword_4(parent, this, 6, inst);
			default: return null;
		}	
	}	
		
}

// features+=Feature*
protected class Object_FeaturesAssignment_5_6_1 extends AssignmentToken  {
	
	public Object_FeaturesAssignment_5_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getObjectAccess().getFeaturesAssignment_5_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Feature_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("features",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("features");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getObjectAccess().getFeaturesFeatureParserRuleCall_5_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Object_FeaturesAssignment_5_6_1(parent, next, actIndex, consumed);
			case 1: return new Object_OptionalLoopKeyword_5_6_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("mandatoryLoop" features+=Feature+)?
protected class Object_Group_5_7 extends GroupToken {
	
	public Object_Group_5_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getObjectAccess().getGroup_5_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_FeaturesAssignment_5_7_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "mandatoryLoop"
protected class Object_MandatoryLoopKeyword_5_7_0 extends KeywordToken  {
	
	public Object_MandatoryLoopKeyword_5_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getObjectAccess().getMandatoryLoopKeyword_5_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_Group_5_6(parent, this, 0, inst);
			case 1: return new Object_Group_5_5(parent, this, 1, inst);
			case 2: return new Object_FeaturesAssignment_5_4(parent, this, 2, inst);
			case 3: return new Object_Group_5_3(parent, this, 3, inst);
			case 4: return new Object_Group_5_2(parent, this, 4, inst);
			case 5: return new Object_Group_5_1(parent, this, 5, inst);
			case 6: return new Object_Group_5_0(parent, this, 6, inst);
			case 7: return new Object_LeftCurlyBracketKeyword_4(parent, this, 7, inst);
			default: return null;
		}	
	}	
		
}

// features+=Feature+
protected class Object_FeaturesAssignment_5_7_1 extends AssignmentToken  {
	
	public Object_FeaturesAssignment_5_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getObjectAccess().getFeaturesAssignment_5_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Feature_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("features",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("features");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getObjectAccess().getFeaturesFeatureParserRuleCall_5_7_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Object_FeaturesAssignment_5_7_1(parent, next, actIndex, consumed);
			case 1: return new Object_MandatoryLoopKeyword_5_7_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "}"
protected class Object_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public Object_RightCurlyBracketKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getObjectAccess().getRightCurlyBracketKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Object_UnorderedGroup_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Object ****************/


/************ begin Rule Feature ****************
 *
 * Feature:
 *   Attribute|Reference;
 *
 **/

// Attribute|Reference
protected class Feature_Alternatives extends AlternativesToken {

	public Feature_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFeatureAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Feature_AttributeParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Feature_ReferenceParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFeatureRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Attribute
protected class Feature_AttributeParserRuleCall_0 extends RuleCallToken {
	
	public Feature_AttributeParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureAccess().getAttributeParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Attribute_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAttributeRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Reference
protected class Feature_ReferenceParserRuleCall_1 extends RuleCallToken {
	
	public Feature_ReferenceParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureAccess().getReferenceParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Reference_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Reference_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getReferenceRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Feature ****************/


/************ begin Rule Attribute ****************
 *
 * Attribute:
 *   "Attribute" type=ID name=ID ";";
 *
 **/

// "Attribute" type=ID name=ID ";"
protected class Attribute_Group extends GroupToken {
	
	public Attribute_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAttributeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_SemicolonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAttributeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "Attribute"
protected class Attribute_AttributeKeyword_0 extends KeywordToken  {
	
	public Attribute_AttributeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeAccess().getAttributeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// type=ID
protected class Attribute_TypeAssignment_1 extends AssignmentToken  {
	
	public Attribute_TypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_AttributeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getAttributeAccess().getTypeIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class Attribute_NameAssignment_2 extends AssignmentToken  {
	
	public Attribute_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_TypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Attribute_SemicolonKeyword_3 extends KeywordToken  {
	
	public Attribute_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeAccess().getSemicolonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Attribute ****************/


/************ begin Rule Reference ****************
 *
 * Reference:
 *   "Reference" type=[Object] many?="*"? name=ID ("{" (("shortDescription"
 *   shortDescription=STRING ";")? & ("longDescription" longDescription=STRING ";")?) "}"|
 *   ";");
 *
 **/

// "Reference" type=[Object] many?="*"? name=ID ("{" (("shortDescription"
// shortDescription=STRING ";")? & ("longDescription" longDescription=STRING ";")?) "}"|
// ";")
protected class Reference_Group extends GroupToken {
	
	public Reference_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReferenceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Reference_Alternatives_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "Reference"
protected class Reference_ReferenceKeyword_0 extends KeywordToken  {
	
	public Reference_ReferenceKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReferenceAccess().getReferenceKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// type=[Object]
protected class Reference_TypeAssignment_1 extends AssignmentToken  {
	
	public Reference_TypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReferenceAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Reference_ReferenceKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getReferenceAccess().getTypeObjectCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getReferenceAccess().getTypeObjectCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// many?="*"?
protected class Reference_ManyAssignment_2 extends AssignmentToken  {
	
	public Reference_ManyAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReferenceAccess().getManyAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Reference_TypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("many",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("many");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getReferenceAccess().getManyAsteriskKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class Reference_NameAssignment_3 extends AssignmentToken  {
	
	public Reference_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReferenceAccess().getNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Reference_ManyAssignment_2(parent, this, 0, inst);
			case 1: return new Reference_TypeAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getReferenceAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "{" (("shortDescription" shortDescription=STRING ";")? & ("longDescription"
// longDescription=STRING ";")?) "}"|";"
protected class Reference_Alternatives_4 extends AlternativesToken {

	public Reference_Alternatives_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getReferenceAccess().getAlternatives_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Reference_Group_4_0(parent, this, 0, inst);
			case 1: return new Reference_SemicolonKeyword_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "{" (("shortDescription" shortDescription=STRING ";")? & ("longDescription"
// longDescription=STRING ";")?) "}"
protected class Reference_Group_4_0 extends GroupToken {
	
	public Reference_Group_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReferenceAccess().getGroup_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Reference_RightCurlyBracketKeyword_4_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Reference_LeftCurlyBracketKeyword_4_0_0 extends KeywordToken  {
	
	public Reference_LeftCurlyBracketKeyword_4_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReferenceAccess().getLeftCurlyBracketKeyword_4_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Reference_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("shortDescription" shortDescription=STRING ";")? & ("longDescription"
// longDescription=STRING ";")?
protected class Reference_UnorderedGroup_4_0_1 extends UnorderedGroupToken {
	
	public Reference_UnorderedGroup_4_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public UnorderedGroup getGrammarElement() {
		return grammarAccess.getReferenceAccess().getUnorderedGroup_4_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Reference_Group_4_0_1_1(parent, this, 0, inst);
			case 1: return new Reference_Group_4_0_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ("shortDescription" shortDescription=STRING ";")?
protected class Reference_Group_4_0_1_0 extends GroupToken {
	
	public Reference_Group_4_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReferenceAccess().getGroup_4_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Reference_SemicolonKeyword_4_0_1_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "shortDescription"
protected class Reference_ShortDescriptionKeyword_4_0_1_0_0 extends KeywordToken  {
	
	public Reference_ShortDescriptionKeyword_4_0_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReferenceAccess().getShortDescriptionKeyword_4_0_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Reference_LeftCurlyBracketKeyword_4_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// shortDescription=STRING
protected class Reference_ShortDescriptionAssignment_4_0_1_0_1 extends AssignmentToken  {
	
	public Reference_ShortDescriptionAssignment_4_0_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReferenceAccess().getShortDescriptionAssignment_4_0_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Reference_ShortDescriptionKeyword_4_0_1_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("shortDescription",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("shortDescription");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getReferenceAccess().getShortDescriptionSTRINGTerminalRuleCall_4_0_1_0_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Reference_SemicolonKeyword_4_0_1_0_2 extends KeywordToken  {
	
	public Reference_SemicolonKeyword_4_0_1_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReferenceAccess().getSemicolonKeyword_4_0_1_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Reference_ShortDescriptionAssignment_4_0_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("longDescription" longDescription=STRING ";")?
protected class Reference_Group_4_0_1_1 extends GroupToken {
	
	public Reference_Group_4_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReferenceAccess().getGroup_4_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Reference_SemicolonKeyword_4_0_1_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "longDescription"
protected class Reference_LongDescriptionKeyword_4_0_1_1_0 extends KeywordToken  {
	
	public Reference_LongDescriptionKeyword_4_0_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReferenceAccess().getLongDescriptionKeyword_4_0_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Reference_Group_4_0_1_0(parent, this, 0, inst);
			case 1: return new Reference_LeftCurlyBracketKeyword_4_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// longDescription=STRING
protected class Reference_LongDescriptionAssignment_4_0_1_1_1 extends AssignmentToken  {
	
	public Reference_LongDescriptionAssignment_4_0_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReferenceAccess().getLongDescriptionAssignment_4_0_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Reference_LongDescriptionKeyword_4_0_1_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("longDescription",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("longDescription");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getReferenceAccess().getLongDescriptionSTRINGTerminalRuleCall_4_0_1_1_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Reference_SemicolonKeyword_4_0_1_1_2 extends KeywordToken  {
	
	public Reference_SemicolonKeyword_4_0_1_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReferenceAccess().getSemicolonKeyword_4_0_1_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Reference_LongDescriptionAssignment_4_0_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



// "}"
protected class Reference_RightCurlyBracketKeyword_4_0_2 extends KeywordToken  {
	
	public Reference_RightCurlyBracketKeyword_4_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReferenceAccess().getRightCurlyBracketKeyword_4_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Reference_UnorderedGroup_4_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ";"
protected class Reference_SemicolonKeyword_4_1 extends KeywordToken  {
	
	public Reference_SemicolonKeyword_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReferenceAccess().getSemicolonKeyword_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Reference_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule Reference ****************/

}
