/*
* generated by Xtext
*/
package org.eclipse.xtext.ui.tests.editor.contentassist.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.ui.tests.editor.contentassist.services.ContentAssistContextTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class ContentAssistContextTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private ContentAssistContextTestLanguageGrammarAccess grammarAccess;
	
	@Override	
	public ContentAssistContextTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FirstLevel_Group(this, this, 0, inst);
			case 1: return new SecondLevelA_Group(this, this, 1, inst);
			case 2: return new SecondLevelB_Group(this, this, 2, inst);
			case 3: return new ThirdLevelA1_Group(this, this, 3, inst);
			case 4: return new ThirdLevelA2_Group(this, this, 4, inst);
			case 5: return new ThirdLevelB1_Group(this, this, 5, inst);
			case 6: return new ThirdLevelB2_Group(this, this, 6, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule FirstLevel ****************
 *
 * FirstLevel:
 *   secondLevelA+=SecondLevelA* secondLevelB+=SecondLevelB*;
 *
 **/

// secondLevelA+=SecondLevelA* secondLevelB+=SecondLevelB*
protected class FirstLevel_Group extends GroupToken {
	
	public FirstLevel_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFirstLevelAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FirstLevel_SecondLevelBAssignment_1(parent, this, 0, inst);
			case 1: return new FirstLevel_SecondLevelAAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getFirstLevelRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// secondLevelA+=SecondLevelA*
protected class FirstLevel_SecondLevelAAssignment_0 extends AssignmentToken  {
	
	public FirstLevel_SecondLevelAAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFirstLevelAccess().getSecondLevelAAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SecondLevelA_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("secondLevelA",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("secondLevelA");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSecondLevelARule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFirstLevelAccess().getSecondLevelASecondLevelAParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FirstLevel_SecondLevelAAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// secondLevelB+=SecondLevelB*
protected class FirstLevel_SecondLevelBAssignment_1 extends AssignmentToken  {
	
	public FirstLevel_SecondLevelBAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFirstLevelAccess().getSecondLevelBAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SecondLevelB_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("secondLevelB",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("secondLevelB");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSecondLevelBRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFirstLevelAccess().getSecondLevelBSecondLevelBParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FirstLevel_SecondLevelBAssignment_1(parent, next, actIndex, consumed);
			case 1: return new FirstLevel_SecondLevelAAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}


/************ end Rule FirstLevel ****************/


/************ begin Rule SecondLevelA ****************
 *
 * SecondLevelA:
 *   thirdLevelA1+=ThirdLevelA1+ thirdLevelA2+=ThirdLevelA2+;
 *
 **/

// thirdLevelA1+=ThirdLevelA1+ thirdLevelA2+=ThirdLevelA2+
protected class SecondLevelA_Group extends GroupToken {
	
	public SecondLevelA_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSecondLevelAAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SecondLevelA_ThirdLevelA2Assignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getSecondLevelARule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// thirdLevelA1+=ThirdLevelA1+
protected class SecondLevelA_ThirdLevelA1Assignment_0 extends AssignmentToken  {
	
	public SecondLevelA_ThirdLevelA1Assignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSecondLevelAAccess().getThirdLevelA1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThirdLevelA1_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("thirdLevelA1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("thirdLevelA1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getThirdLevelA1Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSecondLevelAAccess().getThirdLevelA1ThirdLevelA1ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SecondLevelA_ThirdLevelA1Assignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// thirdLevelA2+=ThirdLevelA2+
protected class SecondLevelA_ThirdLevelA2Assignment_1 extends AssignmentToken  {
	
	public SecondLevelA_ThirdLevelA2Assignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSecondLevelAAccess().getThirdLevelA2Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThirdLevelA2_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("thirdLevelA2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("thirdLevelA2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getThirdLevelA2Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSecondLevelAAccess().getThirdLevelA2ThirdLevelA2ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SecondLevelA_ThirdLevelA2Assignment_1(parent, next, actIndex, consumed);
			case 1: return new SecondLevelA_ThirdLevelA1Assignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule SecondLevelA ****************/


/************ begin Rule SecondLevelB ****************
 *
 * SecondLevelB:
 *   thirdLevelB1+=ThirdLevelB1+ thirdLevelB2+=ThirdLevelB2+;
 *
 **/

// thirdLevelB1+=ThirdLevelB1+ thirdLevelB2+=ThirdLevelB2+
protected class SecondLevelB_Group extends GroupToken {
	
	public SecondLevelB_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSecondLevelBAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SecondLevelB_ThirdLevelB2Assignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getSecondLevelBRule().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// thirdLevelB1+=ThirdLevelB1+
protected class SecondLevelB_ThirdLevelB1Assignment_0 extends AssignmentToken  {
	
	public SecondLevelB_ThirdLevelB1Assignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSecondLevelBAccess().getThirdLevelB1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThirdLevelB1_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("thirdLevelB1",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("thirdLevelB1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getThirdLevelB1Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSecondLevelBAccess().getThirdLevelB1ThirdLevelB1ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SecondLevelB_ThirdLevelB1Assignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// thirdLevelB2+=ThirdLevelB2+
protected class SecondLevelB_ThirdLevelB2Assignment_1 extends AssignmentToken  {
	
	public SecondLevelB_ThirdLevelB2Assignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSecondLevelBAccess().getThirdLevelB2Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThirdLevelB2_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("thirdLevelB2",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("thirdLevelB2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getThirdLevelB2Rule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSecondLevelBAccess().getThirdLevelB2ThirdLevelB2ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SecondLevelB_ThirdLevelB2Assignment_1(parent, next, actIndex, consumed);
			case 1: return new SecondLevelB_ThirdLevelB1Assignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule SecondLevelB ****************/


/************ begin Rule ThirdLevelA1 ****************
 *
 * ThirdLevelA1:
 *   "A1" {ThirdLevelA1} name=ID?;
 *
 **/

// "A1" {ThirdLevelA1} name=ID?
protected class ThirdLevelA1_Group extends GroupToken {
	
	public ThirdLevelA1_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getThirdLevelA1Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThirdLevelA1_NameAssignment_2(parent, this, 0, inst);
			case 1: return new ThirdLevelA1_ThirdLevelA1Action_1(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getThirdLevelA1Access().getThirdLevelA1Action_1().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// "A1"
protected class ThirdLevelA1_A1Keyword_0 extends KeywordToken  {
	
	public ThirdLevelA1_A1Keyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getThirdLevelA1Access().getA1Keyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

}

// {ThirdLevelA1}
protected class ThirdLevelA1_ThirdLevelA1Action_1 extends ActionToken  {

	public ThirdLevelA1_ThirdLevelA1Action_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getThirdLevelA1Access().getThirdLevelA1Action_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThirdLevelA1_A1Keyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isConsumed()) return null;
		return current;
	}
}

// name=ID?
protected class ThirdLevelA1_NameAssignment_2 extends AssignmentToken  {
	
	public ThirdLevelA1_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getThirdLevelA1Access().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThirdLevelA1_ThirdLevelA1Action_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getThirdLevelA1Access().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getThirdLevelA1Access().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ThirdLevelA1 ****************/


/************ begin Rule ThirdLevelA2 ****************
 *
 * ThirdLevelA2:
 *   "A2" {ThirdLevelA2} name=ID?;
 *
 **/

// "A2" {ThirdLevelA2} name=ID?
protected class ThirdLevelA2_Group extends GroupToken {
	
	public ThirdLevelA2_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getThirdLevelA2Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThirdLevelA2_NameAssignment_2(parent, this, 0, inst);
			case 1: return new ThirdLevelA2_ThirdLevelA2Action_1(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getThirdLevelA2Access().getThirdLevelA2Action_1().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// "A2"
protected class ThirdLevelA2_A2Keyword_0 extends KeywordToken  {
	
	public ThirdLevelA2_A2Keyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getThirdLevelA2Access().getA2Keyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

}

// {ThirdLevelA2}
protected class ThirdLevelA2_ThirdLevelA2Action_1 extends ActionToken  {

	public ThirdLevelA2_ThirdLevelA2Action_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getThirdLevelA2Access().getThirdLevelA2Action_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThirdLevelA2_A2Keyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isConsumed()) return null;
		return current;
	}
}

// name=ID?
protected class ThirdLevelA2_NameAssignment_2 extends AssignmentToken  {
	
	public ThirdLevelA2_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getThirdLevelA2Access().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThirdLevelA2_ThirdLevelA2Action_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getThirdLevelA2Access().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getThirdLevelA2Access().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ThirdLevelA2 ****************/


/************ begin Rule ThirdLevelB1 ****************
 *
 * ThirdLevelB1:
 *   "B1" {ThirdLevelB1} name=ID?;
 *
 **/

// "B1" {ThirdLevelB1} name=ID?
protected class ThirdLevelB1_Group extends GroupToken {
	
	public ThirdLevelB1_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getThirdLevelB1Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThirdLevelB1_NameAssignment_2(parent, this, 0, inst);
			case 1: return new ThirdLevelB1_ThirdLevelB1Action_1(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getThirdLevelB1Access().getThirdLevelB1Action_1().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// "B1"
protected class ThirdLevelB1_B1Keyword_0 extends KeywordToken  {
	
	public ThirdLevelB1_B1Keyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getThirdLevelB1Access().getB1Keyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

}

// {ThirdLevelB1}
protected class ThirdLevelB1_ThirdLevelB1Action_1 extends ActionToken  {

	public ThirdLevelB1_ThirdLevelB1Action_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getThirdLevelB1Access().getThirdLevelB1Action_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThirdLevelB1_B1Keyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isConsumed()) return null;
		return current;
	}
}

// name=ID?
protected class ThirdLevelB1_NameAssignment_2 extends AssignmentToken  {
	
	public ThirdLevelB1_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getThirdLevelB1Access().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThirdLevelB1_ThirdLevelB1Action_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getThirdLevelB1Access().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getThirdLevelB1Access().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ThirdLevelB1 ****************/


/************ begin Rule ThirdLevelB2 ****************
 *
 * ThirdLevelB2:
 *   "B2" {ThirdLevelB2} name=ID?;
 *
 **/

// "B2" {ThirdLevelB2} name=ID?
protected class ThirdLevelB2_Group extends GroupToken {
	
	public ThirdLevelB2_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getThirdLevelB2Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThirdLevelB2_NameAssignment_2(parent, this, 0, inst);
			case 1: return new ThirdLevelB2_ThirdLevelB2Action_1(parent, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IInstanceDescription tryConsume() {
		if(current.getDelegate().eClass() == grammarAccess.getThirdLevelB2Access().getThirdLevelB2Action_1().getType().getClassifier())
			return tryConsumeVal();
		return null;
	}

}

// "B2"
protected class ThirdLevelB2_B2Keyword_0 extends KeywordToken  {
	
	public ThirdLevelB2_B2Keyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getThirdLevelB2Access().getB2Keyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}

}

// {ThirdLevelB2}
protected class ThirdLevelB2_ThirdLevelB2Action_1 extends ActionToken  {

	public ThirdLevelB2_ThirdLevelB2Action_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getThirdLevelB2Access().getThirdLevelB2Action_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThirdLevelB2_B2Keyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isConsumed()) return null;
		return current;
	}
}

// name=ID?
protected class ThirdLevelB2_NameAssignment_2 extends AssignmentToken  {
	
	public ThirdLevelB2_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getThirdLevelB2Access().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ThirdLevelB2_ThirdLevelB2Action_1(parent, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getDelegate(), grammarAccess.getThirdLevelB2Access().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.LRC;
			element = grammarAccess.getThirdLevelB2Access().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ThirdLevelB2 ****************/

}
