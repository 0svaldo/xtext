/*
 * generated by Xtext
 */
package org.eclipse.xtext.ui.tests.editor.contentassist.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug288734TestLanguage.Bug288734TestLanguagePackage;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug288734TestLanguage.Model;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug288734TestLanguage.TAnnotation;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug288734TestLanguage.TBooleanConstant;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug288734TestLanguage.TIntegerConstant;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug288734TestLanguage.TStringConstant;
import org.eclipse.xtext.ui.tests.editor.contentassist.services.Bug288734TestLanguageGrammarAccess;

@SuppressWarnings("all")
public class Bug288734TestLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private Bug288734TestLanguageGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == Bug288734TestLanguagePackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case Bug288734TestLanguagePackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case Bug288734TestLanguagePackage.TANNOTATION:
				sequence_TAnnotation(context, (TAnnotation) semanticObject); 
				return; 
			case Bug288734TestLanguagePackage.TBOOLEAN_CONSTANT:
				sequence_TBooleanConstant(context, (TBooleanConstant) semanticObject); 
				return; 
			case Bug288734TestLanguagePackage.TINTEGER_CONSTANT:
				sequence_TIntegerConstant(context, (TIntegerConstant) semanticObject); 
				return; 
			case Bug288734TestLanguagePackage.TSTRING_CONSTANT:
				sequence_TStringConstant(context, (TStringConstant) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     constants+=TConstant
	 */
	protected void sequence_Model(EObject context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     description=STRING
	 */
	protected void sequence_TAnnotation(EObject context, TAnnotation semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, Bug288734TestLanguagePackage.Literals.TANNOTATION__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Bug288734TestLanguagePackage.Literals.TANNOTATION__DESCRIPTION));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getTAnnotationAccess().getDescriptionSTRINGTerminalRuleCall_1_0(), semanticObject.getDescription());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (annotations+=TAnnotation* name=ID)
	 */
	protected void sequence_TBooleanConstant(EObject context, TBooleanConstant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (annotations+=TAnnotation* name=ID)
	 */
	protected void sequence_TIntegerConstant(EObject context, TIntegerConstant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (annotations+=TAnnotation* name=ID)
	 */
	protected void sequence_TStringConstant(EObject context, TStringConstant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
