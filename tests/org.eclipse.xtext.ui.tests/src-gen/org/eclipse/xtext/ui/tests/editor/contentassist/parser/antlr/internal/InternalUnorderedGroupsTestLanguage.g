/*
* generated by Xtext
*/
grammar InternalUnorderedGroupsTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.ui.tests.editor.contentassist.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.ui.tests.editor.contentassist.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.ui.tests.editor.contentassist.services.UnorderedGroupsTestLanguageGrammarAccess;

}

@parser::members {

 	private UnorderedGroupsTestLanguageGrammarAccess grammarAccess;
 	
    public InternalUnorderedGroupsTestLanguageParser(TokenStream input, IAstFactory factory, UnorderedGroupsTestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/xtext/ui/tests/editor/contentassist/parser/antlr/internal/InternalUnorderedGroupsTestLanguage.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'1' 
    {
        createLeafNode(grammarAccess.getModelAccess().getDigitOneKeyword_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getFirstSimpleModelParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_first_1_0=ruleSimpleModel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"first",
	        		lv_first_1_0, 
	        		"SimpleModel", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'2' 
    {
        createLeafNode(grammarAccess.getModelAccess().getDigitTwoKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getSecondMandatoryModelParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_second_3_0=ruleMandatoryModel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"second",
	        		lv_second_3_0, 
	        		"MandatoryModel", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'3' 
    {
        createLeafNode(grammarAccess.getModelAccess().getDigitThreeKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getThrirdLoopedModelParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_thrird_5_0=ruleLoopedModel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"thrird",
	        		lv_thrird_5_0, 
	        		"LoopedModel", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'4' 
    {
        createLeafNode(grammarAccess.getModelAccess().getDigitFourKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getForthGroupLoopedModelParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_forth_7_0=ruleGroupLoopedModel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"forth",
	        		lv_forth_7_0, 
	        		"GroupLoopedModel", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleSimpleModel
entryRuleSimpleModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimpleModelRule(), currentNode); }
	 iv_ruleSimpleModel=ruleSimpleModel 
	 { $current=$iv_ruleSimpleModel.current; } 
	 EOF 
;

// Rule SimpleModel
ruleSimpleModel returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
	  boolean[] pred_0 = new boolean[4];
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((

(
	{ 
	  pred_0 = new boolean[4];
	}
	(
		(

			( 
				{!pred_0[0]}?=>(
					{ 
	 				  pred_0[0] = true;
	 				  
	 				}
					(
(
(
		lv_visibility_1_1=	'public' 
    {
        createLeafNode(grammarAccess.getSimpleModelAccess().getVisibilityPublicKeyword_0_0_0_0(), "visibility"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "visibility", lv_visibility_1_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_visibility_1_2=	'private' 
    {
        createLeafNode(grammarAccess.getSimpleModelAccess().getVisibilityPrivateKeyword_0_0_0_1(), "visibility"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "visibility", lv_visibility_1_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_visibility_1_3=	'protected' 
    {
        createLeafNode(grammarAccess.getSimpleModelAccess().getVisibilityProtectedKeyword_0_0_0_2(), "visibility"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "visibility", lv_visibility_1_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)
 				)
			)  |

			( 
				{!pred_0[1]}?=>(
					{ 
	 				  pred_0[1] = true;
	 				  
	 				}
					(
(
		lv_static_2_0=	'static' 
    {
        createLeafNode(grammarAccess.getSimpleModelAccess().getStaticStaticKeyword_0_1_0(), "static"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "static", true, "static", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_0[2]}?=>(
					{ 
	 				  pred_0[2] = true;
	 				  
	 				}
					(
(
		lv_synchronized_3_0=	'synchronized' 
    {
        createLeafNode(grammarAccess.getSimpleModelAccess().getSynchronizedSynchronizedKeyword_0_2_0(), "synchronized"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "synchronized", true, "synchronized", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_0[3]}?=>(
					{ 
	 				  pred_0[3] = true;
	 				  
	 				}
					((
(
		lv_abstract_4_0=	'abstract' 
    {
        createLeafNode(grammarAccess.getSimpleModelAccess().getAbstractAbstractKeyword_0_3_0_0(), "abstract"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "abstract", true, "abstract", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_final_5_0=	'final' 
    {
        createLeafNode(grammarAccess.getSimpleModelAccess().getFinalFinalKeyword_0_3_1_0(), "final"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "final", true, "final", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
 				)
			)  

		)*	
	)
)
	{ 
	  pred_0 = new boolean[4];
	}

)	'class' 
    {
        createLeafNode(grammarAccess.getSimpleModelAccess().getClassKeyword_1(), null); 
    }
(
(
		lv_name_7_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSimpleModelAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_7_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getSimpleModelAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
	'}' 
    {
        createLeafNode(grammarAccess.getSimpleModelAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleMandatoryModel
entryRuleMandatoryModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMandatoryModelRule(), currentNode); }
	 iv_ruleMandatoryModel=ruleMandatoryModel 
	 { $current=$iv_ruleMandatoryModel.current; } 
	 EOF 
;

// Rule MandatoryModel
ruleMandatoryModel returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
	  boolean[] pred_0 = new boolean[4];
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((

(
	{ 
	  pred_0 = new boolean[4];
	  int remaining_pred_0 = 3;
	}
	(
		(

			( 
				{!pred_0[0]}?=>(
					{ 
	 				  pred_0[0] = true;
	 				  remaining_pred_0--;
	 				}
					(
(
(
		lv_visibility_1_1=	'public' 
    {
        createLeafNode(grammarAccess.getMandatoryModelAccess().getVisibilityPublicKeyword_0_0_0_0(), "visibility"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMandatoryModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "visibility", lv_visibility_1_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_visibility_1_2=	'private' 
    {
        createLeafNode(grammarAccess.getMandatoryModelAccess().getVisibilityPrivateKeyword_0_0_0_1(), "visibility"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMandatoryModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "visibility", lv_visibility_1_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_visibility_1_3=	'protected' 
    {
        createLeafNode(grammarAccess.getMandatoryModelAccess().getVisibilityProtectedKeyword_0_0_0_2(), "visibility"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMandatoryModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "visibility", lv_visibility_1_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)
 				)
			)  |

			( 
				{!pred_0[1]}?=>(
					{ 
	 				  pred_0[1] = true;
	 				  remaining_pred_0--;
	 				}
					(
(
		lv_static_2_0=	'static' 
    {
        createLeafNode(grammarAccess.getMandatoryModelAccess().getStaticStaticKeyword_0_1_0(), "static"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMandatoryModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "static", true, "static", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_0[2]}?=>(
					{ 
	 				  pred_0[2] = true;
	 				  remaining_pred_0--;
	 				}
					(
(
		lv_synchronized_3_0=	'synchronized' 
    {
        createLeafNode(grammarAccess.getMandatoryModelAccess().getSynchronizedSynchronizedKeyword_0_2_0(), "synchronized"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMandatoryModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "synchronized", true, "synchronized", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_0[3]}?=>(
					{ 
	 				  pred_0[3] = true;
	 				  
	 				}
					((
(
		lv_abstract_4_0=	'abstract' 
    {
        createLeafNode(grammarAccess.getMandatoryModelAccess().getAbstractAbstractKeyword_0_3_0_0(), "abstract"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMandatoryModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "abstract", true, "abstract", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_final_5_0=	'final' 
    {
        createLeafNode(grammarAccess.getMandatoryModelAccess().getFinalFinalKeyword_0_3_1_0(), "final"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMandatoryModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "final", true, "final", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
 				)
			)  

		)+
	  	{remaining_pred_0==0}?	
	)
)
	{ 
	  pred_0 = new boolean[4];
	}

)	'class' 
    {
        createLeafNode(grammarAccess.getMandatoryModelAccess().getClassKeyword_1(), null); 
    }
(
(
		lv_name_7_0=RULE_ID
		{
			createLeafNode(grammarAccess.getMandatoryModelAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMandatoryModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_7_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getMandatoryModelAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
	'}' 
    {
        createLeafNode(grammarAccess.getMandatoryModelAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleLoopedModel
entryRuleLoopedModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLoopedModelRule(), currentNode); }
	 iv_ruleLoopedModel=ruleLoopedModel 
	 { $current=$iv_ruleLoopedModel.current; } 
	 EOF 
;

// Rule LoopedModel
ruleLoopedModel returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
	  boolean[] pred_0 = new boolean[4];
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((

(
	{ 
	  pred_0 = new boolean[4];
	}
	(
		(

			( 
				{!pred_0[0]}?=>(
					{ 
	 				  pred_0[0] = true;
	 				  
	 				}
					(
(
(
		lv_visibility_1_1=	'public' 
    {
        createLeafNode(grammarAccess.getLoopedModelAccess().getVisibilityPublicKeyword_0_0_0_0(), "visibility"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopedModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "visibility", lv_visibility_1_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_visibility_1_2=	'private' 
    {
        createLeafNode(grammarAccess.getLoopedModelAccess().getVisibilityPrivateKeyword_0_0_0_1(), "visibility"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopedModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "visibility", lv_visibility_1_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_visibility_1_3=	'protected' 
    {
        createLeafNode(grammarAccess.getLoopedModelAccess().getVisibilityProtectedKeyword_0_0_0_2(), "visibility"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopedModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "visibility", lv_visibility_1_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)+
 				)
			)  |

			( 
				{!pred_0[1]}?=>(
					{ 
	 				  pred_0[1] = true;
	 				  
	 				}
					(
(
		lv_static_2_0=	'static' 
    {
        createLeafNode(grammarAccess.getLoopedModelAccess().getStaticStaticKeyword_0_1_0(), "static"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopedModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "static", lv_static_2_0, "static", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)+
 				)
			)  |

			( 
				{!pred_0[2]}?=>(
					{ 
	 				  pred_0[2] = true;
	 				  
	 				}
					(
(
		lv_synchronized_3_0=	'synchronized' 
    {
        createLeafNode(grammarAccess.getLoopedModelAccess().getSynchronizedSynchronizedKeyword_0_2_0(), "synchronized"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopedModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "synchronized", lv_synchronized_3_0, "synchronized", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)+
 				)
			)  |

			( 
				{!pred_0[3]}?=>(
					{ 
	 				  pred_0[3] = true;
	 				  
	 				}
					((
(
		lv_abstract_4_0=	'abstract' 
    {
        createLeafNode(grammarAccess.getLoopedModelAccess().getAbstractAbstractKeyword_0_3_0_0(), "abstract"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopedModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "abstract", lv_abstract_4_0, "abstract", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_final_5_0=	'final' 
    {
        createLeafNode(grammarAccess.getLoopedModelAccess().getFinalFinalKeyword_0_3_1_0(), "final"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopedModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "final", lv_final_5_0, "final", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))+
 				)
			)  

		)*	
	)
)
	{ 
	  pred_0 = new boolean[4];
	}

)	'class' 
    {
        createLeafNode(grammarAccess.getLoopedModelAccess().getClassKeyword_1(), null); 
    }
(
(
		lv_name_7_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLoopedModelAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopedModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_7_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getLoopedModelAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
	'}' 
    {
        createLeafNode(grammarAccess.getLoopedModelAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleGroupLoopedModel
entryRuleGroupLoopedModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getGroupLoopedModelRule(), currentNode); }
	 iv_ruleGroupLoopedModel=ruleGroupLoopedModel 
	 { $current=$iv_ruleGroupLoopedModel.current; } 
	 EOF 
;

// Rule GroupLoopedModel
ruleGroupLoopedModel returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
	  boolean[] pred_0 = new boolean[4];
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((

(
	{ 
	  pred_0 = new boolean[4];
	  int remaining_pred_0 = 4;
	}
	(
		(

			( 
				{!pred_0[0]}?=>(
					{ 
	 				  pred_0[0] = true;
	 				  remaining_pred_0--;
	 				}
					(
(
(
		lv_visibility_1_1=	'public' 
    {
        createLeafNode(grammarAccess.getGroupLoopedModelAccess().getVisibilityPublicKeyword_0_0_0_0(), "visibility"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupLoopedModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "visibility", lv_visibility_1_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_visibility_1_2=	'private' 
    {
        createLeafNode(grammarAccess.getGroupLoopedModelAccess().getVisibilityPrivateKeyword_0_0_0_1(), "visibility"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupLoopedModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "visibility", lv_visibility_1_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_visibility_1_3=	'protected' 
    {
        createLeafNode(grammarAccess.getGroupLoopedModelAccess().getVisibilityProtectedKeyword_0_0_0_2(), "visibility"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupLoopedModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "visibility", lv_visibility_1_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)
 				)
			)  |

			( 
				{!pred_0[1]}?=>(
					{ 
	 				  pred_0[1] = true;
	 				  remaining_pred_0--;
	 				}
					(
(
		lv_static_2_0=	'static' 
    {
        createLeafNode(grammarAccess.getGroupLoopedModelAccess().getStaticStaticKeyword_0_1_0(), "static"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupLoopedModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "static", lv_static_2_0, "static", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_0[2]}?=>(
					{ 
	 				  pred_0[2] = true;
	 				  remaining_pred_0--;
	 				}
					(
(
		lv_synchronized_3_0=	'synchronized' 
    {
        createLeafNode(grammarAccess.getGroupLoopedModelAccess().getSynchronizedSynchronizedKeyword_0_2_0(), "synchronized"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupLoopedModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "synchronized", lv_synchronized_3_0, "synchronized", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
 				)
			)  |

			( 
				{!pred_0[3]}?=>(
					{ 
	 				  pred_0[3] = true;
	 				  remaining_pred_0--;
	 				}
					((
(
		lv_abstract_4_0=	'abstract' 
    {
        createLeafNode(grammarAccess.getGroupLoopedModelAccess().getAbstractAbstractKeyword_0_3_0_0(), "abstract"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupLoopedModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "abstract", lv_abstract_4_0, "abstract", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_final_5_0=	'final' 
    {
        createLeafNode(grammarAccess.getGroupLoopedModelAccess().getFinalFinalKeyword_0_3_1_0(), "final"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupLoopedModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "final", lv_final_5_0, "final", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
 				)
			)  

		)+
	  	{remaining_pred_0==0}?	
	)
)
	{ 
	  pred_0 = new boolean[4];
	}

)*	'class' 
    {
        createLeafNode(grammarAccess.getGroupLoopedModelAccess().getClassKeyword_1(), null); 
    }
(
(
		lv_name_7_0=RULE_ID
		{
			createLeafNode(grammarAccess.getGroupLoopedModelAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupLoopedModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_7_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getGroupLoopedModelAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
	'}' 
    {
        createLeafNode(grammarAccess.getGroupLoopedModelAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


