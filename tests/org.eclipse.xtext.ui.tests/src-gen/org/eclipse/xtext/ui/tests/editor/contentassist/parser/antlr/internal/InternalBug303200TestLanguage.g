/*
* generated by Xtext
*/
grammar InternalBug303200TestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.eclipse.xtext.ui.tests.editor.contentassist.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.ui.tests.editor.contentassist.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.ui.tests.editor.contentassist.services.Bug303200TestLanguageGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private Bug303200TestLanguageGrammarAccess grammarAccess;
 	
    public InternalBug303200TestLanguageParser(TokenStream input, IAstFactory factory, Bug303200TestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/xtext/ui/tests/editor/contentassist/parser/antlr/internal/InternalBug303200TestLanguage.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected Bug303200TestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getProgramRule(), currentNode); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getProgramAccess().getProgramAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getProgramAccess().getProgramAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((RULE_LT
    { 
    createLeafNode(grammarAccess.getProgramAccess().getLTTerminalRuleCall_1_0(), null); 
    }
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProgramAccess().getDirectivesProgramDirectiveParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_directives_2_0=ruleProgramDirective		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"directives",
	        		lv_directives_2_0, 
	        		"ProgramDirective", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(RULE_LT
    { 
    createLeafNode(grammarAccess.getProgramAccess().getLTTerminalRuleCall_2(), null); 
    }
)*)
;





// Entry rule entryRuleProgramDirective
entryRuleProgramDirective returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getProgramDirectiveRule(), currentNode); }
	 iv_ruleProgramDirective=ruleProgramDirective 
	 { $current=$iv_ruleProgramDirective.current; } 
	 EOF 
;

// Rule ProgramDirective
ruleProgramDirective returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getProgramDirectiveAccess().getFunctionDefinitionParserRuleCall_0(), currentNode); 
    }
    this_FunctionDefinition_0=ruleFunctionDefinition
    { 
        $current = $this_FunctionDefinition_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getProgramDirectiveAccess().getStatementParserRuleCall_1(), currentNode); 
    }
    this_Statement_1=ruleStatement
    { 
        $current = $this_Statement_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleFunctionDefinition
entryRuleFunctionDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionDefinitionRule(), currentNode); }
	 iv_ruleFunctionDefinition=ruleFunctionDefinition 
	 { $current=$iv_ruleFunctionDefinition.current; } 
	 EOF 
;

// Rule FunctionDefinition
ruleFunctionDefinition returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionDefinitionAccess().getAttributesAttributeParserRuleCall_0_0(), currentNode); 
	    }
		lv_attributes_0_0=ruleAttribute		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_0_0, 
	        		"Attribute", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'function' 
    {
        createLeafNode(grammarAccess.getFunctionDefinitionAccess().getFunctionKeyword_1(), null); 
    }
(RULE_LT
    { 
    createLeafNode(grammarAccess.getFunctionDefinitionAccess().getLTTerminalRuleCall_2(), null); 
    }
)*(
(
		lv_name_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getFunctionDefinitionAccess().getNameIDTerminalRuleCall_3_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(RULE_LT
    { 
    createLeafNode(grammarAccess.getFunctionDefinitionAccess().getLTTerminalRuleCall_4(), null); 
    }
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionDefinitionAccess().getParamsParametersParserRuleCall_5_0(), currentNode); 
	    }
		lv_params_5_0=ruleParameters		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"params",
	        		lv_params_5_0, 
	        		"Parameters", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(RULE_LT
    { 
    createLeafNode(grammarAccess.getFunctionDefinitionAccess().getLTTerminalRuleCall_6(), null); 
    }
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionDefinitionAccess().getBodyBlockParserRuleCall_7_0(), currentNode); 
	    }
		lv_body_7_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"body",
	        		lv_body_7_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttributeRule(), currentNode); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_ident_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAttributeAccess().getIdentIDTerminalRuleCall_0_0(), "ident"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ident",
	        		lv_ident_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAttributeAccess().getBracketAttributeAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAttributeAccess().getBracketAttributeAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'[' 
    {
        createLeafNode(grammarAccess.getAttributeAccess().getLeftSquareBracketKeyword_1_1(), null); 
    }
(RULE_LT
    { 
    createLeafNode(grammarAccess.getAttributeAccess().getLTTerminalRuleCall_1_2(), null); 
    }
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getExpressionPostfixExpressionParserRuleCall_1_3_0(), currentNode); 
	    }
		lv_expression_4_0=rulePostfixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_4_0, 
	        		"PostfixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(RULE_LT
    { 
    createLeafNode(grammarAccess.getAttributeAccess().getLTTerminalRuleCall_1_4(), null); 
    }
)*	']' 
    {
        createLeafNode(grammarAccess.getAttributeAccess().getRightSquareBracketKeyword_1_5(), null); 
    }
))
;





// Entry rule entryRuleParameters
entryRuleParameters returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParametersRule(), currentNode); }
	 iv_ruleParameters=ruleParameters 
	 { $current=$iv_ruleParameters.current; } 
	 EOF 
;

// Rule Parameters
ruleParameters returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getParametersAccess().getParametersAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getParametersAccess().getParametersAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'(' 
    {
        createLeafNode(grammarAccess.getParametersAccess().getLeftParenthesisKeyword_1(), null); 
    }
(RULE_LT
    { 
    createLeafNode(grammarAccess.getParametersAccess().getLTTerminalRuleCall_2(), null); 
    }
)*((
(
		lv_params_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getParametersAccess().getParamsIDTerminalRuleCall_3_0_0(), "params"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParametersRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"params",
	        		lv_params_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(RULE_LT
    { 
    createLeafNode(grammarAccess.getParametersAccess().getLTTerminalRuleCall_3_1(), null); 
    }
)*(	',' 
    {
        createLeafNode(grammarAccess.getParametersAccess().getCommaKeyword_3_2_0(), null); 
    }
(RULE_LT
    { 
    createLeafNode(grammarAccess.getParametersAccess().getLTTerminalRuleCall_3_2_1(), null); 
    }
)*(
(
		lv_params_7_0=RULE_ID
		{
			createLeafNode(grammarAccess.getParametersAccess().getParamsIDTerminalRuleCall_3_2_2_0(), "params"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParametersRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"params",
	        		lv_params_7_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(RULE_LT
    { 
    createLeafNode(grammarAccess.getParametersAccess().getLTTerminalRuleCall_3_2_3(), null); 
    }
)*)*)?	')' 
    {
        createLeafNode(grammarAccess.getParametersAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBlockRule(), currentNode); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getBlockAccess().getBlockAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBlockAccess().getBlockAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'{' 
    {
        createLeafNode(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
((RULE_LT
    { 
    createLeafNode(grammarAccess.getBlockAccess().getLTTerminalRuleCall_2_0(), null); 
    }
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBlockAccess().getDirectivesStatementParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_directives_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"directives",
	        		lv_directives_3_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(RULE_LT
    { 
    createLeafNode(grammarAccess.getBlockAccess().getLTTerminalRuleCall_3(), null); 
    }
)*	'}' 
    {
        createLeafNode(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStatementRule(), currentNode); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getBlockParserRuleCall_0(), currentNode); 
    }
    this_Block_0=ruleBlock
    { 
        $current = $this_Block_0.current; 
        currentNode = currentNode.getParent();
    }

    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getStatementAccess().getExpressionStatementAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getStatementAccess().getExpressionStatementAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getExpressionPostfixExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expression_2_0=rulePostfixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_2_0, 
	        		"PostfixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	';' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getSemicolonKeyword_1_2_0(), null); 
    }

    |RULE_LT
    { 
    createLeafNode(grammarAccess.getStatementAccess().getLTTerminalRuleCall_1_2_1(), null); 
    }
)))
;





// Entry rule entryRulePostfixExpression
entryRulePostfixExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPostfixExpressionRule(), currentNode); }
	 iv_rulePostfixExpression=rulePostfixExpression 
	 { $current=$iv_rulePostfixExpression.current; } 
	 EOF 
;

// Rule PostfixExpression
rulePostfixExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPostfixExpressionAccess().getPrimaryExpressionParserRuleCall_0(), currentNode); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        currentNode = currentNode.getParent();
    }
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPostfixExpressionAccess().getPostfixExpressionExpressionAction_1_0_0().getType().getClassifier());
        try {
        	factory.set(temp, "expression", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPostfixExpressionAccess().getPostfixExpressionExpressionAction_1_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(RULE_LT
    { 
    createLeafNode(grammarAccess.getPostfixExpressionAccess().getLTTerminalRuleCall_1_0_1(), null); 
    }
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPostfixExpressionAccess().getPropertyPropertyOperatorParserRuleCall_1_0_2_0(), currentNode); 
	    }
		lv_property_3_0=rulePropertyOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"property",
	        		lv_property_3_0, 
	        		"PropertyOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPostfixExpressionAccess().getInvocationExpressionAction_1_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "expression", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPostfixExpressionAccess().getInvocationExpressionAction_1_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(RULE_LT
    { 
    createLeafNode(grammarAccess.getPostfixExpressionAccess().getLTTerminalRuleCall_1_1_1(), null); 
    }
)*	'(' 
    {
        createLeafNode(grammarAccess.getPostfixExpressionAccess().getLeftParenthesisKeyword_1_1_2(), null); 
    }
(RULE_LT
    { 
    createLeafNode(grammarAccess.getPostfixExpressionAccess().getLTTerminalRuleCall_1_1_3(), null); 
    }
)*((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPostfixExpressionAccess().getArgumentsListExpressionParserRuleCall_1_1_4_0_0(), currentNode); 
	    }
		lv_arguments_8_0=ruleListExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostfixExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"arguments",
	        		lv_arguments_8_0, 
	        		"ListExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(RULE_LT
    { 
    createLeafNode(grammarAccess.getPostfixExpressionAccess().getLTTerminalRuleCall_1_1_4_1(), null); 
    }
)*)?	')' 
    {
        createLeafNode(grammarAccess.getPostfixExpressionAccess().getRightParenthesisKeyword_1_1_5(), null); 
    }
))*)
;





// Entry rule entryRuleListExpression
entryRuleListExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getListExpressionRule(), currentNode); }
	 iv_ruleListExpression=ruleListExpression 
	 { $current=$iv_ruleListExpression.current; } 
	 EOF 
;

// Rule ListExpression
ruleListExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getListExpressionAccess().getExpressionsPostfixExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_expressions_0_0=rulePostfixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getListExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_0_0, 
	        		"PostfixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((RULE_LT
    { 
    createLeafNode(grammarAccess.getListExpressionAccess().getLTTerminalRuleCall_1_0(), null); 
    }
)*	',' 
    {
        createLeafNode(grammarAccess.getListExpressionAccess().getCommaKeyword_1_1(), null); 
    }
(RULE_LT
    { 
    createLeafNode(grammarAccess.getListExpressionAccess().getLTTerminalRuleCall_1_2(), null); 
    }
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getListExpressionAccess().getExpressionsPostfixExpressionParserRuleCall_1_3_0(), currentNode); 
	    }
		lv_expressions_4_0=rulePostfixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getListExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_4_0, 
	        		"PostfixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulePropertyOperator
entryRulePropertyOperator returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyOperatorRule(), currentNode); }
	 iv_rulePropertyOperator=rulePropertyOperator 
	 { $current=$iv_rulePropertyOperator.current; } 
	 EOF 
;

// Rule PropertyOperator
rulePropertyOperator returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'.' 
    {
        createLeafNode(grammarAccess.getPropertyOperatorAccess().getFullStopKeyword_0_0(), null); 
    }
(RULE_LT
    { 
    createLeafNode(grammarAccess.getPropertyOperatorAccess().getLTTerminalRuleCall_0_1(), null); 
    }
)*(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPropertyOperatorAccess().getNameIDTerminalRuleCall_0_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyOperatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |(	'[' 
    {
        createLeafNode(grammarAccess.getPropertyOperatorAccess().getLeftSquareBracketKeyword_1_0(), null); 
    }
(RULE_LT
    { 
    createLeafNode(grammarAccess.getPropertyOperatorAccess().getLTTerminalRuleCall_1_1(), null); 
    }
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyOperatorAccess().getExpressionsListExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_expressions_5_0=ruleListExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyOperatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expressions",
	        		lv_expressions_5_0, 
	        		"ListExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(RULE_LT
    { 
    createLeafNode(grammarAccess.getPropertyOperatorAccess().getLTTerminalRuleCall_1_3(), null); 
    }
)*	']' 
    {
        createLeafNode(grammarAccess.getPropertyOperatorAccess().getRightSquareBracketKeyword_1_4(), null); 
    }
))
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimaryExpressionRule(), currentNode); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPrimaryExpressionAccess().getIdentifierAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIdentifierAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPrimaryExpressionAccess().getNameIDTerminalRuleCall_0_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'function' 
    {
        createLeafNode(grammarAccess.getPrimaryExpressionAccess().getFunctionKeyword_1_1(), null); 
    }
(RULE_LT
    { 
    createLeafNode(grammarAccess.getPrimaryExpressionAccess().getLTTerminalRuleCall_1_2(), null); 
    }
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParamsParametersParserRuleCall_1_3_0(), currentNode); 
	    }
		lv_params_5_0=ruleParameters		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"params",
	        		lv_params_5_0, 
	        		"Parameters", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(RULE_LT
    { 
    createLeafNode(grammarAccess.getPrimaryExpressionAccess().getLTTerminalRuleCall_1_4(), null); 
    }
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getBodyBlockParserRuleCall_1_5_0(), currentNode); 
	    }
		lv_body_7_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"body",
	        		lv_body_7_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





RULE_ID : ('a'..'z'|'A'..'Z')+;

RULE_WS : (' '|'\t')+;

RULE_LT : ('\r'|'\n');


