/*
* generated by Xtext
*/
grammar InternalBug326937TestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.ui.tests.editor.outline.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.ui.tests.editor.outline.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.ui.tests.editor.outline.services.Bug326937TestLanguageGrammarAccess;

}

@parser::members {

 	private Bug326937TestLanguageGrammarAccess grammarAccess;
 	
    public InternalBug326937TestLanguageParser(TokenStream input, IAstFactory factory, Bug326937TestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/xtext/ui/tests/editor/outline/parser/antlr/internal/InternalBug326937TestLanguage.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "A";	
   	}
   	
   	@Override
   	protected Bug326937TestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleA
entryRuleA returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getARule(), currentNode); }
	 iv_ruleA=ruleA 
	 { $current=$iv_ruleA.current; } 
	 EOF 
;

// Rule A
ruleA returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'A' 
    {
        createLeafNode(grammarAccess.getAAccess().getAKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getARule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'{' 
    {
        createLeafNode(grammarAccess.getAAccess().getLeftCurlyBracketKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAAccess().getContentsAorBParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_contents_3_0=ruleAorB		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getARule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"contents",
	        		lv_contents_3_0, 
	        		"AorB", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getAAccess().getRightCurlyBracketKeyword_2_2(), null); 
    }
)?)
;





// Entry rule entryRuleAorB
entryRuleAorB returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAorBRule(), currentNode); }
	 iv_ruleAorB=ruleAorB 
	 { $current=$iv_ruleAorB.current; } 
	 EOF 
;

// Rule AorB
ruleAorB returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAorBAccess().getAParserRuleCall_0(), currentNode); 
    }
    this_A_0=ruleA
    { 
        $current = $this_A_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAorBAccess().getBParserRuleCall_1(), currentNode); 
    }
    this_B_1=ruleB
    { 
        $current = $this_B_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleB
entryRuleB returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBRule(), currentNode); }
	 iv_ruleB=ruleB 
	 { $current=$iv_ruleB.current; } 
	 EOF 
;

// Rule B
ruleB returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'B' 
    {
        createLeafNode(grammarAccess.getBAccess().getBKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getBAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


