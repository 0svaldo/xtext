/*
* generated by Xtext
*/
package org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.ui.tests.editor.contentassist.services.Bug289187TestLanguageGrammarAccess.ClassElements;

public final class Bug289187TestLanguageClassConsumer extends NonTerminalConsumer {

	private ClassElements rule;	

	private INonTerminalConsumer attributeConsumer;

	private ITerminalConsumer idConsumer;

	private ITerminalConsumer intConsumer;

	private INonTerminalConsumer operationConsumer;

	private ITerminalConsumer stringConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer assignment$2$Consumer;

	private IElementConsumer keyword$3$Consumer;

	private IElementConsumer assignment$4$Consumer;

	private IElementConsumer keyword$5$Consumer;

	private IElementConsumer keyword$6$Consumer;

	private IElementConsumer assignment$7$Consumer;

	private IElementConsumer ruleCall$8$Consumer;

	private IElementConsumer group$9$Consumer;

	private IElementConsumer keyword$10$Consumer;

	private IElementConsumer assignment$11$Consumer;

	private IElementConsumer crossReference$12$Consumer;

	private IElementConsumer ruleCall$14$Consumer;

	private IElementConsumer group$15$Consumer;

	private IElementConsumer keyword$16$Consumer;

	private IElementConsumer assignment$17$Consumer;

	private IElementConsumer crossReference$18$Consumer;

	private IElementConsumer ruleCall$20$Consumer;

	private IElementConsumer group$21$Consumer;

	private IElementConsumer keyword$22$Consumer;

	private IElementConsumer keyword$23$Consumer;

	private IElementConsumer assignment$24$Consumer;

	private IElementConsumer crossReference$25$Consumer;

	private IElementConsumer ruleCall$27$Consumer;

	private IElementConsumer keyword$28$Consumer;

	private IElementConsumer group$29$Consumer;

	private IElementConsumer keyword$30$Consumer;

	private IElementConsumer keyword$31$Consumer;

	private IElementConsumer assignment$32$Consumer;

	private IElementConsumer ruleCall$33$Consumer;

	private IElementConsumer group$34$Consumer;

	private IElementConsumer keyword$35$Consumer;

	private IElementConsumer keyword$36$Consumer;

	private IElementConsumer assignment$37$Consumer;

	private IElementConsumer ruleCall$38$Consumer;

	private IElementConsumer group$39$Consumer;

	private IElementConsumer keyword$40$Consumer;

	private IElementConsumer keyword$41$Consumer;

	private IElementConsumer assignment$42$Consumer;

	private IElementConsumer ruleCall$43$Consumer;

	private IElementConsumer assignment$44$Consumer;

	private IElementConsumer ruleCall$45$Consumer;

	private IElementConsumer assignment$46$Consumer;

	private IElementConsumer ruleCall$47$Consumer;

	private IElementConsumer keyword$48$Consumer;

	private ICharacterClass keyword$5$Delimiter;

	private ICharacterClass keyword$6$Delimiter;

	private ICharacterClass keyword$10$Delimiter;

	private ICharacterClass keyword$16$Delimiter;

	private ICharacterClass keyword$22$Delimiter;

	private ICharacterClass keyword$23$Delimiter;

	private ICharacterClass keyword$28$Delimiter;

	private ICharacterClass keyword$30$Delimiter;

	private ICharacterClass keyword$31$Delimiter;

	private ICharacterClass keyword$35$Delimiter;

	private ICharacterClass keyword$36$Delimiter;

	private ICharacterClass keyword$40$Delimiter;

	private ICharacterClass keyword$41$Delimiter;

	private ICharacterClass keyword$48$Delimiter;

	private ICharacterClass keyword$3$Delimiter;

	private ISequenceMatcher ruleCall$8$Delimiter;

	private ISequenceMatcher ruleCall$14$Delimiter;

	private ISequenceMatcher ruleCall$20$Delimiter;

	private ISequenceMatcher ruleCall$27$Delimiter;

	private ISequenceMatcher ruleCall$33$Delimiter;

	private ISequenceMatcher ruleCall$38$Delimiter;

	private ISequenceMatcher ruleCall$43$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$2$Consumer);
			acceptor.accept(assignment$4$Consumer);
			acceptor.accept(keyword$6$Consumer);
			acceptor.accept(assignment$7$Consumer);
			acceptor.accept(group$9$Consumer);
			acceptor.accept(group$15$Consumer);
			acceptor.accept(keyword$28$Consumer);
			acceptor.accept(group$29$Consumer);
			acceptor.accept(group$34$Consumer);
			acceptor.accept(group$39$Consumer);
			acceptor.accept(assignment$44$Consumer);
			acceptor.accept(assignment$46$Consumer);
			acceptor.accept(keyword$48$Consumer);
		}
	}

	protected class Assignment$2$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$2$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$3$Consumer;
		}
	}

	protected class Keyword$3$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$3$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "abstract", false, true, getKeyword$3$Delimiter(), optional);
		}
	}

	protected class Assignment$4$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$4$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$5$Consumer;
		}
	}

	protected class Keyword$5$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$5$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "transient", false, true, getKeyword$5$Delimiter(), optional);
		}
	}

	protected class Keyword$6$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$6$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$6$Delimiter(), optional);
		}
	}

	protected class Assignment$7$Consumer extends AssignmentConsumer {
		
		protected Assignment$7$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$8$Consumer;
		}
	}

	protected class RuleCall$8$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$8$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "name", false, false, getElement(), getRuleCall$8$Delimiter(), optional);
		}
	}

	protected class Group$9$Consumer extends OptionalGroupConsumer {
		
		protected Group$9$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$10$Consumer);
			acceptor.accept(assignment$11$Consumer);
		}
	}

	protected class Keyword$10$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$10$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$10$Delimiter(), optional);
		}
	}

	protected class Assignment$11$Consumer extends AssignmentConsumer {
		
		protected Assignment$11$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$12$Consumer;
		}
	}

	protected class CrossReference$12$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$12$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "superClass", false, false, getElement(), getRuleCall$14$Delimiter(), optional);
		}
	}

	protected class RuleCall$14$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$14$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "superClass", false, false, getElement(), getRuleCall$14$Delimiter(), optional);
		}
	}

	protected class Group$15$Consumer extends OptionalGroupConsumer {
		
		protected Group$15$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$16$Consumer);
			acceptor.accept(assignment$17$Consumer);
			acceptor.accept(group$21$Consumer);
		}
	}

	protected class Keyword$16$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$16$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$16$Delimiter(), optional);
		}
	}

	protected class Assignment$17$Consumer extends AssignmentConsumer {
		
		protected Assignment$17$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$18$Consumer;
		}
	}

	protected class CrossReference$18$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$18$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "implementedInterfaces", true, false, getElement(), getRuleCall$20$Delimiter(), optional);
		}
	}

	protected class RuleCall$20$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$20$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "implementedInterfaces", true, false, getElement(), getRuleCall$20$Delimiter(), optional);
		}
	}

	protected class Group$21$Consumer extends LoopGroupConsumer {
		
		protected Group$21$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$22$Consumer);
			acceptor.accept(keyword$23$Consumer);
			acceptor.accept(assignment$24$Consumer);
		}
	}

	protected class Keyword$22$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$22$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$22$Delimiter(), optional);
		}
	}

	protected class Keyword$23$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$23$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$23$Delimiter(), optional);
		}
	}

	protected class Assignment$24$Consumer extends AssignmentConsumer {
		
		protected Assignment$24$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$25$Consumer;
		}
	}

	protected class CrossReference$25$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$25$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "implementedInterfaces", true, false, getElement(), getRuleCall$27$Delimiter(), optional);
		}
	}

	protected class RuleCall$27$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$27$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "implementedInterfaces", true, false, getElement(), getRuleCall$27$Delimiter(), optional);
		}
	}

	protected class Keyword$28$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$28$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$28$Delimiter(), optional);
		}
	}

	protected class Group$29$Consumer extends OptionalGroupConsumer {
		
		protected Group$29$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$30$Consumer);
			acceptor.accept(keyword$31$Consumer);
			acceptor.accept(assignment$32$Consumer);
		}
	}

	protected class Keyword$30$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$30$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$30$Delimiter(), optional);
		}
	}

	protected class Keyword$31$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$31$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$31$Delimiter(), optional);
		}
	}

	protected class Assignment$32$Consumer extends AssignmentConsumer {
		
		protected Assignment$32$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$33$Consumer;
		}
	}

	protected class RuleCall$33$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$33$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(intConsumer, "classNumber", false, false, getElement(), getRuleCall$33$Delimiter(), optional);
		}
	}

	protected class Group$34$Consumer extends OptionalGroupConsumer {
		
		protected Group$34$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$35$Consumer);
			acceptor.accept(keyword$36$Consumer);
			acceptor.accept(assignment$37$Consumer);
		}
	}

	protected class Keyword$35$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$35$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$35$Delimiter(), optional);
		}
	}

	protected class Keyword$36$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$36$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$36$Delimiter(), optional);
		}
	}

	protected class Assignment$37$Consumer extends AssignmentConsumer {
		
		protected Assignment$37$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$38$Consumer;
		}
	}

	protected class RuleCall$38$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$38$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(intConsumer, "quid", false, false, getElement(), getRuleCall$38$Delimiter(), optional);
		}
	}

	protected class Group$39$Consumer extends OptionalGroupConsumer {
		
		protected Group$39$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$40$Consumer);
			acceptor.accept(keyword$41$Consumer);
			acceptor.accept(assignment$42$Consumer);
		}
	}

	protected class Keyword$40$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$40$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$40$Delimiter(), optional);
		}
	}

	protected class Keyword$41$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$41$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$41$Delimiter(), optional);
		}
	}

	protected class Assignment$42$Consumer extends AssignmentConsumer {
		
		protected Assignment$42$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$43$Consumer;
		}
	}

	protected class RuleCall$43$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$43$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "documentation", false, false, getElement(), getRuleCall$43$Delimiter(), optional);
		}
	}

	protected class Assignment$44$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$44$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$45$Consumer;
		}
	}

	protected class RuleCall$45$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$45$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(attributeConsumer, "attributes", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$46$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$46$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$47$Consumer;
		}
	}

	protected class RuleCall$47$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$47$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(operationConsumer, "operations", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$48$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$48$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$48$Delimiter(), optional);
		}
	}

	public Bug289187TestLanguageClassConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$5$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$6$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$10$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$16$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$22$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$23$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$28$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$30$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$31$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$35$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$36$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$40$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$41$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$48$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$3$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$8$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$14$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$20$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$27$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$33$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$38$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$43$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public ClassElements getRule() {
		return rule;
	}
	
	public void setRule(ClassElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		assignment$2$Consumer = new Assignment$2$Consumer(rule.getAbstractAssignment_0());
		keyword$3$Consumer = new Keyword$3$Consumer(rule.getAbstractAbstractKeyword_0_0());
		assignment$4$Consumer = new Assignment$4$Consumer(rule.getTransientAssignment_1());
		keyword$5$Consumer = new Keyword$5$Consumer(rule.getTransientTransientKeyword_1_0());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.getClassKeyword_2());
		assignment$7$Consumer = new Assignment$7$Consumer(rule.getNameAssignment_3());
		ruleCall$8$Consumer = new RuleCall$8$Consumer(rule.getNameIDTerminalRuleCall_3_0());
		group$9$Consumer = new Group$9$Consumer(rule.getGroup_4());
		keyword$10$Consumer = new Keyword$10$Consumer(rule.getExtendsKeyword_4_0());
		assignment$11$Consumer = new Assignment$11$Consumer(rule.getSuperClassAssignment_4_1());
		crossReference$12$Consumer = new CrossReference$12$Consumer(rule.getSuperClassClassCrossReference_4_1_0());
		group$15$Consumer = new Group$15$Consumer(rule.getGroup_5());
		keyword$16$Consumer = new Keyword$16$Consumer(rule.getImplementsKeyword_5_0());
		assignment$17$Consumer = new Assignment$17$Consumer(rule.getImplementedInterfacesAssignment_5_1());
		crossReference$18$Consumer = new CrossReference$18$Consumer(rule.getImplementedInterfacesClassCrossReference_5_1_0());
		group$21$Consumer = new Group$21$Consumer(rule.getGroup_5_2());
		keyword$22$Consumer = new Keyword$22$Consumer(rule.getCommaKeyword_5_2_0());
		keyword$23$Consumer = new Keyword$23$Consumer(rule.getImplementsKeyword_5_2_1());
		assignment$24$Consumer = new Assignment$24$Consumer(rule.getImplementedInterfacesAssignment_5_2_2());
		crossReference$25$Consumer = new CrossReference$25$Consumer(rule.getImplementedInterfacesClassCrossReference_5_2_2_0());
		keyword$28$Consumer = new Keyword$28$Consumer(rule.getLeftCurlyBracketKeyword_6());
		group$29$Consumer = new Group$29$Consumer(rule.getGroup_7());
		keyword$30$Consumer = new Keyword$30$Consumer(rule.getClassNumberKeyword_7_0());
		keyword$31$Consumer = new Keyword$31$Consumer(rule.getEqualsSignKeyword_7_1());
		assignment$32$Consumer = new Assignment$32$Consumer(rule.getClassNumberAssignment_7_2());
		ruleCall$33$Consumer = new RuleCall$33$Consumer(rule.getClassNumberINTTerminalRuleCall_7_2_0());
		group$34$Consumer = new Group$34$Consumer(rule.getGroup_8());
		keyword$35$Consumer = new Keyword$35$Consumer(rule.getQuidKeyword_8_0());
		keyword$36$Consumer = new Keyword$36$Consumer(rule.getEqualsSignKeyword_8_1());
		assignment$37$Consumer = new Assignment$37$Consumer(rule.getQuidAssignment_8_2());
		ruleCall$38$Consumer = new RuleCall$38$Consumer(rule.getQuidINTTerminalRuleCall_8_2_0());
		group$39$Consumer = new Group$39$Consumer(rule.getGroup_9());
		keyword$40$Consumer = new Keyword$40$Consumer(rule.getDocumentationKeyword_9_0());
		keyword$41$Consumer = new Keyword$41$Consumer(rule.getEqualsSignKeyword_9_1());
		assignment$42$Consumer = new Assignment$42$Consumer(rule.getDocumentationAssignment_9_2());
		ruleCall$43$Consumer = new RuleCall$43$Consumer(rule.getDocumentationSTRINGTerminalRuleCall_9_2_0());
		assignment$44$Consumer = new Assignment$44$Consumer(rule.getAttributesAssignment_10());
		ruleCall$45$Consumer = new RuleCall$45$Consumer(rule.getAttributesAttributeParserRuleCall_10_0());
		assignment$46$Consumer = new Assignment$46$Consumer(rule.getOperationsAssignment_11());
		ruleCall$47$Consumer = new RuleCall$47$Consumer(rule.getOperationsOperationParserRuleCall_11_0());
		keyword$48$Consumer = new Keyword$48$Consumer(rule.getRightCurlyBracketKeyword_12());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setAttributeConsumer(INonTerminalConsumer attributeConsumer) {
		this.attributeConsumer = attributeConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setIntConsumer(ITerminalConsumer intConsumer) {
		this.intConsumer = intConsumer;
	}
	
	public void setOperationConsumer(INonTerminalConsumer operationConsumer) {
		this.operationConsumer = operationConsumer;
	}
	
	public void setStringConsumer(ITerminalConsumer stringConsumer) {
		this.stringConsumer = stringConsumer;
	}
	
	public ICharacterClass getKeyword$5$Delimiter() {
		return keyword$5$Delimiter;
	}
	
	public void setKeyword$5$Delimiter(ICharacterClass characterClass) {
		keyword$5$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$6$Delimiter() {
		return keyword$6$Delimiter;
	}
	
	public void setKeyword$6$Delimiter(ICharacterClass characterClass) {
		keyword$6$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$10$Delimiter() {
		return keyword$10$Delimiter;
	}
	
	public void setKeyword$10$Delimiter(ICharacterClass characterClass) {
		keyword$10$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$16$Delimiter() {
		return keyword$16$Delimiter;
	}
	
	public void setKeyword$16$Delimiter(ICharacterClass characterClass) {
		keyword$16$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$22$Delimiter() {
		return keyword$22$Delimiter;
	}
	
	public void setKeyword$22$Delimiter(ICharacterClass characterClass) {
		keyword$22$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$23$Delimiter() {
		return keyword$23$Delimiter;
	}
	
	public void setKeyword$23$Delimiter(ICharacterClass characterClass) {
		keyword$23$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$28$Delimiter() {
		return keyword$28$Delimiter;
	}
	
	public void setKeyword$28$Delimiter(ICharacterClass characterClass) {
		keyword$28$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$30$Delimiter() {
		return keyword$30$Delimiter;
	}
	
	public void setKeyword$30$Delimiter(ICharacterClass characterClass) {
		keyword$30$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$31$Delimiter() {
		return keyword$31$Delimiter;
	}
	
	public void setKeyword$31$Delimiter(ICharacterClass characterClass) {
		keyword$31$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$35$Delimiter() {
		return keyword$35$Delimiter;
	}
	
	public void setKeyword$35$Delimiter(ICharacterClass characterClass) {
		keyword$35$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$36$Delimiter() {
		return keyword$36$Delimiter;
	}
	
	public void setKeyword$36$Delimiter(ICharacterClass characterClass) {
		keyword$36$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$40$Delimiter() {
		return keyword$40$Delimiter;
	}
	
	public void setKeyword$40$Delimiter(ICharacterClass characterClass) {
		keyword$40$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$41$Delimiter() {
		return keyword$41$Delimiter;
	}
	
	public void setKeyword$41$Delimiter(ICharacterClass characterClass) {
		keyword$41$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$48$Delimiter() {
		return keyword$48$Delimiter;
	}
	
	public void setKeyword$48$Delimiter(ICharacterClass characterClass) {
		keyword$48$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$3$Delimiter() {
		return keyword$3$Delimiter;
	}
	
	public void setKeyword$3$Delimiter(ICharacterClass characterClass) {
		keyword$3$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$8$Delimiter() {
		return ruleCall$8$Delimiter;
	}
	
	public void setRuleCall$8$Delimiter(ISequenceMatcher matcher) {
		ruleCall$8$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$14$Delimiter() {
		return ruleCall$14$Delimiter;
	}
	
	public void setRuleCall$14$Delimiter(ISequenceMatcher matcher) {
		ruleCall$14$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$20$Delimiter() {
		return ruleCall$20$Delimiter;
	}
	
	public void setRuleCall$20$Delimiter(ISequenceMatcher matcher) {
		ruleCall$20$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$27$Delimiter() {
		return ruleCall$27$Delimiter;
	}
	
	public void setRuleCall$27$Delimiter(ISequenceMatcher matcher) {
		ruleCall$27$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$33$Delimiter() {
		return ruleCall$33$Delimiter;
	}
	
	public void setRuleCall$33$Delimiter(ISequenceMatcher matcher) {
		ruleCall$33$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$38$Delimiter() {
		return ruleCall$38$Delimiter;
	}
	
	public void setRuleCall$38$Delimiter(ISequenceMatcher matcher) {
		ruleCall$38$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$43$Delimiter() {
		return ruleCall$43$Delimiter;
	}
	
	public void setRuleCall$43$Delimiter(ISequenceMatcher matcher) {
		ruleCall$43$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
