/*
 * generated by Xtext
 */
package org.eclipse.xtext.ui.tests.editor.contentassist.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.ui.tests.editor.contentassist.services.UnorderedGroupsTestLanguageGrammarAccess;
import org.eclipse.xtext.ui.tests.editor.contentassist.unorderedGroupsTest.Bug304681Attribute;
import org.eclipse.xtext.ui.tests.editor.contentassist.unorderedGroupsTest.Bug304681Model;
import org.eclipse.xtext.ui.tests.editor.contentassist.unorderedGroupsTest.Bug304681Reference;
import org.eclipse.xtext.ui.tests.editor.contentassist.unorderedGroupsTest.GroupLoopedModel;
import org.eclipse.xtext.ui.tests.editor.contentassist.unorderedGroupsTest.LoopedAlternativeModel;
import org.eclipse.xtext.ui.tests.editor.contentassist.unorderedGroupsTest.LoopedModel;
import org.eclipse.xtext.ui.tests.editor.contentassist.unorderedGroupsTest.MandatoryModel;
import org.eclipse.xtext.ui.tests.editor.contentassist.unorderedGroupsTest.Model;
import org.eclipse.xtext.ui.tests.editor.contentassist.unorderedGroupsTest.SimpleModel;
import org.eclipse.xtext.ui.tests.editor.contentassist.unorderedGroupsTest.UnorderedGroupsTestPackage;

@SuppressWarnings("all")
public class UnorderedGroupsTestLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private UnorderedGroupsTestLanguageGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == UnorderedGroupsTestPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case UnorderedGroupsTestPackage.BUG304681_ATTRIBUTE:
				sequence_Bug304681Attribute(context, (Bug304681Attribute) semanticObject); 
				return; 
			case UnorderedGroupsTestPackage.BUG304681_MODEL:
				sequence_Bug304681Model(context, (Bug304681Model) semanticObject); 
				return; 
			case UnorderedGroupsTestPackage.BUG304681_REFERENCE:
				sequence_Bug304681Reference(context, (Bug304681Reference) semanticObject); 
				return; 
			case UnorderedGroupsTestPackage.GROUP_LOOPED_MODEL:
				sequence_GroupLoopedModel(context, (GroupLoopedModel) semanticObject); 
				return; 
			case UnorderedGroupsTestPackage.LOOPED_ALTERNATIVE_MODEL:
				sequence_LoopedAlternativeModel(context, (LoopedAlternativeModel) semanticObject); 
				return; 
			case UnorderedGroupsTestPackage.LOOPED_MODEL:
				sequence_LoopedModel(context, (LoopedModel) semanticObject); 
				return; 
			case UnorderedGroupsTestPackage.MANDATORY_MODEL:
				sequence_MandatoryModel(context, (MandatoryModel) semanticObject); 
				return; 
			case UnorderedGroupsTestPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case UnorderedGroupsTestPackage.SIMPLE_MODEL:
				sequence_SimpleModel(context, (SimpleModel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Bug304681Attribute(EObject context, Bug304681Attribute semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, UnorderedGroupsTestPackage.Literals.BUG304681_FEATURE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnorderedGroupsTestPackage.Literals.BUG304681_FEATURE__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getBug304681AttributeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (shortDescription=STRING? longDescription=STRING? uid=STRING? flag?='flag'? features+=Bug304681Feature*)
	 */
	protected void sequence_Bug304681Model(EObject context, Bug304681Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Bug304681Reference(EObject context, Bug304681Reference semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, UnorderedGroupsTestPackage.Literals.BUG304681_FEATURE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnorderedGroupsTestPackage.Literals.BUG304681_FEATURE__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getBug304681ReferenceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (
	 *             (visibility+='public' | visibility+='private' | visibility+='protected') 
	 *             static+='static' 
	 *             synchronized+='synchronized' 
	 *             (abstract+='abstract' | final+='final')
	 *         )* 
	 *         name=ID
	 *     )
	 */
	protected void sequence_GroupLoopedModel(EObject context, GroupLoopedModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (
	 *             visibility+='public' | 
	 *             visibility+='private' | 
	 *             visibility+='protected' | 
	 *             static+='static' | 
	 *             synchronized+='synchronized' | 
	 *             abstract+='abstract' | 
	 *             final+='final'
	 *         )* 
	 *         name=ID
	 *     )
	 */
	protected void sequence_LoopedAlternativeModel(EObject context, LoopedAlternativeModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (visibility+='public' | visibility+='private' | visibility+='protected')* 
	 *         static+='static'* 
	 *         synchronized+='synchronized'* 
	 *         (abstract+='abstract' | final+='final')* 
	 *         name=ID
	 *     )
	 */
	protected void sequence_LoopedModel(EObject context, LoopedModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (visibility='public' | visibility='private' | visibility='protected') 
	 *         static?='static' 
	 *         synchronized?='synchronized' 
	 *         (abstract?='abstract' | final?='final')? 
	 *         name=ID
	 *     )
	 */
	protected void sequence_MandatoryModel(EObject context, MandatoryModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         first=SimpleModel | 
	 *         second=MandatoryModel | 
	 *         thrird=LoopedModel | 
	 *         forth=GroupLoopedModel | 
	 *         fifth=LoopedAlternativeModel | 
	 *         model=Bug304681Model
	 *     )
	 */
	protected void sequence_Model(EObject context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (visibility='public' | visibility='private' | visibility='protected')? 
	 *         static?='static'? 
	 *         synchronized?='synchronized'? 
	 *         (abstract?='abstract' | final?='final')? 
	 *         name=ID
	 *     )
	 */
	protected void sequence_SimpleModel(EObject context, SimpleModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
