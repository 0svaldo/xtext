/*
* generated by Xtext
*/
grammar InternalBug287941TestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.ui.tests.editor.contentassist.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.ui.tests.editor.contentassist.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.ui.tests.editor.contentassist.services.Bug287941TestLanguageGrammarAccess;

}

@parser::members {

 	private Bug287941TestLanguageGrammarAccess grammarAccess;
 	
    public InternalBug287941TestLanguageParser(TokenStream input, IAstFactory factory, Bug287941TestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected Bug287941TestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0(), currentNode); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_0_0, 
        		"Import", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getQueryMQLqueryParserRuleCall_1_0(), currentNode); 
	    }
		lv_query_1_0=ruleMQLquery		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"query",
        		lv_query_1_0, 
        		"MQLquery", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImportRule(), currentNode); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='import' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0(), null);
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			createLeafNode(lv_importURI_1_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0(), "importURI"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"STRING", 
        		lastConsumedNode);
	    }

)
))
;





// Entry rule entryRuleMQLquery
entryRuleMQLquery returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMQLqueryRule(), currentNode); }
	 iv_ruleMQLquery=ruleMQLquery 
	 { $current=$iv_ruleMQLquery.current; } 
	 EOF 
;

// Rule MQLquery
ruleMQLquery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='select' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getMQLqueryAccess().getSelectKeyword_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMQLqueryAccess().getSelectEntriesSelectEntryParserRuleCall_1_0(), currentNode); 
	    }
		lv_selectEntries_1_0=ruleSelectEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMQLqueryRule());
	        }
       		add(
       			$current, 
       			"selectEntries",
        		lv_selectEntries_1_0, 
        		"SelectEntry", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getMQLqueryAccess().getCommaKeyword_2_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMQLqueryAccess().getSelectEntriesSelectEntryParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_selectEntries_3_0=ruleSelectEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMQLqueryRule());
	        }
       		add(
       			$current, 
       			"selectEntries",
        		lv_selectEntries_3_0, 
        		"SelectEntry", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='from' 
    {
    	createLeafNode(otherlv_4, grammarAccess.getMQLqueryAccess().getFromKeyword_3(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMQLqueryAccess().getFromEntriesFromEntryParserRuleCall_4_0(), currentNode); 
	    }
		lv_fromEntries_5_0=ruleFromEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMQLqueryRule());
	        }
       		add(
       			$current, 
       			"fromEntries",
        		lv_fromEntries_5_0, 
        		"FromEntry", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	createLeafNode(otherlv_6, grammarAccess.getMQLqueryAccess().getCommaKeyword_5_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMQLqueryAccess().getFromEntriesFromEntryParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_fromEntries_7_0=ruleFromEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMQLqueryRule());
	        }
       		add(
       			$current, 
       			"fromEntries",
        		lv_fromEntries_7_0, 
        		"FromEntry", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_8='where' 
    {
    	createLeafNode(otherlv_8, grammarAccess.getMQLqueryAccess().getWhereKeyword_6_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMQLqueryAccess().getWhereEntriesWhereEntryParserRuleCall_6_1_0(), currentNode); 
	    }
		lv_whereEntries_9_0=ruleWhereEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMQLqueryRule());
	        }
       		add(
       			$current, 
       			"whereEntries",
        		lv_whereEntries_9_0, 
        		"WhereEntry", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)+)?)
;





// Entry rule entryRuleSelectEntry
entryRuleSelectEntry returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSelectEntryRule(), currentNode); }
	 iv_ruleSelectEntry=ruleSelectEntry 
	 { $current=$iv_ruleSelectEntry.current; } 
	 EOF 
;

// Rule SelectEntry
ruleSelectEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectEntryRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		createLeafNode(otherlv_0, grammarAccess.getSelectEntryAccess().getSelectFromEntryCrossReference_0_0(), "select"); 
	}

)
)(	otherlv_1='.' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getSelectEntryAccess().getFullStopKeyword_1_0(), null);
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectEntryRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		createLeafNode(otherlv_2, grammarAccess.getSelectEntryAccess().getAttributeEAttributeCrossReference_1_1_0(), "attribute"); 
	}

)
))?)
;





// Entry rule entryRuleFromEntry
entryRuleFromEntry returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFromEntryRule(), currentNode); }
	 iv_ruleFromEntry=ruleFromEntry 
	 { $current=$iv_ruleFromEntry.current; } 
	 EOF 
;

// Rule FromEntry
ruleFromEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFromEntryRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		createLeafNode(otherlv_0, grammarAccess.getFromEntryAccess().getTypeEClassCrossReference_0_0(), "type"); 
	}

)
)(
(
		lv_withoutsubtypes_1_0=	'withoutsubtypes' 
    {
        createLeafNode(lv_withoutsubtypes_1_0, grammarAccess.getFromEntryAccess().getWithoutsubtypesWithoutsubtypesKeyword_1_0(), "withoutsubtypes");
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFromEntryRule());
	        }
       		set($current, "withoutsubtypes", true, "withoutsubtypes", lastConsumedNode);
	    }

)
)?	otherlv_2='as' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getFromEntryAccess().getAsKeyword_2(), null);
    }
(
(
		lv_alias_3_0=RULE_ID
		{
			createLeafNode(lv_alias_3_0, grammarAccess.getFromEntryAccess().getAliasIDTerminalRuleCall_3_0(), "alias"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFromEntryRule());
	        }
       		set(
       			$current, 
       			"alias",
        		lv_alias_3_0, 
        		"ID", 
        		lastConsumedNode);
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFromEntryAccess().getScopeClauseScopeClauseParserRuleCall_4_0(), currentNode); 
	    }
		lv_scopeClause_4_0=ruleScopeClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromEntryRule());
	        }
       		set(
       			$current, 
       			"scopeClause",
        		lv_scopeClause_4_0, 
        		"ScopeClause", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleScopeClause
entryRuleScopeClause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getScopeClauseRule(), currentNode); }
	 iv_ruleScopeClause=ruleScopeClause 
	 { $current=$iv_ruleScopeClause.current; } 
	 EOF 
;

// Rule ScopeClause
ruleScopeClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_notIn_0_0=	'not' 
    {
        createLeafNode(lv_notIn_0_0, grammarAccess.getScopeClauseAccess().getNotInNotKeyword_0_0(), "notIn");
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScopeClauseRule());
	        }
       		set($current, "notIn", true, "not", lastConsumedNode);
	    }

)
)?	otherlv_1='in' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getScopeClauseAccess().getInKeyword_1(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getScopeClauseAccess().getScopeScopeParserRuleCall_2_0(), currentNode); 
	    }
		lv_scope_2_0=ruleScope		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopeClauseRule());
	        }
       		set(
       			$current, 
       			"scope",
        		lv_scope_2_0, 
        		"Scope", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleScope
entryRuleScope returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getScopeRule(), currentNode); }
	 iv_ruleScope=ruleScope 
	 { $current=$iv_ruleScope.current; } 
	 EOF 
;

// Rule Scope
ruleScope returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getScopeAccess().getResourceScopeParserRuleCall_0(), currentNode); 
    }
    this_ResourceScope_0=ruleResourceScope
    { 
        $current = $this_ResourceScope_0.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getScopeAccess().getElementScopeParserRuleCall_1(), currentNode); 
    }
    this_ElementScope_1=ruleElementScope
    { 
        $current = $this_ElementScope_1.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleResourceScope
entryRuleResourceScope returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getResourceScopeRule(), currentNode); }
	 iv_ruleResourceScope=ruleResourceScope 
	 { $current=$iv_ruleResourceScope.current; } 
	 EOF 
;

// Rule ResourceScope
ruleResourceScope returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='resources' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getResourceScopeAccess().getResourcesKeyword_0(), null);
    }
	otherlv_1='{' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getResourceScopeAccess().getLeftCurlyBracketKeyword_1(), null);
    }
(
(
		lv_uris_2_0=RULE_STRING
		{
			createLeafNode(lv_uris_2_0, grammarAccess.getResourceScopeAccess().getUrisSTRINGTerminalRuleCall_2_0(), "uris"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getResourceScopeRule());
	        }
       		add(
       			$current, 
       			"uris",
        		lv_uris_2_0, 
        		"STRING", 
        		lastConsumedNode);
	    }

)
)(	otherlv_3=',' 
    {
    	createLeafNode(otherlv_3, grammarAccess.getResourceScopeAccess().getCommaKeyword_3_0(), null);
    }
(
(
		lv_uris_4_0=RULE_STRING
		{
			createLeafNode(lv_uris_4_0, grammarAccess.getResourceScopeAccess().getUrisSTRINGTerminalRuleCall_3_1_0(), "uris"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getResourceScopeRule());
	        }
       		add(
       			$current, 
       			"uris",
        		lv_uris_4_0, 
        		"STRING", 
        		lastConsumedNode);
	    }

)
))*	otherlv_5='}' 
    {
    	createLeafNode(otherlv_5, grammarAccess.getResourceScopeAccess().getRightCurlyBracketKeyword_4(), null);
    }
)
;





// Entry rule entryRuleElementScope
entryRuleElementScope returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getElementScopeRule(), currentNode); }
	 iv_ruleElementScope=ruleElementScope 
	 { $current=$iv_ruleElementScope.current; } 
	 EOF 
;

// Rule ElementScope
ruleElementScope returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='elements' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getElementScopeAccess().getElementsKeyword_0(), null);
    }
	otherlv_1='{' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getElementScopeAccess().getLeftCurlyBracketKeyword_1(), null);
    }
(
(
		lv_uris_2_0=RULE_STRING
		{
			createLeafNode(lv_uris_2_0, grammarAccess.getElementScopeAccess().getUrisSTRINGTerminalRuleCall_2_0(), "uris"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementScopeRule());
	        }
       		add(
       			$current, 
       			"uris",
        		lv_uris_2_0, 
        		"STRING", 
        		lastConsumedNode);
	    }

)
)(	otherlv_3=',' 
    {
    	createLeafNode(otherlv_3, grammarAccess.getElementScopeAccess().getCommaKeyword_3_0(), null);
    }
(
(
		lv_uris_4_0=RULE_STRING
		{
			createLeafNode(lv_uris_4_0, grammarAccess.getElementScopeAccess().getUrisSTRINGTerminalRuleCall_3_1_0(), "uris"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementScopeRule());
	        }
       		add(
       			$current, 
       			"uris",
        		lv_uris_4_0, 
        		"STRING", 
        		lastConsumedNode);
	    }

)
))*	otherlv_5='}' 
    {
    	createLeafNode(otherlv_5, grammarAccess.getElementScopeAccess().getRightCurlyBracketKeyword_4(), null);
    }
)
;





// Entry rule entryRuleWhereEntry
entryRuleWhereEntry returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWhereEntryRule(), currentNode); }
	 iv_ruleWhereEntry=ruleWhereEntry 
	 { $current=$iv_ruleWhereEntry.current; } 
	 EOF 
;

// Rule WhereEntry
ruleWhereEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getWhereEntryAccess().getAndWhereEntryParserRuleCall_0(), currentNode); 
    }
    this_AndWhereEntry_0=ruleAndWhereEntry
    { 
        $current = $this_AndWhereEntry_0.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getWhereEntryAccess().getOrWhereEntryEntriesAction_1_0(),
            $current);
    }
)(	otherlv_2='or' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getWhereEntryAccess().getOrKeyword_1_1_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhereEntryAccess().getEntriesAndWhereEntryParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_entries_3_0=ruleAndWhereEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhereEntryRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_3_0, 
        		"AndWhereEntry", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleAndWhereEntry
entryRuleAndWhereEntry returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAndWhereEntryRule(), currentNode); }
	 iv_ruleAndWhereEntry=ruleAndWhereEntry 
	 { $current=$iv_ruleAndWhereEntry.current; } 
	 EOF 
;

// Rule AndWhereEntry
ruleAndWhereEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAndWhereEntryAccess().getConcreteWhereEntryParserRuleCall_0(), currentNode); 
    }
    this_ConcreteWhereEntry_0=ruleConcreteWhereEntry
    { 
        $current = $this_ConcreteWhereEntry_0.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getAndWhereEntryAccess().getAndWhereEntryEntriesAction_1_0(),
            $current);
    }
)(	otherlv_2='and' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getAndWhereEntryAccess().getAndKeyword_1_1_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndWhereEntryAccess().getEntriesConcreteWhereEntryParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_entries_3_0=ruleConcreteWhereEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndWhereEntryRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_3_0, 
        		"ConcreteWhereEntry", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleConcreteWhereEntry
entryRuleConcreteWhereEntry returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConcreteWhereEntryRule(), currentNode); }
	 iv_ruleConcreteWhereEntry=ruleConcreteWhereEntry 
	 { $current=$iv_ruleConcreteWhereEntry.current; } 
	 EOF 
;

// Rule ConcreteWhereEntry
ruleConcreteWhereEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getConcreteWhereEntryAccess().getParWhereEntryParserRuleCall_0(), currentNode); 
    }
    this_ParWhereEntry_0=ruleParWhereEntry
    { 
        $current = $this_ParWhereEntry_0.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConcreteWhereEntryAccess().getAttributeWhereEntryParserRuleCall_1(), currentNode); 
    }
    this_AttributeWhereEntry_1=ruleAttributeWhereEntry
    { 
        $current = $this_AttributeWhereEntry_1.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConcreteWhereEntryAccess().getNullWhereEntryParserRuleCall_2(), currentNode); 
    }
    this_NullWhereEntry_2=ruleNullWhereEntry
    { 
        $current = $this_NullWhereEntry_2.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConcreteWhereEntryAccess().getReferenceAliasWhereEntryParserRuleCall_3(), currentNode); 
    }
    this_ReferenceAliasWhereEntry_3=ruleReferenceAliasWhereEntry
    { 
        $current = $this_ReferenceAliasWhereEntry_3.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConcreteWhereEntryAccess().getAliasWhereEntryParserRuleCall_4(), currentNode); 
    }
    this_AliasWhereEntry_4=ruleAliasWhereEntry
    { 
        $current = $this_AliasWhereEntry_4.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConcreteWhereEntryAccess().getSubselectWhereEntryParserRuleCall_5(), currentNode); 
    }
    this_SubselectWhereEntry_5=ruleSubselectWhereEntry
    { 
        $current = $this_SubselectWhereEntry_5.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParWhereEntry
entryRuleParWhereEntry returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParWhereEntryRule(), currentNode); }
	 iv_ruleParWhereEntry=ruleParWhereEntry 
	 { $current=$iv_ruleParWhereEntry.current; } 
	 EOF 
;

// Rule ParWhereEntry
ruleParWhereEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='(' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getParWhereEntryAccess().getLeftParenthesisKeyword_0(), null);
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getParWhereEntryAccess().getWhereEntryParserRuleCall_1(), currentNode); 
    }
    this_WhereEntry_1=ruleWhereEntry
    { 
        $current = $this_WhereEntry_1.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getParWhereEntryAccess().getRightParenthesisKeyword_2(), null);
    }
)
;





// Entry rule entryRuleAttributeWhereEntry
entryRuleAttributeWhereEntry returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttributeWhereEntryRule(), currentNode); }
	 iv_ruleAttributeWhereEntry=ruleAttributeWhereEntry 
	 { $current=$iv_ruleAttributeWhereEntry.current; } 
	 EOF 
;

// Rule AttributeWhereEntry
ruleAttributeWhereEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAttributeWhereEntryAccess().getNumericAttributeWhereEntryParserRuleCall_0(), currentNode); 
    }
    this_NumericAttributeWhereEntry_0=ruleNumericAttributeWhereEntry
    { 
        $current = $this_NumericAttributeWhereEntry_0.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAttributeWhereEntryAccess().getStringAttributeWhereEntryParserRuleCall_1(), currentNode); 
    }
    this_StringAttributeWhereEntry_1=ruleStringAttributeWhereEntry
    { 
        $current = $this_StringAttributeWhereEntry_1.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAttributeWhereEntryAccess().getBooleanAttributeWhereEntryParserRuleCall_2(), currentNode); 
    }
    this_BooleanAttributeWhereEntry_2=ruleBooleanAttributeWhereEntry
    { 
        $current = $this_BooleanAttributeWhereEntry_2.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAttributeWhereEntryAccess().getVariableWhereEntryParserRuleCall_3(), currentNode); 
    }
    this_VariableWhereEntry_3=ruleVariableWhereEntry
    { 
        $current = $this_VariableWhereEntry_3.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNumericAttributeWhereEntry
entryRuleNumericAttributeWhereEntry returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNumericAttributeWhereEntryRule(), currentNode); }
	 iv_ruleNumericAttributeWhereEntry=ruleNumericAttributeWhereEntry 
	 { $current=$iv_ruleNumericAttributeWhereEntry.current; } 
	 EOF 
;

// Rule NumericAttributeWhereEntry
ruleNumericAttributeWhereEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNumericAttributeWhereEntryAccess().getDoubleWhereEntryParserRuleCall_0(), currentNode); 
    }
    this_DoubleWhereEntry_0=ruleDoubleWhereEntry
    { 
        $current = $this_DoubleWhereEntry_0.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNumericAttributeWhereEntryAccess().getLongWhereEntryParserRuleCall_1(), currentNode); 
    }
    this_LongWhereEntry_1=ruleLongWhereEntry
    { 
        $current = $this_LongWhereEntry_1.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDoubleWhereEntry
entryRuleDoubleWhereEntry returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDoubleWhereEntryRule(), currentNode); }
	 iv_ruleDoubleWhereEntry=ruleDoubleWhereEntry 
	 { $current=$iv_ruleDoubleWhereEntry.current; } 
	 EOF 
;

// Rule DoubleWhereEntry
ruleDoubleWhereEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDoubleWhereEntryRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		createLeafNode(otherlv_0, grammarAccess.getDoubleWhereEntryAccess().getAliasFromEntryCrossReference_0_0(), "alias"); 
	}

)
)	otherlv_1='.' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getDoubleWhereEntryAccess().getFullStopKeyword_1(), null);
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDoubleWhereEntryRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		createLeafNode(otherlv_2, grammarAccess.getDoubleWhereEntryAccess().getAttributeEAttributeCrossReference_2_0(), "attribute"); 
	}

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDoubleWhereEntryAccess().getOperatorNumericOperatorEnumRuleCall_3_0(), currentNode); 
	    }
		lv_operator_3_0=ruleNumericOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoubleWhereEntryRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_3_0, 
        		"NumericOperator", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_value_4_0=RULE_SIGNED_DOUBLE
		{
			createLeafNode(lv_value_4_0, grammarAccess.getDoubleWhereEntryAccess().getValueSIGNED_DOUBLETerminalRuleCall_4_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDoubleWhereEntryRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"SIGNED_DOUBLE", 
        		lastConsumedNode);
	    }

)
))
;





// Entry rule entryRuleLongWhereEntry
entryRuleLongWhereEntry returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLongWhereEntryRule(), currentNode); }
	 iv_ruleLongWhereEntry=ruleLongWhereEntry 
	 { $current=$iv_ruleLongWhereEntry.current; } 
	 EOF 
;

// Rule LongWhereEntry
ruleLongWhereEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLongWhereEntryRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		createLeafNode(otherlv_0, grammarAccess.getLongWhereEntryAccess().getAliasFromEntryCrossReference_0_0(), "alias"); 
	}

)
)	otherlv_1='.' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getLongWhereEntryAccess().getFullStopKeyword_1(), null);
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLongWhereEntryRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		createLeafNode(otherlv_2, grammarAccess.getLongWhereEntryAccess().getAttributeEAttributeCrossReference_2_0(), "attribute"); 
	}

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLongWhereEntryAccess().getOperatorNumericOperatorEnumRuleCall_3_0(), currentNode); 
	    }
		lv_operator_3_0=ruleNumericOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLongWhereEntryRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_3_0, 
        		"NumericOperator", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_value_4_0=RULE_SINGED_LONG
		{
			createLeafNode(lv_value_4_0, grammarAccess.getLongWhereEntryAccess().getValueSINGED_LONGTerminalRuleCall_4_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLongWhereEntryRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"SINGED_LONG", 
        		lastConsumedNode);
	    }

)
))
;





// Entry rule entryRuleVariableWhereEntry
entryRuleVariableWhereEntry returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableWhereEntryRule(), currentNode); }
	 iv_ruleVariableWhereEntry=ruleVariableWhereEntry 
	 { $current=$iv_ruleVariableWhereEntry.current; } 
	 EOF 
;

// Rule VariableWhereEntry
ruleVariableWhereEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableWhereEntryRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		createLeafNode(otherlv_0, grammarAccess.getVariableWhereEntryAccess().getAliasFromEntryCrossReference_0_0(), "alias"); 
	}

)
)	otherlv_1='.' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getVariableWhereEntryAccess().getFullStopKeyword_1(), null);
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableWhereEntryRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		createLeafNode(otherlv_2, grammarAccess.getVariableWhereEntryAccess().getAttributeEAttributeCrossReference_2_0(), "attribute"); 
	}

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableWhereEntryAccess().getOperatorNumericOperatorEnumRuleCall_3_0(), currentNode); 
	    }
		lv_operator_3_0=ruleNumericOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableWhereEntryRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_3_0, 
        		"NumericOperator", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableWhereEntryRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		createLeafNode(otherlv_4, grammarAccess.getVariableWhereEntryAccess().getRightAliasFromEntryCrossReference_4_0(), "rightAlias"); 
	}

)
)	otherlv_5='.' 
    {
    	createLeafNode(otherlv_5, grammarAccess.getVariableWhereEntryAccess().getFullStopKeyword_5(), null);
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableWhereEntryRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		createLeafNode(otherlv_6, grammarAccess.getVariableWhereEntryAccess().getRightAttributeEAttributeCrossReference_6_0(), "rightAttribute"); 
	}

)
))
;





// Entry rule entryRuleStringAttributeWhereEntry
entryRuleStringAttributeWhereEntry returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringAttributeWhereEntryRule(), currentNode); }
	 iv_ruleStringAttributeWhereEntry=ruleStringAttributeWhereEntry 
	 { $current=$iv_ruleStringAttributeWhereEntry.current; } 
	 EOF 
;

// Rule StringAttributeWhereEntry
ruleStringAttributeWhereEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringAttributeWhereEntryRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		createLeafNode(otherlv_0, grammarAccess.getStringAttributeWhereEntryAccess().getAliasFromEntryCrossReference_0_0(), "alias"); 
	}

)
)	otherlv_1='.' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getStringAttributeWhereEntryAccess().getFullStopKeyword_1(), null);
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringAttributeWhereEntryRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		createLeafNode(otherlv_2, grammarAccess.getStringAttributeWhereEntryAccess().getAttributeEAttributeCrossReference_2_0(), "attribute"); 
	}

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStringAttributeWhereEntryAccess().getOperatorStringOperatorEnumRuleCall_3_0(), currentNode); 
	    }
		lv_operator_3_0=ruleStringOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringAttributeWhereEntryRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_3_0, 
        		"StringOperator", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_pattern_4_0=RULE_STRING
		{
			createLeafNode(lv_pattern_4_0, grammarAccess.getStringAttributeWhereEntryAccess().getPatternSTRINGTerminalRuleCall_4_0(), "pattern"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringAttributeWhereEntryRule());
	        }
       		set(
       			$current, 
       			"pattern",
        		lv_pattern_4_0, 
        		"STRING", 
        		lastConsumedNode);
	    }

)
))
;





// Entry rule entryRuleBooleanAttributeWhereEntry
entryRuleBooleanAttributeWhereEntry returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanAttributeWhereEntryRule(), currentNode); }
	 iv_ruleBooleanAttributeWhereEntry=ruleBooleanAttributeWhereEntry 
	 { $current=$iv_ruleBooleanAttributeWhereEntry.current; } 
	 EOF 
;

// Rule BooleanAttributeWhereEntry
ruleBooleanAttributeWhereEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanAttributeWhereEntryRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		createLeafNode(otherlv_0, grammarAccess.getBooleanAttributeWhereEntryAccess().getAliasFromEntryCrossReference_0_0(), "alias"); 
	}

)
)	otherlv_1='.' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getBooleanAttributeWhereEntryAccess().getFullStopKeyword_1(), null);
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanAttributeWhereEntryRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		createLeafNode(otherlv_2, grammarAccess.getBooleanAttributeWhereEntryAccess().getAttributeEAttributeCrossReference_2_0(), "attribute"); 
	}

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBooleanAttributeWhereEntryAccess().getOperatorBooleanOperatorEnumRuleCall_3_0(), currentNode); 
	    }
		lv_operator_3_0=ruleBooleanOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanAttributeWhereEntryRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_3_0, 
        		"BooleanOperator", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_isTrue_4_0=	'true' 
    {
        createLeafNode(lv_isTrue_4_0, grammarAccess.getBooleanAttributeWhereEntryAccess().getIsTrueTrueKeyword_4_0_0(), "isTrue");
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanAttributeWhereEntryRule());
	        }
       		set($current, "isTrue", true, "true", lastConsumedNode);
	    }

)
)
    |	otherlv_5='false' 
    {
    	createLeafNode(otherlv_5, grammarAccess.getBooleanAttributeWhereEntryAccess().getFalseKeyword_4_1(), null);
    }
))
;





// Entry rule entryRuleNullWhereEntry
entryRuleNullWhereEntry returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNullWhereEntryRule(), currentNode); }
	 iv_ruleNullWhereEntry=ruleNullWhereEntry 
	 { $current=$iv_ruleNullWhereEntry.current; } 
	 EOF 
;

// Rule NullWhereEntry
ruleNullWhereEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNullWhereEntryRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		createLeafNode(otherlv_0, grammarAccess.getNullWhereEntryAccess().getAliasFromEntryCrossReference_0_0(), "alias"); 
	}

)
)	otherlv_1='.' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getNullWhereEntryAccess().getFullStopKeyword_1(), null);
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNullWhereEntryRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		createLeafNode(otherlv_2, grammarAccess.getNullWhereEntryAccess().getFeatureEStructuralFeatureCrossReference_2_0(), "feature"); 
	}

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNullWhereEntryAccess().getOperatorBooleanOperatorEnumRuleCall_3_0(), currentNode); 
	    }
		lv_operator_3_0=ruleBooleanOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNullWhereEntryRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_3_0, 
        		"BooleanOperator", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='null' 
    {
    	createLeafNode(otherlv_4, grammarAccess.getNullWhereEntryAccess().getNullKeyword_4(), null);
    }
)
;





// Entry rule entryRuleReferenceAliasWhereEntry
entryRuleReferenceAliasWhereEntry returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReferenceAliasWhereEntryRule(), currentNode); }
	 iv_ruleReferenceAliasWhereEntry=ruleReferenceAliasWhereEntry 
	 { $current=$iv_ruleReferenceAliasWhereEntry.current; } 
	 EOF 
;

// Rule ReferenceAliasWhereEntry
ruleReferenceAliasWhereEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceAliasWhereEntryRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		createLeafNode(otherlv_0, grammarAccess.getReferenceAliasWhereEntryAccess().getAliasFromEntryCrossReference_0_0(), "alias"); 
	}

)
)	otherlv_1='.' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getReferenceAliasWhereEntryAccess().getFullStopKeyword_1(), null);
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceAliasWhereEntryRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		createLeafNode(otherlv_2, grammarAccess.getReferenceAliasWhereEntryAccess().getReferenceEReferenceCrossReference_2_0(), "reference"); 
	}

)
)	otherlv_3='=' 
    {
    	createLeafNode(otherlv_3, grammarAccess.getReferenceAliasWhereEntryAccess().getEqualsSignKeyword_3(), null);
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceAliasWhereEntryRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		createLeafNode(otherlv_4, grammarAccess.getReferenceAliasWhereEntryAccess().getRightAliasFromEntryCrossReference_4_0(), "rightAlias"); 
	}

)
))
;





// Entry rule entryRuleSubselectWhereEntry
entryRuleSubselectWhereEntry returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSubselectWhereEntryRule(), currentNode); }
	 iv_ruleSubselectWhereEntry=ruleSubselectWhereEntry 
	 { $current=$iv_ruleSubselectWhereEntry.current; } 
	 EOF 
;

// Rule SubselectWhereEntry
ruleSubselectWhereEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubselectWhereEntryRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		createLeafNode(otherlv_0, grammarAccess.getSubselectWhereEntryAccess().getAliasFromEntryCrossReference_0_0(), "alias"); 
	}

)
)	otherlv_1='.' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getSubselectWhereEntryAccess().getFullStopKeyword_1(), null);
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubselectWhereEntryRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		createLeafNode(otherlv_2, grammarAccess.getSubselectWhereEntryAccess().getReferenceEReferenceCrossReference_2_0(), "reference"); 
	}

)
)(
(
		lv_notIn_3_0=	'not' 
    {
        createLeafNode(lv_notIn_3_0, grammarAccess.getSubselectWhereEntryAccess().getNotInNotKeyword_3_0(), "notIn");
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubselectWhereEntryRule());
	        }
       		set($current, "notIn", true, "not", lastConsumedNode);
	    }

)
)?	otherlv_4='in' 
    {
    	createLeafNode(otherlv_4, grammarAccess.getSubselectWhereEntryAccess().getInKeyword_4(), null);
    }
	otherlv_5='(' 
    {
    	createLeafNode(otherlv_5, grammarAccess.getSubselectWhereEntryAccess().getLeftParenthesisKeyword_5(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSubselectWhereEntryAccess().getSubQueryMQLqueryParserRuleCall_6_0(), currentNode); 
	    }
		lv_subQuery_6_0=ruleMQLquery		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubselectWhereEntryRule());
	        }
       		set(
       			$current, 
       			"subQuery",
        		lv_subQuery_6_0, 
        		"MQLquery", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	createLeafNode(otherlv_7, grammarAccess.getSubselectWhereEntryAccess().getRightParenthesisKeyword_7(), null);
    }
)
;





// Entry rule entryRuleAliasWhereEntry
entryRuleAliasWhereEntry returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAliasWhereEntryRule(), currentNode); }
	 iv_ruleAliasWhereEntry=ruleAliasWhereEntry 
	 { $current=$iv_ruleAliasWhereEntry.current; } 
	 EOF 
;

// Rule AliasWhereEntry
ruleAliasWhereEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAliasWhereEntryRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		createLeafNode(otherlv_0, grammarAccess.getAliasWhereEntryAccess().getAliasFromEntryCrossReference_0_0(), "alias"); 
	}

)
)	otherlv_1='=' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getAliasWhereEntryAccess().getEqualsSignKeyword_1(), null);
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAliasWhereEntryRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		createLeafNode(otherlv_2, grammarAccess.getAliasWhereEntryAccess().getRightAliasFromEntryCrossReference_2_0(), "rightAlias"); 
	}

)
))
;





// Rule NumericOperator
ruleNumericOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	enumLiteral_0='<' 
	{
        $current = grammarAccess.getNumericOperatorAccess().getLessThenEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(enumLiteral_0, grammarAccess.getNumericOperatorAccess().getLessThenEnumLiteralDeclaration_0(), null); 
    }
)
    |(	enumLiteral_1='>' 
	{
        $current = grammarAccess.getNumericOperatorAccess().getGreaterThenEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(enumLiteral_1, grammarAccess.getNumericOperatorAccess().getGreaterThenEnumLiteralDeclaration_1(), null); 
    }
)
    |(	enumLiteral_2='<=' 
	{
        $current = grammarAccess.getNumericOperatorAccess().getLessEqualEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(enumLiteral_2, grammarAccess.getNumericOperatorAccess().getLessEqualEnumLiteralDeclaration_2(), null); 
    }
)
    |(	enumLiteral_3='>=' 
	{
        $current = grammarAccess.getNumericOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(enumLiteral_3, grammarAccess.getNumericOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3(), null); 
    }
)
    |(	enumLiteral_4='=' 
	{
        $current = grammarAccess.getNumericOperatorAccess().getEqualEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(enumLiteral_4, grammarAccess.getNumericOperatorAccess().getEqualEnumLiteralDeclaration_4(), null); 
    }
)
    |(	enumLiteral_5='!=' 
	{
        $current = grammarAccess.getNumericOperatorAccess().getNotEqualEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(enumLiteral_5, grammarAccess.getNumericOperatorAccess().getNotEqualEnumLiteralDeclaration_5(), null); 
    }
));



// Rule StringOperator
ruleStringOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	enumLiteral_0='=' 
	{
        $current = grammarAccess.getStringOperatorAccess().getEqualEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(enumLiteral_0, grammarAccess.getStringOperatorAccess().getEqualEnumLiteralDeclaration_0(), null); 
    }
)
    |(	enumLiteral_1='!=' 
	{
        $current = grammarAccess.getStringOperatorAccess().getNotEqualEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(enumLiteral_1, grammarAccess.getStringOperatorAccess().getNotEqualEnumLiteralDeclaration_1(), null); 
    }
)
    |(	enumLiteral_2='like' 
	{
        $current = grammarAccess.getStringOperatorAccess().getLikeEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(enumLiteral_2, grammarAccess.getStringOperatorAccess().getLikeEnumLiteralDeclaration_2(), null); 
    }
)
    |(	enumLiteral_3='notlike' 
	{
        $current = grammarAccess.getStringOperatorAccess().getNotLikeEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(enumLiteral_3, grammarAccess.getStringOperatorAccess().getNotLikeEnumLiteralDeclaration_3(), null); 
    }
));



// Rule BooleanOperator
ruleBooleanOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	enumLiteral_0='=' 
	{
        $current = grammarAccess.getBooleanOperatorAccess().getEqualEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(enumLiteral_0, grammarAccess.getBooleanOperatorAccess().getEqualEnumLiteralDeclaration_0(), null); 
    }
)
    |(	enumLiteral_1='!=' 
	{
        $current = grammarAccess.getBooleanOperatorAccess().getNotEqualEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(enumLiteral_1, grammarAccess.getBooleanOperatorAccess().getNotEqualEnumLiteralDeclaration_1(), null); 
    }
));



RULE_SINGED_LONG : '-'? ('0'..'9')+;

RULE_SIGNED_DOUBLE : '-'? ('0'..'9')+ ('.' ('0'..'9')+)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


