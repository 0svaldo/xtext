/*
* generated by Xtext
*/
grammar InternalBug326937TestLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipse.xtext.ui.tests.editor.outline.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.xtext.ui.tests.editor.outline.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipse.xtext.ui.tests.editor.outline.services.Bug326937TestLanguageGrammarAccess;

}

@parser::members {
 
 	private Bug326937TestLanguageGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(Bug326937TestLanguageGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleA
entryRuleA 
:
{ before(grammarAccess.getARule()); }
	 ruleA
{ after(grammarAccess.getARule()); } 
	 EOF 
;

// Rule A
ruleA
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAAccess().getGroup()); }
(rule__A__Group__0)
{ after(grammarAccess.getAAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAorB
entryRuleAorB 
:
{ before(grammarAccess.getAorBRule()); }
	 ruleAorB
{ after(grammarAccess.getAorBRule()); } 
	 EOF 
;

// Rule AorB
ruleAorB
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAorBAccess().getAlternatives()); }
(rule__AorB__Alternatives)
{ after(grammarAccess.getAorBAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleB
entryRuleB 
:
{ before(grammarAccess.getBRule()); }
	 ruleB
{ after(grammarAccess.getBRule()); } 
	 EOF 
;

// Rule B
ruleB
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBAccess().getGroup()); }
(rule__B__Group__0)
{ after(grammarAccess.getBAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__AorB__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAorBAccess().getAParserRuleCall_0()); }
	ruleA
{ after(grammarAccess.getAorBAccess().getAParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAorBAccess().getBParserRuleCall_1()); }
	ruleB
{ after(grammarAccess.getAorBAccess().getBParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__A__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__A__Group__0__Impl
	rule__A__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__A__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAccess().getAKeyword_0()); }

	'A' 

{ after(grammarAccess.getAAccess().getAKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__A__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__A__Group__1__Impl
	rule__A__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__A__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAccess().getNameAssignment_1()); }
(rule__A__NameAssignment_1)
{ after(grammarAccess.getAAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__A__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__A__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__A__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAccess().getGroup_2()); }
(rule__A__Group_2__0)?
{ after(grammarAccess.getAAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__A__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__A__Group_2__0__Impl
	rule__A__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__A__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAccess().getLeftCurlyBracketKeyword_2_0()); }

	'{' 

{ after(grammarAccess.getAAccess().getLeftCurlyBracketKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__A__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__A__Group_2__1__Impl
	rule__A__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__A__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAccess().getContentsAssignment_2_1()); }
(rule__A__ContentsAssignment_2_1)*
{ after(grammarAccess.getAAccess().getContentsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__A__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__A__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__A__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAccess().getRightCurlyBracketKeyword_2_2()); }

	'}' 

{ after(grammarAccess.getAAccess().getRightCurlyBracketKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__B__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__B__Group__0__Impl
	rule__B__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__B__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBAccess().getBKeyword_0()); }

	'B' 

{ after(grammarAccess.getBAccess().getBKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__B__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__B__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__B__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBAccess().getNameAssignment_1()); }
(rule__B__NameAssignment_1)
{ after(grammarAccess.getBAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__A__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getAAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__A__ContentsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAccess().getContentsAorBParserRuleCall_2_1_0()); }
	ruleAorB{ after(grammarAccess.getAAccess().getContentsAorBParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__B__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getBAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


