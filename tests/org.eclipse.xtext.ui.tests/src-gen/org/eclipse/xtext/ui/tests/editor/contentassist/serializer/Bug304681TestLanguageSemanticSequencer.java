/*
 * generated by Xtext
 */
package org.eclipse.xtext.ui.tests.editor.contentassist.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug304681TestLanguage.Attribut;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug304681TestLanguage.Attribute;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug304681TestLanguage.Bug304681TestLanguagePackage;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug304681TestLanguage.ConstraintDefinition;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug304681TestLanguage.Model;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug304681TestLanguage.PackageDefinition;
import org.eclipse.xtext.ui.tests.editor.contentassist.bug304681TestLanguage.Reference;
import org.eclipse.xtext.ui.tests.editor.contentassist.services.Bug304681TestLanguageGrammarAccess;

@SuppressWarnings("all")
public class Bug304681TestLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private Bug304681TestLanguageGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == Bug304681TestLanguagePackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case Bug304681TestLanguagePackage.ATTRIBUT:
				sequence_Attribute2(context, (Attribut) semanticObject); 
				return; 
			case Bug304681TestLanguagePackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case Bug304681TestLanguagePackage.CONSTRAINT_DEFINITION:
				sequence_ConstraintDefinition(context, (ConstraintDefinition) semanticObject); 
				return; 
			case Bug304681TestLanguagePackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case Bug304681TestLanguagePackage.OBJECT:
				if(context == grammarAccess.getObject2Rule()) {
					sequence_Object2(context, (org.eclipse.xtext.ui.tests.editor.contentassist.bug304681TestLanguage.Object) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getObjectRule()) {
					sequence_Object(context, (org.eclipse.xtext.ui.tests.editor.contentassist.bug304681TestLanguage.Object) semanticObject); 
					return; 
				}
				else break;
			case Bug304681TestLanguagePackage.PACKAGE_DEFINITION:
				if(context == grammarAccess.getPackageDefinition2Rule()) {
					sequence_PackageDefinition2(context, (PackageDefinition) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPackageDefinitionRule()) {
					sequence_PackageDefinition(context, (PackageDefinition) semanticObject); 
					return; 
				}
				else break;
			case Bug304681TestLanguagePackage.REFERENCE:
				if(context == grammarAccess.getFeature2Rule() ||
				   context == grammarAccess.getReference2Rule()) {
					sequence_Reference2(context, (Reference) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getFeatureRule() ||
				   context == grammarAccess.getReferenceRule()) {
					sequence_Reference(context, (Reference) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (
	 *         type=ID 
	 *         name=ID 
	 *         (shortDescription=STRING? longDescription=STRING? constraintDefinitions+=ConstraintDefinition* required?='required'? technical?='technical'?)?
	 *     )
	 */
	protected void sequence_Attribute2(EObject context, Attribut semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (type=ID name=ID)
	 */
	protected void sequence_Attribute(EObject context, Attribute semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, Bug304681TestLanguagePackage.Literals.FEATURE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Bug304681TestLanguagePackage.Literals.FEATURE__NAME));
			if(transientValues.isValueTransient(semanticObject, Bug304681TestLanguagePackage.Literals.ATTRIBUTE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Bug304681TestLanguagePackage.Literals.ATTRIBUTE__TYPE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getAttributeAccess().getTypeIDTerminalRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (type=ID parameters+=STRING* message=STRING)
	 */
	protected void sequence_ConstraintDefinition(EObject context, ConstraintDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (definition=PackageDefinition | definition=PackageDefinition2)
	 */
	protected void sequence_Model(EObject context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (enabled?='enabled' | abstract?='abstract')? 
	 *         name=ID 
	 *         parent=[Object|ID]? 
	 *         shortDescription=STRING? 
	 *         longDescription=STRING? 
	 *         serialVersionUID=INT? 
	 *         cloneable?='cloneable'? 
	 *         features+=Feature2*
	 *     )
	 */
	protected void sequence_Object2(EObject context, org.eclipse.xtext.ui.tests.editor.contentassist.bug304681TestLanguage.Object semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (enabled?='enabled' | abstract?='abstract')? 
	 *         name=ID 
	 *         parent=[Object|ID]? 
	 *         shortDescription=STRING? 
	 *         longDescription=STRING? 
	 *         serialVersionUID=INT? 
	 *         cloneable?='cloneable'? 
	 *         features+=Feature* 
	 *         features+=Feature* 
	 *         features+=Feature* 
	 *         features+=Feature*
	 *     )
	 */
	protected void sequence_Object(EObject context, org.eclipse.xtext.ui.tests.editor.contentassist.bug304681TestLanguage.Object semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (namespace=ID contents+=Object2*)
	 */
	protected void sequence_PackageDefinition2(EObject context, PackageDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (namespace=ID contents+=Object*)
	 */
	protected void sequence_PackageDefinition(EObject context, PackageDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (type=[Object|ID] many?='*'? name=ID (shortDescription=STRING? longDescription=STRING?)?)
	 */
	protected void sequence_Reference2(EObject context, Reference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (type=[Object|ID] many?='*'? name=ID (shortDescription=STRING? longDescription=STRING?)?)
	 */
	protected void sequence_Reference(EObject context, Reference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
