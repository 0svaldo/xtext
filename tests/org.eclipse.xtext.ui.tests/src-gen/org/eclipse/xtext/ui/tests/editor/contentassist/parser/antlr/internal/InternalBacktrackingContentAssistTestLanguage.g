/*
* generated by Xtext
*/
grammar InternalBacktrackingContentAssistTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.eclipse.xtext.ui.tests.editor.contentassist.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.ui.tests.editor.contentassist.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.ui.tests.editor.contentassist.services.BacktrackingContentAssistTestLanguageGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private BacktrackingContentAssistTestLanguageGrammarAccess grammarAccess;
 	
    public InternalBacktrackingContentAssistTestLanguageParser(TokenStream input, IAstFactory factory, BacktrackingContentAssistTestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Document";	
   	}
   	
   	@Override
   	protected BacktrackingContentAssistTestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDocument
entryRuleDocument returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDocumentRule(), currentNode); }
	 iv_ruleDocument=ruleDocument 
	 { $current=$iv_ruleDocument.current; } 
	 EOF 
;

// Rule Document
ruleDocument returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDocumentAccess().getPackagesPackageDeclarationParserRuleCall_0_0(), currentNode); 
	    }
		lv_packages_0_0=rulePackageDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDocumentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"packages",
	        		lv_packages_0_0, 
	        		"PackageDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDocumentAccess().getContextsContextDeclParserRuleCall_1_0(), currentNode); 
	    }
		lv_contexts_1_0=ruleContextDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDocumentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"contexts",
	        		lv_contexts_1_0, 
	        		"ContextDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*
;





// Entry rule entryRuleBody
entryRuleBody returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBodyRule(), currentNode); }
	 iv_ruleBody=ruleBody 
	 { $current=$iv_ruleBody.current; } 
	 EOF 
;

// Rule Body
ruleBody returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='body' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getBodyAccess().getBodyKeyword_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBodyAccess().getConstraintNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_constraintName_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBodyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"constraintName",
	        		lv_constraintName_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	otherlv_2=':' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getBodyAccess().getColonKeyword_2(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBodyAccess().getExpressionExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBodyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleClassifierContextDecl
entryRuleClassifierContextDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassifierContextDeclRule(), currentNode); }
	 iv_ruleClassifierContextDecl=ruleClassifierContextDecl 
	 { $current=$iv_ruleClassifierContextDecl.current; } 
	 EOF 
;

// Rule ClassifierContextDecl
ruleClassifierContextDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='context' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getClassifierContextDeclAccess().getContextKeyword_0(), null);
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassifierContextDeclAccess().getSelfNameIdentifierParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_selfName_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassifierContextDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"selfName",
	        		lv_selfName_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_2=':' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getClassifierContextDeclAccess().getColonKeyword_1_1(), null);
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassifierContextDeclAccess().getClassifierClassifierRefParserRuleCall_2_0(), currentNode); 
	    }
		lv_classifier_3_0=ruleClassifierRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassifierContextDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"classifier",
	        		lv_classifier_3_0, 
	        		"ClassifierRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassifierContextDeclAccess().getInvariantsInvariantParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_invariants_4_0=ruleInvariant		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassifierContextDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"invariants",
	        		lv_invariants_4_0, 
	        		"Invariant", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassifierContextDeclAccess().getDefinitionsDefinitionParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_definitions_5_0=ruleDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassifierContextDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"definitions",
	        		lv_definitions_5_0, 
	        		"Definition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleClassifierRef
entryRuleClassifierRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassifierRefRule(), currentNode); }
	 iv_ruleClassifierRef=ruleClassifierRef 
	 { $current=$iv_ruleClassifierRef.current; } 
	 EOF 
;

// Rule ClassifierRef
ruleClassifierRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getClassifierRefAccess().getQualifiedClassifierRefParserRuleCall_0(), currentNode); 
    }
    this_QualifiedClassifierRef_0=ruleQualifiedClassifierRef
    { 
        $current = $this_QualifiedClassifierRef_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getClassifierRefAccess().getSimpleClassifierRefParserRuleCall_1(), currentNode); 
    }
    this_SimpleClassifierRef_1=ruleSimpleClassifierRef
    { 
        $current = $this_SimpleClassifierRef_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleContextDecl
entryRuleContextDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getContextDeclRule(), currentNode); }
	 iv_ruleContextDecl=ruleContextDecl 
	 { $current=$iv_ruleContextDecl.current; } 
	 EOF 
;

// Rule ContextDecl
ruleContextDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getContextDeclAccess().getPropertyContextDeclParserRuleCall_0(), currentNode); 
    }
    this_PropertyContextDecl_0=rulePropertyContextDecl
    { 
        $current = $this_PropertyContextDecl_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getContextDeclAccess().getClassifierContextDeclParserRuleCall_1(), currentNode); 
    }
    this_ClassifierContextDecl_1=ruleClassifierContextDecl
    { 
        $current = $this_ClassifierContextDecl_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getContextDeclAccess().getOperationContextDeclParserRuleCall_2(), currentNode); 
    }
    this_OperationContextDecl_2=ruleOperationContextDecl
    { 
        $current = $this_OperationContextDecl_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDefinitionRule(), currentNode); }
	 iv_ruleDefinition=ruleDefinition 
	 { $current=$iv_ruleDefinition.current; } 
	 EOF 
;

// Rule Definition
ruleDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_static_0_0=	'static' 
    {
        createLeafNode(lv_static_0_0, grammarAccess.getDefinitionAccess().getStaticStaticKeyword_0_0(), "static");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "static", true, "static", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	otherlv_1='def' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getDefinitionAccess().getDefKeyword_1(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefinitionAccess().getConstraintNameIdentifierParserRuleCall_2_0(), currentNode); 
	    }
		lv_constraintName_2_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"constraintName",
	        		lv_constraintName_2_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	otherlv_3=':' 
    {
    	createLeafNode(otherlv_3, grammarAccess.getDefinitionAccess().getColonKeyword_3(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefinitionAccess().getConstrainedNameIdentifierParserRuleCall_4_0(), currentNode); 
	    }
		lv_constrainedName_4_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"constrainedName",
	        		lv_constrainedName_4_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	otherlv_5='(' 
    {
    	createLeafNode(otherlv_5, grammarAccess.getDefinitionAccess().getLeftParenthesisKeyword_5_0(), null);
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefinitionAccess().getParametersParameterParserRuleCall_5_1_0_0(), currentNode); 
	    }
		lv_parameters_6_0=ruleParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_6_0, 
	        		"Parameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	otherlv_7=',' 
    {
    	createLeafNode(otherlv_7, grammarAccess.getDefinitionAccess().getCommaKeyword_5_1_1_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefinitionAccess().getParametersParameterParserRuleCall_5_1_1_1_0(), currentNode); 
	    }
		lv_parameters_8_0=ruleParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_8_0, 
	        		"Parameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	otherlv_9=')' 
    {
    	createLeafNode(otherlv_9, grammarAccess.getDefinitionAccess().getRightParenthesisKeyword_5_2(), null);
    }
)?	otherlv_10=':' 
    {
    	createLeafNode(otherlv_10, grammarAccess.getDefinitionAccess().getColonKeyword_6(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefinitionAccess().getTypeTypeExpParserRuleCall_7_0(), currentNode); 
	    }
		lv_type_11_0=ruleTypeExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_11_0, 
	        		"TypeExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	otherlv_12='=' 
    {
    	createLeafNode(otherlv_12, grammarAccess.getDefinitionAccess().getEqualsSignKeyword_8(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefinitionAccess().getExpressionExpressionParserRuleCall_9_0(), currentNode); 
	    }
		lv_expression_13_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_13_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleDer
entryRuleDer returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDerRule(), currentNode); }
	 iv_ruleDer=ruleDer 
	 { $current=$iv_ruleDer.current; } 
	 EOF 
;

// Rule Der
ruleDer returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='derive' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getDerAccess().getDeriveKeyword_0(), null);
    }
	otherlv_1=':' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getDerAccess().getColonKeyword_1(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDerAccess().getExpressionExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDerRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleInit
entryRuleInit returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInitRule(), currentNode); }
	 iv_ruleInit=ruleInit 
	 { $current=$iv_ruleInit.current; } 
	 EOF 
;

// Rule Init
ruleInit returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='init' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getInitAccess().getInitKeyword_0(), null);
    }
	otherlv_1=':' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getInitAccess().getColonKeyword_1(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInitAccess().getExpressionExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleInvariant
entryRuleInvariant returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInvariantRule(), currentNode); }
	 iv_ruleInvariant=ruleInvariant 
	 { $current=$iv_ruleInvariant.current; } 
	 EOF 
;

// Rule Invariant
ruleInvariant returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='inv' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getInvariantAccess().getInvKeyword_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInvariantAccess().getConstraintNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_constraintName_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInvariantRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"constraintName",
	        		lv_constraintName_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	otherlv_2=':' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getInvariantAccess().getColonKeyword_2(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInvariantAccess().getExpressionExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInvariantRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleOperationContextDecl
entryRuleOperationContextDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOperationContextDeclRule(), currentNode); }
	 iv_ruleOperationContextDecl=ruleOperationContextDecl 
	 { $current=$iv_ruleOperationContextDecl.current; } 
	 EOF 
;

// Rule OperationContextDecl
ruleOperationContextDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='context' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getOperationContextDeclAccess().getContextKeyword_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationContextDeclAccess().getOperationOperationRefParserRuleCall_1_0(), currentNode); 
	    }
		lv_operation_1_0=ruleOperationRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationContextDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operation",
	        		lv_operation_1_0, 
	        		"OperationRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_2='(' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getOperationContextDeclAccess().getLeftParenthesisKeyword_2(), null);
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationContextDeclAccess().getParametersParameterParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_parameters_3_0=ruleParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationContextDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_3_0, 
	        		"Parameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	otherlv_4=',' 
    {
    	createLeafNode(otherlv_4, grammarAccess.getOperationContextDeclAccess().getCommaKeyword_3_1_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationContextDeclAccess().getParametersParameterParserRuleCall_3_1_1_0(), currentNode); 
	    }
		lv_parameters_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationContextDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_5_0, 
	        		"Parameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	otherlv_6=')' 
    {
    	createLeafNode(otherlv_6, grammarAccess.getOperationContextDeclAccess().getRightParenthesisKeyword_4(), null);
    }
	otherlv_7=':' 
    {
    	createLeafNode(otherlv_7, grammarAccess.getOperationContextDeclAccess().getColonKeyword_5(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationContextDeclAccess().getTypeTypeExpParserRuleCall_6_0(), currentNode); 
	    }
		lv_type_8_0=ruleTypeExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationContextDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_8_0, 
	        		"TypeExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationContextDeclAccess().getPresPreParserRuleCall_7_0_0(), currentNode); 
	    }
		lv_pres_9_0=rulePre		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationContextDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"pres",
	        		lv_pres_9_0, 
	        		"Pre", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationContextDeclAccess().getPostsPostParserRuleCall_7_1_0(), currentNode); 
	    }
		lv_posts_10_0=rulePost		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationContextDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"posts",
	        		lv_posts_10_0, 
	        		"Post", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationContextDeclAccess().getBodiesBodyParserRuleCall_7_2_0(), currentNode); 
	    }
		lv_bodies_11_0=ruleBody		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationContextDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"bodies",
	        		lv_bodies_11_0, 
	        		"Body", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleOperationRef
entryRuleOperationRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOperationRefRule(), currentNode); }
	 iv_ruleOperationRef=ruleOperationRef 
	 { $current=$iv_ruleOperationRef.current; } 
	 EOF 
;

// Rule OperationRef
ruleOperationRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOperationRefAccess().getQualifiedOperationRefParserRuleCall_0(), currentNode); 
    }
    this_QualifiedOperationRef_0=ruleQualifiedOperationRef
    { 
        $current = $this_QualifiedOperationRef_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOperationRefAccess().getSimpleOperationRefParserRuleCall_1(), currentNode); 
    }
    this_SimpleOperationRef_1=ruleSimpleOperationRef
    { 
        $current = $this_SimpleOperationRef_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPackageDeclarationRule(), currentNode); }
	 iv_rulePackageDeclaration=rulePackageDeclaration 
	 { $current=$iv_rulePackageDeclaration.current; } 
	 EOF 
;

// Rule PackageDeclaration
rulePackageDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='package' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPackageDeclarationAccess().getPackagePackageRefParserRuleCall_1_0(), currentNode); 
	    }
		lv_package_1_0=rulePackageRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"package",
	        		lv_package_1_0, 
	        		"PackageRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPackageDeclarationAccess().getContextsContextDeclParserRuleCall_2_0(), currentNode); 
	    }
		lv_contexts_2_0=ruleContextDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"contexts",
	        		lv_contexts_2_0, 
	        		"ContextDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	otherlv_3='endpackage' 
    {
    	createLeafNode(otherlv_3, grammarAccess.getPackageDeclarationAccess().getEndpackageKeyword_3(), null);
    }
)
;





// Entry rule entryRulePackageRef
entryRulePackageRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPackageRefRule(), currentNode); }
	 iv_rulePackageRef=rulePackageRef 
	 { $current=$iv_rulePackageRef.current; } 
	 EOF 
;

// Rule PackageRef
rulePackageRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPackageRefAccess().getQualifiedPackageRefParserRuleCall_0(), currentNode); 
    }
    this_QualifiedPackageRef_0=ruleQualifiedPackageRef
    { 
        $current = $this_QualifiedPackageRef_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPackageRefAccess().getSimplePackageRefParserRuleCall_1(), currentNode); 
    }
    this_SimplePackageRef_1=ruleSimplePackageRef
    { 
        $current = $this_SimplePackageRef_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterRule(), currentNode); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterAccess().getNameIdentifierParserRuleCall_0_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_1=':' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getParameterAccess().getColonKeyword_0_1(), null);
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterAccess().getTypeTypeExpParserRuleCall_1_0(), currentNode); 
	    }
		lv_type_2_0=ruleTypeExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"TypeExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePost
entryRulePost returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPostRule(), currentNode); }
	 iv_rulePost=rulePost 
	 { $current=$iv_rulePost.current; } 
	 EOF 
;

// Rule Post
rulePost returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='post' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getPostAccess().getPostKeyword_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPostAccess().getConstraintNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_constraintName_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"constraintName",
	        		lv_constraintName_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	otherlv_2=':' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getPostAccess().getColonKeyword_2(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPostAccess().getExpressionExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePre
entryRulePre returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPreRule(), currentNode); }
	 iv_rulePre=rulePre 
	 { $current=$iv_rulePre.current; } 
	 EOF 
;

// Rule Pre
rulePre returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='pre' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getPreAccess().getPreKeyword_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPreAccess().getConstraintNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_constraintName_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"constraintName",
	        		lv_constraintName_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	otherlv_2=':' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getPreAccess().getColonKeyword_2(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPreAccess().getExpressionExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePropertyContextDecl
entryRulePropertyContextDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyContextDeclRule(), currentNode); }
	 iv_rulePropertyContextDecl=rulePropertyContextDecl 
	 { $current=$iv_rulePropertyContextDecl.current; } 
	 EOF 
;

// Rule PropertyContextDecl
rulePropertyContextDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='context' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getPropertyContextDeclAccess().getContextKeyword_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyContextDeclAccess().getPropertyPropertyRefParserRuleCall_1_0(), currentNode); 
	    }
		lv_property_1_0=rulePropertyRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyContextDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"property",
	        		lv_property_1_0, 
	        		"PropertyRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_2=':' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getPropertyContextDeclAccess().getColonKeyword_2(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyContextDeclAccess().getTypeTypeExpParserRuleCall_3_0(), currentNode); 
	    }
		lv_type_3_0=ruleTypeExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyContextDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_3_0, 
	        		"TypeExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyContextDeclAccess().getInitInitParserRuleCall_4_0_0_0(), currentNode); 
	    }
		lv_init_4_0=ruleInit		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyContextDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"init",
	        		lv_init_4_0, 
	        		"Init", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyContextDeclAccess().getDerDerParserRuleCall_4_0_1_0(), currentNode); 
	    }
		lv_der_5_0=ruleDer		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyContextDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"der",
	        		lv_der_5_0, 
	        		"Der", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)?
    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyContextDeclAccess().getDerDerParserRuleCall_4_1_0_0(), currentNode); 
	    }
		lv_der_6_0=ruleDer		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyContextDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"der",
	        		lv_der_6_0, 
	        		"Der", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyContextDeclAccess().getInitInitParserRuleCall_4_1_1_0(), currentNode); 
	    }
		lv_init_7_0=ruleInit		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyContextDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"init",
	        		lv_init_7_0, 
	        		"Init", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)))
;





// Entry rule entryRulePropertyRef
entryRulePropertyRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyRefRule(), currentNode); }
	 iv_rulePropertyRef=rulePropertyRef 
	 { $current=$iv_rulePropertyRef.current; } 
	 EOF 
;

// Rule PropertyRef
rulePropertyRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyRefAccess().getQualifiedPropertyRefParserRuleCall_0(), currentNode); 
    }
    this_QualifiedPropertyRef_0=ruleQualifiedPropertyRef
    { 
        $current = $this_QualifiedPropertyRef_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyRefAccess().getSimplePropertyRefParserRuleCall_1(), currentNode); 
    }
    this_SimplePropertyRef_1=ruleSimplePropertyRef
    { 
        $current = $this_SimplePropertyRef_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleQualifiedClassifierRef
entryRuleQualifiedClassifierRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQualifiedClassifierRefRule(), currentNode); }
	 iv_ruleQualifiedClassifierRef=ruleQualifiedClassifierRef 
	 { $current=$iv_ruleQualifiedClassifierRef.current; } 
	 EOF 
;

// Rule QualifiedClassifierRef
ruleQualifiedClassifierRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedClassifierRefAccess().getNamespaceIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_namespace_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedClassifierRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"namespace",
	        		lv_namespace_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_1='::' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getQualifiedClassifierRefAccess().getColonColonKeyword_1(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedClassifierRefAccess().getElementClassifierRefParserRuleCall_2_0(), currentNode); 
	    }
		lv_element_2_0=ruleClassifierRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedClassifierRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"element",
	        		lv_element_2_0, 
	        		"ClassifierRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleQualifiedOperationRef
entryRuleQualifiedOperationRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQualifiedOperationRefRule(), currentNode); }
	 iv_ruleQualifiedOperationRef=ruleQualifiedOperationRef 
	 { $current=$iv_ruleQualifiedOperationRef.current; } 
	 EOF 
;

// Rule QualifiedOperationRef
ruleQualifiedOperationRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedOperationRefAccess().getNamespaceIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_namespace_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedOperationRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"namespace",
	        		lv_namespace_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_1='::' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getQualifiedOperationRefAccess().getColonColonKeyword_1(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedOperationRefAccess().getElementOperationRefParserRuleCall_2_0(), currentNode); 
	    }
		lv_element_2_0=ruleOperationRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedOperationRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"element",
	        		lv_element_2_0, 
	        		"OperationRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleQualifiedPropertyRef
entryRuleQualifiedPropertyRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQualifiedPropertyRefRule(), currentNode); }
	 iv_ruleQualifiedPropertyRef=ruleQualifiedPropertyRef 
	 { $current=$iv_ruleQualifiedPropertyRef.current; } 
	 EOF 
;

// Rule QualifiedPropertyRef
ruleQualifiedPropertyRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedPropertyRefAccess().getNamespaceIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_namespace_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedPropertyRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"namespace",
	        		lv_namespace_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_1='::' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getQualifiedPropertyRefAccess().getColonColonKeyword_1(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedPropertyRefAccess().getElementPropertyRefParserRuleCall_2_0(), currentNode); 
	    }
		lv_element_2_0=rulePropertyRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedPropertyRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"element",
	        		lv_element_2_0, 
	        		"PropertyRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleQualifiedPackageRef
entryRuleQualifiedPackageRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQualifiedPackageRefRule(), currentNode); }
	 iv_ruleQualifiedPackageRef=ruleQualifiedPackageRef 
	 { $current=$iv_ruleQualifiedPackageRef.current; } 
	 EOF 
;

// Rule QualifiedPackageRef
ruleQualifiedPackageRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedPackageRefAccess().getNamespaceIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_namespace_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedPackageRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"namespace",
	        		lv_namespace_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_1='::' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getQualifiedPackageRefAccess().getColonColonKeyword_1(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedPackageRefAccess().getElementPackageRefParserRuleCall_2_0(), currentNode); 
	    }
		lv_element_2_0=rulePackageRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedPackageRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"element",
	        		lv_element_2_0, 
	        		"PackageRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleSimpleClassifierRef
entryRuleSimpleClassifierRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimpleClassifierRefRule(), currentNode); }
	 iv_ruleSimpleClassifierRef=ruleSimpleClassifierRef 
	 { $current=$iv_ruleSimpleClassifierRef.current; } 
	 EOF 
;

// Rule SimpleClassifierRef
ruleSimpleClassifierRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimpleClassifierRefAccess().getClassifierIdentifierParserRuleCall_0(), currentNode); 
	    }
		lv_classifier_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleClassifierRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"classifier",
	        		lv_classifier_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleSimpleOperationRef
entryRuleSimpleOperationRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimpleOperationRefRule(), currentNode); }
	 iv_ruleSimpleOperationRef=ruleSimpleOperationRef 
	 { $current=$iv_ruleSimpleOperationRef.current; } 
	 EOF 
;

// Rule SimpleOperationRef
ruleSimpleOperationRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimpleOperationRefAccess().getOperationIdentifierParserRuleCall_0(), currentNode); 
	    }
		lv_operation_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleOperationRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operation",
	        		lv_operation_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleSimplePackageRef
entryRuleSimplePackageRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimplePackageRefRule(), currentNode); }
	 iv_ruleSimplePackageRef=ruleSimplePackageRef 
	 { $current=$iv_ruleSimplePackageRef.current; } 
	 EOF 
;

// Rule SimplePackageRef
ruleSimplePackageRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimplePackageRefAccess().getPackageIdentifierParserRuleCall_0(), currentNode); 
	    }
		lv_package_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimplePackageRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"package",
	        		lv_package_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleSimplePropertyRef
entryRuleSimplePropertyRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimplePropertyRefRule(), currentNode); }
	 iv_ruleSimplePropertyRef=ruleSimplePropertyRef 
	 { $current=$iv_ruleSimplePropertyRef.current; } 
	 EOF 
;

// Rule SimplePropertyRef
ruleSimplePropertyRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimplePropertyRefAccess().getFeatureIdentifierParserRuleCall_0(), currentNode); 
	    }
		lv_feature_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimplePropertyRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"feature",
	        		lv_feature_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleNavigationExp
entryRuleNavigationExp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNavigationExpRule(), currentNode); }
	 iv_ruleNavigationExp=ruleNavigationExp 
	 { $current=$iv_ruleNavigationExp.current; } 
	 EOF 
;

// Rule NavigationExp
ruleNavigationExp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getNavigationExpAccess().getSubNavigationExpParserRuleCall_0(), currentNode); 
    }
    this_SubNavigationExp_0=ruleSubNavigationExp
    { 
        $current = $this_SubNavigationExp_0.current; 
        currentNode = currentNode.getParent();
    }
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getNavigationExpAccess().getInfixExpSourceAction_1_0_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNavigationExpAccess().getInfixExpSourceAction_1_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'.' 
    {
        createLeafNode(lv_op_2_1, grammarAccess.getNavigationExpAccess().getOpFullStopKeyword_1_0_1_0_0(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigationExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'->' 
    {
        createLeafNode(lv_op_2_2, grammarAccess.getNavigationExpAccess().getOpHyphenMinusGreaterThanSignKeyword_1_0_1_0_1(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigationExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigationExpAccess().getArgumentNavigatingExpParserRuleCall_1_0_2_0(), currentNode); 
	    }
		lv_argument_3_0=ruleNavigatingExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigationExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_0, 
	        		"NavigatingExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getNavigationExpAccess().getOclMessageSourceAction_1_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNavigationExpAccess().getOclMessageSourceAction_1_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_5_1=	'^^' 
    {
        createLeafNode(lv_op_5_1, grammarAccess.getNavigationExpAccess().getOpCircumflexAccentCircumflexAccentKeyword_1_1_1_0_0(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigationExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_5_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_5_2=	'^' 
    {
        createLeafNode(lv_op_5_2, grammarAccess.getNavigationExpAccess().getOpCircumflexAccentKeyword_1_1_1_0_1(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigationExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_5_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigationExpAccess().getMessageNameIdentifierParserRuleCall_1_1_2_0(), currentNode); 
	    }
		lv_messageName_6_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigationExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"messageName",
	        		lv_messageName_6_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_7='(' 
    {
    	createLeafNode(otherlv_7, grammarAccess.getNavigationExpAccess().getLeftParenthesisKeyword_1_1_3(), null);
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigationExpAccess().getArgumentsOclMessageArgParserRuleCall_1_1_4_0_0(), currentNode); 
	    }
		lv_arguments_8_0=ruleOclMessageArg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigationExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"arguments",
	        		lv_arguments_8_0, 
	        		"OclMessageArg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	otherlv_9=',' 
    {
    	createLeafNode(otherlv_9, grammarAccess.getNavigationExpAccess().getCommaKeyword_1_1_4_1_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigationExpAccess().getArgumentsOclMessageArgParserRuleCall_1_1_4_1_1_0(), currentNode); 
	    }
		lv_arguments_10_0=ruleOclMessageArg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigationExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"arguments",
	        		lv_arguments_10_0, 
	        		"OclMessageArg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	otherlv_11=')' 
    {
    	createLeafNode(otherlv_11, grammarAccess.getNavigationExpAccess().getRightParenthesisKeyword_1_1_5(), null);
    }
))?)
;





// Entry rule entryRuleNavigatingExp
entryRuleNavigatingExp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNavigatingExpRule(), currentNode); }
	 iv_ruleNavigatingExp=ruleNavigatingExp 
	 { $current=$iv_ruleNavigatingExp.current; } 
	 EOF 
;

// Rule NavigatingExp
ruleNavigatingExp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getNavigatingExpAccess().getSubNavigatingExpParserRuleCall_0(), currentNode); 
    }
    this_SubNavigatingExp_0=ruleSubNavigatingExp
    { 
        $current = $this_SubNavigatingExp_0.current; 
        currentNode = currentNode.getParent();
    }
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getNavigatingExpAccess().getInfixExpSourceAction_1_0_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNavigatingExpAccess().getInfixExpSourceAction_1_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'.' 
    {
        createLeafNode(lv_op_2_1, grammarAccess.getNavigatingExpAccess().getOpFullStopKeyword_1_0_1_0_0(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'->' 
    {
        createLeafNode(lv_op_2_2, grammarAccess.getNavigatingExpAccess().getOpHyphenMinusGreaterThanSignKeyword_1_0_1_0_1(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigatingExpAccess().getArgumentNavigatingExpParserRuleCall_1_0_2_0(), currentNode); 
	    }
		lv_argument_3_0=ruleNavigatingExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_0, 
	        		"NavigatingExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getNavigatingExpAccess().getOclMessageSourceAction_1_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNavigatingExpAccess().getOclMessageSourceAction_1_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_5_1=	'^^' 
    {
        createLeafNode(lv_op_5_1, grammarAccess.getNavigatingExpAccess().getOpCircumflexAccentCircumflexAccentKeyword_1_1_1_0_0(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_5_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_5_2=	'^' 
    {
        createLeafNode(lv_op_5_2, grammarAccess.getNavigatingExpAccess().getOpCircumflexAccentKeyword_1_1_1_0_1(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_5_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigatingExpAccess().getMessageNameIdentifierParserRuleCall_1_1_2_0(), currentNode); 
	    }
		lv_messageName_6_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"messageName",
	        		lv_messageName_6_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_7='(' 
    {
    	createLeafNode(otherlv_7, grammarAccess.getNavigatingExpAccess().getLeftParenthesisKeyword_1_1_3(), null);
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigatingExpAccess().getArgumentsOclMessageArgParserRuleCall_1_1_4_0_0(), currentNode); 
	    }
		lv_arguments_8_0=ruleOclMessageArg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"arguments",
	        		lv_arguments_8_0, 
	        		"OclMessageArg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	otherlv_9=',' 
    {
    	createLeafNode(otherlv_9, grammarAccess.getNavigatingExpAccess().getCommaKeyword_1_1_4_1_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigatingExpAccess().getArgumentsOclMessageArgParserRuleCall_1_1_4_1_1_0(), currentNode); 
	    }
		lv_arguments_10_0=ruleOclMessageArg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"arguments",
	        		lv_arguments_10_0, 
	        		"OclMessageArg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	otherlv_11=')' 
    {
    	createLeafNode(otherlv_11, grammarAccess.getNavigatingExpAccess().getRightParenthesisKeyword_1_1_5(), null);
    }
))?)
;





// Entry rule entryRuleOclMessageArg
entryRuleOclMessageArg returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOclMessageArgRule(), currentNode); }
	 iv_ruleOclMessageArg=ruleOclMessageArg 
	 { $current=$iv_ruleOclMessageArg.current; } 
	 EOF 
;

// Rule OclMessageArg
ruleOclMessageArg returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getOclMessageArgAccess().getOclMessageArgAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOclMessageArgAccess().getOclMessageArgAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	otherlv_1='?' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getOclMessageArgAccess().getQuestionMarkKeyword_0_1(), null);
    }
(	otherlv_2=':' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getOclMessageArgAccess().getColonKeyword_0_2_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOclMessageArgAccess().getTypeTypeExpParserRuleCall_0_2_1_0(), currentNode); 
	    }
		lv_type_3_0=ruleTypeExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOclMessageArgRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_3_0, 
	        		"TypeExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOclMessageArgAccess().getExpressionParserRuleCall_1(), currentNode); 
    }
    this_Expression_4=ruleExpression
    { 
        $current = $this_Expression_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleNUMBER_LITERAL
entryRuleNUMBER_LITERAL returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNUMBER_LITERALRule(), currentNode); } 
	 iv_ruleNUMBER_LITERAL=ruleNUMBER_LITERAL 
	 { $current=$iv_ruleNUMBER_LITERAL.current.getText(); }  
	 EOF 
;

// Rule NUMBER_LITERAL
ruleNUMBER_LITERAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(this_INT_0, grammarAccess.getNUMBER_LITERALAccess().getINTTerminalRuleCall_0(), null); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getNUMBER_LITERALAccess().getFullStopKeyword_1_0(), null); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    createLeafNode(this_INT_2, grammarAccess.getNUMBER_LITERALAccess().getINTTerminalRuleCall_1_1(), null); 
    }
)?((
	kw='e' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getNUMBER_LITERALAccess().getEKeyword_2_0_0(), null); 
    }

    |
	kw='E' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getNUMBER_LITERALAccess().getEKeyword_2_0_1(), null); 
    }
)(
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getNUMBER_LITERALAccess().getPlusSignKeyword_2_1_0(), null); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getNUMBER_LITERALAccess().getHyphenMinusKeyword_2_1_1(), null); 
    }
)?    this_INT_7=RULE_INT    {
		$current.merge(this_INT_7);
    }

    { 
    createLeafNode(this_INT_7, grammarAccess.getNUMBER_LITERALAccess().getINTTerminalRuleCall_2_2(), null); 
    }
)?)
    ;





// Entry rule entryRuleEssentialOCLRestrictedKeywords
entryRuleEssentialOCLRestrictedKeywords returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEssentialOCLRestrictedKeywordsRule(), currentNode); } 
	 iv_ruleEssentialOCLRestrictedKeywords=ruleEssentialOCLRestrictedKeywords 
	 { $current=$iv_ruleEssentialOCLRestrictedKeywords.current.getText(); }  
	 EOF 
;

// Rule EssentialOCLRestrictedKeywords
ruleEssentialOCLRestrictedKeywords returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='e' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getEssentialOCLRestrictedKeywordsAccess().getEKeyword_0(), null); 
    }

    |
	kw='E' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getEssentialOCLRestrictedKeywordsAccess().getEKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleRestrictedKeywords
entryRuleRestrictedKeywords returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRestrictedKeywordsRule(), currentNode); } 
	 iv_ruleRestrictedKeywords=ruleRestrictedKeywords 
	 { $current=$iv_ruleRestrictedKeywords.current.getText(); }  
	 EOF 
;

// Rule RestrictedKeywords
ruleRestrictedKeywords returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getRestrictedKeywordsAccess().getEssentialOCLRestrictedKeywordsParserRuleCall(), currentNode); 
    }
    this_EssentialOCLRestrictedKeywords_0=ruleEssentialOCLRestrictedKeywords    {
		$current.merge(this_EssentialOCLRestrictedKeywords_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIdentifierRule(), currentNode); } 
	 iv_ruleIdentifier=ruleIdentifier 
	 { $current=$iv_ruleIdentifier.current.getText(); }  
	 EOF 
;

// Rule Identifier
ruleIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(this_ID_0, grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getIdentifierAccess().getRestrictedKeywordsParserRuleCall_1(), currentNode); 
    }
    this_RestrictedKeywords_1=ruleRestrictedKeywords    {
		$current.merge(this_RestrictedKeywords_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringLiteralRule(), currentNode); } 
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current.getText(); }  
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(this_STRING_0, grammarAccess.getStringLiteralAccess().getSTRINGTerminalRuleCall(), null); 
    }

    ;







// Entry rule entryRulePrimitiveTypeIdentifier
entryRulePrimitiveTypeIdentifier returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimitiveTypeIdentifierRule(), currentNode); } 
	 iv_rulePrimitiveTypeIdentifier=rulePrimitiveTypeIdentifier 
	 { $current=$iv_rulePrimitiveTypeIdentifier.current.getText(); }  
	 EOF 
;

// Rule PrimitiveTypeIdentifier
rulePrimitiveTypeIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='Boolean' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getBooleanKeyword_0(), null); 
    }

    |
	kw='Integer' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getIntegerKeyword_1(), null); 
    }

    |
	kw='Real' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getRealKeyword_2(), null); 
    }

    |
	kw='String' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getStringKeyword_3(), null); 
    }

    |
	kw='UnlimitedNatural' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getUnlimitedNaturalKeyword_4(), null); 
    }

    |
	kw='OclAny' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getOclAnyKeyword_5(), null); 
    }

    |
	kw='OclInvalid' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getOclInvalidKeyword_6(), null); 
    }

    |
	kw='OclVoid' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getOclVoidKeyword_7(), null); 
    }
)
    ;





// Entry rule entryRulePrimitiveType
entryRulePrimitiveType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimitiveTypeRule(), currentNode); }
	 iv_rulePrimitiveType=rulePrimitiveType 
	 { $current=$iv_rulePrimitiveType.current; } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveTypeAccess().getNamePrimitiveTypeIdentifierParserRuleCall_0(), currentNode); 
	    }
		lv_name_0_0=rulePrimitiveTypeIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"PrimitiveTypeIdentifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleCollectionTypeIdentifier
entryRuleCollectionTypeIdentifier returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionTypeIdentifierRule(), currentNode); } 
	 iv_ruleCollectionTypeIdentifier=ruleCollectionTypeIdentifier 
	 { $current=$iv_ruleCollectionTypeIdentifier.current.getText(); }  
	 EOF 
;

// Rule CollectionTypeIdentifier
ruleCollectionTypeIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='Set' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getCollectionTypeIdentifierAccess().getSetKeyword_0(), null); 
    }

    |
	kw='Bag' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getCollectionTypeIdentifierAccess().getBagKeyword_1(), null); 
    }

    |
	kw='Sequence' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getCollectionTypeIdentifierAccess().getSequenceKeyword_2(), null); 
    }

    |
	kw='Collection' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getCollectionTypeIdentifierAccess().getCollectionKeyword_3(), null); 
    }

    |
	kw='OrderedSet' 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getCollectionTypeIdentifierAccess().getOrderedSetKeyword_4(), null); 
    }
)
    ;





// Entry rule entryRuleTypeExp
entryRuleTypeExp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeExpRule(), currentNode); }
	 iv_ruleTypeExp=ruleTypeExp 
	 { $current=$iv_ruleTypeExp.current; } 
	 EOF 
;

// Rule TypeExp
ruleTypeExp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeExpAccess().getPrimitiveTypeParserRuleCall_0(), currentNode); 
    }
    this_PrimitiveType_0=rulePrimitiveType
    { 
        $current = $this_PrimitiveType_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeExpAccess().getNameExpParserRuleCall_1(), currentNode); 
    }
    this_NameExp_1=ruleNameExp
    { 
        $current = $this_NameExp_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeExpAccess().getCollectionTypeParserRuleCall_2(), currentNode); 
    }
    this_CollectionType_2=ruleCollectionType
    { 
        $current = $this_CollectionType_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeExpAccess().getTupleTypeParserRuleCall_3(), currentNode); 
    }
    this_TupleType_3=ruleTupleType
    { 
        $current = $this_TupleType_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleCollectionType
entryRuleCollectionType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionTypeRule(), currentNode); }
	 iv_ruleCollectionType=ruleCollectionType 
	 { $current=$iv_ruleCollectionType.current; } 
	 EOF 
;

// Rule CollectionType
ruleCollectionType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionTypeAccess().getTypeIdentifierCollectionTypeIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_typeIdentifier_0_0=ruleCollectionTypeIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"typeIdentifier",
	        		lv_typeIdentifier_0_0, 
	        		"CollectionTypeIdentifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	otherlv_1='(' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getCollectionTypeAccess().getLeftParenthesisKeyword_1_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionTypeAccess().getTypeTypeExpParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_type_2_0=ruleTypeExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"TypeExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_3=')' 
    {
    	createLeafNode(otherlv_3, grammarAccess.getCollectionTypeAccess().getRightParenthesisKeyword_1_2(), null);
    }
)?)
;





// Entry rule entryRuleTupleType
entryRuleTupleType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTupleTypeRule(), currentNode); }
	 iv_ruleTupleType=ruleTupleType 
	 { $current=$iv_ruleTupleType.current; } 
	 EOF 
;

// Rule TupleType
ruleTupleType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=	'Tuple' 
    {
        createLeafNode(lv_name_0_0, grammarAccess.getTupleTypeAccess().getNameTupleKeyword_0_0(), "name");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0_0, "Tuple", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	otherlv_1='(' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getTupleTypeAccess().getLeftParenthesisKeyword_1(), null);
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleTypeAccess().getPartTuplePartParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_part_2_0=ruletuplePart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"part",
	        		lv_part_2_0, 
	        		"tuplePart", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	otherlv_3=',' 
    {
    	createLeafNode(otherlv_3, grammarAccess.getTupleTypeAccess().getCommaKeyword_2_1_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleTypeAccess().getPartTuplePartParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_part_4_0=ruletuplePart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"part",
	        		lv_part_4_0, 
	        		"tuplePart", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	otherlv_5=')' 
    {
    	createLeafNode(otherlv_5, grammarAccess.getTupleTypeAccess().getRightParenthesisKeyword_3(), null);
    }
)
;





// Entry rule entryRuletuplePart
entryRuletuplePart returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTuplePartRule(), currentNode); }
	 iv_ruletuplePart=ruletuplePart 
	 { $current=$iv_ruletuplePart.current; } 
	 EOF 
;

// Rule tuplePart
ruletuplePart returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTuplePartAccess().getNameIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTuplePartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_1=':' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getTuplePartAccess().getColonKeyword_1(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTuplePartAccess().getTypeTypeExpParserRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruleTypeExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTuplePartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"TypeExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleCollectionLiteralExp
entryRuleCollectionLiteralExp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionLiteralExpRule(), currentNode); }
	 iv_ruleCollectionLiteralExp=ruleCollectionLiteralExp 
	 { $current=$iv_ruleCollectionLiteralExp.current; } 
	 EOF 
;

// Rule CollectionLiteralExp
ruleCollectionLiteralExp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralExpAccess().getCollectionTypeParserRuleCall_0(), currentNode); 
    }
    this_CollectionType_0=ruleCollectionType
    { 
        $current = $this_CollectionType_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCollectionLiteralExpAccess().getCollectionLiteralExpTypeAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "type", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCollectionLiteralExpAccess().getCollectionLiteralExpTypeAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	otherlv_2='{' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getCollectionLiteralExpAccess().getLeftCurlyBracketKeyword_1_1(), null);
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralExpAccess().getCollectionLiteralPartsCollectionLiteralPartParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_collectionLiteralParts_3_0=ruleCollectionLiteralPart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionLiteralExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"collectionLiteralParts",
	        		lv_collectionLiteralParts_3_0, 
	        		"CollectionLiteralPart", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	otherlv_4=',' 
    {
    	createLeafNode(otherlv_4, grammarAccess.getCollectionLiteralExpAccess().getCommaKeyword_1_2_1_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralExpAccess().getCollectionLiteralPartsCollectionLiteralPartParserRuleCall_1_2_1_1_0(), currentNode); 
	    }
		lv_collectionLiteralParts_5_0=ruleCollectionLiteralPart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionLiteralExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"collectionLiteralParts",
	        		lv_collectionLiteralParts_5_0, 
	        		"CollectionLiteralPart", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	otherlv_6='}' 
    {
    	createLeafNode(otherlv_6, grammarAccess.getCollectionLiteralExpAccess().getRightCurlyBracketKeyword_1_3(), null);
    }
)?)
;





// Entry rule entryRuleCollectionLiteralPart
entryRuleCollectionLiteralPart returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionLiteralPartRule(), currentNode); }
	 iv_ruleCollectionLiteralPart=ruleCollectionLiteralPart 
	 { $current=$iv_ruleCollectionLiteralPart.current; } 
	 EOF 
;

// Rule CollectionLiteralPart
ruleCollectionLiteralPart returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralPartAccess().getExpressionExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_expression_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionLiteralPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_0_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	otherlv_1='..' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getCollectionLiteralPartAccess().getFullStopFullStopKeyword_1_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralPartAccess().getLastExpressionExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_lastExpression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionLiteralPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lastExpression",
	        		lv_lastExpression_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRulePrimitiveLiteralExp
entryRulePrimitiveLiteralExp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimitiveLiteralExpRule(), currentNode); }
	 iv_rulePrimitiveLiteralExp=rulePrimitiveLiteralExp 
	 { $current=$iv_rulePrimitiveLiteralExp.current; } 
	 EOF 
;

// Rule PrimitiveLiteralExp
rulePrimitiveLiteralExp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpAccess().getNumberLiteralExpParserRuleCall_0(), currentNode); 
    }
    this_NumberLiteralExp_0=ruleNumberLiteralExp
    { 
        $current = $this_NumberLiteralExp_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpAccess().getStringLiteralExpParserRuleCall_1(), currentNode); 
    }
    this_StringLiteralExp_1=ruleStringLiteralExp
    { 
        $current = $this_StringLiteralExp_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpAccess().getBooleanLiteralExpParserRuleCall_2(), currentNode); 
    }
    this_BooleanLiteralExp_2=ruleBooleanLiteralExp
    { 
        $current = $this_BooleanLiteralExp_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpAccess().getInvalidLiteralExpParserRuleCall_3(), currentNode); 
    }
    this_InvalidLiteralExp_3=ruleInvalidLiteralExp
    { 
        $current = $this_InvalidLiteralExp_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpAccess().getNullLiteralExpParserRuleCall_4(), currentNode); 
    }
    this_NullLiteralExp_4=ruleNullLiteralExp
    { 
        $current = $this_NullLiteralExp_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleTupleLiteralExp
entryRuleTupleLiteralExp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTupleLiteralExpRule(), currentNode); }
	 iv_ruleTupleLiteralExp=ruleTupleLiteralExp 
	 { $current=$iv_ruleTupleLiteralExp.current; } 
	 EOF 
;

// Rule TupleLiteralExp
ruleTupleLiteralExp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTupleLiteralExpAccess().getTupleLiteralExpAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTupleLiteralExpAccess().getTupleLiteralExpAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	otherlv_1='Tuple' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getTupleLiteralExpAccess().getTupleKeyword_1(), null);
    }
(	otherlv_2='{' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getTupleLiteralExpAccess().getLeftCurlyBracketKeyword_2_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralExpAccess().getPartTupleLiteralPartParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_part_3_0=ruleTupleLiteralPart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"part",
	        		lv_part_3_0, 
	        		"TupleLiteralPart", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	otherlv_4=',' 
    {
    	createLeafNode(otherlv_4, grammarAccess.getTupleLiteralExpAccess().getCommaKeyword_2_2_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralExpAccess().getPartTupleLiteralPartParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_part_5_0=ruleTupleLiteralPart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"part",
	        		lv_part_5_0, 
	        		"TupleLiteralPart", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	otherlv_6='}' 
    {
    	createLeafNode(otherlv_6, grammarAccess.getTupleLiteralExpAccess().getRightCurlyBracketKeyword_2_3(), null);
    }
)?)
;





// Entry rule entryRuleTupleLiteralPart
entryRuleTupleLiteralPart returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTupleLiteralPartRule(), currentNode); }
	 iv_ruleTupleLiteralPart=ruleTupleLiteralPart 
	 { $current=$iv_ruleTupleLiteralPart.current; } 
	 EOF 
;

// Rule TupleLiteralPart
ruleTupleLiteralPart returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralPartAccess().getNameIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	otherlv_1=':' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getTupleLiteralPartAccess().getColonKeyword_1_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralPartAccess().getTypeTypeExpParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_type_2_0=ruleTypeExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"TypeExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	otherlv_3='=' 
    {
    	createLeafNode(otherlv_3, grammarAccess.getTupleLiteralPartAccess().getEqualsSignKeyword_2(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralPartAccess().getInitExpressionExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_initExpression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initExpression",
	        		lv_initExpression_4_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleNumberLiteralExp
entryRuleNumberLiteralExp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNumberLiteralExpRule(), currentNode); }
	 iv_ruleNumberLiteralExp=ruleNumberLiteralExp 
	 { $current=$iv_ruleNumberLiteralExp.current; } 
	 EOF 
;

// Rule NumberLiteralExp
ruleNumberLiteralExp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNumberLiteralExpAccess().getNameNUMBER_LITERALParserRuleCall_0(), currentNode); 
	    }
		lv_name_0_0=ruleNUMBER_LITERAL		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNumberLiteralExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"NUMBER_LITERAL", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleStringLiteralExp
entryRuleStringLiteralExp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringLiteralExpRule(), currentNode); }
	 iv_ruleStringLiteralExp=ruleStringLiteralExp 
	 { $current=$iv_ruleStringLiteralExp.current; } 
	 EOF 
;

// Rule StringLiteralExp
ruleStringLiteralExp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStringLiteralExpAccess().getValuesStringLiteralParserRuleCall_0(), currentNode); 
	    }
		lv_values_0_0=ruleStringLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringLiteralExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"values",
	        		lv_values_0_0, 
	        		"StringLiteral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+
;





// Entry rule entryRuleBooleanLiteralExp
entryRuleBooleanLiteralExp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanLiteralExpRule(), currentNode); }
	 iv_ruleBooleanLiteralExp=ruleBooleanLiteralExp 
	 { $current=$iv_ruleBooleanLiteralExp.current; } 
	 EOF 
;

// Rule BooleanLiteralExp
ruleBooleanLiteralExp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getBooleanLiteralExpAccess().getBooleanLiteralExpAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBooleanLiteralExpAccess().getBooleanLiteralExpAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
(
		lv_isTrue_1_0=	'true' 
    {
        createLeafNode(lv_isTrue_1_0, grammarAccess.getBooleanLiteralExpAccess().getIsTrueTrueKeyword_1_0_0(), "isTrue");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanLiteralExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isTrue", true, "true", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |	otherlv_2='false' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getBooleanLiteralExpAccess().getFalseKeyword_1_1(), null);
    }
))
;





// Entry rule entryRuleInvalidLiteralExp
entryRuleInvalidLiteralExp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInvalidLiteralExpRule(), currentNode); }
	 iv_ruleInvalidLiteralExp=ruleInvalidLiteralExp 
	 { $current=$iv_ruleInvalidLiteralExp.current; } 
	 EOF 
;

// Rule InvalidLiteralExp
ruleInvalidLiteralExp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getInvalidLiteralExpAccess().getInvalidLiteralExpAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInvalidLiteralExpAccess().getInvalidLiteralExpAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	otherlv_1='invalid' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getInvalidLiteralExpAccess().getInvalidKeyword_1(), null);
    }
)
;





// Entry rule entryRuleNullLiteralExp
entryRuleNullLiteralExp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNullLiteralExpRule(), currentNode); }
	 iv_ruleNullLiteralExp=ruleNullLiteralExp 
	 { $current=$iv_ruleNullLiteralExp.current; } 
	 EOF 
;

// Rule NullLiteralExp
ruleNullLiteralExp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getNullLiteralExpAccess().getNullLiteralExpAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNullLiteralExpAccess().getNullLiteralExpAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	otherlv_1='null' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getNullLiteralExpAccess().getNullKeyword_1(), null);
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getImpliesParserRuleCall_0(), currentNode); 
    }
    this_implies_0=ruleimplies
    { 
        $current = $this_implies_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getLetExpParserRuleCall_1(), currentNode); 
    }
    this_LetExp_1=ruleLetExp
    { 
        $current = $this_LetExp_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleimplies
entryRuleimplies returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImpliesRule(), currentNode); }
	 iv_ruleimplies=ruleimplies 
	 { $current=$iv_ruleimplies.current; } 
	 EOF 
;

// Rule implies
ruleimplies returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getImpliesAccess().getXorParserRuleCall_0(), currentNode); 
    }
    this_xor_0=rulexor
    { 
        $current = $this_xor_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getImpliesAccess().getInfixExpSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getImpliesAccess().getInfixExpSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_2_0=	'implies' 
    {
        createLeafNode(lv_op_2_0, grammarAccess.getImpliesAccess().getOpImpliesKeyword_1_1_0(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImpliesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_0, "implies", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getImpliesAccess().getArgumentXorParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=rulexor		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImpliesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"xor", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getImpliesAccess().getArgumentLetExpParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImpliesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))*)
;





// Entry rule entryRulexor
entryRulexor returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getXorRule(), currentNode); }
	 iv_rulexor=rulexor 
	 { $current=$iv_rulexor.current; } 
	 EOF 
;

// Rule xor
rulexor returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getXorAccess().getOrParserRuleCall_0(), currentNode); 
    }
    this_or_0=ruleor
    { 
        $current = $this_or_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getXorAccess().getInfixExpSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getXorAccess().getInfixExpSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_2_0=	'xor' 
    {
        createLeafNode(lv_op_2_0, grammarAccess.getXorAccess().getOpXorKeyword_1_1_0(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_0, "xor", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXorAccess().getArgumentOrParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=ruleor		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"or", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getXorAccess().getArgumentLetExpParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))*)
;





// Entry rule entryRuleor
entryRuleor returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOrRule(), currentNode); }
	 iv_ruleor=ruleor 
	 { $current=$iv_ruleor.current; } 
	 EOF 
;

// Rule or
ruleor returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0(), currentNode); 
    }
    this_and_0=ruleand
    { 
        $current = $this_and_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getOrAccess().getInfixExpSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOrAccess().getInfixExpSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_2_0=	'or' 
    {
        createLeafNode(lv_op_2_0, grammarAccess.getOrAccess().getOpOrKeyword_1_1_0(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_0, "or", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrAccess().getArgumentAndParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=ruleand		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"and", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrAccess().getArgumentLetExpParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))*)
;





// Entry rule entryRuleand
entryRuleand returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAndRule(), currentNode); }
	 iv_ruleand=ruleand 
	 { $current=$iv_ruleand.current; } 
	 EOF 
;

// Rule and
ruleand returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAndAccess().getEqualityParserRuleCall_0(), currentNode); 
    }
    this_equality_0=ruleequality
    { 
        $current = $this_equality_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAndAccess().getInfixExpSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAndAccess().getInfixExpSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_2_0=	'and' 
    {
        createLeafNode(lv_op_2_0, grammarAccess.getAndAccess().getOpAndKeyword_1_1_0(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_0, "and", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndAccess().getArgumentEqualityParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=ruleequality		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"equality", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndAccess().getArgumentLetExpParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))*)
;





// Entry rule entryRuleequality
entryRuleequality returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEqualityRule(), currentNode); }
	 iv_ruleequality=ruleequality 
	 { $current=$iv_ruleequality.current; } 
	 EOF 
;

// Rule equality
ruleequality returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getEqualityAccess().getRelationalParserRuleCall_0(), currentNode); 
    }
    this_relational_0=rulerelational
    { 
        $current = $this_relational_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getEqualityAccess().getInfixExpSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getEqualityAccess().getInfixExpSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'=' 
    {
        createLeafNode(lv_op_2_1, grammarAccess.getEqualityAccess().getOpEqualsSignKeyword_1_1_0_0(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'<>' 
    {
        createLeafNode(lv_op_2_2, grammarAccess.getEqualityAccess().getOpLessThanSignGreaterThanSignKeyword_1_1_0_1(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityAccess().getArgumentRelationalParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=rulerelational		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"relational", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityAccess().getArgumentLetExpParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))*)
;





// Entry rule entryRulerelational
entryRulerelational returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationalRule(), currentNode); }
	 iv_rulerelational=rulerelational 
	 { $current=$iv_rulerelational.current; } 
	 EOF 
;

// Rule relational
rulerelational returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationalAccess().getAdditiveParserRuleCall_0(), currentNode); 
    }
    this_additive_0=ruleadditive
    { 
        $current = $this_additive_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getRelationalAccess().getInfixExpSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRelationalAccess().getInfixExpSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'>' 
    {
        createLeafNode(lv_op_2_1, grammarAccess.getRelationalAccess().getOpGreaterThanSignKeyword_1_1_0_0(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'<' 
    {
        createLeafNode(lv_op_2_2, grammarAccess.getRelationalAccess().getOpLessThanSignKeyword_1_1_0_1(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_3=	'>=' 
    {
        createLeafNode(lv_op_2_3, grammarAccess.getRelationalAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_2(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_4=	'<=' 
    {
        createLeafNode(lv_op_2_4, grammarAccess.getRelationalAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_3(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalAccess().getArgumentAdditiveParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=ruleadditive		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"additive", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalAccess().getArgumentLetExpParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))*)
;





// Entry rule entryRuleadditive
entryRuleadditive returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAdditiveRule(), currentNode); }
	 iv_ruleadditive=ruleadditive 
	 { $current=$iv_ruleadditive.current; } 
	 EOF 
;

// Rule additive
ruleadditive returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAdditiveAccess().getMultiplicativeParserRuleCall_0(), currentNode); 
    }
    this_multiplicative_0=rulemultiplicative
    { 
        $current = $this_multiplicative_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAdditiveAccess().getInfixExpSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAdditiveAccess().getInfixExpSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'+' 
    {
        createLeafNode(lv_op_2_1, grammarAccess.getAdditiveAccess().getOpPlusSignKeyword_1_1_0_0(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'-' 
    {
        createLeafNode(lv_op_2_2, grammarAccess.getAdditiveAccess().getOpHyphenMinusKeyword_1_1_0_1(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveAccess().getArgumentMultiplicativeParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=rulemultiplicative		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"multiplicative", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveAccess().getArgumentLetExpParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))*)
;





// Entry rule entryRulemultiplicative
entryRulemultiplicative returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultiplicativeRule(), currentNode); }
	 iv_rulemultiplicative=rulemultiplicative 
	 { $current=$iv_rulemultiplicative.current; } 
	 EOF 
;

// Rule multiplicative
rulemultiplicative returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getMultiplicativeAccess().getUnaryParserRuleCall_0(), currentNode); 
    }
    this_unary_0=ruleunary
    { 
        $current = $this_unary_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getMultiplicativeAccess().getInfixExpSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMultiplicativeAccess().getInfixExpSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'*' 
    {
        createLeafNode(lv_op_2_1, grammarAccess.getMultiplicativeAccess().getOpAsteriskKeyword_1_1_0_0(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'/' 
    {
        createLeafNode(lv_op_2_2, grammarAccess.getMultiplicativeAccess().getOpSolidusKeyword_1_1_0_1(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeAccess().getArgumentUnaryParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=ruleunary		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"unary", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeAccess().getArgumentLetExpParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))*)
;





// Entry rule entryRuleunary
entryRuleunary returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnaryRule(), currentNode); }
	 iv_ruleunary=ruleunary 
	 { $current=$iv_ruleunary.current; } 
	 EOF 
;

// Rule unary
ruleunary returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryAccess().getNavigationExpParserRuleCall_0(), currentNode); 
    }
    this_NavigationExp_0=ruleNavigationExp
    { 
        $current = $this_NavigationExp_0.current; 
        currentNode = currentNode.getParent();
    }

    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getUnaryAccess().getPrefixExpAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUnaryAccess().getPrefixExpAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'-' 
    {
        createLeafNode(lv_op_2_1, grammarAccess.getUnaryAccess().getOpHyphenMinusKeyword_1_1_0_0(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'not' 
    {
        createLeafNode(lv_op_2_2, grammarAccess.getUnaryAccess().getOpNotKeyword_1_1_0_1(), "op");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryAccess().getSourceUnaryParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_source_3_0=ruleunary		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"source",
	        		lv_source_3_0, 
	        		"unary", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleSubNavigationExp
entryRuleSubNavigationExp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSubNavigationExpRule(), currentNode); }
	 iv_ruleSubNavigationExp=ruleSubNavigationExp 
	 { $current=$iv_ruleSubNavigationExp.current; } 
	 EOF 
;

// Rule SubNavigationExp
ruleSubNavigationExp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigationExpAccess().getRoundBracketExpParserRuleCall_0(), currentNode); 
    }
    this_RoundBracketExp_0=ruleRoundBracketExp
    { 
        $current = $this_RoundBracketExp_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigationExpAccess().getSquareBracketExpParserRuleCall_1(), currentNode); 
    }
    this_SquareBracketExp_1=ruleSquareBracketExp
    { 
        $current = $this_SquareBracketExp_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigationExpAccess().getSelfExpParserRuleCall_2(), currentNode); 
    }
    this_SelfExp_2=ruleSelfExp
    { 
        $current = $this_SelfExp_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigationExpAccess().getPrimitiveLiteralExpParserRuleCall_3(), currentNode); 
    }
    this_PrimitiveLiteralExp_3=rulePrimitiveLiteralExp
    { 
        $current = $this_PrimitiveLiteralExp_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigationExpAccess().getTupleLiteralExpParserRuleCall_4(), currentNode); 
    }
    this_TupleLiteralExp_4=ruleTupleLiteralExp
    { 
        $current = $this_TupleLiteralExp_4.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigationExpAccess().getCollectionLiteralExpParserRuleCall_5(), currentNode); 
    }
    this_CollectionLiteralExp_5=ruleCollectionLiteralExp
    { 
        $current = $this_CollectionLiteralExp_5.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigationExpAccess().getPreExpParserRuleCall_6(), currentNode); 
    }
    this_PreExp_6=rulePreExp
    { 
        $current = $this_PreExp_6.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigationExpAccess().getTypeExpParserRuleCall_7(), currentNode); 
    }
    this_TypeExp_7=ruleTypeExp
    { 
        $current = $this_TypeExp_7.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigationExpAccess().getIfExpParserRuleCall_8(), currentNode); 
    }
    this_IfExp_8=ruleIfExp
    { 
        $current = $this_IfExp_8.current; 
        currentNode = currentNode.getParent();
    }

    |(	otherlv_9='(' 
    {
    	createLeafNode(otherlv_9, grammarAccess.getSubNavigationExpAccess().getLeftParenthesisKeyword_9_0(), null);
    }
(
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getSubNavigationExpAccess().getNestedExpAction_9_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSubNavigationExpAccess().getNestedExpAction_9_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSubNavigationExpAccess().getSourceExpressionParserRuleCall_9_2_0(), currentNode); 
	    }
		lv_source_11_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubNavigationExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"source",
	        		lv_source_11_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_12=')' 
    {
    	createLeafNode(otherlv_12, grammarAccess.getSubNavigationExpAccess().getRightParenthesisKeyword_9_3(), null);
    }
))
;





// Entry rule entryRuleSubNavigatingExp
entryRuleSubNavigatingExp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSubNavigatingExpRule(), currentNode); }
	 iv_ruleSubNavigatingExp=ruleSubNavigatingExp 
	 { $current=$iv_ruleSubNavigatingExp.current; } 
	 EOF 
;

// Rule SubNavigatingExp
ruleSubNavigatingExp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigatingExpAccess().getRoundBracketExpParserRuleCall_0(), currentNode); 
    }
    this_RoundBracketExp_0=ruleRoundBracketExp
    { 
        $current = $this_RoundBracketExp_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigatingExpAccess().getSquareBracketExpParserRuleCall_1(), currentNode); 
    }
    this_SquareBracketExp_1=ruleSquareBracketExp
    { 
        $current = $this_SquareBracketExp_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigatingExpAccess().getPreExpParserRuleCall_2(), currentNode); 
    }
    this_PreExp_2=rulePreExp
    { 
        $current = $this_PreExp_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigatingExpAccess().getNameExpParserRuleCall_3(), currentNode); 
    }
    this_NameExp_3=ruleNameExp
    { 
        $current = $this_NameExp_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleiteratorVariable
entryRuleiteratorVariable returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIteratorVariableRule(), currentNode); }
	 iv_ruleiteratorVariable=ruleiteratorVariable 
	 { $current=$iv_ruleiteratorVariable.current; } 
	 EOF 
;

// Rule iteratorVariable
ruleiteratorVariable returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIteratorVariableAccess().getNameIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIteratorVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	otherlv_1=':' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getIteratorVariableAccess().getColonKeyword_1_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIteratorVariableAccess().getTypeTypeExpParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_type_2_0=ruleTypeExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIteratorVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"TypeExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleiteratorAccumulator
entryRuleiteratorAccumulator returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIteratorAccumulatorRule(), currentNode); }
	 iv_ruleiteratorAccumulator=ruleiteratorAccumulator 
	 { $current=$iv_ruleiteratorAccumulator.current; } 
	 EOF 
;

// Rule iteratorAccumulator
ruleiteratorAccumulator returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIteratorAccumulatorAccess().getNameIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIteratorAccumulatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_1=':' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getIteratorAccumulatorAccess().getColonKeyword_1(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIteratorAccumulatorAccess().getTypeTypeExpParserRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruleTypeExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIteratorAccumulatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"TypeExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_3='=' 
    {
    	createLeafNode(otherlv_3, grammarAccess.getIteratorAccumulatorAccess().getEqualsSignKeyword_3(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIteratorAccumulatorAccess().getInitExpressionExpressionParserRuleCall_4_0(), currentNode); 
	    }
		lv_initExpression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIteratorAccumulatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initExpression",
	        		lv_initExpression_4_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleRoundBracketExp
entryRuleRoundBracketExp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRoundBracketExpRule(), currentNode); }
	 iv_ruleRoundBracketExp=ruleRoundBracketExp 
	 { $current=$iv_ruleRoundBracketExp.current; } 
	 EOF 
;

// Rule RoundBracketExp
ruleRoundBracketExp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRoundBracketExpAccess().getNameNameExpParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleNameExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoundBracketExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"NameExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	otherlv_1='@' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getRoundBracketExpAccess().getCommercialAtKeyword_1_0(), null);
    }
(
(
		lv_pre_2_0=	'pre' 
    {
        createLeafNode(lv_pre_2_0, grammarAccess.getRoundBracketExpAccess().getPrePreKeyword_1_1_0(), "pre");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoundBracketExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "pre", true, "pre", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?	otherlv_3='(' 
    {
    	createLeafNode(otherlv_3, grammarAccess.getRoundBracketExpAccess().getLeftParenthesisKeyword_2(), null);
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRoundBracketExpAccess().getVariable1IteratorVariableParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_variable1_4_0=ruleiteratorVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoundBracketExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable1",
	        		lv_variable1_4_0, 
	        		"iteratorVariable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	otherlv_5=',' 
    {
    	createLeafNode(otherlv_5, grammarAccess.getRoundBracketExpAccess().getCommaKeyword_3_1_0_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRoundBracketExpAccess().getVariable2IteratorVariableParserRuleCall_3_1_0_1_0(), currentNode); 
	    }
		lv_variable2_6_0=ruleiteratorVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoundBracketExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable2",
	        		lv_variable2_6_0, 
	        		"iteratorVariable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	otherlv_7=';' 
    {
    	createLeafNode(otherlv_7, grammarAccess.getRoundBracketExpAccess().getSemicolonKeyword_3_1_1_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRoundBracketExpAccess().getVariable2IteratorAccumulatorParserRuleCall_3_1_1_1_0(), currentNode); 
	    }
		lv_variable2_8_0=ruleiteratorAccumulator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoundBracketExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable2",
	        		lv_variable2_8_0, 
	        		"iteratorAccumulator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?	otherlv_9='|' 
    {
    	createLeafNode(otherlv_9, grammarAccess.getRoundBracketExpAccess().getVerticalLineKeyword_3_2(), null);
    }
)?((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRoundBracketExpAccess().getArgumentsExpressionParserRuleCall_4_0_0(), currentNode); 
	    }
		lv_arguments_10_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoundBracketExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"arguments",
	        		lv_arguments_10_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	otherlv_11=',' 
    {
    	createLeafNode(otherlv_11, grammarAccess.getRoundBracketExpAccess().getCommaKeyword_4_1_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRoundBracketExpAccess().getArgumentsExpressionParserRuleCall_4_1_1_0(), currentNode); 
	    }
		lv_arguments_12_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoundBracketExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"arguments",
	        		lv_arguments_12_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	otherlv_13=')' 
    {
    	createLeafNode(otherlv_13, grammarAccess.getRoundBracketExpAccess().getRightParenthesisKeyword_5(), null);
    }
)
;





// Entry rule entryRuleSquareBracketExp
entryRuleSquareBracketExp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSquareBracketExpRule(), currentNode); }
	 iv_ruleSquareBracketExp=ruleSquareBracketExp 
	 { $current=$iv_ruleSquareBracketExp.current; } 
	 EOF 
;

// Rule SquareBracketExp
ruleSquareBracketExp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSquareBracketExpAccess().getNameNameExpParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleNameExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSquareBracketExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"NameExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_1='[' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getSquareBracketExpAccess().getLeftSquareBracketKeyword_1(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSquareBracketExpAccess().getArgumentsExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_arguments_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSquareBracketExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"arguments",
	        		lv_arguments_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	otherlv_3=',' 
    {
    	createLeafNode(otherlv_3, grammarAccess.getSquareBracketExpAccess().getCommaKeyword_3_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSquareBracketExpAccess().getArgumentsExpressionParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_arguments_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSquareBracketExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"arguments",
	        		lv_arguments_4_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	otherlv_5=']' 
    {
    	createLeafNode(otherlv_5, grammarAccess.getSquareBracketExpAccess().getRightSquareBracketKeyword_4(), null);
    }
(	otherlv_6='@' 
    {
    	createLeafNode(otherlv_6, grammarAccess.getSquareBracketExpAccess().getCommercialAtKeyword_5_0(), null);
    }
(
(
		lv_pre_7_0=	'pre' 
    {
        createLeafNode(lv_pre_7_0, grammarAccess.getSquareBracketExpAccess().getPrePreKeyword_5_1_0(), "pre");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSquareBracketExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "pre", true, "pre", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?)
;





// Entry rule entryRulePreExp
entryRulePreExp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPreExpRule(), currentNode); }
	 iv_rulePreExp=rulePreExp 
	 { $current=$iv_rulePreExp.current; } 
	 EOF 
;

// Rule PreExp
rulePreExp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPreExpAccess().getNameNameExpParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleNameExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"NameExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_1='@' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getPreExpAccess().getCommercialAtKeyword_1(), null);
    }
	otherlv_2='pre' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getPreExpAccess().getPreKeyword_2(), null);
    }
)
;





// Entry rule entryRuleSelfExp
entryRuleSelfExp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSelfExpRule(), currentNode); }
	 iv_ruleSelfExp=ruleSelfExp 
	 { $current=$iv_ruleSelfExp.current; } 
	 EOF 
;

// Rule SelfExp
ruleSelfExp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getSelfExpAccess().getSelfExpAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSelfExpAccess().getSelfExpAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	otherlv_1='self' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getSelfExpAccess().getSelfKeyword_1(), null);
    }
)
;





// Entry rule entryRuleNameExp
entryRuleNameExp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNameExpRule(), currentNode); }
	 iv_ruleNameExp=ruleNameExp 
	 { $current=$iv_ruleNameExp.current; } 
	 EOF 
;

// Rule NameExp
ruleNameExp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getNameExpAccess().getPathNameExpParserRuleCall_0(), currentNode); 
    }
    this_PathNameExp_0=rulePathNameExp
    { 
        $current = $this_PathNameExp_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getNameExpAccess().getSimpleNameExpParserRuleCall_1(), currentNode); 
    }
    this_SimpleNameExp_1=ruleSimpleNameExp
    { 
        $current = $this_SimpleNameExp_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulePathNameExp
entryRulePathNameExp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPathNameExpRule(), currentNode); }
	 iv_rulePathNameExp=rulePathNameExp 
	 { $current=$iv_rulePathNameExp.current; } 
	 EOF 
;

// Rule PathNameExp
rulePathNameExp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPathNameExpAccess().getNamespaceIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_namespace_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathNameExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"namespace",
	        		lv_namespace_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_1='::' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getPathNameExpAccess().getColonColonKeyword_1(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPathNameExpAccess().getElementNameExpParserRuleCall_2_0(), currentNode); 
	    }
		lv_element_2_0=ruleNameExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathNameExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"element",
	        		lv_element_2_0, 
	        		"NameExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleSimpleNameExp
entryRuleSimpleNameExp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimpleNameExpRule(), currentNode); }
	 iv_ruleSimpleNameExp=ruleSimpleNameExp 
	 { $current=$iv_ruleSimpleNameExp.current; } 
	 EOF 
;

// Rule SimpleNameExp
ruleSimpleNameExp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimpleNameExpAccess().getElementIdentifierParserRuleCall_0(), currentNode); 
	    }
		lv_element_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleNameExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"element",
	        		lv_element_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleIfExp
entryRuleIfExp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIfExpRule(), currentNode); }
	 iv_ruleIfExp=ruleIfExp 
	 { $current=$iv_ruleIfExp.current; } 
	 EOF 
;

// Rule IfExp
ruleIfExp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='if' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getIfExpAccess().getIfKeyword_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfExpAccess().getConditionExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_condition_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_1_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_2='then' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getIfExpAccess().getThenKeyword_2(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfExpAccess().getThenExpressionExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_thenExpression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"thenExpression",
	        		lv_thenExpression_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_4='else' 
    {
    	createLeafNode(otherlv_4, grammarAccess.getIfExpAccess().getElseKeyword_4(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfExpAccess().getElseExpressionExpressionParserRuleCall_5_0(), currentNode); 
	    }
		lv_elseExpression_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"elseExpression",
	        		lv_elseExpression_5_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_6='endif' 
    {
    	createLeafNode(otherlv_6, grammarAccess.getIfExpAccess().getEndifKeyword_6(), null);
    }
)
;





// Entry rule entryRuleLetExp
entryRuleLetExp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLetExpRule(), currentNode); }
	 iv_ruleLetExp=ruleLetExp 
	 { $current=$iv_ruleLetExp.current; } 
	 EOF 
;

// Rule LetExp
ruleLetExp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='let' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getLetExpAccess().getLetKeyword_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetExpAccess().getVariableLetVariableParserRuleCall_1_0(), currentNode); 
	    }
		lv_variable_1_0=ruleLetVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"variable",
	        		lv_variable_1_0, 
	        		"LetVariable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	otherlv_2=',' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getLetExpAccess().getCommaKeyword_2_0(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetExpAccess().getVariableLetVariableParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_variable_3_0=ruleLetVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"variable",
	        		lv_variable_3_0, 
	        		"LetVariable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	otherlv_4='in' 
    {
    	createLeafNode(otherlv_4, grammarAccess.getLetExpAccess().getInKeyword_3(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetExpAccess().getInExpressionParserRuleCall_4_0(), currentNode); 
	    }
		lv_in_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"in",
	        		lv_in_5_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleLetVariable
entryRuleLetVariable returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLetVariableRule(), currentNode); }
	 iv_ruleLetVariable=ruleLetVariable 
	 { $current=$iv_ruleLetVariable.current; } 
	 EOF 
;

// Rule LetVariable
ruleLetVariable returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetVariableAccess().getNameIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_1=':' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getLetVariableAccess().getColonKeyword_1(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetVariableAccess().getTypeTypeExpParserRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruleTypeExp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"TypeExp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	otherlv_3='=' 
    {
    	createLeafNode(otherlv_3, grammarAccess.getLetVariableAccess().getEqualsSignKeyword_3(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetVariableAccess().getInitExpressionExpressionParserRuleCall_4_0(), currentNode); 
	    }
		lv_initExpression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initExpression",
	        		lv_initExpression_4_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


