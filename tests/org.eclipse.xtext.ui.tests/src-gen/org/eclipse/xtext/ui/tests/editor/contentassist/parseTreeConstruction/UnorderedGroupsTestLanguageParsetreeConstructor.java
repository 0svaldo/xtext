/*
* generated by Xtext
*/
package org.eclipse.xtext.ui.tests.editor.contentassist.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.ui.tests.editor.contentassist.services.UnorderedGroupsTestLanguageGrammarAccess;

import com.google.inject.Inject;

public class UnorderedGroupsTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private UnorderedGroupsTestLanguageGrammarAccess grammarAccess;
	
	@Override	
	public UnorderedGroupsTestLanguageGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 *   (visibility=( "public" | "private" | "protected" )? & static?="static"? & synchronized?=
 *   "synchronized"? & (abstract?="abstract"|final?="final")?) "class" name=ID "{" "}";
 *
 **/

// (visibility=( "public" | "private" | "protected" )? & static?="static"? & synchronized?=
// "synchronized"? & (abstract?="abstract"|final?="final")?) "class" name=ID "{" "}"
protected class Model_Group extends GroupToken {
	
	public Model_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_RightCurlyBracketKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// visibility=( "public" | "private" | "protected" )? & static?="static"? & synchronized?=
// "synchronized"? & (abstract?="abstract"|final?="final")?
protected class Model_UnorderedGroup_0 extends UnorderedGroupToken {
	
	public Model_UnorderedGroup_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public UnorderedGroup getGrammarElement() {
		return grammarAccess.getModelAccess().getUnorderedGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Alternatives_0_3(parent, this, 0, inst);
			case 1: return new Model_SynchronizedAssignment_0_2(parent, this, 1, inst);
			case 2: return new Model_StaticAssignment_0_1(parent, this, 2, inst);
			case 3: return new Model_VisibilityAssignment_0_0(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// visibility=( "public" | "private" | "protected" )?
protected class Model_VisibilityAssignment_0_0 extends AssignmentToken  {
	
	public Model_VisibilityAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getVisibilityAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("visibility",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("visibility");
		if("public".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getModelAccess().getVisibilityPublicKeyword_0_0_0_0();
			return obj;
		}
		if("private".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getModelAccess().getVisibilityPrivateKeyword_0_0_0_1();
			return obj;
		}
		if("protected".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getModelAccess().getVisibilityProtectedKeyword_0_0_0_2();
			return obj;
		}
		return null;
	}

}

// static?="static"?
protected class Model_StaticAssignment_0_1 extends AssignmentToken  {
	
	public Model_StaticAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getStaticAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_VisibilityAssignment_0_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("static",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("static");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getModelAccess().getStaticStaticKeyword_0_1_0();
			return obj;
		}
		return null;
	}

}

// synchronized?="synchronized"?
protected class Model_SynchronizedAssignment_0_2 extends AssignmentToken  {
	
	public Model_SynchronizedAssignment_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getSynchronizedAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_StaticAssignment_0_1(parent, this, 0, inst);
			case 1: return new Model_VisibilityAssignment_0_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("synchronized",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("synchronized");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getModelAccess().getSynchronizedSynchronizedKeyword_0_2_0();
			return obj;
		}
		return null;
	}

}

// (abstract?="abstract"|final?="final")?
protected class Model_Alternatives_0_3 extends AlternativesToken {

	public Model_Alternatives_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getModelAccess().getAlternatives_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_AbstractAssignment_0_3_0(parent, this, 0, inst);
			case 1: return new Model_FinalAssignment_0_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// abstract?="abstract"
protected class Model_AbstractAssignment_0_3_0 extends AssignmentToken  {
	
	public Model_AbstractAssignment_0_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getAbstractAssignment_0_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_SynchronizedAssignment_0_2(parent, this, 0, inst);
			case 1: return new Model_StaticAssignment_0_1(parent, this, 1, inst);
			case 2: return new Model_VisibilityAssignment_0_0(parent, this, 2, inst);
			default: return parent.createParentFollower(this, index, index - 3, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("abstract",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("abstract");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getModelAccess().getAbstractAbstractKeyword_0_3_0_0();
			return obj;
		}
		return null;
	}

}

// final?="final"
protected class Model_FinalAssignment_0_3_1 extends AssignmentToken  {
	
	public Model_FinalAssignment_0_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getFinalAssignment_0_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_SynchronizedAssignment_0_2(parent, this, 0, inst);
			case 1: return new Model_StaticAssignment_0_1(parent, this, 1, inst);
			case 2: return new Model_VisibilityAssignment_0_0(parent, this, 2, inst);
			default: return parent.createParentFollower(this, index, index - 3, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("final",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("final");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getModelAccess().getFinalFinalKeyword_0_3_1_0();
			return obj;
		}
		return null;
	}

}



// "class"
protected class Model_ClassKeyword_1 extends KeywordToken  {
	
	public Model_ClassKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getClassKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_UnorderedGroup_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class Model_NameAssignment_2 extends AssignmentToken  {
	
	public Model_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_ClassKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class Model_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public Model_LeftCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "}"
protected class Model_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public Model_RightCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_LeftCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Model ****************/

}
