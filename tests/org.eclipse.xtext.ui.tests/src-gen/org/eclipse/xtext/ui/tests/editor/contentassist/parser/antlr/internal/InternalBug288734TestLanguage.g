/*
* generated by Xtext
*/
grammar InternalBug288734TestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.ui.tests.editor.contentassist.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.ui.tests.editor.contentassist.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.ui.tests.editor.contentassist.services.Bug288734TestLanguageGrammarAccess;

}

@parser::members {

 	private Bug288734TestLanguageGrammarAccess grammarAccess;
 	
    public InternalBug288734TestLanguageParser(TokenStream input, IAstFactory factory, Bug288734TestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected Bug288734TestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getConstantsTConstantParserRuleCall_0(), currentNode); 
	    }
		lv_constants_0_0=ruleTConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_0_0, 
        		"TConstant", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleTConstant
entryRuleTConstant returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTConstantRule(), currentNode); }
	 iv_ruleTConstant=ruleTConstant 
	 { $current=$iv_ruleTConstant.current; } 
	 EOF 
;

// Rule TConstant
ruleTConstant returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTConstantAccess().getTStringConstantParserRuleCall_0(), currentNode); 
    }
    this_TStringConstant_0=ruleTStringConstant
    { 
        $current = $this_TStringConstant_0.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTConstantAccess().getTIntegerConstantParserRuleCall_1(), currentNode); 
    }
    this_TIntegerConstant_1=ruleTIntegerConstant
    { 
        $current = $this_TIntegerConstant_1.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTConstantAccess().getTBooleanConstantParserRuleCall_2(), currentNode); 
    }
    this_TBooleanConstant_2=ruleTBooleanConstant
    { 
        $current = $this_TBooleanConstant_2.current; 
        // currentNode = currentNode.getParent();
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTStringConstant
entryRuleTStringConstant returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTStringConstantRule(), currentNode); }
	 iv_ruleTStringConstant=ruleTStringConstant 
	 { $current=$iv_ruleTStringConstant.current; } 
	 EOF 
;

// Rule TStringConstant
ruleTStringConstant returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTStringConstantAccess().getAnnotationsTAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleTAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTStringConstantRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"TAnnotation", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='constant' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getTStringConstantAccess().getConstantKeyword_1(), null);
    }
	otherlv_2='string' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getTStringConstantAccess().getStringKeyword_2(), null);
    }
(
(
		lv_name_3_0=RULE_ID
		{
			createLeafNode(lv_name_3_0, grammarAccess.getTStringConstantAccess().getNameIDTerminalRuleCall_3_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTStringConstantRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID", 
        		lastConsumedNode);
	    }

)
))
;





// Entry rule entryRuleTIntegerConstant
entryRuleTIntegerConstant returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTIntegerConstantRule(), currentNode); }
	 iv_ruleTIntegerConstant=ruleTIntegerConstant 
	 { $current=$iv_ruleTIntegerConstant.current; } 
	 EOF 
;

// Rule TIntegerConstant
ruleTIntegerConstant returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTIntegerConstantAccess().getAnnotationsTAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleTAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTIntegerConstantRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"TAnnotation", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='constant' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getTIntegerConstantAccess().getConstantKeyword_1(), null);
    }
	otherlv_2='integer' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getTIntegerConstantAccess().getIntegerKeyword_2(), null);
    }
(
(
		lv_name_3_0=RULE_ID
		{
			createLeafNode(lv_name_3_0, grammarAccess.getTIntegerConstantAccess().getNameIDTerminalRuleCall_3_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTIntegerConstantRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID", 
        		lastConsumedNode);
	    }

)
))
;





// Entry rule entryRuleTBooleanConstant
entryRuleTBooleanConstant returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTBooleanConstantRule(), currentNode); }
	 iv_ruleTBooleanConstant=ruleTBooleanConstant 
	 { $current=$iv_ruleTBooleanConstant.current; } 
	 EOF 
;

// Rule TBooleanConstant
ruleTBooleanConstant returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTBooleanConstantAccess().getAnnotationsTAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleTAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTBooleanConstantRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"TAnnotation", 
        		currentNode);
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='constant' 
    {
    	createLeafNode(otherlv_1, grammarAccess.getTBooleanConstantAccess().getConstantKeyword_1(), null);
    }
	otherlv_2='boolean' 
    {
    	createLeafNode(otherlv_2, grammarAccess.getTBooleanConstantAccess().getBooleanKeyword_2(), null);
    }
(
(
		lv_name_3_0=RULE_ID
		{
			createLeafNode(lv_name_3_0, grammarAccess.getTBooleanConstantAccess().getNameIDTerminalRuleCall_3_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTBooleanConstantRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID", 
        		lastConsumedNode);
	    }

)
))
;





// Entry rule entryRuleTAnnotation
entryRuleTAnnotation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTAnnotationRule(), currentNode); }
	 iv_ruleTAnnotation=ruleTAnnotation 
	 { $current=$iv_ruleTAnnotation.current; } 
	 EOF 
;

// Rule TAnnotation
ruleTAnnotation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	otherlv_0='@desc' 
    {
    	createLeafNode(otherlv_0, grammarAccess.getTAnnotationAccess().getDescKeyword_0(), null);
    }
(
(
		lv_description_1_0=RULE_STRING
		{
			createLeafNode(lv_description_1_0, grammarAccess.getTAnnotationAccess().getDescriptionSTRINGTerminalRuleCall_1_0(), "description"); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTAnnotationRule());
	        }
       		set(
       			$current, 
       			"description",
        		lv_description_1_0, 
        		"STRING", 
        		lastConsumedNode);
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


