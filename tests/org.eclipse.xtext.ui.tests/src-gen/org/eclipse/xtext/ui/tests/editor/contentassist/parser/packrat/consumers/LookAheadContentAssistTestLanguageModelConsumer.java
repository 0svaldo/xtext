/*
* generated by Xtext
*/
package org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;

import org.eclipse.xtext.ui.tests.editor.contentassist.services.LookAheadContentAssistTestLanguageGrammarAccess.ModelElements;

public final class LookAheadContentAssistTestLanguageModelConsumer extends NonTerminalConsumer {

	private ModelElements rule;	

	private INonTerminalConsumer attributeConsumer;

	private INonTerminalConsumer pairConsumer;

	private IElementConsumer alternatives$1$Consumer;

	private IElementConsumer group$2$Consumer;

	private IElementConsumer keyword$3$Consumer;

	private IElementConsumer assignment$4$Consumer;

	private IElementConsumer ruleCall$5$Consumer;

	private IElementConsumer assignment$6$Consumer;

	private IElementConsumer ruleCall$7$Consumer;

	private IElementConsumer keyword$8$Consumer;

	private IElementConsumer group$9$Consumer;

	private IElementConsumer keyword$10$Consumer;

	private IElementConsumer assignment$11$Consumer;

	private IElementConsumer ruleCall$12$Consumer;

	private IElementConsumer assignment$13$Consumer;

	private IElementConsumer ruleCall$14$Consumer;

	private IElementConsumer keyword$15$Consumer;

	private IElementConsumer group$16$Consumer;

	private IElementConsumer keyword$17$Consumer;

	private IElementConsumer assignment$18$Consumer;

	private IElementConsumer ruleCall$19$Consumer;

	private IElementConsumer assignment$20$Consumer;

	private IElementConsumer ruleCall$21$Consumer;

	private IElementConsumer keyword$22$Consumer;

	private IElementConsumer group$23$Consumer;

	private IElementConsumer keyword$24$Consumer;

	private IElementConsumer assignment$25$Consumer;

	private IElementConsumer ruleCall$26$Consumer;

	private IElementConsumer assignment$27$Consumer;

	private IElementConsumer ruleCall$28$Consumer;

	private IElementConsumer keyword$29$Consumer;

	private ICharacterClass keyword$8$Delimiter;

	private ICharacterClass keyword$10$Delimiter;

	private ICharacterClass keyword$15$Delimiter;

	private ICharacterClass keyword$17$Delimiter;

	private ICharacterClass keyword$22$Delimiter;

	private ICharacterClass keyword$24$Delimiter;

	private ICharacterClass keyword$29$Delimiter;

	private ICharacterClass keyword$3$Delimiter;

	protected class Alternatives$1$Consumer extends AlternativesConsumer {
		
		protected Alternatives$1$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$2$Consumer);
			acceptor.accept(group$9$Consumer);
			acceptor.accept(group$16$Consumer);
			acceptor.accept(group$23$Consumer);
		}
	}

	protected class Group$2$Consumer extends GroupConsumer {
		
		protected Group$2$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$3$Consumer);
			acceptor.accept(assignment$4$Consumer);
			acceptor.accept(assignment$6$Consumer);
			acceptor.accept(keyword$8$Consumer);
		}
	}

	protected class Keyword$3$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$3$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$3$Delimiter(), optional);
		}
	}

	protected class Assignment$4$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$4$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$5$Consumer;
		}
	}

	protected class RuleCall$5$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$5$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(attributeConsumer, "attribute", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$6$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$6$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$7$Consumer;
		}
	}

	protected class RuleCall$7$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$7$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(pairConsumer, "attribute", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$8$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$8$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$8$Delimiter(), optional);
		}
	}

	protected class Group$9$Consumer extends GroupConsumer {
		
		protected Group$9$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$10$Consumer);
			acceptor.accept(assignment$11$Consumer);
			acceptor.accept(assignment$13$Consumer);
			acceptor.accept(keyword$15$Consumer);
		}
	}

	protected class Keyword$10$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$10$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$10$Delimiter(), optional);
		}
	}

	protected class Assignment$11$Consumer extends MandatoryLoopAssignmentConsumer {
		
		protected Assignment$11$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$12$Consumer;
		}
	}

	protected class RuleCall$12$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$12$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(attributeConsumer, "attribute", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$13$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$13$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$14$Consumer;
		}
	}

	protected class RuleCall$14$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$14$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(pairConsumer, "attribute", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$15$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$15$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$15$Delimiter(), optional);
		}
	}

	protected class Group$16$Consumer extends GroupConsumer {
		
		protected Group$16$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$17$Consumer);
			acceptor.accept(assignment$18$Consumer);
			acceptor.accept(assignment$20$Consumer);
			acceptor.accept(keyword$22$Consumer);
		}
	}

	protected class Keyword$17$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$17$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$17$Delimiter(), optional);
		}
	}

	protected class Assignment$18$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$18$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$19$Consumer;
		}
	}

	protected class RuleCall$19$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$19$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(attributeConsumer, "attribute", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$20$Consumer extends MandatoryLoopAssignmentConsumer {
		
		protected Assignment$20$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$21$Consumer;
		}
	}

	protected class RuleCall$21$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$21$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(pairConsumer, "attribute", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$22$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$22$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$22$Delimiter(), optional);
		}
	}

	protected class Group$23$Consumer extends GroupConsumer {
		
		protected Group$23$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$24$Consumer);
			acceptor.accept(assignment$25$Consumer);
			acceptor.accept(assignment$27$Consumer);
			acceptor.accept(keyword$29$Consumer);
		}
	}

	protected class Keyword$24$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$24$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$24$Delimiter(), optional);
		}
	}

	protected class Assignment$25$Consumer extends MandatoryLoopAssignmentConsumer {
		
		protected Assignment$25$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$26$Consumer;
		}
	}

	protected class RuleCall$26$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$26$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(attributeConsumer, "attribute", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$27$Consumer extends MandatoryLoopAssignmentConsumer {
		
		protected Assignment$27$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$28$Consumer;
		}
	}

	protected class RuleCall$28$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$28$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(pairConsumer, "attribute", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$29$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$29$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$29$Delimiter(), optional);
		}
	}

	public LookAheadContentAssistTestLanguageModelConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$8$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$10$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$15$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$17$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$22$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$24$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$29$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$3$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return alternatives$1$Consumer.consume();
	}

	public ModelElements getRule() {
		return rule;
	}
	
	public void setRule(ModelElements rule) {
		this.rule = rule;
		
		alternatives$1$Consumer = new Alternatives$1$Consumer(rule.getAlternatives());
		group$2$Consumer = new Group$2$Consumer(rule.getGroup_0());
		keyword$3$Consumer = new Keyword$3$Consumer(rule.getLeftParenthesisKeyword_0_0());
		assignment$4$Consumer = new Assignment$4$Consumer(rule.getAttributeAssignment_0_1());
		ruleCall$5$Consumer = new RuleCall$5$Consumer(rule.getAttributeAttributeParserRuleCall_0_1_0());
		assignment$6$Consumer = new Assignment$6$Consumer(rule.getAttributeAssignment_0_2());
		ruleCall$7$Consumer = new RuleCall$7$Consumer(rule.getAttributePairParserRuleCall_0_2_0());
		keyword$8$Consumer = new Keyword$8$Consumer(rule.getRightParenthesisKeyword_0_3());
		group$9$Consumer = new Group$9$Consumer(rule.getGroup_1());
		keyword$10$Consumer = new Keyword$10$Consumer(rule.getLeftSquareBracketKeyword_1_0());
		assignment$11$Consumer = new Assignment$11$Consumer(rule.getAttributeAssignment_1_1());
		ruleCall$12$Consumer = new RuleCall$12$Consumer(rule.getAttributeAttributeParserRuleCall_1_1_0());
		assignment$13$Consumer = new Assignment$13$Consumer(rule.getAttributeAssignment_1_2());
		ruleCall$14$Consumer = new RuleCall$14$Consumer(rule.getAttributePairParserRuleCall_1_2_0());
		keyword$15$Consumer = new Keyword$15$Consumer(rule.getRightSquareBracketKeyword_1_3());
		group$16$Consumer = new Group$16$Consumer(rule.getGroup_2());
		keyword$17$Consumer = new Keyword$17$Consumer(rule.getLessThanSignKeyword_2_0());
		assignment$18$Consumer = new Assignment$18$Consumer(rule.getAttributeAssignment_2_1());
		ruleCall$19$Consumer = new RuleCall$19$Consumer(rule.getAttributeAttributeParserRuleCall_2_1_0());
		assignment$20$Consumer = new Assignment$20$Consumer(rule.getAttributeAssignment_2_2());
		ruleCall$21$Consumer = new RuleCall$21$Consumer(rule.getAttributePairParserRuleCall_2_2_0());
		keyword$22$Consumer = new Keyword$22$Consumer(rule.getGreaterThanSignKeyword_2_3());
		group$23$Consumer = new Group$23$Consumer(rule.getGroup_3());
		keyword$24$Consumer = new Keyword$24$Consumer(rule.getLeftCurlyBracketKeyword_3_0());
		assignment$25$Consumer = new Assignment$25$Consumer(rule.getAttributeAssignment_3_1());
		ruleCall$26$Consumer = new RuleCall$26$Consumer(rule.getAttributeAttributeParserRuleCall_3_1_0());
		assignment$27$Consumer = new Assignment$27$Consumer(rule.getAttributeAssignment_3_2());
		ruleCall$28$Consumer = new RuleCall$28$Consumer(rule.getAttributePairParserRuleCall_3_2_0());
		keyword$29$Consumer = new Keyword$29$Consumer(rule.getRightCurlyBracketKeyword_3_3());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setAttributeConsumer(INonTerminalConsumer attributeConsumer) {
		this.attributeConsumer = attributeConsumer;
	}
	
	public void setPairConsumer(INonTerminalConsumer pairConsumer) {
		this.pairConsumer = pairConsumer;
	}
	
	public ICharacterClass getKeyword$8$Delimiter() {
		return keyword$8$Delimiter;
	}
	
	public void setKeyword$8$Delimiter(ICharacterClass characterClass) {
		keyword$8$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$10$Delimiter() {
		return keyword$10$Delimiter;
	}
	
	public void setKeyword$10$Delimiter(ICharacterClass characterClass) {
		keyword$10$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$15$Delimiter() {
		return keyword$15$Delimiter;
	}
	
	public void setKeyword$15$Delimiter(ICharacterClass characterClass) {
		keyword$15$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$17$Delimiter() {
		return keyword$17$Delimiter;
	}
	
	public void setKeyword$17$Delimiter(ICharacterClass characterClass) {
		keyword$17$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$22$Delimiter() {
		return keyword$22$Delimiter;
	}
	
	public void setKeyword$22$Delimiter(ICharacterClass characterClass) {
		keyword$22$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$24$Delimiter() {
		return keyword$24$Delimiter;
	}
	
	public void setKeyword$24$Delimiter(ICharacterClass characterClass) {
		keyword$24$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$29$Delimiter() {
		return keyword$29$Delimiter;
	}
	
	public void setKeyword$29$Delimiter(ICharacterClass characterClass) {
		keyword$29$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$3$Delimiter() {
		return keyword$3$Delimiter;
	}
	
	public void setKeyword$3$Delimiter(ICharacterClass characterClass) {
		keyword$3$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
