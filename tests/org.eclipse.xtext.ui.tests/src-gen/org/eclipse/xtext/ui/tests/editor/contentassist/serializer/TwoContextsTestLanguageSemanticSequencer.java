/*
 * generated by Xtext
 */
package org.eclipse.xtext.ui.tests.editor.contentassist.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.ui.tests.editor.contentassist.services.TwoContextsTestLanguageGrammarAccess;
import org.eclipse.xtext.ui.tests.editor.contentassist.twoContexts.AnElement;
import org.eclipse.xtext.ui.tests.editor.contentassist.twoContexts.MainModel;
import org.eclipse.xtext.ui.tests.editor.contentassist.twoContexts.TwoContextsPackage;

@SuppressWarnings("all")
public class TwoContextsTestLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TwoContextsTestLanguageGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == TwoContextsPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case TwoContextsPackage.AN_ELEMENT:
				sequence_AnElement(context, (AnElement) semanticObject); 
				return; 
			case TwoContextsPackage.MAIN_MODEL:
				sequence_MainModel(context, (MainModel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (name=ID referred=[AnElement|ID]?)
	 */
	protected void sequence_AnElement(EObject context, AnElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     elements+=AnElement*
	 */
	protected void sequence_MainModel(EObject context, MainModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
