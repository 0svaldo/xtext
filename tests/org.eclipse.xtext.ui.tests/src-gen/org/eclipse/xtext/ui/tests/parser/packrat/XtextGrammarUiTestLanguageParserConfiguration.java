/*
* generated by Xtext
*/
package org.eclipse.xtext.ui.tests.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.ui.tests.services.XtextGrammarUiTestLanguageGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageGrammarConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageGrammarIDConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageAbstractRuleConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageAbstractMetamodelDeclarationConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageGeneratedMetamodelConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageReferencedMetamodelConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageParserRuleConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageTypeRefConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageAlternativesConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageGroupConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageAbstractTokenConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageAbstractTokenWithCardinalityConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageActionConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageAbstractTerminalConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageKeywordConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageRuleCallConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageAssignmentConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageAssignableTerminalConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageParenthesizedAssignableElementConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageAssignableAlternativesConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageCrossReferenceConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageCrossReferenceableTerminalConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageParenthesizedCrossReferenceableElementConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageCrossReferenceableAlternativesConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageParenthesizedElementConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageTerminalRuleConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageTerminalAlternativesConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageTerminalGroupConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageTerminalTokenConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageTerminalTokenElementConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageParenthesizedTerminalElementConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageAbstractNegatedTokenConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageNegatedTokenConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageUntilTokenConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageWildcardConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageCharacterRangeConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageEnumRuleConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageEnumLiteralsConsumer;
import org.eclipse.xtext.ui.tests.parser.packrat.consumers.XtextGrammarUiTestLanguageEnumLiteralDeclarationConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class XtextGrammarUiTestLanguageParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 
    private XtextGrammarUiTestLanguageGrammarConsumer grammarConsumer;
    private XtextGrammarUiTestLanguageGrammarIDConsumer grammarIdConsumer;
    private XtextGrammarUiTestLanguageAbstractRuleConsumer abstractRuleConsumer;
    private XtextGrammarUiTestLanguageAbstractMetamodelDeclarationConsumer abstractMetamodelDeclarationConsumer;
    private XtextGrammarUiTestLanguageGeneratedMetamodelConsumer generatedMetamodelConsumer;
    private XtextGrammarUiTestLanguageReferencedMetamodelConsumer referencedMetamodelConsumer;
    private XtextGrammarUiTestLanguageParserRuleConsumer parserRuleConsumer;
    private XtextGrammarUiTestLanguageTypeRefConsumer typeRefConsumer;
    private XtextGrammarUiTestLanguageAlternativesConsumer alternativesConsumer;
    private XtextGrammarUiTestLanguageGroupConsumer groupConsumer;
    private XtextGrammarUiTestLanguageAbstractTokenConsumer abstractTokenConsumer;
    private XtextGrammarUiTestLanguageAbstractTokenWithCardinalityConsumer abstractTokenWithCardinalityConsumer;
    private XtextGrammarUiTestLanguageActionConsumer actionConsumer;
    private XtextGrammarUiTestLanguageAbstractTerminalConsumer abstractTerminalConsumer;
    private XtextGrammarUiTestLanguageKeywordConsumer keywordConsumer;
    private XtextGrammarUiTestLanguageRuleCallConsumer ruleCallConsumer;
    private XtextGrammarUiTestLanguageAssignmentConsumer assignmentConsumer;
    private XtextGrammarUiTestLanguageAssignableTerminalConsumer assignableTerminalConsumer;
    private XtextGrammarUiTestLanguageParenthesizedAssignableElementConsumer parenthesizedAssignableElementConsumer;
    private XtextGrammarUiTestLanguageAssignableAlternativesConsumer assignableAlternativesConsumer;
    private XtextGrammarUiTestLanguageCrossReferenceConsumer crossReferenceConsumer;
    private XtextGrammarUiTestLanguageCrossReferenceableTerminalConsumer crossReferenceableTerminalConsumer;
    private XtextGrammarUiTestLanguageParenthesizedCrossReferenceableElementConsumer parenthesizedCrossReferenceableElementConsumer;
    private XtextGrammarUiTestLanguageCrossReferenceableAlternativesConsumer crossReferenceableAlternativesConsumer;
    private XtextGrammarUiTestLanguageParenthesizedElementConsumer parenthesizedElementConsumer;
    private XtextGrammarUiTestLanguageTerminalRuleConsumer terminalRuleConsumer;
    private XtextGrammarUiTestLanguageTerminalAlternativesConsumer terminalAlternativesConsumer;
    private XtextGrammarUiTestLanguageTerminalGroupConsumer terminalGroupConsumer;
    private XtextGrammarUiTestLanguageTerminalTokenConsumer terminalTokenConsumer;
    private XtextGrammarUiTestLanguageTerminalTokenElementConsumer terminalTokenElementConsumer;
    private XtextGrammarUiTestLanguageParenthesizedTerminalElementConsumer parenthesizedTerminalElementConsumer;
    private XtextGrammarUiTestLanguageAbstractNegatedTokenConsumer abstractNegatedTokenConsumer;
    private XtextGrammarUiTestLanguageNegatedTokenConsumer negatedTokenConsumer;
    private XtextGrammarUiTestLanguageUntilTokenConsumer untilTokenConsumer;
    private XtextGrammarUiTestLanguageWildcardConsumer wildcardConsumer;
    private XtextGrammarUiTestLanguageCharacterRangeConsumer characterRangeConsumer;
    private XtextGrammarUiTestLanguageEnumRuleConsumer enumRuleConsumer;
    private XtextGrammarUiTestLanguageEnumLiteralsConsumer enumLiteralsConsumer;
    private XtextGrammarUiTestLanguageEnumLiteralDeclarationConsumer enumLiteralDeclarationConsumer;

	private XtextGrammarUiTestLanguageGrammarAccess grammarAccess;

	public XtextGrammarUiTestLanguageParserConfiguration(IInternalParserConfiguration configuration, XtextGrammarUiTestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public XtextGrammarUiTestLanguageGrammarConsumer getRootConsumer() {
		return grammarConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		grammarConsumer = new XtextGrammarUiTestLanguageGrammarConsumer(
    		this, null
    	);
		grammarIdConsumer = new XtextGrammarUiTestLanguageGrammarIDConsumer(
    		this, null
    	);
		abstractRuleConsumer = new XtextGrammarUiTestLanguageAbstractRuleConsumer(
    		this, null
    	);
		abstractMetamodelDeclarationConsumer = new XtextGrammarUiTestLanguageAbstractMetamodelDeclarationConsumer(
    		this, null
    	);
		generatedMetamodelConsumer = new XtextGrammarUiTestLanguageGeneratedMetamodelConsumer(
    		this, null
    	);
		referencedMetamodelConsumer = new XtextGrammarUiTestLanguageReferencedMetamodelConsumer(
    		this, null
    	);
		parserRuleConsumer = new XtextGrammarUiTestLanguageParserRuleConsumer(
    		this, null
    	);
		typeRefConsumer = new XtextGrammarUiTestLanguageTypeRefConsumer(
    		this, null
    	);
		alternativesConsumer = new XtextGrammarUiTestLanguageAlternativesConsumer(
    		this, null
    	);
		groupConsumer = new XtextGrammarUiTestLanguageGroupConsumer(
    		this, null
    	);
		abstractTokenConsumer = new XtextGrammarUiTestLanguageAbstractTokenConsumer(
    		this, null
    	);
		abstractTokenWithCardinalityConsumer = new XtextGrammarUiTestLanguageAbstractTokenWithCardinalityConsumer(
    		this, null
    	);
		actionConsumer = new XtextGrammarUiTestLanguageActionConsumer(
    		this, null
    	);
		abstractTerminalConsumer = new XtextGrammarUiTestLanguageAbstractTerminalConsumer(
    		this, null
    	);
		keywordConsumer = new XtextGrammarUiTestLanguageKeywordConsumer(
    		this, null
    	);
		ruleCallConsumer = new XtextGrammarUiTestLanguageRuleCallConsumer(
    		this, null
    	);
		assignmentConsumer = new XtextGrammarUiTestLanguageAssignmentConsumer(
    		this, null
    	);
		assignableTerminalConsumer = new XtextGrammarUiTestLanguageAssignableTerminalConsumer(
    		this, null
    	);
		parenthesizedAssignableElementConsumer = new XtextGrammarUiTestLanguageParenthesizedAssignableElementConsumer(
    		this, null
    	);
		assignableAlternativesConsumer = new XtextGrammarUiTestLanguageAssignableAlternativesConsumer(
    		this, null
    	);
		crossReferenceConsumer = new XtextGrammarUiTestLanguageCrossReferenceConsumer(
    		this, null
    	);
		crossReferenceableTerminalConsumer = new XtextGrammarUiTestLanguageCrossReferenceableTerminalConsumer(
    		this, null
    	);
		parenthesizedCrossReferenceableElementConsumer = new XtextGrammarUiTestLanguageParenthesizedCrossReferenceableElementConsumer(
    		this, null
    	);
		crossReferenceableAlternativesConsumer = new XtextGrammarUiTestLanguageCrossReferenceableAlternativesConsumer(
    		this, null
    	);
		parenthesizedElementConsumer = new XtextGrammarUiTestLanguageParenthesizedElementConsumer(
    		this, null
    	);
		terminalRuleConsumer = new XtextGrammarUiTestLanguageTerminalRuleConsumer(
    		this, null
    	);
		terminalAlternativesConsumer = new XtextGrammarUiTestLanguageTerminalAlternativesConsumer(
    		this, null
    	);
		terminalGroupConsumer = new XtextGrammarUiTestLanguageTerminalGroupConsumer(
    		this, null
    	);
		terminalTokenConsumer = new XtextGrammarUiTestLanguageTerminalTokenConsumer(
    		this, null
    	);
		terminalTokenElementConsumer = new XtextGrammarUiTestLanguageTerminalTokenElementConsumer(
    		this, null
    	);
		parenthesizedTerminalElementConsumer = new XtextGrammarUiTestLanguageParenthesizedTerminalElementConsumer(
    		this, null
    	);
		abstractNegatedTokenConsumer = new XtextGrammarUiTestLanguageAbstractNegatedTokenConsumer(
    		this, null
    	);
		negatedTokenConsumer = new XtextGrammarUiTestLanguageNegatedTokenConsumer(
    		this, null
    	);
		untilTokenConsumer = new XtextGrammarUiTestLanguageUntilTokenConsumer(
    		this, null
    	);
		wildcardConsumer = new XtextGrammarUiTestLanguageWildcardConsumer(
    		this, null
    	);
		characterRangeConsumer = new XtextGrammarUiTestLanguageCharacterRangeConsumer(
    		this, null
    	);
		enumRuleConsumer = new XtextGrammarUiTestLanguageEnumRuleConsumer(
    		this, null
    	);
		enumLiteralsConsumer = new XtextGrammarUiTestLanguageEnumLiteralsConsumer(
    		this, null
    	);
		enumLiteralDeclarationConsumer = new XtextGrammarUiTestLanguageEnumLiteralDeclarationConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getGrammarConsumer().setRule(grammarAccess.getGrammarAccess());
		getGrammarIdConsumer().setRule(grammarAccess.getGrammarIDAccess());
		getAbstractRuleConsumer().setRule(grammarAccess.getAbstractRuleAccess());
		getAbstractMetamodelDeclarationConsumer().setRule(grammarAccess.getAbstractMetamodelDeclarationAccess());
		getGeneratedMetamodelConsumer().setRule(grammarAccess.getGeneratedMetamodelAccess());
		getReferencedMetamodelConsumer().setRule(grammarAccess.getReferencedMetamodelAccess());
		getParserRuleConsumer().setRule(grammarAccess.getParserRuleAccess());
		getTypeRefConsumer().setRule(grammarAccess.getTypeRefAccess());
		getAlternativesConsumer().setRule(grammarAccess.getAlternativesAccess());
		getGroupConsumer().setRule(grammarAccess.getGroupAccess());
		getAbstractTokenConsumer().setRule(grammarAccess.getAbstractTokenAccess());
		getAbstractTokenWithCardinalityConsumer().setRule(grammarAccess.getAbstractTokenWithCardinalityAccess());
		getActionConsumer().setRule(grammarAccess.getActionAccess());
		getAbstractTerminalConsumer().setRule(grammarAccess.getAbstractTerminalAccess());
		getKeywordConsumer().setRule(grammarAccess.getKeywordAccess());
		getRuleCallConsumer().setRule(grammarAccess.getRuleCallAccess());
		getAssignmentConsumer().setRule(grammarAccess.getAssignmentAccess());
		getAssignableTerminalConsumer().setRule(grammarAccess.getAssignableTerminalAccess());
		getParenthesizedAssignableElementConsumer().setRule(grammarAccess.getParenthesizedAssignableElementAccess());
		getAssignableAlternativesConsumer().setRule(grammarAccess.getAssignableAlternativesAccess());
		getCrossReferenceConsumer().setRule(grammarAccess.getCrossReferenceAccess());
		getCrossReferenceableTerminalConsumer().setRule(grammarAccess.getCrossReferenceableTerminalAccess());
		getParenthesizedCrossReferenceableElementConsumer().setRule(grammarAccess.getParenthesizedCrossReferenceableElementAccess());
		getCrossReferenceableAlternativesConsumer().setRule(grammarAccess.getCrossReferenceableAlternativesAccess());
		getParenthesizedElementConsumer().setRule(grammarAccess.getParenthesizedElementAccess());
		getTerminalRuleConsumer().setRule(grammarAccess.getTerminalRuleAccess());
		getTerminalAlternativesConsumer().setRule(grammarAccess.getTerminalAlternativesAccess());
		getTerminalGroupConsumer().setRule(grammarAccess.getTerminalGroupAccess());
		getTerminalTokenConsumer().setRule(grammarAccess.getTerminalTokenAccess());
		getTerminalTokenElementConsumer().setRule(grammarAccess.getTerminalTokenElementAccess());
		getParenthesizedTerminalElementConsumer().setRule(grammarAccess.getParenthesizedTerminalElementAccess());
		getAbstractNegatedTokenConsumer().setRule(grammarAccess.getAbstractNegatedTokenAccess());
		getNegatedTokenConsumer().setRule(grammarAccess.getNegatedTokenAccess());
		getUntilTokenConsumer().setRule(grammarAccess.getUntilTokenAccess());
		getWildcardConsumer().setRule(grammarAccess.getWildcardAccess());
		getCharacterRangeConsumer().setRule(grammarAccess.getCharacterRangeAccess());
		getEnumRuleConsumer().setRule(grammarAccess.getEnumRuleAccess());
		getEnumLiteralsConsumer().setRule(grammarAccess.getEnumLiteralsAccess());
		getEnumLiteralDeclarationConsumer().setRule(grammarAccess.getEnumLiteralDeclarationAccess());
		getIdConsumer().setRule(grammarAccess.getIDRule());
		getIntConsumer().setRule(grammarAccess.getINTRule());
		getStringConsumer().setRule(grammarAccess.getSTRINGRule());
		getMlCommentConsumer().setRule(grammarAccess.getML_COMMENTRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getAnyOtherConsumer().setRule(grammarAccess.getANY_OTHERRule());


		getGrammarConsumer().setAbstractMetamodelDeclarationConsumer(getAbstractMetamodelDeclarationConsumer());
		getGrammarConsumer().setAbstractRuleConsumer(getAbstractRuleConsumer());
		getGrammarConsumer().setGrammarIdConsumer(getGrammarIdConsumer());
		getGrammarConsumer().setIdConsumer(getIdConsumer());

		getGrammarIdConsumer().setIdConsumer(getIdConsumer());

		getAbstractRuleConsumer().setEnumRuleConsumer(getEnumRuleConsumer());
		getAbstractRuleConsumer().setParserRuleConsumer(getParserRuleConsumer());
		getAbstractRuleConsumer().setTerminalRuleConsumer(getTerminalRuleConsumer());

		getAbstractMetamodelDeclarationConsumer().setGeneratedMetamodelConsumer(getGeneratedMetamodelConsumer());
		getAbstractMetamodelDeclarationConsumer().setReferencedMetamodelConsumer(getReferencedMetamodelConsumer());

		getGeneratedMetamodelConsumer().setIdConsumer(getIdConsumer());
		getGeneratedMetamodelConsumer().setStringConsumer(getStringConsumer());

		getReferencedMetamodelConsumer().setIdConsumer(getIdConsumer());
		getReferencedMetamodelConsumer().setStringConsumer(getStringConsumer());

		getParserRuleConsumer().setAlternativesConsumer(getAlternativesConsumer());
		getParserRuleConsumer().setIdConsumer(getIdConsumer());
		getParserRuleConsumer().setTypeRefConsumer(getTypeRefConsumer());

		getTypeRefConsumer().setIdConsumer(getIdConsumer());

		getAlternativesConsumer().setGroupConsumer(getGroupConsumer());

		getGroupConsumer().setAbstractTokenConsumer(getAbstractTokenConsumer());

		getAbstractTokenConsumer().setAbstractTokenWithCardinalityConsumer(getAbstractTokenWithCardinalityConsumer());
		getAbstractTokenConsumer().setActionConsumer(getActionConsumer());

		getAbstractTokenWithCardinalityConsumer().setAbstractTerminalConsumer(getAbstractTerminalConsumer());
		getAbstractTokenWithCardinalityConsumer().setAssignmentConsumer(getAssignmentConsumer());

		getActionConsumer().setIdConsumer(getIdConsumer());
		getActionConsumer().setTypeRefConsumer(getTypeRefConsumer());

		getAbstractTerminalConsumer().setKeywordConsumer(getKeywordConsumer());
		getAbstractTerminalConsumer().setParenthesizedElementConsumer(getParenthesizedElementConsumer());
		getAbstractTerminalConsumer().setRuleCallConsumer(getRuleCallConsumer());

		getKeywordConsumer().setStringConsumer(getStringConsumer());

		getRuleCallConsumer().setIdConsumer(getIdConsumer());

		getAssignmentConsumer().setAssignableTerminalConsumer(getAssignableTerminalConsumer());
		getAssignmentConsumer().setIdConsumer(getIdConsumer());

		getAssignableTerminalConsumer().setCrossReferenceConsumer(getCrossReferenceConsumer());
		getAssignableTerminalConsumer().setKeywordConsumer(getKeywordConsumer());
		getAssignableTerminalConsumer().setParenthesizedAssignableElementConsumer(getParenthesizedAssignableElementConsumer());
		getAssignableTerminalConsumer().setRuleCallConsumer(getRuleCallConsumer());

		getParenthesizedAssignableElementConsumer().setAssignableAlternativesConsumer(getAssignableAlternativesConsumer());

		getAssignableAlternativesConsumer().setAssignableTerminalConsumer(getAssignableTerminalConsumer());

		getCrossReferenceConsumer().setCrossReferenceableTerminalConsumer(getCrossReferenceableTerminalConsumer());
		getCrossReferenceConsumer().setTypeRefConsumer(getTypeRefConsumer());

		getCrossReferenceableTerminalConsumer().setKeywordConsumer(getKeywordConsumer());
		getCrossReferenceableTerminalConsumer().setParenthesizedCrossReferenceableElementConsumer(getParenthesizedCrossReferenceableElementConsumer());
		getCrossReferenceableTerminalConsumer().setRuleCallConsumer(getRuleCallConsumer());

		getParenthesizedCrossReferenceableElementConsumer().setCrossReferenceableAlternativesConsumer(getCrossReferenceableAlternativesConsumer());

		getCrossReferenceableAlternativesConsumer().setCrossReferenceableTerminalConsumer(getCrossReferenceableTerminalConsumer());

		getParenthesizedElementConsumer().setAlternativesConsumer(getAlternativesConsumer());

		getTerminalRuleConsumer().setIdConsumer(getIdConsumer());
		getTerminalRuleConsumer().setTerminalAlternativesConsumer(getTerminalAlternativesConsumer());
		getTerminalRuleConsumer().setTypeRefConsumer(getTypeRefConsumer());

		getTerminalAlternativesConsumer().setTerminalGroupConsumer(getTerminalGroupConsumer());

		getTerminalGroupConsumer().setTerminalTokenConsumer(getTerminalTokenConsumer());

		getTerminalTokenConsumer().setTerminalTokenElementConsumer(getTerminalTokenElementConsumer());

		getTerminalTokenElementConsumer().setAbstractNegatedTokenConsumer(getAbstractNegatedTokenConsumer());
		getTerminalTokenElementConsumer().setCharacterRangeConsumer(getCharacterRangeConsumer());
		getTerminalTokenElementConsumer().setParenthesizedTerminalElementConsumer(getParenthesizedTerminalElementConsumer());
		getTerminalTokenElementConsumer().setRuleCallConsumer(getRuleCallConsumer());
		getTerminalTokenElementConsumer().setWildcardConsumer(getWildcardConsumer());

		getParenthesizedTerminalElementConsumer().setTerminalAlternativesConsumer(getTerminalAlternativesConsumer());

		getAbstractNegatedTokenConsumer().setNegatedTokenConsumer(getNegatedTokenConsumer());
		getAbstractNegatedTokenConsumer().setUntilTokenConsumer(getUntilTokenConsumer());

		getNegatedTokenConsumer().setTerminalTokenElementConsumer(getTerminalTokenElementConsumer());

		getUntilTokenConsumer().setTerminalTokenElementConsumer(getTerminalTokenElementConsumer());

		getCharacterRangeConsumer().setKeywordConsumer(getKeywordConsumer());

		getEnumRuleConsumer().setEnumLiteralsConsumer(getEnumLiteralsConsumer());
		getEnumRuleConsumer().setIdConsumer(getIdConsumer());
		getEnumRuleConsumer().setTypeRefConsumer(getTypeRefConsumer());

		getEnumLiteralsConsumer().setEnumLiteralDeclarationConsumer(getEnumLiteralDeclarationConsumer());

		getEnumLiteralDeclarationConsumer().setIdConsumer(getIdConsumer());
		getEnumLiteralDeclarationConsumer().setKeywordConsumer(getKeywordConsumer());

		getGrammarConsumer().setKeyword$12$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getGrammarConsumer().setKeyword$19$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$5$Delimiter);
		getGrammarConsumer().setKeyword$20$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getGrammarConsumer().setKeyword$27$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getGrammarConsumer().setKeyword$32$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getGrammarConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$5$Delimiter);
		getGrammarConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$5$Delimiter);
		getGrammarConsumer().setRuleCall$25$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.ruleCall$28$Delimiter);
		getGrammarConsumer().setRuleCall$31$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.ruleCall$28$Delimiter);
		getGrammarIdConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getGrammarIdConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.ruleCall$28$Delimiter);
		getGrammarIdConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.ruleCall$28$Delimiter);
		getGeneratedMetamodelConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$5$Delimiter);
		getGeneratedMetamodelConsumer().setKeyword$10$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$5$Delimiter);
		getGeneratedMetamodelConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.ruleCall$28$Delimiter);
		getGeneratedMetamodelConsumer().setRuleCall$8$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.ruleCall$67$Delimiter);
		getGeneratedMetamodelConsumer().setRuleCall$12$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.ruleCall$28$Delimiter);
		getReferencedMetamodelConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$5$Delimiter);
		getReferencedMetamodelConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$5$Delimiter);
		getReferencedMetamodelConsumer().setRuleCall$6$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.ruleCall$67$Delimiter);
		getReferencedMetamodelConsumer().setRuleCall$10$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.ruleCall$28$Delimiter);
		getParserRuleConsumer().setKeyword$18$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getParserRuleConsumer().setKeyword$23$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getParserRuleConsumer().setKeyword$24$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getParserRuleConsumer().setKeyword$27$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getParserRuleConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$5$Delimiter);
		getParserRuleConsumer().setKeyword$10$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$5$Delimiter);
		getParserRuleConsumer().setKeyword$11$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getParserRuleConsumer().setRuleCall$16$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.ruleCall$28$Delimiter);
		getParserRuleConsumer().setRuleCall$22$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.ruleCall$28$Delimiter);
		getParserRuleConsumer().setRuleCall$3$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.ruleCall$28$Delimiter);
		getTypeRefConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getTypeRefConsumer().setRuleCall$6$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.ruleCall$28$Delimiter);
		getTypeRefConsumer().setRuleCall$11$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.ruleCall$28$Delimiter);
		getAlternativesConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getAbstractTokenWithCardinalityConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getAbstractTokenWithCardinalityConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getAbstractTokenWithCardinalityConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getActionConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getActionConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getActionConsumer().setKeyword$11$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getActionConsumer().setKeyword$12$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getActionConsumer().setKeyword$13$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$5$Delimiter);
		getActionConsumer().setKeyword$14$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getActionConsumer().setRuleCall$8$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.ruleCall$28$Delimiter);
		getKeywordConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.ruleCall$67$Delimiter);
		getRuleCallConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.ruleCall$28$Delimiter);
		getAssignmentConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getAssignmentConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getAssignmentConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getAssignmentConsumer().setRuleCall$3$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.ruleCall$28$Delimiter);
		getParenthesizedAssignableElementConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getParenthesizedAssignableElementConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getAssignableAlternativesConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getCrossReferenceConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getCrossReferenceConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getCrossReferenceConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getParenthesizedCrossReferenceableElementConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getParenthesizedCrossReferenceableElementConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getCrossReferenceableAlternativesConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getParenthesizedElementConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getParenthesizedElementConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getTerminalRuleConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$5$Delimiter);
		getTerminalRuleConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$5$Delimiter);
		getTerminalRuleConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getTerminalRuleConsumer().setKeyword$12$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getTerminalRuleConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.ruleCall$28$Delimiter);
		getTerminalAlternativesConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getTerminalTokenConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getTerminalTokenConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getTerminalTokenConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getParenthesizedTerminalElementConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getParenthesizedTerminalElementConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getNegatedTokenConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getUntilTokenConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getWildcardConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getCharacterRangeConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getEnumRuleConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$5$Delimiter);
		getEnumRuleConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$5$Delimiter);
		getEnumRuleConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getEnumRuleConsumer().setKeyword$12$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getEnumRuleConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.ruleCall$28$Delimiter);
		getEnumLiteralsConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getEnumLiteralDeclarationConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.keyword$15$Delimiter);
		getEnumLiteralDeclarationConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.ui.tests.parser.packrat.XtextGrammarUiTestLanguageDelimiters.ruleCall$28$Delimiter);
	}
	
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public XtextGrammarUiTestLanguageGrammarConsumer getGrammarConsumer() {
    	return grammarConsumer;
    }

    public XtextGrammarUiTestLanguageGrammarIDConsumer getGrammarIdConsumer() {
    	return grammarIdConsumer;
    }

    public XtextGrammarUiTestLanguageAbstractRuleConsumer getAbstractRuleConsumer() {
    	return abstractRuleConsumer;
    }

    public XtextGrammarUiTestLanguageAbstractMetamodelDeclarationConsumer getAbstractMetamodelDeclarationConsumer() {
    	return abstractMetamodelDeclarationConsumer;
    }

    public XtextGrammarUiTestLanguageGeneratedMetamodelConsumer getGeneratedMetamodelConsumer() {
    	return generatedMetamodelConsumer;
    }

    public XtextGrammarUiTestLanguageReferencedMetamodelConsumer getReferencedMetamodelConsumer() {
    	return referencedMetamodelConsumer;
    }

    public XtextGrammarUiTestLanguageParserRuleConsumer getParserRuleConsumer() {
    	return parserRuleConsumer;
    }

    public XtextGrammarUiTestLanguageTypeRefConsumer getTypeRefConsumer() {
    	return typeRefConsumer;
    }

    public XtextGrammarUiTestLanguageAlternativesConsumer getAlternativesConsumer() {
    	return alternativesConsumer;
    }

    public XtextGrammarUiTestLanguageGroupConsumer getGroupConsumer() {
    	return groupConsumer;
    }

    public XtextGrammarUiTestLanguageAbstractTokenConsumer getAbstractTokenConsumer() {
    	return abstractTokenConsumer;
    }

    public XtextGrammarUiTestLanguageAbstractTokenWithCardinalityConsumer getAbstractTokenWithCardinalityConsumer() {
    	return abstractTokenWithCardinalityConsumer;
    }

    public XtextGrammarUiTestLanguageActionConsumer getActionConsumer() {
    	return actionConsumer;
    }

    public XtextGrammarUiTestLanguageAbstractTerminalConsumer getAbstractTerminalConsumer() {
    	return abstractTerminalConsumer;
    }

    public XtextGrammarUiTestLanguageKeywordConsumer getKeywordConsumer() {
    	return keywordConsumer;
    }

    public XtextGrammarUiTestLanguageRuleCallConsumer getRuleCallConsumer() {
    	return ruleCallConsumer;
    }

    public XtextGrammarUiTestLanguageAssignmentConsumer getAssignmentConsumer() {
    	return assignmentConsumer;
    }

    public XtextGrammarUiTestLanguageAssignableTerminalConsumer getAssignableTerminalConsumer() {
    	return assignableTerminalConsumer;
    }

    public XtextGrammarUiTestLanguageParenthesizedAssignableElementConsumer getParenthesizedAssignableElementConsumer() {
    	return parenthesizedAssignableElementConsumer;
    }

    public XtextGrammarUiTestLanguageAssignableAlternativesConsumer getAssignableAlternativesConsumer() {
    	return assignableAlternativesConsumer;
    }

    public XtextGrammarUiTestLanguageCrossReferenceConsumer getCrossReferenceConsumer() {
    	return crossReferenceConsumer;
    }

    public XtextGrammarUiTestLanguageCrossReferenceableTerminalConsumer getCrossReferenceableTerminalConsumer() {
    	return crossReferenceableTerminalConsumer;
    }

    public XtextGrammarUiTestLanguageParenthesizedCrossReferenceableElementConsumer getParenthesizedCrossReferenceableElementConsumer() {
    	return parenthesizedCrossReferenceableElementConsumer;
    }

    public XtextGrammarUiTestLanguageCrossReferenceableAlternativesConsumer getCrossReferenceableAlternativesConsumer() {
    	return crossReferenceableAlternativesConsumer;
    }

    public XtextGrammarUiTestLanguageParenthesizedElementConsumer getParenthesizedElementConsumer() {
    	return parenthesizedElementConsumer;
    }

    public XtextGrammarUiTestLanguageTerminalRuleConsumer getTerminalRuleConsumer() {
    	return terminalRuleConsumer;
    }

    public XtextGrammarUiTestLanguageTerminalAlternativesConsumer getTerminalAlternativesConsumer() {
    	return terminalAlternativesConsumer;
    }

    public XtextGrammarUiTestLanguageTerminalGroupConsumer getTerminalGroupConsumer() {
    	return terminalGroupConsumer;
    }

    public XtextGrammarUiTestLanguageTerminalTokenConsumer getTerminalTokenConsumer() {
    	return terminalTokenConsumer;
    }

    public XtextGrammarUiTestLanguageTerminalTokenElementConsumer getTerminalTokenElementConsumer() {
    	return terminalTokenElementConsumer;
    }

    public XtextGrammarUiTestLanguageParenthesizedTerminalElementConsumer getParenthesizedTerminalElementConsumer() {
    	return parenthesizedTerminalElementConsumer;
    }

    public XtextGrammarUiTestLanguageAbstractNegatedTokenConsumer getAbstractNegatedTokenConsumer() {
    	return abstractNegatedTokenConsumer;
    }

    public XtextGrammarUiTestLanguageNegatedTokenConsumer getNegatedTokenConsumer() {
    	return negatedTokenConsumer;
    }

    public XtextGrammarUiTestLanguageUntilTokenConsumer getUntilTokenConsumer() {
    	return untilTokenConsumer;
    }

    public XtextGrammarUiTestLanguageWildcardConsumer getWildcardConsumer() {
    	return wildcardConsumer;
    }

    public XtextGrammarUiTestLanguageCharacterRangeConsumer getCharacterRangeConsumer() {
    	return characterRangeConsumer;
    }

    public XtextGrammarUiTestLanguageEnumRuleConsumer getEnumRuleConsumer() {
    	return enumRuleConsumer;
    }

    public XtextGrammarUiTestLanguageEnumLiteralsConsumer getEnumLiteralsConsumer() {
    	return enumLiteralsConsumer;
    }

    public XtextGrammarUiTestLanguageEnumLiteralDeclarationConsumer getEnumLiteralDeclarationConsumer() {
    	return enumLiteralDeclarationConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
