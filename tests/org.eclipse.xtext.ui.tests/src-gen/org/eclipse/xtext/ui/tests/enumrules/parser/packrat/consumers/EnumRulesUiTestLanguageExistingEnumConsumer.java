/*
* generated by Xtext
*/
package org.eclipse.xtext.ui.tests.enumrules.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.Keyword;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;

import org.eclipse.xtext.ui.tests.enumrules.services.EnumRulesUiTestLanguageGrammarAccess.ExistingEnumElements;

public final class EnumRulesUiTestLanguageExistingEnumConsumer extends NonTerminalConsumer {

	private ExistingEnumElements rule;	

	private IElementConsumer alternatives$1$Consumer;

	private IElementConsumer enumLiteralDeclaration$2$Consumer;

	private IElementConsumer enumLiteralDeclaration$4$Consumer;

	private IElementConsumer enumLiteralDeclaration$6$Consumer;

	private ICharacterClass keyword$3$Delimiter;

	private ICharacterClass keyword$5$Delimiter;

	private ICharacterClass keyword$7$Delimiter;

	protected class Alternatives$1$Consumer extends AlternativesConsumer {
		
		protected Alternatives$1$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(enumLiteralDeclaration$2$Consumer);
			acceptor.accept(enumLiteralDeclaration$4$Consumer);
			acceptor.accept(enumLiteralDeclaration$6$Consumer);
		}
	}

	protected class EnumLiteralDeclaration$2$Consumer extends ElementConsumer<EnumLiteralDeclaration> {
		
		protected EnumLiteralDeclaration$2$Consumer(final EnumLiteralDeclaration enumLiteralDeclaration) {
			super(enumLiteralDeclaration);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeEnum(getElement(), getKeyword$3$Delimiter());
		}
	}

	protected class EnumLiteralDeclaration$4$Consumer extends ElementConsumer<EnumLiteralDeclaration> {
		
		protected EnumLiteralDeclaration$4$Consumer(final EnumLiteralDeclaration enumLiteralDeclaration) {
			super(enumLiteralDeclaration);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeEnum(getElement(), getKeyword$5$Delimiter());
		}
	}

	protected class EnumLiteralDeclaration$6$Consumer extends ElementConsumer<EnumLiteralDeclaration> {
		
		protected EnumLiteralDeclaration$6$Consumer(final EnumLiteralDeclaration enumLiteralDeclaration) {
			super(enumLiteralDeclaration);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeEnum(getElement(), getKeyword$7$Delimiter());
		}
	}

	public EnumRulesUiTestLanguageExistingEnumConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$3$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$5$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$7$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return alternatives$1$Consumer.consume();
	}

	public ExistingEnumElements getRule() {
		return rule;
	}
	
	public void setRule(ExistingEnumElements rule) {
		this.rule = rule;
		
		alternatives$1$Consumer = new Alternatives$1$Consumer(rule.getAlternatives());
		enumLiteralDeclaration$2$Consumer = new EnumLiteralDeclaration$2$Consumer(rule.getSameNameEnumLiteralDeclaration_0());
		enumLiteralDeclaration$4$Consumer = new EnumLiteralDeclaration$4$Consumer(rule.getOverriddenLiteralEnumLiteralDeclaration_1());
		enumLiteralDeclaration$6$Consumer = new EnumLiteralDeclaration$6$Consumer(rule.getDifferentNameEnumLiteralDeclaration_2());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public ICharacterClass getKeyword$3$Delimiter() {
		return keyword$3$Delimiter;
	}
	
	public void setKeyword$3$Delimiter(ICharacterClass characterClass) {
		keyword$3$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$5$Delimiter() {
		return keyword$5$Delimiter;
	}
	
	public void setKeyword$5$Delimiter(ICharacterClass characterClass) {
		keyword$5$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$7$Delimiter() {
		return keyword$7$Delimiter;
	}
	
	public void setKeyword$7$Delimiter(ICharacterClass characterClass) {
		keyword$7$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
