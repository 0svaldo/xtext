/*
* generated by Xtext
*/
grammar InternalXtextGrammarUiTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.ui.tests.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.ui.tests.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.ui.tests.services.XtextGrammarUiTestLanguageGrammarAccess;

}

@parser::members {

 	private XtextGrammarUiTestLanguageGrammarAccess grammarAccess;
 	
    public InternalXtextGrammarUiTestLanguageParser(TokenStream input, IAstFactory factory, XtextGrammarUiTestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/xtext/ui/tests/parser/antlr/internal/InternalXtextGrammarUiTestLanguage.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Grammar";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleGrammar
entryRuleGrammar returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getGrammarRule(), currentNode); }
	 iv_ruleGrammar=ruleGrammar 
	 { $current=$iv_ruleGrammar.current; } 
	 EOF 
;

// Rule Grammar
ruleGrammar returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'grammar' 
    {
        createLeafNode(grammarAccess.getGrammarAccess().getGrammarKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGrammarAccess().getNameGrammarIDParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleGrammarID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGrammarRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"GrammarID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'with' 
    {
        createLeafNode(grammarAccess.getGrammarAccess().getWithKeyword_2_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getGrammarRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGrammarAccess().getUsedGrammarsGrammarCrossReference_2_1_0(), currentNode); 
	    }
		ruleGrammarID		{ 
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getGrammarAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getGrammarRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGrammarAccess().getUsedGrammarsGrammarCrossReference_2_2_1_0(), currentNode); 
	    }
		ruleGrammarID		{ 
	        currentNode = currentNode.getParent();
	    }

)
))*)?((
(
		lv_definesHiddenTokens_6_0=	'hidden' 
    {
        createLeafNode(grammarAccess.getGrammarAccess().getDefinesHiddenTokensHiddenKeyword_3_0_0(), "definesHiddenTokens"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGrammarRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "definesHiddenTokens", true, "hidden", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getGrammarAccess().getLeftParenthesisKeyword_3_1(), null); 
    }
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getGrammarRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getGrammarAccess().getHiddenTokensAbstractRuleCrossReference_3_2_0_0(), "hiddenTokens"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getGrammarAccess().getCommaKeyword_3_2_1_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getGrammarRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getGrammarAccess().getHiddenTokensAbstractRuleCrossReference_3_2_1_1_0(), "hiddenTokens"); 
	}

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getGrammarAccess().getRightParenthesisKeyword_3_3(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGrammarAccess().getMetamodelDeclarationsAbstractMetamodelDeclarationParserRuleCall_4_0(), currentNode); 
	    }
		lv_metamodelDeclarations_12_0=ruleAbstractMetamodelDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGrammarRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"metamodelDeclarations",
	        		lv_metamodelDeclarations_12_0, 
	        		"AbstractMetamodelDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGrammarAccess().getRulesAbstractRuleParserRuleCall_5_0(), currentNode); 
	    }
		lv_rules_13_0=ruleAbstractRule		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGrammarRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"rules",
	        		lv_rules_13_0, 
	        		"AbstractRule", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)
;





// Entry rule entryRuleGrammarID
entryRuleGrammarID returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getGrammarIDRule(), currentNode); } 
	 iv_ruleGrammarID=ruleGrammarID 
	 { $current=$iv_ruleGrammarID.current.getText(); }  
	 EOF 
;

// Rule GrammarID
ruleGrammarID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getGrammarIDAccess().getIDTerminalRuleCall_0(), null); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getGrammarIDAccess().getFullStopKeyword_1_0(), null); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    createLeafNode(grammarAccess.getGrammarIDAccess().getIDTerminalRuleCall_1_1(), null); 
    }
)*)
    ;





// Entry rule entryRuleAbstractRule
entryRuleAbstractRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbstractRuleRule(), currentNode); }
	 iv_ruleAbstractRule=ruleAbstractRule 
	 { $current=$iv_ruleAbstractRule.current; } 
	 EOF 
;

// Rule AbstractRule
ruleAbstractRule returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractRuleAccess().getParserRuleParserRuleCall_0(), currentNode); 
    }
    this_ParserRule_0=ruleParserRule
    { 
        $current = $this_ParserRule_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractRuleAccess().getTerminalRuleParserRuleCall_1(), currentNode); 
    }
    this_TerminalRule_1=ruleTerminalRule
    { 
        $current = $this_TerminalRule_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractRuleAccess().getEnumRuleParserRuleCall_2(), currentNode); 
    }
    this_EnumRule_2=ruleEnumRule
    { 
        $current = $this_EnumRule_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAbstractMetamodelDeclaration
entryRuleAbstractMetamodelDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbstractMetamodelDeclarationRule(), currentNode); }
	 iv_ruleAbstractMetamodelDeclaration=ruleAbstractMetamodelDeclaration 
	 { $current=$iv_ruleAbstractMetamodelDeclaration.current; } 
	 EOF 
;

// Rule AbstractMetamodelDeclaration
ruleAbstractMetamodelDeclaration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractMetamodelDeclarationAccess().getGeneratedMetamodelParserRuleCall_0(), currentNode); 
    }
    this_GeneratedMetamodel_0=ruleGeneratedMetamodel
    { 
        $current = $this_GeneratedMetamodel_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractMetamodelDeclarationAccess().getReferencedMetamodelParserRuleCall_1(), currentNode); 
    }
    this_ReferencedMetamodel_1=ruleReferencedMetamodel
    { 
        $current = $this_ReferencedMetamodel_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleGeneratedMetamodel
entryRuleGeneratedMetamodel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getGeneratedMetamodelRule(), currentNode); }
	 iv_ruleGeneratedMetamodel=ruleGeneratedMetamodel 
	 { $current=$iv_ruleGeneratedMetamodel.current; } 
	 EOF 
;

// Rule GeneratedMetamodel
ruleGeneratedMetamodel returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'generate' 
    {
        createLeafNode(grammarAccess.getGeneratedMetamodelAccess().getGenerateKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getGeneratedMetamodelAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGeneratedMetamodelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getGeneratedMetamodelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_STRING
	{
		createLeafNode(grammarAccess.getGeneratedMetamodelAccess().getEPackageEPackageCrossReference_2_0(), "ePackage"); 
	}

)
)(	'as' 
    {
        createLeafNode(grammarAccess.getGeneratedMetamodelAccess().getAsKeyword_3_0(), null); 
    }
(
(
		lv_alias_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getGeneratedMetamodelAccess().getAliasIDTerminalRuleCall_3_1_0(), "alias"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGeneratedMetamodelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"alias",
	        		lv_alias_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?)
;





// Entry rule entryRuleReferencedMetamodel
entryRuleReferencedMetamodel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReferencedMetamodelRule(), currentNode); }
	 iv_ruleReferencedMetamodel=ruleReferencedMetamodel 
	 { $current=$iv_ruleReferencedMetamodel.current; } 
	 EOF 
;

// Rule ReferencedMetamodel
ruleReferencedMetamodel returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'import' 
    {
        createLeafNode(grammarAccess.getReferencedMetamodelAccess().getImportKeyword_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getReferencedMetamodelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_STRING
	{
		createLeafNode(grammarAccess.getReferencedMetamodelAccess().getEPackageEPackageCrossReference_1_0(), "ePackage"); 
	}

)
)(	'as' 
    {
        createLeafNode(grammarAccess.getReferencedMetamodelAccess().getAsKeyword_2_0(), null); 
    }
(
(
		lv_alias_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getReferencedMetamodelAccess().getAliasIDTerminalRuleCall_2_1_0(), "alias"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferencedMetamodelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"alias",
	        		lv_alias_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?)
;





// Entry rule entryRuleParserRule
entryRuleParserRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParserRuleRule(), currentNode); }
	 iv_ruleParserRule=ruleParserRule 
	 { $current=$iv_ruleParserRule.current; } 
	 EOF 
;

// Rule ParserRule
ruleParserRule returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getParserRuleAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParserRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'returns' 
    {
        createLeafNode(grammarAccess.getParserRuleAccess().getReturnsKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParserRuleAccess().getTypeTypeRefParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_type_2_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParserRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?((
(
		lv_definesHiddenTokens_3_0=	'hidden' 
    {
        createLeafNode(grammarAccess.getParserRuleAccess().getDefinesHiddenTokensHiddenKeyword_2_0_0(), "definesHiddenTokens"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParserRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "definesHiddenTokens", true, "hidden", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getParserRuleAccess().getLeftParenthesisKeyword_2_1(), null); 
    }
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getParserRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getParserRuleAccess().getHiddenTokensAbstractRuleCrossReference_2_2_0_0(), "hiddenTokens"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getParserRuleAccess().getCommaKeyword_2_2_1_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getParserRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getParserRuleAccess().getHiddenTokensAbstractRuleCrossReference_2_2_1_1_0(), "hiddenTokens"); 
	}

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getParserRuleAccess().getRightParenthesisKeyword_2_3(), null); 
    }
)?	':' 
    {
        createLeafNode(grammarAccess.getParserRuleAccess().getColonKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParserRuleAccess().getAlternativesAlternativesParserRuleCall_4_0(), currentNode); 
	    }
		lv_alternatives_10_0=ruleAlternatives		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParserRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"alternatives",
	        		lv_alternatives_10_0, 
	        		"Alternatives", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getParserRuleAccess().getSemicolonKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleTypeRef
entryRuleTypeRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeRefRule(), currentNode); }
	 iv_ruleTypeRef=ruleTypeRef 
	 { $current=$iv_ruleTypeRef.current; } 
	 EOF 
;

// Rule TypeRef
ruleTypeRef returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getTypeRefAccess().getMetamodelAbstractMetamodelDeclarationCrossReference_0_0_0(), "metamodel"); 
	}

)
)	'::' 
    {
        createLeafNode(grammarAccess.getTypeRefAccess().getColonColonKeyword_0_1(), null); 
    }
)?(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getTypeRefAccess().getClassifierEClassifierCrossReference_1_0(), "classifier"); 
	}

)
))
;





// Entry rule entryRuleAlternatives
entryRuleAlternatives returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAlternativesRule(), currentNode); }
	 iv_ruleAlternatives=ruleAlternatives 
	 { $current=$iv_ruleAlternatives.current; } 
	 EOF 
;

// Rule Alternatives
ruleAlternatives returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAlternativesAccess().getGroupParserRuleCall_0(), currentNode); 
    }
    this_Group_0=ruleGroup
    { 
        $current = $this_Group_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getAlternativesAccess().getAlternativesGroupsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "groups", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAlternativesAccess().getAlternativesGroupsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'|' 
    {
        createLeafNode(grammarAccess.getAlternativesAccess().getVerticalLineKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAlternativesAccess().getGroupsGroupParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_groups_3_0=ruleGroup		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAlternativesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"groups",
	        		lv_groups_3_0, 
	        		"Group", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+)?)
;





// Entry rule entryRuleGroup
entryRuleGroup returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getGroupRule(), currentNode); }
	 iv_ruleGroup=ruleGroup 
	 { $current=$iv_ruleGroup.current; } 
	 EOF 
;

// Rule Group
ruleGroup returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getGroupAccess().getAbstractTokenParserRuleCall_0(), currentNode); 
    }
    this_AbstractToken_0=ruleAbstractToken
    { 
        $current = $this_AbstractToken_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getGroupAccess().getGroupTokensAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "tokens", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getGroupAccess().getGroupTokensAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGroupAccess().getTokensAbstractTokenParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_tokens_2_0=ruleAbstractToken		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"tokens",
	        		lv_tokens_2_0, 
	        		"AbstractToken", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)?)
;





// Entry rule entryRuleAbstractToken
entryRuleAbstractToken returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbstractTokenRule(), currentNode); }
	 iv_ruleAbstractToken=ruleAbstractToken 
	 { $current=$iv_ruleAbstractToken.current; } 
	 EOF 
;

// Rule AbstractToken
ruleAbstractToken returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractTokenAccess().getAbstractTokenWithCardinalityParserRuleCall_0(), currentNode); 
    }
    this_AbstractTokenWithCardinality_0=ruleAbstractTokenWithCardinality
    { 
        $current = $this_AbstractTokenWithCardinality_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractTokenAccess().getActionParserRuleCall_1(), currentNode); 
    }
    this_Action_1=ruleAction
    { 
        $current = $this_Action_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAbstractTokenWithCardinality
entryRuleAbstractTokenWithCardinality returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbstractTokenWithCardinalityRule(), currentNode); }
	 iv_ruleAbstractTokenWithCardinality=ruleAbstractTokenWithCardinality 
	 { $current=$iv_ruleAbstractTokenWithCardinality.current; } 
	 EOF 
;

// Rule AbstractTokenWithCardinality
ruleAbstractTokenWithCardinality returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractTokenWithCardinalityAccess().getAssignmentParserRuleCall_0_0(), currentNode); 
    }
    this_Assignment_0=ruleAssignment
    { 
        $current = $this_Assignment_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractTokenWithCardinalityAccess().getAbstractTerminalParserRuleCall_0_1(), currentNode); 
    }
    this_AbstractTerminal_1=ruleAbstractTerminal
    { 
        $current = $this_AbstractTerminal_1.current; 
        currentNode = currentNode.getParent();
    }
)(
(
(
		lv_cardinality_2_1=	'?' 
    {
        createLeafNode(grammarAccess.getAbstractTokenWithCardinalityAccess().getCardinalityQuestionMarkKeyword_1_0_0(), "cardinality"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbstractTokenWithCardinalityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "cardinality", lv_cardinality_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_cardinality_2_2=	'*' 
    {
        createLeafNode(grammarAccess.getAbstractTokenWithCardinalityAccess().getCardinalityAsteriskKeyword_1_0_1(), "cardinality"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbstractTokenWithCardinalityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "cardinality", lv_cardinality_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_cardinality_2_3=	'+' 
    {
        createLeafNode(grammarAccess.getAbstractTokenWithCardinalityAccess().getCardinalityPlusSignKeyword_1_0_2(), "cardinality"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbstractTokenWithCardinalityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "cardinality", lv_cardinality_2_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)?)
;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getActionRule(), currentNode); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'{' 
    {
        createLeafNode(grammarAccess.getActionAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getActionAccess().getTypeTypeRefParserRuleCall_1_0(), currentNode); 
	    }
		lv_type_1_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_1_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'.' 
    {
        createLeafNode(grammarAccess.getActionAccess().getFullStopKeyword_2_0(), null); 
    }
(
(
		lv_feature_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getActionAccess().getFeatureIDTerminalRuleCall_2_1_0(), "feature"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"feature",
	        		lv_feature_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
(
		lv_operator_4_1=	'=' 
    {
        createLeafNode(grammarAccess.getActionAccess().getOperatorEqualsSignKeyword_2_2_0_0(), "operator"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_4_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_operator_4_2=	'+=' 
    {
        createLeafNode(grammarAccess.getActionAccess().getOperatorPlusSignEqualsSignKeyword_2_2_0_1(), "operator"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_4_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)	'current' 
    {
        createLeafNode(grammarAccess.getActionAccess().getCurrentKeyword_2_3(), null); 
    }
)?	'}' 
    {
        createLeafNode(grammarAccess.getActionAccess().getRightCurlyBracketKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleAbstractTerminal
entryRuleAbstractTerminal returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbstractTerminalRule(), currentNode); }
	 iv_ruleAbstractTerminal=ruleAbstractTerminal 
	 { $current=$iv_ruleAbstractTerminal.current; } 
	 EOF 
;

// Rule AbstractTerminal
ruleAbstractTerminal returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractTerminalAccess().getKeywordParserRuleCall_0(), currentNode); 
    }
    this_Keyword_0=ruleKeyword
    { 
        $current = $this_Keyword_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractTerminalAccess().getRuleCallParserRuleCall_1(), currentNode); 
    }
    this_RuleCall_1=ruleRuleCall
    { 
        $current = $this_RuleCall_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractTerminalAccess().getParenthesizedElementParserRuleCall_2(), currentNode); 
    }
    this_ParenthesizedElement_2=ruleParenthesizedElement
    { 
        $current = $this_ParenthesizedElement_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleKeyword
entryRuleKeyword returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getKeywordRule(), currentNode); }
	 iv_ruleKeyword=ruleKeyword 
	 { $current=$iv_ruleKeyword.current; } 
	 EOF 
;

// Rule Keyword
ruleKeyword returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getKeywordAccess().getValueSTRINGTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKeywordRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleRuleCall
entryRuleRuleCall returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRuleCallRule(), currentNode); }
	 iv_ruleRuleCall=ruleRuleCall 
	 { $current=$iv_ruleRuleCall.current; } 
	 EOF 
;

// Rule RuleCall
ruleRuleCall returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRuleCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRuleCallAccess().getRuleAbstractRuleCrossReference_0(), "rule"); 
	}

)
)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssignmentRule(), currentNode); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_feature_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAssignmentAccess().getFeatureIDTerminalRuleCall_0_0(), "feature"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"feature",
	        		lv_feature_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
(
		lv_operator_1_1=	'+=' 
    {
        createLeafNode(grammarAccess.getAssignmentAccess().getOperatorPlusSignEqualsSignKeyword_1_0_0(), "operator"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_1_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_operator_1_2=	'=' 
    {
        createLeafNode(grammarAccess.getAssignmentAccess().getOperatorEqualsSignKeyword_1_0_1(), "operator"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_1_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_operator_1_3=	'?=' 
    {
        createLeafNode(grammarAccess.getAssignmentAccess().getOperatorQuestionMarkEqualsSignKeyword_1_0_2(), "operator"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_1_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentAccess().getTerminalAssignableTerminalParserRuleCall_2_0(), currentNode); 
	    }
		lv_terminal_2_0=ruleAssignableTerminal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"terminal",
	        		lv_terminal_2_0, 
	        		"AssignableTerminal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleAssignableTerminal
entryRuleAssignableTerminal returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssignableTerminalRule(), currentNode); }
	 iv_ruleAssignableTerminal=ruleAssignableTerminal 
	 { $current=$iv_ruleAssignableTerminal.current; } 
	 EOF 
;

// Rule AssignableTerminal
ruleAssignableTerminal returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAssignableTerminalAccess().getKeywordParserRuleCall_0(), currentNode); 
    }
    this_Keyword_0=ruleKeyword
    { 
        $current = $this_Keyword_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAssignableTerminalAccess().getRuleCallParserRuleCall_1(), currentNode); 
    }
    this_RuleCall_1=ruleRuleCall
    { 
        $current = $this_RuleCall_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAssignableTerminalAccess().getParenthesizedAssignableElementParserRuleCall_2(), currentNode); 
    }
    this_ParenthesizedAssignableElement_2=ruleParenthesizedAssignableElement
    { 
        $current = $this_ParenthesizedAssignableElement_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAssignableTerminalAccess().getCrossReferenceParserRuleCall_3(), currentNode); 
    }
    this_CrossReference_3=ruleCrossReference
    { 
        $current = $this_CrossReference_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleParenthesizedAssignableElement
entryRuleParenthesizedAssignableElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParenthesizedAssignableElementRule(), currentNode); }
	 iv_ruleParenthesizedAssignableElement=ruleParenthesizedAssignableElement 
	 { $current=$iv_ruleParenthesizedAssignableElement.current; } 
	 EOF 
;

// Rule ParenthesizedAssignableElement
ruleParenthesizedAssignableElement returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'(' 
    {
        createLeafNode(grammarAccess.getParenthesizedAssignableElementAccess().getLeftParenthesisKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getParenthesizedAssignableElementAccess().getAssignableAlternativesParserRuleCall_1(), currentNode); 
    }
    this_AssignableAlternatives_1=ruleAssignableAlternatives
    { 
        $current = $this_AssignableAlternatives_1.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getParenthesizedAssignableElementAccess().getRightParenthesisKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleAssignableAlternatives
entryRuleAssignableAlternatives returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssignableAlternativesRule(), currentNode); }
	 iv_ruleAssignableAlternatives=ruleAssignableAlternatives 
	 { $current=$iv_ruleAssignableAlternatives.current; } 
	 EOF 
;

// Rule AssignableAlternatives
ruleAssignableAlternatives returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAssignableAlternativesAccess().getAssignableTerminalParserRuleCall_0(), currentNode); 
    }
    this_AssignableTerminal_0=ruleAssignableTerminal
    { 
        $current = $this_AssignableTerminal_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getAssignableAlternativesAccess().getAlternativesGroupsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "groups", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAssignableAlternativesAccess().getAlternativesGroupsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'|' 
    {
        createLeafNode(grammarAccess.getAssignableAlternativesAccess().getVerticalLineKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssignableAlternativesAccess().getGroupsAssignableTerminalParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_groups_3_0=ruleAssignableTerminal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignableAlternativesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"groups",
	        		lv_groups_3_0, 
	        		"AssignableTerminal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+)?)
;





// Entry rule entryRuleCrossReference
entryRuleCrossReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCrossReferenceRule(), currentNode); }
	 iv_ruleCrossReference=ruleCrossReference 
	 { $current=$iv_ruleCrossReference.current; } 
	 EOF 
;

// Rule CrossReference
ruleCrossReference returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'[' 
    {
        createLeafNode(grammarAccess.getCrossReferenceAccess().getLeftSquareBracketKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCrossReferenceAccess().getTypeTypeRefParserRuleCall_1_0(), currentNode); 
	    }
		lv_type_1_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCrossReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_1_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'|' 
    {
        createLeafNode(grammarAccess.getCrossReferenceAccess().getVerticalLineKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCrossReferenceAccess().getTerminalCrossReferenceableTerminalParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_terminal_3_0=ruleCrossReferenceableTerminal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCrossReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"terminal",
	        		lv_terminal_3_0, 
	        		"CrossReferenceableTerminal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	']' 
    {
        createLeafNode(grammarAccess.getCrossReferenceAccess().getRightSquareBracketKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleCrossReferenceableTerminal
entryRuleCrossReferenceableTerminal returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCrossReferenceableTerminalRule(), currentNode); }
	 iv_ruleCrossReferenceableTerminal=ruleCrossReferenceableTerminal 
	 { $current=$iv_ruleCrossReferenceableTerminal.current; } 
	 EOF 
;

// Rule CrossReferenceableTerminal
ruleCrossReferenceableTerminal returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getCrossReferenceableTerminalAccess().getKeywordParserRuleCall_0(), currentNode); 
    }
    this_Keyword_0=ruleKeyword
    { 
        $current = $this_Keyword_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getCrossReferenceableTerminalAccess().getRuleCallParserRuleCall_1(), currentNode); 
    }
    this_RuleCall_1=ruleRuleCall
    { 
        $current = $this_RuleCall_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getCrossReferenceableTerminalAccess().getParenthesizedCrossReferenceableElementParserRuleCall_2(), currentNode); 
    }
    this_ParenthesizedCrossReferenceableElement_2=ruleParenthesizedCrossReferenceableElement
    { 
        $current = $this_ParenthesizedCrossReferenceableElement_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleParenthesizedCrossReferenceableElement
entryRuleParenthesizedCrossReferenceableElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParenthesizedCrossReferenceableElementRule(), currentNode); }
	 iv_ruleParenthesizedCrossReferenceableElement=ruleParenthesizedCrossReferenceableElement 
	 { $current=$iv_ruleParenthesizedCrossReferenceableElement.current; } 
	 EOF 
;

// Rule ParenthesizedCrossReferenceableElement
ruleParenthesizedCrossReferenceableElement returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'(' 
    {
        createLeafNode(grammarAccess.getParenthesizedCrossReferenceableElementAccess().getLeftParenthesisKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getParenthesizedCrossReferenceableElementAccess().getCrossReferenceableAlternativesParserRuleCall_1(), currentNode); 
    }
    this_CrossReferenceableAlternatives_1=ruleCrossReferenceableAlternatives
    { 
        $current = $this_CrossReferenceableAlternatives_1.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getParenthesizedCrossReferenceableElementAccess().getRightParenthesisKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleCrossReferenceableAlternatives
entryRuleCrossReferenceableAlternatives returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCrossReferenceableAlternativesRule(), currentNode); }
	 iv_ruleCrossReferenceableAlternatives=ruleCrossReferenceableAlternatives 
	 { $current=$iv_ruleCrossReferenceableAlternatives.current; } 
	 EOF 
;

// Rule CrossReferenceableAlternatives
ruleCrossReferenceableAlternatives returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getCrossReferenceableAlternativesAccess().getCrossReferenceableTerminalParserRuleCall_0(), currentNode); 
    }
    this_CrossReferenceableTerminal_0=ruleCrossReferenceableTerminal
    { 
        $current = $this_CrossReferenceableTerminal_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getCrossReferenceableAlternativesAccess().getAlternativesGroupsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "groups", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCrossReferenceableAlternativesAccess().getAlternativesGroupsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'|' 
    {
        createLeafNode(grammarAccess.getCrossReferenceableAlternativesAccess().getVerticalLineKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCrossReferenceableAlternativesAccess().getGroupsCrossReferenceableTerminalParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_groups_3_0=ruleCrossReferenceableTerminal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCrossReferenceableAlternativesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"groups",
	        		lv_groups_3_0, 
	        		"CrossReferenceableTerminal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+)?)
;





// Entry rule entryRuleParenthesizedElement
entryRuleParenthesizedElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParenthesizedElementRule(), currentNode); }
	 iv_ruleParenthesizedElement=ruleParenthesizedElement 
	 { $current=$iv_ruleParenthesizedElement.current; } 
	 EOF 
;

// Rule ParenthesizedElement
ruleParenthesizedElement returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'(' 
    {
        createLeafNode(grammarAccess.getParenthesizedElementAccess().getLeftParenthesisKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getParenthesizedElementAccess().getAlternativesParserRuleCall_1(), currentNode); 
    }
    this_Alternatives_1=ruleAlternatives
    { 
        $current = $this_Alternatives_1.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getParenthesizedElementAccess().getRightParenthesisKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleTerminalRule
entryRuleTerminalRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTerminalRuleRule(), currentNode); }
	 iv_ruleTerminalRule=ruleTerminalRule 
	 { $current=$iv_ruleTerminalRule.current; } 
	 EOF 
;

// Rule TerminalRule
ruleTerminalRule returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'terminal' 
    {
        createLeafNode(grammarAccess.getTerminalRuleAccess().getTerminalKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTerminalRuleAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'returns' 
    {
        createLeafNode(grammarAccess.getTerminalRuleAccess().getReturnsKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalRuleAccess().getTypeTypeRefParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_type_3_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_3_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	':' 
    {
        createLeafNode(grammarAccess.getTerminalRuleAccess().getColonKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalRuleAccess().getAlternativesTerminalAlternativesParserRuleCall_4_0(), currentNode); 
	    }
		lv_alternatives_5_0=ruleTerminalAlternatives		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"alternatives",
	        		lv_alternatives_5_0, 
	        		"TerminalAlternatives", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getTerminalRuleAccess().getSemicolonKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleTerminalAlternatives
entryRuleTerminalAlternatives returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTerminalAlternativesRule(), currentNode); }
	 iv_ruleTerminalAlternatives=ruleTerminalAlternatives 
	 { $current=$iv_ruleTerminalAlternatives.current; } 
	 EOF 
;

// Rule TerminalAlternatives
ruleTerminalAlternatives returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTerminalAlternativesAccess().getTerminalGroupParserRuleCall_0(), currentNode); 
    }
    this_TerminalGroup_0=ruleTerminalGroup
    { 
        $current = $this_TerminalGroup_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getTerminalAlternativesAccess().getAlternativesGroupsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "groups", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTerminalAlternativesAccess().getAlternativesGroupsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'|' 
    {
        createLeafNode(grammarAccess.getTerminalAlternativesAccess().getVerticalLineKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalAlternativesAccess().getGroupsTerminalGroupParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_groups_3_0=ruleTerminalGroup		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalAlternativesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"groups",
	        		lv_groups_3_0, 
	        		"TerminalGroup", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+)?)
;





// Entry rule entryRuleTerminalGroup
entryRuleTerminalGroup returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTerminalGroupRule(), currentNode); }
	 iv_ruleTerminalGroup=ruleTerminalGroup 
	 { $current=$iv_ruleTerminalGroup.current; } 
	 EOF 
;

// Rule TerminalGroup
ruleTerminalGroup returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTerminalGroupAccess().getTerminalTokenParserRuleCall_0(), currentNode); 
    }
    this_TerminalToken_0=ruleTerminalToken
    { 
        $current = $this_TerminalToken_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getTerminalGroupAccess().getGroupTokensAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "tokens", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTerminalGroupAccess().getGroupTokensAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalGroupAccess().getTokensTerminalTokenParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_tokens_2_0=ruleTerminalToken		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"tokens",
	        		lv_tokens_2_0, 
	        		"TerminalToken", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)?)
;





// Entry rule entryRuleTerminalToken
entryRuleTerminalToken returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTerminalTokenRule(), currentNode); }
	 iv_ruleTerminalToken=ruleTerminalToken 
	 { $current=$iv_ruleTerminalToken.current; } 
	 EOF 
;

// Rule TerminalToken
ruleTerminalToken returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTerminalTokenAccess().getTerminalTokenElementParserRuleCall_0(), currentNode); 
    }
    this_TerminalTokenElement_0=ruleTerminalTokenElement
    { 
        $current = $this_TerminalTokenElement_0.current; 
        currentNode = currentNode.getParent();
    }
(
(
(
		lv_cardinality_1_1=	'?' 
    {
        createLeafNode(grammarAccess.getTerminalTokenAccess().getCardinalityQuestionMarkKeyword_1_0_0(), "cardinality"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalTokenRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "cardinality", lv_cardinality_1_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_cardinality_1_2=	'*' 
    {
        createLeafNode(grammarAccess.getTerminalTokenAccess().getCardinalityAsteriskKeyword_1_0_1(), "cardinality"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalTokenRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "cardinality", lv_cardinality_1_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_cardinality_1_3=	'+' 
    {
        createLeafNode(grammarAccess.getTerminalTokenAccess().getCardinalityPlusSignKeyword_1_0_2(), "cardinality"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalTokenRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "cardinality", lv_cardinality_1_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)?)
;





// Entry rule entryRuleTerminalTokenElement
entryRuleTerminalTokenElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTerminalTokenElementRule(), currentNode); }
	 iv_ruleTerminalTokenElement=ruleTerminalTokenElement 
	 { $current=$iv_ruleTerminalTokenElement.current; } 
	 EOF 
;

// Rule TerminalTokenElement
ruleTerminalTokenElement returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTerminalTokenElementAccess().getCharacterRangeParserRuleCall_0(), currentNode); 
    }
    this_CharacterRange_0=ruleCharacterRange
    { 
        $current = $this_CharacterRange_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTerminalTokenElementAccess().getRuleCallParserRuleCall_1(), currentNode); 
    }
    this_RuleCall_1=ruleRuleCall
    { 
        $current = $this_RuleCall_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTerminalTokenElementAccess().getParenthesizedTerminalElementParserRuleCall_2(), currentNode); 
    }
    this_ParenthesizedTerminalElement_2=ruleParenthesizedTerminalElement
    { 
        $current = $this_ParenthesizedTerminalElement_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTerminalTokenElementAccess().getAbstractNegatedTokenParserRuleCall_3(), currentNode); 
    }
    this_AbstractNegatedToken_3=ruleAbstractNegatedToken
    { 
        $current = $this_AbstractNegatedToken_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTerminalTokenElementAccess().getWildcardParserRuleCall_4(), currentNode); 
    }
    this_Wildcard_4=ruleWildcard
    { 
        $current = $this_Wildcard_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleParenthesizedTerminalElement
entryRuleParenthesizedTerminalElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParenthesizedTerminalElementRule(), currentNode); }
	 iv_ruleParenthesizedTerminalElement=ruleParenthesizedTerminalElement 
	 { $current=$iv_ruleParenthesizedTerminalElement.current; } 
	 EOF 
;

// Rule ParenthesizedTerminalElement
ruleParenthesizedTerminalElement returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'(' 
    {
        createLeafNode(grammarAccess.getParenthesizedTerminalElementAccess().getLeftParenthesisKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getParenthesizedTerminalElementAccess().getTerminalAlternativesParserRuleCall_1(), currentNode); 
    }
    this_TerminalAlternatives_1=ruleTerminalAlternatives
    { 
        $current = $this_TerminalAlternatives_1.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getParenthesizedTerminalElementAccess().getRightParenthesisKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleAbstractNegatedToken
entryRuleAbstractNegatedToken returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbstractNegatedTokenRule(), currentNode); }
	 iv_ruleAbstractNegatedToken=ruleAbstractNegatedToken 
	 { $current=$iv_ruleAbstractNegatedToken.current; } 
	 EOF 
;

// Rule AbstractNegatedToken
ruleAbstractNegatedToken returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractNegatedTokenAccess().getNegatedTokenParserRuleCall_0(), currentNode); 
    }
    this_NegatedToken_0=ruleNegatedToken
    { 
        $current = $this_NegatedToken_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractNegatedTokenAccess().getUntilTokenParserRuleCall_1(), currentNode); 
    }
    this_UntilToken_1=ruleUntilToken
    { 
        $current = $this_UntilToken_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleNegatedToken
entryRuleNegatedToken returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNegatedTokenRule(), currentNode); }
	 iv_ruleNegatedToken=ruleNegatedToken 
	 { $current=$iv_ruleNegatedToken.current; } 
	 EOF 
;

// Rule NegatedToken
ruleNegatedToken returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'!' 
    {
        createLeafNode(grammarAccess.getNegatedTokenAccess().getExclamationMarkKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNegatedTokenAccess().getTerminalTerminalTokenElementParserRuleCall_1_0(), currentNode); 
	    }
		lv_terminal_1_0=ruleTerminalTokenElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNegatedTokenRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"terminal",
	        		lv_terminal_1_0, 
	        		"TerminalTokenElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleUntilToken
entryRuleUntilToken returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUntilTokenRule(), currentNode); }
	 iv_ruleUntilToken=ruleUntilToken 
	 { $current=$iv_ruleUntilToken.current; } 
	 EOF 
;

// Rule UntilToken
ruleUntilToken returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'->' 
    {
        createLeafNode(grammarAccess.getUntilTokenAccess().getHyphenMinusGreaterThanSignKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUntilTokenAccess().getTerminalTerminalTokenElementParserRuleCall_1_0(), currentNode); 
	    }
		lv_terminal_1_0=ruleTerminalTokenElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUntilTokenRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"terminal",
	        		lv_terminal_1_0, 
	        		"TerminalTokenElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleWildcard
entryRuleWildcard returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWildcardRule(), currentNode); }
	 iv_ruleWildcard=ruleWildcard 
	 { $current=$iv_ruleWildcard.current; } 
	 EOF 
;

// Rule Wildcard
ruleWildcard returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getWildcardAccess().getWildcardAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getWildcardAccess().getWildcardAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'.' 
    {
        createLeafNode(grammarAccess.getWildcardAccess().getFullStopKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleCharacterRange
entryRuleCharacterRange returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCharacterRangeRule(), currentNode); }
	 iv_ruleCharacterRange=ruleCharacterRange 
	 { $current=$iv_ruleCharacterRange.current; } 
	 EOF 
;

// Rule CharacterRange
ruleCharacterRange returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getCharacterRangeAccess().getKeywordParserRuleCall_0(), currentNode); 
    }
    this_Keyword_0=ruleKeyword
    { 
        $current = $this_Keyword_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getCharacterRangeAccess().getCharacterRangeLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCharacterRangeAccess().getCharacterRangeLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'..' 
    {
        createLeafNode(grammarAccess.getCharacterRangeAccess().getFullStopFullStopKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCharacterRangeAccess().getRightKeywordParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_right_3_0=ruleKeyword		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCharacterRangeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_3_0, 
	        		"Keyword", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleEnumRule
entryRuleEnumRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumRuleRule(), currentNode); }
	 iv_ruleEnumRule=ruleEnumRule 
	 { $current=$iv_ruleEnumRule.current; } 
	 EOF 
;

// Rule EnumRule
ruleEnumRule returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'enum' 
    {
        createLeafNode(grammarAccess.getEnumRuleAccess().getEnumKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEnumRuleAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'returns' 
    {
        createLeafNode(grammarAccess.getEnumRuleAccess().getReturnsKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumRuleAccess().getTypeTypeRefParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_type_3_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_3_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	':' 
    {
        createLeafNode(grammarAccess.getEnumRuleAccess().getColonKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumRuleAccess().getAlternativesEnumLiteralsParserRuleCall_4_0(), currentNode); 
	    }
		lv_alternatives_5_0=ruleEnumLiterals		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"alternatives",
	        		lv_alternatives_5_0, 
	        		"EnumLiterals", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getEnumRuleAccess().getSemicolonKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleEnumLiterals
entryRuleEnumLiterals returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumLiteralsRule(), currentNode); }
	 iv_ruleEnumLiterals=ruleEnumLiterals 
	 { $current=$iv_ruleEnumLiterals.current; } 
	 EOF 
;

// Rule EnumLiterals
ruleEnumLiterals returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getEnumLiteralsAccess().getEnumLiteralDeclarationParserRuleCall_0(), currentNode); 
    }
    this_EnumLiteralDeclaration_0=ruleEnumLiteralDeclaration
    { 
        $current = $this_EnumLiteralDeclaration_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getEnumLiteralsAccess().getAlternativesGroupsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "groups", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getEnumLiteralsAccess().getAlternativesGroupsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'|' 
    {
        createLeafNode(grammarAccess.getEnumLiteralsAccess().getVerticalLineKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumLiteralsAccess().getGroupsEnumLiteralDeclarationParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_groups_3_0=ruleEnumLiteralDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumLiteralsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"groups",
	        		lv_groups_3_0, 
	        		"EnumLiteralDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+)?)
;





// Entry rule entryRuleEnumLiteralDeclaration
entryRuleEnumLiteralDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumLiteralDeclarationRule(), currentNode); }
	 iv_ruleEnumLiteralDeclaration=ruleEnumLiteralDeclaration 
	 { $current=$iv_ruleEnumLiteralDeclaration.current; } 
	 EOF 
;

// Rule EnumLiteralDeclaration
ruleEnumLiteralDeclaration returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 

    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumLiteralDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getEnumLiteralDeclarationAccess().getEnumLiteralEEnumLiteralCrossReference_0_0(), "enumLiteral"); 
	}

)
)(	'=' 
    {
        createLeafNode(grammarAccess.getEnumLiteralDeclarationAccess().getEqualsSignKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumLiteralDeclarationAccess().getLiteralKeywordParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_literal_2_0=ruleKeyword		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumLiteralDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"literal",
	        		lv_literal_2_0, 
	        		"Keyword", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


