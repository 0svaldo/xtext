/*
* generated by Xtext
*/
package org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.UnorderedGroup;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.ui.tests.editor.contentassist.services.Bug304681TestLanguageGrammarAccess.ObjectElements;

public final class Bug304681TestLanguageObjectConsumer extends NonTerminalConsumer {

	private ObjectElements rule;	

	private INonTerminalConsumer featureConsumer;

	private ITerminalConsumer idConsumer;

	private ITerminalConsumer intConsumer;

	private ITerminalConsumer stringConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer alternatives$2$Consumer;

	private IElementConsumer assignment$3$Consumer;

	private IElementConsumer keyword$4$Consumer;

	private IElementConsumer assignment$5$Consumer;

	private IElementConsumer keyword$6$Consumer;

	private IElementConsumer keyword$7$Consumer;

	private IElementConsumer assignment$8$Consumer;

	private IElementConsumer ruleCall$9$Consumer;

	private IElementConsumer group$10$Consumer;

	private IElementConsumer keyword$11$Consumer;

	private IElementConsumer assignment$12$Consumer;

	private IElementConsumer crossReference$13$Consumer;

	private IElementConsumer ruleCall$15$Consumer;

	private IElementConsumer keyword$16$Consumer;

	private IElementConsumer unorderedGroup$17$Consumer;

	private IElementConsumer group$18$Consumer;

	private IElementConsumer keyword$19$Consumer;

	private IElementConsumer assignment$20$Consumer;

	private IElementConsumer ruleCall$21$Consumer;

	private IElementConsumer keyword$22$Consumer;

	private IElementConsumer group$23$Consumer;

	private IElementConsumer keyword$24$Consumer;

	private IElementConsumer assignment$25$Consumer;

	private IElementConsumer ruleCall$26$Consumer;

	private IElementConsumer keyword$27$Consumer;

	private IElementConsumer group$28$Consumer;

	private IElementConsumer keyword$29$Consumer;

	private IElementConsumer assignment$30$Consumer;

	private IElementConsumer ruleCall$31$Consumer;

	private IElementConsumer keyword$32$Consumer;

	private IElementConsumer group$33$Consumer;

	private IElementConsumer assignment$34$Consumer;

	private IElementConsumer keyword$35$Consumer;

	private IElementConsumer keyword$36$Consumer;

	private IElementConsumer assignment$37$Consumer;

	private IElementConsumer ruleCall$38$Consumer;

	private IElementConsumer group$39$Consumer;

	private IElementConsumer keyword$40$Consumer;

	private IElementConsumer assignment$41$Consumer;

	private IElementConsumer ruleCall$42$Consumer;

	private IElementConsumer keyword$43$Consumer;

	private IElementConsumer group$44$Consumer;

	private IElementConsumer keyword$45$Consumer;

	private IElementConsumer assignment$46$Consumer;

	private IElementConsumer ruleCall$47$Consumer;

	private IElementConsumer group$48$Consumer;

	private IElementConsumer keyword$49$Consumer;

	private IElementConsumer assignment$50$Consumer;

	private IElementConsumer ruleCall$51$Consumer;

	private IElementConsumer keyword$52$Consumer;

	private ICharacterClass keyword$4$Delimiter;

	private ICharacterClass keyword$6$Delimiter;

	private ICharacterClass keyword$7$Delimiter;

	private ICharacterClass keyword$11$Delimiter;

	private ICharacterClass keyword$16$Delimiter;

	private ICharacterClass keyword$19$Delimiter;

	private ICharacterClass keyword$22$Delimiter;

	private ICharacterClass keyword$24$Delimiter;

	private ICharacterClass keyword$27$Delimiter;

	private ICharacterClass keyword$29$Delimiter;

	private ICharacterClass keyword$32$Delimiter;

	private ICharacterClass keyword$35$Delimiter;

	private ICharacterClass keyword$36$Delimiter;

	private ICharacterClass keyword$40$Delimiter;

	private ICharacterClass keyword$43$Delimiter;

	private ICharacterClass keyword$45$Delimiter;

	private ICharacterClass keyword$49$Delimiter;

	private ICharacterClass keyword$52$Delimiter;

	private ISequenceMatcher ruleCall$9$Delimiter;

	private ISequenceMatcher ruleCall$15$Delimiter;

	private ISequenceMatcher ruleCall$21$Delimiter;

	private ISequenceMatcher ruleCall$26$Delimiter;

	private ISequenceMatcher ruleCall$31$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(alternatives$2$Consumer);
			acceptor.accept(keyword$7$Consumer);
			acceptor.accept(assignment$8$Consumer);
			acceptor.accept(group$10$Consumer);
			acceptor.accept(keyword$16$Consumer);
			acceptor.accept(unorderedGroup$17$Consumer);
			acceptor.accept(keyword$52$Consumer);
		}
	}

	protected class Alternatives$2$Consumer extends OptionalAlternativesConsumer {
		
		protected Alternatives$2$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$3$Consumer);
			acceptor.accept(assignment$5$Consumer);
		}
	}

	protected class Assignment$3$Consumer extends AssignmentConsumer {
		
		protected Assignment$3$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$4$Consumer;
		}
	}

	protected class Keyword$4$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$4$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "enabled", false, true, getKeyword$4$Delimiter(), optional);
		}
	}

	protected class Assignment$5$Consumer extends AssignmentConsumer {
		
		protected Assignment$5$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$6$Consumer;
		}
	}

	protected class Keyword$6$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$6$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "abstract", false, true, getKeyword$6$Delimiter(), optional);
		}
	}

	protected class Keyword$7$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$7$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$7$Delimiter(), optional);
		}
	}

	protected class Assignment$8$Consumer extends AssignmentConsumer {
		
		protected Assignment$8$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$9$Consumer;
		}
	}

	protected class RuleCall$9$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$9$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "name", false, false, getElement(), getRuleCall$9$Delimiter(), optional);
		}
	}

	protected class Group$10$Consumer extends OptionalGroupConsumer {
		
		protected Group$10$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$11$Consumer);
			acceptor.accept(assignment$12$Consumer);
		}
	}

	protected class Keyword$11$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$11$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$11$Delimiter(), optional);
		}
	}

	protected class Assignment$12$Consumer extends AssignmentConsumer {
		
		protected Assignment$12$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$13$Consumer;
		}
	}

	protected class CrossReference$13$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$13$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "parent", false, false, getElement(), getRuleCall$15$Delimiter(), optional);
		}
	}

	protected class RuleCall$15$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$15$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "parent", false, false, getElement(), getRuleCall$15$Delimiter(), optional);
		}
	}

	protected class Keyword$16$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$16$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$16$Delimiter(), optional);
		}
	}

	protected class UnorderedGroup$17$Consumer extends UnorderedGroupConsumer {
		
		protected UnorderedGroup$17$Consumer(final UnorderedGroup unorderedGroup) {
			super(unorderedGroup);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$18$Consumer);
			acceptor.accept(group$23$Consumer);
			acceptor.accept(group$28$Consumer);
			acceptor.accept(group$33$Consumer);
			acceptor.accept(assignment$37$Consumer);
			acceptor.accept(group$39$Consumer);
			acceptor.accept(group$44$Consumer);
			acceptor.accept(group$48$Consumer);
		}
	}

	protected class Group$18$Consumer extends OptionalGroupConsumer {
		
		protected Group$18$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$19$Consumer);
			acceptor.accept(assignment$20$Consumer);
			acceptor.accept(keyword$22$Consumer);
		}
	}

	protected class Keyword$19$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$19$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$19$Delimiter(), optional);
		}
	}

	protected class Assignment$20$Consumer extends AssignmentConsumer {
		
		protected Assignment$20$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$21$Consumer;
		}
	}

	protected class RuleCall$21$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$21$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "shortDescription", false, false, getElement(), getRuleCall$21$Delimiter(), optional);
		}
	}

	protected class Keyword$22$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$22$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$22$Delimiter(), optional);
		}
	}

	protected class Group$23$Consumer extends OptionalGroupConsumer {
		
		protected Group$23$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$24$Consumer);
			acceptor.accept(assignment$25$Consumer);
			acceptor.accept(keyword$27$Consumer);
		}
	}

	protected class Keyword$24$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$24$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$24$Delimiter(), optional);
		}
	}

	protected class Assignment$25$Consumer extends AssignmentConsumer {
		
		protected Assignment$25$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$26$Consumer;
		}
	}

	protected class RuleCall$26$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$26$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "longDescription", false, false, getElement(), getRuleCall$26$Delimiter(), optional);
		}
	}

	protected class Keyword$27$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$27$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$27$Delimiter(), optional);
		}
	}

	protected class Group$28$Consumer extends OptionalGroupConsumer {
		
		protected Group$28$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$29$Consumer);
			acceptor.accept(assignment$30$Consumer);
			acceptor.accept(keyword$32$Consumer);
		}
	}

	protected class Keyword$29$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$29$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$29$Delimiter(), optional);
		}
	}

	protected class Assignment$30$Consumer extends AssignmentConsumer {
		
		protected Assignment$30$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$31$Consumer;
		}
	}

	protected class RuleCall$31$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$31$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(intConsumer, "serialVersionUID", false, false, getElement(), getRuleCall$31$Delimiter(), optional);
		}
	}

	protected class Keyword$32$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$32$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$32$Delimiter(), optional);
		}
	}

	protected class Group$33$Consumer extends OptionalGroupConsumer {
		
		protected Group$33$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$34$Consumer);
			acceptor.accept(keyword$36$Consumer);
		}
	}

	protected class Assignment$34$Consumer extends AssignmentConsumer {
		
		protected Assignment$34$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$35$Consumer;
		}
	}

	protected class Keyword$35$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$35$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "cloneable", false, true, getKeyword$35$Delimiter(), optional);
		}
	}

	protected class Keyword$36$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$36$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$36$Delimiter(), optional);
		}
	}

	protected class Assignment$37$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$37$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$38$Consumer;
		}
	}

	protected class RuleCall$38$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$38$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(featureConsumer, "features", true, false, false, getElement(), optional);
		}
	}

	protected class Group$39$Consumer extends OptionalGroupConsumer {
		
		protected Group$39$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$40$Consumer);
			acceptor.accept(assignment$41$Consumer);
			acceptor.accept(keyword$43$Consumer);
		}
	}

	protected class Keyword$40$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$40$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$40$Delimiter(), optional);
		}
	}

	protected class Assignment$41$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$41$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$42$Consumer;
		}
	}

	protected class RuleCall$42$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$42$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(featureConsumer, "features", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$43$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$43$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$43$Delimiter(), optional);
		}
	}

	protected class Group$44$Consumer extends OptionalGroupConsumer {
		
		protected Group$44$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$45$Consumer);
			acceptor.accept(assignment$46$Consumer);
		}
	}

	protected class Keyword$45$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$45$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$45$Delimiter(), optional);
		}
	}

	protected class Assignment$46$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$46$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$47$Consumer;
		}
	}

	protected class RuleCall$47$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$47$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(featureConsumer, "features", true, false, false, getElement(), optional);
		}
	}

	protected class Group$48$Consumer extends OptionalGroupConsumer {
		
		protected Group$48$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$49$Consumer);
			acceptor.accept(assignment$50$Consumer);
		}
	}

	protected class Keyword$49$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$49$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$49$Delimiter(), optional);
		}
	}

	protected class Assignment$50$Consumer extends MandatoryLoopAssignmentConsumer {
		
		protected Assignment$50$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$51$Consumer;
		}
	}

	protected class RuleCall$51$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$51$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(featureConsumer, "features", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$52$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$52$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$52$Delimiter(), optional);
		}
	}

	public Bug304681TestLanguageObjectConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$4$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$6$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$7$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$11$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$16$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$19$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$22$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$24$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$27$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$29$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$32$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$35$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$36$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$40$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$43$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$45$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$49$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$52$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$9$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$15$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$21$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$26$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$31$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public ObjectElements getRule() {
		return rule;
	}
	
	public void setRule(ObjectElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		alternatives$2$Consumer = new Alternatives$2$Consumer(rule.getAlternatives_0());
		assignment$3$Consumer = new Assignment$3$Consumer(rule.getEnabledAssignment_0_0());
		keyword$4$Consumer = new Keyword$4$Consumer(rule.getEnabledEnabledKeyword_0_0_0());
		assignment$5$Consumer = new Assignment$5$Consumer(rule.getAbstractAssignment_0_1());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.getAbstractAbstractKeyword_0_1_0());
		keyword$7$Consumer = new Keyword$7$Consumer(rule.getObjectKeyword_1());
		assignment$8$Consumer = new Assignment$8$Consumer(rule.getNameAssignment_2());
		ruleCall$9$Consumer = new RuleCall$9$Consumer(rule.getNameIDTerminalRuleCall_2_0());
		group$10$Consumer = new Group$10$Consumer(rule.getGroup_3());
		keyword$11$Consumer = new Keyword$11$Consumer(rule.getExtendsKeyword_3_0());
		assignment$12$Consumer = new Assignment$12$Consumer(rule.getParentAssignment_3_1());
		crossReference$13$Consumer = new CrossReference$13$Consumer(rule.getParentObjectCrossReference_3_1_0());
		keyword$16$Consumer = new Keyword$16$Consumer(rule.getLeftCurlyBracketKeyword_4());
		unorderedGroup$17$Consumer = new UnorderedGroup$17$Consumer(rule.getUnorderedGroup_5());
		group$18$Consumer = new Group$18$Consumer(rule.getGroup_5_0());
		keyword$19$Consumer = new Keyword$19$Consumer(rule.getShortDescriptionKeyword_5_0_0());
		assignment$20$Consumer = new Assignment$20$Consumer(rule.getShortDescriptionAssignment_5_0_1());
		ruleCall$21$Consumer = new RuleCall$21$Consumer(rule.getShortDescriptionSTRINGTerminalRuleCall_5_0_1_0());
		keyword$22$Consumer = new Keyword$22$Consumer(rule.getSemicolonKeyword_5_0_2());
		group$23$Consumer = new Group$23$Consumer(rule.getGroup_5_1());
		keyword$24$Consumer = new Keyword$24$Consumer(rule.getLongDescriptionKeyword_5_1_0());
		assignment$25$Consumer = new Assignment$25$Consumer(rule.getLongDescriptionAssignment_5_1_1());
		ruleCall$26$Consumer = new RuleCall$26$Consumer(rule.getLongDescriptionSTRINGTerminalRuleCall_5_1_1_0());
		keyword$27$Consumer = new Keyword$27$Consumer(rule.getSemicolonKeyword_5_1_2());
		group$28$Consumer = new Group$28$Consumer(rule.getGroup_5_2());
		keyword$29$Consumer = new Keyword$29$Consumer(rule.getSerialUIDKeyword_5_2_0());
		assignment$30$Consumer = new Assignment$30$Consumer(rule.getSerialVersionUIDAssignment_5_2_1());
		ruleCall$31$Consumer = new RuleCall$31$Consumer(rule.getSerialVersionUIDINTTerminalRuleCall_5_2_1_0());
		keyword$32$Consumer = new Keyword$32$Consumer(rule.getSemicolonKeyword_5_2_2());
		group$33$Consumer = new Group$33$Consumer(rule.getGroup_5_3());
		assignment$34$Consumer = new Assignment$34$Consumer(rule.getCloneableAssignment_5_3_0());
		keyword$35$Consumer = new Keyword$35$Consumer(rule.getCloneableCloneableKeyword_5_3_0_0());
		keyword$36$Consumer = new Keyword$36$Consumer(rule.getSemicolonKeyword_5_3_1());
		assignment$37$Consumer = new Assignment$37$Consumer(rule.getFeaturesAssignment_5_4());
		ruleCall$38$Consumer = new RuleCall$38$Consumer(rule.getFeaturesFeatureParserRuleCall_5_4_0());
		group$39$Consumer = new Group$39$Consumer(rule.getGroup_5_5());
		keyword$40$Consumer = new Keyword$40$Consumer(rule.getBeforeKeyword_5_5_0());
		assignment$41$Consumer = new Assignment$41$Consumer(rule.getFeaturesAssignment_5_5_1());
		ruleCall$42$Consumer = new RuleCall$42$Consumer(rule.getFeaturesFeatureParserRuleCall_5_5_1_0());
		keyword$43$Consumer = new Keyword$43$Consumer(rule.getAfterKeyword_5_5_2());
		group$44$Consumer = new Group$44$Consumer(rule.getGroup_5_6());
		keyword$45$Consumer = new Keyword$45$Consumer(rule.getOptionalLoopKeyword_5_6_0());
		assignment$46$Consumer = new Assignment$46$Consumer(rule.getFeaturesAssignment_5_6_1());
		ruleCall$47$Consumer = new RuleCall$47$Consumer(rule.getFeaturesFeatureParserRuleCall_5_6_1_0());
		group$48$Consumer = new Group$48$Consumer(rule.getGroup_5_7());
		keyword$49$Consumer = new Keyword$49$Consumer(rule.getMandatoryLoopKeyword_5_7_0());
		assignment$50$Consumer = new Assignment$50$Consumer(rule.getFeaturesAssignment_5_7_1());
		ruleCall$51$Consumer = new RuleCall$51$Consumer(rule.getFeaturesFeatureParserRuleCall_5_7_1_0());
		keyword$52$Consumer = new Keyword$52$Consumer(rule.getRightCurlyBracketKeyword_6());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setFeatureConsumer(INonTerminalConsumer featureConsumer) {
		this.featureConsumer = featureConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setIntConsumer(ITerminalConsumer intConsumer) {
		this.intConsumer = intConsumer;
	}
	
	public void setStringConsumer(ITerminalConsumer stringConsumer) {
		this.stringConsumer = stringConsumer;
	}
	
	public ICharacterClass getKeyword$4$Delimiter() {
		return keyword$4$Delimiter;
	}
	
	public void setKeyword$4$Delimiter(ICharacterClass characterClass) {
		keyword$4$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$6$Delimiter() {
		return keyword$6$Delimiter;
	}
	
	public void setKeyword$6$Delimiter(ICharacterClass characterClass) {
		keyword$6$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$7$Delimiter() {
		return keyword$7$Delimiter;
	}
	
	public void setKeyword$7$Delimiter(ICharacterClass characterClass) {
		keyword$7$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$11$Delimiter() {
		return keyword$11$Delimiter;
	}
	
	public void setKeyword$11$Delimiter(ICharacterClass characterClass) {
		keyword$11$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$16$Delimiter() {
		return keyword$16$Delimiter;
	}
	
	public void setKeyword$16$Delimiter(ICharacterClass characterClass) {
		keyword$16$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$19$Delimiter() {
		return keyword$19$Delimiter;
	}
	
	public void setKeyword$19$Delimiter(ICharacterClass characterClass) {
		keyword$19$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$22$Delimiter() {
		return keyword$22$Delimiter;
	}
	
	public void setKeyword$22$Delimiter(ICharacterClass characterClass) {
		keyword$22$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$24$Delimiter() {
		return keyword$24$Delimiter;
	}
	
	public void setKeyword$24$Delimiter(ICharacterClass characterClass) {
		keyword$24$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$27$Delimiter() {
		return keyword$27$Delimiter;
	}
	
	public void setKeyword$27$Delimiter(ICharacterClass characterClass) {
		keyword$27$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$29$Delimiter() {
		return keyword$29$Delimiter;
	}
	
	public void setKeyword$29$Delimiter(ICharacterClass characterClass) {
		keyword$29$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$32$Delimiter() {
		return keyword$32$Delimiter;
	}
	
	public void setKeyword$32$Delimiter(ICharacterClass characterClass) {
		keyword$32$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$35$Delimiter() {
		return keyword$35$Delimiter;
	}
	
	public void setKeyword$35$Delimiter(ICharacterClass characterClass) {
		keyword$35$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$36$Delimiter() {
		return keyword$36$Delimiter;
	}
	
	public void setKeyword$36$Delimiter(ICharacterClass characterClass) {
		keyword$36$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$40$Delimiter() {
		return keyword$40$Delimiter;
	}
	
	public void setKeyword$40$Delimiter(ICharacterClass characterClass) {
		keyword$40$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$43$Delimiter() {
		return keyword$43$Delimiter;
	}
	
	public void setKeyword$43$Delimiter(ICharacterClass characterClass) {
		keyword$43$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$45$Delimiter() {
		return keyword$45$Delimiter;
	}
	
	public void setKeyword$45$Delimiter(ICharacterClass characterClass) {
		keyword$45$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$49$Delimiter() {
		return keyword$49$Delimiter;
	}
	
	public void setKeyword$49$Delimiter(ICharacterClass characterClass) {
		keyword$49$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$52$Delimiter() {
		return keyword$52$Delimiter;
	}
	
	public void setKeyword$52$Delimiter(ICharacterClass characterClass) {
		keyword$52$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$9$Delimiter() {
		return ruleCall$9$Delimiter;
	}
	
	public void setRuleCall$9$Delimiter(ISequenceMatcher matcher) {
		ruleCall$9$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$15$Delimiter() {
		return ruleCall$15$Delimiter;
	}
	
	public void setRuleCall$15$Delimiter(ISequenceMatcher matcher) {
		ruleCall$15$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$21$Delimiter() {
		return ruleCall$21$Delimiter;
	}
	
	public void setRuleCall$21$Delimiter(ISequenceMatcher matcher) {
		ruleCall$21$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$26$Delimiter() {
		return ruleCall$26$Delimiter;
	}
	
	public void setRuleCall$26$Delimiter(ISequenceMatcher matcher) {
		ruleCall$26$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$31$Delimiter() {
		return ruleCall$31$Delimiter;
	}
	
	public void setRuleCall$31$Delimiter(ISequenceMatcher matcher) {
		ruleCall$31$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
