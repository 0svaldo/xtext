/*
* generated by Xtext
*/
grammar InternalLocationProviderTestLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipse.xtext.ui.tests.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.xtext.ui.tests.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.tests.services.LocationProviderTestLanguageGrammarAccess;

}

@parser::members {
 
 	private LocationProviderTestLanguageGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(LocationProviderTestLanguageGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getElementsAssignment()); }
(rule__Model__ElementsAssignment)*
{ after(grammarAccess.getModelAccess().getElementsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElement
entryRuleElement 
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementAccess().getGroup()); }
(rule__Element__Group__0)
{ after(grammarAccess.getElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Element__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getElementKeyword_0()); }

	'element' 

{ after(grammarAccess.getElementAccess().getElementKeyword_0()); }
)

	rule__Element__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getNameAssignment_1()); }
(rule__Element__NameAssignment_1)
{ after(grammarAccess.getElementAccess().getNameAssignment_1()); }
)

	rule__Element__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getGroup_2()); }
(rule__Element__Group_2__0)?
{ after(grammarAccess.getElementAccess().getGroup_2()); }
)

	rule__Element__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getGroup_3()); }
(rule__Element__Group_3__0)*
{ after(grammarAccess.getElementAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Element__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getSinglerefKeyword_2_0()); }

	'singleref' 

{ after(grammarAccess.getElementAccess().getSinglerefKeyword_2_0()); }
)

	rule__Element__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getSinglerefAssignment_2_1()); }
(rule__Element__SinglerefAssignment_2_1)
{ after(grammarAccess.getElementAccess().getSinglerefAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Element__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getMultirefKeyword_3_0()); }

	'multiref' 

{ after(grammarAccess.getElementAccess().getMultirefKeyword_3_0()); }
)

	rule__Element__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getMultirefsAssignment_3_1()); }
(rule__Element__MultirefsAssignment_3_1)
{ after(grammarAccess.getElementAccess().getMultirefsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__ElementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getElementsElementParserRuleCall_0()); }
	ruleElement{ after(grammarAccess.getModelAccess().getElementsElementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Element__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getElementAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Element__SinglerefAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getSinglerefElementCrossReference_2_1_0()); }
(
{ before(grammarAccess.getElementAccess().getSinglerefElementIDTerminalRuleCall_2_1_0_1()); }
	RULE_ID{ after(grammarAccess.getElementAccess().getSinglerefElementIDTerminalRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getElementAccess().getSinglerefElementCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Element__MultirefsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getMultirefsElementCrossReference_3_1_0()); }
(
{ before(grammarAccess.getElementAccess().getMultirefsElementIDTerminalRuleCall_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getElementAccess().getMultirefsElementIDTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getElementAccess().getMultirefsElementCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


