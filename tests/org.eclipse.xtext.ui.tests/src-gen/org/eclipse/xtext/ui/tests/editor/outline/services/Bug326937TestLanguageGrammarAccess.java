/*
* generated by Xtext
*/

package org.eclipse.xtext.ui.tests.editor.outline.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class Bug326937TestLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "A");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cContentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cContentsAorBParserRuleCall_2_1_0 = (RuleCall)cContentsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//A:
		//	"A" name=ID ("{" contents+=AorB* "}")?;
		public ParserRule getRule() { return rule; }

		//"A" name=ID ("{" contents+=AorB* "}")?
		public Group getGroup() { return cGroup; }

		//"A"
		public Keyword getAKeyword_0() { return cAKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("{" contents+=AorB* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//contents+=AorB*
		public Assignment getContentsAssignment_2_1() { return cContentsAssignment_2_1; }

		//AorB
		public RuleCall getContentsAorBParserRuleCall_2_1_0() { return cContentsAorBParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class AorBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AorB");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AorB:
		//	A | B;
		public ParserRule getRule() { return rule; }

		//A | B
		public Alternatives getAlternatives() { return cAlternatives; }

		//A
		public RuleCall getAParserRuleCall_0() { return cAParserRuleCall_0; }

		//B
		public RuleCall getBParserRuleCall_1() { return cBParserRuleCall_1; }
	}

	public class BElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "B");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//B:
		//	"B" name=ID;
		public ParserRule getRule() { return rule; }

		//"B" name=ID
		public Group getGroup() { return cGroup; }

		//"B"
		public Keyword getBKeyword_0() { return cBKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private AElements pA;
	private AorBElements pAorB;
	private BElements pB;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public Bug326937TestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//A:
	//	"A" name=ID ("{" contents+=AorB* "}")?;
	public AElements getAAccess() {
		return (pA != null) ? pA : (pA = new AElements());
	}
	
	public ParserRule getARule() {
		return getAAccess().getRule();
	}

	//AorB:
	//	A | B;
	public AorBElements getAorBAccess() {
		return (pAorB != null) ? pAorB : (pAorB = new AorBElements());
	}
	
	public ParserRule getAorBRule() {
		return getAorBAccess().getRule();
	}

	//B:
	//	"B" name=ID;
	public BElements getBAccess() {
		return (pB != null) ? pB : (pB = new BElements());
	}
	
	public ParserRule getBRule() {
		return getBAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
