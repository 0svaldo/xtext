/*
* generated by Xtext
*/
package org.eclipse.xtext.ui.tests.editor.contentassist.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.xtext.ui.tests.editor.contentassist.services.UnorderedGroupsTestLanguageGrammarAccess;

public class UnorderedGroupsTestLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private UnorderedGroupsTestLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.xtext.ui.tests.editor.contentassist.contentassist.antlr.internal.InternalUnorderedGroupsTestLanguageParser createParser() {
		org.eclipse.xtext.ui.tests.editor.contentassist.contentassist.antlr.internal.InternalUnorderedGroupsTestLanguageParser result = new org.eclipse.xtext.ui.tests.editor.contentassist.contentassist.antlr.internal.InternalUnorderedGroupsTestLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getVisibilityAlternatives_0_0_0(), "rule__Model__VisibilityAlternatives_0_0_0");
					put(grammarAccess.getModelAccess().getAlternatives_0_3(), "rule__Model__Alternatives_0_3");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getModelAccess().getVisibilityAssignment_0_0(), "rule__Model__VisibilityAssignment_0_0");
					put(grammarAccess.getModelAccess().getStaticAssignment_0_1(), "rule__Model__StaticAssignment_0_1");
					put(grammarAccess.getModelAccess().getSynchronizedAssignment_0_2(), "rule__Model__SynchronizedAssignment_0_2");
					put(grammarAccess.getModelAccess().getAbstractAssignment_0_3_0(), "rule__Model__AbstractAssignment_0_3_0");
					put(grammarAccess.getModelAccess().getFinalAssignment_0_3_1(), "rule__Model__FinalAssignment_0_3_1");
					put(grammarAccess.getModelAccess().getNameAssignment_2(), "rule__Model__NameAssignment_2");
					put(grammarAccess.getModelAccess().getUnorderedGroup_0(), "rule__Model__UnorderedGroup_0");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.xtext.ui.tests.editor.contentassist.contentassist.antlr.internal.InternalUnorderedGroupsTestLanguageParser typedParser = (org.eclipse.xtext.ui.tests.editor.contentassist.contentassist.antlr.internal.InternalUnorderedGroupsTestLanguageParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public UnorderedGroupsTestLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(UnorderedGroupsTestLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
