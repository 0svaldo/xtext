/*
* generated by Xtext
*/
package org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.ui.tests.editor.contentassist.services.Bug303200TestLanguageGrammarAccess.PostfixExpressionElements;

public final class Bug303200TestLanguagePostfixExpressionConsumer extends NonTerminalConsumer {

	private PostfixExpressionElements rule;	

	private INonTerminalConsumer listExpressionConsumer;

	private ITerminalConsumer ltConsumer;

	private INonTerminalConsumer primaryExpressionConsumer;

	private INonTerminalConsumer propertyOperatorConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer ruleCall$2$Consumer;

	private IElementConsumer alternatives$3$Consumer;

	private IElementConsumer group$4$Consumer;

	private IElementConsumer action$5$Consumer;

	private IElementConsumer ruleCall$7$Consumer;

	private IElementConsumer assignment$8$Consumer;

	private IElementConsumer ruleCall$9$Consumer;

	private IElementConsumer group$10$Consumer;

	private IElementConsumer action$11$Consumer;

	private IElementConsumer ruleCall$13$Consumer;

	private IElementConsumer keyword$14$Consumer;

	private IElementConsumer ruleCall$15$Consumer;

	private IElementConsumer group$16$Consumer;

	private IElementConsumer assignment$17$Consumer;

	private IElementConsumer ruleCall$18$Consumer;

	private IElementConsumer ruleCall$19$Consumer;

	private IElementConsumer keyword$20$Consumer;

	private ICharacterClass keyword$14$Delimiter;

	private ICharacterClass keyword$20$Delimiter;

	private ISequenceMatcher ruleCall$13$Delimiter;

	private ISequenceMatcher ruleCall$15$Delimiter;

	private ISequenceMatcher ruleCall$19$Delimiter;

	private ISequenceMatcher ruleCall$7$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(ruleCall$2$Consumer);
			acceptor.accept(alternatives$3$Consumer);
		}
	}

	protected class RuleCall$2$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$2$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(primaryExpressionConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class Alternatives$3$Consumer extends LoopAlternativesConsumer {
		
		protected Alternatives$3$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$4$Consumer);
			acceptor.accept(group$10$Consumer);
		}
	}

	protected class Group$4$Consumer extends GroupConsumer {
		
		protected Group$4$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(action$5$Consumer);
			acceptor.accept(ruleCall$7$Consumer);
			acceptor.accept(assignment$8$Consumer);
		}
	}

	protected class Action$5$Consumer extends ElementConsumer<Action> {
		
		protected Action$5$Consumer(final Action action) {
			super(action);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			consumeAction(getElement(), false);
			return SUCCESS;
		}
	}

	protected class RuleCall$7$Consumer extends LoopElementConsumer<RuleCall> {
		
		protected RuleCall$7$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(ltConsumer, null, false, false, getElement(), getRuleCall$7$Delimiter(), optional);
		}
	}

	protected class Assignment$8$Consumer extends AssignmentConsumer {
		
		protected Assignment$8$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$9$Consumer;
		}
	}

	protected class RuleCall$9$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$9$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(propertyOperatorConsumer, "property", false, false, false, getElement(), optional);
		}
	}

	protected class Group$10$Consumer extends GroupConsumer {
		
		protected Group$10$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(action$11$Consumer);
			acceptor.accept(ruleCall$13$Consumer);
			acceptor.accept(keyword$14$Consumer);
			acceptor.accept(ruleCall$15$Consumer);
			acceptor.accept(group$16$Consumer);
			acceptor.accept(keyword$20$Consumer);
		}
	}

	protected class Action$11$Consumer extends ElementConsumer<Action> {
		
		protected Action$11$Consumer(final Action action) {
			super(action);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			consumeAction(getElement(), false);
			return SUCCESS;
		}
	}

	protected class RuleCall$13$Consumer extends LoopElementConsumer<RuleCall> {
		
		protected RuleCall$13$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(ltConsumer, null, false, false, getElement(), getRuleCall$13$Delimiter(), optional);
		}
	}

	protected class Keyword$14$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$14$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$14$Delimiter(), optional);
		}
	}

	protected class RuleCall$15$Consumer extends LoopElementConsumer<RuleCall> {
		
		protected RuleCall$15$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(ltConsumer, null, false, false, getElement(), getRuleCall$15$Delimiter(), optional);
		}
	}

	protected class Group$16$Consumer extends OptionalGroupConsumer {
		
		protected Group$16$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$17$Consumer);
			acceptor.accept(ruleCall$19$Consumer);
		}
	}

	protected class Assignment$17$Consumer extends AssignmentConsumer {
		
		protected Assignment$17$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$18$Consumer;
		}
	}

	protected class RuleCall$18$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$18$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(listExpressionConsumer, "arguments", false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$19$Consumer extends LoopElementConsumer<RuleCall> {
		
		protected RuleCall$19$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(ltConsumer, null, false, false, getElement(), getRuleCall$19$Delimiter(), optional);
		}
	}

	protected class Keyword$20$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$20$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$20$Delimiter(), optional);
		}
	}

	public Bug303200TestLanguagePostfixExpressionConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$14$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$20$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$13$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$15$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$19$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$7$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public PostfixExpressionElements getRule() {
		return rule;
	}
	
	public void setRule(PostfixExpressionElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		ruleCall$2$Consumer = new RuleCall$2$Consumer(rule.getPrimaryExpressionParserRuleCall_0());
		alternatives$3$Consumer = new Alternatives$3$Consumer(rule.getAlternatives_1());
		group$4$Consumer = new Group$4$Consumer(rule.getGroup_1_0());
		action$5$Consumer = new Action$5$Consumer(rule.getPostfixExpressionExpressionAction_1_0_0());
		ruleCall$7$Consumer = new RuleCall$7$Consumer(rule.getLTTerminalRuleCall_1_0_1());
		assignment$8$Consumer = new Assignment$8$Consumer(rule.getPropertyAssignment_1_0_2());
		ruleCall$9$Consumer = new RuleCall$9$Consumer(rule.getPropertyPropertyOperatorParserRuleCall_1_0_2_0());
		group$10$Consumer = new Group$10$Consumer(rule.getGroup_1_1());
		action$11$Consumer = new Action$11$Consumer(rule.getInvocationExpressionAction_1_1_0());
		ruleCall$13$Consumer = new RuleCall$13$Consumer(rule.getLTTerminalRuleCall_1_1_1());
		keyword$14$Consumer = new Keyword$14$Consumer(rule.getLeftParenthesisKeyword_1_1_2());
		ruleCall$15$Consumer = new RuleCall$15$Consumer(rule.getLTTerminalRuleCall_1_1_3());
		group$16$Consumer = new Group$16$Consumer(rule.getGroup_1_1_4());
		assignment$17$Consumer = new Assignment$17$Consumer(rule.getArgumentsAssignment_1_1_4_0());
		ruleCall$18$Consumer = new RuleCall$18$Consumer(rule.getArgumentsListExpressionParserRuleCall_1_1_4_0_0());
		ruleCall$19$Consumer = new RuleCall$19$Consumer(rule.getLTTerminalRuleCall_1_1_4_1());
		keyword$20$Consumer = new Keyword$20$Consumer(rule.getRightParenthesisKeyword_1_1_5());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setListExpressionConsumer(INonTerminalConsumer listExpressionConsumer) {
		this.listExpressionConsumer = listExpressionConsumer;
	}
	
	public void setLtConsumer(ITerminalConsumer ltConsumer) {
		this.ltConsumer = ltConsumer;
	}
	
	public void setPrimaryExpressionConsumer(INonTerminalConsumer primaryExpressionConsumer) {
		this.primaryExpressionConsumer = primaryExpressionConsumer;
	}
	
	public void setPropertyOperatorConsumer(INonTerminalConsumer propertyOperatorConsumer) {
		this.propertyOperatorConsumer = propertyOperatorConsumer;
	}
	
	public ICharacterClass getKeyword$14$Delimiter() {
		return keyword$14$Delimiter;
	}
	
	public void setKeyword$14$Delimiter(ICharacterClass characterClass) {
		keyword$14$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$20$Delimiter() {
		return keyword$20$Delimiter;
	}
	
	public void setKeyword$20$Delimiter(ICharacterClass characterClass) {
		keyword$20$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$13$Delimiter() {
		return ruleCall$13$Delimiter;
	}
	
	public void setRuleCall$13$Delimiter(ISequenceMatcher matcher) {
		ruleCall$13$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$15$Delimiter() {
		return ruleCall$15$Delimiter;
	}
	
	public void setRuleCall$15$Delimiter(ISequenceMatcher matcher) {
		ruleCall$15$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$19$Delimiter() {
		return ruleCall$19$Delimiter;
	}
	
	public void setRuleCall$19$Delimiter(ISequenceMatcher matcher) {
		ruleCall$19$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$7$Delimiter() {
		return ruleCall$7$Delimiter;
	}
	
	public void setRuleCall$7$Delimiter(ISequenceMatcher matcher) {
		ruleCall$7$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
