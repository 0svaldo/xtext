/*
* generated by Xtext
*/
package org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.ui.tests.editor.contentassist.services.Bug303200TestLanguageGrammarAccess.ProgramElements;

public final class Bug303200TestLanguageProgramConsumer extends NonTerminalConsumer {

	private ProgramElements rule;	

	private ITerminalConsumer ltConsumer;

	private INonTerminalConsumer programDirectiveConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer action$2$Consumer;

	private IElementConsumer group$4$Consumer;

	private IElementConsumer ruleCall$5$Consumer;

	private IElementConsumer assignment$6$Consumer;

	private IElementConsumer ruleCall$7$Consumer;

	private IElementConsumer ruleCall$8$Consumer;

	private ISequenceMatcher ruleCall$8$Delimiter;

	private ISequenceMatcher ruleCall$5$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(action$2$Consumer);
			acceptor.accept(group$4$Consumer);
			acceptor.accept(ruleCall$8$Consumer);
		}
	}

	protected class Action$2$Consumer extends ElementConsumer<Action> {
		
		protected Action$2$Consumer(final Action action) {
			super(action);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			consumeAction(getElement(), false);
			return SUCCESS;
		}
	}

	protected class Group$4$Consumer extends LoopGroupConsumer {
		
		protected Group$4$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(ruleCall$5$Consumer);
			acceptor.accept(assignment$6$Consumer);
		}
	}

	protected class RuleCall$5$Consumer extends LoopElementConsumer<RuleCall> {
		
		protected RuleCall$5$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(ltConsumer, null, false, false, getElement(), getRuleCall$5$Delimiter(), optional);
		}
	}

	protected class Assignment$6$Consumer extends AssignmentConsumer {
		
		protected Assignment$6$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$7$Consumer;
		}
	}

	protected class RuleCall$7$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$7$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(programDirectiveConsumer, "directives", true, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$8$Consumer extends LoopElementConsumer<RuleCall> {
		
		protected RuleCall$8$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(ltConsumer, null, false, false, getElement(), getRuleCall$8$Delimiter(), optional);
		}
	}

	public Bug303200TestLanguageProgramConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		ruleCall$8$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$5$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public ProgramElements getRule() {
		return rule;
	}
	
	public void setRule(ProgramElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		action$2$Consumer = new Action$2$Consumer(rule.getProgramAction_0());
		group$4$Consumer = new Group$4$Consumer(rule.getGroup_1());
		ruleCall$5$Consumer = new RuleCall$5$Consumer(rule.getLTTerminalRuleCall_1_0());
		assignment$6$Consumer = new Assignment$6$Consumer(rule.getDirectivesAssignment_1_1());
		ruleCall$7$Consumer = new RuleCall$7$Consumer(rule.getDirectivesProgramDirectiveParserRuleCall_1_1_0());
		ruleCall$8$Consumer = new RuleCall$8$Consumer(rule.getLTTerminalRuleCall_2());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setLtConsumer(ITerminalConsumer ltConsumer) {
		this.ltConsumer = ltConsumer;
	}
	
	public void setProgramDirectiveConsumer(INonTerminalConsumer programDirectiveConsumer) {
		this.programDirectiveConsumer = programDirectiveConsumer;
	}
	
	public ISequenceMatcher getRuleCall$8$Delimiter() {
		return ruleCall$8$Delimiter;
	}
	
	public void setRuleCall$8$Delimiter(ISequenceMatcher matcher) {
		ruleCall$8$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$5$Delimiter() {
		return ruleCall$5$Delimiter;
	}
	
	public void setRuleCall$5$Delimiter(ISequenceMatcher matcher) {
		ruleCall$5$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
