/*
* generated by Xtext
*/
package org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.ui.tests.editor.contentassist.services.DatatypeRuleTestLanguageGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 
import org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.consumers.DatatypeRuleTestLanguageModelConsumer;
import org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.consumers.DatatypeRuleTestLanguageTypesConsumer;
import org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.consumers.DatatypeRuleTestLanguageTypeConsumer;
import org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.consumers.DatatypeRuleTestLanguageSimpleTypeConsumer;
import org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.consumers.DatatypeRuleTestLanguageCompositeTypeConsumer;
import org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.consumers.DatatypeRuleTestLanguageCompositeTypeEntryConsumer;
import org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.consumers.DatatypeRuleTestLanguageTypeIdConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class DatatypeRuleTestLanguageParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 
    private DatatypeRuleTestLanguageModelConsumer modelConsumer;
    private DatatypeRuleTestLanguageTypesConsumer typesConsumer;
    private DatatypeRuleTestLanguageTypeConsumer typeConsumer;
    private DatatypeRuleTestLanguageSimpleTypeConsumer simpleTypeConsumer;
    private DatatypeRuleTestLanguageCompositeTypeConsumer compositeTypeConsumer;
    private DatatypeRuleTestLanguageCompositeTypeEntryConsumer compositeTypeEntryConsumer;
    private DatatypeRuleTestLanguageTypeIdConsumer typeIdConsumer;

	private DatatypeRuleTestLanguageGrammarAccess grammarAccess;

	public DatatypeRuleTestLanguageParserConfiguration(IInternalParserConfiguration configuration, DatatypeRuleTestLanguageGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public DatatypeRuleTestLanguageModelConsumer getRootConsumer() {
		return modelConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		modelConsumer = new DatatypeRuleTestLanguageModelConsumer(
    		this, null
    	);
		typesConsumer = new DatatypeRuleTestLanguageTypesConsumer(
    		this, null
    	);
		typeConsumer = new DatatypeRuleTestLanguageTypeConsumer(
    		this, null
    	);
		simpleTypeConsumer = new DatatypeRuleTestLanguageSimpleTypeConsumer(
    		this, null
    	);
		compositeTypeConsumer = new DatatypeRuleTestLanguageCompositeTypeConsumer(
    		this, null
    	);
		compositeTypeEntryConsumer = new DatatypeRuleTestLanguageCompositeTypeEntryConsumer(
    		this, null
    	);
		typeIdConsumer = new DatatypeRuleTestLanguageTypeIdConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getModelConsumer().setRule(grammarAccess.getModelAccess());
		getTypesConsumer().setRule(grammarAccess.getTypesAccess());
		getTypeConsumer().setRule(grammarAccess.getTypeAccess());
		getSimpleTypeConsumer().setRule(grammarAccess.getSimpleTypeAccess());
		getCompositeTypeConsumer().setRule(grammarAccess.getCompositeTypeAccess());
		getCompositeTypeEntryConsumer().setRule(grammarAccess.getCompositeTypeEntryAccess());
		getTypeIdConsumer().setRule(grammarAccess.getTypeIdAccess());
		getIdConsumer().setRule(grammarAccess.getIDRule());
		getIntConsumer().setRule(grammarAccess.getINTRule());
		getStringConsumer().setRule(grammarAccess.getSTRINGRule());
		getMlCommentConsumer().setRule(grammarAccess.getML_COMMENTRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getAnyOtherConsumer().setRule(grammarAccess.getANY_OTHERRule());


		getModelConsumer().setTypesConsumer(getTypesConsumer());

		getTypesConsumer().setTypeConsumer(getTypeConsumer());

		getTypeConsumer().setCompositeTypeConsumer(getCompositeTypeConsumer());
		getTypeConsumer().setSimpleTypeConsumer(getSimpleTypeConsumer());

		getSimpleTypeConsumer().setIdConsumer(getIdConsumer());

		getCompositeTypeConsumer().setCompositeTypeEntryConsumer(getCompositeTypeEntryConsumer());
		getCompositeTypeConsumer().setIdConsumer(getIdConsumer());

		getCompositeTypeEntryConsumer().setTypeIdConsumer(getTypeIdConsumer());

		getTypeIdConsumer().setIdConsumer(getIdConsumer());
		getTypeIdConsumer().setTypeIdConsumer(getTypeIdConsumer());

		getTypesConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.DatatypeRuleTestLanguageDelimiters.keyword$7$Delimiter);
		getSimpleTypeConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.DatatypeRuleTestLanguageDelimiters.keyword$7$Delimiter);
		getSimpleTypeConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.DatatypeRuleTestLanguageDelimiters.keyword$21$Delimiter);
		getSimpleTypeConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.DatatypeRuleTestLanguageDelimiters.ruleCall$20$Delimiter);
		getCompositeTypeConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.DatatypeRuleTestLanguageDelimiters.keyword$7$Delimiter);
		getCompositeTypeConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.DatatypeRuleTestLanguageDelimiters.keyword$7$Delimiter);
		getCompositeTypeConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.DatatypeRuleTestLanguageDelimiters.keyword$21$Delimiter);
		getCompositeTypeConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.DatatypeRuleTestLanguageDelimiters.ruleCall$20$Delimiter);
		getTypeIdConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.DatatypeRuleTestLanguageDelimiters.keyword$21$Delimiter);
		getTypeIdConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.DatatypeRuleTestLanguageDelimiters.keyword$21$Delimiter);
		getTypeIdConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.DatatypeRuleTestLanguageDelimiters.keyword$21$Delimiter);
		getTypeIdConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.DatatypeRuleTestLanguageDelimiters.ruleCall$20$Delimiter);
	}
	
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public DatatypeRuleTestLanguageModelConsumer getModelConsumer() {
    	return modelConsumer;
    }

    public DatatypeRuleTestLanguageTypesConsumer getTypesConsumer() {
    	return typesConsumer;
    }

    public DatatypeRuleTestLanguageTypeConsumer getTypeConsumer() {
    	return typeConsumer;
    }

    public DatatypeRuleTestLanguageSimpleTypeConsumer getSimpleTypeConsumer() {
    	return simpleTypeConsumer;
    }

    public DatatypeRuleTestLanguageCompositeTypeConsumer getCompositeTypeConsumer() {
    	return compositeTypeConsumer;
    }

    public DatatypeRuleTestLanguageCompositeTypeEntryConsumer getCompositeTypeEntryConsumer() {
    	return compositeTypeEntryConsumer;
    }

    public DatatypeRuleTestLanguageTypeIdConsumer getTypeIdConsumer() {
    	return typeIdConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
