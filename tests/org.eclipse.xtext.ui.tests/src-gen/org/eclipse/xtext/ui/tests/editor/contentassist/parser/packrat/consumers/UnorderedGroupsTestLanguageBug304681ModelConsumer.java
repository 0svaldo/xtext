/*
* generated by Xtext
*/
package org.eclipse.xtext.ui.tests.editor.contentassist.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.UnorderedGroup;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.ui.tests.editor.contentassist.services.UnorderedGroupsTestLanguageGrammarAccess.Bug304681ModelElements;

public final class UnorderedGroupsTestLanguageBug304681ModelConsumer extends NonTerminalConsumer {

	private Bug304681ModelElements rule;	

	private INonTerminalConsumer bug304681FeatureConsumer;

	private ITerminalConsumer stringConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer keyword$2$Consumer;

	private IElementConsumer unorderedGroup$3$Consumer;

	private IElementConsumer group$4$Consumer;

	private IElementConsumer keyword$5$Consumer;

	private IElementConsumer assignment$6$Consumer;

	private IElementConsumer ruleCall$7$Consumer;

	private IElementConsumer keyword$8$Consumer;

	private IElementConsumer group$9$Consumer;

	private IElementConsumer keyword$10$Consumer;

	private IElementConsumer assignment$11$Consumer;

	private IElementConsumer ruleCall$12$Consumer;

	private IElementConsumer keyword$13$Consumer;

	private IElementConsumer group$14$Consumer;

	private IElementConsumer keyword$15$Consumer;

	private IElementConsumer assignment$16$Consumer;

	private IElementConsumer ruleCall$17$Consumer;

	private IElementConsumer keyword$18$Consumer;

	private IElementConsumer group$19$Consumer;

	private IElementConsumer assignment$20$Consumer;

	private IElementConsumer keyword$21$Consumer;

	private IElementConsumer keyword$22$Consumer;

	private IElementConsumer assignment$23$Consumer;

	private IElementConsumer ruleCall$24$Consumer;

	private IElementConsumer keyword$25$Consumer;

	private ICharacterClass keyword$2$Delimiter;

	private ICharacterClass keyword$5$Delimiter;

	private ICharacterClass keyword$8$Delimiter;

	private ICharacterClass keyword$10$Delimiter;

	private ICharacterClass keyword$13$Delimiter;

	private ICharacterClass keyword$15$Delimiter;

	private ICharacterClass keyword$18$Delimiter;

	private ICharacterClass keyword$21$Delimiter;

	private ICharacterClass keyword$22$Delimiter;

	private ICharacterClass keyword$25$Delimiter;

	private ISequenceMatcher ruleCall$7$Delimiter;

	private ISequenceMatcher ruleCall$12$Delimiter;

	private ISequenceMatcher ruleCall$17$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$2$Consumer);
			acceptor.accept(unorderedGroup$3$Consumer);
			acceptor.accept(keyword$25$Consumer);
		}
	}

	protected class Keyword$2$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$2$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$2$Delimiter(), optional);
		}
	}

	protected class UnorderedGroup$3$Consumer extends UnorderedGroupConsumer {
		
		protected UnorderedGroup$3$Consumer(final UnorderedGroup unorderedGroup) {
			super(unorderedGroup);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(group$4$Consumer);
			acceptor.accept(group$9$Consumer);
			acceptor.accept(group$14$Consumer);
			acceptor.accept(group$19$Consumer);
			acceptor.accept(assignment$23$Consumer);
		}
	}

	protected class Group$4$Consumer extends OptionalGroupConsumer {
		
		protected Group$4$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$5$Consumer);
			acceptor.accept(assignment$6$Consumer);
			acceptor.accept(keyword$8$Consumer);
		}
	}

	protected class Keyword$5$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$5$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$5$Delimiter(), optional);
		}
	}

	protected class Assignment$6$Consumer extends AssignmentConsumer {
		
		protected Assignment$6$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$7$Consumer;
		}
	}

	protected class RuleCall$7$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$7$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "shortDescription", false, false, getElement(), getRuleCall$7$Delimiter(), optional);
		}
	}

	protected class Keyword$8$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$8$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$8$Delimiter(), optional);
		}
	}

	protected class Group$9$Consumer extends OptionalGroupConsumer {
		
		protected Group$9$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$10$Consumer);
			acceptor.accept(assignment$11$Consumer);
			acceptor.accept(keyword$13$Consumer);
		}
	}

	protected class Keyword$10$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$10$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$10$Delimiter(), optional);
		}
	}

	protected class Assignment$11$Consumer extends AssignmentConsumer {
		
		protected Assignment$11$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$12$Consumer;
		}
	}

	protected class RuleCall$12$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$12$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "longDescription", false, false, getElement(), getRuleCall$12$Delimiter(), optional);
		}
	}

	protected class Keyword$13$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$13$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$13$Delimiter(), optional);
		}
	}

	protected class Group$14$Consumer extends OptionalGroupConsumer {
		
		protected Group$14$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$15$Consumer);
			acceptor.accept(assignment$16$Consumer);
			acceptor.accept(keyword$18$Consumer);
		}
	}

	protected class Keyword$15$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$15$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$15$Delimiter(), optional);
		}
	}

	protected class Assignment$16$Consumer extends AssignmentConsumer {
		
		protected Assignment$16$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$17$Consumer;
		}
	}

	protected class RuleCall$17$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$17$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(stringConsumer, "uid", false, false, getElement(), getRuleCall$17$Delimiter(), optional);
		}
	}

	protected class Keyword$18$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$18$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$18$Delimiter(), optional);
		}
	}

	protected class Group$19$Consumer extends OptionalGroupConsumer {
		
		protected Group$19$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$20$Consumer);
			acceptor.accept(keyword$22$Consumer);
		}
	}

	protected class Assignment$20$Consumer extends AssignmentConsumer {
		
		protected Assignment$20$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$21$Consumer;
		}
	}

	protected class Keyword$21$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$21$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "flag", false, true, getKeyword$21$Delimiter(), optional);
		}
	}

	protected class Keyword$22$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$22$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$22$Delimiter(), optional);
		}
	}

	protected class Assignment$23$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$23$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$24$Consumer;
		}
	}

	protected class RuleCall$24$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$24$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(bug304681FeatureConsumer, "features", true, false, false, getElement(), optional);
		}
	}

	protected class Keyword$25$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$25$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$25$Delimiter(), optional);
		}
	}

	public UnorderedGroupsTestLanguageBug304681ModelConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$2$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$5$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$8$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$10$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$13$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$15$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$18$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$21$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$22$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$25$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$7$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$12$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$17$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public Bug304681ModelElements getRule() {
		return rule;
	}
	
	public void setRule(Bug304681ModelElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		keyword$2$Consumer = new Keyword$2$Consumer(rule.getLeftCurlyBracketKeyword_0());
		unorderedGroup$3$Consumer = new UnorderedGroup$3$Consumer(rule.getUnorderedGroup_1());
		group$4$Consumer = new Group$4$Consumer(rule.getGroup_1_0());
		keyword$5$Consumer = new Keyword$5$Consumer(rule.getShortKeyword_1_0_0());
		assignment$6$Consumer = new Assignment$6$Consumer(rule.getShortDescriptionAssignment_1_0_1());
		ruleCall$7$Consumer = new RuleCall$7$Consumer(rule.getShortDescriptionSTRINGTerminalRuleCall_1_0_1_0());
		keyword$8$Consumer = new Keyword$8$Consumer(rule.getSemicolonKeyword_1_0_2());
		group$9$Consumer = new Group$9$Consumer(rule.getGroup_1_1());
		keyword$10$Consumer = new Keyword$10$Consumer(rule.getLongKeyword_1_1_0());
		assignment$11$Consumer = new Assignment$11$Consumer(rule.getLongDescriptionAssignment_1_1_1());
		ruleCall$12$Consumer = new RuleCall$12$Consumer(rule.getLongDescriptionSTRINGTerminalRuleCall_1_1_1_0());
		keyword$13$Consumer = new Keyword$13$Consumer(rule.getSemicolonKeyword_1_1_2());
		group$14$Consumer = new Group$14$Consumer(rule.getGroup_1_2());
		keyword$15$Consumer = new Keyword$15$Consumer(rule.getUidKeyword_1_2_0());
		assignment$16$Consumer = new Assignment$16$Consumer(rule.getUidAssignment_1_2_1());
		ruleCall$17$Consumer = new RuleCall$17$Consumer(rule.getUidSTRINGTerminalRuleCall_1_2_1_0());
		keyword$18$Consumer = new Keyword$18$Consumer(rule.getSemicolonKeyword_1_2_2());
		group$19$Consumer = new Group$19$Consumer(rule.getGroup_1_3());
		assignment$20$Consumer = new Assignment$20$Consumer(rule.getFlagAssignment_1_3_0());
		keyword$21$Consumer = new Keyword$21$Consumer(rule.getFlagFlagKeyword_1_3_0_0());
		keyword$22$Consumer = new Keyword$22$Consumer(rule.getSemicolonKeyword_1_3_1());
		assignment$23$Consumer = new Assignment$23$Consumer(rule.getFeaturesAssignment_1_4());
		ruleCall$24$Consumer = new RuleCall$24$Consumer(rule.getFeaturesBug304681FeatureParserRuleCall_1_4_0());
		keyword$25$Consumer = new Keyword$25$Consumer(rule.getRightCurlyBracketKeyword_2());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setBug304681FeatureConsumer(INonTerminalConsumer bug304681FeatureConsumer) {
		this.bug304681FeatureConsumer = bug304681FeatureConsumer;
	}
	
	public void setStringConsumer(ITerminalConsumer stringConsumer) {
		this.stringConsumer = stringConsumer;
	}
	
	public ICharacterClass getKeyword$2$Delimiter() {
		return keyword$2$Delimiter;
	}
	
	public void setKeyword$2$Delimiter(ICharacterClass characterClass) {
		keyword$2$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$5$Delimiter() {
		return keyword$5$Delimiter;
	}
	
	public void setKeyword$5$Delimiter(ICharacterClass characterClass) {
		keyword$5$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$8$Delimiter() {
		return keyword$8$Delimiter;
	}
	
	public void setKeyword$8$Delimiter(ICharacterClass characterClass) {
		keyword$8$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$10$Delimiter() {
		return keyword$10$Delimiter;
	}
	
	public void setKeyword$10$Delimiter(ICharacterClass characterClass) {
		keyword$10$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$13$Delimiter() {
		return keyword$13$Delimiter;
	}
	
	public void setKeyword$13$Delimiter(ICharacterClass characterClass) {
		keyword$13$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$15$Delimiter() {
		return keyword$15$Delimiter;
	}
	
	public void setKeyword$15$Delimiter(ICharacterClass characterClass) {
		keyword$15$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$18$Delimiter() {
		return keyword$18$Delimiter;
	}
	
	public void setKeyword$18$Delimiter(ICharacterClass characterClass) {
		keyword$18$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$21$Delimiter() {
		return keyword$21$Delimiter;
	}
	
	public void setKeyword$21$Delimiter(ICharacterClass characterClass) {
		keyword$21$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$22$Delimiter() {
		return keyword$22$Delimiter;
	}
	
	public void setKeyword$22$Delimiter(ICharacterClass characterClass) {
		keyword$22$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$25$Delimiter() {
		return keyword$25$Delimiter;
	}
	
	public void setKeyword$25$Delimiter(ICharacterClass characterClass) {
		keyword$25$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$7$Delimiter() {
		return ruleCall$7$Delimiter;
	}
	
	public void setRuleCall$7$Delimiter(ISequenceMatcher matcher) {
		ruleCall$7$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$12$Delimiter() {
		return ruleCall$12$Delimiter;
	}
	
	public void setRuleCall$12$Delimiter(ISequenceMatcher matcher) {
		ruleCall$12$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$17$Delimiter() {
		return ruleCall$17$Delimiter;
	}
	
	public void setRuleCall$17$Delimiter(ISequenceMatcher matcher) {
		ruleCall$17$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
