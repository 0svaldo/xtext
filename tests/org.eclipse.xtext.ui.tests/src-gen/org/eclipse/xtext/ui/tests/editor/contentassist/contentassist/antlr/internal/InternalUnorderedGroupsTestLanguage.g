/*
* generated by Xtext
*/
grammar InternalUnorderedGroupsTestLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipse.xtext.ui.tests.editor.contentassist.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.xtext.ui.tests.editor.contentassist.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.tests.editor.contentassist.services.UnorderedGroupsTestLanguageGrammarAccess;

}

@parser::members {
 
 	private UnorderedGroupsTestLanguageGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(UnorderedGroupsTestLanguageGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Model__VisibilityAlternatives_0_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getVisibilityPublicKeyword_0_0_0_0()); }

	'public' 

{ after(grammarAccess.getModelAccess().getVisibilityPublicKeyword_0_0_0_0()); }
)

    |(
{ before(grammarAccess.getModelAccess().getVisibilityPrivateKeyword_0_0_0_1()); }

	'private' 

{ after(grammarAccess.getModelAccess().getVisibilityPrivateKeyword_0_0_0_1()); }
)

    |(
{ before(grammarAccess.getModelAccess().getVisibilityProtectedKeyword_0_0_0_2()); }

	'protected' 

{ after(grammarAccess.getModelAccess().getVisibilityProtectedKeyword_0_0_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Alternatives_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getAbstractAssignment_0_3_0()); }
(rule__Model__AbstractAssignment_0_3_0)
{ after(grammarAccess.getModelAccess().getAbstractAssignment_0_3_0()); }
)

    |(
{ before(grammarAccess.getModelAccess().getFinalAssignment_0_3_1()); }
(rule__Model__FinalAssignment_0_3_1)
{ after(grammarAccess.getModelAccess().getFinalAssignment_0_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getUnorderedGroup_0()); }
(rule__Model__UnorderedGroup_0)
{ after(grammarAccess.getModelAccess().getUnorderedGroup_0()); }
)

	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getClassKeyword_1()); }

	'class' 

{ after(grammarAccess.getModelAccess().getClassKeyword_1()); }
)

	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNameAssignment_2()); }
(rule__Model__NameAssignment_2)
{ after(grammarAccess.getModelAccess().getNameAssignment_2()); }
)

	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_3()); }
)

	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getModelAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}













rule__Model__UnorderedGroup_0
    @init {
		int stackSize = keepStackSize();
		boolean[] pred_0 = new boolean[4];
    }
:
	(
		(

			( 
				{!pred_0[0]}?=>(
					{ 
	 				  pred_0[0] = true;
	 				  
	 				}
					(rule__Model__VisibilityAssignment_0_0)
 				)
			)  |

			( 
				{!pred_0[1]}?=>(
					{ 
	 				  pred_0[1] = true;
	 				  
	 				}
					(rule__Model__StaticAssignment_0_1)
 				)
			)  |

			( 
				{!pred_0[2]}?=>(
					{ 
	 				  pred_0[2] = true;
	 				  
	 				}
					(rule__Model__SynchronizedAssignment_0_2)
 				)
			)  |

			( 
				{!pred_0[3]}?=>(
					{ 
	 				  pred_0[3] = true;
	 				  
	 				}
					(rule__Model__Alternatives_0_3)
 				)
			)  

		)*	
	)
;
finally {
	restoreStackSize(stackSize);
}



rule__Model__VisibilityAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getVisibilityAlternatives_0_0_0()); }
(rule__Model__VisibilityAlternatives_0_0_0)
{ after(grammarAccess.getModelAccess().getVisibilityAlternatives_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__StaticAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getStaticStaticKeyword_0_1_0()); }
(
{ before(grammarAccess.getModelAccess().getStaticStaticKeyword_0_1_0()); }

	'static' 

{ after(grammarAccess.getModelAccess().getStaticStaticKeyword_0_1_0()); }
)

{ after(grammarAccess.getModelAccess().getStaticStaticKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__SynchronizedAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSynchronizedSynchronizedKeyword_0_2_0()); }
(
{ before(grammarAccess.getModelAccess().getSynchronizedSynchronizedKeyword_0_2_0()); }

	'synchronized' 

{ after(grammarAccess.getModelAccess().getSynchronizedSynchronizedKeyword_0_2_0()); }
)

{ after(grammarAccess.getModelAccess().getSynchronizedSynchronizedKeyword_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__AbstractAssignment_0_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getAbstractAbstractKeyword_0_3_0_0()); }
(
{ before(grammarAccess.getModelAccess().getAbstractAbstractKeyword_0_3_0_0()); }

	'abstract' 

{ after(grammarAccess.getModelAccess().getAbstractAbstractKeyword_0_3_0_0()); }
)

{ after(grammarAccess.getModelAccess().getAbstractAbstractKeyword_0_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__FinalAssignment_0_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getFinalFinalKeyword_0_3_1_0()); }
(
{ before(grammarAccess.getModelAccess().getFinalFinalKeyword_0_3_1_0()); }

	'final' 

{ after(grammarAccess.getModelAccess().getFinalFinalKeyword_0_3_1_0()); }
)

{ after(grammarAccess.getModelAccess().getFinalFinalKeyword_0_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


