/*
 * generated by Xtext
 */
package org.eclipse.xtext.ui.tests.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.ui.tests.foo.File;
import org.eclipse.xtext.ui.tests.foo.FooPackage;
import org.eclipse.xtext.ui.tests.foo.Stuff;
import org.eclipse.xtext.ui.tests.services.TestLanguageGrammarAccess;

@SuppressWarnings("all")
public class TestLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TestLanguageGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == FooPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case FooPackage.FILE:
				sequence_File(context, (File) semanticObject); 
				return; 
			case FooPackage.STUFF:
				sequence_Stuff(context, (Stuff) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     stuff+=Stuff*
	 */
	protected void sequence_File(EObject context, File semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID refs=[Stuff|ID]?)
	 */
	protected void sequence_Stuff(EObject context, Stuff semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
