/*******************************************************************************
 * Copyright (c) 2010 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
grammar org.eclipse.xtext.xtend2.Xtend2 with org.eclipse.xtext.xbase.Xbase

import "platform:/resource/org.eclipse.xtext.xtend2/model/Xtend2.ecore"
import "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.ecore" as xbase
import "platform:/resource/org.eclipse.xtext.xbase/model/Xtype.ecore" as xtype
import "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.ecore" as types

File returns XtendFile : 
    ('package' package=QualifiedName)?
	(imports+=Import)*
	(classes+=Class)*
;

Import returns XtendImport : 
	'import' importedNamespace=QualifiedNameWithWildCard
;

QualifiedNameWithWildCard :
	QualifiedName  ('.' '*')?;
	
Class  returns XtendClass :
   ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')? "class" name=ID ("extends" superTypes+=JvmTypeReference)? ('implements' superTypes+=JvmTypeReference)* '{'
	   (members+=Member)*
   '}';

Member returns types::JvmMember:
	Function;

Function returns XtendFunction :
	('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
	(returnType=JvmTypeReference)? name=ID '(' (parameters+=JvmFormalParameter (',' parameters+=JvmFormalParameter)*)? ')'
		(expression=XExpression | ';');
		
XStringLiteral returns xbase::XExpression:
	{xbase::XStringLiteral} value=STRING |
	RichString
;
		
RichString returns xbase::XExpression:
	{RichStringLiteral} value=RICH_TEXT |
	{RichString} elements+=RichStringLiteralStart (elements+=RichStringPart elements+=RichStringLiteralInbetween)* elements+=RichStringPart elements+=RichStringLiteralEnd
;

RichStringLiteralStart returns xbase::XExpression :
	{RichStringLiteral} value=RICH_TEXT_START
; 

RichStringLiteralInbetween returns xbase::XExpression :
	{RichStringLiteral} value=RICH_TEXT_INBETWEEN
; 

RichStringLiteralEnd returns xbase::XExpression :
	{RichStringLiteral} value=RICH_TEXT_END
; 

InternalRichString returns xbase::XExpression:
	{RichStringLiteral} value=RICH_TEXT_INBETWEEN |
	{RichString} elements+=RichStringLiteralInbetween (elements+=RichStringPart elements+=RichStringLiteralInbetween)+;

RichStringPart returns xbase::XExpression:
	XExpression |
	RichStringForLoop |
	RichStringIf
;

RichStringForLoop returns xbase::XExpression:
	{RichStringForLoop}
	"FOR" declaredParam=JvmFormalParameter ':' forExpression=XExpression
		eachExpression=InternalRichString
	"ENDFOR"
;

RichStringIf returns xbase::XExpression :
	{RichStringIf}
	"IF" if=XExpression
		then=InternalRichString
		elseIfs+=RichStringElseIf*
	("ELSE" 
		else=InternalRichString)?
	"ENDIF"
;

RichStringElseIf returns RichStringElseIf:
	"ELSEIF" if=XExpression then=InternalRichString
;

terminal RICH_TEXT : "'''" IN_DOUBLE_QUOTE_RICH_STRING* "'''";
terminal RICH_TEXT_START : "'''" IN_DOUBLE_QUOTE_RICH_STRING* '«';
terminal RICH_TEXT_END : '»' IN_DOUBLE_QUOTE_RICH_STRING* "'''" ;
terminal RICH_TEXT_INBETWEEN : '»' IN_DOUBLE_QUOTE_RICH_STRING* '«'; 

terminal fragment IN_DOUBLE_QUOTE_RICH_STRING : "''" !"'" |"'" !"'"| !('«'|"'");

