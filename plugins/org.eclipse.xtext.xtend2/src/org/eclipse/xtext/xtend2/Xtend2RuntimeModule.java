/*
 * generated by Xtext
 */
package org.eclipse.xtext.xtend2;

import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.linking.ILinker;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.resource.ILocationInFileProvider;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.xbase.featurecalls.IdentifiableSimpleNameProvider;
import org.eclipse.xtext.xbase.featurecalls.IdentifiableTypeProvider;
import org.eclipse.xtext.xbase.typing.IXExpressionTypeProvider;
import org.eclipse.xtext.xtend2.conversion.Xtend2ValueConverterService;
import org.eclipse.xtext.xtend2.featurecalls.Xtend2IdentifiableSimpleNameProvider;
import org.eclipse.xtext.xtend2.featurecalls.Xtend2IdentifiableTypeProvider;
import org.eclipse.xtext.xtend2.linking.Xtend2LazyLinker;
import org.eclipse.xtext.xtend2.linking.Xtend2LocationInFileProvider;
import org.eclipse.xtext.xtend2.naming.Xtend2QualifiedNameProvider;
import org.eclipse.xtext.xtend2.scoping.Xtend2ImportedNamespaceScopeProvider;
import org.eclipse.xtext.xtend2.typing.Xtend2TypeProvider;

import com.google.inject.Binder;
import com.google.inject.name.Names;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class Xtend2RuntimeModule extends org.eclipse.xtext.xtend2.AbstractXtend2RuntimeModule {

	@Override
	public Class<? extends IXExpressionTypeProvider> bindIXExpressionTypeProvider() {
		return Xtend2TypeProvider.class;
	}

	@Override
	public Class<? extends IValueConverterService> bindIValueConverterService() {
		return Xtend2ValueConverterService.class;
	}

	@Override
	public void configureIScopeProviderDelegate(Binder binder) {
		binder.bind(IScopeProvider.class).annotatedWith(Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE))
		.to(Xtend2ImportedNamespaceScopeProvider.class);
	}

	@Override
	public Class<? extends IdentifiableTypeProvider> bindIdentifiableTypeProvider() {
		return Xtend2IdentifiableTypeProvider.class;
	}

	@Override
	public Class<? extends IdentifiableSimpleNameProvider> bindIdentifiableSimpleNameProvider() {
		return Xtend2IdentifiableSimpleNameProvider.class;
	}

	@Override
	public Class<? extends ILinker> bindILinker() {
		return Xtend2LazyLinker.class;
	}

	@Override
	public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return Xtend2QualifiedNameProvider.class;
	}

	@Override
	public Class<? extends ILocationInFileProvider> bindILocationInFileProvider() {
		return Xtend2LocationInFileProvider.class;
	}


}
