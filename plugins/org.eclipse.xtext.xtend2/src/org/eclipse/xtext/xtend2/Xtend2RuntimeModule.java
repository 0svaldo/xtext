/*
 * generated by Xtext
 */
package org.eclipse.xtext.xtend2;

import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.common.types.util.IJvmTypeConformanceComputer;
import org.eclipse.xtext.common.types.util.TypeArgumentContext;
import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.linking.ILinker;
import org.eclipse.xtext.linking.LinkingScopeProviderBinding;
import org.eclipse.xtext.naming.IQualifiedNameConverter;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.xbase.XbaseQualifiedNameConverter;
import org.eclipse.xtext.xbase.featurecalls.IdentifiableSimpleNameProvider;
import org.eclipse.xtext.xbase.featurecalls.IdentifiableTypeProvider;
import org.eclipse.xtext.xbase.linking.XbaseLinkingScopeProvider;
import org.eclipse.xtext.xbase.scoping.XbaseImportedNamespaceScopeProvider;
import org.eclipse.xtext.xbase.typing.IXExpressionExpectedTypeProvider;
import org.eclipse.xtext.xbase.typing.IXExpressionTypeProvider;
import org.eclipse.xtext.xbase.typing.XExpressionTypeProvider;
import org.eclipse.xtext.xbase.typing.XbaseTypeArgumentContextProvider;
import org.eclipse.xtext.xbase.typing.XbaseTypeConformanceComputer;
import org.eclipse.xtext.xtend2.conversion.Xtend2ValueConverterService;
import org.eclipse.xtext.xtend2.featurecalls.Xtend2IdentifiableSimpleNameProvider;
import org.eclipse.xtext.xtend2.featurecalls.Xtend2IdentifiableTypeProvider;
import org.eclipse.xtext.xtend2.linking.Xtend2LazyLinker;
import org.eclipse.xtext.xtend2.typing.Xtend2ExpectedTypeProvider;
import org.eclipse.xtext.xtend2.typing.Xtend2TypeProvider;

import com.google.inject.Binder;
import com.google.inject.name.Names;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class Xtend2RuntimeModule extends org.eclipse.xtext.xtend2.AbstractXtend2RuntimeModule {
	
	public Class<? extends IdentifiableTypeProvider> bindIdentifiableTypeProvider() {
		return Xtend2IdentifiableTypeProvider.class;
	}
	
	public Class<? extends IXExpressionExpectedTypeProvider> bindIExpectedTypeProvider() {
		return Xtend2ExpectedTypeProvider.class;
	}
	
	public Class<? extends IJvmTypeConformanceComputer> bindIJvmTypeConformanceComputer() {
		return XbaseTypeConformanceComputer.class;
	}
	
	public Class<? extends IQualifiedNameConverter> bindIQualifiedNameConverter() {
		return XbaseQualifiedNameConverter.class;
	}
	
	public Class<? extends IXExpressionTypeProvider> bindITypeProvider() {
		return XExpressionTypeProvider.class;
	}
	
	public Class<? extends org.eclipse.xtext.typing.ITypeConformanceComputer<JvmTypeReference>> bindITypeConformanceComputer() {
		return IJvmTypeConformanceComputer.class;
	}
	
	@Override
	public Class<? extends IValueConverterService> bindIValueConverterService() {
		return Xtend2ValueConverterService.class;
	}

	public Class<? extends TypeArgumentContext.Provider> bindTypeArgumentContextProvider() {
		return XbaseTypeArgumentContextProvider.class;
	}
	
	public Class<? extends XExpressionTypeProvider> bindXExpressionTypeProvider() {
		return Xtend2TypeProvider.class;
	}
	
	@Override
	public void configureIScopeProviderDelegate(Binder binder) {
		binder.bind(IScopeProvider.class).annotatedWith(Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE)).to(XbaseImportedNamespaceScopeProvider.class);
	}
	
	@Override
	public void configureLinkingIScopeProvider(Binder binder) {
		binder.bind(IScopeProvider.class).annotatedWith(LinkingScopeProviderBinding.class).to(XbaseLinkingScopeProvider.class);
	}
	
	@Override
	public Class<? extends ILinker> bindILinker() {
		return Xtend2LazyLinker.class;
	}

	public Class<? extends IdentifiableSimpleNameProvider> bindIdentifiableSimpleNameProvider() {
		return Xtend2IdentifiableSimpleNameProvider.class;
	}
}


