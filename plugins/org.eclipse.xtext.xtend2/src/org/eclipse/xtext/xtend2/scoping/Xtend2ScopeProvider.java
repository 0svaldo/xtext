/*
 * generated by Xtext
 */
package org.eclipse.xtext.xtend2.scoping;

import static java.util.Collections.*;

import java.util.List;
import java.util.Set;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.common.types.JvmDeclaredType;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmIdentifiableElement;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.common.types.util.TypeReferences;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.MapBasedScope;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.eclipse.xtext.xbase.scoping.XbaseScopeProvider;
import org.eclipse.xtext.xbase.scoping.featurecalls.DefaultJvmFeatureDescriptionProvider;
import org.eclipse.xtext.xbase.scoping.featurecalls.IFeaturesForTypeProvider;
import org.eclipse.xtext.xbase.scoping.featurecalls.IJvmFeatureDescriptionProvider;
import org.eclipse.xtext.xbase.scoping.featurecalls.XFeatureCallSugarDescriptionProvider;
import org.eclipse.xtext.xtend2.linking.IXtend2JvmAssociations;
import org.eclipse.xtext.xtend2.xtend2.DeclaredDependency;
import org.eclipse.xtext.xtend2.xtend2.XtendClass;
import org.eclipse.xtext.xtend2.xtend2.XtendFile;
import org.eclipse.xtext.xtend2.xtend2.XtendFunction;

import com.google.common.base.Predicate;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import com.google.inject.Provider;
import com.google.inject.internal.Lists;

/**
 * @author Sven Efftinge
 */
public class Xtend2ScopeProvider extends XbaseScopeProvider {

	@Inject
	private IXtend2JvmAssociations xtend2jvmAssociations;
	
	@Inject
	private Provider<StaticallyImportedFeaturesProvider> staticallyImportedFeaturesProvider;
	
	@Inject
	private Provider<ExtensionMethodsFeaturesProvider> extensionMethodsFeaturesProvider; 
	
	@Inject
	private TypeReferences typeReferences;
	
	@Override
	public IScope getScope(EObject context, EReference reference) {
		IScope parent = super.getScope(context, reference);
		if (TypesPackage.Literals.JVM_TYPE.isSuperTypeOf(reference.getEReferenceType())) {
			List<IEObjectDescription> descriptions = null;
			XtendFunction function = EcoreUtil2.getContainerOfType(context, XtendFunction.class);
			if (function != null) {
				if (!function.getTypeParameters().isEmpty()) {
					descriptions = Lists.newArrayList();
					for (JvmTypeParameter param : function.getTypeParameters()) {
						QualifiedName qn = QualifiedName.create(param.getName());
						descriptions.add(EObjectDescription.create(qn, param));
					}
				}
			}
			XtendClass clazz = EcoreUtil2.getContainerOfType(context, XtendClass.class);
			if (clazz != null) {
				if(descriptions == null)  
					descriptions = Lists.newArrayList();
				JvmGenericType inferredType = xtend2jvmAssociations.getInferredType(clazz);
				if (inferredType != null) {
					QualifiedName inferredDeclaringTypeName = QualifiedName.create(inferredType.getSimpleName());
					descriptions.add(EObjectDescription.create(inferredDeclaringTypeName, inferredType));
				}
			}
			if(descriptions != null && !descriptions.isEmpty())
				return MapBasedScope.createScope(parent, descriptions);
		}
		return parent;
	}

	@Override
	protected IScope createLocalVarScope(EObject context, EReference reference, IScope parent, boolean includeCurrentBlock, int idx) {
		if (context instanceof XtendClass) {
			return new SimpleScope(parent, singleton(EObjectDescription.create(THIS, context)));
		} else if (context instanceof XtendFunction) {
			XtendFunction func = (XtendFunction) context;
			EList<JvmFormalParameter> list = func.getParameters();
			List<IEObjectDescription> descriptions = Lists.newArrayList();
			for (JvmFormalParameter jvmFormalParameter : list) {
				IEObjectDescription desc = createIEObjectDescription(jvmFormalParameter);
				descriptions.add(desc);
			}
			return MapBasedScope.createScope(super.createLocalVarScope(context, reference, parent, includeCurrentBlock, idx), descriptions);
		}
		return super.createLocalVarScope(context, reference, parent, includeCurrentBlock, idx);
	}
	
	@Override
	protected List<IJvmFeatureDescriptionProvider> getStaticFeatureDescriptionProviders(Resource context, JvmDeclaredType contextType) {
		List<IJvmFeatureDescriptionProvider> result = super.getStaticFeatureDescriptionProviders(context, contextType);
		final DefaultJvmFeatureDescriptionProvider defaultProvider = newDefaultFeatureDescProvider();
		StaticallyImportedFeaturesProvider staticProvider = staticallyImportedFeaturesProvider.get();
		staticProvider.setContext(context);
		defaultProvider.setContextType(contextType);
		defaultProvider.setFeaturesForTypeProvider(staticProvider);
		result.add(0, defaultProvider);
		return result;
	}
	
	@Override
	protected List<IJvmFeatureDescriptionProvider> getFeatureDescriptionProviders(JvmTypeReference type,
			EObject expression, JvmDeclaredType currentContext, JvmIdentifiableElement implicitReceiver) {
		List<IJvmFeatureDescriptionProvider> result = super.getFeatureDescriptionProviders(type, expression, currentContext, implicitReceiver);
		
		final StaticallyImportedFeaturesProvider staticProvider = staticallyImportedFeaturesProvider.get();
		staticProvider.setContext(expression.eResource());
		insertDescriptionProviders(staticProvider, currentContext, implicitReceiver, result);
		
		if (implicitReceiver==null) {
			final XtendClass xtendClass = ((XtendFile) expression.eResource().getContents().get(0)).getXtendClass();
			// extensions for this
			JvmGenericType type2 = xtend2jvmAssociations.getInferredType(xtendClass);
			JvmParameterizedTypeReference typeRef = typeReferences.createTypeRef(type2);
			ExtensionMethodsFeaturesProvider featureProvider = extensionMethodsFeaturesProvider.get();
			featureProvider.setContext(typeRef);
			insertDescriptionProviders(featureProvider, currentContext, xtendClass, result);

			// injected extensions
			Iterable<DeclaredDependency> iterable = getExtensionDependencies(xtendClass);
			for (DeclaredDependency declaredDependency : iterable) {
				JvmIdentifiableElement dependencyImplicitReceiver = findImplicitReceiverFor(declaredDependency);
				if (dependencyImplicitReceiver != null) {
					featureProvider = extensionMethodsFeaturesProvider.get();
					featureProvider.setContext(declaredDependency.getType());
					insertDescriptionProviders(featureProvider, currentContext, dependencyImplicitReceiver, result);
				}
			}
			
		}
		return result;
	}
	
	protected JvmIdentifiableElement findImplicitReceiverFor(DeclaredDependency declaredDependency) {
		Set<EObject> elements = xtend2jvmAssociations.getInferredJvmElements(declaredDependency);
		if (!elements.isEmpty()) {
			final JvmIdentifiableElement field = (JvmIdentifiableElement)elements.iterator().next();
			return field;
		}
		return null;
	}

	protected Iterable<DeclaredDependency> getExtensionDependencies(XtendClass context) {
		return Iterables.filter(EcoreUtil2.typeSelect(context.getMembers(),DeclaredDependency.class), new Predicate<DeclaredDependency>() {
			public boolean apply(DeclaredDependency input) {
				return input.isExtension();
			}
		});
	}

	protected void insertDescriptionProviders(final IFeaturesForTypeProvider staticProvider,
			JvmDeclaredType currentContext, JvmIdentifiableElement implicitReceiver,
			List<IJvmFeatureDescriptionProvider> result) {
		final DefaultJvmFeatureDescriptionProvider defaultProvider = newDefaultFeatureDescProvider();
		defaultProvider.setFeaturesForTypeProvider(staticProvider);
		
		final XFeatureCallSugarDescriptionProvider sugaredProvider = newSugarDescriptionProvider();
		sugaredProvider.setFeaturesForTypeProvider(staticProvider);
		
		defaultProvider.setContextType(currentContext);
		defaultProvider.setImplicitReceiver(implicitReceiver);
		sugaredProvider.setContextType(currentContext);
		sugaredProvider.setImplicitReceiver(implicitReceiver);
		
		result.add(2, defaultProvider);
		result.add(3, sugaredProvider);
	}
	
	protected IEObjectDescription createIEObjectDescription(JvmFormalParameter jvmFormalParameter) {
		return EObjectDescription.create(QualifiedName.create(jvmFormalParameter.getName()), jvmFormalParameter, null);
	}
	
}
