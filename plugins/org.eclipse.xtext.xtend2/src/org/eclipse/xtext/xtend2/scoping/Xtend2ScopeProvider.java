/*
 * generated by Xtext
 */
package org.eclipse.xtext.xtend2.scoping;

import java.util.Map;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.MapBasedScope;
import org.eclipse.xtext.xbase.scoping.XpressionScopeProvider;
import org.eclipse.xtext.xtend2.xtend2.XtendClass;
import org.eclipse.xtext.xtend2.xtend2.XtendFunction;

import com.google.common.base.Predicate;
import com.google.common.collect.Maps;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class Xtend2ScopeProvider extends XpressionScopeProvider {
	
	@Override
	protected IScope getLocalVariableScope(EObject context, EReference reference, Predicate<EObject> featurePredicate) {
		if (context instanceof XtendClass) {
			XtendClass clazz = (XtendClass) context;
			return getAllFeatures(clazz, IScope.NULLSCOPE, featurePredicate);
		} else if  (context instanceof XtendFunction) {
			XtendFunction func = (XtendFunction) context;
			EList<JvmFormalParameter> list = func.getParameters();
			Map<String,IEObjectDescription> map = Maps.newHashMap();
			for (JvmFormalParameter jvmFormalParameter : list) {
				IEObjectDescription desc = createIEObjectDescription(jvmFormalParameter);
				map.put(desc.getName(),desc);
			}
			return new MapBasedScope(super.getLocalVariableScope(context, reference,featurePredicate), map);
		}
		return super.getLocalVariableScope(context, reference,featurePredicate);
	}

	protected IEObjectDescription createIEObjectDescription(JvmFormalParameter jvmFormalParameter) {
		return new EObjectDescription(jvmFormalParameter.getName(), jvmFormalParameter, null);
	}
}
