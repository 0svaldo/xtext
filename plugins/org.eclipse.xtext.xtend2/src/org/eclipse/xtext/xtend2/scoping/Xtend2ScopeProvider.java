/*
 * generated by Xtext
 */
package org.eclipse.xtext.xtend2.scoping;

import static java.util.Collections.singleton;

import java.util.List;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.MapBasedScope;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.eclipse.xtext.xbase.scoping.XbaseScopeProvider;
import org.eclipse.xtext.xtend2.xtend2.XtendClass;
import org.eclipse.xtext.xtend2.xtend2.XtendFunction;

import com.google.inject.internal.Lists;

/**
 * @author Sven Efftinge
 */
public class Xtend2ScopeProvider extends XbaseScopeProvider {
	
	@Override
	public IScope getScope(EObject context, EReference reference) {
		IScope parent = super.getScope(context, reference);
		if (TypesPackage.Literals.JVM_TYPE.isSuperTypeOf(reference.getEReferenceType())) {
			XtendFunction type = EcoreUtil2.getContainerOfType(context, XtendFunction.class);
			if (!type.getTypeParameters().isEmpty()) {
				List<IEObjectDescription> descriptions = Lists.newArrayList();
				for (JvmTypeParameter param : type.getTypeParameters()) {
					QualifiedName qn = QualifiedName.create(param.getName());
					descriptions.add(EObjectDescription.create(qn, param));
				}
				return MapBasedScope.createScope(parent, descriptions);
			}
				
		}
		return parent;
	}

	@Override
	protected IScope createLocalVarScope(EObject context, EReference reference, IScope parent) {
		if (context instanceof XtendClass) {
			return new SimpleScope(parent, singleton(EObjectDescription.create(THIS, context)));
		} else if  (context instanceof XtendFunction) {
			XtendFunction func = (XtendFunction) context;
			EList<JvmFormalParameter> list = func.getParameters();
			List<IEObjectDescription> descriptions = Lists.newArrayList();
			for (JvmFormalParameter jvmFormalParameter : list) {
				IEObjectDescription desc = createIEObjectDescription(jvmFormalParameter);
				descriptions.add(desc);
			}
			return MapBasedScope.createScope(super.createLocalVarScope(context, reference, parent), descriptions);
		}
		return super.createLocalVarScope(context, reference, parent);
	}

	protected IEObjectDescription createIEObjectDescription(JvmFormalParameter jvmFormalParameter) {
		return EObjectDescription.create(QualifiedName.create(jvmFormalParameter.getName()), jvmFormalParameter, null);
	}
}
