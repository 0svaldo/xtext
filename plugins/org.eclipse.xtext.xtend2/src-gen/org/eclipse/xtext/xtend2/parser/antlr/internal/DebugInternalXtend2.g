/*
* generated by Xtext
*/
grammar DebugInternalXtend2;

options {
	backtrack=true;
	 memoize=true;
	
}






// Rule File
ruleFile :
((	'package' 
(
(
ruleQualifiedName
)
))?(
(
ruleImport
)
)*(
(
ruleClass
)
)*)
;






// Rule Import
ruleImport :
(	'import' 
(
(
ruleQualifiedNameWithWildCard
)
))
;






// Rule QualifiedNameWithWildCard
ruleQualifiedNameWithWildCard :
(ruleQualifiedName(
	'.' 

	'*' 
)?)
    ;






// Rule Class
ruleClass :
((	'<' 
(
(
ruleJvmTypeParameter
)
)(	',' 
(
(
ruleJvmTypeParameter
)
))*	'>' 
)?	'class' 
(
(
RULE_ID

)
)(	'extends' 
(
(
ruleJvmTypeReference
)
))?(	'implements' 
(
(
ruleJvmTypeReference
)
))*	'{' 
(
(
ruleMember
)
)*	'}' 
)
;






// Rule Member
ruleMember :
	ruleFunction
;






// Rule Function
ruleFunction :
((	'<' 
(
(
ruleJvmTypeParameter
)
)(	',' 
(
(
ruleJvmTypeParameter
)
))*	'>' 
)?(
(
ruleJvmTypeReference
)
)?(
(
RULE_ID

)
)	'(' 
((
(
ruleJvmFormalParameter
)
)(	',' 
(
(
ruleJvmFormalParameter
)
))*)?	')' 
((
(
ruleXExpression
)
)
    |	';' 
))
;






// Rule XStringLiteral
ruleXStringLiteral :
(((
)(
(
RULE_STRING

)
))
    |	ruleRichString)
;






// Rule RichString
ruleRichString :
(((
)(
(
RULE_RICH_TEXT

)
))
    |((
)(
(
ruleRichStringLiteralStart
)
)((
(
ruleRichStringPart
)
)(
(
ruleRichStringLiteralInbetween
)
))*(
(
ruleRichStringPart
)
)(
(
ruleRichStringLiteralEnd
)
)))
;






// Rule RichStringLiteralStart
ruleRichStringLiteralStart :
((
)(
(
RULE_RICH_TEXT_START

)
))
;






// Rule RichStringLiteralInbetween
ruleRichStringLiteralInbetween :
((
)(
(
RULE_RICH_TEXT_INBETWEEN

)
))
;






// Rule RichStringLiteralEnd
ruleRichStringLiteralEnd :
((
)(
(
RULE_RICH_TEXT_END

)
))
;






// Rule InternalRichString
ruleInternalRichString :
(((
)(
(
RULE_RICH_TEXT_INBETWEEN

)
))
    |((
)(
(
ruleRichStringLiteralInbetween
)
)((
(
ruleRichStringPart
)
)(
(
ruleRichStringLiteralInbetween
)
))+))
;






// Rule RichStringPart
ruleRichStringPart :
(	ruleXExpression
    |	ruleRichStringForLoop
    |	ruleRichStringIf)
;






// Rule RichStringForLoop
ruleRichStringForLoop :
((
)	'FOR' 
(
(
ruleJvmFormalParameter
)
)	':' 
(
(
ruleXExpression
)
)(
(
ruleInternalRichString
)
)	'ENDFOR' 
)
;






// Rule RichStringIf
ruleRichStringIf :
((
)	'IF' 
(
(
ruleXExpression
)
)(
(
ruleInternalRichString
)
)(
(
ruleRichStringElseIf
)
)*(	'ELSE' 
(
(
ruleInternalRichString
)
))?	'ENDIF' 
)
;






// Rule RichStringElseIf
ruleRichStringElseIf :
(	'ELSEIF' 
(
(
ruleXExpression
)
)(
(
ruleInternalRichString
)
))
;






// Rule XExpression
ruleXExpression :
	ruleXAssignment
;






// Rule XAssignment
ruleXAssignment :
(((
)(
(
	RULE_ID

)
)	ruleOpSingleAssign(
(
ruleXAssignment
)
))
    |(	ruleXOrExpression((
)(
(
		ruleOpMultiAssign
)
)(
(
ruleXAssignment
)
))?))
;






// Rule OpSingleAssign
ruleOpSingleAssign :

	'=' 

    ;






// Rule OpMultiAssign
ruleOpMultiAssign :

	'+=' 

    ;






// Rule XOrExpression
ruleXOrExpression :
(	ruleXAndExpression((
)(
(
		ruleOpOr
)
)(
(
ruleXAndExpression
)
))*)
;






// Rule OpOr
ruleOpOr :

	'||' 

    ;






// Rule XAndExpression
ruleXAndExpression :
(	ruleXEqualityExpression((
)(
(
		ruleOpAnd
)
)(
(
ruleXEqualityExpression
)
))*)
;






// Rule OpAnd
ruleOpAnd :

	'&&' 

    ;






// Rule XEqualityExpression
ruleXEqualityExpression :
(	ruleXRelationalExpression((
)(
(
		ruleOpEquality
)
)(
(
ruleXRelationalExpression
)
))*)
;






// Rule OpEquality
ruleOpEquality :
(
	'==' 

    |
	'!=' 
)
    ;






// Rule XRelationalExpression
ruleXRelationalExpression :
(	ruleXOtherOperatorExpression(((
)	'instanceof' 
(
(
		ruleQualifiedName
)
))
    |((
)(
(
		ruleOpCompare
)
)(
(
ruleXOtherOperatorExpression
)
)))*)
;






// Rule OpCompare
ruleOpCompare :
(
	'>=' 

    |
	'<=' 

    |
	'>' 

    |
	'<' 
)
    ;






// Rule XOtherOperatorExpression
ruleXOtherOperatorExpression :
(	ruleXAdditiveExpression((
)(
(
		ruleOpOther
)
)(
(
ruleXAdditiveExpression
)
))*)
;






// Rule OpOther
ruleOpOther :
(
	'->' 

    |
	'..' 
)
    ;






// Rule XAdditiveExpression
ruleXAdditiveExpression :
(	ruleXMultiplicativeExpression((
)(
(
		ruleOpAdd
)
)(
(
ruleXMultiplicativeExpression
)
))*)
;






// Rule OpAdd
ruleOpAdd :
(
	'+' 

    |
	'-' 
)
    ;






// Rule XMultiplicativeExpression
ruleXMultiplicativeExpression :
(	ruleXUnaryOperation((
)(
(
		ruleOpMulti
)
)(
(
ruleXUnaryOperation
)
))*)
;






// Rule OpMulti
ruleOpMulti :
(
	'*' 

    |
	'**' 

    |
	'/' 

    |
	'%' 
)
    ;






// Rule XUnaryOperation
ruleXUnaryOperation :
(((
)(
(
		ruleOpUnary
)
)(
(
ruleXMemberFeatureCall
)
))
    |	ruleXMemberFeatureCall)
;






// Rule OpUnary
ruleOpUnary :
(
	'!' 

    |
	'-' 

    |
	'+' 
)
    ;






// Rule XMemberFeatureCall
ruleXMemberFeatureCall :
(	ruleXPrimaryExpression(((
)	'.' 
(
(
	RULE_ID

)
)	ruleOpSingleAssign(
(
ruleXAssignment
)
))
    |((
)(	'.' 

    |(
(
	'?.' 
 

)
)
    |(
(
	'*.' 
 

)
))(	'<' 
(
(
ruleJvmArgumentTypeReference
)
)(	',' 
(
(
ruleJvmArgumentTypeReference
)
))*	'>' 
)?(
(
	RULE_ID

)
)((
(
	'(' 
 

)
)((
(
ruleXExpression
)
)(	',' 
(
(
ruleXExpression
)
))*)?	')' 
)?))*)
;






// Rule XPrimaryExpression
ruleXPrimaryExpression :
(	ruleXLiteral
    |	ruleXConstructorCall
    |	ruleXBlockExpression
    |	ruleXSwitchExpression
    |	ruleXFeatureCall
    |	ruleXIfExpression
    |	ruleXForLoopExpression
    |	ruleXWhileExpression
    |	ruleXDoWhileExpression
    |	ruleXCastedExpression
    |	ruleXThrowExpression
    |	ruleXTryCatchFinallyExpression
    |	ruleXParenthesizedExpression)
;






// Rule XLiteral
ruleXLiteral :
(	ruleXClosure
    |	ruleXBooleanLiteral
    |	ruleXIntLiteral
    |	ruleXNullLiteral
    |	ruleXStringLiteral
    |	ruleXTypeLiteral)
;






// Rule XClosure
ruleXClosure :
((
)((
(
ruleJvmFormalParameter
)
)(	',' 
(
(
ruleJvmFormalParameter
)
))*)?	'|' 
(
(
ruleXExpression
)
))
;






// Rule XCastedExpression
ruleXCastedExpression :
((
)	'(' 
(
(
ruleJvmTypeReference
)
)	')' 
(
(
ruleXMemberFeatureCall
)
))
;






// Rule XParenthesizedExpression
ruleXParenthesizedExpression :
(	'(' 
	ruleXExpression	')' 
)
;






// Rule XIfExpression
ruleXIfExpression :
((
)	'if' 
	'(' 
(
(
ruleXExpression
)
)	')' 
(
(
ruleXExpression
)
)(	'else' 
(
(
ruleXExpression
)
))?)
;






// Rule XSwitchExpression
ruleXSwitchExpression :
((
)	'switch' 
(
(
ruleXExpressionInsideBlock
)
)?	'{' 
(
(
ruleXCasePart
)
)+(	'default' 
	':' 
(((
(
ruleXExpression
)
)	';' 
)
    |(
(
ruleXBlockExpression
)
)))?	'}' 
)
;






// Rule XCasePart
ruleXCasePart :
((
(
ruleJvmTypeReference
)
)?(	'case' 
(
(
ruleXExpression
)
))?	':' 
(((
(
ruleXExpression
)
)	';' 
)
    |(
(
ruleXBlockExpression
)
)))
;






// Rule XForLoopExpression
ruleXForLoopExpression :
((
)	'for' 
	'(' 
(
(
ruleJvmFormalParameter
)
)	':' 
(
(
ruleXExpression
)
)	')' 
(
(
ruleXExpression
)
))
;






// Rule XWhileExpression
ruleXWhileExpression :
((
)	'while' 
	'(' 
(
(
ruleXExpression
)
)	')' 
(
(
ruleXExpression
)
))
;






// Rule XDoWhileExpression
ruleXDoWhileExpression :
((
)	'do' 
(
(
ruleXExpression
)
)	'while' 
	'(' 
(
(
ruleXExpression
)
)	')' 
)
;






// Rule XBlockExpression
ruleXBlockExpression :
((
)	'{' 
((
(
ruleXExpressionInsideBlock
)
)(	';' 
)?)*	'}' 
)
;






// Rule XExpressionInsideBlock
ruleXExpressionInsideBlock :
(	ruleXVariableDeclaration
    |	ruleXExpression)
;






// Rule XVariableDeclaration
ruleXVariableDeclaration :
((
)((
(
	'var' 
 

)
)
    |	'val' 
)(
(
ruleJvmTypeReference
)
)?(
(
RULE_ID

)
)	'=' 
(
(
ruleXExpression
)
))
;






// Rule JvmFormalParameter
ruleJvmFormalParameter :
((
(
ruleJvmTypeReference
)
)?(
(
RULE_ID

)
))
;






// Rule XFeatureCall
ruleXFeatureCall :
((
)(	'<' 
(
(
ruleJvmArgumentTypeReference
)
)(	',' 
(
(
ruleJvmArgumentTypeReference
)
))*	'>' 
)?(
(
	RULE_ID

)
)((
(
	'(' 
 

)
)((
(
ruleXExpression
)
)(	',' 
(
(
ruleXExpression
)
))*)?	')' 
)?)
;






// Rule XConstructorCall
ruleXConstructorCall :
((
)	'new' 
(
(
		ruleQualifiedName
)
)(	'<' 
(
(
ruleJvmArgumentTypeReference
)
)(	',' 
(
(
ruleJvmArgumentTypeReference
)
))*	'>' 
)?	'(' 
((
(
ruleXExpression
)
)(	',' 
(
(
ruleXExpression
)
))*)?	')' 
)
;






// Rule XBooleanLiteral
ruleXBooleanLiteral :
((
)(	'false' 

    |(
(
	'true' 
 

)
)))
;






// Rule XNullLiteral
ruleXNullLiteral :
((
)	'null' 
)
;






// Rule XIntLiteral
ruleXIntLiteral :
((
)(
(
RULE_INT

)
))
;






// Rule XTypeLiteral
ruleXTypeLiteral :
((
)(
(
		ruleQualifiedName
)
)	'.' 
	'class' 
)
;






// Rule XThrowExpression
ruleXThrowExpression :
((
)	'throw' 
(
(
ruleXExpression
)
))
;






// Rule XTryCatchFinallyExpression
ruleXTryCatchFinallyExpression :
((
)	'try' 
(
(
ruleXExpression
)
)(((
(
ruleXCatchClause
)
)+(	'finally' 
(
(
ruleXExpression
)
))?)
    |(	'finally' 
(
(
ruleXExpression
)
))))
;






// Rule XCatchClause
ruleXCatchClause :
(	'catch' 
	'(' 
(
(
ruleJvmFormalParameter
)
)	')' 
(
(
ruleXExpression
)
))
;






// Rule JvmTypeReference
ruleJvmTypeReference :
(	ruleJvmParameterizedTypeReference
    |	ruleXFunctionTypeRef)
;






// Rule XFunctionTypeRef
ruleXFunctionTypeRef :
((	'(' 
(
(
ruleJvmTypeReference
)
)(	',' 
(
(
ruleJvmTypeReference
)
))*	')' 
)?	'=>' 
(
(
ruleJvmTypeReference
)
))
;






// Rule JvmParameterizedTypeReference
ruleJvmParameterizedTypeReference :
((
(
		ruleQualifiedName
)
)(	'<' 
(
(
ruleJvmArgumentTypeReference
)
)(	',' 
(
(
ruleJvmArgumentTypeReference
)
))*	'>' 
)?)
;






// Rule JvmArgumentTypeReference
ruleJvmArgumentTypeReference :
(	ruleJvmTypeReference
    |	ruleJvmWildcardTypeReference)
;






// Rule JvmWildcardTypeReference
ruleJvmWildcardTypeReference :
((
)	'?' 
((
(
ruleJvmUpperBound
)
)
    |(
(
ruleJvmLowerBound
)
))?)
;






// Rule JvmUpperBound
ruleJvmUpperBound :
(	'extends' 
(
(
ruleJvmTypeReference
)
))
;






// Rule JvmUpperBoundAnded
ruleJvmUpperBoundAnded :
(	'&' 
(
(
ruleJvmTypeReference
)
))
;






// Rule JvmLowerBound
ruleJvmLowerBound :
(	'super' 
(
(
ruleJvmTypeReference
)
))
;






// Rule JvmTypeParameter
ruleJvmTypeParameter :
((
(
RULE_ID

)
)(((
(
ruleJvmUpperBound
)
)(
(
ruleJvmUpperBoundAnded
)
)*)
    |(
(
ruleJvmLowerBound
)
))?)
;






// Rule QualifiedName
ruleQualifiedName :
(RULE_ID(
	'.' 
RULE_ID)*)
    ;





RULE_RICH_TEXT : '\'\'\'' RULE_IN_DOUBLE_QUOTE_RICH_STRING* '\'\'\'';

RULE_RICH_TEXT_START : '\'\'\'' RULE_IN_DOUBLE_QUOTE_RICH_STRING* '\u00AB';

RULE_RICH_TEXT_END : '\u00BB' RULE_IN_DOUBLE_QUOTE_RICH_STRING* '\'\'\'';

RULE_RICH_TEXT_INBETWEEN : '\u00BB' RULE_IN_DOUBLE_QUOTE_RICH_STRING* '\u00AB';

fragment RULE_IN_DOUBLE_QUOTE_RICH_STRING : ('\'\'' ~('\'')|'\'' ~('\'')|~(('\u00AB'|'\'')));

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/' {skip();};

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')? {skip();};

RULE_WS : (' '|'\t'|'\r'|'\n')+ {skip();};

RULE_ANY_OTHER : .;


