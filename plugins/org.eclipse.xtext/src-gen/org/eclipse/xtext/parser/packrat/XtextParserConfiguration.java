/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import org.eclipse.xtext.services.XtextGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGrammarIDConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextAbstractRuleConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextAbstractMetamodelDeclarationConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGeneratedMetamodelConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextReferencedMetamodelConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextParserRuleConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextTypeRefConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextAlternativesConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextUnorderedGroupConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextGroupConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextAbstractTokenConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextAbstractTokenWithCardinalityConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextActionConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextAbstractTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextKeywordConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextRuleCallConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextAssignmentConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextAssignableTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextParenthesizedAssignableElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextAssignableAlternativesConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextCrossReferenceConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextCrossReferenceableTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextParenthesizedElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextTerminalRuleConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextTerminalAlternativesConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextTerminalGroupConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextTerminalTokenConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextTerminalTokenElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextParenthesizedTerminalElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextAbstractNegatedTokenConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextNegatedTokenConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextUntilTokenConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextWildcardConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextCharacterRangeConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextEnumRuleConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextEnumLiteralsConsumer;
import org.eclipse.xtext.parser.packrat.consumers.XtextEnumLiteralDeclarationConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class XtextParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 
    private XtextGrammarConsumer grammarConsumer;
    private XtextGrammarIDConsumer grammarIdConsumer;
    private XtextAbstractRuleConsumer abstractRuleConsumer;
    private XtextAbstractMetamodelDeclarationConsumer abstractMetamodelDeclarationConsumer;
    private XtextGeneratedMetamodelConsumer generatedMetamodelConsumer;
    private XtextReferencedMetamodelConsumer referencedMetamodelConsumer;
    private XtextParserRuleConsumer parserRuleConsumer;
    private XtextTypeRefConsumer typeRefConsumer;
    private XtextAlternativesConsumer alternativesConsumer;
    private XtextUnorderedGroupConsumer unorderedGroupConsumer;
    private XtextGroupConsumer groupConsumer;
    private XtextAbstractTokenConsumer abstractTokenConsumer;
    private XtextAbstractTokenWithCardinalityConsumer abstractTokenWithCardinalityConsumer;
    private XtextActionConsumer actionConsumer;
    private XtextAbstractTerminalConsumer abstractTerminalConsumer;
    private XtextKeywordConsumer keywordConsumer;
    private XtextRuleCallConsumer ruleCallConsumer;
    private XtextAssignmentConsumer assignmentConsumer;
    private XtextAssignableTerminalConsumer assignableTerminalConsumer;
    private XtextParenthesizedAssignableElementConsumer parenthesizedAssignableElementConsumer;
    private XtextAssignableAlternativesConsumer assignableAlternativesConsumer;
    private XtextCrossReferenceConsumer crossReferenceConsumer;
    private XtextCrossReferenceableTerminalConsumer crossReferenceableTerminalConsumer;
    private XtextParenthesizedElementConsumer parenthesizedElementConsumer;
    private XtextTerminalRuleConsumer terminalRuleConsumer;
    private XtextTerminalAlternativesConsumer terminalAlternativesConsumer;
    private XtextTerminalGroupConsumer terminalGroupConsumer;
    private XtextTerminalTokenConsumer terminalTokenConsumer;
    private XtextTerminalTokenElementConsumer terminalTokenElementConsumer;
    private XtextParenthesizedTerminalElementConsumer parenthesizedTerminalElementConsumer;
    private XtextAbstractNegatedTokenConsumer abstractNegatedTokenConsumer;
    private XtextNegatedTokenConsumer negatedTokenConsumer;
    private XtextUntilTokenConsumer untilTokenConsumer;
    private XtextWildcardConsumer wildcardConsumer;
    private XtextCharacterRangeConsumer characterRangeConsumer;
    private XtextEnumRuleConsumer enumRuleConsumer;
    private XtextEnumLiteralsConsumer enumLiteralsConsumer;
    private XtextEnumLiteralDeclarationConsumer enumLiteralDeclarationConsumer;

	private XtextGrammarAccess grammarAccess;

	public XtextParserConfiguration(IInternalParserConfiguration configuration, XtextGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public XtextGrammarConsumer getRootConsumer() {
		return grammarConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		grammarConsumer = new XtextGrammarConsumer(
    		this, null
    	);
		grammarIdConsumer = new XtextGrammarIDConsumer(
    		this, null
    	);
		abstractRuleConsumer = new XtextAbstractRuleConsumer(
    		this, null
    	);
		abstractMetamodelDeclarationConsumer = new XtextAbstractMetamodelDeclarationConsumer(
    		this, null
    	);
		generatedMetamodelConsumer = new XtextGeneratedMetamodelConsumer(
    		this, null
    	);
		referencedMetamodelConsumer = new XtextReferencedMetamodelConsumer(
    		this, null
    	);
		parserRuleConsumer = new XtextParserRuleConsumer(
    		this, null
    	);
		typeRefConsumer = new XtextTypeRefConsumer(
    		this, null
    	);
		alternativesConsumer = new XtextAlternativesConsumer(
    		this, null
    	);
		unorderedGroupConsumer = new XtextUnorderedGroupConsumer(
    		this, null
    	);
		groupConsumer = new XtextGroupConsumer(
    		this, null
    	);
		abstractTokenConsumer = new XtextAbstractTokenConsumer(
    		this, null
    	);
		abstractTokenWithCardinalityConsumer = new XtextAbstractTokenWithCardinalityConsumer(
    		this, null
    	);
		actionConsumer = new XtextActionConsumer(
    		this, null
    	);
		abstractTerminalConsumer = new XtextAbstractTerminalConsumer(
    		this, null
    	);
		keywordConsumer = new XtextKeywordConsumer(
    		this, null
    	);
		ruleCallConsumer = new XtextRuleCallConsumer(
    		this, null
    	);
		assignmentConsumer = new XtextAssignmentConsumer(
    		this, null
    	);
		assignableTerminalConsumer = new XtextAssignableTerminalConsumer(
    		this, null
    	);
		parenthesizedAssignableElementConsumer = new XtextParenthesizedAssignableElementConsumer(
    		this, null
    	);
		assignableAlternativesConsumer = new XtextAssignableAlternativesConsumer(
    		this, null
    	);
		crossReferenceConsumer = new XtextCrossReferenceConsumer(
    		this, null
    	);
		crossReferenceableTerminalConsumer = new XtextCrossReferenceableTerminalConsumer(
    		this, null
    	);
		parenthesizedElementConsumer = new XtextParenthesizedElementConsumer(
    		this, null
    	);
		terminalRuleConsumer = new XtextTerminalRuleConsumer(
    		this, null
    	);
		terminalAlternativesConsumer = new XtextTerminalAlternativesConsumer(
    		this, null
    	);
		terminalGroupConsumer = new XtextTerminalGroupConsumer(
    		this, null
    	);
		terminalTokenConsumer = new XtextTerminalTokenConsumer(
    		this, null
    	);
		terminalTokenElementConsumer = new XtextTerminalTokenElementConsumer(
    		this, null
    	);
		parenthesizedTerminalElementConsumer = new XtextParenthesizedTerminalElementConsumer(
    		this, null
    	);
		abstractNegatedTokenConsumer = new XtextAbstractNegatedTokenConsumer(
    		this, null
    	);
		negatedTokenConsumer = new XtextNegatedTokenConsumer(
    		this, null
    	);
		untilTokenConsumer = new XtextUntilTokenConsumer(
    		this, null
    	);
		wildcardConsumer = new XtextWildcardConsumer(
    		this, null
    	);
		characterRangeConsumer = new XtextCharacterRangeConsumer(
    		this, null
    	);
		enumRuleConsumer = new XtextEnumRuleConsumer(
    		this, null
    	);
		enumLiteralsConsumer = new XtextEnumLiteralsConsumer(
    		this, null
    	);
		enumLiteralDeclarationConsumer = new XtextEnumLiteralDeclarationConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getGrammarConsumer().setRule(grammarAccess.getGrammarAccess());
		getGrammarIdConsumer().setRule(grammarAccess.getGrammarIDAccess());
		getAbstractRuleConsumer().setRule(grammarAccess.getAbstractRuleAccess());
		getAbstractMetamodelDeclarationConsumer().setRule(grammarAccess.getAbstractMetamodelDeclarationAccess());
		getGeneratedMetamodelConsumer().setRule(grammarAccess.getGeneratedMetamodelAccess());
		getReferencedMetamodelConsumer().setRule(grammarAccess.getReferencedMetamodelAccess());
		getParserRuleConsumer().setRule(grammarAccess.getParserRuleAccess());
		getTypeRefConsumer().setRule(grammarAccess.getTypeRefAccess());
		getAlternativesConsumer().setRule(grammarAccess.getAlternativesAccess());
		getUnorderedGroupConsumer().setRule(grammarAccess.getUnorderedGroupAccess());
		getGroupConsumer().setRule(grammarAccess.getGroupAccess());
		getAbstractTokenConsumer().setRule(grammarAccess.getAbstractTokenAccess());
		getAbstractTokenWithCardinalityConsumer().setRule(grammarAccess.getAbstractTokenWithCardinalityAccess());
		getActionConsumer().setRule(grammarAccess.getActionAccess());
		getAbstractTerminalConsumer().setRule(grammarAccess.getAbstractTerminalAccess());
		getKeywordConsumer().setRule(grammarAccess.getKeywordAccess());
		getRuleCallConsumer().setRule(grammarAccess.getRuleCallAccess());
		getAssignmentConsumer().setRule(grammarAccess.getAssignmentAccess());
		getAssignableTerminalConsumer().setRule(grammarAccess.getAssignableTerminalAccess());
		getParenthesizedAssignableElementConsumer().setRule(grammarAccess.getParenthesizedAssignableElementAccess());
		getAssignableAlternativesConsumer().setRule(grammarAccess.getAssignableAlternativesAccess());
		getCrossReferenceConsumer().setRule(grammarAccess.getCrossReferenceAccess());
		getCrossReferenceableTerminalConsumer().setRule(grammarAccess.getCrossReferenceableTerminalAccess());
		getParenthesizedElementConsumer().setRule(grammarAccess.getParenthesizedElementAccess());
		getTerminalRuleConsumer().setRule(grammarAccess.getTerminalRuleAccess());
		getTerminalAlternativesConsumer().setRule(grammarAccess.getTerminalAlternativesAccess());
		getTerminalGroupConsumer().setRule(grammarAccess.getTerminalGroupAccess());
		getTerminalTokenConsumer().setRule(grammarAccess.getTerminalTokenAccess());
		getTerminalTokenElementConsumer().setRule(grammarAccess.getTerminalTokenElementAccess());
		getParenthesizedTerminalElementConsumer().setRule(grammarAccess.getParenthesizedTerminalElementAccess());
		getAbstractNegatedTokenConsumer().setRule(grammarAccess.getAbstractNegatedTokenAccess());
		getNegatedTokenConsumer().setRule(grammarAccess.getNegatedTokenAccess());
		getUntilTokenConsumer().setRule(grammarAccess.getUntilTokenAccess());
		getWildcardConsumer().setRule(grammarAccess.getWildcardAccess());
		getCharacterRangeConsumer().setRule(grammarAccess.getCharacterRangeAccess());
		getEnumRuleConsumer().setRule(grammarAccess.getEnumRuleAccess());
		getEnumLiteralsConsumer().setRule(grammarAccess.getEnumLiteralsAccess());
		getEnumLiteralDeclarationConsumer().setRule(grammarAccess.getEnumLiteralDeclarationAccess());
		getIdConsumer().setRule(grammarAccess.getIDRule());
		getIntConsumer().setRule(grammarAccess.getINTRule());
		getStringConsumer().setRule(grammarAccess.getSTRINGRule());
		getMlCommentConsumer().setRule(grammarAccess.getML_COMMENTRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getAnyOtherConsumer().setRule(grammarAccess.getANY_OTHERRule());


		getGrammarConsumer().setAbstractMetamodelDeclarationConsumer(getAbstractMetamodelDeclarationConsumer());
		getGrammarConsumer().setAbstractRuleConsumer(getAbstractRuleConsumer());
		getGrammarConsumer().setGrammarIdConsumer(getGrammarIdConsumer());
		getGrammarConsumer().setIdConsumer(getIdConsumer());

		getGrammarIdConsumer().setIdConsumer(getIdConsumer());

		getAbstractRuleConsumer().setEnumRuleConsumer(getEnumRuleConsumer());
		getAbstractRuleConsumer().setParserRuleConsumer(getParserRuleConsumer());
		getAbstractRuleConsumer().setTerminalRuleConsumer(getTerminalRuleConsumer());

		getAbstractMetamodelDeclarationConsumer().setGeneratedMetamodelConsumer(getGeneratedMetamodelConsumer());
		getAbstractMetamodelDeclarationConsumer().setReferencedMetamodelConsumer(getReferencedMetamodelConsumer());

		getGeneratedMetamodelConsumer().setIdConsumer(getIdConsumer());
		getGeneratedMetamodelConsumer().setStringConsumer(getStringConsumer());

		getReferencedMetamodelConsumer().setIdConsumer(getIdConsumer());
		getReferencedMetamodelConsumer().setStringConsumer(getStringConsumer());

		getParserRuleConsumer().setAlternativesConsumer(getAlternativesConsumer());
		getParserRuleConsumer().setIdConsumer(getIdConsumer());
		getParserRuleConsumer().setTypeRefConsumer(getTypeRefConsumer());

		getTypeRefConsumer().setIdConsumer(getIdConsumer());

		getAlternativesConsumer().setUnorderedGroupConsumer(getUnorderedGroupConsumer());

		getUnorderedGroupConsumer().setGroupConsumer(getGroupConsumer());

		getGroupConsumer().setAbstractTokenConsumer(getAbstractTokenConsumer());

		getAbstractTokenConsumer().setAbstractTokenWithCardinalityConsumer(getAbstractTokenWithCardinalityConsumer());
		getAbstractTokenConsumer().setActionConsumer(getActionConsumer());

		getAbstractTokenWithCardinalityConsumer().setAbstractTerminalConsumer(getAbstractTerminalConsumer());
		getAbstractTokenWithCardinalityConsumer().setAssignmentConsumer(getAssignmentConsumer());

		getActionConsumer().setIdConsumer(getIdConsumer());
		getActionConsumer().setTypeRefConsumer(getTypeRefConsumer());

		getAbstractTerminalConsumer().setKeywordConsumer(getKeywordConsumer());
		getAbstractTerminalConsumer().setParenthesizedElementConsumer(getParenthesizedElementConsumer());
		getAbstractTerminalConsumer().setRuleCallConsumer(getRuleCallConsumer());

		getKeywordConsumer().setStringConsumer(getStringConsumer());

		getRuleCallConsumer().setIdConsumer(getIdConsumer());

		getAssignmentConsumer().setAssignableTerminalConsumer(getAssignableTerminalConsumer());
		getAssignmentConsumer().setIdConsumer(getIdConsumer());

		getAssignableTerminalConsumer().setCrossReferenceConsumer(getCrossReferenceConsumer());
		getAssignableTerminalConsumer().setKeywordConsumer(getKeywordConsumer());
		getAssignableTerminalConsumer().setParenthesizedAssignableElementConsumer(getParenthesizedAssignableElementConsumer());
		getAssignableTerminalConsumer().setRuleCallConsumer(getRuleCallConsumer());

		getParenthesizedAssignableElementConsumer().setAssignableAlternativesConsumer(getAssignableAlternativesConsumer());

		getAssignableAlternativesConsumer().setAssignableTerminalConsumer(getAssignableTerminalConsumer());

		getCrossReferenceConsumer().setCrossReferenceableTerminalConsumer(getCrossReferenceableTerminalConsumer());
		getCrossReferenceConsumer().setTypeRefConsumer(getTypeRefConsumer());

		getCrossReferenceableTerminalConsumer().setKeywordConsumer(getKeywordConsumer());
		getCrossReferenceableTerminalConsumer().setRuleCallConsumer(getRuleCallConsumer());

		getParenthesizedElementConsumer().setAlternativesConsumer(getAlternativesConsumer());

		getTerminalRuleConsumer().setIdConsumer(getIdConsumer());
		getTerminalRuleConsumer().setTerminalAlternativesConsumer(getTerminalAlternativesConsumer());
		getTerminalRuleConsumer().setTypeRefConsumer(getTypeRefConsumer());

		getTerminalAlternativesConsumer().setTerminalGroupConsumer(getTerminalGroupConsumer());

		getTerminalGroupConsumer().setTerminalTokenConsumer(getTerminalTokenConsumer());

		getTerminalTokenConsumer().setTerminalTokenElementConsumer(getTerminalTokenElementConsumer());

		getTerminalTokenElementConsumer().setAbstractNegatedTokenConsumer(getAbstractNegatedTokenConsumer());
		getTerminalTokenElementConsumer().setCharacterRangeConsumer(getCharacterRangeConsumer());
		getTerminalTokenElementConsumer().setParenthesizedTerminalElementConsumer(getParenthesizedTerminalElementConsumer());
		getTerminalTokenElementConsumer().setRuleCallConsumer(getRuleCallConsumer());
		getTerminalTokenElementConsumer().setWildcardConsumer(getWildcardConsumer());

		getParenthesizedTerminalElementConsumer().setTerminalAlternativesConsumer(getTerminalAlternativesConsumer());

		getAbstractNegatedTokenConsumer().setNegatedTokenConsumer(getNegatedTokenConsumer());
		getAbstractNegatedTokenConsumer().setUntilTokenConsumer(getUntilTokenConsumer());

		getNegatedTokenConsumer().setTerminalTokenElementConsumer(getTerminalTokenElementConsumer());

		getUntilTokenConsumer().setTerminalTokenElementConsumer(getTerminalTokenElementConsumer());

		getCharacterRangeConsumer().setKeywordConsumer(getKeywordConsumer());

		getEnumRuleConsumer().setEnumLiteralsConsumer(getEnumLiteralsConsumer());
		getEnumRuleConsumer().setIdConsumer(getIdConsumer());
		getEnumRuleConsumer().setTypeRefConsumer(getTypeRefConsumer());

		getEnumLiteralsConsumer().setEnumLiteralDeclarationConsumer(getEnumLiteralDeclarationConsumer());

		getEnumLiteralDeclarationConsumer().setIdConsumer(getIdConsumer());
		getEnumLiteralDeclarationConsumer().setKeywordConsumer(getKeywordConsumer());

		getGrammarConsumer().setKeyword$12$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getGrammarConsumer().setKeyword$19$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$5$Delimiter);
		getGrammarConsumer().setKeyword$20$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getGrammarConsumer().setKeyword$27$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getGrammarConsumer().setKeyword$32$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getGrammarConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$5$Delimiter);
		getGrammarConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$5$Delimiter);
		getGrammarConsumer().setRuleCall$25$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.ruleCall$28$Delimiter);
		getGrammarConsumer().setRuleCall$31$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.ruleCall$28$Delimiter);
		getGrammarIdConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getGrammarIdConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.ruleCall$28$Delimiter);
		getGrammarIdConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.ruleCall$28$Delimiter);
		getGeneratedMetamodelConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$5$Delimiter);
		getGeneratedMetamodelConsumer().setKeyword$10$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$5$Delimiter);
		getGeneratedMetamodelConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.ruleCall$28$Delimiter);
		getGeneratedMetamodelConsumer().setRuleCall$8$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.ruleCall$67$Delimiter);
		getGeneratedMetamodelConsumer().setRuleCall$12$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.ruleCall$28$Delimiter);
		getReferencedMetamodelConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$5$Delimiter);
		getReferencedMetamodelConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$5$Delimiter);
		getReferencedMetamodelConsumer().setRuleCall$6$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.ruleCall$67$Delimiter);
		getReferencedMetamodelConsumer().setRuleCall$10$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.ruleCall$28$Delimiter);
		getParserRuleConsumer().setKeyword$18$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getParserRuleConsumer().setKeyword$23$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getParserRuleConsumer().setKeyword$24$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getParserRuleConsumer().setKeyword$27$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getParserRuleConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$5$Delimiter);
		getParserRuleConsumer().setKeyword$10$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$5$Delimiter);
		getParserRuleConsumer().setKeyword$11$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getParserRuleConsumer().setRuleCall$16$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.ruleCall$28$Delimiter);
		getParserRuleConsumer().setRuleCall$22$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.ruleCall$28$Delimiter);
		getParserRuleConsumer().setRuleCall$3$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.ruleCall$28$Delimiter);
		getTypeRefConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getTypeRefConsumer().setRuleCall$6$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.ruleCall$28$Delimiter);
		getTypeRefConsumer().setRuleCall$11$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.ruleCall$28$Delimiter);
		getAlternativesConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getUnorderedGroupConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getAbstractTokenWithCardinalityConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getAbstractTokenWithCardinalityConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getAbstractTokenWithCardinalityConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getActionConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getActionConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getActionConsumer().setKeyword$11$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getActionConsumer().setKeyword$12$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getActionConsumer().setKeyword$13$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$5$Delimiter);
		getActionConsumer().setKeyword$14$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getActionConsumer().setRuleCall$8$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.ruleCall$28$Delimiter);
		getKeywordConsumer().setRuleCall$2$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.ruleCall$67$Delimiter);
		getRuleCallConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.ruleCall$28$Delimiter);
		getAssignmentConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getAssignmentConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getAssignmentConsumer().setKeyword$8$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getAssignmentConsumer().setRuleCall$3$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.ruleCall$28$Delimiter);
		getParenthesizedAssignableElementConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getParenthesizedAssignableElementConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getAssignableAlternativesConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getCrossReferenceConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getCrossReferenceConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getCrossReferenceConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getParenthesizedElementConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getParenthesizedElementConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getTerminalRuleConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$5$Delimiter);
		getTerminalRuleConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$5$Delimiter);
		getTerminalRuleConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getTerminalRuleConsumer().setKeyword$12$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getTerminalRuleConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.ruleCall$28$Delimiter);
		getTerminalAlternativesConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getTerminalTokenConsumer().setKeyword$5$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getTerminalTokenConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getTerminalTokenConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getParenthesizedTerminalElementConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getParenthesizedTerminalElementConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getNegatedTokenConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getUntilTokenConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getWildcardConsumer().setKeyword$4$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getCharacterRangeConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getEnumRuleConsumer().setKeyword$2$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$5$Delimiter);
		getEnumRuleConsumer().setKeyword$6$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$5$Delimiter);
		getEnumRuleConsumer().setKeyword$9$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getEnumRuleConsumer().setKeyword$12$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getEnumRuleConsumer().setRuleCall$4$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.ruleCall$28$Delimiter);
		getEnumLiteralsConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getEnumLiteralDeclarationConsumer().setKeyword$7$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.keyword$15$Delimiter);
		getEnumLiteralDeclarationConsumer().setRuleCall$5$Delimiter(org.eclipse.xtext.parser.packrat.XtextDelimiters.ruleCall$28$Delimiter);
	}
	
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public XtextGrammarConsumer getGrammarConsumer() {
    	return grammarConsumer;
    }

    public XtextGrammarIDConsumer getGrammarIdConsumer() {
    	return grammarIdConsumer;
    }

    public XtextAbstractRuleConsumer getAbstractRuleConsumer() {
    	return abstractRuleConsumer;
    }

    public XtextAbstractMetamodelDeclarationConsumer getAbstractMetamodelDeclarationConsumer() {
    	return abstractMetamodelDeclarationConsumer;
    }

    public XtextGeneratedMetamodelConsumer getGeneratedMetamodelConsumer() {
    	return generatedMetamodelConsumer;
    }

    public XtextReferencedMetamodelConsumer getReferencedMetamodelConsumer() {
    	return referencedMetamodelConsumer;
    }

    public XtextParserRuleConsumer getParserRuleConsumer() {
    	return parserRuleConsumer;
    }

    public XtextTypeRefConsumer getTypeRefConsumer() {
    	return typeRefConsumer;
    }

    public XtextAlternativesConsumer getAlternativesConsumer() {
    	return alternativesConsumer;
    }

    public XtextUnorderedGroupConsumer getUnorderedGroupConsumer() {
    	return unorderedGroupConsumer;
    }

    public XtextGroupConsumer getGroupConsumer() {
    	return groupConsumer;
    }

    public XtextAbstractTokenConsumer getAbstractTokenConsumer() {
    	return abstractTokenConsumer;
    }

    public XtextAbstractTokenWithCardinalityConsumer getAbstractTokenWithCardinalityConsumer() {
    	return abstractTokenWithCardinalityConsumer;
    }

    public XtextActionConsumer getActionConsumer() {
    	return actionConsumer;
    }

    public XtextAbstractTerminalConsumer getAbstractTerminalConsumer() {
    	return abstractTerminalConsumer;
    }

    public XtextKeywordConsumer getKeywordConsumer() {
    	return keywordConsumer;
    }

    public XtextRuleCallConsumer getRuleCallConsumer() {
    	return ruleCallConsumer;
    }

    public XtextAssignmentConsumer getAssignmentConsumer() {
    	return assignmentConsumer;
    }

    public XtextAssignableTerminalConsumer getAssignableTerminalConsumer() {
    	return assignableTerminalConsumer;
    }

    public XtextParenthesizedAssignableElementConsumer getParenthesizedAssignableElementConsumer() {
    	return parenthesizedAssignableElementConsumer;
    }

    public XtextAssignableAlternativesConsumer getAssignableAlternativesConsumer() {
    	return assignableAlternativesConsumer;
    }

    public XtextCrossReferenceConsumer getCrossReferenceConsumer() {
    	return crossReferenceConsumer;
    }

    public XtextCrossReferenceableTerminalConsumer getCrossReferenceableTerminalConsumer() {
    	return crossReferenceableTerminalConsumer;
    }

    public XtextParenthesizedElementConsumer getParenthesizedElementConsumer() {
    	return parenthesizedElementConsumer;
    }

    public XtextTerminalRuleConsumer getTerminalRuleConsumer() {
    	return terminalRuleConsumer;
    }

    public XtextTerminalAlternativesConsumer getTerminalAlternativesConsumer() {
    	return terminalAlternativesConsumer;
    }

    public XtextTerminalGroupConsumer getTerminalGroupConsumer() {
    	return terminalGroupConsumer;
    }

    public XtextTerminalTokenConsumer getTerminalTokenConsumer() {
    	return terminalTokenConsumer;
    }

    public XtextTerminalTokenElementConsumer getTerminalTokenElementConsumer() {
    	return terminalTokenElementConsumer;
    }

    public XtextParenthesizedTerminalElementConsumer getParenthesizedTerminalElementConsumer() {
    	return parenthesizedTerminalElementConsumer;
    }

    public XtextAbstractNegatedTokenConsumer getAbstractNegatedTokenConsumer() {
    	return abstractNegatedTokenConsumer;
    }

    public XtextNegatedTokenConsumer getNegatedTokenConsumer() {
    	return negatedTokenConsumer;
    }

    public XtextUntilTokenConsumer getUntilTokenConsumer() {
    	return untilTokenConsumer;
    }

    public XtextWildcardConsumer getWildcardConsumer() {
    	return wildcardConsumer;
    }

    public XtextCharacterRangeConsumer getCharacterRangeConsumer() {
    	return characterRangeConsumer;
    }

    public XtextEnumRuleConsumer getEnumRuleConsumer() {
    	return enumRuleConsumer;
    }

    public XtextEnumLiteralsConsumer getEnumLiteralsConsumer() {
    	return enumLiteralsConsumer;
    }

    public XtextEnumLiteralDeclarationConsumer getEnumLiteralDeclarationConsumer() {
    	return enumLiteralDeclarationConsumer;
    }

    public TerminalsIDConsumer getIdConsumer() {
    	return getTerminalsConfiguration().getIdConsumer();
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
