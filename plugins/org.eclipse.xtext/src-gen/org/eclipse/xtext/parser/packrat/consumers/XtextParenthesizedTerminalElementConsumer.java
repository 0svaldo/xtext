/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;

import org.eclipse.xtext.services.XtextGrammarAccess.ParenthesizedTerminalElementElements;

public final class XtextParenthesizedTerminalElementConsumer extends NonTerminalConsumer {

	private ParenthesizedTerminalElementElements rule;	

	private INonTerminalConsumer terminalAlternativesConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer keyword$3$Consumer;

	private IElementConsumer ruleCall$4$Consumer;

	private IElementConsumer keyword$5$Consumer;

	private ICharacterClass keyword$3$Delimiter;

	private ICharacterClass keyword$5$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$3$Consumer);
			acceptor.accept(ruleCall$4$Consumer);
			acceptor.accept(keyword$5$Consumer);
		}
	}

	protected class Keyword$3$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$3$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$3$Delimiter());
		}
	}

	protected class RuleCall$4$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$4$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(terminalAlternativesConsumer, null, false, false, false, getElement());
		}
	}

	protected class Keyword$5$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$5$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$5$Delimiter());
		}
	}

	public XtextParenthesizedTerminalElementConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$3$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$5$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public ParenthesizedTerminalElementElements getRule() {
		return rule;
	}
	
	public void setRule(ParenthesizedTerminalElementElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		keyword$3$Consumer = new Keyword$3$Consumer(rule.ele00KeywordLeftParenthesis());
		ruleCall$4$Consumer = new RuleCall$4$Consumer(rule.ele01ParserRuleCallTerminalAlternatives());
		keyword$5$Consumer = new Keyword$5$Consumer(rule.ele1KeywordRightParenthesis());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setTerminalAlternativesConsumer(INonTerminalConsumer terminalAlternativesConsumer) {
		this.terminalAlternativesConsumer = terminalAlternativesConsumer;
	}
	
	public ICharacterClass getKeyword$3$Delimiter() {
		return keyword$3$Delimiter;
	}
	
	public void setKeyword$3$Delimiter(ICharacterClass characterClass) {
		keyword$3$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$5$Delimiter() {
		return keyword$5$Delimiter;
	}
	
	public void setKeyword$5$Delimiter(ICharacterClass characterClass) {
		keyword$5$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
