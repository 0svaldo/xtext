/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.services.XtextGrammarAccess.ParserRuleElements;

public final class XtextParserRuleConsumer extends NonTerminalConsumer {

	private ParserRuleElements rule;	

	private INonTerminalConsumer alternativesConsumer;

	private ITerminalConsumer idConsumer;

	private INonTerminalConsumer typeRefConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer assignment$6$Consumer;

	private IElementConsumer ruleCall$7$Consumer;

	private IElementConsumer group$8$Consumer;

	private IElementConsumer keyword$9$Consumer;

	private IElementConsumer assignment$10$Consumer;

	private IElementConsumer ruleCall$11$Consumer;

	private IElementConsumer group$12$Consumer;

	private IElementConsumer assignment$15$Consumer;

	private IElementConsumer keyword$16$Consumer;

	private IElementConsumer keyword$17$Consumer;

	private IElementConsumer group$18$Consumer;

	private IElementConsumer assignment$19$Consumer;

	private IElementConsumer crossReference$20$Consumer;

	private IElementConsumer group$22$Consumer;

	private IElementConsumer keyword$23$Consumer;

	private IElementConsumer assignment$24$Consumer;

	private IElementConsumer crossReference$25$Consumer;

	private IElementConsumer keyword$27$Consumer;

	private IElementConsumer keyword$28$Consumer;

	private IElementConsumer assignment$29$Consumer;

	private IElementConsumer ruleCall$30$Consumer;

	private IElementConsumer keyword$31$Consumer;

	private ISequenceMatcher crossReference$20$Delimiter;

	private ISequenceMatcher crossReference$25$Delimiter;

	private ICharacterClass keyword$23$Delimiter;

	private ICharacterClass keyword$27$Delimiter;

	private ICharacterClass keyword$28$Delimiter;

	private ICharacterClass keyword$31$Delimiter;

	private ICharacterClass keyword$9$Delimiter;

	private ICharacterClass keyword$16$Delimiter;

	private ICharacterClass keyword$17$Delimiter;

	private ISequenceMatcher ruleCall$7$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$6$Consumer);
			acceptor.accept(group$8$Consumer);
			acceptor.accept(group$12$Consumer);
			acceptor.accept(keyword$28$Consumer);
			acceptor.accept(assignment$29$Consumer);
			acceptor.accept(keyword$31$Consumer);
		}
	}

	protected class Assignment$6$Consumer extends AssignmentConsumer {
		
		protected Assignment$6$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$7$Consumer;
		}
	}

	protected class RuleCall$7$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$7$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "name", false, false, getElement(), getRuleCall$7$Delimiter(), optional);
		}
	}

	protected class Group$8$Consumer extends OptionalGroupConsumer {
		
		protected Group$8$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$9$Consumer);
			acceptor.accept(assignment$10$Consumer);
		}
	}

	protected class Keyword$9$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$9$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$9$Delimiter(), optional);
		}
	}

	protected class Assignment$10$Consumer extends AssignmentConsumer {
		
		protected Assignment$10$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$11$Consumer;
		}
	}

	protected class RuleCall$11$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$11$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(typeRefConsumer, "type", false, false, false, getElement(), optional);
		}
	}

	protected class Group$12$Consumer extends OptionalGroupConsumer {
		
		protected Group$12$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$15$Consumer);
			acceptor.accept(keyword$17$Consumer);
			acceptor.accept(group$18$Consumer);
			acceptor.accept(keyword$27$Consumer);
		}
	}

	protected class Assignment$15$Consumer extends AssignmentConsumer {
		
		protected Assignment$15$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$16$Consumer;
		}
	}

	protected class Keyword$16$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$16$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "definesHiddenTokens", false, true, getKeyword$16$Delimiter(), optional);
		}
	}

	protected class Keyword$17$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$17$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$17$Delimiter(), optional);
		}
	}

	protected class Group$18$Consumer extends OptionalGroupConsumer {
		
		protected Group$18$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$19$Consumer);
			acceptor.accept(group$22$Consumer);
		}
	}

	protected class Assignment$19$Consumer extends AssignmentConsumer {
		
		protected Assignment$19$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$20$Consumer;
		}
	}

	protected class CrossReference$20$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$20$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "hiddenTokens", true, false, getElement(), getCrossReference$20$Delimiter(), optional);
		}
	}

	protected class Group$22$Consumer extends LoopGroupConsumer {
		
		protected Group$22$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$23$Consumer);
			acceptor.accept(assignment$24$Consumer);
		}
	}

	protected class Keyword$23$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$23$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$23$Delimiter(), optional);
		}
	}

	protected class Assignment$24$Consumer extends AssignmentConsumer {
		
		protected Assignment$24$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$25$Consumer;
		}
	}

	protected class CrossReference$25$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$25$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "hiddenTokens", true, false, getElement(), getCrossReference$25$Delimiter(), optional);
		}
	}

	protected class Keyword$27$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$27$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$27$Delimiter(), optional);
		}
	}

	protected class Keyword$28$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$28$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$28$Delimiter(), optional);
		}
	}

	protected class Assignment$29$Consumer extends AssignmentConsumer {
		
		protected Assignment$29$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$30$Consumer;
		}
	}

	protected class RuleCall$30$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$30$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(alternativesConsumer, "alternatives", false, false, false, getElement(), optional);
		}
	}

	protected class Keyword$31$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$31$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$31$Delimiter(), optional);
		}
	}

	public XtextParserRuleConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		crossReference$20$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		crossReference$25$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		keyword$23$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$27$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$28$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$31$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$9$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$16$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$17$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$7$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public ParserRuleElements getRule() {
		return rule;
	}
	
	public void setRule(ParserRuleElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		assignment$6$Consumer = new Assignment$6$Consumer(rule.ele00000AssignmentName());
		ruleCall$7$Consumer = new RuleCall$7$Consumer(rule.ele000000TerminalRuleCallID());
		group$8$Consumer = new Group$8$Consumer(rule.ele00001Group());
		keyword$9$Consumer = new Keyword$9$Consumer(rule.ele000010KeywordReturns());
		assignment$10$Consumer = new Assignment$10$Consumer(rule.ele000011AssignmentType());
		ruleCall$11$Consumer = new RuleCall$11$Consumer(rule.ele0000110ParserRuleCallTypeRef());
		group$12$Consumer = new Group$12$Consumer(rule.ele0001Group());
		assignment$15$Consumer = new Assignment$15$Consumer(rule.ele0001000AssignmentDefinesHiddenTokens());
		keyword$16$Consumer = new Keyword$16$Consumer(rule.ele00010000KeywordHidden());
		keyword$17$Consumer = new Keyword$17$Consumer(rule.ele0001001KeywordLeftParenthesis());
		group$18$Consumer = new Group$18$Consumer(rule.ele000101Group());
		assignment$19$Consumer = new Assignment$19$Consumer(rule.ele0001010AssignmentHiddenTokens());
		crossReference$20$Consumer = new CrossReference$20$Consumer(rule.ele00010100CrossReferenceEStringAbstractRule());
		group$22$Consumer = new Group$22$Consumer(rule.ele0001011Group());
		keyword$23$Consumer = new Keyword$23$Consumer(rule.ele00010110KeywordComma());
		assignment$24$Consumer = new Assignment$24$Consumer(rule.ele00010111AssignmentHiddenTokens());
		crossReference$25$Consumer = new CrossReference$25$Consumer(rule.ele000101110CrossReferenceEStringAbstractRule());
		keyword$27$Consumer = new Keyword$27$Consumer(rule.ele00011KeywordRightParenthesis());
		keyword$28$Consumer = new Keyword$28$Consumer(rule.ele001KeywordColon());
		assignment$29$Consumer = new Assignment$29$Consumer(rule.ele01AssignmentAlternatives());
		ruleCall$30$Consumer = new RuleCall$30$Consumer(rule.ele010ParserRuleCallAlternatives());
		keyword$31$Consumer = new Keyword$31$Consumer(rule.ele1KeywordSemicolon());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setAlternativesConsumer(INonTerminalConsumer alternativesConsumer) {
		this.alternativesConsumer = alternativesConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setTypeRefConsumer(INonTerminalConsumer typeRefConsumer) {
		this.typeRefConsumer = typeRefConsumer;
	}
	
	public ISequenceMatcher getCrossReference$20$Delimiter() {
		return crossReference$20$Delimiter;
	}
	
	public void setCrossReference$20$Delimiter(ISequenceMatcher matcher) {
		crossReference$20$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getCrossReference$25$Delimiter() {
		return crossReference$25$Delimiter;
	}
	
	public void setCrossReference$25$Delimiter(ISequenceMatcher matcher) {
		crossReference$25$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ICharacterClass getKeyword$23$Delimiter() {
		return keyword$23$Delimiter;
	}
	
	public void setKeyword$23$Delimiter(ICharacterClass characterClass) {
		keyword$23$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$27$Delimiter() {
		return keyword$27$Delimiter;
	}
	
	public void setKeyword$27$Delimiter(ICharacterClass characterClass) {
		keyword$27$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$28$Delimiter() {
		return keyword$28$Delimiter;
	}
	
	public void setKeyword$28$Delimiter(ICharacterClass characterClass) {
		keyword$28$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$31$Delimiter() {
		return keyword$31$Delimiter;
	}
	
	public void setKeyword$31$Delimiter(ICharacterClass characterClass) {
		keyword$31$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$9$Delimiter() {
		return keyword$9$Delimiter;
	}
	
	public void setKeyword$9$Delimiter(ICharacterClass characterClass) {
		keyword$9$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$16$Delimiter() {
		return keyword$16$Delimiter;
	}
	
	public void setKeyword$16$Delimiter(ICharacterClass characterClass) {
		keyword$16$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$17$Delimiter() {
		return keyword$17$Delimiter;
	}
	
	public void setKeyword$17$Delimiter(ICharacterClass characterClass) {
		keyword$17$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$7$Delimiter() {
		return ruleCall$7$Delimiter;
	}
	
	public void setRuleCall$7$Delimiter(ISequenceMatcher matcher) {
		ruleCall$7$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
