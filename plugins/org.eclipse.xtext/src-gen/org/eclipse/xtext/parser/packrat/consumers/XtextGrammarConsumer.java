/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.services.XtextGrammarAccess.GrammarElements;

public final class XtextGrammarConsumer extends NonTerminalConsumer {

	private GrammarElements rule;	

	private INonTerminalConsumer abstractMetamodelDeclarationConsumer;

	private INonTerminalConsumer abstractRuleConsumer;

	private INonTerminalConsumer grammarIdConsumer;

	private ITerminalConsumer idConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer keyword$2$Consumer;

	private IElementConsumer assignment$3$Consumer;

	private IElementConsumer ruleCall$4$Consumer;

	private IElementConsumer group$5$Consumer;

	private IElementConsumer keyword$6$Consumer;

	private IElementConsumer assignment$7$Consumer;

	private IElementConsumer crossReference$8$Consumer;

	private IElementConsumer ruleCall$10$Consumer;

	private IElementConsumer group$11$Consumer;

	private IElementConsumer keyword$12$Consumer;

	private IElementConsumer assignment$13$Consumer;

	private IElementConsumer crossReference$14$Consumer;

	private IElementConsumer ruleCall$16$Consumer;

	private IElementConsumer group$17$Consumer;

	private IElementConsumer assignment$18$Consumer;

	private IElementConsumer keyword$19$Consumer;

	private IElementConsumer keyword$20$Consumer;

	private IElementConsumer group$21$Consumer;

	private IElementConsumer assignment$22$Consumer;

	private IElementConsumer crossReference$23$Consumer;

	private IElementConsumer ruleCall$25$Consumer;

	private IElementConsumer group$26$Consumer;

	private IElementConsumer keyword$27$Consumer;

	private IElementConsumer assignment$28$Consumer;

	private IElementConsumer crossReference$29$Consumer;

	private IElementConsumer ruleCall$31$Consumer;

	private IElementConsumer keyword$32$Consumer;

	private IElementConsumer assignment$33$Consumer;

	private IElementConsumer ruleCall$34$Consumer;

	private IElementConsumer assignment$35$Consumer;

	private IElementConsumer ruleCall$36$Consumer;

	private ICharacterClass keyword$12$Delimiter;

	private ICharacterClass keyword$19$Delimiter;

	private ICharacterClass keyword$20$Delimiter;

	private ICharacterClass keyword$27$Delimiter;

	private ICharacterClass keyword$32$Delimiter;

	private ICharacterClass keyword$2$Delimiter;

	private ICharacterClass keyword$6$Delimiter;

	private ISequenceMatcher ruleCall$25$Delimiter;

	private ISequenceMatcher ruleCall$31$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$2$Consumer);
			acceptor.accept(assignment$3$Consumer);
			acceptor.accept(group$5$Consumer);
			acceptor.accept(group$17$Consumer);
			acceptor.accept(assignment$33$Consumer);
			acceptor.accept(assignment$35$Consumer);
		}
	}

	protected class Keyword$2$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$2$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$2$Delimiter(), optional);
		}
	}

	protected class Assignment$3$Consumer extends AssignmentConsumer {
		
		protected Assignment$3$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$4$Consumer;
		}
	}

	protected class RuleCall$4$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$4$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(grammarIdConsumer, "name", false, true, false, getElement(), optional);
		}
	}

	protected class Group$5$Consumer extends OptionalGroupConsumer {
		
		protected Group$5$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$6$Consumer);
			acceptor.accept(assignment$7$Consumer);
			acceptor.accept(group$11$Consumer);
		}
	}

	protected class Keyword$6$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$6$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$6$Delimiter(), optional);
		}
	}

	protected class Assignment$7$Consumer extends AssignmentConsumer {
		
		protected Assignment$7$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$8$Consumer;
		}
	}

	protected class CrossReference$8$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$8$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(grammarIdConsumer, "usedGrammars", true, true, false, getElement(), optional);
		}
	}

	protected class RuleCall$10$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$10$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(grammarIdConsumer, "usedGrammars", true, true, false, getElement(), optional);
		}
	}

	protected class Group$11$Consumer extends LoopGroupConsumer {
		
		protected Group$11$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$12$Consumer);
			acceptor.accept(assignment$13$Consumer);
		}
	}

	protected class Keyword$12$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$12$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$12$Delimiter(), optional);
		}
	}

	protected class Assignment$13$Consumer extends AssignmentConsumer {
		
		protected Assignment$13$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$14$Consumer;
		}
	}

	protected class CrossReference$14$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$14$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(grammarIdConsumer, "usedGrammars", true, true, false, getElement(), optional);
		}
	}

	protected class RuleCall$16$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$16$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(grammarIdConsumer, "usedGrammars", true, true, false, getElement(), optional);
		}
	}

	protected class Group$17$Consumer extends OptionalGroupConsumer {
		
		protected Group$17$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$18$Consumer);
			acceptor.accept(keyword$20$Consumer);
			acceptor.accept(group$21$Consumer);
			acceptor.accept(keyword$32$Consumer);
		}
	}

	protected class Assignment$18$Consumer extends AssignmentConsumer {
		
		protected Assignment$18$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$19$Consumer;
		}
	}

	protected class Keyword$19$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$19$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), "definesHiddenTokens", false, true, getKeyword$19$Delimiter(), optional);
		}
	}

	protected class Keyword$20$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$20$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$20$Delimiter(), optional);
		}
	}

	protected class Group$21$Consumer extends OptionalGroupConsumer {
		
		protected Group$21$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$22$Consumer);
			acceptor.accept(group$26$Consumer);
		}
	}

	protected class Assignment$22$Consumer extends AssignmentConsumer {
		
		protected Assignment$22$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$23$Consumer;
		}
	}

	protected class CrossReference$23$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$23$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "hiddenTokens", true, false, getElement(), getRuleCall$25$Delimiter(), optional);
		}
	}

	protected class RuleCall$25$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$25$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "hiddenTokens", true, false, getElement(), getRuleCall$25$Delimiter(), optional);
		}
	}

	protected class Group$26$Consumer extends LoopGroupConsumer {
		
		protected Group$26$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$27$Consumer);
			acceptor.accept(assignment$28$Consumer);
		}
	}

	protected class Keyword$27$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$27$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$27$Delimiter(), optional);
		}
	}

	protected class Assignment$28$Consumer extends AssignmentConsumer {
		
		protected Assignment$28$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$29$Consumer;
		}
	}

	protected class CrossReference$29$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$29$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "hiddenTokens", true, false, getElement(), getRuleCall$31$Delimiter(), optional);
		}
	}

	protected class RuleCall$31$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$31$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeTerminal(idConsumer, "hiddenTokens", true, false, getElement(), getRuleCall$31$Delimiter(), optional);
		}
	}

	protected class Keyword$32$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$32$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$32$Delimiter(), optional);
		}
	}

	protected class Assignment$33$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$33$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$34$Consumer;
		}
	}

	protected class RuleCall$34$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$34$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(abstractMetamodelDeclarationConsumer, "metamodelDeclarations", true, false, false, getElement(), optional);
		}
	}

	protected class Assignment$35$Consumer extends MandatoryLoopAssignmentConsumer {
		
		protected Assignment$35$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$36$Consumer;
		}
	}

	protected class RuleCall$36$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$36$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(abstractRuleConsumer, "rules", true, false, false, getElement(), optional);
		}
	}

	public XtextGrammarConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$12$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$19$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$20$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$27$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$32$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$2$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$6$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$25$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		ruleCall$31$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public GrammarElements getRule() {
		return rule;
	}
	
	public void setRule(GrammarElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.getGroup());
		keyword$2$Consumer = new Keyword$2$Consumer(rule.getGrammarKeyword_0());
		assignment$3$Consumer = new Assignment$3$Consumer(rule.getNameAssignment_1());
		ruleCall$4$Consumer = new RuleCall$4$Consumer(rule.getNameGrammarIDParserRuleCall_1_0());
		group$5$Consumer = new Group$5$Consumer(rule.getGroup_2());
		keyword$6$Consumer = new Keyword$6$Consumer(rule.getWithKeyword_2_0());
		assignment$7$Consumer = new Assignment$7$Consumer(rule.getUsedGrammarsAssignment_2_1());
		crossReference$8$Consumer = new CrossReference$8$Consumer(rule.getUsedGrammarsGrammarCrossReference_2_1_0());
		group$11$Consumer = new Group$11$Consumer(rule.getGroup_2_2());
		keyword$12$Consumer = new Keyword$12$Consumer(rule.getCommaKeyword_2_2_0());
		assignment$13$Consumer = new Assignment$13$Consumer(rule.getUsedGrammarsAssignment_2_2_1());
		crossReference$14$Consumer = new CrossReference$14$Consumer(rule.getUsedGrammarsGrammarCrossReference_2_2_1_0());
		group$17$Consumer = new Group$17$Consumer(rule.getGroup_3());
		assignment$18$Consumer = new Assignment$18$Consumer(rule.getDefinesHiddenTokensAssignment_3_0());
		keyword$19$Consumer = new Keyword$19$Consumer(rule.getDefinesHiddenTokensHiddenKeyword_3_0_0());
		keyword$20$Consumer = new Keyword$20$Consumer(rule.getLeftParenthesisKeyword_3_1());
		group$21$Consumer = new Group$21$Consumer(rule.getGroup_3_2());
		assignment$22$Consumer = new Assignment$22$Consumer(rule.getHiddenTokensAssignment_3_2_0());
		crossReference$23$Consumer = new CrossReference$23$Consumer(rule.getHiddenTokensAbstractRuleCrossReference_3_2_0_0());
		group$26$Consumer = new Group$26$Consumer(rule.getGroup_3_2_1());
		keyword$27$Consumer = new Keyword$27$Consumer(rule.getCommaKeyword_3_2_1_0());
		assignment$28$Consumer = new Assignment$28$Consumer(rule.getHiddenTokensAssignment_3_2_1_1());
		crossReference$29$Consumer = new CrossReference$29$Consumer(rule.getHiddenTokensAbstractRuleCrossReference_3_2_1_1_0());
		keyword$32$Consumer = new Keyword$32$Consumer(rule.getRightParenthesisKeyword_3_3());
		assignment$33$Consumer = new Assignment$33$Consumer(rule.getMetamodelDeclarationsAssignment_4());
		ruleCall$34$Consumer = new RuleCall$34$Consumer(rule.getMetamodelDeclarationsAbstractMetamodelDeclarationParserRuleCall_4_0());
		assignment$35$Consumer = new Assignment$35$Consumer(rule.getRulesAssignment_5());
		ruleCall$36$Consumer = new RuleCall$36$Consumer(rule.getRulesAbstractRuleParserRuleCall_5_0());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setAbstractMetamodelDeclarationConsumer(INonTerminalConsumer abstractMetamodelDeclarationConsumer) {
		this.abstractMetamodelDeclarationConsumer = abstractMetamodelDeclarationConsumer;
	}
	
	public void setAbstractRuleConsumer(INonTerminalConsumer abstractRuleConsumer) {
		this.abstractRuleConsumer = abstractRuleConsumer;
	}
	
	public void setGrammarIdConsumer(INonTerminalConsumer grammarIdConsumer) {
		this.grammarIdConsumer = grammarIdConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public ICharacterClass getKeyword$12$Delimiter() {
		return keyword$12$Delimiter;
	}
	
	public void setKeyword$12$Delimiter(ICharacterClass characterClass) {
		keyword$12$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$19$Delimiter() {
		return keyword$19$Delimiter;
	}
	
	public void setKeyword$19$Delimiter(ICharacterClass characterClass) {
		keyword$19$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$20$Delimiter() {
		return keyword$20$Delimiter;
	}
	
	public void setKeyword$20$Delimiter(ICharacterClass characterClass) {
		keyword$20$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$27$Delimiter() {
		return keyword$27$Delimiter;
	}
	
	public void setKeyword$27$Delimiter(ICharacterClass characterClass) {
		keyword$27$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$32$Delimiter() {
		return keyword$32$Delimiter;
	}
	
	public void setKeyword$32$Delimiter(ICharacterClass characterClass) {
		keyword$32$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$2$Delimiter() {
		return keyword$2$Delimiter;
	}
	
	public void setKeyword$2$Delimiter(ICharacterClass characterClass) {
		keyword$2$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$6$Delimiter() {
		return keyword$6$Delimiter;
	}
	
	public void setKeyword$6$Delimiter(ICharacterClass characterClass) {
		keyword$6$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$25$Delimiter() {
		return ruleCall$25$Delimiter;
	}
	
	public void setRuleCall$25$Delimiter(ISequenceMatcher matcher) {
		ruleCall$25$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getRuleCall$31$Delimiter() {
		return ruleCall$31$Delimiter;
	}
	
	public void setRuleCall$31$Delimiter(ISequenceMatcher matcher) {
		ruleCall$31$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
