/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.xtext.services.XtextGrammarAccess.GrammarElements;

public final class XtextGrammarConsumer extends NonTerminalConsumer {

	private GrammarElements rule;	

	private INonTerminalConsumer abstractMetamodelDeclarationConsumer;

	private INonTerminalConsumer abstractRuleConsumer;

	private INonTerminalConsumer grammarIdConsumer;

	private ITerminalConsumer idConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer alternatives$6$Consumer;

	private IElementConsumer assignment$7$Consumer;

	private IElementConsumer keyword$8$Consumer;

	private IElementConsumer keyword$9$Consumer;

	private IElementConsumer assignment$10$Consumer;

	private IElementConsumer ruleCall$11$Consumer;

	private IElementConsumer group$12$Consumer;

	private IElementConsumer keyword$13$Consumer;

	private IElementConsumer assignment$14$Consumer;

	private IElementConsumer crossReference$15$Consumer;

	private IElementConsumer group$17$Consumer;

	private IElementConsumer assignment$20$Consumer;

	private IElementConsumer keyword$21$Consumer;

	private IElementConsumer keyword$22$Consumer;

	private IElementConsumer group$23$Consumer;

	private IElementConsumer assignment$24$Consumer;

	private IElementConsumer crossReference$25$Consumer;

	private IElementConsumer group$27$Consumer;

	private IElementConsumer keyword$28$Consumer;

	private IElementConsumer assignment$29$Consumer;

	private IElementConsumer crossReference$30$Consumer;

	private IElementConsumer keyword$32$Consumer;

	private IElementConsumer assignment$33$Consumer;

	private IElementConsumer ruleCall$34$Consumer;

	private IElementConsumer assignment$35$Consumer;

	private IElementConsumer ruleCall$36$Consumer;

	private ISequenceMatcher crossReference$25$Delimiter;

	private ISequenceMatcher crossReference$30$Delimiter;

	private ICharacterClass keyword$8$Delimiter;

	private ICharacterClass keyword$9$Delimiter;

	private ICharacterClass keyword$13$Delimiter;

	private ICharacterClass keyword$21$Delimiter;

	private ICharacterClass keyword$22$Delimiter;

	private ICharacterClass keyword$28$Delimiter;

	private ICharacterClass keyword$32$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(alternatives$6$Consumer);
			acceptor.accept(assignment$10$Consumer);
			acceptor.accept(group$12$Consumer);
			acceptor.accept(group$17$Consumer);
			acceptor.accept(assignment$33$Consumer);
			acceptor.accept(assignment$35$Consumer);
		}
	}

	protected class Alternatives$6$Consumer extends AlternativesConsumer {
		
		protected Alternatives$6$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$7$Consumer);
			acceptor.accept(keyword$9$Consumer);
		}
	}

	protected class Assignment$7$Consumer extends AssignmentConsumer {
		
		protected Assignment$7$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$8$Consumer;
		}
	}

	protected class Keyword$8$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$8$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), "abstract", false, true, getKeyword$8$Delimiter());
		}
	}

	protected class Keyword$9$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$9$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$9$Delimiter());
		}
	}

	protected class Assignment$10$Consumer extends AssignmentConsumer {
		
		protected Assignment$10$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$11$Consumer;
		}
	}

	protected class RuleCall$11$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$11$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(grammarIdConsumer, "name", false, true, false, getElement());
		}
	}

	protected class Group$12$Consumer extends OptionalGroupConsumer {
		
		protected Group$12$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$13$Consumer);
			acceptor.accept(assignment$14$Consumer);
		}
	}

	protected class Keyword$13$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$13$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$13$Delimiter());
		}
	}

	protected class Assignment$14$Consumer extends AssignmentConsumer {
		
		protected Assignment$14$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$15$Consumer;
		}
	}

	protected class CrossReference$15$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$15$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(grammarIdConsumer, "superGrammar", false, true, false, getElement());
		}
	}

	protected class Group$17$Consumer extends OptionalGroupConsumer {
		
		protected Group$17$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$20$Consumer);
			acceptor.accept(keyword$22$Consumer);
			acceptor.accept(group$23$Consumer);
			acceptor.accept(keyword$32$Consumer);
		}
	}

	protected class Assignment$20$Consumer extends AssignmentConsumer {
		
		protected Assignment$20$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$21$Consumer;
		}
	}

	protected class Keyword$21$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$21$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), "definesHiddenTokens", false, true, getKeyword$21$Delimiter());
		}
	}

	protected class Keyword$22$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$22$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$22$Delimiter());
		}
	}

	protected class Group$23$Consumer extends OptionalGroupConsumer {
		
		protected Group$23$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$24$Consumer);
			acceptor.accept(group$27$Consumer);
		}
	}

	protected class Assignment$24$Consumer extends AssignmentConsumer {
		
		protected Assignment$24$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$25$Consumer;
		}
	}

	protected class CrossReference$25$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$25$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeTerminal(idConsumer, "hiddenTokens", true, false, getElement(), getCrossReference$25$Delimiter());
		}
	}

	protected class Group$27$Consumer extends LoopGroupConsumer {
		
		protected Group$27$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$28$Consumer);
			acceptor.accept(assignment$29$Consumer);
		}
	}

	protected class Keyword$28$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$28$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$28$Delimiter());
		}
	}

	protected class Assignment$29$Consumer extends AssignmentConsumer {
		
		protected Assignment$29$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return crossReference$30$Consumer;
		}
	}

	protected class CrossReference$30$Consumer extends ElementConsumer<CrossReference> {
		
		protected CrossReference$30$Consumer(final CrossReference crossReference) {
			super(crossReference);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeTerminal(idConsumer, "hiddenTokens", true, false, getElement(), getCrossReference$30$Delimiter());
		}
	}

	protected class Keyword$32$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$32$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$32$Delimiter());
		}
	}

	protected class Assignment$33$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$33$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$34$Consumer;
		}
	}

	protected class RuleCall$34$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$34$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(abstractMetamodelDeclarationConsumer, "metamodelDeclarations", true, false, false, getElement());
		}
	}

	protected class Assignment$35$Consumer extends MandatoryLoopAssignmentConsumer {
		
		protected Assignment$35$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$36$Consumer;
		}
	}

	protected class RuleCall$36$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$36$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(abstractRuleConsumer, "rules", true, false, false, getElement());
		}
	}

	public XtextGrammarConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		crossReference$25$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		crossReference$30$Delimiter = ISequenceMatcher.Factory.nullMatcher();
		keyword$8$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$9$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$13$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$21$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$22$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$28$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$32$Delimiter = ICharacterClass.Factory.nullClass();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public GrammarElements getRule() {
		return rule;
	}
	
	public void setRule(GrammarElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		alternatives$6$Consumer = new Alternatives$6$Consumer(rule.ele00000Alternatives());
		assignment$7$Consumer = new Assignment$7$Consumer(rule.ele000000AssignmentAbstract());
		keyword$8$Consumer = new Keyword$8$Consumer(rule.ele0000000KeywordAbstractLanguage());
		keyword$9$Consumer = new Keyword$9$Consumer(rule.ele000001KeywordLanguage());
		assignment$10$Consumer = new Assignment$10$Consumer(rule.ele00001AssignmentName());
		ruleCall$11$Consumer = new RuleCall$11$Consumer(rule.ele000010ParserRuleCallGrammarID());
		group$12$Consumer = new Group$12$Consumer(rule.ele0001Group());
		keyword$13$Consumer = new Keyword$13$Consumer(rule.ele00010KeywordExtends());
		assignment$14$Consumer = new Assignment$14$Consumer(rule.ele00011AssignmentSuperGrammar());
		crossReference$15$Consumer = new CrossReference$15$Consumer(rule.ele000110CrossReferenceEStringGrammar());
		group$17$Consumer = new Group$17$Consumer(rule.ele001Group());
		assignment$20$Consumer = new Assignment$20$Consumer(rule.ele001000AssignmentDefinesHiddenTokens());
		keyword$21$Consumer = new Keyword$21$Consumer(rule.ele0010000KeywordHidden());
		keyword$22$Consumer = new Keyword$22$Consumer(rule.ele001001KeywordLeftParenthesis());
		group$23$Consumer = new Group$23$Consumer(rule.ele00101Group());
		assignment$24$Consumer = new Assignment$24$Consumer(rule.ele001010AssignmentHiddenTokens());
		crossReference$25$Consumer = new CrossReference$25$Consumer(rule.ele0010100CrossReferenceEStringAbstractRule());
		group$27$Consumer = new Group$27$Consumer(rule.ele001011Group());
		keyword$28$Consumer = new Keyword$28$Consumer(rule.ele0010110KeywordComma());
		assignment$29$Consumer = new Assignment$29$Consumer(rule.ele0010111AssignmentHiddenTokens());
		crossReference$30$Consumer = new CrossReference$30$Consumer(rule.ele00101110CrossReferenceEStringAbstractRule());
		keyword$32$Consumer = new Keyword$32$Consumer(rule.ele0011KeywordRightParenthesis());
		assignment$33$Consumer = new Assignment$33$Consumer(rule.ele01AssignmentMetamodelDeclarations());
		ruleCall$34$Consumer = new RuleCall$34$Consumer(rule.ele010ParserRuleCallAbstractMetamodelDeclaration());
		assignment$35$Consumer = new Assignment$35$Consumer(rule.ele1AssignmentRules());
		ruleCall$36$Consumer = new RuleCall$36$Consumer(rule.ele10ParserRuleCallAbstractRule());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setAbstractMetamodelDeclarationConsumer(INonTerminalConsumer abstractMetamodelDeclarationConsumer) {
		this.abstractMetamodelDeclarationConsumer = abstractMetamodelDeclarationConsumer;
	}
	
	public void setAbstractRuleConsumer(INonTerminalConsumer abstractRuleConsumer) {
		this.abstractRuleConsumer = abstractRuleConsumer;
	}
	
	public void setGrammarIdConsumer(INonTerminalConsumer grammarIdConsumer) {
		this.grammarIdConsumer = grammarIdConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public ISequenceMatcher getCrossReference$25$Delimiter() {
		return crossReference$25$Delimiter;
	}
	
	public void setCrossReference$25$Delimiter(ISequenceMatcher matcher) {
		crossReference$25$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ISequenceMatcher getCrossReference$30$Delimiter() {
		return crossReference$30$Delimiter;
	}
	
	public void setCrossReference$30$Delimiter(ISequenceMatcher matcher) {
		crossReference$30$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
	public ICharacterClass getKeyword$8$Delimiter() {
		return keyword$8$Delimiter;
	}
	
	public void setKeyword$8$Delimiter(ICharacterClass characterClass) {
		keyword$8$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$9$Delimiter() {
		return keyword$9$Delimiter;
	}
	
	public void setKeyword$9$Delimiter(ICharacterClass characterClass) {
		keyword$9$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$13$Delimiter() {
		return keyword$13$Delimiter;
	}
	
	public void setKeyword$13$Delimiter(ICharacterClass characterClass) {
		keyword$13$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$21$Delimiter() {
		return keyword$21$Delimiter;
	}
	
	public void setKeyword$21$Delimiter(ICharacterClass characterClass) {
		keyword$21$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$22$Delimiter() {
		return keyword$22$Delimiter;
	}
	
	public void setKeyword$22$Delimiter(ICharacterClass characterClass) {
		keyword$22$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$28$Delimiter() {
		return keyword$28$Delimiter;
	}
	
	public void setKeyword$28$Delimiter(ICharacterClass characterClass) {
		keyword$28$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$32$Delimiter() {
		return keyword$32$Delimiter;
	}
	
	public void setKeyword$32$Delimiter(ICharacterClass characterClass) {
		keyword$32$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
}
