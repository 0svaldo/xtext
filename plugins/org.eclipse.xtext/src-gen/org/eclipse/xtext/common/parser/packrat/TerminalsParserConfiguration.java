/*
* generated by Xtext
*/
package org.eclipse.xtext.common.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class TerminalsParserConfiguration extends AbstractParserConfiguration {

    private TerminalsIDConsumer idConsumer;
    private TerminalsINTConsumer intConsumer;
    private TerminalsSTRINGConsumer stringConsumer;
    private TerminalsML_COMMENTConsumer mlCommentConsumer;
    private TerminalsSL_COMMENTConsumer slCommentConsumer;
    private TerminalsWSConsumer wsConsumer;
    private TerminalsANY_OTHERConsumer anyOtherConsumer;

	private TerminalsGrammarAccess grammarAccess;

	public TerminalsParserConfiguration(IInternalParserConfiguration configuration, TerminalsGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
	}

	public INonTerminalConsumer getRootConsumer() {
		return null;
	} 

	public void createNonTerminalConsumers() {
	}
	
	public void createTerminalConsumers() {
		idConsumer = new TerminalsIDConsumer(this);
		intConsumer = new TerminalsINTConsumer(this);
		stringConsumer = new TerminalsSTRINGConsumer(this);
		mlCommentConsumer = new TerminalsML_COMMENTConsumer(this);
		slCommentConsumer = new TerminalsSL_COMMENTConsumer(this);
		wsConsumer = new TerminalsWSConsumer(this);
		anyOtherConsumer = new TerminalsANY_OTHERConsumer(this);
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getIdConsumer().setRule(grammarAccess.trID());
		getIntConsumer().setRule(grammarAccess.trINT());
		getStringConsumer().setRule(grammarAccess.trSTRING());
		getMlCommentConsumer().setRule(grammarAccess.trML_COMMENT());
		getSlCommentConsumer().setRule(grammarAccess.trSL_COMMENT());
		getWsConsumer().setRule(grammarAccess.trWS());
		getAnyOtherConsumer().setRule(grammarAccess.trANY_OTHER());


	}
	
    public TerminalsIDConsumer getIdConsumer() {
    	return idConsumer;
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return intConsumer;
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return stringConsumer;
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return mlCommentConsumer;
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return slCommentConsumer;
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return wsConsumer;
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return anyOtherConsumer;
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return new ITerminalConsumer[]{ getWsConsumer(), getMlCommentConsumer(), getSlCommentConsumer() };
	}
	
}
