/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
import xtext;

import org::eclipse::jface::text::contentassist;
import org::eclipse::xtext::crossref;
import org::eclipse::xtext::ui::common::editor::contentassist;
import org::eclipse::xtext::ui::common::xtend::contentassist;

extension org::eclipse::xtext::Extensions reexport;
extension org::eclipse::xtext::xtend::Services reexport;

ICompletionProposal newProposal(AbstractElement element, String text, IContentAssistContext contentAssistContext) :
	JAVA org.eclipse.xtext.xtend.contentassist.ContentAssistHelper.newProposal(org.eclipse.xtext.AbstractElement, java.lang.String, org.eclipse.xtext.ui.common.editor.contentassist.IContentAssistContext); 

List[ICompletionProposal] lookupCrossReference(CrossReference crossRef, IContentAssistContext contentAssistContext) :
	scopeProvider() != null 
		? (
			!crossRef.containingParserRule().isDatatypeRule()
				? lookupCandidates(crossRef, contentAssistContext)
					.filterMatches(contentAssistContext)
						.newProposal(crossRef, contentAssistContext)
				: {}
		)
		: {};	


// Helper extensions	
List[IScopedElement] lookupCandidates(CrossReference crossRef, IContentAssistContext contentAssistContext) :
	let scope = scopeProvider().getScope(contentAssistContext.model, crossRef.eReference()) :
		(scope != null) ? scope.allContents.toList() : {};

List[IScopedElement]  filterMatches(List[IScopedElement] this, IContentAssistContext contentAssistContext) : 
	select(e|e.name() != null && e.name().toLowerCase().startsWith(contentAssistContext.matchString.trim().toLowerCase()));		

ICompletionProposal newProposal(IScopedElement this, CrossReference crossRef, IContentAssistContext contentAssistContext): 		
		newProposal(crossRef, name(), contentAssistContext);
				

