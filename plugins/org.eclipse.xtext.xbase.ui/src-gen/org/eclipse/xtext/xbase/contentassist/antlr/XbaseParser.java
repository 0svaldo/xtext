/*
* generated by Xtext
*/
package org.eclipse.xtext.xbase.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;

public class XbaseParser extends AbstractContentAssistParser {
	
	@Inject
	private XbaseGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.xtext.xbase.contentassist.antlr.internal.InternalXbaseParser createParser() {
		org.eclipse.xtext.xbase.contentassist.antlr.internal.InternalXbaseParser result = new org.eclipse.xtext.xbase.contentassist.antlr.internal.InternalXbaseParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFunctionAccess().getAlternatives_0(), "rule__Function__Alternatives_0");
					put(grammarAccess.getFunctionAccess().getAlternatives_8(), "rule__Function__Alternatives_8");
					put(grammarAccess.getClosureAccess().getAlternatives(), "rule__Closure__Alternatives");
					put(grammarAccess.getCastedExpressionAccess().getAlternatives(), "rule__CastedExpression__Alternatives");
					put(grammarAccess.getRelationalExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__RelationalExpression__OperatorAlternatives_1_1_0");
					put(grammarAccess.getAdditiveExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__AdditiveExpression__OperatorAlternatives_1_1_0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__MultiplicativeExpression__OperatorAlternatives_1_1_0");
					put(grammarAccess.getOtherOperatorExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__OtherOperatorExpression__OperatorAlternatives_1_1_0");
					put(grammarAccess.getUnaryOperationAccess().getAlternatives(), "rule__UnaryOperation__Alternatives");
					put(grammarAccess.getUnaryOperationAccess().getOperatorAlternatives_1_1_0(), "rule__UnaryOperation__OperatorAlternatives_1_1_0");
					put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
					put(grammarAccess.getExpressionInsideBlockAccess().getAlternatives(), "rule__ExpressionInsideBlock__Alternatives");
					put(grammarAccess.getVariableDeclarationAccess().getAlternatives_0(), "rule__VariableDeclaration__Alternatives_0");
					put(grammarAccess.getBooleanLiteralAccess().getAlternatives(), "rule__BooleanLiteral__Alternatives");
					put(grammarAccess.getTypeRefAccess().getAlternatives(), "rule__TypeRef__Alternatives");
					put(grammarAccess.getTypeParamAccess().getAlternatives(), "rule__TypeParam__Alternatives");
					put(grammarAccess.getWildcardParamAccess().getAlternatives_2(), "rule__WildcardParam__Alternatives_2");
					put(grammarAccess.getTypeParamDeclarationAccess().getAlternatives_1(), "rule__TypeParamDeclaration__Alternatives_1");
					put(grammarAccess.getFileAccess().getGroup(), "rule__File__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getImportAccess().getGroup_2(), "rule__Import__Group_2__0");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getFunctionAccess().getGroup_1(), "rule__Function__Group_1__0");
					put(grammarAccess.getFunctionAccess().getGroup_1_2(), "rule__Function__Group_1_2__0");
					put(grammarAccess.getFunctionAccess().getGroup_5(), "rule__Function__Group_5__0");
					put(grammarAccess.getFunctionAccess().getGroup_5_1(), "rule__Function__Group_5_1__0");
					put(grammarAccess.getFunctionAccess().getGroup_7(), "rule__Function__Group_7__0");
					put(grammarAccess.getFunctionAccess().getGroup_8_0(), "rule__Function__Group_8_0__0");
					put(grammarAccess.getClosureAccess().getGroup_0(), "rule__Closure__Group_0__0");
					put(grammarAccess.getClosureAccess().getGroup_0_1(), "rule__Closure__Group_0_1__0");
					put(grammarAccess.getClosureAccess().getGroup_0_1_1(), "rule__Closure__Group_0_1_1__0");
					put(grammarAccess.getCastedExpressionAccess().getGroup_0(), "rule__CastedExpression__Group_0__0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getAssignmentAccess().getGroup_1(), "rule__Assignment__Group_1__0");
					put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
					put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
					put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
					put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup(), "rule__RelationalExpression__Group__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup_1(), "rule__RelationalExpression__Group_1__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup(), "rule__AdditiveExpression__Group__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup_1(), "rule__AdditiveExpression__Group_1__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup(), "rule__MultiplicativeExpression__Group__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1(), "rule__MultiplicativeExpression__Group_1__0");
					put(grammarAccess.getOtherOperatorExpressionAccess().getGroup(), "rule__OtherOperatorExpression__Group__0");
					put(grammarAccess.getOtherOperatorExpressionAccess().getGroup_1(), "rule__OtherOperatorExpression__Group_1__0");
					put(grammarAccess.getUnaryOperationAccess().getGroup_1(), "rule__UnaryOperation__Group_1__0");
					put(grammarAccess.getFeatureCallAccess().getGroup(), "rule__FeatureCall__Group__0");
					put(grammarAccess.getFeatureCallAccess().getGroup_1(), "rule__FeatureCall__Group_1__0");
					put(grammarAccess.getFeatureCallAccess().getGroup_1_3(), "rule__FeatureCall__Group_1_3__0");
					put(grammarAccess.getFeatureCallAccess().getGroup_1_3_1(), "rule__FeatureCall__Group_1_3_1__0");
					put(grammarAccess.getFeatureCallAccess().getGroup_1_3_1_1(), "rule__FeatureCall__Group_1_3_1_1__0");
					put(grammarAccess.getParenthesizedExpressionAccess().getGroup(), "rule__ParenthesizedExpression__Group__0");
					put(grammarAccess.getIfExpressionAccess().getGroup(), "rule__IfExpression__Group__0");
					put(grammarAccess.getIfExpressionAccess().getGroup_5(), "rule__IfExpression__Group_5__0");
					put(grammarAccess.getSwitchExpressionAccess().getGroup(), "rule__SwitchExpression__Group__0");
					put(grammarAccess.getSwitchExpressionAccess().getGroup_4(), "rule__SwitchExpression__Group_4__0");
					put(grammarAccess.getWhileExpressionAccess().getGroup(), "rule__WhileExpression__Group__0");
					put(grammarAccess.getCasePartAccess().getGroup(), "rule__CasePart__Group__0");
					put(grammarAccess.getBlockExpressionAccess().getGroup(), "rule__BlockExpression__Group__0");
					put(grammarAccess.getBlockExpressionAccess().getGroup_1(), "rule__BlockExpression__Group_1__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
					put(grammarAccess.getDeclaredParameterAccess().getGroup(), "rule__DeclaredParameter__Group__0");
					put(grammarAccess.getSimpleFeatureCallAccess().getGroup(), "rule__SimpleFeatureCall__Group__0");
					put(grammarAccess.getSimpleFeatureCallAccess().getGroup_1(), "rule__SimpleFeatureCall__Group_1__0");
					put(grammarAccess.getSimpleFeatureCallAccess().getGroup_1_1(), "rule__SimpleFeatureCall__Group_1_1__0");
					put(grammarAccess.getSimpleFeatureCallAccess().getGroup_1_1_1(), "rule__SimpleFeatureCall__Group_1_1_1__0");
					put(grammarAccess.getConstructorCallAccess().getGroup(), "rule__ConstructorCall__Group__0");
					put(grammarAccess.getConstructorCallAccess().getGroup_2(), "rule__ConstructorCall__Group_2__0");
					put(grammarAccess.getConstructorCallAccess().getGroup_2_1(), "rule__ConstructorCall__Group_2_1__0");
					put(grammarAccess.getConstructorCallAccess().getGroup_2_1_1(), "rule__ConstructorCall__Group_2_1_1__0");
					put(grammarAccess.getConstructorCallAccess().getGroup_3(), "rule__ConstructorCall__Group_3__0");
					put(grammarAccess.getBooleanLiteralAccess().getGroup_0(), "rule__BooleanLiteral__Group_0__0");
					put(grammarAccess.getNullLiteralAccess().getGroup(), "rule__NullLiteral__Group__0");
					put(grammarAccess.getRichStringAccess().getGroup(), "rule__RichString__Group__0");
					put(grammarAccess.getRichStringAccess().getGroup_1(), "rule__RichString__Group_1__0");
					put(grammarAccess.getFunctionTypeRefAccess().getGroup(), "rule__FunctionTypeRef__Group__0");
					put(grammarAccess.getFunctionTypeRefAccess().getGroup_0(), "rule__FunctionTypeRef__Group_0__0");
					put(grammarAccess.getFunctionTypeRefAccess().getGroup_0_2(), "rule__FunctionTypeRef__Group_0_2__0");
					put(grammarAccess.getSimpleTypeRefAccess().getGroup(), "rule__SimpleTypeRef__Group__0");
					put(grammarAccess.getSimpleTypeRefAccess().getGroup_1(), "rule__SimpleTypeRef__Group_1__0");
					put(grammarAccess.getSimpleTypeRefAccess().getGroup_1_2(), "rule__SimpleTypeRef__Group_1_2__0");
					put(grammarAccess.getWildcardParamAccess().getGroup(), "rule__WildcardParam__Group__0");
					put(grammarAccess.getWildcardParamAccess().getGroup_2_0(), "rule__WildcardParam__Group_2_0__0");
					put(grammarAccess.getWildcardParamAccess().getGroup_2_1(), "rule__WildcardParam__Group_2_1__0");
					put(grammarAccess.getTypeParamDeclarationAccess().getGroup(), "rule__TypeParamDeclaration__Group__0");
					put(grammarAccess.getTypeParamDeclarationAccess().getGroup_1_0(), "rule__TypeParamDeclaration__Group_1_0__0");
					put(grammarAccess.getTypeParamDeclarationAccess().getGroup_1_0_2(), "rule__TypeParamDeclaration__Group_1_0_2__0");
					put(grammarAccess.getTypeParamDeclarationAccess().getGroup_1_1(), "rule__TypeParamDeclaration__Group_1_1__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getFileAccess().getImportsAssignment_0(), "rule__File__ImportsAssignment_0");
					put(grammarAccess.getFileAccess().getFunctionsAssignment_1(), "rule__File__FunctionsAssignment_1");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getImportAccess().getWildcardAssignment_2_1(), "rule__Import__WildcardAssignment_2_1");
					put(grammarAccess.getFunctionAccess().getPrivateAssignment_0_0(), "rule__Function__PrivateAssignment_0_0");
					put(grammarAccess.getFunctionAccess().getFinalAssignment_0_1(), "rule__Function__FinalAssignment_0_1");
					put(grammarAccess.getFunctionAccess().getTypeParamsAssignment_1_1(), "rule__Function__TypeParamsAssignment_1_1");
					put(grammarAccess.getFunctionAccess().getTypeParamsAssignment_1_2_1(), "rule__Function__TypeParamsAssignment_1_2_1");
					put(grammarAccess.getFunctionAccess().getReturnTypeAssignment_2(), "rule__Function__ReturnTypeAssignment_2");
					put(grammarAccess.getFunctionAccess().getNameAssignment_3(), "rule__Function__NameAssignment_3");
					put(grammarAccess.getFunctionAccess().getDeclaredParamsAssignment_5_0(), "rule__Function__DeclaredParamsAssignment_5_0");
					put(grammarAccess.getFunctionAccess().getDeclaredParamsAssignment_5_1_1(), "rule__Function__DeclaredParamsAssignment_5_1_1");
					put(grammarAccess.getFunctionAccess().getGuardAssignment_7_1(), "rule__Function__GuardAssignment_7_1");
					put(grammarAccess.getFunctionAccess().getExpressionAssignment_8_0_1(), "rule__Function__ExpressionAssignment_8_0_1");
					put(grammarAccess.getFunctionAccess().getExpressionAssignment_8_1(), "rule__Function__ExpressionAssignment_8_1");
					put(grammarAccess.getClosureAccess().getParamsAssignment_0_1_0(), "rule__Closure__ParamsAssignment_0_1_0");
					put(grammarAccess.getClosureAccess().getParamsAssignment_0_1_1_1(), "rule__Closure__ParamsAssignment_0_1_1_1");
					put(grammarAccess.getClosureAccess().getExpressionAssignment_0_3(), "rule__Closure__ExpressionAssignment_0_3");
					put(grammarAccess.getCastedExpressionAccess().getTypeAssignment_0_2(), "rule__CastedExpression__TypeAssignment_0_2");
					put(grammarAccess.getCastedExpressionAccess().getTargetAssignment_0_4(), "rule__CastedExpression__TargetAssignment_0_4");
					put(grammarAccess.getAssignmentAccess().getRightAssignment_1_2(), "rule__Assignment__RightAssignment_1_2");
					put(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1(), "rule__OrExpression__OperatorAssignment_1_1");
					put(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2(), "rule__OrExpression__RightAssignment_1_2");
					put(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1(), "rule__AndExpression__OperatorAssignment_1_1");
					put(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2(), "rule__AndExpression__RightAssignment_1_2");
					put(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_1(), "rule__RelationalExpression__OperatorAssignment_1_1");
					put(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_2(), "rule__RelationalExpression__RightAssignment_1_2");
					put(grammarAccess.getAdditiveExpressionAccess().getOperatorAssignment_1_1(), "rule__AdditiveExpression__OperatorAssignment_1_1");
					put(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1_2(), "rule__AdditiveExpression__RightAssignment_1_2");
					put(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAssignment_1_1(), "rule__MultiplicativeExpression__OperatorAssignment_1_1");
					put(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_2(), "rule__MultiplicativeExpression__RightAssignment_1_2");
					put(grammarAccess.getOtherOperatorExpressionAccess().getOperatorAssignment_1_1(), "rule__OtherOperatorExpression__OperatorAssignment_1_1");
					put(grammarAccess.getOtherOperatorExpressionAccess().getRightAssignment_1_2(), "rule__OtherOperatorExpression__RightAssignment_1_2");
					put(grammarAccess.getUnaryOperationAccess().getOperatorAssignment_1_1(), "rule__UnaryOperation__OperatorAssignment_1_1");
					put(grammarAccess.getUnaryOperationAccess().getTargetAssignment_1_2(), "rule__UnaryOperation__TargetAssignment_1_2");
					put(grammarAccess.getFeatureCallAccess().getNameAssignment_1_2(), "rule__FeatureCall__NameAssignment_1_2");
					put(grammarAccess.getFeatureCallAccess().getParamsAssignment_1_3_1_0(), "rule__FeatureCall__ParamsAssignment_1_3_1_0");
					put(grammarAccess.getFeatureCallAccess().getParamsAssignment_1_3_1_1_1(), "rule__FeatureCall__ParamsAssignment_1_3_1_1_1");
					put(grammarAccess.getIfExpressionAccess().getIfAssignment_2(), "rule__IfExpression__IfAssignment_2");
					put(grammarAccess.getIfExpressionAccess().getThenAssignment_4(), "rule__IfExpression__ThenAssignment_4");
					put(grammarAccess.getIfExpressionAccess().getElseAssignment_5_1(), "rule__IfExpression__ElseAssignment_5_1");
					put(grammarAccess.getSwitchExpressionAccess().getSwitchAssignment_1(), "rule__SwitchExpression__SwitchAssignment_1");
					put(grammarAccess.getSwitchExpressionAccess().getCasesAssignment_3(), "rule__SwitchExpression__CasesAssignment_3");
					put(grammarAccess.getSwitchExpressionAccess().getDefaultAssignment_4_2(), "rule__SwitchExpression__DefaultAssignment_4_2");
					put(grammarAccess.getWhileExpressionAccess().getPredicateAssignment_1(), "rule__WhileExpression__PredicateAssignment_1");
					put(grammarAccess.getWhileExpressionAccess().getBodyAssignment_2(), "rule__WhileExpression__BodyAssignment_2");
					put(grammarAccess.getCasePartAccess().getCaseAssignment_1(), "rule__CasePart__CaseAssignment_1");
					put(grammarAccess.getCasePartAccess().getThenAssignment_3(), "rule__CasePart__ThenAssignment_3");
					put(grammarAccess.getBlockExpressionAccess().getExpressionsAssignment_1_0(), "rule__BlockExpression__ExpressionsAssignment_1_0");
					put(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_0_1(), "rule__VariableDeclaration__TypeAssignment_0_1");
					put(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1(), "rule__VariableDeclaration__NameAssignment_1");
					put(grammarAccess.getVariableDeclarationAccess().getRightAssignment_3(), "rule__VariableDeclaration__RightAssignment_3");
					put(grammarAccess.getDeclaredParameterAccess().getTypeAssignment_0(), "rule__DeclaredParameter__TypeAssignment_0");
					put(grammarAccess.getDeclaredParameterAccess().getNameAssignment_1(), "rule__DeclaredParameter__NameAssignment_1");
					put(grammarAccess.getSimpleFeatureCallAccess().getNameAssignment_0(), "rule__SimpleFeatureCall__NameAssignment_0");
					put(grammarAccess.getSimpleFeatureCallAccess().getParamsAssignment_1_1_0(), "rule__SimpleFeatureCall__ParamsAssignment_1_1_0");
					put(grammarAccess.getSimpleFeatureCallAccess().getParamsAssignment_1_1_1_1(), "rule__SimpleFeatureCall__ParamsAssignment_1_1_1_1");
					put(grammarAccess.getConstructorCallAccess().getTypeAssignment_1(), "rule__ConstructorCall__TypeAssignment_1");
					put(grammarAccess.getConstructorCallAccess().getParamsAssignment_2_1_0(), "rule__ConstructorCall__ParamsAssignment_2_1_0");
					put(grammarAccess.getConstructorCallAccess().getParamsAssignment_2_1_1_1(), "rule__ConstructorCall__ParamsAssignment_2_1_1_1");
					put(grammarAccess.getConstructorCallAccess().getInitializerAssignment_4(), "rule__ConstructorCall__InitializerAssignment_4");
					put(grammarAccess.getBooleanLiteralAccess().getIsTrueAssignment_1(), "rule__BooleanLiteral__IsTrueAssignment_1");
					put(grammarAccess.getIntLiteralAccess().getValueAssignment(), "rule__IntLiteral__ValueAssignment");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
					put(grammarAccess.getRichStringAccess().getExpressionsAssignment_0(), "rule__RichString__ExpressionsAssignment_0");
					put(grammarAccess.getRichStringAccess().getExpressionsAssignment_1_0(), "rule__RichString__ExpressionsAssignment_1_0");
					put(grammarAccess.getRichStringAccess().getExpressionsAssignment_1_1(), "rule__RichString__ExpressionsAssignment_1_1");
					put(grammarAccess.getRichStringLiteralAccess().getValueAssignment(), "rule__RichStringLiteral__ValueAssignment");
					put(grammarAccess.getFunctionTypeRefAccess().getParamTypesAssignment_0_1(), "rule__FunctionTypeRef__ParamTypesAssignment_0_1");
					put(grammarAccess.getFunctionTypeRefAccess().getParamTypesAssignment_0_2_1(), "rule__FunctionTypeRef__ParamTypesAssignment_0_2_1");
					put(grammarAccess.getFunctionTypeRefAccess().getReturnTypeAssignment_2(), "rule__FunctionTypeRef__ReturnTypeAssignment_2");
					put(grammarAccess.getSimpleTypeRefAccess().getTypeAssignment_0(), "rule__SimpleTypeRef__TypeAssignment_0");
					put(grammarAccess.getSimpleTypeRefAccess().getTypeParamsAssignment_1_1(), "rule__SimpleTypeRef__TypeParamsAssignment_1_1");
					put(grammarAccess.getSimpleTypeRefAccess().getTypeParamsAssignment_1_2_1(), "rule__SimpleTypeRef__TypeParamsAssignment_1_2_1");
					put(grammarAccess.getWildcardParamAccess().getExtendsAssignment_2_0_1(), "rule__WildcardParam__ExtendsAssignment_2_0_1");
					put(grammarAccess.getWildcardParamAccess().getSuperAssignment_2_1_1(), "rule__WildcardParam__SuperAssignment_2_1_1");
					put(grammarAccess.getTypeParamDeclarationAccess().getNameAssignment_0(), "rule__TypeParamDeclaration__NameAssignment_0");
					put(grammarAccess.getTypeParamDeclarationAccess().getExtendsAssignment_1_0_1(), "rule__TypeParamDeclaration__ExtendsAssignment_1_0_1");
					put(grammarAccess.getTypeParamDeclarationAccess().getExtendsAssignment_1_0_2_1(), "rule__TypeParamDeclaration__ExtendsAssignment_1_0_2_1");
					put(grammarAccess.getTypeParamDeclarationAccess().getSuperAssignment_1_1_1(), "rule__TypeParamDeclaration__SuperAssignment_1_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.xtext.xbase.contentassist.antlr.internal.InternalXbaseParser typedParser = (org.eclipse.xtext.xbase.contentassist.antlr.internal.InternalXbaseParser) parser;
			typedParser.entryRuleFile();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public XbaseGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(XbaseGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
