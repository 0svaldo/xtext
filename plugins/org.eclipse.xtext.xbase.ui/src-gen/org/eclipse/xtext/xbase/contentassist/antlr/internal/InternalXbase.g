/*
* generated by Xtext
*/
grammar InternalXbase;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.eclipse.xtext.xbase.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.xtext.xbase.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;

}

@parser::members {
 
 	private XbaseGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(XbaseGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleFile
entryRuleFile 
:
{ before(grammarAccess.getFileRule()); }
	 ruleFile
{ after(grammarAccess.getFileRule()); } 
	 EOF 
;

// Rule File
ruleFile 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFileAccess().getGroup()); }
(rule__File__Group__0)
{ after(grammarAccess.getFileAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedNameWithWildCard
entryRuleQualifiedNameWithWildCard 
:
{ before(grammarAccess.getQualifiedNameWithWildCardRule()); }
	 ruleQualifiedNameWithWildCard
{ after(grammarAccess.getQualifiedNameWithWildCardRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildCard
ruleQualifiedNameWithWildCard 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup()); }
(rule__QualifiedNameWithWildCard__Group__0)
{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunction
entryRuleFunction 
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionAccess().getGroup()); }
(rule__Function__Group__0)
{ after(grammarAccess.getFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAssignmentParserRuleCall()); }
	ruleAssignment
{ after(grammarAccess.getExpressionAccess().getAssignmentParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpression
entryRuleOrExpression 
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
(rule__OrExpression__Group__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression 
:
{ before(grammarAccess.getEqualityExpressionRule()); }
	 ruleEqualityExpression
{ after(grammarAccess.getEqualityExpressionRule()); } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup()); }
(rule__EqualityExpression__Group__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression 
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
(rule__RelationalExpression__Group__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression 
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression 
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
(rule__MultiplicativeExpression__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOtherOperatorExpression
entryRuleOtherOperatorExpression 
:
{ before(grammarAccess.getOtherOperatorExpressionRule()); }
	 ruleOtherOperatorExpression
{ after(grammarAccess.getOtherOperatorExpressionRule()); } 
	 EOF 
;

// Rule OtherOperatorExpression
ruleOtherOperatorExpression 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOtherOperatorExpressionAccess().getGroup()); }
(rule__OtherOperatorExpression__Group__0)
{ after(grammarAccess.getOtherOperatorExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryOperation
entryRuleUnaryOperation 
:
{ before(grammarAccess.getUnaryOperationRule()); }
	 ruleUnaryOperation
{ after(grammarAccess.getUnaryOperationRule()); } 
	 EOF 
;

// Rule UnaryOperation
ruleUnaryOperation 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryOperationAccess().getAlternatives()); }
(rule__UnaryOperation__Alternatives)
{ after(grammarAccess.getUnaryOperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFeatureCall
entryRuleFeatureCall 
:
{ before(grammarAccess.getFeatureCallRule()); }
	 ruleFeatureCall
{ after(grammarAccess.getFeatureCallRule()); } 
	 EOF 
;

// Rule FeatureCall
ruleFeatureCall 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFeatureCallAccess().getGroup()); }
(rule__FeatureCall__Group__0)
{ after(grammarAccess.getFeatureCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClosure
entryRuleClosure 
:
{ before(grammarAccess.getClosureRule()); }
	 ruleClosure
{ after(grammarAccess.getClosureRule()); } 
	 EOF 
;

// Rule Closure
ruleClosure 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClosureAccess().getGroup()); }
(rule__Closure__Group__0)
{ after(grammarAccess.getClosureAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression 
:
{ before(grammarAccess.getParenthesizedExpressionRule()); }
	 ruleParenthesizedExpression
{ after(grammarAccess.getParenthesizedExpressionRule()); } 
	 EOF 
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
(rule__ParenthesizedExpression__Group__0)
{ after(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfExpression
entryRuleIfExpression 
:
{ before(grammarAccess.getIfExpressionRule()); }
	 ruleIfExpression
{ after(grammarAccess.getIfExpressionRule()); } 
	 EOF 
;

// Rule IfExpression
ruleIfExpression 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfExpressionAccess().getGroup()); }
(rule__IfExpression__Group__0)
{ after(grammarAccess.getIfExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSwitchExpression
entryRuleSwitchExpression 
:
{ before(grammarAccess.getSwitchExpressionRule()); }
	 ruleSwitchExpression
{ after(grammarAccess.getSwitchExpressionRule()); } 
	 EOF 
;

// Rule SwitchExpression
ruleSwitchExpression 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSwitchExpressionAccess().getGroup()); }
(rule__SwitchExpression__Group__0)
{ after(grammarAccess.getSwitchExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhileExpression
entryRuleWhileExpression 
:
{ before(grammarAccess.getWhileExpressionRule()); }
	 ruleWhileExpression
{ after(grammarAccess.getWhileExpressionRule()); } 
	 EOF 
;

// Rule WhileExpression
ruleWhileExpression 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhileExpressionAccess().getGroup()); }
(rule__WhileExpression__Group__0)
{ after(grammarAccess.getWhileExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCasePart
entryRuleCasePart 
:
{ before(grammarAccess.getCasePartRule()); }
	 ruleCasePart
{ after(grammarAccess.getCasePartRule()); } 
	 EOF 
;

// Rule CasePart
ruleCasePart 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCasePartAccess().getGroup()); }
(rule__CasePart__Group__0)
{ after(grammarAccess.getCasePartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlockExpression
entryRuleBlockExpression 
:
{ before(grammarAccess.getBlockExpressionRule()); }
	 ruleBlockExpression
{ after(grammarAccess.getBlockExpressionRule()); } 
	 EOF 
;

// Rule BlockExpression
ruleBlockExpression 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockExpressionAccess().getGroup()); }
(rule__BlockExpression__Group__0)
{ after(grammarAccess.getBlockExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionInsideBlock
entryRuleExpressionInsideBlock 
:
{ before(grammarAccess.getExpressionInsideBlockRule()); }
	 ruleExpressionInsideBlock
{ after(grammarAccess.getExpressionInsideBlockRule()); } 
	 EOF 
;

// Rule ExpressionInsideBlock
ruleExpressionInsideBlock 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionInsideBlockAccess().getAlternatives()); }
(rule__ExpressionInsideBlock__Alternatives)
{ after(grammarAccess.getExpressionInsideBlockAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration 
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
(rule__VariableDeclaration__Group__0)
{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaredParameter
entryRuleDeclaredParameter 
:
{ before(grammarAccess.getDeclaredParameterRule()); }
	 ruleDeclaredParameter
{ after(grammarAccess.getDeclaredParameterRule()); } 
	 EOF 
;

// Rule DeclaredParameter
ruleDeclaredParameter 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclaredParameterAccess().getGroup()); }
(rule__DeclaredParameter__Group__0)
{ after(grammarAccess.getDeclaredParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleFeatureCall
entryRuleSimpleFeatureCall 
:
{ before(grammarAccess.getSimpleFeatureCallRule()); }
	 ruleSimpleFeatureCall
{ after(grammarAccess.getSimpleFeatureCallRule()); } 
	 EOF 
;

// Rule SimpleFeatureCall
ruleSimpleFeatureCall 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleFeatureCallAccess().getGroup()); }
(rule__SimpleFeatureCall__Group__0)
{ after(grammarAccess.getSimpleFeatureCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstructorCall
entryRuleConstructorCall 
:
{ before(grammarAccess.getConstructorCallRule()); }
	 ruleConstructorCall
{ after(grammarAccess.getConstructorCallRule()); } 
	 EOF 
;

// Rule ConstructorCall
ruleConstructorCall 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstructorCallAccess().getGroup()); }
(rule__ConstructorCall__Group__0)
{ after(grammarAccess.getConstructorCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral 
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanLiteralAccess().getAlternatives()); }
(rule__BooleanLiteral__Alternatives)
{ after(grammarAccess.getBooleanLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullLiteral
entryRuleNullLiteral 
:
{ before(grammarAccess.getNullLiteralRule()); }
	 ruleNullLiteral
{ after(grammarAccess.getNullLiteralRule()); } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNullLiteralAccess().getGroup()); }
(rule__NullLiteral__Group__0)
{ after(grammarAccess.getNullLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntLiteral
entryRuleIntLiteral 
:
{ before(grammarAccess.getIntLiteralRule()); }
	 ruleIntLiteral
{ after(grammarAccess.getIntLiteralRule()); } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntLiteralAccess().getValueAssignment()); }
(rule__IntLiteral__ValueAssignment)
{ after(grammarAccess.getIntLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
(rule__StringLiteral__ValueAssignment)
{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeLiteral
entryRuleTypeLiteral 
:
{ before(grammarAccess.getTypeLiteralRule()); }
	 ruleTypeLiteral
{ after(grammarAccess.getTypeLiteralRule()); } 
	 EOF 
;

// Rule TypeLiteral
ruleTypeLiteral 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeLiteralAccess().getGroup()); }
(rule__TypeLiteral__Group__0)
{ after(grammarAccess.getTypeLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRichString
entryRuleRichString 
:
{ before(grammarAccess.getRichStringRule()); }
	 ruleRichString
{ after(grammarAccess.getRichStringRule()); } 
	 EOF 
;

// Rule RichString
ruleRichString 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRichStringAccess().getGroup()); }
(rule__RichString__Group__0)
{ after(grammarAccess.getRichStringAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRichStringLiteral
entryRuleRichStringLiteral 
:
{ before(grammarAccess.getRichStringLiteralRule()); }
	 ruleRichStringLiteral
{ after(grammarAccess.getRichStringLiteralRule()); } 
	 EOF 
;

// Rule RichStringLiteral
ruleRichStringLiteral 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRichStringLiteralAccess().getValueAssignment()); }
(rule__RichStringLiteral__ValueAssignment)
{ after(grammarAccess.getRichStringLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeRef
entryRuleTypeRef 
:
{ before(grammarAccess.getTypeRefRule()); }
	 ruleTypeRef
{ after(grammarAccess.getTypeRefRule()); } 
	 EOF 
;

// Rule TypeRef
ruleTypeRef 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeRefAccess().getAlternatives()); }
(rule__TypeRef__Alternatives)
{ after(grammarAccess.getTypeRefAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionTypeRef
entryRuleFunctionTypeRef 
:
{ before(grammarAccess.getFunctionTypeRefRule()); }
	 ruleFunctionTypeRef
{ after(grammarAccess.getFunctionTypeRefRule()); } 
	 EOF 
;

// Rule FunctionTypeRef
ruleFunctionTypeRef 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionTypeRefAccess().getGroup()); }
(rule__FunctionTypeRef__Group__0)
{ after(grammarAccess.getFunctionTypeRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleTypeRef
entryRuleSimpleTypeRef 
:
{ before(grammarAccess.getSimpleTypeRefRule()); }
	 ruleSimpleTypeRef
{ after(grammarAccess.getSimpleTypeRefRule()); } 
	 EOF 
;

// Rule SimpleTypeRef
ruleSimpleTypeRef 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleTypeRefAccess().getGroup()); }
(rule__SimpleTypeRef__Group__0)
{ after(grammarAccess.getSimpleTypeRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeParam
entryRuleTypeParam 
:
{ before(grammarAccess.getTypeParamRule()); }
	 ruleTypeParam
{ after(grammarAccess.getTypeParamRule()); } 
	 EOF 
;

// Rule TypeParam
ruleTypeParam 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeParamAccess().getAlternatives()); }
(rule__TypeParam__Alternatives)
{ after(grammarAccess.getTypeParamAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWildcardParam
entryRuleWildcardParam 
:
{ before(grammarAccess.getWildcardParamRule()); }
	 ruleWildcardParam
{ after(grammarAccess.getWildcardParamRule()); } 
	 EOF 
;

// Rule WildcardParam
ruleWildcardParam 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWildcardParamAccess().getGroup()); }
(rule__WildcardParam__Group__0)
{ after(grammarAccess.getWildcardParamAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeParamDeclaration
entryRuleTypeParamDeclaration 
:
{ before(grammarAccess.getTypeParamDeclarationRule()); }
	 ruleTypeParamDeclaration
{ after(grammarAccess.getTypeParamDeclarationRule()); } 
	 EOF 
;

// Rule TypeParamDeclaration
ruleTypeParamDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeParamDeclarationAccess().getGroup()); }
(rule__TypeParamDeclaration__Group__0)
{ after(grammarAccess.getTypeParamDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Function__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getPrivateAssignment_0_0()); }
(rule__Function__PrivateAssignment_0_0)
{ after(grammarAccess.getFunctionAccess().getPrivateAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getFunctionAccess().getFinalAssignment_0_1()); }
(rule__Function__FinalAssignment_0_1)
{ after(grammarAccess.getFunctionAccess().getFinalAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Alternatives_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_8_0()); }
(rule__Function__Group_8_0__0)
{ after(grammarAccess.getFunctionAccess().getGroup_8_0()); }
)

    |(
{ before(grammarAccess.getFunctionAccess().getExpressionAssignment_8_1()); }
(rule__Function__ExpressionAssignment_8_1)
{ after(grammarAccess.getFunctionAccess().getExpressionAssignment_8_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__OperatorAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getOperatorEqualsSignKeyword_1_1_0_0()); }

	'=' 

{ after(grammarAccess.getAssignmentAccess().getOperatorEqualsSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getAssignmentAccess().getOperatorPlusSignEqualsSignKeyword_1_1_0_1()); }

	'+=' 

{ after(grammarAccess.getAssignmentAccess().getOperatorPlusSignEqualsSignKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OperatorAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperatorEqualsSignEqualsSignKeyword_1_1_0_0()); }

	'==' 

{ after(grammarAccess.getEqualityExpressionAccess().getOperatorEqualsSignEqualsSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getEqualityExpressionAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1()); }

	'!=' 

{ after(grammarAccess.getEqualityExpressionAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_0()); }
(rule__RelationalExpression__Group_1_0__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_1()); }
(rule__RelationalExpression__Group_1_1__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OperatorAlternatives_1_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_1_0_0()); }

	'>=' 

{ after(grammarAccess.getRelationalExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_1_0_1()); }

	'<=' 

{ after(grammarAccess.getRelationalExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_1_0_1()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_1_0_2()); }

	'>' 

{ after(grammarAccess.getRelationalExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_1_0_2()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorLessThanSignKeyword_1_1_1_0_3()); }

	'<' 

{ after(grammarAccess.getRelationalExpressionAccess().getOperatorLessThanSignKeyword_1_1_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OperatorAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }

	'+' 

{ after(grammarAccess.getAdditiveExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }

	'-' 

{ after(grammarAccess.getAdditiveExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OperatorAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAsteriskKeyword_1_1_0_0()); }

	'*' 

{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperatorSolidusKeyword_1_1_0_1()); }

	'/' 

{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperatorSolidusKeyword_1_1_0_1()); }
)

    |(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperatorPercentSignKeyword_1_1_0_2()); }

	'%' 

{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperatorPercentSignKeyword_1_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OtherOperatorExpression__OperatorAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherOperatorExpressionAccess().getOperatorPlusSignEqualsSignKeyword_1_1_0_0()); }

	'+=' 

{ after(grammarAccess.getOtherOperatorExpressionAccess().getOperatorPlusSignEqualsSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getOtherOperatorExpressionAccess().getOperatorFullStopFullStopKeyword_1_1_0_1()); }

	'..' 

{ after(grammarAccess.getOtherOperatorExpressionAccess().getOperatorFullStopFullStopKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getGroup_0()); }
(rule__UnaryOperation__Group_0__0)
{ after(grammarAccess.getUnaryOperationAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getUnaryOperationAccess().getGroup_1()); }
(rule__UnaryOperation__Group_1__0)
{ after(grammarAccess.getUnaryOperationAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getUnaryOperationAccess().getFeatureCallParserRuleCall_2()); }
	ruleFeatureCall
{ after(grammarAccess.getUnaryOperationAccess().getFeatureCallParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__OperatorAlternatives_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getOperatorExclamationMarkKeyword_0_1_0_0()); }

	'!' 

{ after(grammarAccess.getUnaryOperationAccess().getOperatorExclamationMarkKeyword_0_1_0_0()); }
)

    |(
{ before(grammarAccess.getUnaryOperationAccess().getOperatorHyphenMinusKeyword_0_1_0_1()); }

	'-' 

{ after(grammarAccess.getUnaryOperationAccess().getOperatorHyphenMinusKeyword_0_1_0_1()); }
)

    |(
{ before(grammarAccess.getUnaryOperationAccess().getOperatorPlusSignKeyword_0_1_0_2()); }

	'+' 

{ after(grammarAccess.getUnaryOperationAccess().getOperatorPlusSignKeyword_0_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getClosureParserRuleCall_0()); }
	ruleClosure
{ after(grammarAccess.getPrimaryExpressionAccess().getClosureParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getBooleanLiteralParserRuleCall_1()); }
	ruleBooleanLiteral
{ after(grammarAccess.getPrimaryExpressionAccess().getBooleanLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getIntLiteralParserRuleCall_2()); }
	ruleIntLiteral
{ after(grammarAccess.getPrimaryExpressionAccess().getIntLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getNullLiteralParserRuleCall_3()); }
	ruleNullLiteral
{ after(grammarAccess.getPrimaryExpressionAccess().getNullLiteralParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getStringLiteralParserRuleCall_4()); }
	ruleStringLiteral
{ after(grammarAccess.getPrimaryExpressionAccess().getStringLiteralParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getTypeLiteralParserRuleCall_5()); }
	ruleTypeLiteral
{ after(grammarAccess.getPrimaryExpressionAccess().getTypeLiteralParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getConstructorCallParserRuleCall_6()); }
	ruleConstructorCall
{ after(grammarAccess.getPrimaryExpressionAccess().getConstructorCallParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getBlockExpressionParserRuleCall_7()); }
	ruleBlockExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getBlockExpressionParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getRichStringParserRuleCall_8()); }
	ruleRichString
{ after(grammarAccess.getPrimaryExpressionAccess().getRichStringParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getIfExpressionParserRuleCall_9()); }
	ruleIfExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getIfExpressionParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getSwitchExpressionParserRuleCall_10()); }
	ruleSwitchExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getSwitchExpressionParserRuleCall_10()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getWhileExpressionParserRuleCall_11()); }
	ruleWhileExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getWhileExpressionParserRuleCall_11()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getSimpleFeatureCallParserRuleCall_12()); }
	ruleSimpleFeatureCall
{ after(grammarAccess.getPrimaryExpressionAccess().getSimpleFeatureCallParserRuleCall_12()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_13()); }
	ruleParenthesizedExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_13()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionInsideBlock__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionInsideBlockAccess().getVariableDeclarationParserRuleCall_0()); }
	ruleVariableDeclaration
{ after(grammarAccess.getExpressionInsideBlockAccess().getVariableDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionInsideBlockAccess().getExpressionParserRuleCall_1()); }
	ruleExpression
{ after(grammarAccess.getExpressionInsideBlockAccess().getExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getDefKeyword_0_0()); }

	'def' 

{ after(grammarAccess.getVariableDeclarationAccess().getDefKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_0_1()); }
(rule__VariableDeclaration__TypeAssignment_0_1)
{ after(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getGroup_0()); }
(rule__BooleanLiteral__Group_0__0)
{ after(grammarAccess.getBooleanLiteralAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getBooleanLiteralAccess().getIsTrueAssignment_1()); }
(rule__BooleanLiteral__IsTrueAssignment_1)
{ after(grammarAccess.getBooleanLiteralAccess().getIsTrueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeRef__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeRefAccess().getSimpleTypeRefParserRuleCall_0()); }
	ruleSimpleTypeRef
{ after(grammarAccess.getTypeRefAccess().getSimpleTypeRefParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeRefAccess().getFunctionTypeRefParserRuleCall_1()); }
	ruleFunctionTypeRef
{ after(grammarAccess.getTypeRefAccess().getFunctionTypeRefParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParam__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParamAccess().getTypeRefParserRuleCall_0()); }
	ruleTypeRef
{ after(grammarAccess.getTypeParamAccess().getTypeRefParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeParamAccess().getWildcardParamParserRuleCall_1()); }
	ruleWildcardParam
{ after(grammarAccess.getTypeParamAccess().getWildcardParamParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WildcardParam__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardParamAccess().getGroup_2_0()); }
(rule__WildcardParam__Group_2_0__0)
{ after(grammarAccess.getWildcardParamAccess().getGroup_2_0()); }
)

    |(
{ before(grammarAccess.getWildcardParamAccess().getGroup_2_1()); }
(rule__WildcardParam__Group_2_1__0)
{ after(grammarAccess.getWildcardParamAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParamDeclaration__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParamDeclarationAccess().getGroup_1_0()); }
(rule__TypeParamDeclaration__Group_1_0__0)
{ after(grammarAccess.getTypeParamDeclarationAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getTypeParamDeclarationAccess().getGroup_1_1()); }
(rule__TypeParamDeclaration__Group_1_1__0)
{ after(grammarAccess.getTypeParamDeclarationAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__File__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileAccess().getImportsAssignment_0()); }
(rule__File__ImportsAssignment_0)*
{ after(grammarAccess.getFileAccess().getImportsAssignment_0()); }
)

	rule__File__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__File__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileAccess().getFunctionsAssignment_1()); }
(rule__File__FunctionsAssignment_1)*
{ after(grammarAccess.getFileAccess().getFunctionsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
(rule__Import__ImportedNamespaceAssignment_1)
{ after(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedNameWithWildCard__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0()); }
)

	rule__QualifiedNameWithWildCard__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildCard__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup_1()); }
(rule__QualifiedNameWithWildCard__Group_1__0)?
{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedNameWithWildCard__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopKeyword_1_0()); }
)

	rule__QualifiedNameWithWildCard__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildCard__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getAsteriskKeyword_1_1()); }

	'*' 

{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getAsteriskKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Function__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getAlternatives_0()); }
(rule__Function__Alternatives_0)*
{ after(grammarAccess.getFunctionAccess().getAlternatives_0()); }
)

	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_1()); }
(rule__Function__Group_1__0)?
{ after(grammarAccess.getFunctionAccess().getGroup_1()); }
)

	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getReturnTypeAssignment_2()); }
(rule__Function__ReturnTypeAssignment_2)?
{ after(grammarAccess.getFunctionAccess().getReturnTypeAssignment_2()); }
)

	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameAssignment_3()); }
(rule__Function__NameAssignment_3)
{ after(grammarAccess.getFunctionAccess().getNameAssignment_3()); }
)

	rule__Function__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_4()); }

	'(' 

{ after(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_4()); }
)

	rule__Function__Group__5
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_5()); }
(rule__Function__Group_5__0)?
{ after(grammarAccess.getFunctionAccess().getGroup_5()); }
)

	rule__Function__Group__6
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_6()); }

	')' 

{ after(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_6()); }
)

	rule__Function__Group__7
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_7()); }
(rule__Function__Group_7__0)?
{ after(grammarAccess.getFunctionAccess().getGroup_7()); }
)

	rule__Function__Group__8
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getAlternatives_8()); }
(rule__Function__Alternatives_8)
{ after(grammarAccess.getFunctionAccess().getAlternatives_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__Function__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getLessThanSignKeyword_1_0()); }

	'<' 

{ after(grammarAccess.getFunctionAccess().getLessThanSignKeyword_1_0()); }
)

	rule__Function__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getTypeParamsAssignment_1_1()); }
(rule__Function__TypeParamsAssignment_1_1)
{ after(grammarAccess.getFunctionAccess().getTypeParamsAssignment_1_1()); }
)

	rule__Function__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_1_2()); }
(rule__Function__Group_1_2__0)*
{ after(grammarAccess.getFunctionAccess().getGroup_1_2()); }
)

	rule__Function__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGreaterThanSignKeyword_1_3()); }

	'>' 

{ after(grammarAccess.getFunctionAccess().getGreaterThanSignKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Function__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getCommaKeyword_1_2_0()); }

	',' 

{ after(grammarAccess.getFunctionAccess().getCommaKeyword_1_2_0()); }
)

	rule__Function__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getTypeParamsAssignment_1_2_1()); }
(rule__Function__TypeParamsAssignment_1_2_1)
{ after(grammarAccess.getFunctionAccess().getTypeParamsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Function__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getDeclaredParamsAssignment_5_0()); }
(rule__Function__DeclaredParamsAssignment_5_0)
{ after(grammarAccess.getFunctionAccess().getDeclaredParamsAssignment_5_0()); }
)

	rule__Function__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_5_1()); }
(rule__Function__Group_5_1__0)*
{ after(grammarAccess.getFunctionAccess().getGroup_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Function__Group_5_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getCommaKeyword_5_1_0()); }

	',' 

{ after(grammarAccess.getFunctionAccess().getCommaKeyword_5_1_0()); }
)

	rule__Function__Group_5_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_5_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getDeclaredParamsAssignment_5_1_1()); }
(rule__Function__DeclaredParamsAssignment_5_1_1)
{ after(grammarAccess.getFunctionAccess().getDeclaredParamsAssignment_5_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Function__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getIfKeyword_7_0()); }

	'if' 

{ after(grammarAccess.getFunctionAccess().getIfKeyword_7_0()); }
)

	rule__Function__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGuardAssignment_7_1()); }
(rule__Function__GuardAssignment_7_1)
{ after(grammarAccess.getFunctionAccess().getGuardAssignment_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Function__Group_8_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getColonKeyword_8_0_0()); }

	':' 

{ after(grammarAccess.getFunctionAccess().getColonKeyword_8_0_0()); }
)

	rule__Function__Group_8_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_8_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getExpressionAssignment_8_0_1()); }
(rule__Function__ExpressionAssignment_8_0_1)
{ after(grammarAccess.getFunctionAccess().getExpressionAssignment_8_0_1()); }
)

	rule__Function__Group_8_0__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_8_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getSemicolonKeyword_8_0_2()); }

	';' 

{ after(grammarAccess.getFunctionAccess().getSemicolonKeyword_8_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getOrExpressionParserRuleCall_0()); }
	ruleOrExpression
{ after(grammarAccess.getAssignmentAccess().getOrExpressionParserRuleCall_0()); }
)

	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getGroup_1()); }
(rule__Assignment__Group_1__0)?
{ after(grammarAccess.getAssignmentAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Assignment__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getBinaryOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAssignmentAccess().getBinaryOperationLeftAction_1_0()); }
)

	rule__Assignment__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getOperatorAssignment_1_1()); }
(rule__Assignment__OperatorAssignment_1_1)
{ after(grammarAccess.getAssignmentAccess().getOperatorAssignment_1_1()); }
)

	rule__Assignment__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getRightAssignment_1_2()); }
(rule__Assignment__RightAssignment_1_2)
{ after(grammarAccess.getAssignmentAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)

	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
(rule__OrExpression__Group_1__0)*
{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getBinaryOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getOrExpressionAccess().getBinaryOperationLeftAction_1_0()); }
)

	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); }
(rule__OrExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); }
)

	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
(rule__OrExpression__RightAssignment_1_2)
{ after(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
	ruleEqualityExpression
{ after(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
)

	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getBinaryOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getBinaryOperationLeftAction_1_0()); }
)

	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); }
(rule__AndExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); }
)

	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
(rule__AndExpression__RightAssignment_1_2)
{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EqualityExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
	ruleRelationalExpression
{ after(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
)

	rule__EqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
(rule__EqualityExpression__Group_1__0)*
{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getBinaryOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getEqualityExpressionAccess().getBinaryOperationLeftAction_1_0()); }
)

	rule__EqualityExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperatorAssignment_1_1()); }
(rule__EqualityExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getEqualityExpressionAccess().getOperatorAssignment_1_1()); }
)

	rule__EqualityExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1_2()); }
(rule__EqualityExpression__RightAssignment_1_2)
{ after(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
	ruleAdditiveExpression
{ after(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
)

	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getAlternatives_1()); }
(rule__RelationalExpression__Alternatives_1)*
{ after(grammarAccess.getRelationalExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getInstanceOfExpressionExpressionAction_1_0_0()); }
(

)
{ after(grammarAccess.getRelationalExpressionAccess().getInstanceOfExpressionExpressionAction_1_0_0()); }
)

	rule__RelationalExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getInstanceofKeyword_1_0_1()); }

	'instanceof' 

{ after(grammarAccess.getRelationalExpressionAccess().getInstanceofKeyword_1_0_1()); }
)

	rule__RelationalExpression__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getTypeAssignment_1_0_2()); }
(rule__RelationalExpression__TypeAssignment_1_0_2)
{ after(grammarAccess.getRelationalExpressionAccess().getTypeAssignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RelationalExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getBinaryOperationLeftAction_1_1_0()); }
(

)
{ after(grammarAccess.getRelationalExpressionAccess().getBinaryOperationLeftAction_1_1_0()); }
)

	rule__RelationalExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_1_1()); }
(rule__RelationalExpression__OperatorAssignment_1_1_1)
{ after(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_1_1()); }
)

	rule__RelationalExpression__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_1_2()); }
(rule__RelationalExpression__RightAssignment_1_1_2)
{ after(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
	ruleMultiplicativeExpression
{ after(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
)

	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
(rule__AdditiveExpression__Group_1__0)*
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getBinaryOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAdditiveExpressionAccess().getBinaryOperationLeftAction_1_0()); }
)

	rule__AdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperatorAssignment_1_1()); }
(rule__AdditiveExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getOperatorAssignment_1_1()); }
)

	rule__AdditiveExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1_2()); }
(rule__AdditiveExpression__RightAssignment_1_2)
{ after(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOtherOperatorExpressionParserRuleCall_0()); }
	ruleOtherOperatorExpression
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOtherOperatorExpressionParserRuleCall_0()); }
)

	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
(rule__MultiplicativeExpression__Group_1__0)*
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getBinaryOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getBinaryOperationLeftAction_1_0()); }
)

	rule__MultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAssignment_1_1()); }
(rule__MultiplicativeExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAssignment_1_1()); }
)

	rule__MultiplicativeExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_2()); }
(rule__MultiplicativeExpression__RightAssignment_1_2)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OtherOperatorExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherOperatorExpressionAccess().getUnaryOperationParserRuleCall_0()); }
	ruleUnaryOperation
{ after(grammarAccess.getOtherOperatorExpressionAccess().getUnaryOperationParserRuleCall_0()); }
)

	rule__OtherOperatorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__OtherOperatorExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherOperatorExpressionAccess().getGroup_1()); }
(rule__OtherOperatorExpression__Group_1__0)*
{ after(grammarAccess.getOtherOperatorExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OtherOperatorExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherOperatorExpressionAccess().getBinaryOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getOtherOperatorExpressionAccess().getBinaryOperationLeftAction_1_0()); }
)

	rule__OtherOperatorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__OtherOperatorExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherOperatorExpressionAccess().getOperatorAssignment_1_1()); }
(rule__OtherOperatorExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getOtherOperatorExpressionAccess().getOperatorAssignment_1_1()); }
)

	rule__OtherOperatorExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__OtherOperatorExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherOperatorExpressionAccess().getRightAssignment_1_2()); }
(rule__OtherOperatorExpression__RightAssignment_1_2)
{ after(grammarAccess.getOtherOperatorExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnaryOperation__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getUnaryOperationAction_0_0()); }
(

)
{ after(grammarAccess.getUnaryOperationAccess().getUnaryOperationAction_0_0()); }
)

	rule__UnaryOperation__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperation__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getOperatorAssignment_0_1()); }
(rule__UnaryOperation__OperatorAssignment_0_1)
{ after(grammarAccess.getUnaryOperationAccess().getOperatorAssignment_0_1()); }
)

	rule__UnaryOperation__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperation__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getTargetAssignment_0_2()); }
(rule__UnaryOperation__TargetAssignment_0_2)
{ after(grammarAccess.getUnaryOperationAccess().getTargetAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnaryOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getCastedExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getUnaryOperationAccess().getCastedExpressionAction_1_0()); }
)

	rule__UnaryOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getLeftParenthesisKeyword_1_1()); }

	'(' 

{ after(grammarAccess.getUnaryOperationAccess().getLeftParenthesisKeyword_1_1()); }
)

	rule__UnaryOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getTypeAssignment_1_2()); }
(rule__UnaryOperation__TypeAssignment_1_2)
{ after(grammarAccess.getUnaryOperationAccess().getTypeAssignment_1_2()); }
)

	rule__UnaryOperation__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperation__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getRightParenthesisKeyword_1_3()); }

	')' 

{ after(grammarAccess.getUnaryOperationAccess().getRightParenthesisKeyword_1_3()); }
)

	rule__UnaryOperation__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperation__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getTargetAssignment_1_4()); }
(rule__UnaryOperation__TargetAssignment_1_4)
{ after(grammarAccess.getUnaryOperationAccess().getTargetAssignment_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FeatureCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
{ after(grammarAccess.getFeatureCallAccess().getPrimaryExpressionParserRuleCall_0()); }
)

	rule__FeatureCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getGroup_1()); }
(rule__FeatureCall__Group_1__0)*
{ after(grammarAccess.getFeatureCallAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FeatureCall__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getFeatureCallTargetAction_1_0()); }
(

)
{ after(grammarAccess.getFeatureCallAccess().getFeatureCallTargetAction_1_0()); }
)

	rule__FeatureCall__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getFullStopKeyword_1_1()); }

	'.' 

{ after(grammarAccess.getFeatureCallAccess().getFullStopKeyword_1_1()); }
)

	rule__FeatureCall__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getNameAssignment_1_2()); }
(rule__FeatureCall__NameAssignment_1_2)
{ after(grammarAccess.getFeatureCallAccess().getNameAssignment_1_2()); }
)

	rule__FeatureCall__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getGroup_1_3()); }
(rule__FeatureCall__Group_1_3__0)?
{ after(grammarAccess.getFeatureCallAccess().getGroup_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FeatureCall__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getLeftParenthesisKeyword_1_3_0()); }

	'(' 

{ after(grammarAccess.getFeatureCallAccess().getLeftParenthesisKeyword_1_3_0()); }
)

	rule__FeatureCall__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getGroup_1_3_1()); }
(rule__FeatureCall__Group_1_3_1__0)?
{ after(grammarAccess.getFeatureCallAccess().getGroup_1_3_1()); }
)

	rule__FeatureCall__Group_1_3__2
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_1_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getRightParenthesisKeyword_1_3_2()); }

	')' 

{ after(grammarAccess.getFeatureCallAccess().getRightParenthesisKeyword_1_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FeatureCall__Group_1_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getParamsAssignment_1_3_1_0()); }
(rule__FeatureCall__ParamsAssignment_1_3_1_0)
{ after(grammarAccess.getFeatureCallAccess().getParamsAssignment_1_3_1_0()); }
)

	rule__FeatureCall__Group_1_3_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_1_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getGroup_1_3_1_1()); }
(rule__FeatureCall__Group_1_3_1_1__0)*
{ after(grammarAccess.getFeatureCallAccess().getGroup_1_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FeatureCall__Group_1_3_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getCommaKeyword_1_3_1_1_0()); }

	',' 

{ after(grammarAccess.getFeatureCallAccess().getCommaKeyword_1_3_1_1_0()); }
)

	rule__FeatureCall__Group_1_3_1_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_1_3_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getParamsAssignment_1_3_1_1_1()); }
(rule__FeatureCall__ParamsAssignment_1_3_1_1_1)
{ after(grammarAccess.getFeatureCallAccess().getParamsAssignment_1_3_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Closure__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureAccess().getClosureAction_0()); }
(

)
{ after(grammarAccess.getClosureAccess().getClosureAction_0()); }
)

	rule__Closure__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Closure__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureAccess().getGroup_1()); }
(rule__Closure__Group_1__0)?
{ after(grammarAccess.getClosureAccess().getGroup_1()); }
)

	rule__Closure__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Closure__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureAccess().getVerticalLineKeyword_2()); }

	'|' 

{ after(grammarAccess.getClosureAccess().getVerticalLineKeyword_2()); }
)

	rule__Closure__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Closure__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureAccess().getExpressionAssignment_3()); }
(rule__Closure__ExpressionAssignment_3)
{ after(grammarAccess.getClosureAccess().getExpressionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Closure__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureAccess().getParamsAssignment_1_0()); }
(rule__Closure__ParamsAssignment_1_0)
{ after(grammarAccess.getClosureAccess().getParamsAssignment_1_0()); }
)

	rule__Closure__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Closure__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureAccess().getGroup_1_1()); }
(rule__Closure__Group_1_1__0)*
{ after(grammarAccess.getClosureAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Closure__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureAccess().getCommaKeyword_1_1_0()); }

	',' 

{ after(grammarAccess.getClosureAccess().getCommaKeyword_1_1_0()); }
)

	rule__Closure__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Closure__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureAccess().getParamsAssignment_1_1_1()); }
(rule__Closure__ParamsAssignment_1_1_1)
{ after(grammarAccess.getClosureAccess().getParamsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParenthesizedExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }
)

	rule__ParenthesizedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getExpressionParserRuleCall_1()); }
	ruleExpression
{ after(grammarAccess.getParenthesizedExpressionAccess().getExpressionParserRuleCall_1()); }
)

	rule__ParenthesizedExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IfExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfExpressionAccess().getIfKeyword_0()); }
)

	rule__IfExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getIfExpressionAccess().getLeftParenthesisKeyword_1()); }
)

	rule__IfExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getIfAssignment_2()); }
(rule__IfExpression__IfAssignment_2)
{ after(grammarAccess.getIfExpressionAccess().getIfAssignment_2()); }
)

	rule__IfExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getIfExpressionAccess().getRightParenthesisKeyword_3()); }
)

	rule__IfExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getThenAssignment_4()); }
(rule__IfExpression__ThenAssignment_4)
{ after(grammarAccess.getIfExpressionAccess().getThenAssignment_4()); }
)

	rule__IfExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getGroup_5()); }
(rule__IfExpression__Group_5__0)?
{ after(grammarAccess.getIfExpressionAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__IfExpression__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getElseKeyword_5_0()); }

	'else' 

{ after(grammarAccess.getIfExpressionAccess().getElseKeyword_5_0()); }
)

	rule__IfExpression__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getElseAssignment_5_1()); }
(rule__IfExpression__ElseAssignment_5_1)
{ after(grammarAccess.getIfExpressionAccess().getElseAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SwitchExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getSwitchKeyword_0()); }

	'switch' 

{ after(grammarAccess.getSwitchExpressionAccess().getSwitchKeyword_0()); }
)

	rule__SwitchExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getSwitchAssignment_1()); }
(rule__SwitchExpression__SwitchAssignment_1)?
{ after(grammarAccess.getSwitchExpressionAccess().getSwitchAssignment_1()); }
)

	rule__SwitchExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getSwitchExpressionAccess().getLeftCurlyBracketKeyword_2()); }
)

	rule__SwitchExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getSwitchExpressionAccess().getCasesAssignment_3()); }
(rule__SwitchExpression__CasesAssignment_3)
{ after(grammarAccess.getSwitchExpressionAccess().getCasesAssignment_3()); }
)
(
{ before(grammarAccess.getSwitchExpressionAccess().getCasesAssignment_3()); }
(rule__SwitchExpression__CasesAssignment_3)*
{ after(grammarAccess.getSwitchExpressionAccess().getCasesAssignment_3()); }
)
)

	rule__SwitchExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getGroup_4()); }
(rule__SwitchExpression__Group_4__0)?
{ after(grammarAccess.getSwitchExpressionAccess().getGroup_4()); }
)

	rule__SwitchExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getSwitchExpressionAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__SwitchExpression__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getDefaultKeyword_4_0()); }

	'default' 

{ after(grammarAccess.getSwitchExpressionAccess().getDefaultKeyword_4_0()); }
)

	rule__SwitchExpression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchExpression__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getColonKeyword_4_1()); }

	':' 

{ after(grammarAccess.getSwitchExpressionAccess().getColonKeyword_4_1()); }
)

	rule__SwitchExpression__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchExpression__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getDefaultAssignment_4_2()); }
(rule__SwitchExpression__DefaultAssignment_4_2)
{ after(grammarAccess.getSwitchExpressionAccess().getDefaultAssignment_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__WhileExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileExpressionAccess().getWhileKeyword_0()); }

	'while' 

{ after(grammarAccess.getWhileExpressionAccess().getWhileKeyword_0()); }
)

	rule__WhileExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__WhileExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileExpressionAccess().getPredicateAssignment_1()); }
(rule__WhileExpression__PredicateAssignment_1)
{ after(grammarAccess.getWhileExpressionAccess().getPredicateAssignment_1()); }
)

	rule__WhileExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__WhileExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileExpressionAccess().getBodyAssignment_2()); }
(rule__WhileExpression__BodyAssignment_2)
{ after(grammarAccess.getWhileExpressionAccess().getBodyAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CasePart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCasePartAccess().getCaseKeyword_0()); }

	'case' 

{ after(grammarAccess.getCasePartAccess().getCaseKeyword_0()); }
)

	rule__CasePart__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CasePart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCasePartAccess().getCaseAssignment_1()); }
(rule__CasePart__CaseAssignment_1)
{ after(grammarAccess.getCasePartAccess().getCaseAssignment_1()); }
)

	rule__CasePart__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__CasePart__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCasePartAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getCasePartAccess().getColonKeyword_2()); }
)

	rule__CasePart__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__CasePart__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCasePartAccess().getThenAssignment_3()); }
(rule__CasePart__ThenAssignment_3)
{ after(grammarAccess.getCasePartAccess().getThenAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BlockExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getBlockExpressionAccess().getLeftCurlyBracketKeyword_0()); }
)

	rule__BlockExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__BlockExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getBlockExpressionAccess().getGroup_1()); }
(rule__BlockExpression__Group_1__0)
{ after(grammarAccess.getBlockExpressionAccess().getGroup_1()); }
)
(
{ before(grammarAccess.getBlockExpressionAccess().getGroup_1()); }
(rule__BlockExpression__Group_1__0)*
{ after(grammarAccess.getBlockExpressionAccess().getGroup_1()); }
)
)

	rule__BlockExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__BlockExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getBlockExpressionAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BlockExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getExpressionsAssignment_1_0()); }
(rule__BlockExpression__ExpressionsAssignment_1_0)
{ after(grammarAccess.getBlockExpressionAccess().getExpressionsAssignment_1_0()); }
)

	rule__BlockExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__BlockExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getSemicolonKeyword_1_1()); }

	';' 

{ after(grammarAccess.getBlockExpressionAccess().getSemicolonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getAlternatives_0()); }
(rule__VariableDeclaration__Alternatives_0)
{ after(grammarAccess.getVariableDeclarationAccess().getAlternatives_0()); }
)

	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
(rule__VariableDeclaration__NameAssignment_1)
{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
)

	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getColonEqualsSignKeyword_2()); }

	':=' 

{ after(grammarAccess.getVariableDeclarationAccess().getColonEqualsSignKeyword_2()); }
)

	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getRightAssignment_3()); }
(rule__VariableDeclaration__RightAssignment_3)
{ after(grammarAccess.getVariableDeclarationAccess().getRightAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__DeclaredParameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaredParameterAccess().getTypeAssignment_0()); }
(rule__DeclaredParameter__TypeAssignment_0)?
{ after(grammarAccess.getDeclaredParameterAccess().getTypeAssignment_0()); }
)

	rule__DeclaredParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaredParameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaredParameterAccess().getNameAssignment_1()); }
(rule__DeclaredParameter__NameAssignment_1)
{ after(grammarAccess.getDeclaredParameterAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleFeatureCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleFeatureCallAccess().getNameAssignment_0()); }
(rule__SimpleFeatureCall__NameAssignment_0)
{ after(grammarAccess.getSimpleFeatureCallAccess().getNameAssignment_0()); }
)

	rule__SimpleFeatureCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleFeatureCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleFeatureCallAccess().getGroup_1()); }
(rule__SimpleFeatureCall__Group_1__0)?
{ after(grammarAccess.getSimpleFeatureCallAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleFeatureCall__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleFeatureCallAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getSimpleFeatureCallAccess().getLeftParenthesisKeyword_1_0()); }
)

	rule__SimpleFeatureCall__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleFeatureCall__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleFeatureCallAccess().getGroup_1_1()); }
(rule__SimpleFeatureCall__Group_1_1__0)?
{ after(grammarAccess.getSimpleFeatureCallAccess().getGroup_1_1()); }
)

	rule__SimpleFeatureCall__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleFeatureCall__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleFeatureCallAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getSimpleFeatureCallAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SimpleFeatureCall__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleFeatureCallAccess().getParamsAssignment_1_1_0()); }
(rule__SimpleFeatureCall__ParamsAssignment_1_1_0)
{ after(grammarAccess.getSimpleFeatureCallAccess().getParamsAssignment_1_1_0()); }
)

	rule__SimpleFeatureCall__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleFeatureCall__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleFeatureCallAccess().getGroup_1_1_1()); }
(rule__SimpleFeatureCall__Group_1_1_1__0)*
{ after(grammarAccess.getSimpleFeatureCallAccess().getGroup_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleFeatureCall__Group_1_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleFeatureCallAccess().getCommaKeyword_1_1_1_0()); }

	',' 

{ after(grammarAccess.getSimpleFeatureCallAccess().getCommaKeyword_1_1_1_0()); }
)

	rule__SimpleFeatureCall__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleFeatureCall__Group_1_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleFeatureCallAccess().getParamsAssignment_1_1_1_1()); }
(rule__SimpleFeatureCall__ParamsAssignment_1_1_1_1)
{ after(grammarAccess.getSimpleFeatureCallAccess().getParamsAssignment_1_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConstructorCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getNewKeyword_0()); }

	'new' 

{ after(grammarAccess.getConstructorCallAccess().getNewKeyword_0()); }
)

	rule__ConstructorCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getTypeAssignment_1()); }
(rule__ConstructorCall__TypeAssignment_1)
{ after(grammarAccess.getConstructorCallAccess().getTypeAssignment_1()); }
)

	rule__ConstructorCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getGroup_2()); }
(rule__ConstructorCall__Group_2__0)?
{ after(grammarAccess.getConstructorCallAccess().getGroup_2()); }
)

	rule__ConstructorCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getInitializerAssignment_3()); }
(rule__ConstructorCall__InitializerAssignment_3)?
{ after(grammarAccess.getConstructorCallAccess().getInitializerAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ConstructorCall__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getConstructorCallAccess().getLeftParenthesisKeyword_2_0()); }
)

	rule__ConstructorCall__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorCall__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getGroup_2_1()); }
(rule__ConstructorCall__Group_2_1__0)?
{ after(grammarAccess.getConstructorCallAccess().getGroup_2_1()); }
)

	rule__ConstructorCall__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorCall__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getConstructorCallAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ConstructorCall__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getParamsAssignment_2_1_0()); }
(rule__ConstructorCall__ParamsAssignment_2_1_0)
{ after(grammarAccess.getConstructorCallAccess().getParamsAssignment_2_1_0()); }
)

	rule__ConstructorCall__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorCall__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getGroup_2_1_1()); }
(rule__ConstructorCall__Group_2_1_1__0)*
{ after(grammarAccess.getConstructorCallAccess().getGroup_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConstructorCall__Group_2_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getCommaKeyword_2_1_1_0()); }

	',' 

{ after(grammarAccess.getConstructorCallAccess().getCommaKeyword_2_1_1_0()); }
)

	rule__ConstructorCall__Group_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorCall__Group_2_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getParamsAssignment_2_1_1_1()); }
(rule__ConstructorCall__ParamsAssignment_2_1_1_1)
{ after(grammarAccess.getConstructorCallAccess().getParamsAssignment_2_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanLiteral__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0_0()); }
(

)
{ after(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0_0()); }
)

	rule__BooleanLiteral__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanLiteral__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getFalseKeyword_0_1()); }

	'false' 

{ after(grammarAccess.getBooleanLiteralAccess().getFalseKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NullLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullLiteralAccess().getNullLiteralAction_0()); }
(

)
{ after(grammarAccess.getNullLiteralAccess().getNullLiteralAction_0()); }
)

	rule__NullLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__NullLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullLiteralAccess().getNullKeyword_1()); }

	'null' 

{ after(grammarAccess.getNullLiteralAccess().getNullKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeLiteralAccess().getTypeAssignment_0()); }
(rule__TypeLiteral__TypeAssignment_0)
{ after(grammarAccess.getTypeLiteralAccess().getTypeAssignment_0()); }
)

	rule__TypeLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeLiteralAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getTypeLiteralAccess().getFullStopKeyword_1()); }
)

	rule__TypeLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeLiteralAccess().getClassKeyword_2()); }

	'class' 

{ after(grammarAccess.getTypeLiteralAccess().getClassKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RichString__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRichStringAccess().getExpressionsAssignment_0()); }
(rule__RichString__ExpressionsAssignment_0)
{ after(grammarAccess.getRichStringAccess().getExpressionsAssignment_0()); }
)

	rule__RichString__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__RichString__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRichStringAccess().getGroup_1()); }
(rule__RichString__Group_1__0)*
{ after(grammarAccess.getRichStringAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RichString__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRichStringAccess().getExpressionsAssignment_1_0()); }
(rule__RichString__ExpressionsAssignment_1_0)
{ after(grammarAccess.getRichStringAccess().getExpressionsAssignment_1_0()); }
)

	rule__RichString__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__RichString__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRichStringAccess().getExpressionsAssignment_1_1()); }
(rule__RichString__ExpressionsAssignment_1_1)
{ after(grammarAccess.getRichStringAccess().getExpressionsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionTypeRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeRefAccess().getGroup_0()); }
(rule__FunctionTypeRef__Group_0__0)?
{ after(grammarAccess.getFunctionTypeRefAccess().getGroup_0()); }
)

	rule__FunctionTypeRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionTypeRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeRefAccess().getEqualsSignGreaterThanSignKeyword_1()); }

	'=>' 

{ after(grammarAccess.getFunctionTypeRefAccess().getEqualsSignGreaterThanSignKeyword_1()); }
)

	rule__FunctionTypeRef__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionTypeRef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeRefAccess().getReturnTypeAssignment_2()); }
(rule__FunctionTypeRef__ReturnTypeAssignment_2)
{ after(grammarAccess.getFunctionTypeRefAccess().getReturnTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FunctionTypeRef__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeRefAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getFunctionTypeRefAccess().getLeftParenthesisKeyword_0_0()); }
)

	rule__FunctionTypeRef__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionTypeRef__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeRefAccess().getParamTypesAssignment_0_1()); }
(rule__FunctionTypeRef__ParamTypesAssignment_0_1)
{ after(grammarAccess.getFunctionTypeRefAccess().getParamTypesAssignment_0_1()); }
)

	rule__FunctionTypeRef__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionTypeRef__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeRefAccess().getGroup_0_2()); }
(rule__FunctionTypeRef__Group_0_2__0)*
{ after(grammarAccess.getFunctionTypeRefAccess().getGroup_0_2()); }
)

	rule__FunctionTypeRef__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionTypeRef__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeRefAccess().getRightParenthesisKeyword_0_3()); }

	')' 

{ after(grammarAccess.getFunctionTypeRefAccess().getRightParenthesisKeyword_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FunctionTypeRef__Group_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeRefAccess().getCommaKeyword_0_2_0()); }

	',' 

{ after(grammarAccess.getFunctionTypeRefAccess().getCommaKeyword_0_2_0()); }
)

	rule__FunctionTypeRef__Group_0_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionTypeRef__Group_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeRefAccess().getParamTypesAssignment_0_2_1()); }
(rule__FunctionTypeRef__ParamTypesAssignment_0_2_1)
{ after(grammarAccess.getFunctionTypeRefAccess().getParamTypesAssignment_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleTypeRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeRefAccess().getTypeAssignment_0()); }
(rule__SimpleTypeRef__TypeAssignment_0)
{ after(grammarAccess.getSimpleTypeRefAccess().getTypeAssignment_0()); }
)

	rule__SimpleTypeRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleTypeRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeRefAccess().getGroup_1()); }
(rule__SimpleTypeRef__Group_1__0)?
{ after(grammarAccess.getSimpleTypeRefAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleTypeRef__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeRefAccess().getLessThanSignKeyword_1_0()); }

	'<' 

{ after(grammarAccess.getSimpleTypeRefAccess().getLessThanSignKeyword_1_0()); }
)

	rule__SimpleTypeRef__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleTypeRef__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeRefAccess().getTypeParamsAssignment_1_1()); }
(rule__SimpleTypeRef__TypeParamsAssignment_1_1)
{ after(grammarAccess.getSimpleTypeRefAccess().getTypeParamsAssignment_1_1()); }
)

	rule__SimpleTypeRef__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleTypeRef__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeRefAccess().getGroup_1_2()); }
(rule__SimpleTypeRef__Group_1_2__0)*
{ after(grammarAccess.getSimpleTypeRefAccess().getGroup_1_2()); }
)

	rule__SimpleTypeRef__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleTypeRef__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeRefAccess().getGreaterThanSignKeyword_1_3()); }

	'>' 

{ after(grammarAccess.getSimpleTypeRefAccess().getGreaterThanSignKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SimpleTypeRef__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeRefAccess().getCommaKeyword_1_2_0()); }

	',' 

{ after(grammarAccess.getSimpleTypeRefAccess().getCommaKeyword_1_2_0()); }
)

	rule__SimpleTypeRef__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleTypeRef__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeRefAccess().getTypeParamsAssignment_1_2_1()); }
(rule__SimpleTypeRef__TypeParamsAssignment_1_2_1)
{ after(grammarAccess.getSimpleTypeRefAccess().getTypeParamsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WildcardParam__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardParamAccess().getWildcardParamAction_0()); }
(

)
{ after(grammarAccess.getWildcardParamAccess().getWildcardParamAction_0()); }
)

	rule__WildcardParam__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__WildcardParam__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardParamAccess().getQuestionMarkKeyword_1()); }

	'?' 

{ after(grammarAccess.getWildcardParamAccess().getQuestionMarkKeyword_1()); }
)

	rule__WildcardParam__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__WildcardParam__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardParamAccess().getAlternatives_2()); }
(rule__WildcardParam__Alternatives_2)?
{ after(grammarAccess.getWildcardParamAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__WildcardParam__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardParamAccess().getExtendsKeyword_2_0_0()); }

	'extends' 

{ after(grammarAccess.getWildcardParamAccess().getExtendsKeyword_2_0_0()); }
)

	rule__WildcardParam__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__WildcardParam__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardParamAccess().getExtendsAssignment_2_0_1()); }
(rule__WildcardParam__ExtendsAssignment_2_0_1)
{ after(grammarAccess.getWildcardParamAccess().getExtendsAssignment_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WildcardParam__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardParamAccess().getSuperKeyword_2_1_0()); }

	'super' 

{ after(grammarAccess.getWildcardParamAccess().getSuperKeyword_2_1_0()); }
)

	rule__WildcardParam__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__WildcardParam__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardParamAccess().getSuperAssignment_2_1_1()); }
(rule__WildcardParam__SuperAssignment_2_1_1)
{ after(grammarAccess.getWildcardParamAccess().getSuperAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeParamDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParamDeclarationAccess().getNameAssignment_0()); }
(rule__TypeParamDeclaration__NameAssignment_0)
{ after(grammarAccess.getTypeParamDeclarationAccess().getNameAssignment_0()); }
)

	rule__TypeParamDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParamDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParamDeclarationAccess().getAlternatives_1()); }
(rule__TypeParamDeclaration__Alternatives_1)?
{ after(grammarAccess.getTypeParamDeclarationAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeParamDeclaration__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParamDeclarationAccess().getExtendsKeyword_1_0_0()); }

	'extends' 

{ after(grammarAccess.getTypeParamDeclarationAccess().getExtendsKeyword_1_0_0()); }
)

	rule__TypeParamDeclaration__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParamDeclaration__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParamDeclarationAccess().getExtendsAssignment_1_0_1()); }
(rule__TypeParamDeclaration__ExtendsAssignment_1_0_1)
{ after(grammarAccess.getTypeParamDeclarationAccess().getExtendsAssignment_1_0_1()); }
)

	rule__TypeParamDeclaration__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParamDeclaration__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParamDeclarationAccess().getGroup_1_0_2()); }
(rule__TypeParamDeclaration__Group_1_0_2__0)*
{ after(grammarAccess.getTypeParamDeclarationAccess().getGroup_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TypeParamDeclaration__Group_1_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParamDeclarationAccess().getAmpersandKeyword_1_0_2_0()); }

	'&' 

{ after(grammarAccess.getTypeParamDeclarationAccess().getAmpersandKeyword_1_0_2_0()); }
)

	rule__TypeParamDeclaration__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParamDeclaration__Group_1_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParamDeclarationAccess().getExtendsAssignment_1_0_2_1()); }
(rule__TypeParamDeclaration__ExtendsAssignment_1_0_2_1)
{ after(grammarAccess.getTypeParamDeclarationAccess().getExtendsAssignment_1_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeParamDeclaration__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParamDeclarationAccess().getSuperKeyword_1_1_0()); }

	'super' 

{ after(grammarAccess.getTypeParamDeclarationAccess().getSuperKeyword_1_1_0()); }
)

	rule__TypeParamDeclaration__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParamDeclaration__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParamDeclarationAccess().getSuperAssignment_1_1_1()); }
(rule__TypeParamDeclaration__SuperAssignment_1_1_1)
{ after(grammarAccess.getTypeParamDeclarationAccess().getSuperAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__File__ImportsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileAccess().getImportsImportParserRuleCall_0_0()); }
	ruleImport{ after(grammarAccess.getFileAccess().getImportsImportParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__File__FunctionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileAccess().getFunctionsFunctionParserRuleCall_1_0()); }
	ruleFunction{ after(grammarAccess.getFileAccess().getFunctionsFunctionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedNamespaceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0()); }
	ruleQualifiedNameWithWildCard{ after(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__PrivateAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getPrivatePrivateKeyword_0_0_0()); }
(
{ before(grammarAccess.getFunctionAccess().getPrivatePrivateKeyword_0_0_0()); }

	'private' 

{ after(grammarAccess.getFunctionAccess().getPrivatePrivateKeyword_0_0_0()); }
)

{ after(grammarAccess.getFunctionAccess().getPrivatePrivateKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__FinalAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getFinalFinalKeyword_0_1_0()); }
(
{ before(grammarAccess.getFunctionAccess().getFinalFinalKeyword_0_1_0()); }

	'final' 

{ after(grammarAccess.getFunctionAccess().getFinalFinalKeyword_0_1_0()); }
)

{ after(grammarAccess.getFunctionAccess().getFinalFinalKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__TypeParamsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getTypeParamsTypeParamDeclarationParserRuleCall_1_1_0()); }
	ruleTypeParamDeclaration{ after(grammarAccess.getFunctionAccess().getTypeParamsTypeParamDeclarationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__TypeParamsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getTypeParamsTypeParamDeclarationParserRuleCall_1_2_1_0()); }
	ruleTypeParamDeclaration{ after(grammarAccess.getFunctionAccess().getTypeParamsTypeParamDeclarationParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ReturnTypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getReturnTypeTypeRefParserRuleCall_2_0()); }
	ruleTypeRef{ after(grammarAccess.getFunctionAccess().getReturnTypeTypeRefParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__DeclaredParamsAssignment_5_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getDeclaredParamsDeclaredParameterParserRuleCall_5_0_0()); }
	ruleDeclaredParameter{ after(grammarAccess.getFunctionAccess().getDeclaredParamsDeclaredParameterParserRuleCall_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__DeclaredParamsAssignment_5_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getDeclaredParamsDeclaredParameterParserRuleCall_5_1_1_0()); }
	ruleDeclaredParameter{ after(grammarAccess.getFunctionAccess().getDeclaredParamsDeclaredParameterParserRuleCall_5_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__GuardAssignment_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGuardExpressionParserRuleCall_7_1_0()); }
	ruleExpression{ after(grammarAccess.getFunctionAccess().getGuardExpressionParserRuleCall_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ExpressionAssignment_8_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getExpressionExpressionParserRuleCall_8_0_1_0()); }
	ruleExpression{ after(grammarAccess.getFunctionAccess().getExpressionExpressionParserRuleCall_8_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ExpressionAssignment_8_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getExpressionBlockExpressionParserRuleCall_8_1_0()); }
	ruleBlockExpression{ after(grammarAccess.getFunctionAccess().getExpressionBlockExpressionParserRuleCall_8_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getOperatorAlternatives_1_1_0()); }
(rule__Assignment__OperatorAlternatives_1_1_0)
{ after(grammarAccess.getAssignmentAccess().getOperatorAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getRightOrExpressionParserRuleCall_1_2_0()); }
	ruleOrExpression{ after(grammarAccess.getAssignmentAccess().getRightOrExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0()); }
(
{ before(grammarAccess.getOrExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0()); }

	'||' 

{ after(grammarAccess.getOrExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0()); }
)

{ after(grammarAccess.getOrExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
	ruleAndExpression{ after(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0()); }
(
{ before(grammarAccess.getAndExpressionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0()); }

	'&&' 

{ after(grammarAccess.getAndExpressionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0()); }
)

{ after(grammarAccess.getAndExpressionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightEqualityExpressionParserRuleCall_1_2_0()); }
	ruleEqualityExpression{ after(grammarAccess.getAndExpressionAccess().getRightEqualityExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperatorAlternatives_1_1_0()); }
(rule__EqualityExpression__OperatorAlternatives_1_1_0)
{ after(grammarAccess.getEqualityExpressionAccess().getOperatorAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRightRelationalExpressionParserRuleCall_1_2_0()); }
	ruleRelationalExpression{ after(grammarAccess.getEqualityExpressionAccess().getRightRelationalExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__TypeAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getTypeTypeCrossReference_1_0_2_0()); }
(
{ before(grammarAccess.getRelationalExpressionAccess().getTypeTypeQualifiedNameParserRuleCall_1_0_2_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getRelationalExpressionAccess().getTypeTypeQualifiedNameParserRuleCall_1_0_2_0_1()); }
)
{ after(grammarAccess.getRelationalExpressionAccess().getTypeTypeCrossReference_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OperatorAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorAlternatives_1_1_1_0()); }
(rule__RelationalExpression__OperatorAlternatives_1_1_1_0)
{ after(grammarAccess.getRelationalExpressionAccess().getOperatorAlternatives_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__RightAssignment_1_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_1_2_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getRelationalExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperatorAlternatives_1_1_0()); }
(rule__AdditiveExpression__OperatorAlternatives_1_1_0)
{ after(grammarAccess.getAdditiveExpressionAccess().getOperatorAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_2_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAlternatives_1_1_0()); }
(rule__MultiplicativeExpression__OperatorAlternatives_1_1_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightOtherOperatorExpressionParserRuleCall_1_2_0()); }
	ruleOtherOperatorExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightOtherOperatorExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OtherOperatorExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherOperatorExpressionAccess().getOperatorAlternatives_1_1_0()); }
(rule__OtherOperatorExpression__OperatorAlternatives_1_1_0)
{ after(grammarAccess.getOtherOperatorExpressionAccess().getOperatorAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OtherOperatorExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherOperatorExpressionAccess().getRightUnaryOperationParserRuleCall_1_2_0()); }
	ruleUnaryOperation{ after(grammarAccess.getOtherOperatorExpressionAccess().getRightUnaryOperationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__OperatorAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getOperatorAlternatives_0_1_0()); }
(rule__UnaryOperation__OperatorAlternatives_0_1_0)
{ after(grammarAccess.getUnaryOperationAccess().getOperatorAlternatives_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__TargetAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getTargetFeatureCallParserRuleCall_0_2_0()); }
	ruleFeatureCall{ after(grammarAccess.getUnaryOperationAccess().getTargetFeatureCallParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__TypeAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getTypeTypeRefParserRuleCall_1_2_0()); }
	ruleTypeRef{ after(grammarAccess.getUnaryOperationAccess().getTypeTypeRefParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__TargetAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getTargetExpressionParserRuleCall_1_4_0()); }
	ruleExpression{ after(grammarAccess.getUnaryOperationAccess().getTargetExpressionParserRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__NameAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getNameIDTerminalRuleCall_1_2_0()); }
	RULE_ID{ after(grammarAccess.getFeatureCallAccess().getNameIDTerminalRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__ParamsAssignment_1_3_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getParamsExpressionParserRuleCall_1_3_1_0_0()); }
	ruleExpression{ after(grammarAccess.getFeatureCallAccess().getParamsExpressionParserRuleCall_1_3_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__ParamsAssignment_1_3_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getParamsExpressionParserRuleCall_1_3_1_1_1_0()); }
	ruleExpression{ after(grammarAccess.getFeatureCallAccess().getParamsExpressionParserRuleCall_1_3_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Closure__ParamsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureAccess().getParamsDeclaredParameterParserRuleCall_1_0_0()); }
	ruleDeclaredParameter{ after(grammarAccess.getClosureAccess().getParamsDeclaredParameterParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Closure__ParamsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureAccess().getParamsDeclaredParameterParserRuleCall_1_1_1_0()); }
	ruleDeclaredParameter{ after(grammarAccess.getClosureAccess().getParamsDeclaredParameterParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Closure__ExpressionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureAccess().getExpressionExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getClosureAccess().getExpressionExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__IfAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getIfExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getIfExpressionAccess().getIfExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__ThenAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getThenExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getIfExpressionAccess().getThenExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__ElseAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getElseExpressionParserRuleCall_5_1_0()); }
	ruleExpression{ after(grammarAccess.getIfExpressionAccess().getElseExpressionParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__SwitchAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getSwitchExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getSwitchExpressionAccess().getSwitchExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__CasesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getCasesCasePartParserRuleCall_3_0()); }
	ruleCasePart{ after(grammarAccess.getSwitchExpressionAccess().getCasesCasePartParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__DefaultAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getDefaultExpressionParserRuleCall_4_2_0()); }
	ruleExpression{ after(grammarAccess.getSwitchExpressionAccess().getDefaultExpressionParserRuleCall_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__PredicateAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileExpressionAccess().getPredicateParenthesizedExpressionParserRuleCall_1_0()); }
	ruleParenthesizedExpression{ after(grammarAccess.getWhileExpressionAccess().getPredicateParenthesizedExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__BodyAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileExpressionAccess().getBodyExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getWhileExpressionAccess().getBodyExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CasePart__CaseAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCasePartAccess().getCaseExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getCasePartAccess().getCaseExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CasePart__ThenAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCasePartAccess().getThenExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getCasePartAccess().getThenExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockExpression__ExpressionsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockExpressionAccess().getExpressionsExpressionInsideBlockParserRuleCall_1_0_0()); }
	ruleExpressionInsideBlock{ after(grammarAccess.getBlockExpressionAccess().getExpressionsExpressionInsideBlockParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__TypeAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getTypeTypeRefParserRuleCall_0_1_0()); }
	ruleTypeRef{ after(grammarAccess.getVariableDeclarationAccess().getTypeTypeRefParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__RightAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getRightExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getVariableDeclarationAccess().getRightExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredParameter__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaredParameterAccess().getTypeTypeRefParserRuleCall_0_0()); }
	ruleTypeRef{ after(grammarAccess.getDeclaredParameterAccess().getTypeTypeRefParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredParameter__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaredParameterAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getDeclaredParameterAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleFeatureCall__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleFeatureCallAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getSimpleFeatureCallAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleFeatureCall__ParamsAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleFeatureCallAccess().getParamsExpressionParserRuleCall_1_1_0_0()); }
	ruleExpression{ after(grammarAccess.getSimpleFeatureCallAccess().getParamsExpressionParserRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleFeatureCall__ParamsAssignment_1_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleFeatureCallAccess().getParamsExpressionParserRuleCall_1_1_1_1_0()); }
	ruleExpression{ after(grammarAccess.getSimpleFeatureCallAccess().getParamsExpressionParserRuleCall_1_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getTypeTypeRefParserRuleCall_1_0()); }
	ruleTypeRef{ after(grammarAccess.getConstructorCallAccess().getTypeTypeRefParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__ParamsAssignment_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getParamsExpressionParserRuleCall_2_1_0_0()); }
	ruleExpression{ after(grammarAccess.getConstructorCallAccess().getParamsExpressionParserRuleCall_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__ParamsAssignment_2_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getParamsExpressionParserRuleCall_2_1_1_1_0()); }
	ruleExpression{ after(grammarAccess.getConstructorCallAccess().getParamsExpressionParserRuleCall_2_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCall__InitializerAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallAccess().getInitializerBlockExpressionParserRuleCall_3_0()); }
	ruleBlockExpression{ after(grammarAccess.getConstructorCallAccess().getInitializerBlockExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__IsTrueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_0()); }
(
{ before(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_0()); }

	'true' 

{ after(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_0()); }
)

{ after(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeLiteralAccess().getTypeTypeCrossReference_0_0()); }
(
{ before(grammarAccess.getTypeLiteralAccess().getTypeTypeQualifiedNameParserRuleCall_0_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getTypeLiteralAccess().getTypeTypeQualifiedNameParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getTypeLiteralAccess().getTypeTypeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RichString__ExpressionsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRichStringAccess().getExpressionsRichStringLiteralParserRuleCall_0_0()); }
	ruleRichStringLiteral{ after(grammarAccess.getRichStringAccess().getExpressionsRichStringLiteralParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RichString__ExpressionsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRichStringAccess().getExpressionsExpressionParserRuleCall_1_0_0()); }
	ruleExpression{ after(grammarAccess.getRichStringAccess().getExpressionsExpressionParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RichString__ExpressionsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRichStringAccess().getExpressionsRichStringLiteralParserRuleCall_1_1_0()); }
	ruleRichStringLiteral{ after(grammarAccess.getRichStringAccess().getExpressionsRichStringLiteralParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RichStringLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRichStringLiteralAccess().getValueRICH_STRINGTerminalRuleCall_0()); }
	RULE_RICH_STRING{ after(grammarAccess.getRichStringLiteralAccess().getValueRICH_STRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTypeRef__ParamTypesAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeRefAccess().getParamTypesTypeRefParserRuleCall_0_1_0()); }
	ruleTypeRef{ after(grammarAccess.getFunctionTypeRefAccess().getParamTypesTypeRefParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTypeRef__ParamTypesAssignment_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeRefAccess().getParamTypesTypeRefParserRuleCall_0_2_1_0()); }
	ruleTypeRef{ after(grammarAccess.getFunctionTypeRefAccess().getParamTypesTypeRefParserRuleCall_0_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTypeRef__ReturnTypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeRefAccess().getReturnTypeTypeRefParserRuleCall_2_0()); }
	ruleTypeRef{ after(grammarAccess.getFunctionTypeRefAccess().getReturnTypeTypeRefParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypeRef__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeRefAccess().getTypeTypeCrossReference_0_0()); }
(
{ before(grammarAccess.getSimpleTypeRefAccess().getTypeTypeQualifiedNameParserRuleCall_0_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getSimpleTypeRefAccess().getTypeTypeQualifiedNameParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getSimpleTypeRefAccess().getTypeTypeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypeRef__TypeParamsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeRefAccess().getTypeParamsTypeParamParserRuleCall_1_1_0()); }
	ruleTypeParam{ after(grammarAccess.getSimpleTypeRefAccess().getTypeParamsTypeParamParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypeRef__TypeParamsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeRefAccess().getTypeParamsTypeParamParserRuleCall_1_2_1_0()); }
	ruleTypeParam{ after(grammarAccess.getSimpleTypeRefAccess().getTypeParamsTypeParamParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WildcardParam__ExtendsAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardParamAccess().getExtendsTypeRefParserRuleCall_2_0_1_0()); }
	ruleTypeRef{ after(grammarAccess.getWildcardParamAccess().getExtendsTypeRefParserRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WildcardParam__SuperAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardParamAccess().getSuperTypeRefParserRuleCall_2_1_1_0()); }
	ruleTypeRef{ after(grammarAccess.getWildcardParamAccess().getSuperTypeRefParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParamDeclaration__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParamDeclarationAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getTypeParamDeclarationAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParamDeclaration__ExtendsAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParamDeclarationAccess().getExtendsTypeRefParserRuleCall_1_0_1_0()); }
	ruleTypeRef{ after(grammarAccess.getTypeParamDeclarationAccess().getExtendsTypeRefParserRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParamDeclaration__ExtendsAssignment_1_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParamDeclarationAccess().getExtendsTypeRefParserRuleCall_1_0_2_1_0()); }
	ruleTypeRef{ after(grammarAccess.getTypeParamDeclarationAccess().getExtendsTypeRefParserRuleCall_1_0_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParamDeclaration__SuperAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParamDeclarationAccess().getSuperTypeRefParserRuleCall_1_1_1_0()); }
	ruleTypeRef{ after(grammarAccess.getTypeParamDeclarationAccess().getSuperTypeRefParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_RICH_STRING : '\u00BB' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\u00AB')))* '\u00AB';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


