/*
* generated by Xtext
*/
grammar InternalSimpleAntlr;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.generator.parser.antlr.debug.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.generator.parser.antlr.debug.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.generator.parser.antlr.debug.services.SimpleAntlrGrammarAccess;

}

@parser::members {

 	private SimpleAntlrGrammarAccess grammarAccess;
 	
    public InternalSimpleAntlrParser(TokenStream input, IAstFactory factory, SimpleAntlrGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/xtext/generator/parser/antlr/debug/parser/antlr/internal/InternalSimpleAntlr.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "AntlrGrammar";	
   	}
   	
   	@Override
   	protected SimpleAntlrGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleAntlrGrammar
entryRuleAntlrGrammar returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAntlrGrammarRule(), currentNode); }
	 iv_ruleAntlrGrammar=ruleAntlrGrammar 
	 { $current=$iv_ruleAntlrGrammar.current; } 
	 EOF 
;

// Rule AntlrGrammar
ruleAntlrGrammar returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'grammar' 
    {
        createLeafNode(grammarAccess.getAntlrGrammarAccess().getGrammarKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAntlrGrammarAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAntlrGrammarRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getAntlrGrammarAccess().getSemicolonKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAntlrGrammarAccess().getOptionsOptionsParserRuleCall_3_0(), currentNode); 
	    }
		lv_options_3_0=ruleOptions		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAntlrGrammarRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"options",
	        		lv_options_3_0, 
	        		"Options", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAntlrGrammarAccess().getRulesRuleParserRuleCall_4_0(), currentNode); 
	    }
		lv_rules_4_0=ruleRule		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAntlrGrammarRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"rules",
	        		lv_rules_4_0, 
	        		"Rule", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleOptions
entryRuleOptions returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOptionsRule(), currentNode); }
	 iv_ruleOptions=ruleOptions 
	 { $current=$iv_ruleOptions.current; } 
	 EOF 
;

// Rule Options
ruleOptions returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getOptionsAccess().getOptionsAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOptionsAccess().getOptionsAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'options' 
    {
        createLeafNode(grammarAccess.getOptionsAccess().getOptionsKeyword_1(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getOptionsAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOptionsAccess().getOptionValuesOptionValueParserRuleCall_3_0(), currentNode); 
	    }
		lv_optionValues_3_0=ruleOptionValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOptionsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"optionValues",
	        		lv_optionValues_3_0, 
	        		"OptionValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getOptionsAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleOptionValue
entryRuleOptionValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOptionValueRule(), currentNode); }
	 iv_ruleOptionValue=ruleOptionValue 
	 { $current=$iv_ruleOptionValue.current; } 
	 EOF 
;

// Rule OptionValue
ruleOptionValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_key_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getOptionValueAccess().getKeyIDTerminalRuleCall_0_0(), "key"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOptionValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"key",
	        		lv_key_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getOptionValueAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOptionValueAccess().getValueIdOrIntParserRuleCall_2_0(), currentNode); 
	    }
		lv_value_2_0=ruleIdOrInt		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOptionValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"IdOrInt", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getOptionValueAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleIdOrInt
entryRuleIdOrInt returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIdOrIntRule(), currentNode); } 
	 iv_ruleIdOrInt=ruleIdOrInt 
	 { $current=$iv_ruleIdOrInt.current.getText(); }  
	 EOF 
;

// Rule IdOrInt
ruleIdOrInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getIdOrIntAccess().getIDTerminalRuleCall_0(), null); 
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    createLeafNode(grammarAccess.getIdOrIntAccess().getINTTerminalRuleCall_1(), null); 
    }
)
    ;





// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRuleRule(), currentNode); }
	 iv_ruleRule=ruleRule 
	 { $current=$iv_ruleRule.current; } 
	 EOF 
;

// Rule Rule
ruleRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getRuleAccess().getColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRuleAccess().getBodyAlternativesParserRuleCall_2_0(), currentNode); 
	    }
		lv_body_2_0=ruleAlternatives		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"body",
	        		lv_body_2_0, 
	        		"Alternatives", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getRuleAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleAlternatives
entryRuleAlternatives returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAlternativesRule(), currentNode); }
	 iv_ruleAlternatives=ruleAlternatives 
	 { $current=$iv_ruleAlternatives.current; } 
	 EOF 
;

// Rule Alternatives
ruleAlternatives returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAlternativesAccess().getGroupParserRuleCall_0(), currentNode); 
    }
    this_Group_0=ruleGroup
    { 
        $current = $this_Group_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getAlternativesAccess().getAlternativesGroupsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "groups", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAlternativesAccess().getAlternativesGroupsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'|' 
    {
        createLeafNode(grammarAccess.getAlternativesAccess().getVerticalLineKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAlternativesAccess().getGroupsGroupParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_groups_3_0=ruleGroup		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAlternativesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"groups",
	        		lv_groups_3_0, 
	        		"Group", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+)?)
;





// Entry rule entryRuleGroup
entryRuleGroup returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getGroupRule(), currentNode); }
	 iv_ruleGroup=ruleGroup 
	 { $current=$iv_ruleGroup.current; } 
	 EOF 
;

// Rule Group
ruleGroup returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getGroupAccess().getAtomParserRuleCall_0(), currentNode); 
    }
    this_Atom_0=ruleAtom
    { 
        $current = $this_Atom_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getGroupAccess().getGroupElementsAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "elements", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getGroupAccess().getGroupElementsAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGroupAccess().getElementsAtomParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_elements_2_0=ruleAtom		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elements",
	        		lv_elements_2_0, 
	        		"Atom", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)?)
;





// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAtomRule(), currentNode); }
	 iv_ruleAtom=ruleAtom 
	 { $current=$iv_ruleAtom.current; } 
	 EOF 
;

// Rule Atom
ruleAtom returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getOtherElementParserRuleCall_0_0(), currentNode); 
    }
    this_OtherElement_0=ruleOtherElement
    { 
        $current = $this_OtherElement_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getAtomAccess().getElementWithCardinalityElementAction_0_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "element", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAtomAccess().getElementWithCardinalityElementAction_0_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_cardinality_2_1=	'+' 
    {
        createLeafNode(grammarAccess.getAtomAccess().getCardinalityPlusSignKeyword_0_1_1_0_0(), "cardinality"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAtomRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "cardinality", lv_cardinality_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_cardinality_2_2=	'*' 
    {
        createLeafNode(grammarAccess.getAtomAccess().getCardinalityAsteriskKeyword_0_1_1_0_1(), "cardinality"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAtomRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "cardinality", lv_cardinality_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_cardinality_2_3=	'?' 
    {
        createLeafNode(grammarAccess.getAtomAccess().getCardinalityQuestionMarkKeyword_0_1_1_0_2(), "cardinality"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAtomRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "cardinality", lv_cardinality_2_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))?)
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getRuleOptionsParserRuleCall_1(), currentNode); 
    }
    this_RuleOptions_3=ruleRuleOptions
    { 
        $current = $this_RuleOptions_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleOtherElement
entryRuleOtherElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOtherElementRule(), currentNode); }
	 iv_ruleOtherElement=ruleOtherElement 
	 { $current=$iv_ruleOtherElement.current; } 
	 EOF 
;

// Rule OtherElement
ruleOtherElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
    { 
        temp=factory.create(grammarAccess.getOtherElementAccess().getNegatedElementAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOtherElementAccess().getNegatedElementAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'~' 
    {
        createLeafNode(grammarAccess.getOtherElementAccess().getTildeKeyword_0_1(), null); 
    }
(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOtherElementAccess().getElementParenthesizedParserRuleCall_0_2_0_0(), currentNode); 
	    }
		lv_element_2_1=ruleParenthesized		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOtherElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"element",
	        		lv_element_2_1, 
	        		"Parenthesized", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getOtherElementAccess().getElementLiteralParserRuleCall_0_2_0_1(), currentNode); 
	    }
		lv_element_2_2=ruleLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOtherElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"element",
	        		lv_element_2_2, 
	        		"Literal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getOtherElementAccess().getParenthesizedParserRuleCall_1(), currentNode); 
    }
    this_Parenthesized_3=ruleParenthesized
    { 
        $current = $this_Parenthesized_3.current; 
        currentNode = currentNode.getParent();
    }

    |(
    { 
        currentNode=createCompositeNode(grammarAccess.getOtherElementAccess().getLiteralParserRuleCall_2_0(), currentNode); 
    }
    this_Literal_4=ruleLiteral
    { 
        $current = $this_Literal_4.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getOtherElementAccess().getUntilElementLeftAction_2_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOtherElementAccess().getUntilElementLeftAction_2_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'..' 
    {
        createLeafNode(grammarAccess.getOtherElementAccess().getFullStopFullStopKeyword_2_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOtherElementAccess().getRightLiteralParserRuleCall_2_1_2_0(), currentNode); 
	    }
		lv_right_7_0=ruleLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOtherElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_7_0, 
	        		"Literal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?))
;





// Entry rule entryRuleEmptyParenthesis
entryRuleEmptyParenthesis returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEmptyParenthesisRule(), currentNode); } 
	 iv_ruleEmptyParenthesis=ruleEmptyParenthesis 
	 { $current=$iv_ruleEmptyParenthesis.current.getText(); }  
	 EOF 
;

// Rule EmptyParenthesis
ruleEmptyParenthesis returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='(' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEmptyParenthesisAccess().getLeftParenthesisKeyword_0(), null); 
    }

	kw=')' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEmptyParenthesisAccess().getRightParenthesisKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleParenthesized
entryRuleParenthesized returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParenthesizedRule(), currentNode); }
	 iv_ruleParenthesized=ruleParenthesized 
	 { $current=$iv_ruleParenthesized.current; } 
	 EOF 
;

// Rule Parenthesized
ruleParenthesized returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'(' 
    {
        createLeafNode(grammarAccess.getParenthesizedAccess().getLeftParenthesisKeyword_0(), null); 
    }
(
    { 
        currentNode=createCompositeNode(grammarAccess.getParenthesizedAccess().getEmptyParenthesisParserRuleCall_1(), currentNode); 
    }
ruleEmptyParenthesis
    { 
        currentNode = currentNode.getParent();
    }
)*
    { 
        currentNode=createCompositeNode(grammarAccess.getParenthesizedAccess().getAlternativesParserRuleCall_2(), currentNode); 
    }
    this_Alternatives_2=ruleAlternatives
    { 
        $current = $this_Alternatives_2.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getParenthesizedAccess().getRightParenthesisKeyword_3(), null); 
    }
(
    { 
        currentNode=createCompositeNode(grammarAccess.getParenthesizedAccess().getEmptyParenthesisParserRuleCall_4(), currentNode); 
    }
ruleEmptyParenthesis
    { 
        currentNode = currentNode.getParent();
    }
)*)
;





// Entry rule entryRuleRuleOptions
entryRuleRuleOptions returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRuleOptionsRule(), currentNode); }
	 iv_ruleRuleOptions=ruleRuleOptions 
	 { $current=$iv_ruleRuleOptions.current; } 
	 EOF 
;

// Rule RuleOptions
ruleRuleOptions returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRuleOptionsAccess().getOptionsOptionsParserRuleCall_0_0(), currentNode); 
	    }
		lv_options_0_0=ruleOptions		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRuleOptionsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"options",
	        		lv_options_0_0, 
	        		"Options", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getRuleOptionsAccess().getColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRuleOptionsAccess().getElementAtomParserRuleCall_2_0(), currentNode); 
	    }
		lv_element_2_0=ruleAtom		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRuleOptionsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"element",
	        		lv_element_2_0, 
	        		"Atom", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralRule(), currentNode); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getRuleCallParserRuleCall_0(), currentNode); 
    }
    this_RuleCall_0=ruleRuleCall
    { 
        $current = $this_RuleCall_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getKeywordParserRuleCall_1(), currentNode); 
    }
    this_Keyword_1=ruleKeyword
    { 
        $current = $this_Keyword_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getWildcardParserRuleCall_2(), currentNode); 
    }
    this_Wildcard_2=ruleWildcard
    { 
        $current = $this_Wildcard_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleRuleCall
entryRuleRuleCall returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRuleCallRule(), currentNode); }
	 iv_ruleRuleCall=ruleRuleCall 
	 { $current=$iv_ruleRuleCall.current; } 
	 EOF 
;

// Rule RuleCall
ruleRuleCall returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_rule_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getRuleCallAccess().getRuleIDTerminalRuleCall_0_0(), "rule"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRuleCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rule",
	        		lv_rule_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
    { 
        currentNode=createCompositeNode(grammarAccess.getRuleCallAccess().getEmptyParenthesisParserRuleCall_1(), currentNode); 
    }
ruleEmptyParenthesis
    { 
        currentNode = currentNode.getParent();
    }
)*)
;





// Entry rule entryRuleKeyword
entryRuleKeyword returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getKeywordRule(), currentNode); }
	 iv_ruleKeyword=ruleKeyword 
	 { $current=$iv_ruleKeyword.current; } 
	 EOF 
;

// Rule Keyword
ruleKeyword returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_value_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getKeywordAccess().getValueSTRINGTerminalRuleCall_0_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKeywordRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
    { 
        currentNode=createCompositeNode(grammarAccess.getKeywordAccess().getEmptyParenthesisParserRuleCall_1(), currentNode); 
    }
ruleEmptyParenthesis
    { 
        currentNode = currentNode.getParent();
    }
)*)
;





// Entry rule entryRuleWildcard
entryRuleWildcard returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWildcardRule(), currentNode); }
	 iv_ruleWildcard=ruleWildcard 
	 { $current=$iv_ruleWildcard.current; } 
	 EOF 
;

// Rule Wildcard
ruleWildcard returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getWildcardAccess().getWildcardAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getWildcardAccess().getWildcardAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'.' 
    {
        createLeafNode(grammarAccess.getWildcardAccess().getFullStopKeyword_1(), null); 
    }
(
    { 
        currentNode=createCompositeNode(grammarAccess.getWildcardAccess().getEmptyParenthesisParserRuleCall_2(), currentNode); 
    }
ruleEmptyParenthesis
    { 
        currentNode = currentNode.getParent();
    }
)*)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


