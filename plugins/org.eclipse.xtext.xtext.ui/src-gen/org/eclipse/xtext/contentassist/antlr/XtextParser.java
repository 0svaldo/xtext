/*
* generated by Xtext
*/
package org.eclipse.xtext.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.CharStream;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.xtext.services.XtextGrammarAccess;

public class XtextParser extends AbstractContentAssistParser {
	
	@Inject
	private XtextGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.xtext.contentassist.antlr.internal.InternalXtextLexer createLexer(CharStream stream) {
		return new org.eclipse.xtext.contentassist.antlr.internal.InternalXtextLexer(stream);
	}
	
	@Override
	protected org.eclipse.xtext.contentassist.antlr.internal.InternalXtextParser createParser() {
		org.eclipse.xtext.contentassist.antlr.internal.InternalXtextParser result = new org.eclipse.xtext.contentassist.antlr.internal.InternalXtextParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				{
					put(grammarAccess.getAbstractRuleAccess().getAlternatives(), "rule__AbstractRule__Alternatives");
					put(grammarAccess.getAbstractMetamodelDeclarationAccess().getAlternatives(), "rule__AbstractMetamodelDeclaration__Alternatives");
					put(grammarAccess.getAbstractTokenAccess().getAlternatives(), "rule__AbstractToken__Alternatives");
					put(grammarAccess.getAbstractTokenWithCardinalityAccess().getAlternatives_0(), "rule__AbstractTokenWithCardinality__Alternatives_0");
					put(grammarAccess.getAbstractTokenWithCardinalityAccess().getCardinalityAlternatives_1_0(), "rule__AbstractTokenWithCardinality__CardinalityAlternatives_1_0");
					put(grammarAccess.getActionAccess().getOperatorAlternatives_2_2_0(), "rule__Action__OperatorAlternatives_2_2_0");
					put(grammarAccess.getAbstractTerminalAccess().getAlternatives(), "rule__AbstractTerminal__Alternatives");
					put(grammarAccess.getAssignmentAccess().getOperatorAlternatives_1_0(), "rule__Assignment__OperatorAlternatives_1_0");
					put(grammarAccess.getAssignableTerminalAccess().getAlternatives(), "rule__AssignableTerminal__Alternatives");
					put(grammarAccess.getCrossReferenceableTerminalAccess().getAlternatives(), "rule__CrossReferenceableTerminal__Alternatives");
					put(grammarAccess.getTerminalTokenAccess().getCardinalityAlternatives_1_0(), "rule__TerminalToken__CardinalityAlternatives_1_0");
					put(grammarAccess.getTerminalTokenElementAccess().getAlternatives(), "rule__TerminalTokenElement__Alternatives");
					put(grammarAccess.getAbstractNegatedTokenAccess().getAlternatives(), "rule__AbstractNegatedToken__Alternatives");
					put(grammarAccess.getGrammarAccess().getGroup(), "rule__Grammar__Group");
					put(grammarAccess.getGrammarAccess().getGroup_2(), "rule__Grammar__Group_2");
					put(grammarAccess.getGrammarAccess().getGroup_2_2(), "rule__Grammar__Group_2_2");
					put(grammarAccess.getGrammarAccess().getGroup_3(), "rule__Grammar__Group_3");
					put(grammarAccess.getGrammarAccess().getGroup_3_2(), "rule__Grammar__Group_3_2");
					put(grammarAccess.getGrammarAccess().getGroup_3_2_1(), "rule__Grammar__Group_3_2_1");
					put(grammarAccess.getGrammarIDAccess().getGroup(), "rule__GrammarID__Group");
					put(grammarAccess.getGrammarIDAccess().getGroup_1(), "rule__GrammarID__Group_1");
					put(grammarAccess.getGeneratedMetamodelAccess().getGroup(), "rule__GeneratedMetamodel__Group");
					put(grammarAccess.getGeneratedMetamodelAccess().getGroup_3(), "rule__GeneratedMetamodel__Group_3");
					put(grammarAccess.getReferencedMetamodelAccess().getGroup(), "rule__ReferencedMetamodel__Group");
					put(grammarAccess.getReferencedMetamodelAccess().getGroup_2(), "rule__ReferencedMetamodel__Group_2");
					put(grammarAccess.getParserRuleAccess().getGroup(), "rule__ParserRule__Group");
					put(grammarAccess.getParserRuleAccess().getGroup_1(), "rule__ParserRule__Group_1");
					put(grammarAccess.getParserRuleAccess().getGroup_2(), "rule__ParserRule__Group_2");
					put(grammarAccess.getParserRuleAccess().getGroup_2_2(), "rule__ParserRule__Group_2_2");
					put(grammarAccess.getParserRuleAccess().getGroup_2_2_1(), "rule__ParserRule__Group_2_2_1");
					put(grammarAccess.getTypeRefAccess().getGroup(), "rule__TypeRef__Group");
					put(grammarAccess.getTypeRefAccess().getGroup_0(), "rule__TypeRef__Group_0");
					put(grammarAccess.getAlternativesAccess().getGroup(), "rule__Alternatives__Group");
					put(grammarAccess.getAlternativesAccess().getGroup_1(), "rule__Alternatives__Group_1");
					put(grammarAccess.getAlternativesAccess().getGroup_1_1(), "rule__Alternatives__Group_1_1");
					put(grammarAccess.getGroupAccess().getGroup(), "rule__Group__Group");
					put(grammarAccess.getGroupAccess().getGroup_1(), "rule__Group__Group_1");
					put(grammarAccess.getAbstractTokenWithCardinalityAccess().getGroup(), "rule__AbstractTokenWithCardinality__Group");
					put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group");
					put(grammarAccess.getActionAccess().getGroup_2(), "rule__Action__Group_2");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group");
					put(grammarAccess.getParenthesizedAssignableElementAccess().getGroup(), "rule__ParenthesizedAssignableElement__Group");
					put(grammarAccess.getAssignableAlternativesAccess().getGroup(), "rule__AssignableAlternatives__Group");
					put(grammarAccess.getAssignableAlternativesAccess().getGroup_1(), "rule__AssignableAlternatives__Group_1");
					put(grammarAccess.getAssignableAlternativesAccess().getGroup_1_1(), "rule__AssignableAlternatives__Group_1_1");
					put(grammarAccess.getCrossReferenceAccess().getGroup(), "rule__CrossReference__Group");
					put(grammarAccess.getCrossReferenceAccess().getGroup_2(), "rule__CrossReference__Group_2");
					put(grammarAccess.getParenthesizedCrossReferenceableElementAccess().getGroup(), "rule__ParenthesizedCrossReferenceableElement__Group");
					put(grammarAccess.getCrossReferenceableAlternativesAccess().getGroup(), "rule__CrossReferenceableAlternatives__Group");
					put(grammarAccess.getCrossReferenceableAlternativesAccess().getGroup_1(), "rule__CrossReferenceableAlternatives__Group_1");
					put(grammarAccess.getCrossReferenceableAlternativesAccess().getGroup_1_1(), "rule__CrossReferenceableAlternatives__Group_1_1");
					put(grammarAccess.getParenthesizedElementAccess().getGroup(), "rule__ParenthesizedElement__Group");
					put(grammarAccess.getTerminalRuleAccess().getGroup(), "rule__TerminalRule__Group");
					put(grammarAccess.getTerminalRuleAccess().getGroup_2(), "rule__TerminalRule__Group_2");
					put(grammarAccess.getTerminalAlternativesAccess().getGroup(), "rule__TerminalAlternatives__Group");
					put(grammarAccess.getTerminalAlternativesAccess().getGroup_1(), "rule__TerminalAlternatives__Group_1");
					put(grammarAccess.getTerminalAlternativesAccess().getGroup_1_1(), "rule__TerminalAlternatives__Group_1_1");
					put(grammarAccess.getTerminalGroupAccess().getGroup(), "rule__TerminalGroup__Group");
					put(grammarAccess.getTerminalGroupAccess().getGroup_1(), "rule__TerminalGroup__Group_1");
					put(grammarAccess.getTerminalTokenAccess().getGroup(), "rule__TerminalToken__Group");
					put(grammarAccess.getParenthesizedTerminalElementAccess().getGroup(), "rule__ParenthesizedTerminalElement__Group");
					put(grammarAccess.getNegatedTokenAccess().getGroup(), "rule__NegatedToken__Group");
					put(grammarAccess.getUntilTokenAccess().getGroup(), "rule__UntilToken__Group");
					put(grammarAccess.getWildcardAccess().getGroup(), "rule__Wildcard__Group");
					put(grammarAccess.getCharacterRangeAccess().getGroup(), "rule__CharacterRange__Group");
					put(grammarAccess.getCharacterRangeAccess().getGroup_1(), "rule__CharacterRange__Group_1");
					put(grammarAccess.getEnumRuleAccess().getGroup(), "rule__EnumRule__Group");
					put(grammarAccess.getEnumRuleAccess().getGroup_2(), "rule__EnumRule__Group_2");
					put(grammarAccess.getEnumLiteralsAccess().getGroup(), "rule__EnumLiterals__Group");
					put(grammarAccess.getEnumLiteralsAccess().getGroup_1(), "rule__EnumLiterals__Group_1");
					put(grammarAccess.getEnumLiteralsAccess().getGroup_1_1(), "rule__EnumLiterals__Group_1_1");
					put(grammarAccess.getEnumLiteralDeclarationAccess().getGroup(), "rule__EnumLiteralDeclaration__Group");
					put(grammarAccess.getEnumLiteralDeclarationAccess().getGroup_1(), "rule__EnumLiteralDeclaration__Group_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.xtext.contentassist.antlr.internal.InternalXtextParser typedParser = (org.eclipse.xtext.contentassist.antlr.internal.InternalXtextParser) parser;
			typedParser.entryRuleGrammar();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public XtextGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(XtextGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
