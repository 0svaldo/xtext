/*
Generated with Xtext
*/

import xtext;

import org::eclipse::emf::ecore;
import org::eclipse::jface::text::contentassist;
import org::eclipse::xtext::crossref;
import org::eclipse::xtext::ui::common::editor::contentassist;
import org::eclipse::xtext::ui::common::xtend::contentassist;

import xtext;
import ecore;

extension org::eclipse::xtext::ui::common::xtend::contentassist::ContentAssist reexport;
extension org::eclipse::xtend::util::stdlib::io;

/**
 * Represents a generated, default implementation of interface {@link IProposalProvider}.
 * 
 * @see org.eclipse.xtext.ui.common.editor.contentassist.IProposalProvider
 */

	 
List[ICompletionProposal] completeGrammarAbstract(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGrammarAbstract feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeGrammarIdElements(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGrammarIdElements feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "GrammarIdElements", contentAssistContext) };

	 
List[ICompletionProposal] completeGrammarSuperGrammarIdElements(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGrammarSuperGrammarIdElements feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "GrammarSuperGrammarIdElements", contentAssistContext) };

	 
List[ICompletionProposal] completeGrammarMetamodelDeclarations(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGrammarMetamodelDeclarations feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeGrammarRules(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGrammarRules feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeGeneratedMetamodelName(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGeneratedMetamodelName feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "GeneratedMetamodelName", contentAssistContext) };
	 
List[ICompletionProposal] completeGeneratedMetamodelEPackage(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGeneratedMetamodelEPackage feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);
	 
List[ICompletionProposal] completeGeneratedMetamodelAlias(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGeneratedMetamodelAlias feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "GeneratedMetamodelAlias", contentAssistContext) };
	 
List[ICompletionProposal] completeReferencedMetamodelEPackage(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeReferencedMetamodelEPackage feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);
	 
List[ICompletionProposal] completeReferencedMetamodelAlias(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeReferencedMetamodelAlias feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "ReferencedMetamodelAlias", contentAssistContext) };
	 
List[ICompletionProposal] completeLexerRuleName(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeLexerRuleName feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "LexerRuleName", contentAssistContext) };
	 
List[ICompletionProposal] completeLexerRuleType(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeLexerRuleType feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeLexerRuleBody(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeLexerRuleBody feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{ newProposal(assignment, "\"LexerRuleBody\"", contentAssistContext) };
	 
List[ICompletionProposal] completeParserRuleName(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeParserRuleName feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "ParserRuleName", contentAssistContext) };
	 
List[ICompletionProposal] completeParserRuleType(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeParserRuleType feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeParserRuleDefinesHiddenTokens(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeParserRuleDefinesHiddenTokens feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeParserRuleHiddenTokens(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeParserRuleHiddenTokens feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);

	 
List[ICompletionProposal] completeParserRuleAlternatives(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeParserRuleAlternatives feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeTerminalRuleTerminal(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTerminalRuleTerminal feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeTerminalRuleName(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTerminalRuleName feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "TerminalRuleName", contentAssistContext) };
	 
List[ICompletionProposal] completeTerminalRuleType(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTerminalRuleType feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeTerminalRuleAlternatives(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTerminalRuleAlternatives feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeTypeRefMetamodel(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTypeRefMetamodel feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);
	 
List[ICompletionProposal] completeTypeRefType(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTypeRefType feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);
	 
List[ICompletionProposal] completeAlternativesGroups(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeAlternativesGroups feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeTerminalAlternativesGroups(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTerminalAlternativesGroups feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeGroupAbstractTokens(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeGroupAbstractTokens feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeTerminalGroupAbstractTokens(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTerminalGroupAbstractTokens feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeAbstractTokenCardinality(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeAbstractTokenCardinality feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeTerminalTokenCardinality(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeTerminalTokenCardinality feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeAssignmentFeature(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeAssignmentFeature feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "AssignmentFeature", contentAssistContext) };
	 
List[ICompletionProposal] completeAssignmentOperator(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeAssignmentOperator feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeAssignmentTerminal(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeAssignmentTerminal feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeActionTypeName(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeActionTypeName feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeActionFeature(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeActionFeature feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
    { newProposal(assignment, "ActionFeature", contentAssistContext) };
	 
List[ICompletionProposal] completeActionOperator(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeActionOperator feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeNegatedTokenTerminal(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeNegatedTokenTerminal feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeUpToTokenTerminal(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeUpToTokenTerminal feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeWildcardIsWildcard(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeWildcardIsWildcard feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeCharacterRangeRight(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeCharacterRangeRight feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeCrossReferenceType(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeCrossReferenceType feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{};
	 
List[ICompletionProposal] completeCrossReferenceRule(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeCrossReferenceRule feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);
	 
List[ICompletionProposal] completeKeywordValue(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeKeywordValue feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	{ newProposal(assignment, "\"KeywordValue\"", contentAssistContext) };
	 
List[ICompletionProposal] completeRuleCallRule(Assignment assignment, IContentAssistContext contentAssistContext) :
	debug("completeRuleCallRule feature '" + assignment.feature + "' terminal '"
					+ assignment.terminal + "' cardinality '" + assignment.cardinality + "' and prefix '"
					+ contentAssistContext.matchString.trim() + "'") ->
	lookupCrossReference(((CrossReference)assignment.terminal), contentAssistContext);
	 	  
List[ICompletionProposal] complete(RuleCall ruleCall, IContentAssistContext contentAssistContext) :
	{};

/*
	// TODO 
    @Override
	protected String getDefaultImageFilePath() {
		return "icons/editor.gif";
	}

	@Override
	protected String getPluginId() {
		return UI_PLUGIN_ID;
	}
*/
