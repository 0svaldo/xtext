package org.eclipse.xtext.xtext.wizard;

import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import org.eclipse.xtend.lib.annotations.FinalFieldsConstructor;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xtext.wizard.ExternalDependency;
import org.eclipse.xtext.xtext.wizard.GeneratedFile;
import org.eclipse.xtext.xtext.wizard.GradleBuildFile;
import org.eclipse.xtext.xtext.wizard.IdeProjectDescriptor;
import org.eclipse.xtext.xtext.wizard.LanguageDescriptor;
import org.eclipse.xtext.xtext.wizard.Outlet;
import org.eclipse.xtext.xtext.wizard.PlainTextFile;
import org.eclipse.xtext.xtext.wizard.PomFile;
import org.eclipse.xtext.xtext.wizard.ProjectDescriptor;
import org.eclipse.xtext.xtext.wizard.RuntimeProjectDescriptor;
import org.eclipse.xtext.xtext.wizard.Scope;
import org.eclipse.xtext.xtext.wizard.WizardConfiguration;

@FinalFieldsConstructor
@SuppressWarnings("all")
public class WebProjectDescriptor extends ProjectDescriptor {
  @Override
  public Set<? extends ProjectDescriptor> getUpstreamProjects() {
    WizardConfiguration _config = this.getConfig();
    RuntimeProjectDescriptor _runtimeProject = _config.getRuntimeProject();
    WizardConfiguration _config_1 = this.getConfig();
    IdeProjectDescriptor _ideProject = _config_1.getIdeProject();
    return Collections.<ProjectDescriptor>unmodifiableSet(CollectionLiterals.<ProjectDescriptor>newHashSet(_runtimeProject, _ideProject));
  }
  
  @Override
  public String getNameQualifier() {
    return ".web";
  }
  
  public String baseWebPackagePath() {
    WizardConfiguration _config = this.getConfig();
    LanguageDescriptor _language = _config.getLanguage();
    String _basePackagePath = _language.getBasePackagePath();
    String _plus = (_basePackagePath + "/");
    return (_plus + "web");
  }
  
  @Override
  public boolean isEclipsePluginProject() {
    return false;
  }
  
  @Override
  public Iterable<? extends GeneratedFile> getFiles() {
    ArrayList<GeneratedFile> _xblockexpression = null;
    {
      final ArrayList<GeneratedFile> files = CollectionLiterals.<GeneratedFile>newArrayList();
      Iterable<? extends GeneratedFile> _files = super.getFiles();
      Iterables.<GeneratedFile>addAll(files, _files);
      CharSequence _index = this.index();
      PlainTextFile _file = this.file(Outlet.WEBAPP, "index.html", _index);
      files.add(_file);
      CharSequence _style = this.style();
      PlainTextFile _file_1 = this.file(Outlet.WEBAPP, "style.css", _style);
      files.add(_file_1);
      StringConcatenation _builder = new StringConcatenation();
      String _baseWebPackagePath = this.baseWebPackagePath();
      _builder.append(_baseWebPackagePath, "");
      _builder.append("/ServerLauncher.xtend");
      CharSequence _serverLauncher = this.serverLauncher();
      PlainTextFile _file_2 = this.file(Outlet.MAIN_JAVA, _builder.toString(), _serverLauncher);
      files.add(_file_2);
      StringConcatenation _builder_1 = new StringConcatenation();
      String _baseWebPackagePath_1 = this.baseWebPackagePath();
      _builder_1.append(_baseWebPackagePath_1, "");
      _builder_1.append("/");
      WizardConfiguration _config = this.getConfig();
      LanguageDescriptor _language = _config.getLanguage();
      String _simpleName = _language.getSimpleName();
      _builder_1.append(_simpleName, "");
      _builder_1.append("XtextServlet.xtend");
      CharSequence _servlet = this.servlet();
      PlainTextFile _file_3 = this.file(Outlet.MAIN_JAVA, _builder_1.toString(), _servlet);
      files.add(_file_3);
      StringConcatenation _builder_2 = new StringConcatenation();
      String _baseWebPackagePath_2 = this.baseWebPackagePath();
      _builder_2.append(_baseWebPackagePath_2, "");
      _builder_2.append("/");
      WizardConfiguration _config_1 = this.getConfig();
      LanguageDescriptor _language_1 = _config_1.getLanguage();
      String _simpleName_1 = _language_1.getSimpleName();
      _builder_2.append(_simpleName_1, "");
      _builder_2.append("WebModule.xtend");
      CharSequence _module = this.module();
      PlainTextFile _file_4 = this.file(Outlet.MAIN_JAVA, _builder_2.toString(), _module);
      files.add(_file_4);
      _xblockexpression = files;
    }
    return _xblockexpression;
  }
  
  @Override
  public Set<ExternalDependency> getExternalDependencies() {
    HashSet<ExternalDependency> _xblockexpression = null;
    {
      final HashSet<ExternalDependency> deps = CollectionLiterals.<ExternalDependency>newHashSet();
      Set<ExternalDependency> _externalDependencies = super.getExternalDependencies();
      Iterables.<ExternalDependency>addAll(deps, _externalDependencies);
      ExternalDependency _createXtextDependency = ExternalDependency.createXtextDependency("org.eclipse.xtext.web.servlet");
      deps.add(_createXtextDependency);
      ExternalDependency _createMavenDependency = ExternalDependency.createMavenDependency("org.eclipse.xtend:org.eclipse.xtend.lib:${xtextVersion}");
      deps.add(_createMavenDependency);
      ExternalDependency _createMavenDependency_1 = ExternalDependency.createMavenDependency("org.eclipse.xtext:org.eclipse.xtext.web.servlet:${xtextVersion}");
      deps.add(_createMavenDependency_1);
      ExternalDependency _createMavenDependency_2 = ExternalDependency.createMavenDependency("org.webjars:requirejs:2.1.17");
      deps.add(_createMavenDependency_2);
      ExternalDependency _createMavenDependency_3 = ExternalDependency.createMavenDependency("org.webjars:requirejs-text:2.0.10-3");
      deps.add(_createMavenDependency_3);
      ExternalDependency _createMavenDependency_4 = ExternalDependency.createMavenDependency("org.webjars:jquery:2.1.4");
      deps.add(_createMavenDependency_4);
      ExternalDependency _createMavenDependency_5 = ExternalDependency.createMavenDependency("org.eclipse.jetty:jetty-annotations:9.2.11.v20150529");
      final Procedure1<ExternalDependency> _function = new Procedure1<ExternalDependency>() {
        @Override
        public void apply(final ExternalDependency it) {
          ExternalDependency.MavenCoordinates _maven = it.getMaven();
          _maven.setScope(Scope.PROVIDED);
        }
      };
      ExternalDependency _doubleArrow = ObjectExtensions.<ExternalDependency>operator_doubleArrow(_createMavenDependency_5, _function);
      deps.add(_doubleArrow);
      ExternalDependency _createMavenDependency_6 = ExternalDependency.createMavenDependency("org.slf4j:slf4j-log4j12:1.7.12");
      final Procedure1<ExternalDependency> _function_1 = new Procedure1<ExternalDependency>() {
        @Override
        public void apply(final ExternalDependency it) {
          ExternalDependency.MavenCoordinates _maven = it.getMaven();
          _maven.setScope(Scope.PROVIDED);
        }
      };
      ExternalDependency _doubleArrow_1 = ObjectExtensions.<ExternalDependency>operator_doubleArrow(_createMavenDependency_6, _function_1);
      deps.add(_doubleArrow_1);
      _xblockexpression = deps;
    }
    return _xblockexpression;
  }
  
  public CharSequence index() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Strict//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">");
    _builder.newLine();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<meta http-equiv=\"Content-Language\" content=\"en-us\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<title>Example Web Editor</title>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<link rel=\"stylesheet\" type=\"text/css\" href=\"xtext/");
    WizardConfiguration _config = this.getConfig();
    String _xtextVersion = _config.getXtextVersion();
    _builder.append(_xtextVersion, "\t");
    _builder.append("/xtext-orion.css\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<script src=\"webjars/requirejs/2.1.17/require.min.js\"></script>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<script type=\"text/javascript\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("require.config({");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("paths: {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("\"text\": \"webjars/requirejs-text/2.0.10-3/text\",");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("\"jquery\": \"webjars/jquery/2.1.4/jquery.min\",");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("\"xtext/xtext-orion\": \"xtext/");
    WizardConfiguration _config_1 = this.getConfig();
    String _xtextVersion_1 = _config_1.getXtextVersion();
    _builder.append(_xtextVersion_1, "\t\t\t\t");
    _builder.append("/xtext-orion\"");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("require([\"xtext/xtext-orion\"], function(xtext) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("xtext.createEditor({syntaxDefinition: \"xtext/generated/");
    WizardConfiguration _config_2 = this.getConfig();
    LanguageDescriptor _language = _config_2.getLanguage();
    LanguageDescriptor.FileExtensions _fileExtensions = _language.getFileExtensions();
    String _head = IterableExtensions.<String>head(_fileExtensions);
    _builder.append(_head, "\t\t\t");
    _builder.append("-syntax\"});");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</script>");
    _builder.newLine();
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("<body>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("<div class=\"container\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<div class=\"header\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<h1>Example ");
    WizardConfiguration _config_3 = this.getConfig();
    LanguageDescriptor _language_1 = _config_3.getLanguage();
    String _simpleName = _language_1.getSimpleName();
    _builder.append(_simpleName, "\t\t");
    _builder.append(" Web Editor</h1>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<div class=\"content\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<div id=\"xtext-editor\" data-editor-xtext-lang=\"");
    WizardConfiguration _config_4 = this.getConfig();
    LanguageDescriptor _language_2 = _config_4.getLanguage();
    LanguageDescriptor.FileExtensions _fileExtensions_1 = _language_2.getFileExtensions();
    String _head_1 = IterableExtensions.<String>head(_fileExtensions_1);
    _builder.append(_head_1, "\t\t");
    _builder.append("\"></div>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence style() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("body {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("width: 100%;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("height: 100%;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("overflow: hidden;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("font: 16px Helvetica,sans-serif;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("a {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("color: #22a;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("text-decoration: none;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("a:hover {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("text-decoration: underline;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".container {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("display: block;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("position: absolute;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("top: 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("bottom: 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("left: 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("right: 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("margin: 20px;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".header {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("display: block;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("position: absolute;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("background-color: #e8e8e8;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("top: 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("left: 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("right: 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("height: 60px;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("padding: 10px;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".content {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("display: block;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("position: absolute;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("top: 90px;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("bottom: 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("left: 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("width: 640px;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#xtext-editor {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("display: block;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("position: absolute;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("top: 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("bottom: 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("left: 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("right: 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("padding: 4px;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("border: 1px solid #aaa;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".contentassist .proposal-default {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("color: #888;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".contentassist .proposal-name {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("color: #000;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("padding-right: 12px;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/************* Examples for custom icons *************/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/* For all elements of type Greeting or its subtypes */ ");
    _builder.newLine();
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(".Greeting-icon {");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("background-image: url(\'images/Greeting.gif\');");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/* Only in hovers */ ");
    _builder.newLine();
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(".hover .Greeting-icon {");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("background-image: url(\'images/Greeting.gif\');");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence serverLauncher() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    WizardConfiguration _config = this.getConfig();
    LanguageDescriptor _language = _config.getLanguage();
    String _basePackage = _language.getBasePackage();
    _builder.append(_basePackage, "");
    _builder.append(".web");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.net.InetSocketAddress");
    _builder.newLine();
    _builder.append("import org.eclipse.jetty.annotations.AnnotationConfiguration");
    _builder.newLine();
    _builder.append("import org.eclipse.jetty.server.Server");
    _builder.newLine();
    _builder.append("import org.eclipse.jetty.util.log.Slf4jLog");
    _builder.newLine();
    _builder.append("import org.eclipse.jetty.webapp.MetaInfConfiguration");
    _builder.newLine();
    _builder.append("import org.eclipse.jetty.webapp.WebAppContext");
    _builder.newLine();
    _builder.append("import org.eclipse.jetty.webapp.WebInfConfiguration");
    _builder.newLine();
    _builder.append("import org.eclipse.jetty.webapp.WebXmlConfiguration");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ServerLauncher {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val server = new Server(new InetSocketAddress(\'localhost\', 8080))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("server.handler = new WebAppContext => [");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("resourceBase = \'src/main/webapp\'");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("welcomeFiles = #[\"index.html\"]");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("contextPath = \"/\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("configurations = #[");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("new AnnotationConfiguration,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("new WebXmlConfiguration,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("new WebInfConfiguration,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("new MetaInfConfiguration");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("setAttribute(WebInfConfiguration.CONTAINER_JAR_PATTERN, \".*org\\\\.eclipse\\\\.xtext\\\\.web.*|.*");
    String _name = this.getName();
    String _replaceAll = _name.replaceAll("\\.", "\\\\\\\\.");
    _builder.append(_replaceAll, "\t\t\t");
    _builder.append(".*|.*requirejs.*|.*jquery.*\")");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val log = new Slf4jLog(ServerLauncher.name)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("server.start");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("log.info(\'Press enter to stop the server...\')");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("new Thread[");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("val key = System.in.read");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("server.stop");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (key == -1)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("log.warn(\'The standard input stream is empty.\')");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("].start");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("server.join");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception exception) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("log.warn(exception.message)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.exit(1)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence servlet() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    WizardConfiguration _config = this.getConfig();
    LanguageDescriptor _language = _config.getLanguage();
    String _basePackage = _language.getBasePackage();
    _builder.append(_basePackage, "");
    _builder.append(".web");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import com.google.inject.Guice");
    _builder.newLine();
    _builder.append("import com.google.inject.util.Modules");
    _builder.newLine();
    _builder.append("import java.util.concurrent.ExecutorService");
    _builder.newLine();
    _builder.append("import java.util.concurrent.Executors");
    _builder.newLine();
    _builder.append("import javax.servlet.annotation.WebServlet");
    _builder.newLine();
    _builder.append("import ");
    WizardConfiguration _config_1 = this.getConfig();
    LanguageDescriptor _language_1 = _config_1.getLanguage();
    String _basePackage_1 = _language_1.getBasePackage();
    _builder.append(_basePackage_1, "");
    _builder.append(".");
    WizardConfiguration _config_2 = this.getConfig();
    LanguageDescriptor _language_2 = _config_2.getLanguage();
    String _simpleName = _language_2.getSimpleName();
    _builder.append(_simpleName, "");
    _builder.append("RuntimeModule");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    WizardConfiguration _config_3 = this.getConfig();
    LanguageDescriptor _language_3 = _config_3.getLanguage();
    String _basePackage_2 = _language_3.getBasePackage();
    _builder.append(_basePackage_2, "");
    _builder.append(".");
    WizardConfiguration _config_4 = this.getConfig();
    LanguageDescriptor _language_4 = _config_4.getLanguage();
    String _simpleName_1 = _language_4.getSimpleName();
    _builder.append(_simpleName_1, "");
    _builder.append("StandaloneSetup");
    _builder.newLineIfNotEmpty();
    _builder.append("import org.eclipse.xtext.web.servlet.XtextServlet");
    _builder.newLine();
    _builder.append("import com.google.inject.Module");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@WebServlet(name = \"Xtext Services\", urlPatterns = \"/xtext-service/*\")");
    _builder.newLine();
    _builder.append("class ");
    WizardConfiguration _config_5 = this.getConfig();
    LanguageDescriptor _language_5 = _config_5.getLanguage();
    String _simpleName_2 = _language_5.getSimpleName();
    _builder.append(_simpleName_2, "");
    _builder.append("XtextServlet extends XtextServlet {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ExecutorService executorService");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override init() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super.init()");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("executorService = Executors.newCachedThreadPool");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("new ");
    WizardConfiguration _config_6 = this.getConfig();
    LanguageDescriptor _language_6 = _config_6.getLanguage();
    String _simpleName_3 = _language_6.getSimpleName();
    _builder.append(_simpleName_3, "\t\t");
    _builder.append("StandaloneSetup {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("override createInjector() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("val runtimeModule = new ");
    WizardConfiguration _config_7 = this.getConfig();
    LanguageDescriptor _language_7 = _config_7.getLanguage();
    String _simpleName_4 = _language_7.getSimpleName();
    _builder.append(_simpleName_4, "\t\t\t\t");
    _builder.append("RuntimeModule as Module");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("val webModule = new ");
    WizardConfiguration _config_8 = this.getConfig();
    LanguageDescriptor _language_8 = _config_8.getLanguage();
    String _simpleName_5 = _language_8.getSimpleName();
    _builder.append(_simpleName_5, "\t\t\t\t");
    _builder.append("WebModule(executorService)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("return Guice.createInjector(Modules.override(runtimeModule).with(webModule))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}.createInjectorAndDoEMFRegistration");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override destroy() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (executorService !== null)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("executorService.shutdown()");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("executorService = null");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super.destroy()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence module() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    WizardConfiguration _config = this.getConfig();
    LanguageDescriptor _language = _config.getLanguage();
    String _basePackage = _language.getBasePackage();
    _builder.append(_basePackage, "");
    _builder.append(".web");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import com.google.inject.Binder");
    _builder.newLine();
    _builder.append("import com.google.inject.name.Names");
    _builder.newLine();
    _builder.append("import java.util.concurrent.ExecutorService");
    _builder.newLine();
    _builder.append("import org.eclipse.xtend.lib.annotations.Accessors");
    _builder.newLine();
    _builder.append("import org.eclipse.xtend.lib.annotations.FinalFieldsConstructor");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.ide.LexerIdeBindings");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.ide.editor.contentassist.antlr.IContentAssistParser");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.web.server.DefaultWebModule");
    _builder.newLine();
    _builder.append("import ");
    WizardConfiguration _config_1 = this.getConfig();
    LanguageDescriptor _language_1 = _config_1.getLanguage();
    String _simpleName = _language_1.getSimpleName();
    _builder.append(_simpleName, "");
    _builder.append(".ide.contentassist.antlr.");
    WizardConfiguration _config_2 = this.getConfig();
    LanguageDescriptor _language_2 = _config_2.getLanguage();
    String _simpleName_1 = _language_2.getSimpleName();
    _builder.append(_simpleName_1, "");
    _builder.append("Parser");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    WizardConfiguration _config_3 = this.getConfig();
    LanguageDescriptor _language_3 = _config_3.getLanguage();
    String _simpleName_2 = _language_3.getSimpleName();
    _builder.append(_simpleName_2, "");
    _builder.append(".ide.contentassist.antlr.internal.Internal");
    WizardConfiguration _config_4 = this.getConfig();
    LanguageDescriptor _language_4 = _config_4.getLanguage();
    String _simpleName_3 = _language_4.getSimpleName();
    _builder.append(_simpleName_3, "");
    _builder.append("Lexer");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("@Accessors");
    _builder.newLine();
    _builder.append("@FinalFieldsConstructor");
    _builder.newLine();
    _builder.append("class ");
    WizardConfiguration _config_5 = this.getConfig();
    LanguageDescriptor _language_5 = _config_5.getLanguage();
    String _simpleName_4 = _language_5.getSimpleName();
    _builder.append(_simpleName_4, "");
    _builder.append("WebModule extends DefaultWebModule {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("val ExecutorService executorService");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def configureExecutorService(Binder binder) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("binder.bind(ExecutorService).toInstance(executorService)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def configureContentAssistLexer(Binder binder) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("binder.bind(Lexer).annotatedWith(Names.named(LexerIdeBindings.CONTENT_ASSIST)).to(Internal");
    WizardConfiguration _config_6 = this.getConfig();
    LanguageDescriptor _language_6 = _config_6.getLanguage();
    String _simpleName_5 = _language_6.getSimpleName();
    _builder.append(_simpleName_5, "\t\t");
    _builder.append("Lexer)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def Class<? extends IContentAssistParser> bindIContentAssistParser() {");
    _builder.newLine();
    _builder.append("\t\t");
    WizardConfiguration _config_7 = this.getConfig();
    LanguageDescriptor _language_7 = _config_7.getLanguage();
    String _simpleName_6 = _language_7.getSimpleName();
    _builder.append(_simpleName_6, "\t\t");
    _builder.append("Parser");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  @Override
  public GradleBuildFile buildGradle() {
    GradleBuildFile _buildGradle = super.buildGradle();
    final Procedure1<GradleBuildFile> _function = new Procedure1<GradleBuildFile>() {
      @Override
      public void apply(final GradleBuildFile it) {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("plugins {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("id \'war\'");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        it.setPluginsSection(_builder.toString());
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("task jettyRun(type:JavaExec) {");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("dependsOn(sourceSets.main.runtimeClasspath)");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("classpath = sourceSets.main.runtimeClasspath.filter{it.exists()}");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("main = \"");
        WizardConfiguration _config = WebProjectDescriptor.this.getConfig();
        LanguageDescriptor _language = _config.getLanguage();
        String _basePackage = _language.getBasePackage();
        _builder_1.append(_basePackage, "\t");
        _builder_1.append(".web.ServerLauncher\"");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t");
        _builder_1.append("standardInput = System.in");
        _builder_1.newLine();
        _builder_1.append("}");
        _builder_1.newLine();
        it.setAdditionalContent(_builder_1.toString());
      }
    };
    return ObjectExtensions.<GradleBuildFile>operator_doubleArrow(_buildGradle, _function);
  }
  
  @Override
  public PomFile pom() {
    PomFile _pom = super.pom();
    final Procedure1<PomFile> _function = new Procedure1<PomFile>() {
      @Override
      public void apply(final PomFile it) {
        it.setPackaging("war");
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("<build>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<plugins>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("<plugin>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<groupId>org.eclipse.xtend</groupId>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<artifactId>xtend-maven-plugin</artifactId>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("</plugin>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("<plugin>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<artifactId>maven-war-plugin</artifactId>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<version>2.6</version>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<configuration>");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("<warSourceDirectory>");
        String _sourceFolder = WebProjectDescriptor.this.sourceFolder(Outlet.WEBAPP);
        _builder.append(_sourceFolder, "\t\t\t\t");
        _builder.append("</warSourceDirectory>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("</configuration>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("</plugin>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("</plugins>");
        _builder.newLine();
        _builder.append("</build>");
        _builder.newLine();
        it.setBuildSection(_builder.toString());
      }
    };
    return ObjectExtensions.<PomFile>operator_doubleArrow(_pom, _function);
  }
  
  public WebProjectDescriptor(final WizardConfiguration config) {
    super(config);
  }
}
