chapter:LexicalStructure[Lexical Syntax]

Xbase comes with a small set of lexer rules, which can be overridden and hence changed by users. However the default implementation is carefully 
chosen and it is recommended to stick with the lexical syntax described in the following.

section:Identifiers[Identifiers]

Identifiers are used to name all constructs, such as types, methods and variables. Xbase uses the default
Identifier-Syntax from Xtext - compared to Java, they are slightly simplified to match the common cases
while having less ambiguities. They start with a letter e[a]-e[z], e[A]-e[Z] or an underscore followed
by more of these characters or a digit e[0]-e[9]. 

section2:EscapedIdentifiers[Escaped Identifiers]

Identifiers may not have the same spelling as any reserved keyword. 
However, identifiers starting with a code[^] are so called escaped identifiers. Escaped identifiers are used in cases when there is a 
conflict with a reserved keyword. Imagine you have introduced a keyword code[service] in your language but want to call a Java property e[service] at some point. 
In such cases you use an escaped identifier code[^service] to reference the Java property.

section2[Syntax]

code[
terminal ID: 
	'^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
;
]

section2[Examples]

ul[
	item[code[Foo]]
	item[code[Foo42]]
	item[code[FOO]]
	item[code[_42]]
	item[code[_foo]]
	item[code[^extends]]
]

section:StringLiterals[String Literals]

String literals can either use single quotes (') or double quotes (") as their terminals. When using double quotes all literals allowed by Java string literals are
supported. In addition new line characters are allowed, that is in Xbase all string literals can span multiple lines. When using single quotes the only difference
is that single quotes within the literal have to be escaped and double quotes do not.

See link[http://java.sun.com/docs/books/jls/third_edition/html/lexical.html#3.10.5][§ 3.10.5 String Literals]

In contrast to Java, equal string literals within the same class do not neccessarily refer to the same instance at runtime.

section2[Syntax]

code[
//TODO
]

section2[Examples]

ul[
	item[code['Foo Bar Baz']]
	item[code["Foo Bar Baz"]]
	item[code[" the quick brown fox 
		   jumps over the lazy dog."]]
	item[code['Escapes : \' ']]
	item[code["Escapes : \" "]]
]

section:IntegerLiterals[Integer Literals]

Integer literals consist of one or more digits. 
Only decimal literals are supported and they always result in a value of type code[java.lang.Integer] 
(it might result in native type code[int] when translated to Java, see ref:Types[Types]).
The compiler makes sure that only numbers between 0 and e[Integer.MAX] (0x7fffffff) are used.

There is no negative integer literal, instead the expression code[-23] is parsed as the prefix operator code[-] applied to an integer literal.

section2[Syntax]

code[
terminal INT returns ecore::EInt: 
	('0'..'9')+
;
]

section:Comments[Comments]

Xbase comes with two different kinds of comments: Single-line comments and multi-line comments.
The syntax is the same as the one known from Java (see link[http://java.sun.com/docs/books/jls/third_edition/html/lexical.html#3.7][§ 3.7 Comments]).

section2[Syntax]

code[
terminal ML_COMMENT	: 
	'/*' -> '*/'
;
terminal SL_COMMENT : 
	'//' !('\n'|'\r')* ('\r'? '\n')?
;
]

section:Whitespace[White Space]

The white space characters code[' '], code['\t'], code['\n'], and code['\r] are allowed to occur anywhere between the other syntactic elements. 

section:Keywords[Reserved Keywords]

The following list of words are reserved keywords, thus reducing the set of possible identifiers:
ol[
	item[code[extends]]
	item[code[super]]
	item[code[instanceof]]
	item[code[as]]
	item[code[new]]
	item[code[null]]
	item[code[false]]
	item[code[true]]
	item[code[val]]
	item[code[var]]
	item[code[if]]
	item[code[else]]
	item[code[switch]]
	item[code[case]]
	item[code[default]]
	item[code[do]]
	item[code[while]]
	item[code[for]]
	item[code[typeof]]
	item[code[throw]]
	item[code[try]]
	item[code[catch]]
	item[code[finally]]
]

However, in case some of the keywords have to be used as identifiers, the escape character for ref:EscapedIdentifiers[identifiers] comes in handy. 
