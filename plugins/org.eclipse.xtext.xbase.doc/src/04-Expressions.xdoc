chapter:Expressions[Expressions]

Expressions are the main language constructs which are used to express behavior and computation of values. Xbase does not support the concept of a statement, but instead comes with powerful 
expressions to handle situations in which the imperative nature of statements are a better fit. An expression always results in a value (might be the value 'null' though). In addition expressions can
be statically typed. By default it is assumed that languages making use of Xbase provide enough static context information for static type analysis, which is the basis of a lot of
IDE features coming with Xbase. However, the static typing is not mandatory and might be completely skipped if not wished. The openness of the compiler even allows to change the generation of 
concrete feature invocations to reflective calls, such that the language can be fully dynamically typed.

section:Literals[Literals]

A literal denotes a fixed unchangeable value. Xbase comes with the following literals

section2:ExpressionsStringLiterals[String Literals]

A string literal as defined in ref:StringLiterals is a valid expression and returns an instance of code[java.lang.String] of the given value.

section2[Syntax]

code[
XStringLiteral:
	STRING;
]

section2:ExpressionsIntegerLiterals[Integer Literals]

An integer literal as defined in ref:IntegerLiterals creates an instance of code[Integer].

section2[Syntax]

code[
XIntegerLiteral:
	INT;
]

section2:BooleanLiteral[Boolean Literals]

There are two boolean literals, code[true] and code[false] which correspond to their Java counterpart of type e[java.lang.Boolean]. 

section2[Syntax]

code[
XBooleanLiteral:
	'false' | 'true';
]

section2:NullLiteral[Null Literal]

The null pointer literal is, like in Java, code[null]. 
It is the only value of the type e[java.lang.Void] which has a special meaning in Xbase (see ref:VoidType).

section2[Syntax]

code[
XNullLiteral:
	{XNullLiteral} 'null';
]

section2:TypeLiteral[Type Literals]

Type literals are written like in Java. They consist of a reference to a raw type suffixed with a dot and the keyword code[class].

section2[Syntax]

code[
XTypeLiteral:
	QualifiedName '.' 'class';
]

section:Operators[Infix Operators]

Xbase supports a couple of predefined infix operators. In contrast to Java, the operators are not fixed
to operations on certain types. Instead Xbase comes with an operator to method mapping, which allows users to redefine the 
operators for any type just by implementing the corresponding method signature.
The following defines the operators and the corresponding Java method signatures / expressions.

table[
	tr[td[code[e1.someProp = e2]]		td[code[e1.someProp = e2]]]
	tr[td[ ]							td[code[e1.someProp(e2)]]]
	tr[td[ ]							td[code[e1.setSomeProp(e2)]]]
	tr[td[code[e1 += e2]]				td[code[e1.add(e2)]]]
	tr[td[code[e1.someFeature += e2]]	td[code[e1.addSomeFeature(e2)]]]
	tr[td[code[ ]]						td[code[ ]]]
	
	tr[td[code[e1 || e2]]				td[code[e1.or(e2)]]]
	tr[td[code[ ]]						td[code[ ]]]
	
	tr[td[code[e1 && e2]]				td[code[e1.and(e2)]]]
	tr[td[code[ ]]						td[code[ ]]]
	
	tr[td[code[e1 instanceof RawTypeRef]]td[code[e1 instanceof RawTypeRef /* direct translation to Java */]]]
	tr[td[code[e1 == e2]]				td[code[e1.equals(e2)]]]
	tr[td[code[e1 != e2]]				td[code[e1.notEquals(e2)]]]
	tr[td[code[e1 < e2]]				td[code[e1.lessThan(e2)]]]
	tr[td[code[e1 > e2]]				td[code[e1.greaterThan(e2)]]]
	tr[td[code[e1 <= e2]]				td[code[e1.lessEqualsThan(e2)]]]
	tr[td[code[e1 >= e2]]				td[code[e1.greaterEqualsThan(e2)]]]
	tr[td[code[ ]]						td[code[ ]]]
	
	tr[td[code[e1 -> e2]]				td[code[e1.mappedTo(e2)]]]
	tr[td[code[e1 .. e2]]				td[code[e1.upTo(e2)]]]
	tr[td[code[ ]]						td[code[ ]]]
	
	tr[td[code[e1 + e2]]				td[code[e1.plus(e2)]]]
	tr[td[code[e1 - e2]]				td[code[e1.minus(e2)]]]
	tr[td[code[ ]]						td[code[ ]]]
	
	tr[td[code[e1 * e2]]				td[code[e1.multiply(e2)]]]
	tr[td[code[e1 / e2]]				td[code[e1.divide(e2)]]]
	tr[td[code[e1 % e2]]				td[code[e1.modulo(e2)]]]
	tr[td[code[e1 ** e2]]				td[code[e1.power(e2)]]]
	tr[td[code[ ]]						td[code[ ]]]
	
	tr[td[code[! e1]]					td[code[e1.not()]]]
	tr[td[code[- e1]]					td[code[e1.minus()]]]
	tr[td[code[ ]]						td[code[ ]]]
	
	tr[td[code[e1\[e2\]]]				td[code[e1.apply(<Exp2)]]]
]
		
The table above also defines the operator precedence in ascending order. The blank lines separate precedence levels. 
The two assignment operators code[=] and code[+=] are right-to-left associative, that is a = b = c is executed as a = (b = c), all other
operators are left-to-right associative. Parenthesis can be used to adjust the default precedence and associativity. 

section2:propertyAssignment[Property Assignment]

The translation rule for the simple assignment operator code[=] is a bit more complicated.
Given the expression 

code[
	myObj.myProperty = "foo"
]

The compiler first looks up whether there is an accessible Java Field called code[myProperty] on the type of code[myObj]. If there is one it translates to
the following Java expression :

code[Java][
	myObj.myProperty = "foo";
]

Remember in Xbase everything is an expression and has to return something. In the case of simple assignments the return value is the value returned from the corresponding
Java expression, which is the assigned value.

If there is no accessible field on the left operand's type, first a method called code[myProperty(OneArg)] and then code[setMyProperty(OneArg)] is looked up. It has to take 
one argument of the type (or a super type) of the right hand operand. The return value will be whatever the setter method returns (which usually is code[null]). 
As a result the compiler translates to :

code[Java][
	myObj.setMyProperty("foo")
]

section2:addAssignment[Add Assignment]

The translation rule for the add assignment operator code[+=] is as follows:
Given the expression 

code[
	myObj.myProperty += "foo"
]

The compiler first looks up whether, the left hand side operand is of some type providing a method code[add(StringOrSuperType)]. 
In that case the expression translates to the following Java expression :

code[Java][
	myObj.myProperty.add("foo");
]

If there is no such method, the compiler looks for a method called code[addMyProperty(OneArg)] on the type of the target expression
of the feature call. That is it looks whether the type of code[myObj] provides a method called code[addMyProperty(StringOrSuperType)].

The return value and compile-time type will be whatever the invoked Java method returns.

section2[Short-Circuit Boolean Operators]

If the operators code[||] and code[&&] are used in a context where the left hand operand is of type boolean, the operation is evaluated
in short circuit mode, which means that the right hand operand might not be evaluated at all in the following cases: 
ol[
	item[in the case of code[||] the operand on the right hand side is not evaluated if the left operand evaluates to code[true].]
	item[in the case of code[&&] the operand on the right hand side is not evaluated if the left operand evaluates to code[false].]
]
 

section2[Examples]

ul[
	item[code[my.foo = 23]]
	item[code[myList += 23]]
	item[code[x > 23 && y < 23]]
	item[code[x && y || z]]
	item[code[1 + 3 * 5 * (- 23)]]
	item[code[!(x)]]
	item[code[my.foo = 23]]
	item[code[my.foo = 23]]
]

section:FeatureCalls[Feature Calls]

A feature call is used to invoke members of objects, such as fields and methods, but also can refer to local variables and parameters, 
which are made available for the current expression's scope (TODO define how scopes are declared around expressions). 

section2[Syntax]

The following snippet is a simplification of the real Xtext rules, which cover more than the concrete syntax.
code[
FeatureCall :
	ID |
	Expression ('.' ID ('(' Expression (',' Expression)* ')')?)*
]

section2:PropertyAccess[Property Access]

Feature calls are directly translated to their Java equivalent with the exception, that for calls to properties an equivalent rule as 
described in ref:propertyAssignment applies. 
That is, for the following expression

code[
	myObj.myProperty
]

the compiler first looks for an accessible field in the type of code[myObj]. If no such field exists it looks for a method called code[myProperty()] before it looks 
for the getter methods code[getMyProperty()]. If none of these members can be found the expression is unbound and a compiliation error is thrown.

section2:ImplicitThis[Implicit 'this' variable]

If the current scope contains a variable named code[this], the compiler will make all its members available to the scope. 
That is if 
code[
	this.myProperty
]
if a valid expression
code[
	myProperty
]
is valid as well and is equivalent. 

section2[Examples]

ul[
	item[code[foo]]
	item[code[my.foo]]
	item[code[my.foo(x)]]
	item[code[oh.my.foo(bar)]]
]

section:Closures[Closures]

A closure is a literal that defines an anonymous function. A closure also captures the current scope, so that any final variables and parameters visible at construction time 
can be referred to in the closure's expression. 

section2[Syntax]

code[
XClosure:
	(JvmFormalParameter (',' JvmFormalParameter)*)? '|' XExpression;
	
JvmFormalParameter:
	JvmTypeReference? ID;
]

section2:FunctionMapping[Function Mapping]

An Xbase closure is a Java object of one of the e[Function] interfaces shipped with the runtime library of Xbase. There is an interface for each number of parameters.
The names of the interfaces are 
ul[
	item[e[Function0<ReturnType>] for zero parameters, ]
	item[e[Function1<Param1Type, ReturnType>] for one parameters, ]
	item[e[Function2<Param1Type, Param2Type, ReturnType>] for two parameters, ]
	item[... ]
	item[e[Function6<Param1Type, Param2Type, Param3Type, Param4Type, Param5Type, Param6Type, ReturnType>] for six parameters, ]
]

In order to allow seamless integration with Google Guava (formerly known as Google Collect) the type code[Function1] 
extends code[com.google.common.base.Function<F, T>] and the type e[Function0] extends code[com.google.common.base.Supplier<T>]. 
There is also an auto-coercion for any code[Function1<T,Boolean>] to code[com.google.common.base.Predicate<T>].

e[TODO: Discuss, whether we want to go a step further and do auto conversion to any type declaring only one method. That would allow to pass
closures also to methods expecting other such types like e.g. code[Iterable]. This would avoid a fixed dependency to Google Guava, too.]

section2:ClosuresTypeInference[Typing]

Closures are expressions which produce function objects. The type is a ref:FunctionTypes[function type], consisting of the types of the 
parameters as well as the return type. The return type is never specified explicitly but is always inferred from the expression. 
The parameter types can be inferred if the closure is used in a context where this is possible.

For instance, given the following Java method signature:
code[
	public T <T>getFirst(List<T> list, Function0<T,Boolean> predicate) 
] 

the type of the parameter can be inferred. Which allows users to write:
code[
	getFirst(arrayList("Foo","Bar"), e|e=="Bar")
]
instead of 
code[
	getFirst(arrayList("Foo","Bar"), String e|e=="Bar")
]

section2[Examples]

ul[
	item[code[| "foo"   // closure without parameters]]
	item[code[String s | s.toUpperCase() // explicit argument type]]
	item[code[a,b,a | a+b+c  // inferred argument types]]
]

section:IfExpression[If Expression]

An if expression is used to choose two different values based on a predicate. While it has the syntax of Java's if statement it behaves  
like Java's ternary operator (code[predicate ? thenPart : elsePart]), i.e. it is an expression that returns a value. Consequently, you can use 
if expressions deeply nested within expressions.

section2[Syntax]

code[
XIfExpression:
	'if' '(' XExpression ')'
		XExpression
	('else' XExpression)?;
]

An expression code[if (p) e1 else e2] results to either the value code[e1] or code[e2] depending on whether the predicate code[p] evaluates to code[true] or code[false]. 
The else part is optional which is a shorthand for code[else null].
That is 
code[
	if (foo) x // is the same as 'if (foo) x else null'
]

section2:IfTypeInference[Typing]

The type of an if expression is calculated by the return types code[T1] and code[T2] of the two expression code[e1] and code[e2].
It uses the rules defined in ref:CommonSuperType.

section2[Examples]

ul[
	item[code[if (isFoo) this else that]]
	item[code[if (isFoo) this else if (thatFoo) that else other]]
	item[code[if (isFoo) this]]
]

section:SwitchExpression[Switch Expression]

section2[Syntax]

code[
XSwitchExpression:
	'switch' XExpressionOrVariableDeclaration? '{'
		XCasePart+
		('default' ':' (XBlockExpression 
			  		  | XExpression ';'))?
	'}';

XCasePart:
	JvmTypeReference? ('case' XExpression)? ':' 
		(XBlockExpression | XExpression ';');
]

The switch statement is a bit different from the one in Java. First, there is no fall through which means only one case is evaluated at most.
Second, the use of switch is not limited to certain values but can be used for any object reference instead. 
For a switch expression 
code[
	switch e {
		case e1 : er1
		case e2 : er2
		...
		case en : ern
		default : er
	}
]

the main expression code[e] is evaluated first and then each case sequentially. The result of the main expression, further called the switch value, is bound (and possibly shadows) the implicit
code[this] variable. In order to avoid shadowing, a ref:VariableDeclaration[variable declaration] can be used.

A case clause is taken if the switch value equals the result of the case's guard expression or if the case's guard expression evaluates to code[true].

section2[Leaving out the main expression]

It is possible to leave out the main expression. Then the first case clause for which its guard returns code[true] is taken and executed.

section2[Type guards]

In addition to the case predicate one can add a so called e[Type Guard] which is syntactically just ref:TypeReferences[type reference] in front of the case keyword.  
The compiler will use that type for the switch expression in subsequent expressions.
Example:
code[
	{
	var Object x = ...;
	switch x {
		String case x.length()>0 : x.length()
		List<?> : x.size()
		default : -1
	}
]

Only if the switch value passes a type guard, i.e. an instanceof operation returns code[true], the case's guard expression is executed using the same semantics explained in
previously. Statically the type guard acts like a cast, that is all references to the switch value will be of the type specified in the type guard.

section2[Typing]

The return type of a switch expression is computed using the rules defined in ref:CommonSuperType. The set of types from which the common super type is 
computed corresponds to the types of each case's result expression. In case a switch expression's type is
computed using the expected type form the context, it is sufficient to return the expected type if all case branches types conform to the expected type.

section:VariableDeclaration[Variable Declarations]

Variable declarations are only allowed within ref:Blocks[blocks] and ref:SwitchExpression[switch expressions]. They are visible in any subsequent expressions in
the block.

section2[Syntax]

code[
XVariableDeclaration:
	('val' | 'var') JvmTypeReference ID '=' XExpression;
]

Xbase resembles the keywords code[val] and code[var] known from Scala (link[http://www.scala-lang.org/docu/files/ScalaReference.pdf][The Scala Language Specification 2.8]).
A variable declaration starting with the keyword code[val] denotes a so called value, which is essentially a final (i.e. unsettable) variable. In rare cases, one
needs to update the value of a reference. In such situations the variable needs to be declared with the keyowrd code[var], which stands for 'variable'.

code[
	{
		var i = 0
		while (i>MAX) {
			print("Hi there!")
		}
	}
	{
		val myFoo = my.complex(expression)
		myFoo.call(myFoo)
	}
]

section2[Typing]

The return type of a variable declaration expression is always code[java.lang.Void]. 
The type of the variable itself can either be explicitly declared or be inferred from the right hand side expression.
Here is an example for an explicitly declared type:
code[
	var List<String> msg = new ArrayList<String>(); 
]
In such cases, the right hand expression's type must ref:ConformanceRules[conform] to the type on the left hand side. 

Alternatively the type can be left out and will be inferred from the initialization expression:  
code[
	var msg = new ArrayList<String>(); // -> type ArrayList<String>  
]

section:Blocks[Blocks]

The block expression allows to simulate imperative code sequences. It consists of a sequence of expressions, and returns the value of the last expression.
The return type of a block is also the type of the last expression. Empty blocks return code[null]. 
ref:VariableDeclaration[Variable declarations] are only allowed within blocks and cannot be used as a block's last expression.

section2[Syntax]

code[
XBlockExpression:
	'{'
		(XExpressionInsideBlock ';'?)*
	'}';
] 

A block expression is surrounded by curly braces and contains at least one expression.
It can optionally be terminated by a semicolon.

section2[Examples]

ul[
	item[
	{
		doSideEffect("foo")
		result
	}
	]
	item[
	{
		var x = greeting();
		if ((x.equals("Hello ")) {
			x+"World!"; 
		} else {
			x;
		}
	}
	]
]

section:WhileExpression[While Loop]

A while loop code[while (predicate) expression] is used to execute a certain code[expression] unless the code[predicate] is evaluated to code[false].
The return type of a while loop is code[java.lang.Void] and the return value is code[null].

section2[Syntax]

code[
XWhileExpression:
	'while' '(' predicate=XExpression ')'
		body=XExpression;
] 

section2[Examples]

ul[
	item[code[
	while (true) {
		doSideEffect("foo");
	}
	]]
	item[code[
	while ((i=i+1)<max) doSideEffect("foo")
	]]
]

section:DoWhileExpression[Do-While Loop]

A do-while loop code[do expression while (predicate)] is used to execute a certain code[expression] unless the code[predicate] is evaluated to code[false].
The difference to the ref:WhileExpression[while loop] is that the execution starts by executing the block once before evaluating the predicate for the first time.
The return type of a do-while loop is code[java.lang.Void] and the return value is code[null].

section2[Syntax]

code[
XDoWhileExpression:
	'do'
		body=XExpression
	'while' '(' predicate=XExpression ')';
] 

section2[Examples]

ul[
	item[code[
	do {
		doSideEffect("foo");
	} while (true)
	]]
	item[code[
	do doSideEffect("foo") while ((i=i+1)<max)
	]]
]

section:ForLoop[For Loop]

The for loop code[for (T1 variable : iterableOfT1) expression] is used to execute a certain code[expression] for each element of an code[java.lang.Iterable].
The local code[variable] is final, hence canot be updated. 

section2[Syntax]

code[
XForExpression:
	'for' '(' JvmFormalParameter ':' XExpression ')' 
		XExpression
	;
] 

section2[Typing]

The return type of a for loop is code[java.lang.Void] and the return value is code[null].
The type of the local variable can be left out. In that case it is inferred from the type of the code[java.lang.Iterable] returned by the iterable expression.

section2[Examples]

ul[
	item[code[for (String s : myStrings) {
	doSideEffect(s);
}]]
	item[
		code[
			for (s : myStrings)
				doSideEffect(s)
		]
	]
]

section:ConstructorCall[Constructor Call]

Construction of objects is done by invoking Java constructors. Xbase uses the code[new] keyword and the syntax is like the one known from Java.

section2[Syntax]

code[
XConstructorCall:
  'new' (QualifiedName ('<' JvmTypeArgument (',' JvmTypeArgument)* '>')? '('(XExpression (',' XExpression)*)?')')?;
]

section2[Example]

code[
	new Foo()
]

section:Throw[Throwing Exceptions]

Like in Java it is possible to throw code[java.lang.Throwable]. The syntax is exactly the same as in Java.

section2[Syntax]

code[
XThrow:
  'throw' XExpression;
]

section2[Typing]

The type of a throw expression is always code[java.lang.Void]. 
The type of the expression after the code[throw] keyword needs to conform to code[java.lang.Throwable].

section2[Example]

code[
	throw new RuntimeException()
]

section:TryCatch[Try, Catch, Finally]

The try-catch-finally expression is used to handle exceptional situations gracefully.
Xbase never forces you to catch exceptions, because there is no such concept like checked exceptions in Java. 
The syntax again is like the one known from Java.

section2[Syntax]

code[
XTryCatchFinally:
  'try' XBlockExpression
  CatchClause*
  FinallyClause?;
  
CatchClause:
	'catch' XDeclaredParameter 
		XBlockExpression  

FinallyClause:
	'finally' XBlockExpression  
]

section2[Example]

code[
	try {
		throw new RuntimeException()
	} catch (NullPointerException e) {
		// handle e
	} finally {
		// do stuff
	}
]





