chapter:Types[Types]

Xbase binds to the Java Virtual Machine. This means that expressions written in Xbase refer to Java types and Java type members. Xbase itself uses types 
defined in the Java language, such as classes, interfaces, annotations and enums. It also supports Java generics and shares the known syntax. In addition 
to Java, Xbase comes with the notion of function types. 

Xbase does not bind to Arrays but translates any references to e[java.util.List]s: An 
array e[int\[\]] binds to e[java.util.List<java.lang.Integer>] (in short e[List<Integer>]). 

section:TypeReferences[Simple Type References]

A simple type reference only consists of a e[qualified name]. A qualified name is a name made up of identifiers which are separated by a dot 
(like in Java).

section2[Syntax]

code[
QualifiedName:
  ID ('.' ID)*
;	
]

There is no parser rule for a simple type reference, as it is expressed as a parameterized type references without parameters.

section2[Examples]

ul[
	item[code[java.lang.String]]
	item[code[String]]
]

section:FunctionTypes[Function Types]

Xbase introduces e[closures], and therefore an additional function type signature. On the JVM-Level a closure (or more generally any function object) is just an instance of one of the 
types in code[org.eclipse.xtext.xbase.lib.Function*], depending on the number of arguments. However, as closures are a very important language feature, 
a special sugared syntax for function types has been introduced.  
So instead of writing code[Function1<String,Boolean>] one can write code[(String)=>Boolean].

For more information on closures see ref:Closures.

section2[Syntax]

code[
XFunctionTypeRef:
  ('('JvmTypeReference (',' JvmTypeReference)*')')? 
  	'=>' JvmTypeReference;
]

section2[Examples]

ul[
	item[code[=>Boolean // predicate without parameters]]
	item[code[(String)=>Boolean // One argument predicate]]
	item[code[(Mutable)=>Void // A method doing side effects only - returns null]]
	item[code[(List<String>)=>String]]
]

section:ParameterizedTypeReference[Parameterized Type References]

The general syntax for type references allows to take any number of type arguments. The semantics as well as the syntax is almost the same as in Java, so please 
refer to the third edition of the  link[http://java.sun.com/docs/books/jls/third_edition/html/j3TOC.html][Java Language Specification].

The only difference is that in Xbase a type reference can also be a function type. In the following the full syntax of type references is shown, including function types and
type arguments.

section2[Syntax]

code[
JvmTypeReference:
  JvmParameterizedTypeReference | 
  XFunctionTypeRef;
	
XFunctionTypeRef:
  ('(' JvmTypeReference (',' JvmTypeReference)* ')')? 
  	'=>' JvmTypeReference;

JvmParameterizedTypeReference:
  type=QualifiedName ('<' JvmTypeArgument (',' JvmTypeArgument)* '>')?;

JvmTypeArgument:
  JvmReferenceTypeArgument | 
  JvmWildcardTypeArgument;
  
JvmReferenceTypeArgument :
  JvmTypeReference;

JvmWildcardTypeArgument:
  '?' (JvmUpperBound | JvmLowerBound)?;

JvmLowerBound :
 'super' JvmTypeReference;

JvmUpperBound : 
 'extends' JvmTypeReference;

]

section2[Examples]

ul[
	item[code[String]]
	item[code[java.lang.String]]
	item[code[List<?>]]
	item[code[List<? extends Comparable<? extends FooBar>]]
	item[code[List<? super MyLowerBound>]]
	item[code[List<? extends =>Boolean>]]
]

section:VoidType[The type java.lang.Void]

The code[null] reference is the only valid value of the type code[Void], which gets some special treatment in Xbase. Every Java method which is declared 
e[void] (i.e. without a return value) is translated to a method with return type e[java.lang.Void]. At runtime such method invocations will result in 
e[null]. The specialty is that while it is allowed to pass code[null] everywhere todo[discuss use of nullable annotation] instead of any other value, 
this does not mean that e[java.lang.Void] is a subtype of any other type. The code[instanceOf] operator as well as the type matchers in 
the ref:SwitchExpression do not match code[null].

section:ConformanceRules[Conformance Rules]

Conformance is used in order to find out whether some expression can be used in a certain situation. For instance when assigning a value to a variable, 
the type of the right hand expression needs to conform to the type of the variable.

A type e[T1] conforms to a type e[T2] if 
ul[
	item[T1==T2]
	item[T1==java.lang.Void]
	item[T1 is a subtype of T2]
]

e[T1<T1P,..T1Pn>] conforms to e[T2<T2P, ... T2Pn>] if e[T1] conforms to e[T2] and each upper bound of a e[T1Pn] conforms to the corresponding upper bound of e[T2Pn].

section2:CommonSuperType[Common Super Type]

For a set e[\[T1,T2,...Tn\]] of types the common super type is computed by using the linear type inheritance sequence of e[T1] and is iterated until one type
conforms to each e[T2,..,Tn]. The linear type inheritance sequence of e[T1] is computed by ordering all types which are part if the type hierarchy of e[T1]
by their specificity. A type e[T1] is considered more specific than e[T2] if e[T1] is a subtype of e[T2]. Any types with equal specificity will be sorted 
by their qualified name just to ensure deterministic results. 

