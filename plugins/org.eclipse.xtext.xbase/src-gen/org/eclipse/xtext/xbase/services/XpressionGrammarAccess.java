/*
* generated by Xtext
*/

package org.eclipse.xtext.xbase.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class XpressionGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cAssignmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//  Assignment;
		public ParserRule getRule() { return rule; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall() { return cAssignmentParserRuleCall; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorEqualsSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorPlusSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Assignment returns Expression:
		//  OrExpression ({BinaryOperation.left=current} operator=( "=" | "+=" ) right=OrExpression
		//  )?;
		public ParserRule getRule() { return rule; }

		//OrExpression ({BinaryOperation.left=current} operator=( "=" | "+=" ) right=OrExpression
		//)?
		public Group getGroup() { return cGroup; }

		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_0() { return cOrExpressionParserRuleCall_0; }

		//({BinaryOperation.left=current} operator=( "=" | "+=" ) right=OrExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOperation.left=current}
		public Action getBinaryOperationLeftAction_1_0() { return cBinaryOperationLeftAction_1_0; }

		//operator=( "=" | "+=" )
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"="|"+="
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//"="
		public Keyword getOperatorEqualsSignKeyword_1_1_0_0() { return cOperatorEqualsSignKeyword_1_1_0_0; }

		//"+="
		public Keyword getOperatorPlusSignEqualsSignKeyword_1_1_0_1() { return cOperatorPlusSignEqualsSignKeyword_1_1_0_1; }

		//right=OrExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//OrExpression
		public RuleCall getRightOrExpressionParserRuleCall_1_2_0() { return cRightOrExpressionParserRuleCall_1_2_0; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpression returns Expression:
		//  AndExpression ({BinaryOperation.left=current} operator="||" right=AndExpression)*;
		public ParserRule getRule() { return rule; }

		//AndExpression ({BinaryOperation.left=current} operator="||" right=AndExpression)*
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//({BinaryOperation.left=current} operator="||" right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOperation.left=current}
		public Action getBinaryOperationLeftAction_1_0() { return cBinaryOperationLeftAction_1_0; }

		//operator="||"
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"||"
		public Keyword getOperatorVerticalLineVerticalLineKeyword_1_1_0() { return cOperatorVerticalLineVerticalLineKeyword_1_1_0; }

		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorAmpersandAmpersandKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression returns Expression:
		//  EqualityExpression ({BinaryOperation.left=current} operator="&&" right=
		//  EqualityExpression)*;
		public ParserRule getRule() { return rule; }

		//EqualityExpression ({BinaryOperation.left=current} operator="&&" right=
		//EqualityExpression)*
		public Group getGroup() { return cGroup; }

		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }

		//({BinaryOperation.left=current} operator="&&" right=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOperation.left=current}
		public Action getBinaryOperationLeftAction_1_0() { return cBinaryOperationLeftAction_1_0; }

		//operator="&&"
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"&&"
		public Keyword getOperatorAmpersandAmpersandKeyword_1_1_0() { return cOperatorAmpersandAmpersandKeyword_1_1_0; }

		//right=EqualityExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//EqualityExpression
		public RuleCall getRightEqualityExpressionParserRuleCall_1_2_0() { return cRightEqualityExpressionParserRuleCall_1_2_0; }
	}

	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRelationalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EqualityExpression returns Expression:
		//  RelationalExpression ({BinaryOperation.left=current} operator=( "==" | "!=" ) right=
		//  RelationalExpression)*;
		public ParserRule getRule() { return rule; }

		//RelationalExpression ({BinaryOperation.left=current} operator=( "==" | "!=" ) right=
		//RelationalExpression)*
		public Group getGroup() { return cGroup; }

		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }

		//({BinaryOperation.left=current} operator=( "==" | "!=" ) right=RelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOperation.left=current}
		public Action getBinaryOperationLeftAction_1_0() { return cBinaryOperationLeftAction_1_0; }

		//operator=( "==" | "!=" )
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"=="|"!="
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//"=="
		public Keyword getOperatorEqualsSignEqualsSignKeyword_1_1_0_0() { return cOperatorEqualsSignEqualsSignKeyword_1_1_0_0; }

		//"!="
		public Keyword getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOperatorExclamationMarkEqualsSignKeyword_1_1_0_1; }

		//right=RelationalExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//RelationalExpression
		public RuleCall getRightRelationalExpressionParserRuleCall_1_2_0() { return cRightRelationalExpressionParserRuleCall_1_2_0; }
	}

	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cInstanceOfExpressionExpressionAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cInstanceofKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final CrossReference cTypeTypeCrossReference_1_0_2_0 = (CrossReference)cTypeAssignment_1_0_2.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_1_0_2_0_1 = (RuleCall)cTypeTypeCrossReference_1_0_2_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cBinaryOperationLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_1_0 = (Alternatives)cOperatorAssignment_1_1_1.eContents().get(0);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_1_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_1_0.eContents().get(0);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_1_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_1_0.eContents().get(1);
		private final Keyword cOperatorGreaterThanSignKeyword_1_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_1_0.eContents().get(2);
		private final Keyword cOperatorLessThanSignKeyword_1_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightAdditiveExpressionParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//RelationalExpression returns Expression:
		//  AdditiveExpression ({InstanceOfExpression.expression=current} "instanceof" type=[
		//  types::Type|QualifiedName]|{BinaryOperation.left=current} operator=( ">=" | "<=" | ">"
		//  | "<" ) right=AdditiveExpression)*;
		public ParserRule getRule() { return rule; }

		//AdditiveExpression ({InstanceOfExpression.expression=current} "instanceof" type=[
		//types::Type|QualifiedName]|{BinaryOperation.left=current} operator=( ">=" | "<=" | ">"
		//| "<" ) right=AdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }

		//({InstanceOfExpression.expression=current} "instanceof" type=[types::Type|
		//QualifiedName]|{BinaryOperation.left=current} operator=( ">=" | "<=" | ">" | "<" ) right=
		//AdditiveExpression)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{InstanceOfExpression.expression=current} "instanceof" type=[types::Type|
		//QualifiedName]
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{InstanceOfExpression.expression=current}
		public Action getInstanceOfExpressionExpressionAction_1_0_0() { return cInstanceOfExpressionExpressionAction_1_0_0; }

		//"instanceof"
		public Keyword getInstanceofKeyword_1_0_1() { return cInstanceofKeyword_1_0_1; }

		//type=[types::Type|QualifiedName]
		public Assignment getTypeAssignment_1_0_2() { return cTypeAssignment_1_0_2; }

		//[types::Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_1_0_2_0() { return cTypeTypeCrossReference_1_0_2_0; }

		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_1_0_2_0_1() { return cTypeTypeQualifiedNameParserRuleCall_1_0_2_0_1; }

		//{BinaryOperation.left=current} operator=( ">=" | "<=" | ">" | "<" ) right=
		//AdditiveExpression
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{BinaryOperation.left=current}
		public Action getBinaryOperationLeftAction_1_1_0() { return cBinaryOperationLeftAction_1_1_0; }

		//operator=( ">=" | "<=" | ">" | "<" )
		public Assignment getOperatorAssignment_1_1_1() { return cOperatorAssignment_1_1_1; }

		//">="|"<="|">"|"<"
		public Alternatives getOperatorAlternatives_1_1_1_0() { return cOperatorAlternatives_1_1_1_0; }

		//">="
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_1_1_1_0_0() { return cOperatorGreaterThanSignEqualsSignKeyword_1_1_1_0_0; }

		//"<="
		public Keyword getOperatorLessThanSignEqualsSignKeyword_1_1_1_0_1() { return cOperatorLessThanSignEqualsSignKeyword_1_1_1_0_1; }

		//">"
		public Keyword getOperatorGreaterThanSignKeyword_1_1_1_0_2() { return cOperatorGreaterThanSignKeyword_1_1_1_0_2; }

		//"<"
		public Keyword getOperatorLessThanSignKeyword_1_1_1_0_3() { return cOperatorLessThanSignKeyword_1_1_1_0_3; }

		//right=AdditiveExpression
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }

		//AdditiveExpression
		public RuleCall getRightAdditiveExpressionParserRuleCall_1_1_2_0() { return cRightAdditiveExpressionParserRuleCall_1_1_2_0; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AdditiveExpression returns Expression:
		//  MultiplicativeExpression ({BinaryOperation.left=current} operator=( "+" | "-" ) right=
		//  MultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//MultiplicativeExpression ({BinaryOperation.left=current} operator=( "+" | "-" ) right=
		//MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }

		//({BinaryOperation.left=current} operator=( "+" | "-" ) right=MultiplicativeExpression)
		// *
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOperation.left=current}
		public Action getBinaryOperationLeftAction_1_0() { return cBinaryOperationLeftAction_1_0; }

		//operator=( "+" | "-" )
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"+"|"-"
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//"+"
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }

		//"-"
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }

		//right=MultiplicativeExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//MultiplicativeExpression
		public RuleCall getRightMultiplicativeExpressionParserRuleCall_1_2_0() { return cRightMultiplicativeExpressionParserRuleCall_1_2_0; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOtherOperatorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorPercentSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOtherOperatorExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplicativeExpression returns Expression:
		//  OtherOperatorExpression ({BinaryOperation.left=current} operator=( "*" | "/" | "%" )
		//  right=OtherOperatorExpression)*;
		public ParserRule getRule() { return rule; }

		//OtherOperatorExpression ({BinaryOperation.left=current} operator=( "*" | "/" | "%" )
		//right=OtherOperatorExpression)*
		public Group getGroup() { return cGroup; }

		//OtherOperatorExpression
		public RuleCall getOtherOperatorExpressionParserRuleCall_0() { return cOtherOperatorExpressionParserRuleCall_0; }

		//({BinaryOperation.left=current} operator=( "*" | "/" | "%" ) right=
		//OtherOperatorExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOperation.left=current}
		public Action getBinaryOperationLeftAction_1_0() { return cBinaryOperationLeftAction_1_0; }

		//operator=( "*" | "/" | "%" )
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"*"|"/"|"%"
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//"*"
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }

		//"/"
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }

		//"%"
		public Keyword getOperatorPercentSignKeyword_1_1_0_2() { return cOperatorPercentSignKeyword_1_1_0_2; }

		//right=OtherOperatorExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//OtherOperatorExpression
		public RuleCall getRightOtherOperatorExpressionParserRuleCall_1_2_0() { return cRightOtherOperatorExpressionParserRuleCall_1_2_0; }
	}

	public class OtherOperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OtherOperatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorHyphenMinusGreaterThanSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorFullStopFullStopKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnaryOperationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OtherOperatorExpression returns Expression:
		//  UnaryOperation ({BinaryOperation.left=current} operator=( "->" | ".." ) right=
		//  UnaryOperation)*;
		public ParserRule getRule() { return rule; }

		//UnaryOperation ({BinaryOperation.left=current} operator=( "->" | ".." ) right=
		//UnaryOperation)*
		public Group getGroup() { return cGroup; }

		//UnaryOperation
		public RuleCall getUnaryOperationParserRuleCall_0() { return cUnaryOperationParserRuleCall_0; }

		//({BinaryOperation.left=current} operator=( "->" | ".." ) right=UnaryOperation)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOperation.left=current}
		public Action getBinaryOperationLeftAction_1_0() { return cBinaryOperationLeftAction_1_0; }

		//operator=( "->" | ".." )
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"->"|".."
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//"->"
		public Keyword getOperatorHyphenMinusGreaterThanSignKeyword_1_1_0_0() { return cOperatorHyphenMinusGreaterThanSignKeyword_1_1_0_0; }

		//".."
		public Keyword getOperatorFullStopFullStopKeyword_1_1_0_1() { return cOperatorFullStopFullStopKeyword_1_1_0_1; }

		//right=UnaryOperation
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//UnaryOperation
		public RuleCall getRightUnaryOperationParserRuleCall_1_2_0() { return cRightUnaryOperationParserRuleCall_1_2_0; }
	}

	public class UnaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cOperatorAlternatives_0_1_0 = (Alternatives)cOperatorAssignment_0_1.eContents().get(0);
		private final Keyword cOperatorExclamationMarkKeyword_0_1_0_0 = (Keyword)cOperatorAlternatives_0_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_0_1_0_1 = (Keyword)cOperatorAlternatives_0_1_0.eContents().get(1);
		private final Keyword cOperatorPlusSignKeyword_0_1_0_2 = (Keyword)cOperatorAlternatives_0_1_0.eContents().get(2);
		private final Assignment cTargetAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTargetFeatureCallParserRuleCall_0_2_0 = (RuleCall)cTargetAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCastedExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeTypeRefParserRuleCall_1_2_0 = (RuleCall)cTypeAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cTargetAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cTargetExpressionParserRuleCall_1_4_0 = (RuleCall)cTargetAssignment_1_4.eContents().get(0);
		private final RuleCall cFeatureCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//UnaryOperation returns Expression:
		//  {UnaryOperation} operator=( "!" | "-" | "+" ) target=FeatureCall|{CastedExpression} "("
		//  type=TypeRef ")" target=Expression|FeatureCall;
		public ParserRule getRule() { return rule; }

		//{UnaryOperation} operator=( "!" | "-" | "+" ) target=FeatureCall|{CastedExpression} "("
		//type=TypeRef ")" target=Expression|FeatureCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryOperation} operator=( "!" | "-" | "+" ) target=FeatureCall
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryOperation}
		public Action getUnaryOperationAction_0_0() { return cUnaryOperationAction_0_0; }

		//operator=( "!" | "-" | "+" )
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }

		//"!"|"-"|"+"
		public Alternatives getOperatorAlternatives_0_1_0() { return cOperatorAlternatives_0_1_0; }

		//"!"
		public Keyword getOperatorExclamationMarkKeyword_0_1_0_0() { return cOperatorExclamationMarkKeyword_0_1_0_0; }

		//"-"
		public Keyword getOperatorHyphenMinusKeyword_0_1_0_1() { return cOperatorHyphenMinusKeyword_0_1_0_1; }

		//"+"
		public Keyword getOperatorPlusSignKeyword_0_1_0_2() { return cOperatorPlusSignKeyword_0_1_0_2; }

		//target=FeatureCall
		public Assignment getTargetAssignment_0_2() { return cTargetAssignment_0_2; }

		//FeatureCall
		public RuleCall getTargetFeatureCallParserRuleCall_0_2_0() { return cTargetFeatureCallParserRuleCall_0_2_0; }

		//{CastedExpression} "(" type=TypeRef ")" target=Expression
		public Group getGroup_1() { return cGroup_1; }

		//{CastedExpression}
		public Action getCastedExpressionAction_1_0() { return cCastedExpressionAction_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//type=TypeRef
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_1_2_0() { return cTypeTypeRefParserRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//target=Expression
		public Assignment getTargetAssignment_1_4() { return cTargetAssignment_1_4; }

		//Expression
		public RuleCall getTargetExpressionParserRuleCall_1_4_0() { return cTargetExpressionParserRuleCall_1_4_0; }

		//FeatureCall
		public RuleCall getFeatureCallParserRuleCall_2() { return cFeatureCallParserRuleCall_2; }
	}

	public class FeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFeatureCallTargetAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cGroup_1_3.eContents().get(1);
		private final Assignment cParamsAssignment_1_3_1_0 = (Assignment)cGroup_1_3_1.eContents().get(0);
		private final RuleCall cParamsExpressionParserRuleCall_1_3_1_0_0 = (RuleCall)cParamsAssignment_1_3_1_0.eContents().get(0);
		private final Group cGroup_1_3_1_1 = (Group)cGroup_1_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_1_1_0 = (Keyword)cGroup_1_3_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_3_1_1_1 = (Assignment)cGroup_1_3_1_1.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_1_3_1_1_1_0 = (RuleCall)cParamsAssignment_1_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		
		//FeatureCall returns Expression:
		//  PrimaryExpression ({FeatureCall.target=current} "." name=ID ("(" (params+=Expression (
		//  "," params+=Expression)*)? ")")?)*;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression ({FeatureCall.target=current} "." name=ID ("(" (params+=Expression (
		//"," params+=Expression)*)? ")")?)*
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//({FeatureCall.target=current} "." name=ID ("(" (params+=Expression ("," params+=
		//Expression)*)? ")")?)*
		public Group getGroup_1() { return cGroup_1; }

		//{FeatureCall.target=current}
		public Action getFeatureCallTargetAction_1_0() { return cFeatureCallTargetAction_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }

		//("(" (params+=Expression ("," params+=Expression)*)? ")")?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_3_0() { return cLeftParenthesisKeyword_1_3_0; }

		//(params+=Expression ("," params+=Expression)*)?
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }

		//params+=Expression
		public Assignment getParamsAssignment_1_3_1_0() { return cParamsAssignment_1_3_1_0; }

		//Expression
		public RuleCall getParamsExpressionParserRuleCall_1_3_1_0_0() { return cParamsExpressionParserRuleCall_1_3_1_0_0; }

		//("," params+=Expression)*
		public Group getGroup_1_3_1_1() { return cGroup_1_3_1_1; }

		//","
		public Keyword getCommaKeyword_1_3_1_1_0() { return cCommaKeyword_1_3_1_1_0; }

		//params+=Expression
		public Assignment getParamsAssignment_1_3_1_1_1() { return cParamsAssignment_1_3_1_1_1; }

		//Expression
		public RuleCall getParamsExpressionParserRuleCall_1_3_1_1_1_0() { return cParamsExpressionParserRuleCall_1_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3_2() { return cRightParenthesisKeyword_1_3_2; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClosureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNullLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTypeLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cConstructorCallParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBlockExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cRichStringParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cIfExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cSwitchExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cWhileExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cSimpleFeatureCallParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cParenthesizedExpressionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//PrimaryExpression returns Expression:
		//  Closure|BooleanLiteral|IntLiteral|NullLiteral|StringLiteral|TypeLiteral|
		//  ConstructorCall|BlockExpression|RichString|IfExpression|SwitchExpression|
		//  WhileExpression|SimpleFeatureCall|ParenthesizedExpression;
		public ParserRule getRule() { return rule; }

		//Closure|BooleanLiteral|IntLiteral|NullLiteral|StringLiteral|TypeLiteral|
		//ConstructorCall|BlockExpression|RichString|IfExpression|SwitchExpression|
		//WhileExpression|SimpleFeatureCall|ParenthesizedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//Closure
		public RuleCall getClosureParserRuleCall_0() { return cClosureParserRuleCall_0; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_1() { return cBooleanLiteralParserRuleCall_1; }

		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_2() { return cIntLiteralParserRuleCall_2; }

		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_3() { return cNullLiteralParserRuleCall_3; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_4() { return cStringLiteralParserRuleCall_4; }

		//TypeLiteral
		public RuleCall getTypeLiteralParserRuleCall_5() { return cTypeLiteralParserRuleCall_5; }

		//ConstructorCall
		public RuleCall getConstructorCallParserRuleCall_6() { return cConstructorCallParserRuleCall_6; }

		//BlockExpression
		public RuleCall getBlockExpressionParserRuleCall_7() { return cBlockExpressionParserRuleCall_7; }

		//RichString
		public RuleCall getRichStringParserRuleCall_8() { return cRichStringParserRuleCall_8; }

		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_9() { return cIfExpressionParserRuleCall_9; }

		//SwitchExpression
		public RuleCall getSwitchExpressionParserRuleCall_10() { return cSwitchExpressionParserRuleCall_10; }

		//WhileExpression
		public RuleCall getWhileExpressionParserRuleCall_11() { return cWhileExpressionParserRuleCall_11; }

		//SimpleFeatureCall
		public RuleCall getSimpleFeatureCallParserRuleCall_12() { return cSimpleFeatureCallParserRuleCall_12; }

		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_13() { return cParenthesizedExpressionParserRuleCall_13; }
	}

	public class ClosureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Closure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClosureAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cParamsDeclaredParameterParserRuleCall_1_0_0 = (RuleCall)cParamsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParamsDeclaredParameterParserRuleCall_1_1_1_0 = (RuleCall)cParamsAssignment_1_1_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//Closure returns Expression:
		//  {Closure} (params+=DeclaredParameter ("," params+=DeclaredParameter)*)? "|"
		//  expression=Expression;
		public ParserRule getRule() { return rule; }

		//{Closure} (params+=DeclaredParameter ("," params+=DeclaredParameter)*)? "|"
		//expression=Expression
		public Group getGroup() { return cGroup; }

		//{Closure}
		public Action getClosureAction_0() { return cClosureAction_0; }

		//(params+=DeclaredParameter ("," params+=DeclaredParameter)*)?
		public Group getGroup_1() { return cGroup_1; }

		//params+=DeclaredParameter
		public Assignment getParamsAssignment_1_0() { return cParamsAssignment_1_0; }

		//DeclaredParameter
		public RuleCall getParamsDeclaredParameterParserRuleCall_1_0_0() { return cParamsDeclaredParameterParserRuleCall_1_0_0; }

		//("," params+=DeclaredParameter)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//params+=DeclaredParameter
		public Assignment getParamsAssignment_1_1_1() { return cParamsAssignment_1_1_1; }

		//DeclaredParameter
		public RuleCall getParamsDeclaredParameterParserRuleCall_1_1_1_0() { return cParamsDeclaredParameterParserRuleCall_1_1_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
	}

	public class ParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParenthesizedExpression returns Expression:
		//  "(" Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class IfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIfAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIfExpressionParserRuleCall_2_0 = (RuleCall)cIfAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenExpressionParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseExpressionParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		
		//IfExpression:
		//  "if" "(" if=Expression ")" then=Expression ("else" else=Expression)?;
		public ParserRule getRule() { return rule; }

		//"if" "(" if=Expression ")" then=Expression ("else" else=Expression)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//if=Expression
		public Assignment getIfAssignment_2() { return cIfAssignment_2; }

		//Expression
		public RuleCall getIfExpressionParserRuleCall_2_0() { return cIfExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//then=Expression
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }

		//Expression
		public RuleCall getThenExpressionParserRuleCall_4_0() { return cThenExpressionParserRuleCall_4_0; }

		//("else" else=Expression)?
		public Group getGroup_5() { return cGroup_5; }

		//"else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//else=Expression
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }

		//Expression
		public RuleCall getElseExpressionParserRuleCall_5_1_0() { return cElseExpressionParserRuleCall_5_1_0; }
	}

	public class SwitchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSwitchAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSwitchExpressionParserRuleCall_1_0 = (RuleCall)cSwitchAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCasesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCasesCasePartParserRuleCall_3_0 = (RuleCall)cCasesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDefaultKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cDefaultAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cDefaultExpressionParserRuleCall_4_2_0 = (RuleCall)cDefaultAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SwitchExpression:
		//  "switch" switch=Expression? "{" cases+=CasePart+ ("default" ":" default=Expression)?
		//  "}";
		public ParserRule getRule() { return rule; }

		//"switch" switch=Expression? "{" cases+=CasePart+ ("default" ":" default=Expression)?
		//"}"
		public Group getGroup() { return cGroup; }

		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }

		//switch=Expression?
		public Assignment getSwitchAssignment_1() { return cSwitchAssignment_1; }

		//Expression
		public RuleCall getSwitchExpressionParserRuleCall_1_0() { return cSwitchExpressionParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//cases+=CasePart+
		public Assignment getCasesAssignment_3() { return cCasesAssignment_3; }

		//CasePart
		public RuleCall getCasesCasePartParserRuleCall_3_0() { return cCasesCasePartParserRuleCall_3_0; }

		//("default" ":" default=Expression)?
		public Group getGroup_4() { return cGroup_4; }

		//"default"
		public Keyword getDefaultKeyword_4_0() { return cDefaultKeyword_4_0; }

		//":"
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }

		//default=Expression
		public Assignment getDefaultAssignment_4_2() { return cDefaultAssignment_4_2; }

		//Expression
		public RuleCall getDefaultExpressionParserRuleCall_4_2_0() { return cDefaultExpressionParserRuleCall_4_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class WhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPredicateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredicateParenthesizedExpressionParserRuleCall_1_0 = (RuleCall)cPredicateAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyExpressionParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//WhileExpression:
		//  "while" predicate=ParenthesizedExpression body=Expression;
		public ParserRule getRule() { return rule; }

		//"while" predicate=ParenthesizedExpression body=Expression
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//predicate=ParenthesizedExpression
		public Assignment getPredicateAssignment_1() { return cPredicateAssignment_1; }

		//ParenthesizedExpression
		public RuleCall getPredicateParenthesizedExpressionParserRuleCall_1_0() { return cPredicateParenthesizedExpressionParserRuleCall_1_0; }

		//body=Expression
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//Expression
		public RuleCall getBodyExpressionParserRuleCall_2_0() { return cBodyExpressionParserRuleCall_2_0; }
	}

	public class CasePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CasePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCaseExpressionParserRuleCall_1_0 = (RuleCall)cCaseAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenExpressionParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		
		//CasePart:
		//  "case" case=Expression ":" then=Expression;
		public ParserRule getRule() { return rule; }

		//"case" case=Expression ":" then=Expression
		public Group getGroup() { return cGroup; }

		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//case=Expression
		public Assignment getCaseAssignment_1() { return cCaseAssignment_1; }

		//Expression
		public RuleCall getCaseExpressionParserRuleCall_1_0() { return cCaseExpressionParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//then=Expression
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }

		//Expression
		public RuleCall getThenExpressionParserRuleCall_3_0() { return cThenExpressionParserRuleCall_3_0; }
	}

	public class BlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionsExpressionInsideBlockParserRuleCall_1_0_0 = (RuleCall)cExpressionsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BlockExpression:
		//  "{" (expressions+=ExpressionInsideBlock ";")+ "}";
		public ParserRule getRule() { return rule; }

		//"{" (expressions+=ExpressionInsideBlock ";")+ "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//(expressions+=ExpressionInsideBlock ";")+
		public Group getGroup_1() { return cGroup_1; }

		//expressions+=ExpressionInsideBlock
		public Assignment getExpressionsAssignment_1_0() { return cExpressionsAssignment_1_0; }

		//ExpressionInsideBlock
		public RuleCall getExpressionsExpressionInsideBlockParserRuleCall_1_0_0() { return cExpressionsExpressionInsideBlockParserRuleCall_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class ExpressionInsideBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionInsideBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExpressionInsideBlock returns Expression:
		//  VariableDeclaration|Expression;
		public ParserRule getRule() { return rule; }

		//VariableDeclaration|Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_0() { return cVariableDeclarationParserRuleCall_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cTypeTypeRefParserRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		
		//VariableDeclaration:
		//  ("def"|type=TypeRef) name=ID ":=" right=Expression;
		public ParserRule getRule() { return rule; }

		//("def"|type=TypeRef) name=ID ":=" right=Expression
		public Group getGroup() { return cGroup; }

		//"def"|type=TypeRef
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"def"
		public Keyword getDefKeyword_0_0() { return cDefKeyword_0_0; }

		//type=TypeRef
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_0_1_0() { return cTypeTypeRefParserRuleCall_0_1_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
	}

	public class DeclaredParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclaredParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeRefParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DeclaredParameter:
		//  type=TypeRef? name=ID;
		public ParserRule getRule() { return rule; }

		//type=TypeRef? name=ID
		public Group getGroup() { return cGroup; }

		//type=TypeRef?
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_0_0() { return cTypeTypeRefParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class SimpleFeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleFeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cParamsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cParamsExpressionParserRuleCall_1_1_0_0 = (RuleCall)cParamsAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_1_1_1_1_0 = (RuleCall)cParamsAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//SimpleFeatureCall returns FeatureCall:
		//  name=ID ("(" (params+=Expression ("," params+=Expression)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//name=ID ("(" (params+=Expression ("," params+=Expression)*)? ")")?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("(" (params+=Expression ("," params+=Expression)*)? ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//(params+=Expression ("," params+=Expression)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//params+=Expression
		public Assignment getParamsAssignment_1_1_0() { return cParamsAssignment_1_1_0; }

		//Expression
		public RuleCall getParamsExpressionParserRuleCall_1_1_0_0() { return cParamsExpressionParserRuleCall_1_1_0_0; }

		//("," params+=Expression)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//params+=Expression
		public Assignment getParamsAssignment_1_1_1_1() { return cParamsAssignment_1_1_1_1; }

		//Expression
		public RuleCall getParamsExpressionParserRuleCall_1_1_1_1_0() { return cParamsExpressionParserRuleCall_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class ConstructorCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeRefParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParamsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParamsExpressionParserRuleCall_2_1_0_0 = (RuleCall)cParamsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_2_1_1_1_0 = (RuleCall)cParamsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cInitializerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitializerBlockExpressionParserRuleCall_3_0 = (RuleCall)cInitializerAssignment_3.eContents().get(0);
		
		//ConstructorCall:
		//  "new" type=TypeRef ("(" (params+=Expression ("," params+=Expression)*)? ")")?
		//  initializer=BlockExpression?;
		public ParserRule getRule() { return rule; }

		//"new" type=TypeRef ("(" (params+=Expression ("," params+=Expression)*)? ")")?
		//initializer=BlockExpression?
		public Group getGroup() { return cGroup; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//type=TypeRef
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_1_0() { return cTypeTypeRefParserRuleCall_1_0; }

		//("(" (params+=Expression ("," params+=Expression)*)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//(params+=Expression ("," params+=Expression)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//params+=Expression
		public Assignment getParamsAssignment_2_1_0() { return cParamsAssignment_2_1_0; }

		//Expression
		public RuleCall getParamsExpressionParserRuleCall_2_1_0_0() { return cParamsExpressionParserRuleCall_2_1_0_0; }

		//("," params+=Expression)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//params+=Expression
		public Assignment getParamsAssignment_2_1_1_1() { return cParamsAssignment_2_1_1_1; }

		//Expression
		public RuleCall getParamsExpressionParserRuleCall_2_1_1_1_0() { return cParamsExpressionParserRuleCall_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//initializer=BlockExpression?
		public Assignment getInitializerAssignment_3() { return cInitializerAssignment_3; }

		//BlockExpression
		public RuleCall getInitializerBlockExpressionParserRuleCall_3_0() { return cInitializerBlockExpressionParserRuleCall_3_0; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cFalseKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cIsTrueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cIsTrueTrueKeyword_1_0 = (Keyword)cIsTrueAssignment_1.eContents().get(0);
		
		//BooleanLiteral:
		//  {BooleanLiteral} "false"|isTrue?="true";
		public ParserRule getRule() { return rule; }

		//{BooleanLiteral} "false"|isTrue?="true"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{BooleanLiteral} "false"
		public Group getGroup_0() { return cGroup_0; }

		//{BooleanLiteral}
		public Action getBooleanLiteralAction_0_0() { return cBooleanLiteralAction_0_0; }

		//"false"
		public Keyword getFalseKeyword_0_1() { return cFalseKeyword_0_1; }

		//isTrue?="true"
		public Assignment getIsTrueAssignment_1() { return cIsTrueAssignment_1; }

		//"true"
		public Keyword getIsTrueTrueKeyword_1_0() { return cIsTrueTrueKeyword_1_0; }
	}

	public class NullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullLiteral:
		//  {NullLiteral} "null";
		public ParserRule getRule() { return rule; }

		//{NullLiteral} "null"
		public Group getGroup() { return cGroup; }

		//{NullLiteral}
		public Action getNullLiteralAction_0() { return cNullLiteralAction_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntLiteral:
		//  value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//  value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class TypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeTypeCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cClassKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TypeLiteral:
		//  type=[types::Type|QualifiedName] "." "class";
		public ParserRule getRule() { return rule; }

		//type=[types::Type|QualifiedName] "." "class"
		public Group getGroup() { return cGroup; }

		//type=[types::Type|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[types::Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_0_0() { return cTypeTypeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeTypeQualifiedNameParserRuleCall_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//"class"
		public Keyword getClassKeyword_2() { return cClassKeyword_2; }
	}

	public class RichStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionsRichStringLiteralParserRuleCall_0_0 = (RuleCall)cExpressionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_0_0 = (RuleCall)cExpressionsAssignment_1_0.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionsRichStringLiteralParserRuleCall_1_1_0 = (RuleCall)cExpressionsAssignment_1_1.eContents().get(0);
		
		//RichString:
		//  expressions+=RichStringLiteral (expressions+=Expression expressions+=
		//  RichStringLiteral)*;
		public ParserRule getRule() { return rule; }

		//expressions+=RichStringLiteral (expressions+=Expression expressions+=
		//RichStringLiteral)*
		public Group getGroup() { return cGroup; }

		//expressions+=RichStringLiteral
		public Assignment getExpressionsAssignment_0() { return cExpressionsAssignment_0; }

		//RichStringLiteral
		public RuleCall getExpressionsRichStringLiteralParserRuleCall_0_0() { return cExpressionsRichStringLiteralParserRuleCall_0_0; }

		//(expressions+=Expression expressions+=RichStringLiteral)*
		public Group getGroup_1() { return cGroup_1; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_1_0() { return cExpressionsAssignment_1_0; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_0_0() { return cExpressionsExpressionParserRuleCall_1_0_0; }

		//expressions+=RichStringLiteral
		public Assignment getExpressionsAssignment_1_1() { return cExpressionsAssignment_1_1; }

		//RichStringLiteral
		public RuleCall getExpressionsRichStringLiteralParserRuleCall_1_1_0() { return cExpressionsRichStringLiteralParserRuleCall_1_1_0; }
	}

	public class RichStringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueRICH_STRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//RichStringLiteral:
		//  value=RICH_STRING;
		public ParserRule getRule() { return rule; }

		//value=RICH_STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//RICH_STRING
		public RuleCall getValueRICH_STRINGTerminalRuleCall_0() { return cValueRICH_STRINGTerminalRuleCall_0; }
	}
	
	
	private ExpressionElements pExpression;
	private AssignmentElements pAssignment;
	private OrExpressionElements pOrExpression;
	private AndExpressionElements pAndExpression;
	private EqualityExpressionElements pEqualityExpression;
	private RelationalExpressionElements pRelationalExpression;
	private AdditiveExpressionElements pAdditiveExpression;
	private MultiplicativeExpressionElements pMultiplicativeExpression;
	private OtherOperatorExpressionElements pOtherOperatorExpression;
	private UnaryOperationElements pUnaryOperation;
	private FeatureCallElements pFeatureCall;
	private PrimaryExpressionElements pPrimaryExpression;
	private ClosureElements pClosure;
	private ParenthesizedExpressionElements pParenthesizedExpression;
	private IfExpressionElements pIfExpression;
	private SwitchExpressionElements pSwitchExpression;
	private WhileExpressionElements pWhileExpression;
	private CasePartElements pCasePart;
	private BlockExpressionElements pBlockExpression;
	private ExpressionInsideBlockElements pExpressionInsideBlock;
	private VariableDeclarationElements pVariableDeclaration;
	private DeclaredParameterElements pDeclaredParameter;
	private SimpleFeatureCallElements pSimpleFeatureCall;
	private ConstructorCallElements pConstructorCall;
	private BooleanLiteralElements pBooleanLiteral;
	private NullLiteralElements pNullLiteral;
	private IntLiteralElements pIntLiteral;
	private StringLiteralElements pStringLiteral;
	private TypeLiteralElements pTypeLiteral;
	private RichStringElements pRichString;
	private RichStringLiteralElements pRichStringLiteral;
	private TerminalRule tRICH_STRING;
	
	private final GrammarProvider grammarProvider;

	private XtypeGrammarAccess gaXtype;

	@Inject
	public XpressionGrammarAccess(GrammarProvider grammarProvider,
		XtypeGrammarAccess gaXtype) {
		this.grammarProvider = grammarProvider;
		this.gaXtype = gaXtype;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//Expression:
	//  Assignment;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Assignment returns Expression:
	//  OrExpression ({BinaryOperation.left=current} operator=( "=" | "+=" ) right=OrExpression
	//  )?;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//OrExpression returns Expression:
	//  AndExpression ({BinaryOperation.left=current} operator="||" right=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return (pOrExpression != null) ? pOrExpression : (pOrExpression = new OrExpressionElements());
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//AndExpression returns Expression:
	//  EqualityExpression ({BinaryOperation.left=current} operator="&&" right=
	//  EqualityExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return (pAndExpression != null) ? pAndExpression : (pAndExpression = new AndExpressionElements());
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//EqualityExpression returns Expression:
	//  RelationalExpression ({BinaryOperation.left=current} operator=( "==" | "!=" ) right=
	//  RelationalExpression)*;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return (pEqualityExpression != null) ? pEqualityExpression : (pEqualityExpression = new EqualityExpressionElements());
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//RelationalExpression returns Expression:
	//  AdditiveExpression ({InstanceOfExpression.expression=current} "instanceof" type=[
	//  types::Type|QualifiedName]|{BinaryOperation.left=current} operator=( ">=" | "<=" | ">"
	//  | "<" ) right=AdditiveExpression)*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return (pRelationalExpression != null) ? pRelationalExpression : (pRelationalExpression = new RelationalExpressionElements());
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//AdditiveExpression returns Expression:
	//  MultiplicativeExpression ({BinaryOperation.left=current} operator=( "+" | "-" ) right=
	//  MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return (pAdditiveExpression != null) ? pAdditiveExpression : (pAdditiveExpression = new AdditiveExpressionElements());
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression returns Expression:
	//  OtherOperatorExpression ({BinaryOperation.left=current} operator=( "*" | "/" | "%" )
	//  right=OtherOperatorExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return (pMultiplicativeExpression != null) ? pMultiplicativeExpression : (pMultiplicativeExpression = new MultiplicativeExpressionElements());
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//OtherOperatorExpression returns Expression:
	//  UnaryOperation ({BinaryOperation.left=current} operator=( "->" | ".." ) right=
	//  UnaryOperation)*;
	public OtherOperatorExpressionElements getOtherOperatorExpressionAccess() {
		return (pOtherOperatorExpression != null) ? pOtherOperatorExpression : (pOtherOperatorExpression = new OtherOperatorExpressionElements());
	}
	
	public ParserRule getOtherOperatorExpressionRule() {
		return getOtherOperatorExpressionAccess().getRule();
	}

	//UnaryOperation returns Expression:
	//  {UnaryOperation} operator=( "!" | "-" | "+" ) target=FeatureCall|{CastedExpression} "("
	//  type=TypeRef ")" target=Expression|FeatureCall;
	public UnaryOperationElements getUnaryOperationAccess() {
		return (pUnaryOperation != null) ? pUnaryOperation : (pUnaryOperation = new UnaryOperationElements());
	}
	
	public ParserRule getUnaryOperationRule() {
		return getUnaryOperationAccess().getRule();
	}

	//FeatureCall returns Expression:
	//  PrimaryExpression ({FeatureCall.target=current} "." name=ID ("(" (params+=Expression (
	//  "," params+=Expression)*)? ")")?)*;
	public FeatureCallElements getFeatureCallAccess() {
		return (pFeatureCall != null) ? pFeatureCall : (pFeatureCall = new FeatureCallElements());
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//  Closure|BooleanLiteral|IntLiteral|NullLiteral|StringLiteral|TypeLiteral|
	//  ConstructorCall|BlockExpression|RichString|IfExpression|SwitchExpression|
	//  WhileExpression|SimpleFeatureCall|ParenthesizedExpression;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//Closure returns Expression:
	//  {Closure} (params+=DeclaredParameter ("," params+=DeclaredParameter)*)? "|"
	//  expression=Expression;
	public ClosureElements getClosureAccess() {
		return (pClosure != null) ? pClosure : (pClosure = new ClosureElements());
	}
	
	public ParserRule getClosureRule() {
		return getClosureAccess().getRule();
	}

	//ParenthesizedExpression returns Expression:
	//  "(" Expression ")";
	public ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return (pParenthesizedExpression != null) ? pParenthesizedExpression : (pParenthesizedExpression = new ParenthesizedExpressionElements());
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//IfExpression:
	//  "if" "(" if=Expression ")" then=Expression ("else" else=Expression)?;
	public IfExpressionElements getIfExpressionAccess() {
		return (pIfExpression != null) ? pIfExpression : (pIfExpression = new IfExpressionElements());
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}

	//SwitchExpression:
	//  "switch" switch=Expression? "{" cases+=CasePart+ ("default" ":" default=Expression)?
	//  "}";
	public SwitchExpressionElements getSwitchExpressionAccess() {
		return (pSwitchExpression != null) ? pSwitchExpression : (pSwitchExpression = new SwitchExpressionElements());
	}
	
	public ParserRule getSwitchExpressionRule() {
		return getSwitchExpressionAccess().getRule();
	}

	//WhileExpression:
	//  "while" predicate=ParenthesizedExpression body=Expression;
	public WhileExpressionElements getWhileExpressionAccess() {
		return (pWhileExpression != null) ? pWhileExpression : (pWhileExpression = new WhileExpressionElements());
	}
	
	public ParserRule getWhileExpressionRule() {
		return getWhileExpressionAccess().getRule();
	}

	//CasePart:
	//  "case" case=Expression ":" then=Expression;
	public CasePartElements getCasePartAccess() {
		return (pCasePart != null) ? pCasePart : (pCasePart = new CasePartElements());
	}
	
	public ParserRule getCasePartRule() {
		return getCasePartAccess().getRule();
	}

	//BlockExpression:
	//  "{" (expressions+=ExpressionInsideBlock ";")+ "}";
	public BlockExpressionElements getBlockExpressionAccess() {
		return (pBlockExpression != null) ? pBlockExpression : (pBlockExpression = new BlockExpressionElements());
	}
	
	public ParserRule getBlockExpressionRule() {
		return getBlockExpressionAccess().getRule();
	}

	//ExpressionInsideBlock returns Expression:
	//  VariableDeclaration|Expression;
	public ExpressionInsideBlockElements getExpressionInsideBlockAccess() {
		return (pExpressionInsideBlock != null) ? pExpressionInsideBlock : (pExpressionInsideBlock = new ExpressionInsideBlockElements());
	}
	
	public ParserRule getExpressionInsideBlockRule() {
		return getExpressionInsideBlockAccess().getRule();
	}

	//VariableDeclaration:
	//  ("def"|type=TypeRef) name=ID ":=" right=Expression;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//DeclaredParameter:
	//  type=TypeRef? name=ID;
	public DeclaredParameterElements getDeclaredParameterAccess() {
		return (pDeclaredParameter != null) ? pDeclaredParameter : (pDeclaredParameter = new DeclaredParameterElements());
	}
	
	public ParserRule getDeclaredParameterRule() {
		return getDeclaredParameterAccess().getRule();
	}

	//SimpleFeatureCall returns FeatureCall:
	//  name=ID ("(" (params+=Expression ("," params+=Expression)*)? ")")?;
	public SimpleFeatureCallElements getSimpleFeatureCallAccess() {
		return (pSimpleFeatureCall != null) ? pSimpleFeatureCall : (pSimpleFeatureCall = new SimpleFeatureCallElements());
	}
	
	public ParserRule getSimpleFeatureCallRule() {
		return getSimpleFeatureCallAccess().getRule();
	}

	//ConstructorCall:
	//  "new" type=TypeRef ("(" (params+=Expression ("," params+=Expression)*)? ")")?
	//  initializer=BlockExpression?;
	public ConstructorCallElements getConstructorCallAccess() {
		return (pConstructorCall != null) ? pConstructorCall : (pConstructorCall = new ConstructorCallElements());
	}
	
	public ParserRule getConstructorCallRule() {
		return getConstructorCallAccess().getRule();
	}

	//BooleanLiteral:
	//  {BooleanLiteral} "false"|isTrue?="true";
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//NullLiteral:
	//  {NullLiteral} "null";
	public NullLiteralElements getNullLiteralAccess() {
		return (pNullLiteral != null) ? pNullLiteral : (pNullLiteral = new NullLiteralElements());
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//IntLiteral:
	//  value=INT;
	public IntLiteralElements getIntLiteralAccess() {
		return (pIntLiteral != null) ? pIntLiteral : (pIntLiteral = new IntLiteralElements());
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}

	//StringLiteral:
	//  value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//TypeLiteral:
	//  type=[types::Type|QualifiedName] "." "class";
	public TypeLiteralElements getTypeLiteralAccess() {
		return (pTypeLiteral != null) ? pTypeLiteral : (pTypeLiteral = new TypeLiteralElements());
	}
	
	public ParserRule getTypeLiteralRule() {
		return getTypeLiteralAccess().getRule();
	}

	//RichString:
	//  expressions+=RichStringLiteral (expressions+=Expression expressions+=
	//  RichStringLiteral)*;
	public RichStringElements getRichStringAccess() {
		return (pRichString != null) ? pRichString : (pRichString = new RichStringElements());
	}
	
	public ParserRule getRichStringRule() {
		return getRichStringAccess().getRule();
	}

	//RichStringLiteral:
	//  value=RICH_STRING;
	public RichStringLiteralElements getRichStringLiteralAccess() {
		return (pRichStringLiteral != null) ? pRichStringLiteral : (pRichStringLiteral = new RichStringLiteralElements());
	}
	
	public ParserRule getRichStringLiteralRule() {
		return getRichStringLiteralAccess().getRule();
	}

	//terminal RICH_STRING:
	//  "\u00BB" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\u00AB"))* "\u00AB";
	public TerminalRule getRICH_STRINGRule() {
		return (tRICH_STRING != null) ? tRICH_STRING : (tRICH_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RICH_STRING"));
	} 

	//TypeRef:
	//  SimpleTypeRef|FunctionTypeRef;
	public XtypeGrammarAccess.TypeRefElements getTypeRefAccess() {
		return gaXtype.getTypeRefAccess();
	}
	
	public ParserRule getTypeRefRule() {
		return getTypeRefAccess().getRule();
	}

	//FunctionTypeRef:
	//  ("(" paramTypes+=TypeRef ("," paramTypes+=TypeRef)* ")")? "=>" returnType=TypeRef;
	public XtypeGrammarAccess.FunctionTypeRefElements getFunctionTypeRefAccess() {
		return gaXtype.getFunctionTypeRefAccess();
	}
	
	public ParserRule getFunctionTypeRefRule() {
		return getFunctionTypeRefAccess().getRule();
	}

	//SimpleTypeRef:
	//  type=[types::Type|QualifiedName] ("<" typeParams+=TypeParam ("," typeParams+=
	//  TypeParam)* ">")?;
	public XtypeGrammarAccess.SimpleTypeRefElements getSimpleTypeRefAccess() {
		return gaXtype.getSimpleTypeRefAccess();
	}
	
	public ParserRule getSimpleTypeRefRule() {
		return getSimpleTypeRefAccess().getRule();
	}

	//TypeParam returns TypeRef:
	//  TypeRef|WildcardParam;
	public XtypeGrammarAccess.TypeParamElements getTypeParamAccess() {
		return gaXtype.getTypeParamAccess();
	}
	
	public ParserRule getTypeParamRule() {
		return getTypeParamAccess().getRule();
	}

	//WildcardParam returns TypeRef:
	//  {WildcardParam} "?" ("extends" extends=TypeRef|"super" super=TypeRef)?;
	public XtypeGrammarAccess.WildcardParamElements getWildcardParamAccess() {
		return gaXtype.getWildcardParamAccess();
	}
	
	public ParserRule getWildcardParamRule() {
		return getWildcardParamAccess().getRule();
	}

	//TypeParamDeclaration:
	//  name=ID ("extends" extends+=TypeRef ("&" extends+=TypeRef)*|"super" super=TypeRef)?;
	public XtypeGrammarAccess.TypeParamDeclarationElements getTypeParamDeclarationAccess() {
		return gaXtype.getTypeParamDeclarationAccess();
	}
	
	public ParserRule getTypeParamDeclarationRule() {
		return getTypeParamDeclarationAccess().getRule();
	}

	//QualifiedName returns ecore::EString:
	//  ID ("." ID)*;
	public XtypeGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXtype.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaXtype.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	} 
}
