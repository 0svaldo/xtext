/*
* generated by Xtext
*/

package org.eclipse.xtext.xbase.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class XtypeGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleTypeRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionTypeRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeRef:
		//  SimpleTypeRef|FunctionTypeRef;
		public ParserRule getRule() { return rule; }

		//SimpleTypeRef|FunctionTypeRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleTypeRef
		public RuleCall getSimpleTypeRefParserRuleCall_0() { return cSimpleTypeRefParserRuleCall_0; }

		//FunctionTypeRef
		public RuleCall getFunctionTypeRefParserRuleCall_1() { return cFunctionTypeRefParserRuleCall_1; }
	}

	public class FunctionTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionTypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cParamTypesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cParamTypesTypeRefParserRuleCall_0_1_0 = (RuleCall)cParamTypesAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cParamTypesAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cParamTypesTypeRefParserRuleCall_0_2_1_0 = (RuleCall)cParamTypesAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReturnTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReturnTypeTypeRefParserRuleCall_2_0 = (RuleCall)cReturnTypeAssignment_2.eContents().get(0);
		
		//FunctionTypeRef:
		//  ("(" paramTypes+=TypeRef ("," paramTypes+=TypeRef)* ")")? "=>" returnType=TypeRef;
		public ParserRule getRule() { return rule; }

		//("(" paramTypes+=TypeRef ("," paramTypes+=TypeRef)* ")")? "=>" returnType=TypeRef
		public Group getGroup() { return cGroup; }

		//("(" paramTypes+=TypeRef ("," paramTypes+=TypeRef)* ")")?
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//paramTypes+=TypeRef
		public Assignment getParamTypesAssignment_0_1() { return cParamTypesAssignment_0_1; }

		//TypeRef
		public RuleCall getParamTypesTypeRefParserRuleCall_0_1_0() { return cParamTypesTypeRefParserRuleCall_0_1_0; }

		//("," paramTypes+=TypeRef)*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//","
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }

		//paramTypes+=TypeRef
		public Assignment getParamTypesAssignment_0_2_1() { return cParamTypesAssignment_0_2_1; }

		//TypeRef
		public RuleCall getParamTypesTypeRefParserRuleCall_0_2_1_0() { return cParamTypesTypeRefParserRuleCall_0_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//returnType=TypeRef
		public Assignment getReturnTypeAssignment_2() { return cReturnTypeAssignment_2; }

		//TypeRef
		public RuleCall getReturnTypeTypeRefParserRuleCall_2_0() { return cReturnTypeTypeRefParserRuleCall_2_0; }
	}

	public class SimpleTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleTypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeParamsTypeParamParserRuleCall_1_1_0 = (RuleCall)cTypeParamsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTypeParamsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTypeParamsTypeParamParserRuleCall_1_2_1_0 = (RuleCall)cTypeParamsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//SimpleTypeRef:
		//  type=[types::Type|QualifiedName] ("<" typeParams+=TypeParam ("," typeParams+=
		//  TypeParam)* ">")?;
		public ParserRule getRule() { return rule; }

		//type=[types::Type|QualifiedName] ("<" typeParams+=TypeParam ("," typeParams+=
		//TypeParam)* ">")?
		public Group getGroup() { return cGroup; }

		//type=[types::Type|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[types::Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_0_0() { return cTypeTypeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeTypeQualifiedNameParserRuleCall_0_0_1; }

		//("<" typeParams+=TypeParam ("," typeParams+=TypeParam)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//typeParams+=TypeParam
		public Assignment getTypeParamsAssignment_1_1() { return cTypeParamsAssignment_1_1; }

		//TypeParam
		public RuleCall getTypeParamsTypeParamParserRuleCall_1_1_0() { return cTypeParamsTypeParamParserRuleCall_1_1_0; }

		//("," typeParams+=TypeParam)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//typeParams+=TypeParam
		public Assignment getTypeParamsAssignment_1_2_1() { return cTypeParamsAssignment_1_2_1; }

		//TypeParam
		public RuleCall getTypeParamsTypeParamParserRuleCall_1_2_1_0() { return cTypeParamsTypeParamParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
	}

	public class TypeParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWildcardParamParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeParam returns TypeRef:
		//  TypeRef|WildcardParam;
		public ParserRule getRule() { return rule; }

		//TypeRef|WildcardParam
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeRef
		public RuleCall getTypeRefParserRuleCall_0() { return cTypeRefParserRuleCall_0; }

		//WildcardParam
		public RuleCall getWildcardParamParserRuleCall_1() { return cWildcardParamParserRuleCall_1; }
	}

	public class WildcardParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WildcardParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWildcardParamAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cExtendsKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cExtendsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cExtendsTypeRefParserRuleCall_2_0_1_0 = (RuleCall)cExtendsAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cSuperKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cSuperAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cSuperTypeRefParserRuleCall_2_1_1_0 = (RuleCall)cSuperAssignment_2_1_1.eContents().get(0);
		
		//WildcardParam returns TypeRef:
		//  {WildcardParam} "?" ("extends" extends=TypeRef|"super" super=TypeRef)?;
		public ParserRule getRule() { return rule; }

		//{WildcardParam} "?" ("extends" extends=TypeRef|"super" super=TypeRef)?
		public Group getGroup() { return cGroup; }

		//{WildcardParam}
		public Action getWildcardParamAction_0() { return cWildcardParamAction_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }

		//("extends" extends=TypeRef|"super" super=TypeRef)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"extends" extends=TypeRef
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"extends"
		public Keyword getExtendsKeyword_2_0_0() { return cExtendsKeyword_2_0_0; }

		//extends=TypeRef
		public Assignment getExtendsAssignment_2_0_1() { return cExtendsAssignment_2_0_1; }

		//TypeRef
		public RuleCall getExtendsTypeRefParserRuleCall_2_0_1_0() { return cExtendsTypeRefParserRuleCall_2_0_1_0; }

		//"super" super=TypeRef
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"super"
		public Keyword getSuperKeyword_2_1_0() { return cSuperKeyword_2_1_0; }

		//super=TypeRef
		public Assignment getSuperAssignment_2_1_1() { return cSuperAssignment_2_1_1; }

		//TypeRef
		public RuleCall getSuperTypeRefParserRuleCall_2_1_1_0() { return cSuperTypeRefParserRuleCall_2_1_1_0; }
	}

	public class TypeParamDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeParamDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cExtendsKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cExtendsAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExtendsTypeRefParserRuleCall_1_0_1_0 = (RuleCall)cExtendsAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cAmpersandKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cExtendsAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cExtendsTypeRefParserRuleCall_1_0_2_1_0 = (RuleCall)cExtendsAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cSuperKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cSuperAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSuperTypeRefParserRuleCall_1_1_1_0 = (RuleCall)cSuperAssignment_1_1_1.eContents().get(0);
		
		//TypeParamDeclaration:
		//  name=ID ("extends" extends+=TypeRef ("&" extends+=TypeRef)*|"super" super=TypeRef)?;
		public ParserRule getRule() { return rule; }

		//name=ID ("extends" extends+=TypeRef ("&" extends+=TypeRef)*|"super" super=TypeRef)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("extends" extends+=TypeRef ("&" extends+=TypeRef)*|"super" super=TypeRef)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"extends" extends+=TypeRef ("&" extends+=TypeRef)*
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"extends"
		public Keyword getExtendsKeyword_1_0_0() { return cExtendsKeyword_1_0_0; }

		//extends+=TypeRef
		public Assignment getExtendsAssignment_1_0_1() { return cExtendsAssignment_1_0_1; }

		//TypeRef
		public RuleCall getExtendsTypeRefParserRuleCall_1_0_1_0() { return cExtendsTypeRefParserRuleCall_1_0_1_0; }

		//("&" extends+=TypeRef)*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//"&"
		public Keyword getAmpersandKeyword_1_0_2_0() { return cAmpersandKeyword_1_0_2_0; }

		//extends+=TypeRef
		public Assignment getExtendsAssignment_1_0_2_1() { return cExtendsAssignment_1_0_2_1; }

		//TypeRef
		public RuleCall getExtendsTypeRefParserRuleCall_1_0_2_1_0() { return cExtendsTypeRefParserRuleCall_1_0_2_1_0; }

		//"super" super=TypeRef
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"super"
		public Keyword getSuperKeyword_1_1_0() { return cSuperKeyword_1_1_0; }

		//super=TypeRef
		public Assignment getSuperAssignment_1_1_1() { return cSuperAssignment_1_1_1; }

		//TypeRef
		public RuleCall getSuperTypeRefParserRuleCall_1_1_1_0() { return cSuperTypeRefParserRuleCall_1_1_1_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName returns ecore::EString:
		//  ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private TypeRefElements pTypeRef;
	private FunctionTypeRefElements pFunctionTypeRef;
	private SimpleTypeRefElements pSimpleTypeRef;
	private TypeParamElements pTypeParam;
	private WildcardParamElements pWildcardParam;
	private TypeParamDeclarationElements pTypeParamDeclaration;
	private QualifiedNameElements pQualifiedName;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public XtypeGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TypeRef:
	//  SimpleTypeRef|FunctionTypeRef;
	public TypeRefElements getTypeRefAccess() {
		return (pTypeRef != null) ? pTypeRef : (pTypeRef = new TypeRefElements());
	}
	
	public ParserRule getTypeRefRule() {
		return getTypeRefAccess().getRule();
	}

	//FunctionTypeRef:
	//  ("(" paramTypes+=TypeRef ("," paramTypes+=TypeRef)* ")")? "=>" returnType=TypeRef;
	public FunctionTypeRefElements getFunctionTypeRefAccess() {
		return (pFunctionTypeRef != null) ? pFunctionTypeRef : (pFunctionTypeRef = new FunctionTypeRefElements());
	}
	
	public ParserRule getFunctionTypeRefRule() {
		return getFunctionTypeRefAccess().getRule();
	}

	//SimpleTypeRef:
	//  type=[types::Type|QualifiedName] ("<" typeParams+=TypeParam ("," typeParams+=
	//  TypeParam)* ">")?;
	public SimpleTypeRefElements getSimpleTypeRefAccess() {
		return (pSimpleTypeRef != null) ? pSimpleTypeRef : (pSimpleTypeRef = new SimpleTypeRefElements());
	}
	
	public ParserRule getSimpleTypeRefRule() {
		return getSimpleTypeRefAccess().getRule();
	}

	//TypeParam returns TypeRef:
	//  TypeRef|WildcardParam;
	public TypeParamElements getTypeParamAccess() {
		return (pTypeParam != null) ? pTypeParam : (pTypeParam = new TypeParamElements());
	}
	
	public ParserRule getTypeParamRule() {
		return getTypeParamAccess().getRule();
	}

	//WildcardParam returns TypeRef:
	//  {WildcardParam} "?" ("extends" extends=TypeRef|"super" super=TypeRef)?;
	public WildcardParamElements getWildcardParamAccess() {
		return (pWildcardParam != null) ? pWildcardParam : (pWildcardParam = new WildcardParamElements());
	}
	
	public ParserRule getWildcardParamRule() {
		return getWildcardParamAccess().getRule();
	}

	//TypeParamDeclaration:
	//  name=ID ("extends" extends+=TypeRef ("&" extends+=TypeRef)*|"super" super=TypeRef)?;
	public TypeParamDeclarationElements getTypeParamDeclarationAccess() {
		return (pTypeParamDeclaration != null) ? pTypeParamDeclaration : (pTypeParamDeclaration = new TypeParamDeclarationElements());
	}
	
	public ParserRule getTypeParamDeclarationRule() {
		return getTypeParamDeclarationAccess().getRule();
	}

	//QualifiedName returns ecore::EString:
	//  ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
