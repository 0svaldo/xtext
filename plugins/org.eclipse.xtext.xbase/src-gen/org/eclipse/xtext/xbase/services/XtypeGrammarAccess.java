/*
* generated by Xtext
*/

package org.eclipse.xtext.xbase.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class XtypeGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class XTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XTypeRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXSimpleTypeRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXFunctionTypeRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XTypeRef:
		//  XSimpleTypeRef|XFunctionTypeRef;
		public ParserRule getRule() { return rule; }

		//XSimpleTypeRef|XFunctionTypeRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//XSimpleTypeRef
		public RuleCall getXSimpleTypeRefParserRuleCall_0() { return cXSimpleTypeRefParserRuleCall_0; }

		//XFunctionTypeRef
		public RuleCall getXFunctionTypeRefParserRuleCall_1() { return cXFunctionTypeRefParserRuleCall_1; }
	}

	public class XFunctionTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XFunctionTypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cParamTypesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cParamTypesXTypeRefParserRuleCall_0_1_0 = (RuleCall)cParamTypesAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cParamTypesAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cParamTypesXTypeRefParserRuleCall_0_2_1_0 = (RuleCall)cParamTypesAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReturnTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReturnTypeXTypeRefParserRuleCall_2_0 = (RuleCall)cReturnTypeAssignment_2.eContents().get(0);
		
		//XFunctionTypeRef:
		//  ("(" paramTypes+=XTypeRef ("," paramTypes+=XTypeRef)* ")")? "=>"
		//  returnType=XTypeRef;
		public ParserRule getRule() { return rule; }

		//("(" paramTypes+=XTypeRef ("," paramTypes+=XTypeRef)* ")")? "=>"
		//returnType=XTypeRef
		public Group getGroup() { return cGroup; }

		//("(" paramTypes+=XTypeRef ("," paramTypes+=XTypeRef)* ")")?
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//paramTypes+=XTypeRef
		public Assignment getParamTypesAssignment_0_1() { return cParamTypesAssignment_0_1; }

		//XTypeRef
		public RuleCall getParamTypesXTypeRefParserRuleCall_0_1_0() { return cParamTypesXTypeRefParserRuleCall_0_1_0; }

		//("," paramTypes+=XTypeRef)*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//","
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }

		//paramTypes+=XTypeRef
		public Assignment getParamTypesAssignment_0_2_1() { return cParamTypesAssignment_0_2_1; }

		//XTypeRef
		public RuleCall getParamTypesXTypeRefParserRuleCall_0_2_1_0() { return cParamTypesXTypeRefParserRuleCall_0_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//returnType=XTypeRef
		public Assignment getReturnTypeAssignment_2() { return cReturnTypeAssignment_2; }

		//XTypeRef
		public RuleCall getReturnTypeXTypeRefParserRuleCall_2_0() { return cReturnTypeXTypeRefParserRuleCall_2_0; }
	}

	public class XSimpleTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XSimpleTypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeJvmTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeJvmTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeParamsXTypeParamParserRuleCall_1_1_0 = (RuleCall)cTypeParamsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTypeParamsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTypeParamsXTypeParamParserRuleCall_1_2_1_0 = (RuleCall)cTypeParamsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//XSimpleTypeRef:
		//  type=[types::JvmType|QualifiedName] ("<" typeParams+=XTypeParam (","
		//  typeParams+=XTypeParam)* ">")?;
		public ParserRule getRule() { return rule; }

		//type=[types::JvmType|QualifiedName] ("<" typeParams+=XTypeParam (","
		//typeParams+=XTypeParam)* ">")?
		public Group getGroup() { return cGroup; }

		//type=[types::JvmType|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[types::JvmType|QualifiedName]
		public CrossReference getTypeJvmTypeCrossReference_0_0() { return cTypeJvmTypeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeJvmTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeJvmTypeQualifiedNameParserRuleCall_0_0_1; }

		//("<" typeParams+=XTypeParam ("," typeParams+=XTypeParam)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//typeParams+=XTypeParam
		public Assignment getTypeParamsAssignment_1_1() { return cTypeParamsAssignment_1_1; }

		//XTypeParam
		public RuleCall getTypeParamsXTypeParamParserRuleCall_1_1_0() { return cTypeParamsXTypeParamParserRuleCall_1_1_0; }

		//("," typeParams+=XTypeParam)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//typeParams+=XTypeParam
		public Assignment getTypeParamsAssignment_1_2_1() { return cTypeParamsAssignment_1_2_1; }

		//XTypeParam
		public RuleCall getTypeParamsXTypeParamParserRuleCall_1_2_1_0() { return cTypeParamsXTypeParamParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
	}

	public class XTypeParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XTypeParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXTypeRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXWildcardParamParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XTypeParam returns XTypeRef:
		//  XTypeRef|XWildcardParam;
		public ParserRule getRule() { return rule; }

		//XTypeRef|XWildcardParam
		public Alternatives getAlternatives() { return cAlternatives; }

		//XTypeRef
		public RuleCall getXTypeRefParserRuleCall_0() { return cXTypeRefParserRuleCall_0; }

		//XWildcardParam
		public RuleCall getXWildcardParamParserRuleCall_1() { return cXWildcardParamParserRuleCall_1; }
	}

	public class XWildcardParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XWildcardParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXWildcardParamAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cExtendsKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cExtendsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cExtendsXTypeRefParserRuleCall_2_0_1_0 = (RuleCall)cExtendsAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cSuperKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cSuperAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cSuperXTypeRefParserRuleCall_2_1_1_0 = (RuleCall)cSuperAssignment_2_1_1.eContents().get(0);
		
		//XWildcardParam returns XTypeRef:
		//  {XWildcardParam} "?" ("extends" extends=XTypeRef|"super" super=XTypeRef)?;
		public ParserRule getRule() { return rule; }

		//{XWildcardParam} "?" ("extends" extends=XTypeRef|"super" super=XTypeRef)?
		public Group getGroup() { return cGroup; }

		//{XWildcardParam}
		public Action getXWildcardParamAction_0() { return cXWildcardParamAction_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }

		//("extends" extends=XTypeRef|"super" super=XTypeRef)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"extends" extends=XTypeRef
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"extends"
		public Keyword getExtendsKeyword_2_0_0() { return cExtendsKeyword_2_0_0; }

		//extends=XTypeRef
		public Assignment getExtendsAssignment_2_0_1() { return cExtendsAssignment_2_0_1; }

		//XTypeRef
		public RuleCall getExtendsXTypeRefParserRuleCall_2_0_1_0() { return cExtendsXTypeRefParserRuleCall_2_0_1_0; }

		//"super" super=XTypeRef
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"super"
		public Keyword getSuperKeyword_2_1_0() { return cSuperKeyword_2_1_0; }

		//super=XTypeRef
		public Assignment getSuperAssignment_2_1_1() { return cSuperAssignment_2_1_1; }

		//XTypeRef
		public RuleCall getSuperXTypeRefParserRuleCall_2_1_1_0() { return cSuperXTypeRefParserRuleCall_2_1_1_0; }
	}

	public class XTypeParamDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XTypeParamDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cExtendsKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cExtendsAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExtendsXTypeRefParserRuleCall_1_0_1_0 = (RuleCall)cExtendsAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cAmpersandKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cExtendsAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cExtendsXTypeRefParserRuleCall_1_0_2_1_0 = (RuleCall)cExtendsAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cSuperKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cSuperAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSuperXTypeRefParserRuleCall_1_1_1_0 = (RuleCall)cSuperAssignment_1_1_1.eContents().get(0);
		
		//XTypeParamDeclaration:
		//  name=ID ("extends" extends+=XTypeRef ("&" extends+=XTypeRef)*|"super"
		//  super=XTypeRef)?;
		public ParserRule getRule() { return rule; }

		//name=ID ("extends" extends+=XTypeRef ("&" extends+=XTypeRef)*|"super"
		//super=XTypeRef)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("extends" extends+=XTypeRef ("&" extends+=XTypeRef)*|"super" super=XTypeRef)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"extends" extends+=XTypeRef ("&" extends+=XTypeRef)*
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"extends"
		public Keyword getExtendsKeyword_1_0_0() { return cExtendsKeyword_1_0_0; }

		//extends+=XTypeRef
		public Assignment getExtendsAssignment_1_0_1() { return cExtendsAssignment_1_0_1; }

		//XTypeRef
		public RuleCall getExtendsXTypeRefParserRuleCall_1_0_1_0() { return cExtendsXTypeRefParserRuleCall_1_0_1_0; }

		//("&" extends+=XTypeRef)*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//"&"
		public Keyword getAmpersandKeyword_1_0_2_0() { return cAmpersandKeyword_1_0_2_0; }

		//extends+=XTypeRef
		public Assignment getExtendsAssignment_1_0_2_1() { return cExtendsAssignment_1_0_2_1; }

		//XTypeRef
		public RuleCall getExtendsXTypeRefParserRuleCall_1_0_2_1_0() { return cExtendsXTypeRefParserRuleCall_1_0_2_1_0; }

		//"super" super=XTypeRef
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"super"
		public Keyword getSuperKeyword_1_1_0() { return cSuperKeyword_1_1_0; }

		//super=XTypeRef
		public Assignment getSuperAssignment_1_1_1() { return cSuperAssignment_1_1_1; }

		//XTypeRef
		public RuleCall getSuperXTypeRefParserRuleCall_1_1_1_0() { return cSuperXTypeRefParserRuleCall_1_1_1_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName returns ecore::EString:
		//  ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private XTypeRefElements pXTypeRef;
	private XFunctionTypeRefElements pXFunctionTypeRef;
	private XSimpleTypeRefElements pXSimpleTypeRef;
	private XTypeParamElements pXTypeParam;
	private XWildcardParamElements pXWildcardParam;
	private XTypeParamDeclarationElements pXTypeParamDeclaration;
	private QualifiedNameElements pQualifiedName;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public XtypeGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//XTypeRef:
	//  XSimpleTypeRef|XFunctionTypeRef;
	public XTypeRefElements getXTypeRefAccess() {
		return (pXTypeRef != null) ? pXTypeRef : (pXTypeRef = new XTypeRefElements());
	}
	
	public ParserRule getXTypeRefRule() {
		return getXTypeRefAccess().getRule();
	}

	//XFunctionTypeRef:
	//  ("(" paramTypes+=XTypeRef ("," paramTypes+=XTypeRef)* ")")? "=>"
	//  returnType=XTypeRef;
	public XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return (pXFunctionTypeRef != null) ? pXFunctionTypeRef : (pXFunctionTypeRef = new XFunctionTypeRefElements());
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//XSimpleTypeRef:
	//  type=[types::JvmType|QualifiedName] ("<" typeParams+=XTypeParam (","
	//  typeParams+=XTypeParam)* ">")?;
	public XSimpleTypeRefElements getXSimpleTypeRefAccess() {
		return (pXSimpleTypeRef != null) ? pXSimpleTypeRef : (pXSimpleTypeRef = new XSimpleTypeRefElements());
	}
	
	public ParserRule getXSimpleTypeRefRule() {
		return getXSimpleTypeRefAccess().getRule();
	}

	//XTypeParam returns XTypeRef:
	//  XTypeRef|XWildcardParam;
	public XTypeParamElements getXTypeParamAccess() {
		return (pXTypeParam != null) ? pXTypeParam : (pXTypeParam = new XTypeParamElements());
	}
	
	public ParserRule getXTypeParamRule() {
		return getXTypeParamAccess().getRule();
	}

	//XWildcardParam returns XTypeRef:
	//  {XWildcardParam} "?" ("extends" extends=XTypeRef|"super" super=XTypeRef)?;
	public XWildcardParamElements getXWildcardParamAccess() {
		return (pXWildcardParam != null) ? pXWildcardParam : (pXWildcardParam = new XWildcardParamElements());
	}
	
	public ParserRule getXWildcardParamRule() {
		return getXWildcardParamAccess().getRule();
	}

	//XTypeParamDeclaration:
	//  name=ID ("extends" extends+=XTypeRef ("&" extends+=XTypeRef)*|"super"
	//  super=XTypeRef)?;
	public XTypeParamDeclarationElements getXTypeParamDeclarationAccess() {
		return (pXTypeParamDeclaration != null) ? pXTypeParamDeclaration : (pXTypeParamDeclaration = new XTypeParamDeclarationElements());
	}
	
	public ParserRule getXTypeParamDeclarationRule() {
		return getXTypeParamDeclarationAccess().getRule();
	}

	//QualifiedName returns ecore::EString:
	//  ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""
	//  ))* "\"" | "\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !(
	//  "\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
