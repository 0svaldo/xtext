/*
* generated by Xtext
*/

package org.eclipse.xtext.xbase.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XpressionGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class XbaseGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class XFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackageQualifiedNameParserRuleCall_0_0 = (RuleCall)cPackageAssignment_0.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsXImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cClassesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassesXClassParserRuleCall_2_0 = (RuleCall)cClassesAssignment_2.eContents().get(0);
		
		//XFile:
		//  package=QualifiedName? imports+=XImport* classes+=XClass*;
		public ParserRule getRule() { return rule; }

		//package=QualifiedName? imports+=XImport* classes+=XClass*
		public Group getGroup() { return cGroup; }

		//package=QualifiedName?
		public Assignment getPackageAssignment_0() { return cPackageAssignment_0; }

		//QualifiedName
		public RuleCall getPackageQualifiedNameParserRuleCall_0_0() { return cPackageQualifiedNameParserRuleCall_0_0; }

		//imports+=XImport*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//XImport
		public RuleCall getImportsXImportParserRuleCall_1_0() { return cImportsXImportParserRuleCall_1_0; }

		//classes+=XClass*
		public Assignment getClassesAssignment_2() { return cClassesAssignment_2; }

		//XClass
		public RuleCall getClassesXClassParserRuleCall_2_0() { return cClassesXClassParserRuleCall_2_0; }
	}

	public class XImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceXQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//XImport:
		//  "import" importedNamespace=XQualifiedNameWithWildCard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=XQualifiedNameWithWildCard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=XQualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//XQualifiedNameWithWildCard
		public RuleCall getImportedNamespaceXQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceXQualifiedNameWithWildCardParserRuleCall_1_0; }
	}

	public class XQualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XQualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//XQualifiedNameWithWildCard returns ecore::EString:
		//  QualifiedName ("." "*")?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class XClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExtendsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExtendsXTypeRefParserRuleCall_2_1_0 = (RuleCall)cExtendsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cImplementsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cImplementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cImplementsXTypeRefParserRuleCall_3_1_0 = (RuleCall)cImplementsAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFunctionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFunctionsXFunctionParserRuleCall_5_0 = (RuleCall)cFunctionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//XClass:
		//  "class" name=ID ("extends" extends=XTypeRef)? ("implements" implements+=XTypeRef)* "{"
		//  functions+=XFunction* "}";
		public ParserRule getRule() { return rule; }

		//"class" name=ID ("extends" extends=XTypeRef)? ("implements" implements+=XTypeRef)* "{"
		//functions+=XFunction* "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" extends=XTypeRef)?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//extends=XTypeRef
		public Assignment getExtendsAssignment_2_1() { return cExtendsAssignment_2_1; }

		//XTypeRef
		public RuleCall getExtendsXTypeRefParserRuleCall_2_1_0() { return cExtendsXTypeRefParserRuleCall_2_1_0; }

		//("implements" implements+=XTypeRef)*
		public Group getGroup_3() { return cGroup_3; }

		//"implements"
		public Keyword getImplementsKeyword_3_0() { return cImplementsKeyword_3_0; }

		//implements+=XTypeRef
		public Assignment getImplementsAssignment_3_1() { return cImplementsAssignment_3_1; }

		//XTypeRef
		public RuleCall getImplementsXTypeRefParserRuleCall_3_1_0() { return cImplementsXTypeRefParserRuleCall_3_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//functions+=XFunction*
		public Assignment getFunctionsAssignment_5() { return cFunctionsAssignment_5; }

		//XFunction
		public RuleCall getFunctionsXFunctionParserRuleCall_5_0() { return cFunctionsXFunctionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class XFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrivateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPrivatePrivateKeyword_0_0 = (Keyword)cPrivateAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeParamsXTypeParamDeclarationParserRuleCall_1_1_0 = (RuleCall)cTypeParamsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTypeParamsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTypeParamsXTypeParamDeclarationParserRuleCall_1_2_1_0 = (RuleCall)cTypeParamsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cReturnTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReturnTypeXTypeRefParserRuleCall_2_0 = (RuleCall)cReturnTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cDeclaredParamsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cDeclaredParamsXDeclaredParameterParserRuleCall_5_0_0 = (RuleCall)cDeclaredParamsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cDeclaredParamsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cDeclaredParamsXDeclaredParameterParserRuleCall_5_1_1_0 = (RuleCall)cDeclaredParamsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Keyword cColonKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Assignment cExpressionAssignment_7_0_1 = (Assignment)cGroup_7_0.eContents().get(1);
		private final RuleCall cExpressionXExpressionParserRuleCall_7_0_1_0 = (RuleCall)cExpressionAssignment_7_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_0_2 = (Keyword)cGroup_7_0.eContents().get(2);
		private final Assignment cExpressionAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cExpressionXBlockExpressionParserRuleCall_7_1_0 = (RuleCall)cExpressionAssignment_7_1.eContents().get(0);
		
		//XFunction:
		//  private?="private"? ("<" typeParams+=XTypeParamDeclaration ("," typeParams+=
		//  XTypeParamDeclaration)* ">")? returnType=XTypeRef? name=ID "(" (declaredParams+=
		//  XDeclaredParameter ("," declaredParams+=XDeclaredParameter)*)? ")" (":" expression=
		//  XExpression ";"|expression=XBlockExpression);
		public ParserRule getRule() { return rule; }

		//private?="private"? ("<" typeParams+=XTypeParamDeclaration ("," typeParams+=
		//XTypeParamDeclaration)* ">")? returnType=XTypeRef? name=ID "(" (declaredParams+=
		//XDeclaredParameter ("," declaredParams+=XDeclaredParameter)*)? ")" (":" expression=
		//XExpression ";"|expression=XBlockExpression)
		public Group getGroup() { return cGroup; }

		//private?="private"?
		public Assignment getPrivateAssignment_0() { return cPrivateAssignment_0; }

		//"private"
		public Keyword getPrivatePrivateKeyword_0_0() { return cPrivatePrivateKeyword_0_0; }

		//("<" typeParams+=XTypeParamDeclaration ("," typeParams+=XTypeParamDeclaration)* ">")
		//?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//typeParams+=XTypeParamDeclaration
		public Assignment getTypeParamsAssignment_1_1() { return cTypeParamsAssignment_1_1; }

		//XTypeParamDeclaration
		public RuleCall getTypeParamsXTypeParamDeclarationParserRuleCall_1_1_0() { return cTypeParamsXTypeParamDeclarationParserRuleCall_1_1_0; }

		//("," typeParams+=XTypeParamDeclaration)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//typeParams+=XTypeParamDeclaration
		public Assignment getTypeParamsAssignment_1_2_1() { return cTypeParamsAssignment_1_2_1; }

		//XTypeParamDeclaration
		public RuleCall getTypeParamsXTypeParamDeclarationParserRuleCall_1_2_1_0() { return cTypeParamsXTypeParamDeclarationParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//returnType=XTypeRef?
		public Assignment getReturnTypeAssignment_2() { return cReturnTypeAssignment_2; }

		//XTypeRef
		public RuleCall getReturnTypeXTypeRefParserRuleCall_2_0() { return cReturnTypeXTypeRefParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(declaredParams+=XDeclaredParameter ("," declaredParams+=XDeclaredParameter)*)?
		public Group getGroup_5() { return cGroup_5; }

		//declaredParams+=XDeclaredParameter
		public Assignment getDeclaredParamsAssignment_5_0() { return cDeclaredParamsAssignment_5_0; }

		//XDeclaredParameter
		public RuleCall getDeclaredParamsXDeclaredParameterParserRuleCall_5_0_0() { return cDeclaredParamsXDeclaredParameterParserRuleCall_5_0_0; }

		//("," declaredParams+=XDeclaredParameter)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//declaredParams+=XDeclaredParameter
		public Assignment getDeclaredParamsAssignment_5_1_1() { return cDeclaredParamsAssignment_5_1_1; }

		//XDeclaredParameter
		public RuleCall getDeclaredParamsXDeclaredParameterParserRuleCall_5_1_1_0() { return cDeclaredParamsXDeclaredParameterParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//":" expression=XExpression ";"|expression=XBlockExpression
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//":" expression=XExpression ";"
		public Group getGroup_7_0() { return cGroup_7_0; }

		//":"
		public Keyword getColonKeyword_7_0_0() { return cColonKeyword_7_0_0; }

		//expression=XExpression
		public Assignment getExpressionAssignment_7_0_1() { return cExpressionAssignment_7_0_1; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_7_0_1_0() { return cExpressionXExpressionParserRuleCall_7_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_7_0_2() { return cSemicolonKeyword_7_0_2; }

		//expression=XBlockExpression
		public Assignment getExpressionAssignment_7_1() { return cExpressionAssignment_7_1; }

		//XBlockExpression
		public RuleCall getExpressionXBlockExpressionParserRuleCall_7_1_0() { return cExpressionXBlockExpressionParserRuleCall_7_1_0; }
	}
	
	
	private XFileElements pXFile;
	private XImportElements pXImport;
	private XQualifiedNameWithWildCardElements pXQualifiedNameWithWildCard;
	private XClassElements pXClass;
	private XFunctionElements pXFunction;
	
	private final GrammarProvider grammarProvider;

	private XpressionGrammarAccess gaXpression;

	@Inject
	public XbaseGrammarAccess(GrammarProvider grammarProvider,
		XpressionGrammarAccess gaXpression) {
		this.grammarProvider = grammarProvider;
		this.gaXpression = gaXpression;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public XpressionGrammarAccess getXpressionGrammarAccess() {
		return gaXpression;
	}

	
	//XFile:
	//  package=QualifiedName? imports+=XImport* classes+=XClass*;
	public XFileElements getXFileAccess() {
		return (pXFile != null) ? pXFile : (pXFile = new XFileElements());
	}
	
	public ParserRule getXFileRule() {
		return getXFileAccess().getRule();
	}

	//XImport:
	//  "import" importedNamespace=XQualifiedNameWithWildCard;
	public XImportElements getXImportAccess() {
		return (pXImport != null) ? pXImport : (pXImport = new XImportElements());
	}
	
	public ParserRule getXImportRule() {
		return getXImportAccess().getRule();
	}

	//XQualifiedNameWithWildCard returns ecore::EString:
	//  QualifiedName ("." "*")?;
	public XQualifiedNameWithWildCardElements getXQualifiedNameWithWildCardAccess() {
		return (pXQualifiedNameWithWildCard != null) ? pXQualifiedNameWithWildCard : (pXQualifiedNameWithWildCard = new XQualifiedNameWithWildCardElements());
	}
	
	public ParserRule getXQualifiedNameWithWildCardRule() {
		return getXQualifiedNameWithWildCardAccess().getRule();
	}

	//XClass:
	//  "class" name=ID ("extends" extends=XTypeRef)? ("implements" implements+=XTypeRef)* "{"
	//  functions+=XFunction* "}";
	public XClassElements getXClassAccess() {
		return (pXClass != null) ? pXClass : (pXClass = new XClassElements());
	}
	
	public ParserRule getXClassRule() {
		return getXClassAccess().getRule();
	}

	//XFunction:
	//  private?="private"? ("<" typeParams+=XTypeParamDeclaration ("," typeParams+=
	//  XTypeParamDeclaration)* ">")? returnType=XTypeRef? name=ID "(" (declaredParams+=
	//  XDeclaredParameter ("," declaredParams+=XDeclaredParameter)*)? ")" (":" expression=
	//  XExpression ";"|expression=XBlockExpression);
	public XFunctionElements getXFunctionAccess() {
		return (pXFunction != null) ? pXFunction : (pXFunction = new XFunctionElements());
	}
	
	public ParserRule getXFunctionRule() {
		return getXFunctionAccess().getRule();
	}

	//XExpression:
	//  XAssignment;
	public XpressionGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXpression.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//  XOrExpression ({XBinaryOperation.left=current} operator=( "=" | "+=" ) right=
	//  XOrExpression)?;
	public XpressionGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXpression.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//  XAndExpression ({XBinaryOperation.left=current} operator="||" right=XAndExpression)
	//  *;
	public XpressionGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXpression.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//  XEqualityExpression ({XBinaryOperation.left=current} operator="&&" right=
	//  XEqualityExpression)*;
	public XpressionGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXpression.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//  XRelationalExpression ({XBinaryOperation.left=current} operator=( "==" | "!=" ) right=
	//  XRelationalExpression)*;
	public XpressionGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXpression.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//  XAdditiveExpression ({XInstanceOfExpression.expression=current} "instanceof" type=[
	//  types::Type|QualifiedName]|{XBinaryOperation.left=current} operator=( ">=" | "<=" |
	//  ">" | "<" ) right=XAdditiveExpression)*;
	public XpressionGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXpression.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//  XMultiplicativeExpression ({XBinaryOperation.left=current} operator=( "+" | "-" ) right
	//  =XMultiplicativeExpression)*;
	public XpressionGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXpression.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//  XOtherOperatorExpression ({XBinaryOperation.left=current} operator=( "*" | "/" | "%" )
	//  right=XOtherOperatorExpression)*;
	public XpressionGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXpression.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//  XUnaryOperation ({XBinaryOperation.left=current} operator=( "->" | ".." ) right=
	//  XUnaryOperation)*;
	public XpressionGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXpression.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//  {XUnaryOperation} operator=( "!" | "-" | "+" ) target=XFeatureCall|{XCastedExpression}
	//  "(" type=XTypeRef ")" target=XExpression|XFeatureCall;
	public XpressionGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXpression.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//  XPrimaryExpression ({XFeatureCall.target=current} "." name=ID ("(" (params+=
	//  XExpression ("," params+=XExpression)*)? ")")?)*;
	public XpressionGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXpression.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//  XClosure|XBooleanLiteral|XIntLiteral|XNullLiteral|XStringLiteral|XTypeLiteral|
	//  XConstructorCall|XBlockExpression|XRichString|XIfExpression|XSwitchExpression|
	//  XWhileExpression|XSimpleFeatureCall|XParenthesizedExpression;
	public XpressionGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXpression.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XClosure returns XExpression:
	//  {XClosure} (params+=XDeclaredParameter ("," params+=XDeclaredParameter)*)? "|"
	//  expression=XExpression;
	public XpressionGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXpression.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//  "(" XExpression ")";
	public XpressionGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXpression.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression:
	//  "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XpressionGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXpression.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression:
	//  "switch" switch=XExpression? "{" cases+=XCasePart+ ("default" ":" default=XExpression)
	//  ? "}";
	public XpressionGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXpression.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XWhileExpression:
	//  "while" predicate=XParenthesizedExpression body=XExpression;
	public XpressionGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXpression.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XCasePart:
	//  "case" case=XExpression ":" then=XExpression;
	public XpressionGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXpression.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XBlockExpression:
	//  "{" (expressions+=XExpressionInsideBlock ";")+ "}";
	public XpressionGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXpression.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//  XVariableDeclaration|XExpression;
	public XpressionGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXpression.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration:
	//  ("def"|type=XTypeRef) name=ID "=" right=XExpression;
	public XpressionGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXpression.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//XDeclaredParameter:
	//  type=XTypeRef? name=ID;
	public XpressionGrammarAccess.XDeclaredParameterElements getXDeclaredParameterAccess() {
		return gaXpression.getXDeclaredParameterAccess();
	}
	
	public ParserRule getXDeclaredParameterRule() {
		return getXDeclaredParameterAccess().getRule();
	}

	//XSimpleFeatureCall returns XFeatureCall:
	//  name=ID ("(" (params+=XExpression ("," params+=XExpression)*)? ")")?;
	public XpressionGrammarAccess.XSimpleFeatureCallElements getXSimpleFeatureCallAccess() {
		return gaXpression.getXSimpleFeatureCallAccess();
	}
	
	public ParserRule getXSimpleFeatureCallRule() {
		return getXSimpleFeatureCallAccess().getRule();
	}

	//XConstructorCall:
	//  "new" type=XTypeRef ("(" (params+=XExpression ("," params+=XExpression)*)? ")")?
	//  initializer=XBlockExpression?;
	public XpressionGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXpression.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral:
	//  {XBooleanLiteral} "false"|isTrue?="true";
	public XpressionGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXpression.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral:
	//  {XNullLiteral} "null";
	public XpressionGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXpression.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XIntLiteral:
	//  value=INT;
	public XpressionGrammarAccess.XIntLiteralElements getXIntLiteralAccess() {
		return gaXpression.getXIntLiteralAccess();
	}
	
	public ParserRule getXIntLiteralRule() {
		return getXIntLiteralAccess().getRule();
	}

	//XStringLiteral:
	//  value=STRING;
	public XpressionGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXpression.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral:
	//  type=[types::Type|QualifiedName] "." "class";
	public XpressionGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXpression.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XRichString:
	//  expressions+=XRichStringLiteral (expressions+=XExpression expressions+=
	//  XRichStringLiteral)*;
	public XpressionGrammarAccess.XRichStringElements getXRichStringAccess() {
		return gaXpression.getXRichStringAccess();
	}
	
	public ParserRule getXRichStringRule() {
		return getXRichStringAccess().getRule();
	}

	//XRichStringLiteral:
	//  value=RICH_STRING;
	public XpressionGrammarAccess.XRichStringLiteralElements getXRichStringLiteralAccess() {
		return gaXpression.getXRichStringLiteralAccess();
	}
	
	public ParserRule getXRichStringLiteralRule() {
		return getXRichStringLiteralAccess().getRule();
	}

	//terminal RICH_STRING:
	//  "\u00BB" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\u00AB"))* "\u00AB";
	public TerminalRule getRICH_STRINGRule() {
		return gaXpression.getRICH_STRINGRule();
	} 

	//XTypeRef:
	//  XSimpleTypeRef|XFunctionTypeRef;
	public XtypeGrammarAccess.XTypeRefElements getXTypeRefAccess() {
		return gaXpression.getXTypeRefAccess();
	}
	
	public ParserRule getXTypeRefRule() {
		return getXTypeRefAccess().getRule();
	}

	//XFunctionTypeRef:
	//  ("(" paramTypes+=XTypeRef ("," paramTypes+=XTypeRef)* ")")? "=>" returnType=XTypeRef;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXpression.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//XSimpleTypeRef:
	//  type=[types::Type|QualifiedName] ("<" typeParams+=XTypeParam ("," typeParams+=
	//  XTypeParam)* ">")?;
	public XtypeGrammarAccess.XSimpleTypeRefElements getXSimpleTypeRefAccess() {
		return gaXpression.getXSimpleTypeRefAccess();
	}
	
	public ParserRule getXSimpleTypeRefRule() {
		return getXSimpleTypeRefAccess().getRule();
	}

	//XTypeParam returns XTypeRef:
	//  XTypeRef|XWildcardParam;
	public XtypeGrammarAccess.XTypeParamElements getXTypeParamAccess() {
		return gaXpression.getXTypeParamAccess();
	}
	
	public ParserRule getXTypeParamRule() {
		return getXTypeParamAccess().getRule();
	}

	//XWildcardParam returns XTypeRef:
	//  {XWildcardParam} "?" ("extends" extends=XTypeRef|"super" super=XTypeRef)?;
	public XtypeGrammarAccess.XWildcardParamElements getXWildcardParamAccess() {
		return gaXpression.getXWildcardParamAccess();
	}
	
	public ParserRule getXWildcardParamRule() {
		return getXWildcardParamAccess().getRule();
	}

	//XTypeParamDeclaration:
	//  name=ID ("extends" extends+=XTypeRef ("&" extends+=XTypeRef)*|"super" super=XTypeRef)
	//  ?;
	public XtypeGrammarAccess.XTypeParamDeclarationElements getXTypeParamDeclarationAccess() {
		return gaXpression.getXTypeParamDeclarationAccess();
	}
	
	public ParserRule getXTypeParamDeclarationRule() {
		return getXTypeParamDeclarationAccess().getRule();
	}

	//QualifiedName returns ecore::EString:
	//  ID ("." ID)*;
	public XtypeGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXpression.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXpression.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaXpression.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXpression.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXpression.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXpression.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXpression.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaXpression.getANY_OTHERRule();
	} 
}
