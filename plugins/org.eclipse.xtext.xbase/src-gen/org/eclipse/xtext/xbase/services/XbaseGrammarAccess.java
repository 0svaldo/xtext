/*
* generated by Xtext
*/

package org.eclipse.xtext.xbase.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XpressionGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class XbaseGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "File");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cFunctionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionsFunctionParserRuleCall_1_0 = (RuleCall)cFunctionsAssignment_1.eContents().get(0);
		
		//File:
		//  imports+=Import* functions+=Function*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* functions+=Function*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//functions+=Function*
		public Assignment getFunctionsAssignment_1() { return cFunctionsAssignment_1; }

		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_1_0() { return cFunctionsFunctionParserRuleCall_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cWildcardAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cWildcardAsteriskKeyword_2_1_0 = (Keyword)cWildcardAssignment_2_1.eContents().get(0);
		
		//Import:
		//  "import" importedNamespace=QualifiedName ("." wildcard?="*")?;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedName ("." wildcard?="*")?
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedName
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedName
		public RuleCall getImportedNamespaceQualifiedNameParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameParserRuleCall_1_0; }

		//("." wildcard?="*")?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//wildcard?="*"
		public Assignment getWildcardAssignment_2_1() { return cWildcardAssignment_2_1; }

		//"*"
		public Keyword getWildcardAsteriskKeyword_2_1_0() { return cWildcardAsteriskKeyword_2_1_0; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPrivateAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cPrivatePrivateKeyword_0_0_0 = (Keyword)cPrivateAssignment_0_0.eContents().get(0);
		private final Assignment cFinalAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cFinalFinalKeyword_0_1_0 = (Keyword)cFinalAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeParamsTypeParamDeclarationParserRuleCall_1_1_0 = (RuleCall)cTypeParamsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTypeParamsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTypeParamsTypeParamDeclarationParserRuleCall_1_2_1_0 = (RuleCall)cTypeParamsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cReturnTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReturnTypeTypeRefParserRuleCall_2_0 = (RuleCall)cReturnTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cDeclaredParamsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cDeclaredParamsDeclaredParameterParserRuleCall_5_0_0 = (RuleCall)cDeclaredParamsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cDeclaredParamsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cDeclaredParamsDeclaredParameterParserRuleCall_5_1_1_0 = (RuleCall)cDeclaredParamsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cIfKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cGuardAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cGuardExpressionParserRuleCall_7_1_0 = (RuleCall)cGuardAssignment_7_1.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Keyword cColonKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final Assignment cExpressionAssignment_8_0_1 = (Assignment)cGroup_8_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_8_0_1_0 = (RuleCall)cExpressionAssignment_8_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_0_2 = (Keyword)cGroup_8_0.eContents().get(2);
		private final Assignment cExpressionAssignment_8_1 = (Assignment)cAlternatives_8.eContents().get(1);
		private final RuleCall cExpressionBlockExpressionParserRuleCall_8_1_0 = (RuleCall)cExpressionAssignment_8_1.eContents().get(0);
		
		//Function:
		//  (private?="private"|final?="final")* ("<" typeParams+=TypeParamDeclaration (","
		//  typeParams+=TypeParamDeclaration)* ">")? returnType=TypeRef? name=ID "(" (
		//  declaredParams+=DeclaredParameter ("," declaredParams+=DeclaredParameter)*)? ")" (
		//  "if" guard=Expression)? (":" expression=Expression ";"|expression=BlockExpression);
		public ParserRule getRule() { return rule; }

		//(private?="private"|final?="final")* ("<" typeParams+=TypeParamDeclaration (","
		//typeParams+=TypeParamDeclaration)* ">")? returnType=TypeRef? name=ID "(" (
		//declaredParams+=DeclaredParameter ("," declaredParams+=DeclaredParameter)*)? ")" (
		//"if" guard=Expression)? (":" expression=Expression ";"|expression=BlockExpression)
		public Group getGroup() { return cGroup; }

		//(private?="private"|final?="final")*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//private?="private"
		public Assignment getPrivateAssignment_0_0() { return cPrivateAssignment_0_0; }

		//"private"
		public Keyword getPrivatePrivateKeyword_0_0_0() { return cPrivatePrivateKeyword_0_0_0; }

		//final?="final"
		public Assignment getFinalAssignment_0_1() { return cFinalAssignment_0_1; }

		//"final"
		public Keyword getFinalFinalKeyword_0_1_0() { return cFinalFinalKeyword_0_1_0; }

		//("<" typeParams+=TypeParamDeclaration ("," typeParams+=TypeParamDeclaration)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//typeParams+=TypeParamDeclaration
		public Assignment getTypeParamsAssignment_1_1() { return cTypeParamsAssignment_1_1; }

		//TypeParamDeclaration
		public RuleCall getTypeParamsTypeParamDeclarationParserRuleCall_1_1_0() { return cTypeParamsTypeParamDeclarationParserRuleCall_1_1_0; }

		//("," typeParams+=TypeParamDeclaration)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//typeParams+=TypeParamDeclaration
		public Assignment getTypeParamsAssignment_1_2_1() { return cTypeParamsAssignment_1_2_1; }

		//TypeParamDeclaration
		public RuleCall getTypeParamsTypeParamDeclarationParserRuleCall_1_2_1_0() { return cTypeParamsTypeParamDeclarationParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//returnType=TypeRef?
		public Assignment getReturnTypeAssignment_2() { return cReturnTypeAssignment_2; }

		//TypeRef
		public RuleCall getReturnTypeTypeRefParserRuleCall_2_0() { return cReturnTypeTypeRefParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(declaredParams+=DeclaredParameter ("," declaredParams+=DeclaredParameter)*)?
		public Group getGroup_5() { return cGroup_5; }

		//declaredParams+=DeclaredParameter
		public Assignment getDeclaredParamsAssignment_5_0() { return cDeclaredParamsAssignment_5_0; }

		//DeclaredParameter
		public RuleCall getDeclaredParamsDeclaredParameterParserRuleCall_5_0_0() { return cDeclaredParamsDeclaredParameterParserRuleCall_5_0_0; }

		//("," declaredParams+=DeclaredParameter)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//declaredParams+=DeclaredParameter
		public Assignment getDeclaredParamsAssignment_5_1_1() { return cDeclaredParamsAssignment_5_1_1; }

		//DeclaredParameter
		public RuleCall getDeclaredParamsDeclaredParameterParserRuleCall_5_1_1_0() { return cDeclaredParamsDeclaredParameterParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//("if" guard=Expression)?
		public Group getGroup_7() { return cGroup_7; }

		//"if"
		public Keyword getIfKeyword_7_0() { return cIfKeyword_7_0; }

		//guard=Expression
		public Assignment getGuardAssignment_7_1() { return cGuardAssignment_7_1; }

		//Expression
		public RuleCall getGuardExpressionParserRuleCall_7_1_0() { return cGuardExpressionParserRuleCall_7_1_0; }

		//":" expression=Expression ";"|expression=BlockExpression
		public Alternatives getAlternatives_8() { return cAlternatives_8; }

		//":" expression=Expression ";"
		public Group getGroup_8_0() { return cGroup_8_0; }

		//":"
		public Keyword getColonKeyword_8_0_0() { return cColonKeyword_8_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_8_0_1() { return cExpressionAssignment_8_0_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_8_0_1_0() { return cExpressionExpressionParserRuleCall_8_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_8_0_2() { return cSemicolonKeyword_8_0_2; }

		//expression=BlockExpression
		public Assignment getExpressionAssignment_8_1() { return cExpressionAssignment_8_1; }

		//BlockExpression
		public RuleCall getExpressionBlockExpressionParserRuleCall_8_1_0() { return cExpressionBlockExpressionParserRuleCall_8_1_0; }
	}
	
	
	private FileElements pFile;
	private ImportElements pImport;
	private FunctionElements pFunction;
	
	private final GrammarProvider grammarProvider;

	private XpressionGrammarAccess gaXpression;

	@Inject
	public XbaseGrammarAccess(GrammarProvider grammarProvider,
		XpressionGrammarAccess gaXpression) {
		this.grammarProvider = grammarProvider;
		this.gaXpression = gaXpression;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public XpressionGrammarAccess getXpressionGrammarAccess() {
		return gaXpression;
	}

	
	//File:
	//  imports+=Import* functions+=Function*;
	public FileElements getFileAccess() {
		return (pFile != null) ? pFile : (pFile = new FileElements());
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}

	//Import:
	//  "import" importedNamespace=QualifiedName ("." wildcard?="*")?;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Function:
	//  (private?="private"|final?="final")* ("<" typeParams+=TypeParamDeclaration (","
	//  typeParams+=TypeParamDeclaration)* ">")? returnType=TypeRef? name=ID "(" (
	//  declaredParams+=DeclaredParameter ("," declaredParams+=DeclaredParameter)*)? ")" (
	//  "if" guard=Expression)? (":" expression=Expression ";"|expression=BlockExpression);
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//Expression:
	//  Closure;
	public XpressionGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaXpression.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Closure returns Expression:
	//  {Closure} (params+=DeclaredParameter ("," params+=DeclaredParameter)*)? "|"
	//  expression=CastedExpression|CastedExpression;
	public XpressionGrammarAccess.ClosureElements getClosureAccess() {
		return gaXpression.getClosureAccess();
	}
	
	public ParserRule getClosureRule() {
		return getClosureAccess().getRule();
	}

	//CastedExpression returns Expression:
	//  {CastedExpression} "(" type=TypeRef ")" target=Assignment|Assignment;
	public XpressionGrammarAccess.CastedExpressionElements getCastedExpressionAccess() {
		return gaXpression.getCastedExpressionAccess();
	}
	
	public ParserRule getCastedExpressionRule() {
		return getCastedExpressionAccess().getRule();
	}

	//Assignment returns Expression:
	//  OrExpression ({Assignment.left=current} "=" right=OrExpression)?;
	public XpressionGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaXpression.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//OrExpression returns Expression:
	//  AndExpression ({BinaryOperation.left=current} operator="||" right=AndExpression)*;
	public XpressionGrammarAccess.OrExpressionElements getOrExpressionAccess() {
		return gaXpression.getOrExpressionAccess();
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//AndExpression returns Expression:
	//  RelationalExpression ({BinaryOperation.left=current} operator="&&" right=
	//  RelationalExpression)*;
	public XpressionGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaXpression.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//RelationalExpression returns Expression:
	//  AdditiveExpression ({BinaryOperation.left=current} operator=( "==" | "!=" | ">=" | "<=" |
	//  ">" | "<" ) right=AdditiveExpression)*;
	public XpressionGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaXpression.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//AdditiveExpression returns Expression:
	//  MultiplicativeExpression ({BinaryOperation.left=current} operator=( "+" | "-" ) right=
	//  MultiplicativeExpression)*;
	public XpressionGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaXpression.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression returns Expression:
	//  OtherOperatorExpression ({BinaryOperation.left=current} operator=( "*" | "/" ) right=
	//  OtherOperatorExpression)*;
	public XpressionGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaXpression.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//OtherOperatorExpression returns Expression:
	//  UnaryOperation ({BinaryOperation.left=current} operator=( "+=" | ".." ) right=
	//  UnaryOperation)*;
	public XpressionGrammarAccess.OtherOperatorExpressionElements getOtherOperatorExpressionAccess() {
		return gaXpression.getOtherOperatorExpressionAccess();
	}
	
	public ParserRule getOtherOperatorExpressionRule() {
		return getOtherOperatorExpressionAccess().getRule();
	}

	//UnaryOperation returns Expression:
	//  FeatureCall|{UnaryOperation} operator=( "!" | "-" ) target=FeatureCall;
	public XpressionGrammarAccess.UnaryOperationElements getUnaryOperationAccess() {
		return gaXpression.getUnaryOperationAccess();
	}
	
	public ParserRule getUnaryOperationRule() {
		return getUnaryOperationAccess().getRule();
	}

	//FeatureCall returns Expression:
	//  PrimaryExpression ({FeatureCall.target=current} "." name=ID ("(" (params+=Expression (
	//  "," params+=Expression)*)? ")")?)*;
	public XpressionGrammarAccess.FeatureCallElements getFeatureCallAccess() {
		return gaXpression.getFeatureCallAccess();
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//  BooleanLiteral|IntLiteral|NullLiteral|StringLiteral|ConstructorCall|
	//  BlockExpression|RichString|IfExpression|SwitchExpression|WhileExpression|
	//  SimpleFeatureCall|ParenthesizedExpression;
	public XpressionGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaXpression.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//ParenthesizedExpression returns Expression:
	//  "(" Expression ")";
	public XpressionGrammarAccess.ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return gaXpression.getParenthesizedExpressionAccess();
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//IfExpression:
	//  "if" "(" if=Expression ")" then=Expression ("else" else=Expression)?;
	public XpressionGrammarAccess.IfExpressionElements getIfExpressionAccess() {
		return gaXpression.getIfExpressionAccess();
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}

	//SwitchExpression:
	//  "switch" switch=Expression? "{" cases+=CasePart+ ("default" ":" default=Expression)?
	//  "}";
	public XpressionGrammarAccess.SwitchExpressionElements getSwitchExpressionAccess() {
		return gaXpression.getSwitchExpressionAccess();
	}
	
	public ParserRule getSwitchExpressionRule() {
		return getSwitchExpressionAccess().getRule();
	}

	//WhileExpression:
	//  "while" predicate=ParenthesizedExpression body=Expression;
	public XpressionGrammarAccess.WhileExpressionElements getWhileExpressionAccess() {
		return gaXpression.getWhileExpressionAccess();
	}
	
	public ParserRule getWhileExpressionRule() {
		return getWhileExpressionAccess().getRule();
	}

	//CasePart:
	//  "case" case=Expression ":" then=Expression;
	public XpressionGrammarAccess.CasePartElements getCasePartAccess() {
		return gaXpression.getCasePartAccess();
	}
	
	public ParserRule getCasePartRule() {
		return getCasePartAccess().getRule();
	}

	//BlockExpression:
	//  "{" (expressions+=ExpressionInsideBlock ";")+ "}";
	public XpressionGrammarAccess.BlockExpressionElements getBlockExpressionAccess() {
		return gaXpression.getBlockExpressionAccess();
	}
	
	public ParserRule getBlockExpressionRule() {
		return getBlockExpressionAccess().getRule();
	}

	//ExpressionInsideBlock returns Expression:
	//  VariableDeclaration|Expression;
	public XpressionGrammarAccess.ExpressionInsideBlockElements getExpressionInsideBlockAccess() {
		return gaXpression.getExpressionInsideBlockAccess();
	}
	
	public ParserRule getExpressionInsideBlockRule() {
		return getExpressionInsideBlockAccess().getRule();
	}

	//VariableDeclaration:
	//  ("def"|type=TypeRef) name=ID ":=" right=Expression;
	public XpressionGrammarAccess.VariableDeclarationElements getVariableDeclarationAccess() {
		return gaXpression.getVariableDeclarationAccess();
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//DeclaredParameter:
	//  type=TypeRef? name=ID;
	public XpressionGrammarAccess.DeclaredParameterElements getDeclaredParameterAccess() {
		return gaXpression.getDeclaredParameterAccess();
	}
	
	public ParserRule getDeclaredParameterRule() {
		return getDeclaredParameterAccess().getRule();
	}

	//SimpleFeatureCall returns FeatureCall:
	//  name=ID ("(" (params+=Expression ("," params+=Expression)*)? ")")?;
	public XpressionGrammarAccess.SimpleFeatureCallElements getSimpleFeatureCallAccess() {
		return gaXpression.getSimpleFeatureCallAccess();
	}
	
	public ParserRule getSimpleFeatureCallRule() {
		return getSimpleFeatureCallAccess().getRule();
	}

	//ConstructorCall:
	//  "new" type=TypeRef ("(" (params+=Expression ("," params+=Expression)*)? ")")? ("as" ID)?
	//  initializer=BlockExpression?;
	public XpressionGrammarAccess.ConstructorCallElements getConstructorCallAccess() {
		return gaXpression.getConstructorCallAccess();
	}
	
	public ParserRule getConstructorCallRule() {
		return getConstructorCallAccess().getRule();
	}

	//BooleanLiteral:
	//  {BooleanLiteral} "false"|isTrue?="true";
	public XpressionGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaXpression.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//NullLiteral:
	//  {NullLiteral} "null";
	public XpressionGrammarAccess.NullLiteralElements getNullLiteralAccess() {
		return gaXpression.getNullLiteralAccess();
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//IntLiteral:
	//  value=INT;
	public XpressionGrammarAccess.IntLiteralElements getIntLiteralAccess() {
		return gaXpression.getIntLiteralAccess();
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}

	//StringLiteral:
	//  value=STRING;
	public XpressionGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaXpression.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//RichString:
	//  expressions+=RichStringLiteral (expressions+=Expression expressions+=
	//  RichStringLiteral)*;
	public XpressionGrammarAccess.RichStringElements getRichStringAccess() {
		return gaXpression.getRichStringAccess();
	}
	
	public ParserRule getRichStringRule() {
		return getRichStringAccess().getRule();
	}

	//RichStringLiteral:
	//  value=RICH_STRING;
	public XpressionGrammarAccess.RichStringLiteralElements getRichStringLiteralAccess() {
		return gaXpression.getRichStringLiteralAccess();
	}
	
	public ParserRule getRichStringLiteralRule() {
		return getRichStringLiteralAccess().getRule();
	}

	//terminal RICH_STRING:
	//  "\u00BB" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\u00AB"))* "\u00AB";
	public TerminalRule getRICH_STRINGRule() {
		return gaXpression.getRICH_STRINGRule();
	} 

	//TypeRef:
	//  SimpleTypeRef|FunctionTypeRef;
	public XtypeGrammarAccess.TypeRefElements getTypeRefAccess() {
		return gaXpression.getTypeRefAccess();
	}
	
	public ParserRule getTypeRefRule() {
		return getTypeRefAccess().getRule();
	}

	//FunctionTypeRef:
	//  ("(" paramTypes+=TypeRef ("," paramTypes+=TypeRef)* ")")? "=>" returnType+=TypeRef;
	public XtypeGrammarAccess.FunctionTypeRefElements getFunctionTypeRefAccess() {
		return gaXpression.getFunctionTypeRefAccess();
	}
	
	public ParserRule getFunctionTypeRefRule() {
		return getFunctionTypeRefAccess().getRule();
	}

	//SimpleTypeRef:
	//  type=[types::Type|QualifiedName] ("<" typeParams+=TypeParam ("," typeParams+=
	//  TypeParam)* ">")?;
	public XtypeGrammarAccess.SimpleTypeRefElements getSimpleTypeRefAccess() {
		return gaXpression.getSimpleTypeRefAccess();
	}
	
	public ParserRule getSimpleTypeRefRule() {
		return getSimpleTypeRefAccess().getRule();
	}

	//TypeParam returns TypeRef:
	//  TypeRef|WildcardParam;
	public XtypeGrammarAccess.TypeParamElements getTypeParamAccess() {
		return gaXpression.getTypeParamAccess();
	}
	
	public ParserRule getTypeParamRule() {
		return getTypeParamAccess().getRule();
	}

	//WildcardParam returns TypeRef:
	//  {WildcardParam} "?" ("extends" extends=TypeRef|"super" super=TypeRef)?;
	public XtypeGrammarAccess.WildcardParamElements getWildcardParamAccess() {
		return gaXpression.getWildcardParamAccess();
	}
	
	public ParserRule getWildcardParamRule() {
		return getWildcardParamAccess().getRule();
	}

	//TypeParamDeclaration:
	//  name=ID ("extends" extends+=TypeRef ("&" extends+=TypeRef)*|"super" super=TypeRef)?;
	public XtypeGrammarAccess.TypeParamDeclarationElements getTypeParamDeclarationAccess() {
		return gaXpression.getTypeParamDeclarationAccess();
	}
	
	public ParserRule getTypeParamDeclarationRule() {
		return getTypeParamDeclarationAccess().getRule();
	}

	//QualifiedName returns ecore::EString:
	//  ID ("." ID)*;
	public XtypeGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXpression.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXpression.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaXpression.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXpression.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXpression.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXpression.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXpression.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaXpression.getANY_OTHERRule();
	} 
}
