/*
* generated by Xtext
*/

package org.eclipse.xtext.xbase.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class XbaseGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class XExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression");
		private final RuleCall cXAssignmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//XExpression:
		//	XAssignment;
		public ParserRule getRule() { return rule; }

		//XAssignment
		public RuleCall getXAssignmentParserRuleCall() { return cXAssignmentParserRuleCall; }
	}

	public class XAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXAssignmentAssignableAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifyableElementCrossReference_1_1_0 = (CrossReference)cFeatureAssignment_1_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifyableElementOpAssignParserRuleCall_1_1_0_1 = (RuleCall)cFeatureJvmIdentifyableElementCrossReference_1_1_0.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueXAssignmentParserRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		
		//XAssignment returns XExpression:
		//	XOrExpression ({XAssignment.assignable=current} feature=[types::JvmIdentifyableElement|OpAssign] value=XAssignment)?;
		public ParserRule getRule() { return rule; }

		//XOrExpression ({XAssignment.assignable=current} feature=[types::JvmIdentifyableElement|OpAssign] value=XAssignment)?
		public Group getGroup() { return cGroup; }

		//XOrExpression
		public RuleCall getXOrExpressionParserRuleCall_0() { return cXOrExpressionParserRuleCall_0; }

		//({XAssignment.assignable=current} feature=[types::JvmIdentifyableElement|OpAssign] value=XAssignment)?
		public Group getGroup_1() { return cGroup_1; }

		//{XAssignment.assignable=current}
		public Action getXAssignmentAssignableAction_1_0() { return cXAssignmentAssignableAction_1_0; }

		//feature=[types::JvmIdentifyableElement|OpAssign]
		public Assignment getFeatureAssignment_1_1() { return cFeatureAssignment_1_1; }

		//[types::JvmIdentifyableElement|OpAssign]
		public CrossReference getFeatureJvmIdentifyableElementCrossReference_1_1_0() { return cFeatureJvmIdentifyableElementCrossReference_1_1_0; }

		//OpAssign
		public RuleCall getFeatureJvmIdentifyableElementOpAssignParserRuleCall_1_1_0_1() { return cFeatureJvmIdentifyableElementOpAssignParserRuleCall_1_1_0_1; }

		//value=XAssignment
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }

		//XAssignment
		public RuleCall getValueXAssignmentParserRuleCall_1_2_0() { return cValueXAssignmentParserRuleCall_1_2_0; }
	}

	public class OpAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAssign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpAssign:
		//	"=" | "+=";
		public ParserRule getRule() { return rule; }

		//"=" | "+="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_1() { return cPlusSignEqualsSignKeyword_1; }
	}

	public class XOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXBinaryOperationLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifyableElementCrossReference_1_1_0 = (CrossReference)cFeatureAssignment_1_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifyableElementOpOrParserRuleCall_1_1_0_1 = (RuleCall)cFeatureJvmIdentifyableElementCrossReference_1_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandXAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//XOrExpression returns XExpression:
		//	XAndExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpOr]
		//	rightOperand=XAndExpression)*;
		public ParserRule getRule() { return rule; }

		//XAndExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpOr]
		//rightOperand=XAndExpression)*
		public Group getGroup() { return cGroup; }

		//XAndExpression
		public RuleCall getXAndExpressionParserRuleCall_0() { return cXAndExpressionParserRuleCall_0; }

		//({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpOr] rightOperand=XAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0() { return cXBinaryOperationLeftOperandAction_1_0; }

		//feature=[types::JvmIdentifyableElement|OpOr]
		public Assignment getFeatureAssignment_1_1() { return cFeatureAssignment_1_1; }

		//[types::JvmIdentifyableElement|OpOr]
		public CrossReference getFeatureJvmIdentifyableElementCrossReference_1_1_0() { return cFeatureJvmIdentifyableElementCrossReference_1_1_0; }

		//OpOr
		public RuleCall getFeatureJvmIdentifyableElementOpOrParserRuleCall_1_1_0_1() { return cFeatureJvmIdentifyableElementOpOrParserRuleCall_1_1_0_1; }

		//rightOperand=XAndExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//XAndExpression
		public RuleCall getRightOperandXAndExpressionParserRuleCall_1_2_0() { return cRightOperandXAndExpressionParserRuleCall_1_2_0; }
	}

	public class OpOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOr");
		private final Keyword cVerticalLineVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//OpOr:
		//	"||";
		public ParserRule getRule() { return rule; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword() { return cVerticalLineVerticalLineKeyword; }
	}

	public class XAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXBinaryOperationLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifyableElementCrossReference_1_1_0 = (CrossReference)cFeatureAssignment_1_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifyableElementOpAndParserRuleCall_1_1_0_1 = (RuleCall)cFeatureJvmIdentifyableElementCrossReference_1_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandXEqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//XAndExpression returns XExpression:
		//	XEqualityExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpAnd]
		//	rightOperand=XEqualityExpression)*;
		public ParserRule getRule() { return rule; }

		//XEqualityExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpAnd]
		//rightOperand=XEqualityExpression)*
		public Group getGroup() { return cGroup; }

		//XEqualityExpression
		public RuleCall getXEqualityExpressionParserRuleCall_0() { return cXEqualityExpressionParserRuleCall_0; }

		//({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpAnd] rightOperand=XEqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0() { return cXBinaryOperationLeftOperandAction_1_0; }

		//feature=[types::JvmIdentifyableElement|OpAnd]
		public Assignment getFeatureAssignment_1_1() { return cFeatureAssignment_1_1; }

		//[types::JvmIdentifyableElement|OpAnd]
		public CrossReference getFeatureJvmIdentifyableElementCrossReference_1_1_0() { return cFeatureJvmIdentifyableElementCrossReference_1_1_0; }

		//OpAnd
		public RuleCall getFeatureJvmIdentifyableElementOpAndParserRuleCall_1_1_0_1() { return cFeatureJvmIdentifyableElementOpAndParserRuleCall_1_1_0_1; }

		//rightOperand=XEqualityExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//XEqualityExpression
		public RuleCall getRightOperandXEqualityExpressionParserRuleCall_1_2_0() { return cRightOperandXEqualityExpressionParserRuleCall_1_2_0; }
	}

	public class OpAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAnd");
		private final Keyword cAmpersandAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//OpAnd:
		//	"&&";
		public ParserRule getRule() { return rule; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword() { return cAmpersandAmpersandKeyword; }
	}

	public class XEqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XEqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXBinaryOperationLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifyableElementCrossReference_1_1_0 = (CrossReference)cFeatureAssignment_1_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifyableElementOpEqualityParserRuleCall_1_1_0_1 = (RuleCall)cFeatureJvmIdentifyableElementCrossReference_1_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandXRelationalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//XEqualityExpression returns XExpression:
		//	XRelationalExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpEquality]
		//	rightOperand=XRelationalExpression)*;
		public ParserRule getRule() { return rule; }

		//XRelationalExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpEquality]
		//rightOperand=XRelationalExpression)*
		public Group getGroup() { return cGroup; }

		//XRelationalExpression
		public RuleCall getXRelationalExpressionParserRuleCall_0() { return cXRelationalExpressionParserRuleCall_0; }

		//({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpEquality]
		//rightOperand=XRelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0() { return cXBinaryOperationLeftOperandAction_1_0; }

		//feature=[types::JvmIdentifyableElement|OpEquality]
		public Assignment getFeatureAssignment_1_1() { return cFeatureAssignment_1_1; }

		//[types::JvmIdentifyableElement|OpEquality]
		public CrossReference getFeatureJvmIdentifyableElementCrossReference_1_1_0() { return cFeatureJvmIdentifyableElementCrossReference_1_1_0; }

		//OpEquality
		public RuleCall getFeatureJvmIdentifyableElementOpEqualityParserRuleCall_1_1_0_1() { return cFeatureJvmIdentifyableElementOpEqualityParserRuleCall_1_1_0_1; }

		//rightOperand=XRelationalExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//XRelationalExpression
		public RuleCall getRightOperandXRelationalExpressionParserRuleCall_1_2_0() { return cRightOperandXRelationalExpressionParserRuleCall_1_2_0; }
	}

	public class OpEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpEquality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpEquality:
		//	"==" | "!=";
		public ParserRule getRule() { return rule; }

		//"==" | "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}

	public class XRelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XRelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXOtherOperatorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cXInstanceOfExpressionExpressionAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cInstanceofKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final CrossReference cTypeJvmTypeCrossReference_1_0_2_0 = (CrossReference)cTypeAssignment_1_0_2.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedNameParserRuleCall_1_0_2_0_1 = (RuleCall)cTypeJvmTypeCrossReference_1_0_2_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cXBinaryOperationLeftOperandAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifyableElementCrossReference_1_1_1_0 = (CrossReference)cFeatureAssignment_1_1_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifyableElementOpCompareParserRuleCall_1_1_1_0_1 = (RuleCall)cFeatureJvmIdentifyableElementCrossReference_1_1_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightOperandXOtherOperatorExpressionParserRuleCall_1_1_2_0 = (RuleCall)cRightOperandAssignment_1_1_2.eContents().get(0);
		
		//XRelationalExpression returns XExpression:
		//	XOtherOperatorExpression ({XInstanceOfExpression.expression=current} "instanceof" type=[types::JvmType|QualifiedName]
		//	| {XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpCompare]
		//	rightOperand=XOtherOperatorExpression)*;
		public ParserRule getRule() { return rule; }

		//XOtherOperatorExpression ({XInstanceOfExpression.expression=current} "instanceof" type=[types::JvmType|QualifiedName] |
		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpCompare]
		//rightOperand=XOtherOperatorExpression)*
		public Group getGroup() { return cGroup; }

		//XOtherOperatorExpression
		public RuleCall getXOtherOperatorExpressionParserRuleCall_0() { return cXOtherOperatorExpressionParserRuleCall_0; }

		//({XInstanceOfExpression.expression=current} "instanceof" type=[types::JvmType|QualifiedName] |
		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpCompare]
		//rightOperand=XOtherOperatorExpression)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{XInstanceOfExpression.expression=current} "instanceof" type=[types::JvmType|QualifiedName]
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XInstanceOfExpression.expression=current}
		public Action getXInstanceOfExpressionExpressionAction_1_0_0() { return cXInstanceOfExpressionExpressionAction_1_0_0; }

		//"instanceof"
		public Keyword getInstanceofKeyword_1_0_1() { return cInstanceofKeyword_1_0_1; }

		//type=[types::JvmType|QualifiedName]
		public Assignment getTypeAssignment_1_0_2() { return cTypeAssignment_1_0_2; }

		//[types::JvmType|QualifiedName]
		public CrossReference getTypeJvmTypeCrossReference_1_0_2_0() { return cTypeJvmTypeCrossReference_1_0_2_0; }

		//QualifiedName
		public RuleCall getTypeJvmTypeQualifiedNameParserRuleCall_1_0_2_0_1() { return cTypeJvmTypeQualifiedNameParserRuleCall_1_0_2_0_1; }

		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpCompare]
		//rightOperand=XOtherOperatorExpression
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_1_0() { return cXBinaryOperationLeftOperandAction_1_1_0; }

		//feature=[types::JvmIdentifyableElement|OpCompare]
		public Assignment getFeatureAssignment_1_1_1() { return cFeatureAssignment_1_1_1; }

		//[types::JvmIdentifyableElement|OpCompare]
		public CrossReference getFeatureJvmIdentifyableElementCrossReference_1_1_1_0() { return cFeatureJvmIdentifyableElementCrossReference_1_1_1_0; }

		//OpCompare
		public RuleCall getFeatureJvmIdentifyableElementOpCompareParserRuleCall_1_1_1_0_1() { return cFeatureJvmIdentifyableElementOpCompareParserRuleCall_1_1_1_0_1; }

		//rightOperand=XOtherOperatorExpression
		public Assignment getRightOperandAssignment_1_1_2() { return cRightOperandAssignment_1_1_2; }

		//XOtherOperatorExpression
		public RuleCall getRightOperandXOtherOperatorExpressionParserRuleCall_1_1_2_0() { return cRightOperandXOtherOperatorExpressionParserRuleCall_1_1_2_0; }
	}

	public class OpCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpCompare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OpCompare:
		//	">=" | "<=" | ">" | "<";
		public ParserRule getRule() { return rule; }

		//">=" | "<=" | ">" | "<"
		public Alternatives getAlternatives() { return cAlternatives; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_0() { return cGreaterThanSignEqualsSignKeyword_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//"<"
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }
	}

	public class XOtherOperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XOtherOperatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXBinaryOperationLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifyableElementCrossReference_1_1_0 = (CrossReference)cFeatureAssignment_1_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifyableElementOpOtherParserRuleCall_1_1_0_1 = (RuleCall)cFeatureJvmIdentifyableElementCrossReference_1_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandXAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//XOtherOperatorExpression returns XExpression:
		//	XAdditiveExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpOther]
		//	rightOperand=XAdditiveExpression)*;
		public ParserRule getRule() { return rule; }

		//XAdditiveExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpOther]
		//rightOperand=XAdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//XAdditiveExpression
		public RuleCall getXAdditiveExpressionParserRuleCall_0() { return cXAdditiveExpressionParserRuleCall_0; }

		//({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpOther]
		//rightOperand=XAdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0() { return cXBinaryOperationLeftOperandAction_1_0; }

		//feature=[types::JvmIdentifyableElement|OpOther]
		public Assignment getFeatureAssignment_1_1() { return cFeatureAssignment_1_1; }

		//[types::JvmIdentifyableElement|OpOther]
		public CrossReference getFeatureJvmIdentifyableElementCrossReference_1_1_0() { return cFeatureJvmIdentifyableElementCrossReference_1_1_0; }

		//OpOther
		public RuleCall getFeatureJvmIdentifyableElementOpOtherParserRuleCall_1_1_0_1() { return cFeatureJvmIdentifyableElementOpOtherParserRuleCall_1_1_0_1; }

		//rightOperand=XAdditiveExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//XAdditiveExpression
		public RuleCall getRightOperandXAdditiveExpressionParserRuleCall_1_2_0() { return cRightOperandXAdditiveExpressionParserRuleCall_1_2_0; }
	}

	public class OpOtherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOther");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpOther:
		//	"->" | "..";
		public ParserRule getRule() { return rule; }

		//"->" | ".."
		public Alternatives getAlternatives() { return cAlternatives; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }
	}

	public class XAdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXBinaryOperationLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifyableElementCrossReference_1_1_0 = (CrossReference)cFeatureAssignment_1_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifyableElementOpAddParserRuleCall_1_1_0_1 = (RuleCall)cFeatureJvmIdentifyableElementCrossReference_1_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandXMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//XAdditiveExpression returns XExpression:
		//	XMultiplicativeExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpAdd]
		//	rightOperand=XMultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//XMultiplicativeExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpAdd]
		//rightOperand=XMultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//XMultiplicativeExpression
		public RuleCall getXMultiplicativeExpressionParserRuleCall_0() { return cXMultiplicativeExpressionParserRuleCall_0; }

		//({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpAdd]
		//rightOperand=XMultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0() { return cXBinaryOperationLeftOperandAction_1_0; }

		//feature=[types::JvmIdentifyableElement|OpAdd]
		public Assignment getFeatureAssignment_1_1() { return cFeatureAssignment_1_1; }

		//[types::JvmIdentifyableElement|OpAdd]
		public CrossReference getFeatureJvmIdentifyableElementCrossReference_1_1_0() { return cFeatureJvmIdentifyableElementCrossReference_1_1_0; }

		//OpAdd
		public RuleCall getFeatureJvmIdentifyableElementOpAddParserRuleCall_1_1_0_1() { return cFeatureJvmIdentifyableElementOpAddParserRuleCall_1_1_0_1; }

		//rightOperand=XMultiplicativeExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//XMultiplicativeExpression
		public RuleCall getRightOperandXMultiplicativeExpressionParserRuleCall_1_2_0() { return cRightOperandXMultiplicativeExpressionParserRuleCall_1_2_0; }
	}

	public class OpAddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAdd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpAdd:
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class XMultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXUnaryOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXBinaryOperationLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifyableElementCrossReference_1_1_0 = (CrossReference)cFeatureAssignment_1_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifyableElementOpMultiParserRuleCall_1_1_0_1 = (RuleCall)cFeatureJvmIdentifyableElementCrossReference_1_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandXUnaryOperationParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//XMultiplicativeExpression returns XExpression:
		//	XUnaryOperation ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpMulti]
		//	rightOperand=XUnaryOperation)*;
		public ParserRule getRule() { return rule; }

		//XUnaryOperation ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpMulti]
		//rightOperand=XUnaryOperation)*
		public Group getGroup() { return cGroup; }

		//XUnaryOperation
		public RuleCall getXUnaryOperationParserRuleCall_0() { return cXUnaryOperationParserRuleCall_0; }

		//({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpMulti] rightOperand=XUnaryOperation)*
		public Group getGroup_1() { return cGroup_1; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0() { return cXBinaryOperationLeftOperandAction_1_0; }

		//feature=[types::JvmIdentifyableElement|OpMulti]
		public Assignment getFeatureAssignment_1_1() { return cFeatureAssignment_1_1; }

		//[types::JvmIdentifyableElement|OpMulti]
		public CrossReference getFeatureJvmIdentifyableElementCrossReference_1_1_0() { return cFeatureJvmIdentifyableElementCrossReference_1_1_0; }

		//OpMulti
		public RuleCall getFeatureJvmIdentifyableElementOpMultiParserRuleCall_1_1_0_1() { return cFeatureJvmIdentifyableElementOpMultiParserRuleCall_1_1_0_1; }

		//rightOperand=XUnaryOperation
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//XUnaryOperation
		public RuleCall getRightOperandXUnaryOperationParserRuleCall_1_2_0() { return cRightOperandXUnaryOperationParserRuleCall_1_2_0; }
	}

	public class OpMultiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpMulti");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSolidusKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPercentSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OpMulti:
		//	"*" | "**" | "/" | "%";
		public ParserRule getRule() { return rule; }

		//"*" | "**" | "/" | "%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_1() { return cAsteriskAsteriskKeyword_1; }

		//"/"
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }

		//"%"
		public Keyword getPercentSignKeyword_3() { return cPercentSignKeyword_3; }
	}

	public class XUnaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XUnaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cXUnaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifyableElementCrossReference_0_1_0 = (CrossReference)cFeatureAssignment_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifyableElementOpUnaryParserRuleCall_0_1_0_1 = (RuleCall)cFeatureJvmIdentifyableElementCrossReference_0_1_0.eContents().get(1);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandXMemberFeatureCallParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cXMemberFeatureCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XUnaryOperation returns XExpression:
		//	{XUnaryOperation} feature=[types::JvmIdentifyableElement|OpUnary] operand=XMemberFeatureCall | XMemberFeatureCall;
		public ParserRule getRule() { return rule; }

		//{XUnaryOperation} feature=[types::JvmIdentifyableElement|OpUnary] operand=XMemberFeatureCall | XMemberFeatureCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//{XUnaryOperation} feature=[types::JvmIdentifyableElement|OpUnary] operand=XMemberFeatureCall
		public Group getGroup_0() { return cGroup_0; }

		//{XUnaryOperation}
		public Action getXUnaryOperationAction_0_0() { return cXUnaryOperationAction_0_0; }

		//feature=[types::JvmIdentifyableElement|OpUnary]
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//[types::JvmIdentifyableElement|OpUnary]
		public CrossReference getFeatureJvmIdentifyableElementCrossReference_0_1_0() { return cFeatureJvmIdentifyableElementCrossReference_0_1_0; }

		//OpUnary
		public RuleCall getFeatureJvmIdentifyableElementOpUnaryParserRuleCall_0_1_0_1() { return cFeatureJvmIdentifyableElementOpUnaryParserRuleCall_0_1_0_1; }

		//operand=XMemberFeatureCall
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }

		//XMemberFeatureCall
		public RuleCall getOperandXMemberFeatureCallParserRuleCall_0_2_0() { return cOperandXMemberFeatureCallParserRuleCall_0_2_0; }

		//XMemberFeatureCall
		public RuleCall getXMemberFeatureCallParserRuleCall_1() { return cXMemberFeatureCallParserRuleCall_1; }
	}

	public class OpUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OpUnary:
		//	"!" | "-" | "+";
		public ParserRule getRule() { return rule; }

		//"!" | "-" | "+"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"+"
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
	}

	public class XMemberFeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMemberFeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXMemberFeatureCallMemberCallTargetAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cLessThanSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0 = (RuleCall)cTypeArgumentsAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_2_2 = (Group)cGroup_1_2.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_2_0 = (Keyword)cGroup_1_2_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_2_2_1 = (Assignment)cGroup_1_2_2.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_2_1_0 = (RuleCall)cTypeArgumentsAssignment_1_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);
		private final Assignment cFeatureAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cFeatureJvmIdentifyableElementCrossReference_1_3_0 = (CrossReference)cFeatureAssignment_1_3.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifyableElementIDTerminalRuleCall_1_3_0_1 = (RuleCall)cFeatureJvmIdentifyableElementCrossReference_1_3_0.eContents().get(1);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Group cGroup_1_4_1 = (Group)cGroup_1_4.eContents().get(1);
		private final Assignment cMemberCallArgumentsAssignment_1_4_1_0 = (Assignment)cGroup_1_4_1.eContents().get(0);
		private final RuleCall cMemberCallArgumentsXExpressionParserRuleCall_1_4_1_0_0 = (RuleCall)cMemberCallArgumentsAssignment_1_4_1_0.eContents().get(0);
		private final Group cGroup_1_4_1_1 = (Group)cGroup_1_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_4_1_1_0 = (Keyword)cGroup_1_4_1_1.eContents().get(0);
		private final Assignment cMemberCallArgumentsAssignment_1_4_1_1_1 = (Assignment)cGroup_1_4_1_1.eContents().get(1);
		private final RuleCall cMemberCallArgumentsXExpressionParserRuleCall_1_4_1_1_1_0 = (RuleCall)cMemberCallArgumentsAssignment_1_4_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4_2 = (Keyword)cGroup_1_4.eContents().get(2);
		
		//XMemberFeatureCall returns XExpression:
		//	XPrimaryExpression ({XMemberFeatureCall.memberCallTarget=current} "." ("<" typeArguments+=JvmArgumentTypeReference
		//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifyableElement] ("("
		//	(memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?)*;
		public ParserRule getRule() { return rule; }

		//XPrimaryExpression ({XMemberFeatureCall.memberCallTarget=current} "." ("<" typeArguments+=JvmArgumentTypeReference (","
		//typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifyableElement] ("("
		//(memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?)*
		public Group getGroup() { return cGroup; }

		//XPrimaryExpression
		public RuleCall getXPrimaryExpressionParserRuleCall_0() { return cXPrimaryExpressionParserRuleCall_0; }

		//({XMemberFeatureCall.memberCallTarget=current} "." ("<" typeArguments+=JvmArgumentTypeReference (","
		//typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifyableElement] ("("
		//(memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?)*
		public Group getGroup_1() { return cGroup_1; }

		//{XMemberFeatureCall.memberCallTarget=current}
		public Action getXMemberFeatureCallMemberCallTargetAction_1_0() { return cXMemberFeatureCallMemberCallTargetAction_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"<"
		public Keyword getLessThanSignKeyword_1_2_0() { return cLessThanSignKeyword_1_2_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_1_2_1() { return cTypeArgumentsAssignment_1_2_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0; }

		//("," typeArguments+=JvmArgumentTypeReference)*
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }

		//","
		public Keyword getCommaKeyword_1_2_2_0() { return cCommaKeyword_1_2_2_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_1_2_2_1() { return cTypeArgumentsAssignment_1_2_2_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_2_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_2_3() { return cGreaterThanSignKeyword_1_2_3; }

		//feature=[types::JvmIdentifyableElement]
		public Assignment getFeatureAssignment_1_3() { return cFeatureAssignment_1_3; }

		//[types::JvmIdentifyableElement]
		public CrossReference getFeatureJvmIdentifyableElementCrossReference_1_3_0() { return cFeatureJvmIdentifyableElementCrossReference_1_3_0; }

		//ID
		public RuleCall getFeatureJvmIdentifyableElementIDTerminalRuleCall_1_3_0_1() { return cFeatureJvmIdentifyableElementIDTerminalRuleCall_1_3_0_1; }

		//("(" (memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_4_0() { return cLeftParenthesisKeyword_1_4_0; }

		//(memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)?
		public Group getGroup_1_4_1() { return cGroup_1_4_1; }

		//memberCallArguments+=XExpression
		public Assignment getMemberCallArgumentsAssignment_1_4_1_0() { return cMemberCallArgumentsAssignment_1_4_1_0; }

		//XExpression
		public RuleCall getMemberCallArgumentsXExpressionParserRuleCall_1_4_1_0_0() { return cMemberCallArgumentsXExpressionParserRuleCall_1_4_1_0_0; }

		//("," memberCallArguments+=XExpression)*
		public Group getGroup_1_4_1_1() { return cGroup_1_4_1_1; }

		//","
		public Keyword getCommaKeyword_1_4_1_1_0() { return cCommaKeyword_1_4_1_1_0; }

		//memberCallArguments+=XExpression
		public Assignment getMemberCallArgumentsAssignment_1_4_1_1_1() { return cMemberCallArgumentsAssignment_1_4_1_1_1; }

		//XExpression
		public RuleCall getMemberCallArgumentsXExpressionParserRuleCall_1_4_1_1_1_0() { return cMemberCallArgumentsXExpressionParserRuleCall_1_4_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4_2() { return cRightParenthesisKeyword_1_4_2; }
	}

	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXClosureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXBooleanLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXIntLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXNullLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXStringLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXTypeLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXConstructorCallParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXBlockExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cXSwitchExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cXFeatureCallParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cXIfExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cXForLoopExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cXWhileExpressionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cXDoWhileExpressionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cXCastedExpressionParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cXThrowExpressionParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cXTryCatchFinallyExpressionParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cXParenthesizedExpressionParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		
		//XPrimaryExpression returns XExpression:
		//	XClosure | XBooleanLiteral | XIntLiteral | XNullLiteral | XStringLiteral | XTypeLiteral | XConstructorCall |
		//	XBlockExpression | XSwitchExpression | XFeatureCall | XIfExpression | XForLoopExpression | XWhileExpression |
		//	XDoWhileExpression | XCastedExpression | XThrowExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
		public ParserRule getRule() { return rule; }

		//XClosure | XBooleanLiteral | XIntLiteral | XNullLiteral | XStringLiteral | XTypeLiteral | XConstructorCall |
		//XBlockExpression | XSwitchExpression | XFeatureCall | XIfExpression | XForLoopExpression | XWhileExpression |
		//XDoWhileExpression | XCastedExpression | XThrowExpression | XTryCatchFinallyExpression | XParenthesizedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//XClosure
		public RuleCall getXClosureParserRuleCall_0() { return cXClosureParserRuleCall_0; }

		//XBooleanLiteral
		public RuleCall getXBooleanLiteralParserRuleCall_1() { return cXBooleanLiteralParserRuleCall_1; }

		//XIntLiteral
		public RuleCall getXIntLiteralParserRuleCall_2() { return cXIntLiteralParserRuleCall_2; }

		//XNullLiteral
		public RuleCall getXNullLiteralParserRuleCall_3() { return cXNullLiteralParserRuleCall_3; }

		//XStringLiteral
		public RuleCall getXStringLiteralParserRuleCall_4() { return cXStringLiteralParserRuleCall_4; }

		//XTypeLiteral
		public RuleCall getXTypeLiteralParserRuleCall_5() { return cXTypeLiteralParserRuleCall_5; }

		//XConstructorCall
		public RuleCall getXConstructorCallParserRuleCall_6() { return cXConstructorCallParserRuleCall_6; }

		//XBlockExpression
		public RuleCall getXBlockExpressionParserRuleCall_7() { return cXBlockExpressionParserRuleCall_7; }

		//XSwitchExpression
		public RuleCall getXSwitchExpressionParserRuleCall_8() { return cXSwitchExpressionParserRuleCall_8; }

		//XFeatureCall
		public RuleCall getXFeatureCallParserRuleCall_9() { return cXFeatureCallParserRuleCall_9; }

		//XIfExpression
		public RuleCall getXIfExpressionParserRuleCall_10() { return cXIfExpressionParserRuleCall_10; }

		//XForLoopExpression
		public RuleCall getXForLoopExpressionParserRuleCall_11() { return cXForLoopExpressionParserRuleCall_11; }

		//XWhileExpression
		public RuleCall getXWhileExpressionParserRuleCall_12() { return cXWhileExpressionParserRuleCall_12; }

		//XDoWhileExpression
		public RuleCall getXDoWhileExpressionParserRuleCall_13() { return cXDoWhileExpressionParserRuleCall_13; }

		//XCastedExpression
		public RuleCall getXCastedExpressionParserRuleCall_14() { return cXCastedExpressionParserRuleCall_14; }

		//XThrowExpression
		public RuleCall getXThrowExpressionParserRuleCall_15() { return cXThrowExpressionParserRuleCall_15; }

		//XTryCatchFinallyExpression
		public RuleCall getXTryCatchFinallyExpressionParserRuleCall_16() { return cXTryCatchFinallyExpressionParserRuleCall_16; }

		//XParenthesizedExpression
		public RuleCall getXParenthesizedExpressionParserRuleCall_17() { return cXParenthesizedExpressionParserRuleCall_17; }
	}

	public class XClosureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XClosure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXClosureAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cFormalParametersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFormalParametersJvmFormalParameterParserRuleCall_1_0_0 = (RuleCall)cFormalParametersAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cFormalParametersAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cFormalParametersJvmFormalParameterParserRuleCall_1_1_1_0 = (RuleCall)cFormalParametersAssignment_1_1_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionXExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//XClosure returns XExpression:
		//	{XClosure} (formalParameters+=JvmFormalParameter ("," formalParameters+=JvmFormalParameter)*)? "|"
		//	expression=XExpression;
		public ParserRule getRule() { return rule; }

		//{XClosure} (formalParameters+=JvmFormalParameter ("," formalParameters+=JvmFormalParameter)*)? "|"
		//expression=XExpression
		public Group getGroup() { return cGroup; }

		//{XClosure}
		public Action getXClosureAction_0() { return cXClosureAction_0; }

		//(formalParameters+=JvmFormalParameter ("," formalParameters+=JvmFormalParameter)*)?
		public Group getGroup_1() { return cGroup_1; }

		//formalParameters+=JvmFormalParameter
		public Assignment getFormalParametersAssignment_1_0() { return cFormalParametersAssignment_1_0; }

		//JvmFormalParameter
		public RuleCall getFormalParametersJvmFormalParameterParserRuleCall_1_0_0() { return cFormalParametersJvmFormalParameterParserRuleCall_1_0_0; }

		//("," formalParameters+=JvmFormalParameter)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//formalParameters+=JvmFormalParameter
		public Assignment getFormalParametersAssignment_1_1_1() { return cFormalParametersAssignment_1_1_1; }

		//JvmFormalParameter
		public RuleCall getFormalParametersJvmFormalParameterParserRuleCall_1_1_1_0() { return cFormalParametersJvmFormalParameterParserRuleCall_1_1_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }

		//expression=XExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_3_0() { return cExpressionXExpressionParserRuleCall_3_0; }
	}

	public class XCastedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XCastedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetXMemberFeatureCallParserRuleCall_3_0 = (RuleCall)cTargetAssignment_3.eContents().get(0);
		
		//XCastedExpression:
		//	"(" type=JvmTypeReference ")" target=XMemberFeatureCall;
		public ParserRule getRule() { return rule; }

		//"(" type=JvmTypeReference ")" target=XMemberFeatureCall
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//target=XMemberFeatureCall
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }

		//XMemberFeatureCall
		public RuleCall getTargetXMemberFeatureCallParserRuleCall_3_0() { return cTargetXMemberFeatureCallParserRuleCall_3_0; }
	}

	public class XParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cXExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XParenthesizedExpression returns XExpression:
		//	"(" XExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" XExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//XExpression
		public RuleCall getXExpressionParserRuleCall_1() { return cXExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class XIfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XIfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIfAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIfXExpressionParserRuleCall_2_0 = (RuleCall)cIfAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenXExpressionParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseXExpressionParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		
		//XIfExpression:
		//	"if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
		public ParserRule getRule() { return rule; }

		//"if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//if=XExpression
		public Assignment getIfAssignment_2() { return cIfAssignment_2; }

		//XExpression
		public RuleCall getIfXExpressionParserRuleCall_2_0() { return cIfXExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//then=XExpression
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }

		//XExpression
		public RuleCall getThenXExpressionParserRuleCall_4_0() { return cThenXExpressionParserRuleCall_4_0; }

		//("else" else=XExpression)?
		public Group getGroup_5() { return cGroup_5; }

		//"else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//else=XExpression
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }

		//XExpression
		public RuleCall getElseXExpressionParserRuleCall_5_1_0() { return cElseXExpressionParserRuleCall_5_1_0; }
	}

	public class XSwitchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XSwitchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSwitchAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSwitchXExpressionInsideBlockParserRuleCall_1_0 = (RuleCall)cSwitchAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCasesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCasesXCasePartParserRuleCall_3_0 = (RuleCall)cCasesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDefaultKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Alternatives cAlternatives_4_2 = (Alternatives)cGroup_4.eContents().get(2);
		private final Group cGroup_4_2_0 = (Group)cAlternatives_4_2.eContents().get(0);
		private final Assignment cDefaultAssignment_4_2_0_0 = (Assignment)cGroup_4_2_0.eContents().get(0);
		private final RuleCall cDefaultXExpressionParserRuleCall_4_2_0_0_0 = (RuleCall)cDefaultAssignment_4_2_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2_0_1 = (Keyword)cGroup_4_2_0.eContents().get(1);
		private final Assignment cDefaultAssignment_4_2_1 = (Assignment)cAlternatives_4_2.eContents().get(1);
		private final RuleCall cDefaultXBlockExpressionParserRuleCall_4_2_1_0 = (RuleCall)cDefaultAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XSwitchExpression:
		//	"switch" switch=XExpressionInsideBlock? "{" cases+=XCasePart+ ("default" ":" (default=XExpression ";" |
		//	default=XBlockExpression))? "}";
		public ParserRule getRule() { return rule; }

		//"switch" switch=XExpressionInsideBlock? "{" cases+=XCasePart+ ("default" ":" (default=XExpression ";" |
		//default=XBlockExpression))? "}"
		public Group getGroup() { return cGroup; }

		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }

		//switch=XExpressionInsideBlock?
		public Assignment getSwitchAssignment_1() { return cSwitchAssignment_1; }

		//XExpressionInsideBlock
		public RuleCall getSwitchXExpressionInsideBlockParserRuleCall_1_0() { return cSwitchXExpressionInsideBlockParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//cases+=XCasePart+
		public Assignment getCasesAssignment_3() { return cCasesAssignment_3; }

		//XCasePart
		public RuleCall getCasesXCasePartParserRuleCall_3_0() { return cCasesXCasePartParserRuleCall_3_0; }

		//("default" ":" (default=XExpression ";" | default=XBlockExpression))?
		public Group getGroup_4() { return cGroup_4; }

		//"default"
		public Keyword getDefaultKeyword_4_0() { return cDefaultKeyword_4_0; }

		//":"
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }

		//default=XExpression ";" | default=XBlockExpression
		public Alternatives getAlternatives_4_2() { return cAlternatives_4_2; }

		//default=XExpression ";"
		public Group getGroup_4_2_0() { return cGroup_4_2_0; }

		//default=XExpression
		public Assignment getDefaultAssignment_4_2_0_0() { return cDefaultAssignment_4_2_0_0; }

		//XExpression
		public RuleCall getDefaultXExpressionParserRuleCall_4_2_0_0_0() { return cDefaultXExpressionParserRuleCall_4_2_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_2_0_1() { return cSemicolonKeyword_4_2_0_1; }

		//default=XBlockExpression
		public Assignment getDefaultAssignment_4_2_1() { return cDefaultAssignment_4_2_1; }

		//XBlockExpression
		public RuleCall getDefaultXBlockExpressionParserRuleCall_4_2_1_0() { return cDefaultXBlockExpressionParserRuleCall_4_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class XCasePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XCasePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeGuardAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeGuardJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeGuardAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCaseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCaseAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCaseXExpressionParserRuleCall_1_1_0 = (RuleCall)cCaseAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cThenAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cThenXExpressionParserRuleCall_3_0_0_0 = (RuleCall)cThenAssignment_3_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cThenAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cThenXBlockExpressionParserRuleCall_3_1_0 = (RuleCall)cThenAssignment_3_1.eContents().get(0);
		
		//XCasePart:
		//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" (then=XExpression ";" | then=XBlockExpression);
		public ParserRule getRule() { return rule; }

		//typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" (then=XExpression ";" | then=XBlockExpression)
		public Group getGroup() { return cGroup; }

		//typeGuard=JvmTypeReference?
		public Assignment getTypeGuardAssignment_0() { return cTypeGuardAssignment_0; }

		//JvmTypeReference
		public RuleCall getTypeGuardJvmTypeReferenceParserRuleCall_0_0() { return cTypeGuardJvmTypeReferenceParserRuleCall_0_0; }

		//("case" case=XExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//"case"
		public Keyword getCaseKeyword_1_0() { return cCaseKeyword_1_0; }

		//case=XExpression
		public Assignment getCaseAssignment_1_1() { return cCaseAssignment_1_1; }

		//XExpression
		public RuleCall getCaseXExpressionParserRuleCall_1_1_0() { return cCaseXExpressionParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//then=XExpression ";" | then=XBlockExpression
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//then=XExpression ";"
		public Group getGroup_3_0() { return cGroup_3_0; }

		//then=XExpression
		public Assignment getThenAssignment_3_0_0() { return cThenAssignment_3_0_0; }

		//XExpression
		public RuleCall getThenXExpressionParserRuleCall_3_0_0_0() { return cThenXExpressionParserRuleCall_3_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_0_1() { return cSemicolonKeyword_3_0_1; }

		//then=XBlockExpression
		public Assignment getThenAssignment_3_1() { return cThenAssignment_3_1; }

		//XBlockExpression
		public RuleCall getThenXBlockExpressionParserRuleCall_3_1_0() { return cThenXBlockExpressionParserRuleCall_3_1_0; }
	}

	public class XForLoopExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XForLoopExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclaredParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclaredParamJvmFormalParameterParserRuleCall_2_0 = (RuleCall)cDeclaredParamAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cForExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cForExpressionXExpressionParserRuleCall_4_0 = (RuleCall)cForExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEachExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEachExpressionXExpressionParserRuleCall_6_0 = (RuleCall)cEachExpressionAssignment_6.eContents().get(0);
		
		//XForLoopExpression:
		//	"for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")" eachExpression=XExpression;
		public ParserRule getRule() { return rule; }

		//"for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")" eachExpression=XExpression
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//declaredParam=JvmFormalParameter
		public Assignment getDeclaredParamAssignment_2() { return cDeclaredParamAssignment_2; }

		//JvmFormalParameter
		public RuleCall getDeclaredParamJvmFormalParameterParserRuleCall_2_0() { return cDeclaredParamJvmFormalParameterParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//forExpression=XExpression
		public Assignment getForExpressionAssignment_4() { return cForExpressionAssignment_4; }

		//XExpression
		public RuleCall getForExpressionXExpressionParserRuleCall_4_0() { return cForExpressionXExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//eachExpression=XExpression
		public Assignment getEachExpressionAssignment_6() { return cEachExpressionAssignment_6; }

		//XExpression
		public RuleCall getEachExpressionXExpressionParserRuleCall_6_0() { return cEachExpressionXExpressionParserRuleCall_6_0; }
	}

	public class XWhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XWhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateXExpressionParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyXExpressionParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//XWhileExpression:
		//	"while" "(" predicate=XExpression ")" body=XExpression;
		public ParserRule getRule() { return rule; }

		//"while" "(" predicate=XExpression ")" body=XExpression
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//predicate=XExpression
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }

		//XExpression
		public RuleCall getPredicateXExpressionParserRuleCall_2_0() { return cPredicateXExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//body=XExpression
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//XExpression
		public RuleCall getBodyXExpressionParserRuleCall_4_0() { return cBodyXExpressionParserRuleCall_4_0; }
	}

	public class XDoWhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XDoWhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyXExpressionParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Keyword cWhileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPredicateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPredicateXExpressionParserRuleCall_4_0 = (RuleCall)cPredicateAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XDoWhileExpression:
		//	"do" body=XExpression "while" "(" predicate=XExpression ")";
		public ParserRule getRule() { return rule; }

		//"do" body=XExpression "while" "(" predicate=XExpression ")"
		public Group getGroup() { return cGroup; }

		//"do"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }

		//body=XExpression
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//XExpression
		public RuleCall getBodyXExpressionParserRuleCall_1_0() { return cBodyXExpressionParserRuleCall_1_0; }

		//"while"
		public Keyword getWhileKeyword_2() { return cWhileKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//predicate=XExpression
		public Assignment getPredicateAssignment_4() { return cPredicateAssignment_4; }

		//XExpression
		public RuleCall getPredicateXExpressionParserRuleCall_4_0() { return cPredicateXExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class XBlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXBlockExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionsXExpressionInsideBlockParserRuleCall_2_0_0 = (RuleCall)cExpressionsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XBlockExpression:
		//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
		public ParserRule getRule() { return rule; }

		//{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}"
		public Group getGroup() { return cGroup; }

		//{XBlockExpression}
		public Action getXBlockExpressionAction_0() { return cXBlockExpressionAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(expressions+=XExpressionInsideBlock ";"?)*
		public Group getGroup_2() { return cGroup_2; }

		//expressions+=XExpressionInsideBlock
		public Assignment getExpressionsAssignment_2_0() { return cExpressionsAssignment_2_0; }

		//XExpressionInsideBlock
		public RuleCall getExpressionsXExpressionInsideBlockParserRuleCall_2_0_0() { return cExpressionsXExpressionInsideBlockParserRuleCall_2_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class XExpressionInsideBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpressionInsideBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XExpressionInsideBlock returns XExpression:
		//	XVariableDeclaration | XExpression;
		public ParserRule getRule() { return rule; }

		//XVariableDeclaration | XExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//XVariableDeclaration
		public RuleCall getXVariableDeclarationParserRuleCall_0() { return cXVariableDeclarationParserRuleCall_0; }

		//XExpression
		public RuleCall getXExpressionParserRuleCall_1() { return cXExpressionParserRuleCall_1; }
	}

	public class XVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cValKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightXExpressionParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		
		//XVariableDeclaration:
		//	("var" | "val") type=JvmTypeReference? name=ID "=" right=XExpression;
		public ParserRule getRule() { return rule; }

		//("var" | "val") type=JvmTypeReference? name=ID "=" right=XExpression
		public Group getGroup() { return cGroup; }

		//"var" | "val"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"var"
		public Keyword getVarKeyword_0_0() { return cVarKeyword_0_0; }

		//"val"
		public Keyword getValKeyword_0_1() { return cValKeyword_0_1; }

		//type=JvmTypeReference?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//right=XExpression
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }

		//XExpression
		public RuleCall getRightXExpressionParserRuleCall_4_0() { return cRightXExpressionParserRuleCall_4_0; }
	}

	public class JvmFormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmFormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cParameterTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//JvmFormalParameter returns types::JvmFormalParameter:
		//	parameterType=JvmTypeReference? name=ID;
		public ParserRule getRule() { return rule; }

		//parameterType=JvmTypeReference? name=ID
		public Group getGroup() { return cGroup; }

		//parameterType=JvmTypeReference?
		public Assignment getParameterTypeAssignment_0() { return cParameterTypeAssignment_0; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_0_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class XFeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XFeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_0_1_0 = (RuleCall)cTypeArgumentsAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_0_2_1_0 = (RuleCall)cTypeArgumentsAssignment_0_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifyableElementCrossReference_1_0 = (CrossReference)cFeatureAssignment_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifyableElementIDTerminalRuleCall_1_0_1 = (RuleCall)cFeatureJvmIdentifyableElementCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cFeatureCallArgumentsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cFeatureCallArgumentsXExpressionParserRuleCall_2_1_0_0 = (RuleCall)cFeatureCallArgumentsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cFeatureCallArgumentsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cFeatureCallArgumentsXExpressionParserRuleCall_2_1_1_1_0 = (RuleCall)cFeatureCallArgumentsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//XFeatureCall:
		//	("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		//	feature=[types::JvmIdentifyableElement] ("(" (featureCallArguments+=XExpression (","
		//	featureCallArguments+=XExpression)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		//feature=[types::JvmIdentifyableElement] ("(" (featureCallArguments+=XExpression (","
		//featureCallArguments+=XExpression)*)? ")")?
		public Group getGroup() { return cGroup; }

		//("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		public Group getGroup_0() { return cGroup_0; }

		//"<"
		public Keyword getLessThanSignKeyword_0_0() { return cLessThanSignKeyword_0_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_0_1() { return cTypeArgumentsAssignment_0_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_0_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_0_1_0; }

		//("," typeArguments+=JvmArgumentTypeReference)*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//","
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_0_2_1() { return cTypeArgumentsAssignment_0_2_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_0_2_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_0_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_3() { return cGreaterThanSignKeyword_0_3; }

		//feature=[types::JvmIdentifyableElement]
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }

		//[types::JvmIdentifyableElement]
		public CrossReference getFeatureJvmIdentifyableElementCrossReference_1_0() { return cFeatureJvmIdentifyableElementCrossReference_1_0; }

		//ID
		public RuleCall getFeatureJvmIdentifyableElementIDTerminalRuleCall_1_0_1() { return cFeatureJvmIdentifyableElementIDTerminalRuleCall_1_0_1; }

		//("(" (featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//(featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//featureCallArguments+=XExpression
		public Assignment getFeatureCallArgumentsAssignment_2_1_0() { return cFeatureCallArgumentsAssignment_2_1_0; }

		//XExpression
		public RuleCall getFeatureCallArgumentsXExpressionParserRuleCall_2_1_0_0() { return cFeatureCallArgumentsXExpressionParserRuleCall_2_1_0_0; }

		//("," featureCallArguments+=XExpression)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//featureCallArguments+=XExpression
		public Assignment getFeatureCallArgumentsAssignment_2_1_1_1() { return cFeatureCallArgumentsAssignment_2_1_1_1; }

		//XExpression
		public RuleCall getFeatureCallArgumentsXExpressionParserRuleCall_2_1_1_1_0() { return cFeatureCallArgumentsXExpressionParserRuleCall_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class XConstructorCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XConstructorCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstructorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cConstructorJvmConstructorCrossReference_1_0 = (CrossReference)cConstructorAssignment_1.eContents().get(0);
		private final RuleCall cConstructorJvmConstructorQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cConstructorJvmConstructorCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cTypeArgumentsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_2_2_1_0 = (RuleCall)cTypeArgumentsAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cArgumentsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cArgumentsXExpressionParserRuleCall_4_0_0 = (RuleCall)cArgumentsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cArgumentsXExpressionParserRuleCall_4_1_1_0 = (RuleCall)cArgumentsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XConstructorCall:
		//	"new" constructor=[types::JvmConstructor|QualifiedName] ("<" typeArguments+=JvmArgumentTypeReference (","
		//	typeArguments+=JvmArgumentTypeReference)* ">")? "(" (arguments+=XExpression ("," arguments+=XExpression)*)? ")";
		public ParserRule getRule() { return rule; }

		//"new" constructor=[types::JvmConstructor|QualifiedName] ("<" typeArguments+=JvmArgumentTypeReference (","
		//typeArguments+=JvmArgumentTypeReference)* ">")? "(" (arguments+=XExpression ("," arguments+=XExpression)*)? ")"
		public Group getGroup() { return cGroup; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//constructor=[types::JvmConstructor|QualifiedName]
		public Assignment getConstructorAssignment_1() { return cConstructorAssignment_1; }

		//[types::JvmConstructor|QualifiedName]
		public CrossReference getConstructorJvmConstructorCrossReference_1_0() { return cConstructorJvmConstructorCrossReference_1_0; }

		//QualifiedName
		public RuleCall getConstructorJvmConstructorQualifiedNameParserRuleCall_1_0_1() { return cConstructorJvmConstructorQualifiedNameParserRuleCall_1_0_1; }

		//("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_2_1() { return cTypeArgumentsAssignment_2_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_2_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_2_1_0; }

		//("," typeArguments+=JvmArgumentTypeReference)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_2_2_1() { return cTypeArgumentsAssignment_2_2_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_2_2_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(arguments+=XExpression ("," arguments+=XExpression)*)?
		public Group getGroup_4() { return cGroup_4; }

		//arguments+=XExpression
		public Assignment getArgumentsAssignment_4_0() { return cArgumentsAssignment_4_0; }

		//XExpression
		public RuleCall getArgumentsXExpressionParserRuleCall_4_0_0() { return cArgumentsXExpressionParserRuleCall_4_0_0; }

		//("," arguments+=XExpression)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//arguments+=XExpression
		public Assignment getArgumentsAssignment_4_1_1() { return cArgumentsAssignment_4_1_1; }

		//XExpression
		public RuleCall getArgumentsXExpressionParserRuleCall_4_1_1_0() { return cArgumentsXExpressionParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class XBooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBooleanLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cXBooleanLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cFalseKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cIsTrueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cIsTrueTrueKeyword_1_0 = (Keyword)cIsTrueAssignment_1.eContents().get(0);
		
		//XBooleanLiteral:
		//	{XBooleanLiteral} "false" | isTrue?="true";
		public ParserRule getRule() { return rule; }

		//{XBooleanLiteral} "false" | isTrue?="true"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{XBooleanLiteral} "false"
		public Group getGroup_0() { return cGroup_0; }

		//{XBooleanLiteral}
		public Action getXBooleanLiteralAction_0_0() { return cXBooleanLiteralAction_0_0; }

		//"false"
		public Keyword getFalseKeyword_0_1() { return cFalseKeyword_0_1; }

		//isTrue?="true"
		public Assignment getIsTrueAssignment_1() { return cIsTrueAssignment_1; }

		//"true"
		public Keyword getIsTrueTrueKeyword_1_0() { return cIsTrueTrueKeyword_1_0; }
	}

	public class XNullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XNullLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXNullLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//XNullLiteral:
		//	{XNullLiteral} "null";
		public ParserRule getRule() { return rule; }

		//{XNullLiteral} "null"
		public Group getGroup() { return cGroup; }

		//{XNullLiteral}
		public Action getXNullLiteralAction_0() { return cXNullLiteralAction_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class XIntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XIntLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//XIntLiteral:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class XStringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XStringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//XStringLiteral:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class XTypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XTypeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeJvmTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeJvmTypeCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cClassKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XTypeLiteral:
		//	type=[types::JvmType|QualifiedName] "." "class";
		public ParserRule getRule() { return rule; }

		//type=[types::JvmType|QualifiedName] "." "class"
		public Group getGroup() { return cGroup; }

		//type=[types::JvmType|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[types::JvmType|QualifiedName]
		public CrossReference getTypeJvmTypeCrossReference_0_0() { return cTypeJvmTypeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeJvmTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeJvmTypeQualifiedNameParserRuleCall_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//"class"
		public Keyword getClassKeyword_2() { return cClassKeyword_2; }
	}

	public class XThrowExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XThrowExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThrowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionXExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//XThrowExpression:
		//	"throw" expression=XExpression;
		public ParserRule getRule() { return rule; }

		//"throw" expression=XExpression
		public Group getGroup() { return cGroup; }

		//"throw"
		public Keyword getThrowKeyword_0() { return cThrowKeyword_0; }

		//expression=XExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_1_0() { return cExpressionXExpressionParserRuleCall_1_0; }
	}

	public class XTryCatchFinallyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XTryCatchFinallyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionXExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cCatchClausesAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cCatchClausesXCatchClauseParserRuleCall_2_0_0_0 = (RuleCall)cCatchClausesAssignment_2_0_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Keyword cFinallyKeyword_2_0_1_0 = (Keyword)cGroup_2_0_1.eContents().get(0);
		private final Assignment cFinallyExpressionAssignment_2_0_1_1 = (Assignment)cGroup_2_0_1.eContents().get(1);
		private final RuleCall cFinallyExpressionXExpressionParserRuleCall_2_0_1_1_0 = (RuleCall)cFinallyExpressionAssignment_2_0_1_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cFinallyKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cFinallyExpressionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cFinallyExpressionXExpressionParserRuleCall_2_1_1_0 = (RuleCall)cFinallyExpressionAssignment_2_1_1.eContents().get(0);
		
		//XTryCatchFinallyExpression:
		//	"try" expression=XExpression (catchClauses+=XCatchClause+ ("finally" finallyExpression=XExpression)? | "finally"
		//	finallyExpression=XExpression);
		public ParserRule getRule() { return rule; }

		//"try" expression=XExpression (catchClauses+=XCatchClause+ ("finally" finallyExpression=XExpression)? | "finally"
		//finallyExpression=XExpression)
		public Group getGroup() { return cGroup; }

		//"try"
		public Keyword getTryKeyword_0() { return cTryKeyword_0; }

		//expression=XExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_1_0() { return cExpressionXExpressionParserRuleCall_1_0; }

		//catchClauses+=XCatchClause+ ("finally" finallyExpression=XExpression)? | "finally" finallyExpression=XExpression
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//catchClauses+=XCatchClause+ ("finally" finallyExpression=XExpression)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//catchClauses+=XCatchClause+
		public Assignment getCatchClausesAssignment_2_0_0() { return cCatchClausesAssignment_2_0_0; }

		//XCatchClause
		public RuleCall getCatchClausesXCatchClauseParserRuleCall_2_0_0_0() { return cCatchClausesXCatchClauseParserRuleCall_2_0_0_0; }

		//("finally" finallyExpression=XExpression)?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }

		//"finally"
		public Keyword getFinallyKeyword_2_0_1_0() { return cFinallyKeyword_2_0_1_0; }

		//finallyExpression=XExpression
		public Assignment getFinallyExpressionAssignment_2_0_1_1() { return cFinallyExpressionAssignment_2_0_1_1; }

		//XExpression
		public RuleCall getFinallyExpressionXExpressionParserRuleCall_2_0_1_1_0() { return cFinallyExpressionXExpressionParserRuleCall_2_0_1_1_0; }

		//"finally" finallyExpression=XExpression
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"finally"
		public Keyword getFinallyKeyword_2_1_0() { return cFinallyKeyword_2_1_0; }

		//finallyExpression=XExpression
		public Assignment getFinallyExpressionAssignment_2_1_1() { return cFinallyExpressionAssignment_2_1_1; }

		//XExpression
		public RuleCall getFinallyExpressionXExpressionParserRuleCall_2_1_1_0() { return cFinallyExpressionXExpressionParserRuleCall_2_1_1_0; }
	}

	public class XCatchClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XCatchClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclaredParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclaredParamJvmFormalParameterParserRuleCall_2_0 = (RuleCall)cDeclaredParamAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionXExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//XCatchClause:
		//	"catch" "(" declaredParam=JvmFormalParameter ")" expression=XExpression;
		public ParserRule getRule() { return rule; }

		//"catch" "(" declaredParam=JvmFormalParameter ")" expression=XExpression
		public Group getGroup() { return cGroup; }

		//"catch"
		public Keyword getCatchKeyword_0() { return cCatchKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//declaredParam=JvmFormalParameter
		public Assignment getDeclaredParamAssignment_2() { return cDeclaredParamAssignment_2; }

		//JvmFormalParameter
		public RuleCall getDeclaredParamJvmFormalParameterParserRuleCall_2_0() { return cDeclaredParamJvmFormalParameterParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//expression=XExpression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_4_0() { return cExpressionXExpressionParserRuleCall_4_0; }
	}
	
	
	private XExpressionElements pXExpression;
	private XAssignmentElements pXAssignment;
	private OpAssignElements pOpAssign;
	private XOrExpressionElements pXOrExpression;
	private OpOrElements pOpOr;
	private XAndExpressionElements pXAndExpression;
	private OpAndElements pOpAnd;
	private XEqualityExpressionElements pXEqualityExpression;
	private OpEqualityElements pOpEquality;
	private XRelationalExpressionElements pXRelationalExpression;
	private OpCompareElements pOpCompare;
	private XOtherOperatorExpressionElements pXOtherOperatorExpression;
	private OpOtherElements pOpOther;
	private XAdditiveExpressionElements pXAdditiveExpression;
	private OpAddElements pOpAdd;
	private XMultiplicativeExpressionElements pXMultiplicativeExpression;
	private OpMultiElements pOpMulti;
	private XUnaryOperationElements pXUnaryOperation;
	private OpUnaryElements pOpUnary;
	private XMemberFeatureCallElements pXMemberFeatureCall;
	private XPrimaryExpressionElements pXPrimaryExpression;
	private XClosureElements pXClosure;
	private XCastedExpressionElements pXCastedExpression;
	private XParenthesizedExpressionElements pXParenthesizedExpression;
	private XIfExpressionElements pXIfExpression;
	private XSwitchExpressionElements pXSwitchExpression;
	private XCasePartElements pXCasePart;
	private XForLoopExpressionElements pXForLoopExpression;
	private XWhileExpressionElements pXWhileExpression;
	private XDoWhileExpressionElements pXDoWhileExpression;
	private XBlockExpressionElements pXBlockExpression;
	private XExpressionInsideBlockElements pXExpressionInsideBlock;
	private XVariableDeclarationElements pXVariableDeclaration;
	private JvmFormalParameterElements pJvmFormalParameter;
	private XFeatureCallElements pXFeatureCall;
	private XConstructorCallElements pXConstructorCall;
	private XBooleanLiteralElements pXBooleanLiteral;
	private XNullLiteralElements pXNullLiteral;
	private XIntLiteralElements pXIntLiteral;
	private XStringLiteralElements pXStringLiteral;
	private XTypeLiteralElements pXTypeLiteral;
	private XThrowExpressionElements pXThrowExpression;
	private XTryCatchFinallyExpressionElements pXTryCatchFinallyExpression;
	private XCatchClauseElements pXCatchClause;
	
	private final GrammarProvider grammarProvider;

	private XtypeGrammarAccess gaXtype;

	@Inject
	public XbaseGrammarAccess(GrammarProvider grammarProvider,
		XtypeGrammarAccess gaXtype) {
		this.grammarProvider = grammarProvider;
		this.gaXtype = gaXtype;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//XExpression:
	//	XAssignment;
	public XExpressionElements getXExpressionAccess() {
		return (pXExpression != null) ? pXExpression : (pXExpression = new XExpressionElements());
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	XOrExpression ({XAssignment.assignable=current} feature=[types::JvmIdentifyableElement|OpAssign] value=XAssignment)?;
	public XAssignmentElements getXAssignmentAccess() {
		return (pXAssignment != null) ? pXAssignment : (pXAssignment = new XAssignmentElements());
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpAssign:
	//	"=" | "+=";
	public OpAssignElements getOpAssignAccess() {
		return (pOpAssign != null) ? pOpAssign : (pOpAssign = new OpAssignElements());
	}
	
	public ParserRule getOpAssignRule() {
		return getOpAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpOr]
	//	rightOperand=XAndExpression)*;
	public XOrExpressionElements getXOrExpressionAccess() {
		return (pXOrExpression != null) ? pXOrExpression : (pXOrExpression = new XOrExpressionElements());
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public OpOrElements getOpOrAccess() {
		return (pOpOr != null) ? pOpOr : (pOpOr = new OpOrElements());
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpAnd]
	//	rightOperand=XEqualityExpression)*;
	public XAndExpressionElements getXAndExpressionAccess() {
		return (pXAndExpression != null) ? pXAndExpression : (pXAndExpression = new XAndExpressionElements());
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public OpAndElements getOpAndAccess() {
		return (pOpAnd != null) ? pOpAnd : (pOpAnd = new OpAndElements());
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpEquality]
	//	rightOperand=XRelationalExpression)*;
	public XEqualityExpressionElements getXEqualityExpressionAccess() {
		return (pXEqualityExpression != null) ? pXEqualityExpression : (pXEqualityExpression = new XEqualityExpressionElements());
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public OpEqualityElements getOpEqualityAccess() {
		return (pOpEquality != null) ? pOpEquality : (pOpEquality = new OpEqualityElements());
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression ({XInstanceOfExpression.expression=current} "instanceof" type=[types::JvmType|QualifiedName]
	//	| {XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpCompare]
	//	rightOperand=XOtherOperatorExpression)*;
	public XRelationalExpressionElements getXRelationalExpressionAccess() {
		return (pXRelationalExpression != null) ? pXRelationalExpression : (pXRelationalExpression = new XRelationalExpressionElements());
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public OpCompareElements getOpCompareAccess() {
		return (pOpCompare != null) ? pOpCompare : (pOpCompare = new OpCompareElements());
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpOther]
	//	rightOperand=XAdditiveExpression)*;
	public XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return (pXOtherOperatorExpression != null) ? pXOtherOperatorExpression : (pXOtherOperatorExpression = new XOtherOperatorExpressionElements());
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..";
	public OpOtherElements getOpOtherAccess() {
		return (pOpOther != null) ? pOpOther : (pOpOther = new OpOtherElements());
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpAdd]
	//	rightOperand=XMultiplicativeExpression)*;
	public XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return (pXAdditiveExpression != null) ? pXAdditiveExpression : (pXAdditiveExpression = new XAdditiveExpressionElements());
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public OpAddElements getOpAddAccess() {
		return (pOpAdd != null) ? pOpAdd : (pOpAdd = new OpAddElements());
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifyableElement|OpMulti]
	//	rightOperand=XUnaryOperation)*;
	public XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return (pXMultiplicativeExpression != null) ? pXMultiplicativeExpression : (pXMultiplicativeExpression = new XMultiplicativeExpressionElements());
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public OpMultiElements getOpMultiAccess() {
		return (pOpMulti != null) ? pOpMulti : (pOpMulti = new OpMultiElements());
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifyableElement|OpUnary] operand=XMemberFeatureCall | XMemberFeatureCall;
	public XUnaryOperationElements getXUnaryOperationAccess() {
		return (pXUnaryOperation != null) ? pXUnaryOperation : (pXUnaryOperation = new XUnaryOperationElements());
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public OpUnaryElements getOpUnaryAccess() {
		return (pOpUnary != null) ? pOpUnary : (pOpUnary = new OpUnaryElements());
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression ({XMemberFeatureCall.memberCallTarget=current} "." ("<" typeArguments+=JvmArgumentTypeReference
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifyableElement] ("("
	//	(memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?)*;
	public XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return (pXMemberFeatureCall != null) ? pXMemberFeatureCall : (pXMemberFeatureCall = new XMemberFeatureCallElements());
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XClosure | XBooleanLiteral | XIntLiteral | XNullLiteral | XStringLiteral | XTypeLiteral | XConstructorCall |
	//	XBlockExpression | XSwitchExpression | XFeatureCall | XIfExpression | XForLoopExpression | XWhileExpression |
	//	XDoWhileExpression | XCastedExpression | XThrowExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return (pXPrimaryExpression != null) ? pXPrimaryExpression : (pXPrimaryExpression = new XPrimaryExpressionElements());
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XClosure returns XExpression:
	//	{XClosure} (formalParameters+=JvmFormalParameter ("," formalParameters+=JvmFormalParameter)*)? "|"
	//	expression=XExpression;
	public XClosureElements getXClosureAccess() {
		return (pXClosure != null) ? pXClosure : (pXClosure = new XClosureElements());
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XCastedExpression:
	//	"(" type=JvmTypeReference ")" target=XMemberFeatureCall;
	public XCastedExpressionElements getXCastedExpressionAccess() {
		return (pXCastedExpression != null) ? pXCastedExpression : (pXCastedExpression = new XCastedExpressionElements());
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return (pXParenthesizedExpression != null) ? pXParenthesizedExpression : (pXParenthesizedExpression = new XParenthesizedExpressionElements());
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression:
	//	"if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XIfExpressionElements getXIfExpressionAccess() {
		return (pXIfExpression != null) ? pXIfExpression : (pXIfExpression = new XIfExpressionElements());
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression:
	//	"switch" switch=XExpressionInsideBlock? "{" cases+=XCasePart+ ("default" ":" (default=XExpression ";" |
	//	default=XBlockExpression))? "}";
	public XSwitchExpressionElements getXSwitchExpressionAccess() {
		return (pXSwitchExpression != null) ? pXSwitchExpression : (pXSwitchExpression = new XSwitchExpressionElements());
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" (then=XExpression ";" | then=XBlockExpression);
	public XCasePartElements getXCasePartAccess() {
		return (pXCasePart != null) ? pXCasePart : (pXCasePart = new XCasePartElements());
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression:
	//	"for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")" eachExpression=XExpression;
	public XForLoopExpressionElements getXForLoopExpressionAccess() {
		return (pXForLoopExpression != null) ? pXForLoopExpression : (pXForLoopExpression = new XForLoopExpressionElements());
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression:
	//	"while" "(" predicate=XExpression ")" body=XExpression;
	public XWhileExpressionElements getXWhileExpressionAccess() {
		return (pXWhileExpression != null) ? pXWhileExpression : (pXWhileExpression = new XWhileExpressionElements());
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression:
	//	"do" body=XExpression "while" "(" predicate=XExpression ")";
	public XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return (pXDoWhileExpression != null) ? pXDoWhileExpression : (pXDoWhileExpression = new XDoWhileExpressionElements());
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XBlockExpressionElements getXBlockExpressionAccess() {
		return (pXBlockExpression != null) ? pXBlockExpression : (pXBlockExpression = new XBlockExpressionElements());
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return (pXExpressionInsideBlock != null) ? pXExpressionInsideBlock : (pXExpressionInsideBlock = new XExpressionInsideBlockElements());
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration:
	//	("var" | "val") type=JvmTypeReference? name=ID "=" right=XExpression;
	public XVariableDeclarationElements getXVariableDeclarationAccess() {
		return (pXVariableDeclaration != null) ? pXVariableDeclaration : (pXVariableDeclaration = new XVariableDeclarationElements());
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ID;
	public JvmFormalParameterElements getJvmFormalParameterAccess() {
		return (pJvmFormalParameter != null) ? pJvmFormalParameter : (pJvmFormalParameter = new JvmFormalParameterElements());
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall:
	//	("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifyableElement] ("(" (featureCallArguments+=XExpression (","
	//	featureCallArguments+=XExpression)*)? ")")?;
	public XFeatureCallElements getXFeatureCallAccess() {
		return (pXFeatureCall != null) ? pXFeatureCall : (pXFeatureCall = new XFeatureCallElements());
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//XConstructorCall:
	//	"new" constructor=[types::JvmConstructor|QualifiedName] ("<" typeArguments+=JvmArgumentTypeReference (","
	//	typeArguments+=JvmArgumentTypeReference)* ">")? "(" (arguments+=XExpression ("," arguments+=XExpression)*)? ")";
	public XConstructorCallElements getXConstructorCallAccess() {
		return (pXConstructorCall != null) ? pXConstructorCall : (pXConstructorCall = new XConstructorCallElements());
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral:
	//	{XBooleanLiteral} "false" | isTrue?="true";
	public XBooleanLiteralElements getXBooleanLiteralAccess() {
		return (pXBooleanLiteral != null) ? pXBooleanLiteral : (pXBooleanLiteral = new XBooleanLiteralElements());
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral:
	//	{XNullLiteral} "null";
	public XNullLiteralElements getXNullLiteralAccess() {
		return (pXNullLiteral != null) ? pXNullLiteral : (pXNullLiteral = new XNullLiteralElements());
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XIntLiteral:
	//	value=INT;
	public XIntLiteralElements getXIntLiteralAccess() {
		return (pXIntLiteral != null) ? pXIntLiteral : (pXIntLiteral = new XIntLiteralElements());
	}
	
	public ParserRule getXIntLiteralRule() {
		return getXIntLiteralAccess().getRule();
	}

	//XStringLiteral:
	//	value=STRING;
	public XStringLiteralElements getXStringLiteralAccess() {
		return (pXStringLiteral != null) ? pXStringLiteral : (pXStringLiteral = new XStringLiteralElements());
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral:
	//	type=[types::JvmType|QualifiedName] "." "class";
	public XTypeLiteralElements getXTypeLiteralAccess() {
		return (pXTypeLiteral != null) ? pXTypeLiteral : (pXTypeLiteral = new XTypeLiteralElements());
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression:
	//	"throw" expression=XExpression;
	public XThrowExpressionElements getXThrowExpressionAccess() {
		return (pXThrowExpression != null) ? pXThrowExpression : (pXThrowExpression = new XThrowExpressionElements());
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression:
	//	"try" expression=XExpression (catchClauses+=XCatchClause+ ("finally" finallyExpression=XExpression)? | "finally"
	//	finallyExpression=XExpression);
	public XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return (pXTryCatchFinallyExpression != null) ? pXTryCatchFinallyExpression : (pXTryCatchFinallyExpression = new XTryCatchFinallyExpressionElements());
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=JvmFormalParameter ")" expression=XExpression;
	public XCatchClauseElements getXCatchClauseAccess() {
		return (pXCatchClause != null) ? pXCatchClause : (pXCatchClause = new XCatchClauseElements());
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//JvmTypeReference returns JvmParameterizedTypeReference:
	//	JvmParameterizedTypeReference | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)* ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public XtypeGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXtype.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaXtype.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	} 
}
