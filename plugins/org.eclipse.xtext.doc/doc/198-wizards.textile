
h2(#projectwizard). Project Wizard

Optionally Xtext can also generate a project wizard for your DSL. Using this wizard a user can then with only a few clicks create a new project containing a sample model file and workflow. You enable the project wizard generation by adding the corresponding fragment to the "workflow":#generator_fragment:

bc.. 
<!-- project wizard fragment -->
<fragment class="org.eclipse.xtext.ui.generator.projectWizard.SimpleProjectWizardFragment"
	generatorProjectName="${projectName}.generator"
	modelFileExtension="mydsk"/>

p. After running the generator the DSL's UI project will contain a new Xpand template @MyDslNewProject.xpt@ inside the @src@ folder (under the package @<base-package>.ui.wizard@). This workflow will be run when the user clicks the _Finish_ button in the project wizard and it is responsible for initializing the project with some sample content. The default template generated by the fragment will when executed create a sample model file and a simple workflow to run the model through the generator project's @MyDslGenerator.mwe@ workflow. You may of course modify the Xpand template to generate whatever files you want. Just make sure to leave the top-level @main@ definition in place.

p. To further customize the creation of the project (e.g. add a nature and a builder or some additional dependencies) you can implement your own _project creator_. The default project creator is represented by the generated class @MyDslProjectCreator@ (suitable for subclassing) and will simply create a new project with Java and plug-in natures and execute the @main@ definition of the Xpand template as described above.

p. To add more pages or input fields to the project wizard you should subclass the class @MyDslNewProjectWizard@ as appropriate. Don't forget to register the subclass in the UI project's @plugin.xml@. You may also want to make this additional project info available to the Xpand template, in which case you should create a subclass for @MyDslProjectInfo@ to hold that information, as this is the context object which gets passed to the template when it's executed.