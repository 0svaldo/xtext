
h2(#generator). The Generator

Xtext provides you with lots of generic implementations for you language's infrastructure but also uses code generation to generate some of the components.
Those generated components are for instance the parser, the serializer, the Ecore model and a couple of convenient base classes for content assist etc. The generator also contributes to shared project resources such as the plugin.xml, Manifest.MF and the "Guice"#Guice modules.

The architecture of the generator in Xtext is leveraging the MWE project from EMFT and introduces the notion of so called fragments. That is a generator consists of any number of languages. Each language is configured with a URI pointing to its grammar file, the file extensions for the dsl and a list of ${org.eclipse.xtext.generator/src/org.eclipse.xtext.generator.IGeneratorFragment}s. We use the MWE project from EMFT in order to configure and execute xtext generators. 

h3(#short_intor_to_mwe). A short introduction to the Modeling Workflow Engine (MWE)

The nice thing about MWE is that it just instantiates java classes and the configuration is done through setter and adder methods.
Given the following Java class :

bc.. 
  package foo;
  class Person {
     private String name;
     private List<Person> children = new ArrayList<Person>();
     public void setName(String name) { 
       this.name = name;
     }
     public void addChild(Person child) {
       this.chidlren.add(child);
     }
  }
  
p. one can create a family tree using MWE like this:

bc.. 
  <x class="foo.Person">
    <name value="Grandpa"/>
    <child class="foo.Person" name="Papa">
      <child name="Son"/>
    </child>
  </x>

p. In this simple example

This means that whenever you see a *.mwe file and wonder what how the different components can be configured, all you have to do in order to find out is open Java class and look for setter and adder methods.
In the following we see a typical Xtetx generator configuration written in MWE configuration code:  

bc.. 
<workflow>
	<property file="org/xtext/example/GenerateMyDsl.properties"/>
	
	<property name="runtimeProject" value="../${projectName}"/>
	
	<bean class="org.eclipse.emf.mwe.utils.StandaloneSetup" platformUri="${runtimeProject}/.."/>
	
	<component class="org.eclipse.emf.mwe.utils.DirectoryCleaner" directory="${runtimeProject}/src-gen"/>
	<component class="org.eclipse.emf.mwe.utils.DirectoryCleaner" directory="${runtimeProject}.ui/src-gen"/>
	
	<component class="org.eclipse.xtext.generator.Generator">
		<pathRtProject value="${runtimeProject}"/>
		<pathUiProject value="${runtimeProject}.ui"/>
		<projectNameRt value="${projectName}"/>
		<projectNameUi value="${projectName}.ui"/>
		
		<language uri="${grammarURI}" fileExtensions="${file.extensions}">
			
			<!-- Java API to access grammar elements (required by several other fragments) -->
			<fragment class="org.eclipse.xtext.generator.grammarAccess.GrammarAccessFragment"/>
			
			<!-- generates Java API for the generated EPackages -->
			<fragment class="org.eclipse.xtext.generator.ecore.EcoreGeneratorFragment"/>
			
			<!-- the serialization component -->
			<fragment class="org.eclipse.xtext.generator.parseTreeConstructor.ParseTreeConstructorFragment"/>
			
			<!-- a custom ResourceFactory for use with EMF -->
			<fragment class="org.eclipse.xtext.generator.resourceFactory.ResourceFactoryFragment" 
				fileExtensions="${file.extensions}"/>
				
			<!-- the following fragment tries to use the Antlr Generator fragment which can be downloaded from http://www.itemis.com 
			     and falls back to the packrat parser if it's not available. -->
			<fragment class="org.eclipse.xtext.generator.DelegatingGeneratorFragment" 
				delegate="de.itemis.xtext.antlr.XtextAntlrGeneratorFragment"
				message="You are generating without ANTLR. It is highly recommended to download and use the plugin 'de.itemis.xtext.antlr' \n\t using the update site http://xtext.itemis.com/updates/milestones.">
				<fallback class="org.eclipse.xtext.generator.parser.PackratParserFragment"/>
			</fragment>
	
			
			<!-- java-based API for validation -->
			<fragment class="org.eclipse.xtext.generator.validation.JavaValidatorFragment">
                <composedCheck value="org.eclipse.xtext.validation.ImportUriValidator"/>
            </fragment>
			
            
			<!-- scoping API -->
			<fragment class="org.eclipse.xtext.generator.scoping.JavaScopingFragment"/>
			
			<!-- formatter API -->
			<fragment class="org.eclipse.xtext.generator.formatting.FormatterFragment"/>

			<!-- labeling API -->
			<fragment class="org.eclipse.xtext.ui.generator.labeling.LabelProviderFragment"/>

			<!-- outline API -->
			<fragment class="org.eclipse.xtext.ui.generator.outline.TransformerFragment"/>

			
			<!-- java-based API for content assistance -->
			<fragment class="org.eclipse.xtext.ui.generator.contentAssist.JavaBasedContentAssistFragment"/>
			
		</language>
	</component>
</workflow>