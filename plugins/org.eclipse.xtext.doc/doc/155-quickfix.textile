
h2(#quickfixes). Quickfixes

For validations written using the ${org.eclipse.xtext/src/org/eclipse/xtext/validation/AbstractDeclarativeValidator}:#custom_validation it is possible to provide corresponding quickfixes in the editor. To be able to implement a quickfix for a given diagnostic (a warning or error) the underlying _cause_ of the diagnostic must be known (i.e. what actual problem does the diagnostic represent?), otherwise the fix doesn't know what needs to be done. As we don't want to deduce this from the diagnostic's error message we associate a problem specific _code_ with the diagnostic.

In the following example (from ${org.eclipse.xtext.example.domainmodel/src/org.eclipse.xtext.example.validation.DomainmodelJavaValidator}) the diagnostic's _code_ is given by the last argument to the _warning()_ method and it is a reference to the static _String_ field _INVALID_TYPE_NAME_ in the validator class.

bc.. 
      warning("Name should start with a capital", 
        DomainmodelPackage.TYPE__NAME, INVALID_TYPE_NAME, type.getName());

p. Now that the validation has a unique code identifying the problem we can register quickfixes for it. We start by adding the ${org.eclipse.xtext.generator/src/org/eclipse/xtext/ui/generator/quickfix/QuickfixProviderFragment} to our workflow and after regenerating the code we should find an empty class _MyDslQuickfixProvider_ in our DSL's UI project.

Continuing with the _INVALID_TYPE_NAME_ problem from the Domainmodel example we add a method with which the problem can be fixed (see also ${org.eclipse.xtext.example.domainmodel.ui/src/org.eclipse.xtext.example.quickfix.DomainmodelQuickfixProvider}):

bc.. 
@Fix(DomainmodelJavaValidator.INVALID_TYPE_NAME)
public void fixName(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Capitalize name", "Capitalize name  of '" + issue.getData()[0] + "'", "upcase.png", new IModification() {
		public void apply(IModificationContext context) throws BadLocationException {
			IXtextDocument xtextDocument = context.getXtextDocument();
			String firstLetter = xtextDocument.get(issue.getOffset(), 1);
			xtextDocument.replace(issue.getOffset(), 1, Strings.toFirstUpper(firstLetter));
	}
	});
}

p. By using the correct signature (see below) and annotating the method with the _@Fix_ annotation referencing the code we specified in the validator, Xtext knows that this method implements a fix for the problem. This also allows us to annotate multiple methods as fixes for the same problem.

The first three parameters given to the ${org.eclipse.xtext.ui/src/org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor} define the UI representation of the quickfix. As the document is not necessarily loaded when the quickfix is offered, we need to provide any additional data from the model that we want to refer to in the UI when creating the issue in the validator above. In this case, we provided the existing type name.

The actual model modification is implemented in the ${org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/model/edit/IModification}. The ${org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/model/edit/IModificationContext} provides access to the erroneous document.  

If you prefer to implement the quickfix in terms of the semantic model use a ${org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/model/edit/ISemanticModification.java} instead. Its _apply(EObject, IModificationContext)_ method will be invoked inside a modification transaction and the first argument will be the erroneous semantic element. This makes it very easy for the fix method to modify the model as necessary. After the method returns the model as well as the Xtext editor's content will be updated accordingly. If the method fails (throws an exception) the change will not be committed. The following snippet shows a semantic quickfix for a similar problem.

bc.. @Fix(DomainmodelJavaValidator.INVALID_FEATURE_NAME)
public void fixFeatureName(final Issue issue, IssueResolutionAcceptor acceptor) {
	acceptor.accept(issue, "Uncapitalize name", "Uncapitalize name of '" + issue.getData()[0] + "'", "upcase.png",
			new ISemanticModification() {
				public void apply(EObject element, IModificationContext context) {
					((Feature) element).setName(Strings.toFirstLower(issue.getData()[0]));
				}
			});
}

