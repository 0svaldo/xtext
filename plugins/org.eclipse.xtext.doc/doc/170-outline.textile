
h2(#outline). Outline View

Xtext provides an outline view to help you navigate your models. By default, it provides a hierarchical 
view on your model and allows you to sort tree elements alphabetically. Selecting an element in the 
outline will highlight the corresponding element in the text editor. Users can choose to synchronize 
the outline with the editor selection by clicking the _Link with Editor_ button.

!images/sample_outline.png!

You can customize various aspects of the outline by providing implementation for its various interfaces. 
The following sections show how to do this.

h3. Influencing the Outline Structure

In its default implementation, the outline view shows the containment hierarchy of your model. 
This should be sufficient in most cases. If you want to adjust the structure of the outline, i.e., 
by omitting a certain kind of node or by introducing additional even virtual nodes, you customize 
the outline by implementing 
${org.eclipse.xtext.ui/src/org.eclipse.xtext.ui.editor.outline.transformer.ISemanticModelTransformer}.

The Xtext wizard creates an empty transformer class (_MyDslTransformer_) for your convenience. To 
transform the semantic model delivered by the Xtext parser, you need to provide transformation methods 
for each of the EClasses that are of interest:

bc.. public class MyDslTransformer extends 
    AbstractDeclarativeSemanticModelTransformer { 
  /**
   * This method will be called by naming convention:
   * - method name must be createNode
   * - first param: subclass of EObject
   * - second param: ContentOutlineNode 
   */
  public ContentOutlineNode createNode(
      Attribute semanticNode, ContentOutlineNode parentNode) {
    ContentOutlineNode node = super.newOutlineNode(semanticNode, parentNode);
    node.setLabel("special " + node.getLabel());
    return node;
  }
  
  public ContentOutlineNode createNode(
      Property semanticNode, ContentOutlineNode parentNode) {
    ContentOutlineNode node = super.newOutlineNode(semanticNode, parentNode);
    node.setLabel("pimped " + node.getLabel());
    return node;
  }

  /**
   * This method will be called by naming convention:
   * - method name must be getChildren
   * - first param: subclass of EObject
   */
  public List<EObject> getChildren(Attribute attribute) {
    return attribute.eContents();
  }

  public List<EObject> getChildren(Property property) {
    return NO_CHILDREN;
  }
}

p. To make sure Xtext picks up your new outline transformer, you have to register your implementation 
with your UI module. This binding is usually added by the respective generator fragment.

bc.. public class MyDslUiModule extends AbstractMyDslUiModule {

  @Override
  public Class<? extends ISemanticModelTransformer> 
  		bindISemanticModelTransformer() {
    return MyDslTransformer.class;
  }
  ...
}

h3. Filtering

Often, you want to allow users to filter the contents of the outline to make it easier to concentrate 
on the relevant aspects of the model. To add filtering capabilities to your outline, you need to add 
${org.eclipse.xtext.ui/src/org.eclipse.xtext.ui.editor.outline.actions.AbstractFilterAction}s to the 
outline. Actions can be contributed by implementing and registering a 
${org.eclipse.xtext.ui/src/org.eclipse.xtext.ui.editor.outline.actions.DeclarativeActionBarContributor}.

To register a _DeclarativeActionBarContributor_, add the following lines to your _MyDslUiModule_ class:

bc.. public class MyDslUiModule extends AbstractMyDslUiModule {

  @Override
  public Class<? extends IActionBarContributor> bindIActionBarContributor() {
    return MyDslActionBarContributor.class;
  }
  ...
}

p. The action bar contributor will look like this:

bc.. public class MyDslActionBarContributor extends
    DeclarativeActionBarContributor {
  public Action addFilterParserRulesToolbarAction(
      XtextContentOutlinePage page) {
    return new FilterFooAction(page);
  }
}

p. Filter actions must extend _AbstractFilterAction_ (this ensures that the action toggle state is 
handled correctly):

bc.. public class FilterFooAction extends AbstractFilterAction {

  public FilterFooAction(XtextContentOutlinePage outlinePage) {
    super("Filter Foo", outlinePage);
    setToolTipText("Show / hide foo");
    setDescription("Show / hide foo");
    setImageDescriptor(Activator.getImageDescriptor("icons/foo.gif"));
    setDisabledImageDescriptor(
    	Activator.getImageDescriptor("icons/foo.gif"));
  }

  @Override
  protected String getToggleId() {
    return "FilterFooAction.isChecked";
  }
	
  @Override
  protected ViewerFilter createFilter() {
    return new FooOutlineFilter();
  }

}

p. The filtering itself will be performed by _FooOutlineFilter_:

bc.. public class FooOutlineFilter extends ViewerFilter {

  @Override
  public boolean select(
      Viewer viewer, Object parentElement, Object element) {
    if ((parentElement != null) 
        && (parentElement instanceof ContentOutlineNode)) {
      ContentOutlineNode parentNode = (ContentOutlineNode) parentElement;
      EClass clazz = parentNode.getClazz();
      if (clazz.equals(MyDslPackage.Literals.ATTRIBUTE)) {
        return false;
      }
    }
    return true;
  }

}

h3. Context menus

You might want to register context menu actions for specific elements in the outline, e.g. to allow 
users of your DSL to invoke a generator or to validate the selected element. As all elements in the 
outline are ${org.eclipse.xtext.ui/src/org.eclipse.xtext.ui.editor.outline.ContentOutlineNode}s, you 
cannot easily register an "Object contribution":http://help.eclipse.org/stable/index.jsp?topic=/org.eclipse.platform.doc.isv/guide/workbench_basicext_popupMenus.htm. 
(Besides, using the extension point _org.eclipse.ui.popupMenus_ is regarded somewhat old school - 
you should rather use the new command and expression framework, as depicted below).

To register context menus for specific node types of your Ecore model, we need to:

* implement ${org.eclipse.xtext.ui/src/org.eclipse.xtext.ui.editor.outline.actions.IContentOutlineNodeAdapterFactory} which will translate ${org.eclipse.xtext.ui/src/org.eclipse.xtext.ui.editor.outline.ContentOutlineNode}s to their underlying node type
* register a menu contribution to add a command / handler pair to the context menu for the specific node types you're interested in.

h4. Registering an _IContentOutlineNodeAdapterFactory_

The Xtext code generator creates a subclass of 
${org.eclipse.xtext.ui/src/org.eclipse.xtext.ui.editor.outline.actions.DefaultContentOutlineNodeAdapterFactory}. 
All we need to do is specify a list of types that we later want to bind context menu contributions to. 

bc.. public class MyDslContentOutlineNodeAdapterFactory extends 
    DefaultContentOutlineNodeAdapterFactory {
  private static final Class<?>[] types = { Attribute.class };

  public Class<?>[] getAdapterList() {
    return types;
  }
}

p. If you want to bind context menu actions to nodes representing _Attribute_ and _Entity_, you need to 
change the declaration of _types as follows:

bc. private static final Class<?>[] types = { Attribute.class, Entity.class };

h4. Registering a Menu Contribution

You can now add command / handler pairs to the context menu.

First, you need to define a command - it will serve as a handle to glue together the handler 
and the menu contribution:

bc.. 
<extension
  point="org.eclipse.ui.commands">
  <command
    id="org.example.mydsl.ui.editor.outline.SampleOutlineCommand"
    name="Sample Command"
    description="Just a sample command">
  </command>
</extension>

p. Next, you need to define a handler which will eventually execute the code to operate on the 
selected node. Please pay special attention to the attribute _commandId_ - it must match the _id_ 
attribute of your command. 

bc.. 
<extension
  point="org.eclipse.ui.handlers">
  <handler
    class="org.example.mydsl.ui.editor.outline.SampleOutlineNodeHandler"
    commandId="org.example.mydsl.ui.editor.outline.SampleOutlineCommand">
  </handler>
</extension>

p. Finally, define a _menuContribution_ to add the command to the context menu:

bc.. 
<extension
  point="org.eclipse.ui.menus">
  <menuContribution
    locationURI="popup:org.eclipse.xtext.ui.outline?after=additions">
    <command
      commandId="org.example.mydsl.ui.editor.outline.SampleOutlineCommand"
      label="Sample action registered for Attributes">
      <visibleWhen checkEnabled="false">
        <iterate>
          <adapt type="org.example.mydsl.Attribute" />
        </iterate>
      </visibleWhen>
    </command>
  </menuContribution>
</extension>

p. Again, pay attention to the _commandId_ attribute. The connection between your node type(s) and 
the menu contribution is made by the part _<adapt type="org.example.mydsl.Attribute" />_. 

h3(#quick_outline). Quick Outline

Xtext also provides a quick outline: If you press CTRL-O in an Xtext editor, the outline of the model is shown 
in a popup window. The quick outline also supports drill-down search with wildcards. To enable the quick outline,
you have to put the ${org.eclipse.xtext.generator/src/org.eclipse.xtext.ui.generator.outline.QuickOutlineFragment} 
into your workflow.


