
h2(#emf_integration). Integration with other EMF editors

Xtext relies heavily on EMF internally, but it can also be used as the serialization back-end of other EMF-based tools.

h3. XtextResource Implementation

Xtext provides an implementation of EMF's resource, the ${org.eclipse.xtext/src/org.eclipse.xtext.resource.XtextResource}. This does not only encapsulate the parser that converts text to an EMF model but also the serializer working the opposite direction. That way, an Xtext model just looks like any other Ecore-based model from the outside, making it amenable for the use by other EMF based tools. In fact, the Xpand templates in the generator plug-in created by the Xtext wizard do not make any assumption on the fact that the model is described in Xtext, and they would work fine with any model based on the same Ecore model of the language. So in the ideal case, you can switch the serialization format of your models to your self-defined DSL by just replacing the resource implementation used by your other modeling tools. 

!images/emf-integration.png!

The generator fragment ${org.eclipse.xtext.generator/src/org.eclipse.xtext.generator.resourceFactory.ResourceFactoryFragment} registers a factory for the ${org.eclipse.xtext/src/org.eclipse.xtext.resource.XtextResource} to EMF's resource factory registry, such that all tools using the default mechanism to resolve a resource implementation will automatically get that resource implementation.   

Using a self-defined textual syntax as the primary storage format has a number of advantages over the default XMI serialization, e.g.
* You can use well-known and easy-to-use tools and techniques for manipulation, such as text editors, regular expressions, or stream editors.
* You can use the same tools for version control as you use for source code. Merging and diffing is performed in a syntax the developer is familiar with. 
* It is impossible to break the model such that it cannot be reopened in the editor again. 
* Models can be fixed using the same tools, even if they have become incompatible with a new version of the Ecore model.

Xtext targets easy to use and naturally feeling languages. It focuses on the lexical aspects of a language a bit more than on the semantic ones. As a consequence, a referenced Ecore model can contain more concepts than are actually covered by the Xtext grammar. As a result, not everything that is possibly expressed in the EMF model can be serialized back into a textual representation with regards to the grammar. So if you want to use Xtext to serialize your models as described above, it is good to have a couple of things in mind:

* Prefer optional rule calls (cardinality @?@ or @*@) to mandatory ones (cardinality @+@ or default), such that missing references will not obstruct serialization. 
* You should not use an Xtext-Editor on the same model instance as a self-synchronizing other editor, e.g. a canonical GMF editor (see :#gmf_integration_stage_1 for details). The Xtext parser replaces re-parsed subtrees of the AST rather than modifying it, so elements will become stale. As the Xtext editor continuously re-parses the model on changes, this will happen rather often. It is safer to synchronize editors more loosely, e.g. on file changes. 
* Implement an @IFragmentProvider@:#fragmentProvider to make the XtextResource return stable fragments for its contained elements, e.g. based on composite names rather than order of appearance.
* Implement an @IQualifiedNameProvider@ and an @IScopeProvider@:#scoping to make the names of all linkable elements in cross-references unique. 
* Provide an @IFormatter@:#formatting to improve the readability of the generated textual models.  
* Register an @IReferableElementsUnloader@ to turn deleted/replaced model elements into EMF proxies. Design the rest of your application such that it does never keep references to  @EObjects@ or to cope with proxies. That will improve the stability of your application drastically.
* Xtext will register an EMF @ResourceFactory@, so resources with the file extension you entered when generating the Xtext plug-ins will be automatically loaded in an @XtextResource@ when you use EMF's @ResourceSet@ API to load it.

h3(#gmf_integration). Integration with GMF

To illustrate how to build a graphical editor on top of an @XtextResource@ we have provided an example. It consists of a number of plug-ins

|Plug-in|Framework|Purpose|Contents|
|org.eclipse.xtext.example.gmf|Xtext|Xtext runtime plug-in|Grammar, derived metamodel and language infrastructure| 
|org.eclipse.xtext.example.gmf.ui|Xtext|Xtext UI plug-in|Xtext editor and services|
|org.eclipse.xtext.example.gmf.edit|EMF|EMF.edit plug-in|UI services generated from the metamodel|
|org.eclipse.xtext.example.gmf.models|GMF|GMF design models|Input for the GMF code generator|
|org.eclipse.xtext.example.gmf.diagram|GMF|GMF diagram editor|Purely generated from the GMF design models|
|org.eclipse.xtext.example.gmf.diagram.extensions|GMF / Xtext|Manual extensions to the generated GMF editor for integration with Xtext|
|org.eclipse.xtext.gmf.glue|Xtext/GMF|Glue code|Generic code to integrate Xtext and GMF|

h4(#gmf_integration_stage_1). Stage 1: Make GMF read and write the semantic model as text
 
A diagram editor in GMF by default manages two resources: One for the semantic model, that is the model we're actually interested in for further processing. In our example it is a model representing entities and datatypes. The second resource holds the notation model. It represents the shapes you see in the diagram and their graphical properties. Notation elements reference their semantic counterparts. An entity's name would be in the semantic model, while the font to draw it in the diagram would be stored the notation model. Note that in the integration example we're only trying to represent the semantic resource as text.

To keep the semantic model and the diagram model in sync, GMF uses a so called @CanonicalEditPolicy@. This component registers as a listener to the semantic model and automatically updates diagram elements when their semantic counterparts change, are added or are removed. Some notational information can be derived from the semantic model by some default mapping, but usually there is a lot of graphical stuff that the user wants to change to make the diagram look better.   

In an Xtext editor, changes in the text are transfered to the underlying @XtextResource@ by a call to the method @org.eclipse.xtext.resource.XtextResource.update(int, int, String)@, which will trigger a partial parsing of the dirty text region and a replacement of the corresponding subtree in the AST model (semantic model). 

Having an Xtext editor and a canonical GMF editor on the same resource can therefore lead to loss of notational information, as a change in the Xtext editor will remove a subtree in the AST, causing the  @CanonicalEditPolicy@ to remove all notational elements, even though it was customized by the user. The Xtext rebuilds the AST and the notation model is restored using the default mapping. It is therefore not recommended to let an Xtext editor and a canonical GMF editor work on the same resource.    
 
In this example, we let each editor use its own memory instance of the model and synchronize on file changes only. Both frameworks already synchronize with external changes to the edited files out-of-the-box. In the glue code, a @org.eclipse.xtext.gmf.glue.concurrency.ConcurrentModificationObserver@ warns the user if she tries to edit the same file with two different model editors concurrently.

In the example, we started with writing an Xtext grammar for an entity language. As explained above, we preferred optional assignments and rather covered mandatory attributes in a validator. Into the bargain, we added some services to improve the EMF integration, namely a formatter, a fragment provider and an unloader. Then we let Xtext generate the language infrastructure. From the derived Ecore model and its generator model, we generated the edit plug-in (needed by GMF) and added some fancier icons. 

From the GMF side, we followed the default procedure and created a gmfgraph model, a gmftool model and a gmfmap model referring to the Ecore model derived form the Xtext grammar. We changed some settings in the gmfgen model derived by GMF from the gmfmap model, namely to enable printing and to enable validation and validation decorators. Then we generated the diagram editor.     

Voilà, we now have a diagram editor that reads/writes its semantic model as text. Also note that the validator from Xtext is already integrated in the diagram editor via the menu bar. 

h4. Stage 2: Calling the Xtext parser to parse GMF labels

GMF's generated parser for the labels is a bit poor: It will work on attributes only, and will fail for cross-references, e.g. an attibute's type. So why not use the Xtext parser to process the user's input? 

An @XtextResource@ keeps track of it's concrete syntax representation by means of a so called node model (see :#parser_rules for a more detailed description). The node model represents the parse tree and provides information on the offset, length and text that has been parsed to create a semantic model element. The nodes are attached to their semantic elements by means of a node adapter.    

We can use the node adapter to access the text block that represents an attribute, and call the Xtext parser to parse the user input. The example code is contained in  @org.eclipse.xtext.gmf.glue.edit.part.AntlrParserWrapper@. @org.eclipse.xtext.example.gmf.diagram.edit.part.SimplePropertyWrapperEditPartOverride@ shows how this is integrated into the generated GMF editor. Use the @EntitiesEditPartFactoryOverride@ to instantiate it and the @EntitiesEditPartProviderOverride@ to create the overridden factory, and register the latter to the extension point. Note that this is a non-invasive way to extend generated GMF editors.

When you test the editor, you will note that the node model will be corrupt after editing a few labels. This is because the node model is only updated by the Xtext parser and not by the serializer. So we need a way to automatically call the (partial) parser every time the semantic model is changed. You will find the required classes in the package ${org.eclipse.xtext.gmf.glue/src/org.eclipse.xtext.gmf.glue.editingdomain}. To activate node model reconciling, you have to add a line 

bc.. org.eclipse.xtext.gmf.glue.editingdomain.XtextNodeModelReconciler.adapt(editingDomain);

p. in the method @createEditingDomain()@ of the generated @EntitiesDocumentProvider@. To avoid changing the generated code, you can modify the code generation template for that class by setting

bc.. Dynamic Templates -> true
	   Template Directory -> "org.eclipse.xtext.example.gmf.models/templates"
	   
p. in the @GenEditorGenerator@ and 

bc.. Required Plugins -> "org.eclipse.xtext.gmf.glue" 

p. in the @GenPlugin@ element of the gmfgen before generating the diagram editor anew.

h4. Stage 3: A Popup Xtext Editor (experimental)

@SimplePropertyPopupXtextEditorEditPartOverride@ demonstrates how to spawn an Xtext editor to edit a model element. The editor pops up in its control and shows only the section of the selected element. It is a fully fledged Xtext editor, with support of validation, code assist and syntax highlighting. The edited text is only transfered back to the model if it does not have any errors.   

Note that there still are synchronization issues, that's why we keep this one marked as experimental.

 
 
 