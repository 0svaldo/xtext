
h2(#serialization). Serialization

p. Serialization is the process of transforming an EMF model into its textual representation. Thereby, serialization complements parsing and lexing.

In Xtext, the process of serialization is split into three steps:

# Matching the model elements with the grammar rules and creating a stream of tokens. This is done by the "parse tree constructor":#parsetreeconstructor.
# Mixing existing hidden tokens (whitespace, comments, etc.) into the token stream. This is done by the "hidden token merger":#hiddentokenmerger.
# Adding needed whitespace or replacing all whitespace using a "formatter":#formatting.  

p. Serialization is invoked when calling ${org.eclipse.xtext/src/org.eclipse.xtext.resource.XtextResource}@.save(...)@. Furthermore, ${org.eclipse.xtext/src/org.eclipse.xtext.parsetree.reconstr.SerializerUtil} provides resource-independent support for serialization.

h3(#serializationcontract). The Contract

p. The contract of serialization says that a model that is serialized to its textual representation and then loaded (parsed) again should yield a loaded model that equals the original model. Please be aware that this does _not_ imply, that loading a textual representation and serializing it back produces identical textual representations. For example, this is the case when a default value is used in a textual representation and the assignment is optional. Another example is:

bc.. MyRule:
  (xval+=ID | yval+=INT)*;
  
p.  @MyRule@ in this example reads @ID@- and @INT@-elements which may occur in an arbitrary order in the textual representation. However, when serializing the model all @ID@-elements will be written first and then all @INT@-elements. If the order is important it can be preserved by storing all elements in the same list - which may require wrapping the @ID@- and @INT@-elements into objects.   

h3(#parsetreeconstructor). Parse Tree Constructor

p. The parse tree constructor usually does not need to be customized since it is automatically derived from the "Xtext Grammar":#grammarLanguage. However, it can be a good idea to look into it to understand its error messages and its runtime performance.

For serialization to succeed, the parse tree constructor must be able to _consume_ every element of the to-be-serialized EMF model. To _consume_ means, in this context, to write the element to the textual representation of the model. This can turn out to be a not-so-easy to fulfill requirement, since a grammar usually introduces implicit constraints to the EMF model. Example:

bc.. MyRule:
  (sval+=ID ival+=INT)*;
	
p. This example introduces the constraint  @sval.size() == ival.size()@. Models which violate this constraint are sort of valid EMF models, but they can not be serialized. To check whether a model complies with all constraints introduced by the grammar, the only way is currently to invoke the parse tree constructor. If this changes at some day, there will be news in "bugzilla 239565":https://bugs.eclipse.org/bugs/show_bug.cgi?id=239565.

For the parse tree constructor, this can lead to the scenarios, where

* a model element can not be consumed. This can have the following reasons/solutions:
** The model element should not be stored in the model.
** The grammar needs an assignment which would consume the model element.
** The "transient value service":#transientvalues could be used to indicate that this model element should not be consumed. 
* an assignment in the grammar has no corresponding model element. The parse tree constructor considers a model element not to be present if it is _unset_ or equals its default value. However, the parse tree constructor may serialize default values if this is required by a grammar constraint to be able to serialize another model element. The following solution may help to solve such a scenario:
** A model element should be added to the model.
** The assignment in the grammar should be made optional.

To understand error messages and performance issues of the parse tree constructor it is important to know that it implements a backtracking algorithm. This basically means that the grammar is used to specify the structure of a tree in which one path (from the root node to a leaf node) is a valid serialization of a specific model. The parse tree constructor's task is to find this path - with the condition, that all model elements are consumed while walking this path. The parse tree constructor's strategy is to take the most promising branch first (the one that would consume the most model elements). If the branch leads to a dead end (for example, if a model element needs to be consumed that is not present in the model), the parse tree constructor goes back the path until a different branch can be taken. This behavior has two consequences:
* In case of an error, the parse tree constructor has found only dead ends but no leaf. It cannot tell which dead end is actually erroneous. Therefore, the error message lists dead ends of the longest paths, a fragment of their serialization and the reason why the path could not be continued at this point. The developer has to judge on his own which reason is the actual error.
*  For reasons of performance, it is critical that the parse tree constructor takes the most promising branch first and detects wrong branches early. One way to achieve this is to avoid having many rules which return the same type and which are called from within the same alternative in the grammar.   


h3(#transientvalues). Transient Values

p. Transient values are values or model elements which are not persisted (written to the textual representation in the serialization phase). If a model contains model elements which can not be serialized with the current grammar, it is critical to mark them transient using the ${org.eclipse.xtext/src/org.eclipse.xtext.parsetree.reconstr.ITransientValueService}, or serialization will fail. The default implementation marks all model elements transient, that are _unset_ or equal to their default value.  

h3(#unassignedtext). Unassigned Text

p. Unassigned text can be necessary due to data type rule calls or terminal rule calls which do not reside within an assignment. Example:

bc.. PluralRule:
  'contents:' count=INT Plural;
  
terminal Plural: 
  'item' | 'items';
  
p. Valid models for this example are @contents 1 item@ or @contents 5 items@. However, it is not stored in the semantic model whether the keyword @item@ or @items@ has been parsed. This is due to the fact that the rule call @Plural@ is unassigned. However, the "parse tree constructor":#parsetreeconstructor needs to decide which value to write during serialization. This decision can be be made by implementing the ${org.eclipse.xtext/src/org.eclipse.xtext.parsetree.reconstr.IUnassignedTextSerializer}.  

h3(#crossreferenceserializer). Cross Reference Serializer

p. The cross reference serializer specifies which values are to be written to the textual representation for cross references. This behavior can be customized by implementing ${org.eclipse.xtext/src/org.eclipse.xtext.parsetree.reconstr.ICrossReferenceSerializer}. The default implementation delegates to ${org.eclipse.xtext/src/org.eclipse.xtext.linking.ILinkingService}, which may be the better place for customization.

h3(#hiddentokenmerger). Hidden Token Merger

p. After the "parse tree constructor":#parsetreeconstructor has done its job to create a stream of tokens which are to be written to the textual representation, the hidden token merger (${org.eclipse.xtext/src/org.eclipse.xtext.parsetree.reconstr.IHiddenTokenMerger}) mixes existing hidden tokens into this token stream. The default implementation uses the hidden tokens (whitespace, line-breaks, comments) from the node model. The ${org.eclipse.xtext/src/org.eclipse.xtext.parsetree.reconstr.IHiddenTokenMerger} is the factory for a "token stream":#tokenstream which is fed by the "parse tree constructor":#parsetreeconstructor and which writes to another token stream.  

h3(#tokenstream). Token Stream

p. The "parse tree constructor":#parsetreeconstructor, the "hidden token merger":#hiddentokenmerger and the "formatter":#formatting use an ${org.eclipse.xtext/src/org.eclipse.xtext.parsetree.reconstr.ITokenStream} for their output, and the latter two for their input as well. This makes them chainable. Token streams can be converted to a @String@ using the ${org.eclipse.xtext/src/org.eclipse.xtext.parsetree.reconstr.impl.TokenStringBuffer} and to an @OutputStream@ using the ${org.eclipse.xtext/src/org.eclipse.xtext.parsetree.reconstr.impl.TokenOutputStream}. Maybe there will be an implementation to reconstruct a node model as well at some point in the future. While providing fast output due to the stream pattern, token streams allow easy manipulation of the stream, such as mixing in whitespace or manipulating them.    

bc.. public interface ITokenStream {
  public void close() throws IOException;
  public void writeHidden(
    EObject grammarElement, String value) throws IOException;
  public void writeSemantic(
    EObject grammarElement, String value) throws IOException;
}

 