h2(grammarLanguage). The Grammar Language
The "grammar language":http://dev.eclipse.org/viewcvs/index.cgi/org.eclipse.tmf/org.eclipse.xtext/plugins/org.eclipse.xtext/src/org/eclipse/xtext/Xtext.xtext?root=Modeling_Project&view=markup 
is the corner stone of Xtext and is defined in itself - of course.

It is a DSL carefully designed for description of textual languages, based on 
"LL(*)-Parsing":http://en.wikipedia.org/wiki/LL_parser that is like "Antlr3's parsing strategy":http://www.artima.com/lejava/articles/antlr_3.html 
and supported by "packrat parsers":http://pdos.csail.mit.edu/~baford/packrat/.
The main idea is to describe the concrete syntax and how an EMF-based in-memory model is created during parsing. 

h3. First an example
To get an idea of how it works we'll start by implementing a "simple example":http://martinfowler.com/dslwip/Intro.html introduced by Martin Fowler.
It's mainly about describing state machines used as the (un)lock mechanism of secret compartments. 
People who have secret compartments control their access in a very old-school way, e.g. by opening the door first and turning on the light afterwards. 
Then the secret compartment, for instance a panel, opens up.

One of those state machines could look like this:
<pre>
<code>
 events
  doorClosed  D1CL
  drawOpened  D2OP
  lightOn     L1ON
  doorOpened  D1OP
  panelClosed PNCL
 end
 
 resetEvents
  doorOpened
 end
 
 commands
  unlockPanel PNUL
  lockPanel   PNLK
  lockDoor    D1LK
  unlockDoor  D1UL
 end
 
 state idle
  actions {unlockDoor lockPanel}
  doorClosed => active
 end
 
 state active
  drawOpened => waitingForLight
  lightOn    => waitingForDraw
 end
 
 state waitingForLight
  lightOn => unlockedPanel
 end
 
 state waitingForDraw
  drawOpened => unlockedPanel
 end
 
 state unlockedPanel
  actions {unlockPanel lockDoor}
  panelClosed => idle
 end
</code>
</pre>

So, we have a bunch of declared events, commands and states. Within states there are references to declared actions, which should be executed when entering such a state.
Also there are transitions consisting of a reference to an event and a state. Please read [http://martinfowler.com/dslwip/Intro.html Martin's description] if it is not clear enough.

In order to get a complete IDE for this little language from Xtext, you need to write the following grammar:
<pre><code>
 grammar my.pack.SecretCompartments with org.eclipse.xtext.common.Terminals
 
 generate secretcompartment "http://www.eclipse.org/secretcompartment"
 
 Statemachine :
  'events'
     (events+=Event)+
  'end'
  ('resetEvents'
     (resetEvents+=[Event])+
  'end')?
  'commands'
     (commands+=Command)+
  'end'
  (states+=State)+;
 
 Event :
  name=ID code=ID;
 
 Command :
  name=ID code=ID;
 
 State :
  'state' name=ID
     ('actions' '{' (actions+=[Command])+ '}')?
     (transitions+=Transition)*
  'end';
 
 Transition :
  event=[Event] '=>' state=[State];
</code></pre>

In the following the different concepts of the grammar language are explained. We refer to this grammar when useful.

== Language Declaration ==
The first line
<code lang="text">
 grammar my.pack.SecretCompartments with org.eclipse.xtext.common.Terminals
</code>
declares the name of the grammar. 
Xtext leverages Java's classpath mechanism. This means that the name can be any valid Java qualifier. 
The file name needs to correspond and have the file extension ''xtext''.
This means that the name needs to be ''SecretCompartments.xtext'' and must be placed in package 'my.pack' somewhere on your project's class path.

The first line is also used to declare any used language (for mechanism details cf. [[#Grammar Mixins|Grammar Mixins]]).

== EPackage declarations ==
Xtext parsers instantiate Ecore models (aka meta model). An Ecore model basically consists of an EPackage containing EClasses, EDatatypes and EEnums.
Xtext can infer Ecore models from a grammar (cf. [[#Meta-Model_inference|Meta-Model Inference]]) but it is also possible to instantiate existing Ecore models. You can even mix this, use multiple existing ecore models and infer some others from one grammar. 

=== EPackage generation ===
The easiest way to get started is to let Xtext infer the meta model from your grammar. This is what is done in the secret compartment example.
To do so just state:
<code lang="text">
 generate secretcompartment "<nowiki>http://www.eclipse.org/secretcompartment</nowiki>"
</code>

Which says: generate an EPackage with name secretcompartment and nsURI "<nowiki>http://www.eclipse.org/secretcompartment</nowiki>" (these are the properties needed to create an EPackage). See [[#Meta-Model_Inference|Meta-Model Inference]] for details.

=== EPackage import ===
If you already have created such an EPackage somehow, you could import it using either the name space URI or a resource URI (URIs are an EMF concept):
<code lang="text">
 import "<nowiki>http://www.eclipse.org/secretcompartment</nowiki>"
</code>

Note that if you use, a namespace URI, the corresponding EPackage needs to be installed into the workbench, so that the editor can find it.
At runtime (i.e. when starting the generator) you need to make sure that the corresponding EPackage is registered in EPackage.Registry.INSTANCE.

Xtext provides a new resource URI scheme, which is backed by the Java classpath. If you want to refer to an ecore file MyEcore.ecore, laying in a a package foo.bar, you could write 

<code lang="text">
 import "classpath:/foo/bar/MyEcore.ecore"
</code>

Using the classpath scheme is considered the preferred way.

=== Using multiple packages / meta model aliases ===
If you want to use multiple EPackages you need to specify aliases like so:
<code lang="text">
 generate secretcompartment "<nowiki>http://www.eclipse.org/secretcompartment</nowiki>"
 import "<nowiki>http://www.eclipse.org/anotherPackage</nowiki>" as another
</code>

When referring to a type somewhere in the grammar you need to qualify them using that alias (example ''another::CoolType''). We'll see later where such type references occur.

It is also supported to put multiple EPackage imports into one alias. This is no problem as long as there are no two EClassifiers with the same name. In such cases none of them are referable. It is even possible to have multiple ''import''s and one ''generate'' declared for the same alias. If you do so, for a reference to an EClassifier first the imported EPackages are scanned before it is assumed that a type needs to by generated into the to-be-generated package.

Example:
<code lang="text">
 generate toBeGenerated "<nowiki>http://www.eclipse.org/toBeGenerated</nowiki>"
 import "<nowiki>http://www.eclipse.org/packContainingClassA</nowiki>"
 import "<nowiki>http://www.eclipse.org/packContainingClassB</nowiki>"
</code>

With the declaration from above 
# a reference to type ClassA would be linked to the EClass contained in "<nowiki>http://www.eclipse.org/packContainingClassA</nowiki>", 
# a reference to type ClassB would be linked to the EClass contained in "<nowiki>http://www.eclipse.org/packContainingClassB</nowiki>", 
# a reference to type NotYetDefined would be linked to a newly created EClass in "<nowiki>http://www.eclipse.org/toBeGenerated</nowiki>"

Note, that using this feature is not recommended, because it might cause problems, which are hard to tackle down.
For instance, a reference to ''classA'' would as well be linked to a newly created EClass, because the corresponding type in "<nowiki>http://www.eclipse.org/packContainingClassA</nowiki>" is spelled with a capital letter.

== Rules ==
The default parsing is based on a homegrown packrat parser. It can be substituted by an Anltr parser through the Xtext service mechanism. Antlr is a sophisticated parser generator framework based on [http://www.antlr.org/wiki/display/ANTLR3/3.+LL(*)+Parsing+(Excursion) an LL(*) parsing algorithm], that works quite well for Xtext. At the moment it is advised to download the plugin de.itemis.xtext.antlr (from update site [[http://www.itemis.com/xtext/updatesite/milestones]]) and use the Antlr Parser instead of the packrat parser (cf. [[Xtext_Workspace_Setup|Xtext Workspace Setup]]).

Basically parsing can be separated in the following phases. 
# lexing
# parsing
# linking
# validation

=== Terminal Rules ===
In the first phase, i.e. lexing, a sequence of characters (the text input) is transformed into a sequence of so called tokens. 
Each token consists of one or more characters and was matched by a particular terminal rule and represents an atomic symbol.
In the secret compartments example there are no explicitly defined terminal rules, since it only uses the ID rule which is inherited from the grammar org.eclipse.xtext.common.Terminals (cf. [[#Grammar Mixins | Grammar Mixins]]).
Terminal rules are also referred to as token rules or lexer rules. There is an informal naming convention that terminal-rule names are all uppercase.

Therein the ID rule is defined as follows:
<code lang="text">
 terminal ID : 
    ('^')?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*; 
</code>

It says that a Token ID starts with an optional '^' character, which is called caret, followed by a letter ('a'..'z'|'A'..'Z') or underscore ('_') followed by any number of letters, underscores and numbers ('0'..'9'). 

The caret is used to escape an identifier for cases where there are conflicts with keywords. It is removed by the ID rule's [[Xtext/Documentation/ValueConverter|ValueConverter]]. 

This is the formal definition of terminal rules:

<code lang="text">
 TerminalRule :
   'terminal' name=ID ('returns' type=TypeRef)? ':' 
      alternatives=TerminalAlternatives ';'
 ;
</code>

Note, that the order of terminal rules is crucial for your grammar, as they may hide each other. This is especially important for newly introduced rules in connection with mixed rules from used grammars. 

If you for instance want to add a rule to allow fully qualified names in addition to simple IDs, you should implement it as a [[#Datatype_rules| datatype rule]], instead of adding another terminal rule.

==== Return types ====
A terminal rule returns a value, which is a string (type ecore::EString) by default.
However, if you want to have a different type you can specify it. For instance, the rule 'INT' is defined as:

<code lang="text">
 terminal INT returns ecore::EInt : 
   ('0'..'9')+;
</code>

This means that the terminal rule INT returns instances of ecore::EInt. It is possible to define any kind of data type here, which just needs to be an instance of ecore::EDataType.
In order to tell the parser how to convert the parsed string to a value of the declared data type, you need to provide your own implementation of 'IValueConverterService' (cf. [[Xtext/Documentation/ValueConverter|value converters]]).

The implementation needs to be registered as a service (cf. [[#Service_Framework|Service Framework]]).
This is also the point where you can remove things like quotes form string literals or the caret ('^') from identifiers.

==== Extended Backus-Naur form expressions ====
Token rules are described using "Extended Backus-Naur Form"-like (EBNF) expressions. The different expressions are described in the following.
The one thing all of these expressions have in common is the quantifier operator.
There are four different quantities
# exactly one (the default no operator)
# one or none (operator "?")
# any (operator "*")
# one or more (operator "+")

==== Keywords / Characters ====
Keywords are a kind of token rule literals. 
The ID rule in org.eclipse.xtext.common.Terminals for instance starts with a keyword :
<code>
 terminal ID : '^'? .... ;
</code>
The question mark sets the cardinality to "none or one" (i.e. optional) like explained above.

Note that a keyword can have any length and contain arbitrary characters.

==== Character Ranges ====
A character range can be declared using the '..' operator.
Example:
<code>
 terminal INT returns ecore::EInt: ('0'..'9')+ ;
</code>

In this case an INT is comprised of one or more (note the '+' operator) characters between (and including) '0' and '9'.

==== Wildcard ====
If you want to allow any character you can simple write a dot:
Example:

<code>
 FOO : 'f' . 'o';
</code>

The rule above would allow expressions like 'foo', 'f0o' or even 'f\no'.

==== Until Token ====
With the until token it is possible to state that everything should be consumed until a certain token occurs.
The multi line comment is implemented using it:

<code>
  terminal ML_COMMENT	: '/*' -> '*/' ;
</code>

This is the rule for Java-style comments that begin with '/*' and end with '*/'.

==== Negated Token ====
All the tokens explained above can be inverted using a preceding explanation mark:

<code>
  terminal ML_COMMENT	: '/*' (!'*/')+ ;
</code>

==== Rule Calls ====
Rules can refer to other rules. This is done by writing the name of the rule to be called.
We refer to this as rule calls. Rule calls in terminal rules can only point to terminal rules.

Example:

<code>
 terminal QUALIFIED_NAME : ID ('.' ID)*;
</code>

==== Alternatives ====
Using alternatives one can state multiple different alternatives.
For instance, the whitespace rule uses alternatives like so:

<code>
 terminal WS : (' '|'\t'|'\r'|'\n')+ ;
</code>

That is a WS can be made of one or more whitespace characters (including ' ','\t','\r','\n')

==== Groups ====
Finally, if you put tokens one after another, the whole sequence is referred to as a group.
Example:
<code>
 terminal FOO : '0x' ('0'..'7') ('0'..'9'|'A'..'F') ;
</code>
That is the 4-digit hexadecimal code of ascii characters.

=== Parser Rules ===
The parser reads in a sequence of terminals and walks through the parser rules. That's why a parser rule - contrary to a terminal rule - does not produce a single terminal token but a tree of non-terminal and terminal tokens that lead to a so called parse tree (in Xtext it is a.k.a node model). Furthermore, parser rules are handled as kind of a building plan to create EObjects that form the semantic model (the linked! AST). The different constructs like actions and assignments are used to derive types and initialize the semantic objects accordingly. 
==== Extended Backus-Naur Form expressions ====
In parser rules (as well as in datatype rules) not all the expressions available for terminal rules can be used. Character ranges, wildcards, the until token and the negation are currently only available for terminal rules. 
Available in parser rules as well as in terminal rules are
# [[#Groups|groups]], 
# [[#Alternatives|alternatives]], 
# [[#Keywords|keywords]] and 
# [[#Rule Calls|rule calls]].

In addition to these elements, there are some expressions used to direct how the AST is constructed, which are listed and explained in the following.

==== Assignments ====
Assignments are used to assign parsed information to a feature of the current EClass. The current EClass is specified by the return type resp. if not explicitly stated it is implied that the type's name equals the rule's name.

Example:
<code>
 State :
  'state' name=ID
     ('actions' '{' (actions+=[Command])+ '}')?
     (transitions+=Transition)*
  'end';
</code> 

The syntactic declaration for states in the state machine example starts with a keyword 'state' followed by an assignment :
<code>
 name=ID
</code>
Where the left hand side refers to a feature of the current EClass (in this case EClass 'State'). 
The right hand side can be a rule call, a keyword, a cross reference (explained later) or even an alternative comprised by the former.
The type of the feature needs to be compatible to the type of the expression on the right. As ID returns an EString the feature name needs to be of type EString as well.

===== Assignment Operators =====
There are three different assignment operators, each with different semantics
# the simple equal sign "=" is the straight forward assignment, and used for features which take only one element
# the "+=" sign (the add operator) awaits a multiple feature and adds the value on the right hand to that feature, which is, of course, a list feature
# the "?=" sign (boolean add operator) awaits a feature if type EBoolean and sets it to true if the right hand side was consumed (no matter with what values)

==== Cross References ====
A unique feature of Xtext is the ability to declare cross links in the grammar. In traditional compiler construction the cross links are not established during parsing but in a later linking phase. This is the same in Xtext, but we allow to specify cross link information in the grammar, which is used during the linking phase.
The syntax for cross links is:
<code>
 CrossReference :
   '[' type=TypeRef ('|' ^terminal=CrossReferenceableTerminal )? ']'
 ;
</code>

For example, the transition is made up of two cross references, pointing to an event and a state:
<code>
 Transition :
  event=[Event] '=>' state=[State];
</code> 
It is important to understand that the text between the square brackets does not refer to another rule, but to the type!
This is sometimes confusing, because one usually uses the same name for the rules and the types.
That is if we had named the type for events differently like in the following the cross references needs to be adapted as well:
<code>
 Transition :
  event=[MyEvent] '=>' state=[State];
 
 Event returns MyEvent : ....;
</code> 

Looking at the syntax definition of cross references, there is an optional part starting with a vertical bar followed by 'CrossReferenceableTerminal'. This is the part describing the concrete text, from which the crosslink later should be established.
By default (that's why it's optional) it is "|ID".

You may even use alternatives as the referencable terminal. This way, either an ID or a STRING may be used as the referencable terminal, as it is possible in many SQL dialects.

<code>
 TableRef: table=[Table|(ID|STRING)];
</code>

Have a look at the [[#Linking| linking section]] in order to understand how linking is done.

==== Simple Actions ====
By default the object to be returned by parser rule is created lazily on the first assignment. Then the type of the EObject to be created is determined from the specified return type (or the rule name if not explicit return type is specified).
With Actions however, creation of EObject can be made explicit. Xtext supports two kinds of Actions:
# simple actions
# assigned actions.

If at some point you want to enforce creation of a specific type you can use alternatives or simple actions.
In the following example TypeB must be a subtype of TypeA. An expression "<code>A ident</code>" should create an instance of TypeA, whereas "<code>B ident</code>" should instantiate TypeB.

Example with alternatives:

<code>
 MyRule returns TypeA :
   "A" name=ID |
   MyOtherRule; 
 
 MyOtherRule returns TypeB :
   "B" name = ID;
</code>

Example with simple actions:  

<code>
 MyRule returns TypeA :
   "A" name=ID |
   "B" {TypeB} name=ID; 
</code>

Generally speaking, the instance is created as soon as the parser hits the first assignment. However, Actions allow to explicitly instantiate any EClass. The notation "<code>{TypeB}</code>" will create an instance of TypeB and assign it to the result of the parser rule. This allows parser rules without any assignment and object creation without the need to introduce stub-rules.

==== Unassigned rule calls ====
We previously explained, that the EObject to be returned is created lazily when the first assignment occurs or when a simple action is evaluated. There is another way one can set the EObject to be returned, which we call an "unassigned rule call".

Unassigned rule calls (the name suggests it) are rule calls to other parser rules, which are not used within an assignment. If there is no feature the returned value shall be assigned to, the value is assigned to the "to-be-returned" reference.

With unassigned rule calls one can, for instance, create rules which just dispatch between several other rules:

<code>
 AbstractToken :
    TokenA |
    TokenB |
    TokenC;
</code>

As AbstractToken could possibly return an instance of TokenA, TokenB or TokenC its type must by a super type to these types.
It is now for instance as well possible to further change the state of the AST element by assigning additional things.
Example:

<code>
 AbstractToken :
   (TokenA |
    TokenB |
    TokenC ) (cardinality=('?'|'+'|'*'))?;
</code>

Thus, to state the cardinality is optional (last question mark) and can be represented by a question mark, a plus, or an asterisk.

==== Tree Rewrite Actions ====
LL parsing has some significant advantages over LR algorithms. The most important ones for Xtext are, that the generated code is much simpler to understand and debug and that it is easier to recover from errors and especially Antlr has a very nice generic error recovery mechanism. This allows to have AST constructed even if there are syntactic errors in the text. You wouldn't get any of the nice IDE features as soon as there is one little error, if we hadn't error recovery.

However, LL also has some drawbacks. The most important is, that it does not allow left recursive grammars.
For instance, the following is not allowed in LL based grammars, because "Expression '+' Expression" is left recursive:

<code>
 Expression :
   Expression '+' Expression |
   '(' Expression ')'
   INT;
</code>

Instead one has to rewrite such things by "left-factoring" it:
<code>
  Expression :
    TerminalExpression ('+' TerminalExpression)?;
 
  TerminalExpression :
    '(' Expression ')' |
    INT 
</code>

In practice this is always the same pattern and therefore not that problematic. 
However, by simply applying Xtext's AST construction we know so far like so ...

<code>
  Expression :
    {Operation} left=TerminalExpression (op='+' right=TerminalExpression)?;
 
  TerminalExpression returns Expression:
    '(' Expression ')' |
    {IntLiteral} value=INT;
</code>

... one would get unwanted elements in the resulting AST.
For instance the expression " ( 42 ) " would result in a tree like this:

<code>
 Operation {
  left=Operation {
   left=IntLiteral {
    value=42
   }
  }
 }
</code>
Typically one would only want to have one instance of IntLiteral instead.

One can solve this problem using a combination of unassigned rule calls and actions:
<code>
  Expression :
    TerminalExpression ({Operation.left=current} op='+' right=TerminalExpression)?;
 
  TerminalExpression returns Expression:
    '(' Expression ')' |
    {IntLiteral} value=INT;
</code>

In the example above ''{Operation.left=current}'' is a so called tree rewrite action, which creates a new instance of the stated EClass (Operation in this case) and assigns the element currently to-be-returned (current variable) to a feature of the newly created Object (in this case 'left').
In Java the semantics could be expressed like so:
<code>
  Operation temp = new Operation();
  temp.setLeft(current);
  current = temp;
</code>

==== Hidden terminal symbols ====
Because parser rules describe not a single token, but a sequence of patterns in the input, it is necessary to define the interesting parts of the input. Xtext introduces the concept of hidden tokens to handle semantically unimportant things like whitespaces, comments etc. in the input sequence gracefully. It is possible to define a set of terminal symbols, that are hidden from the parser rules and automatically skipped when they are recognized. Nevertheless, they are transparently woven into the node model, but not relevant for the semantic model. 

Hidden terminals may (or may not) appear between any other terminals in any cardinality. They can be described per rule or for the whole grammar. When [[#Grammar_Mixins | reusing a single grammar]] its definition of hidden tokens is reused as well. The grammar org.eclipse.xtext.common.Terminals comes with a reasonable default and hides all comments and whitespace from the parser rules.

If a rule defines hidden symbols, you can think of a kind of scope that is automatically introduced. Any rule that is called from the declaring rule uses the same hidden terminals as the calling rule, unless it defines other hidden tokens itself.
  
<code lang="text">
 Person hidden(WS, ML_COMMENT, SL_COMMENT): 
   name=fullname age=INT ';';

 Fullname: 
   (firstname=ID)? lastname=ID;
</code>

The sample rule "Person" defines multiple-line comments (ML_COMMENT), single-line comments (SL_COMMENT), and whitespaces (WS) to be allowed between the 'Fullname' and the 'age'. Because 'Fullname' does not introduce another set of hidden terminals, it allows the same symbols to appear between 'firstname' and 'lastname' as the calling rule 'pPerson'. Thus, the following input is perfectly valid for the given grammar snippet:

<code lang="text">
 John /* comment */ Smith // line comment
   /* comment */
   42      ;
</code>

A list of all default terminals like WS can be found in section [[#Grammar_Mixins | Grammar Mixins]].

=== Datatype rules ===
Datatype rules are parsing-phase rules, which create instances of EDatatype as terminal rules do.
The nice thing about datatype rules is that they are actually parser rules and are therefore 
# context sensitive and 
# allow for use of hidden tokens

If you, for instance, want to define a rule to consume Java-like qualified names (e.g. "foo.bar.Baz")
you could write:

<code>
 QualifiedName :
   ID ('.' ID)*;
</code>

Which looks similar to the terminal rule we've defined above in order to explain rule calls.
However, the difference is that because it is a parser rule and therefore only valid in certain contexts, it won't conflict with the rule ID.
If you had defined it as a terminal rule, it would hide the ID rule.

In addition having this defined as a datatype rule, it is allowed to use hidden tokens (e.g. "/* comment */") between the IDs and dots (e.g. <code>"foo/* comment */. bar . Baz"</code>)

Return types can be specified like in terminal rules:
<code>
 QualifiedName returns ecore::EString : ID ('.' ID)*;
</code>

Note that if a rule does not call another parser rule and does not contain any actions nor assignments (see parser rules), it is considered a datatype rule and the datatype EString is implied if not explicitly declared differently.

For conversion again value converters are responsible (cf. [[Xtext/Documentation/ValueConverter|value converters]]).

=== Enum Rules ===
Enum rules return enumeration literals from strings. They can be seen as a shortcut for datatype rules with specific value converters.
The main advantage of enum rules is their simplicity, typesafety and therefore nice validation. Furthermore it is possible to infere enums and their respective literals during the metamodel transformation.

If you want to define a ChangeKind [[http://help.eclipse.org/stable/index.jsp?topic=/org.eclipse.emf.doc/references/javadoc/org/eclipse/emf/ecore/change/impl/package-summary.html org.eclipse.emf.ecore.change/model/Change.ecore]] with 'ADD', 'MOVE' and 'REMOVE' you could write:

<code>
 enum ChangeKind :
   ADD | MOVE | REMOVE;
</code>

It is even possible to use alternative literals for your enums or reference an enum value twice:

<code>
 enum ChangeKind :
   ADD = 'add' | ADD = '+' | 
   MOVE = 'move' | MOVE = '->' | 
   REMOVE = 'remove' | REMOVE = '-';
</code>

Please note, that Ecore does not support unset values for enums. If you formulate a grammar like
<code>
 Element: "element" name=ID (value=SomeEnum)?;
</code>
with the input of
<code>
 element Foo
</code>
the resulting value of the element <code>Foo</code> will hold the enum value with the internal representation of 0. When generating the EPackage from your grammar this will be the first literal you define. As a workaround you could introduce a dedicated none-value or order the enums accordingly. Note that it is not possible to define an enum literal with an empty textual representation.

<code>
 enum Visibility: package | private | protected | public;
</code>

== Meta-Model inference ==

The meta model of a textual language describes the structure of its abstract syntax trees (AST). 

Xtext uses Ecore EPackages to define meta models. Meta models are declared to be either inferred (generated) from the grammar or imported. 
By using the 'generate' directive, one tells Xtext to derive an EPackage from the grammar. 

==== Type and Package Generation ====
Xtext creates
;an EPackage
* for each generated package declaration. After the directive ''generate'' a list of parameters follows. The ''name'' of the EPackage will be set to the first parameter, its ''nsURI'' to the second parameter. An optional alias as the third parameter allows to distinguish generated EPackages later. Only one generated package declaration per alias is allowed.
;an EClass
* for each return type of a parser rule. If a parser rule does not define a return type, an implicit one with the same name is assumed. You can specify more than one rule that return the same type but only one EClass will be generated.
* for each type defined in an action or a cross-reference.

;an EEnum
* for each return type of an enum rule.

;an EDatatype
* for each return type of a terminal rule or a datatype rule.

All EClasses, EEnums and EDatatypes are added to the EPackage referred to by the alias provided in the type reference they were created from.

==== Feature and Type Hierarchy Generation ====
While walking through the grammar, the algorithm keeps track of a set of the currently possible return types to add features to. 
* Entering a parser rule the set contains only the return type of the rule. 
* Entering a group in an alternative the set is reset to the same state it was in when entering the first group of this alternative. 
* Leaving an alternative the set contains the union of all types at the end of each of its groups.
* After an optional element, the set is reset to the same state it was before entering it. 
* After a mandatory (non-optional) rule call or mandatory action the set contains only the return type of the called rule or action. 
* An optional rule call does not modify the set.
* A rule call is optional, if its cardinality is '?' or '*'.

While iterating the parser rules Xtext creates
;an EAttribute in each current return type
* of type EBoolean for each feature assignment using the '?=' operator. No further EReferences or EAttributes will be generated from this assignment.
* for each assignment with the '=' or '+=' operator calling a terminal rule. Its type will be the return type of the called rule.
;an EReference in each current return type
* for each assignment with the '=' or '+=' operator in a parser rule calling a parser rule. The EReference type will be the return type of the called parser rule.
* for each action. The reference's type will be set to the return type of the current calling rule. 

Each EAttribute or EReference takes its name from the assignment/action that caused it. Multiplicities will be 0...1 for assignments with the '=' operator and 0...* for assignments with the '+=' operator. 

Furthermore, each type that is added to the currently possible return types automatically inherits from the current return type of the parser rule. You can specify additional common supertypes by means of "artificial" parser rules, that are never called, e.g.

 CommonSuperType:
   SubTypeA | SubTypeB | SubTypeC;

==== Enum Literal Generation ====
For each alternative defined in an enum rule, the transformer creates an enum literal, when another with the same name cannot be found. The 'literal' property of the generated enum literal is set to the right hand side of the declaration. If it is ommitted, you'll get an enum literal with equal 'name' and 'literal' attributes.

<code>
 enum MyGeneratedEnum:
   NAME = 'literal' | EQUAL_NAME_AND_LITERAL;
</code>

==== Feature Normalization ====
As a last step, the generator examines all generated EClasses and lifts up similar features to supertypes if there is more than one subtype and the feature is defined in every subtypes. This does even work for multiple supertypes.

==== Error Conditions ====
The following conditions cause an error
* An EAttribute or EReference has two different types or different cardinality.
* There are an EAttribute and an EReference with the same name in the same EClass.
* There is a cycle in the type hierarchy.
* An new EAttribute, EReference or supertype is added to an imported type.
* An EClass is added to an imported EPackage.
* An undeclared alias is used. 
* An imported metamodel cannot be loaded.

=== Importing existing Meta Models ===
With the import directive in Xtext you can refer to existing Ecore metamodels and reuse the types that are declared in an EPackage. Xtext uses this technique itself to leverage Ecore datatypes.

<code lang="text">
 import "http://www.eclipse.org/emf/2002/Ecore" as ecore
</code>

Specify an explicit return type to reuse such imported types. Note that this even works for lexer rules.

<code lang="text">
 terminal INT returns ecore::EInt : ('0'..'9')+;
</code>

== Grammar Mixins ==
Xtext supports the reuse of existing grammars. Grammars that are created via the Xtext wizard extend *org.eclipse.xtext.common.Terminals* by default. 

<pre><code>
 grammar org.xtext.example.MyDsl with org.eclipse.xtext.common.Terminals
 
 generate myDsl "http://www.xtext.org/example/MyDsl"
 
 ....
</code></pre>

Inheriting from another grammar makes the rules defined in that grammar referable. It is also possible to overwrite rules from the super grammar. 
Example :
<pre><code>
 grammar my.SuperGrammar
 ...
 RuleA : "a" stuff=RuleB;
 RuleB : "{" name=ID "}";
</code></pre>

<pre><code>
 grammar my.SubGrammar with my.SuperGrammar

 Model : (ruleAs+=RuleA)*;

 // overwrites my.SuperGrammar.RuleB
 RuleB : '[' name=ID ']';
</code></pre>

Note that declared terminal rules always come before any imported / mixed-in terminal rules.

==== Default tokens ====
Xtext is shipped with a default set of predefined, reasonable and often required terminal rules. This grammar is defined as follows:
<pre><code>
 grammar org.eclipse.xtext.common.Terminals hidden(WS, ML_COMMENT, SL_COMMENT)
											
 import "http://www.eclipse.org/emf/2002/Ecore" as ecore

 terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* ;
 terminal INT returns ecore::EInt: ('0'..'9')+ ;
 terminal STRING	: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
			; 
 terminal ML_COMMENT	: '/*' -> '*/' ;
 terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')? ;

 terminal WS		: (' '|'\t'|'\r'|'\n')+ ;

 terminal ANY_OTHER:	. ;
</code></pre>

