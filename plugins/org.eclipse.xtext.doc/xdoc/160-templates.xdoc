section:templates[Template Proposals]

Xtext-based editors automatically support code templates. That means that you get the corresponding 
preference page where users can add and change template proposals. If you want to ship a couple of 
default templates, you have to put a file named e[templates.xml] inside the e[templates] directory of 
the generated UI-plug-in. This file contains templates in a format as described in the 
link[http://help.eclipse.org/ganymede/topic/org.eclipse.cdt.doc.user/tasks/cdt_t_imp_code_temp.htm][Eclipse online help] .

img[images/preferences_templates.png][ ][ ][ ]


By default Xtext registers e[ContextTypes] for each rule (_\[languageName\].\[RuleName\]_) and for each 
keyword (_\[languageName\].kw_\[keyword\]_). If you don't 
like these defaults you'll have to subclass 
codeRef[org.eclipse.xtext.ui.editor.templates.XtextTemplateContextTypeRegistry] 
and configure it via ref:guicemodules[Guice]. 

In addition to the standard template proposal extension mechanism, Xtext ships with a predefined set 
of e[TemplateVariableResolvers] to resolve special variable types inside a given template 
(i.e. e[TemplateContext]). Besides the standard template variables available in 
e[org.eclipse.jface.text.templates.GlobalTemplateVariables] like e[${user}], e[${date}], e[${time}], 
e[${cursor}], etc., these e[TemplateVariableResolver] support the automatic resolving of 
CrossReferences (type e[CrossReferences]) and Enumerations (type e[Enum]) like it is explained in the 
following sections.

It is best practice to edit the templates in the preferences page, export them into the 
e[templates.xml]-file and put this one into the e[templates] folder of your UI-plug-in. However, these 
templates will not be visible by default. To fix it, you have to manually edit the xml-file and insert 
an ID attribute for each template element.


section2[CrossReference TemplateVariableResolver]

Xtext comes with a specific template variable resolver e[TemplateVariableResolver] called 
codeRef[org.eclipse.xtext.ui.editor.templates.CrossReferenceTemplateVariableResolver], 
which can be used to place cross-references within a template.

The syntax is as follows:

code[Java][${<displayText>:CrossReference(\[<MyPackageName>.\]<MyType>.<myRef>)}]

For example the following template:

code[Java][<template name="transition" description="event transition" id="transition"
  context="org.eclipse.xtext.example.FowlerDsl.Transition" enabled="true">
    ${event:CrossReference('Transition.event')} => 
    	${state:CrossReference('Transition.state')
</template>
]

yields the text e[event => state] and allows selecting any events and states using a drop down.

img[images/templates_crossref.png][ ][ ][ ]


section2[Enumeration TemplateVariableResolver]

The codeRef[org.eclipse.xtext.ui.editor.templates.EnumTemplateVariableResolver] 
resolves a template variable to e[EEnumLiteral] literals
which are assignment-compatible to the enumeration type declared as the first parameter of the the e[Enum] e[TemplateVariable]. 


The syntax is as follows:   

code[Java][${<displayText>:Enum(\[<MyPackage>.\]<EnumType>)]

For example the following template (taken from the domainmodel example):

code[Java][<template name="Operation" description="template for an Operation"
  id="org.eclipse.xtext.example.Domainmodel.Operation"
  context="org.eclipse.xtext.example.Domainmodel.Operation"
  enabled="true">
    ${visibility:Enum('Visibility')} op ${name}(${cursor}):
        ${type:CrossReference('Operation.type')}
</template>
]

yields the text e[public op name(): type] where the display text 'public' is replaced with a drop 
down filled with the literal values as defined in the e[EEnum] e[Visibility]. Also, e[name] and e[type] 
are template variables.

img[images/templates_enum.png][ ][ ][ ]