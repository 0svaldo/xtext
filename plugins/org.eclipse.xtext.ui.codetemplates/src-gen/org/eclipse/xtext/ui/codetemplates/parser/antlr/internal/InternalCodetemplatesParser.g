/*
* generated by Xtext
*/
parser grammar InternalCodetemplatesParser;

options {
	tokenVocab=InternalCodetemplatesLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package org.eclipse.xtext.ui.codetemplates.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.ui.codetemplates.services.CodetemplatesGrammarAccess;

}

@members {


 	private CodetemplatesGrammarAccess grammarAccess;
 	
    public InternalCodetemplatesParser(TokenStream input, IAstFactory factory, CodetemplatesGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Codetemplates";	
   	} 
   	   	
   	@Override
   	protected CodetemplatesGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleCodetemplates
entryRuleCodetemplates returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getCodetemplatesRule(), currentNode); }
	 iv_ruleCodetemplates=ruleCodetemplates 
	 { $current=$iv_ruleCodetemplates.current; } 
	 EOF 
;

// Rule Codetemplates
ruleCodetemplates returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	otherlv_0=KEYWORD_14 
    {
    	createLeafNode(otherlv_0, grammarAccess.getCodetemplatesAccess().getTemplatesKeyword_0(), null);
    }

	otherlv_1=KEYWORD_13 
    {
    	createLeafNode(otherlv_1, grammarAccess.getCodetemplatesAccess().getForKeyword_1(), null);
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getCodetemplatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCodetemplatesAccess().getLanguageGrammarCrossReference_2_0(), currentNode); 
	    }
		ruleFQN		{ 
	        currentNode = currentNode.getParent();
	    }

)
)
	otherlv_3=KEYWORD_6 
    {
    	createLeafNode(otherlv_3, grammarAccess.getCodetemplatesAccess().getColonKeyword_3(), null);
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCodetemplatesAccess().getTemplatesCodetemplateParserRuleCall_4_0(), currentNode); 
	    }
		lv_templates_4_0=ruleCodetemplate		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCodetemplatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"templates",
	        		lv_templates_4_0, 
	        		"Codetemplate", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleCodetemplate
entryRuleCodetemplate returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getCodetemplateRule(), currentNode); }
	 iv_ruleCodetemplate=ruleCodetemplate 
	 { $current=$iv_ruleCodetemplate.current; } 
	 EOF 
;

// Rule Codetemplate
ruleCodetemplate returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCodetemplateAccess().getNameValidIDParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCodetemplateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ValidID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	otherlv_1=KEYWORD_2 
    {
    	createLeafNode(otherlv_1, grammarAccess.getCodetemplateAccess().getLeftParenthesisKeyword_1(), null);
    }
(
(
		lv_id_2_0=RULE_ID
		{
			createLeafNode(lv_id_2_0, grammarAccess.getCodetemplateAccess().getIdIDTerminalRuleCall_2_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCodetemplateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
	otherlv_3=KEYWORD_4 
    {
    	createLeafNode(otherlv_3, grammarAccess.getCodetemplateAccess().getCommaKeyword_3(), null);
    }
(
(
		lv_description_4_0=RULE_STRING
		{
			createLeafNode(lv_description_4_0, grammarAccess.getCodetemplateAccess().getDescriptionSTRINGTerminalRuleCall_4_0(), "description"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCodetemplateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"description",
	        		lv_description_4_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
	otherlv_5=KEYWORD_3 
    {
    	createLeafNode(otherlv_5, grammarAccess.getCodetemplateAccess().getRightParenthesisKeyword_5(), null);
    }

	otherlv_6=KEYWORD_13 
    {
    	createLeafNode(otherlv_6, grammarAccess.getCodetemplateAccess().getForKeyword_6(), null);
    }
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getCodetemplateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCodetemplateAccess().getContextAbstractRuleCrossReference_7_0_0(), currentNode); 
	    }
		ruleValidID		{ 
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_keywordContext_8_0=RULE_STRING
		{
			createLeafNode(lv_keywordContext_8_0, grammarAccess.getCodetemplateAccess().getKeywordContextSTRINGTerminalRuleCall_7_1_0(), "keywordContext"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCodetemplateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"keywordContext",
	        		lv_keywordContext_8_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCodetemplateAccess().getBodyTemplateBodyWithQuotesParserRuleCall_8_0(), currentNode); 
	    }
		lv_body_9_0=ruleTemplateBodyWithQuotes		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCodetemplateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"body",
	        		lv_body_9_0, 
	        		"TemplateBodyWithQuotes", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleTemplateBodyWithQuotes
entryRuleTemplateBodyWithQuotes returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getTemplateBodyWithQuotesRule(), currentNode); }
	 iv_ruleTemplateBodyWithQuotes=ruleTemplateBodyWithQuotes 
	 { $current=$iv_ruleTemplateBodyWithQuotes.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TemplateBodyWithQuotes
ruleTemplateBodyWithQuotes returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	otherlv_0=KEYWORD_11 
    {
    	createLeafNode(otherlv_0, grammarAccess.getTemplateBodyWithQuotesAccess().getGreaterThanSignGreaterThanSignKeyword_0(), null);
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getTemplateBodyWithQuotesAccess().getTemplateBodyParserRuleCall_1(), currentNode); 
    }
    this_TemplateBody_1=ruleTemplateBody
    {
        $current = $this_TemplateBody_1.current;
        currentNode = currentNode.getParent();
    }

	otherlv_2=KEYWORD_10 
    {
    	createLeafNode(otherlv_2, grammarAccess.getTemplateBodyWithQuotesAccess().getLessThanSignLessThanSignKeyword_2(), null);
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleTemplateBody
entryRuleTemplateBody returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getTemplateBodyRule(), currentNode); }
	 iv_ruleTemplateBody=ruleTemplateBody 
	 { $current=$iv_ruleTemplateBody.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TemplateBody
ruleTemplateBody returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getTemplateBodyAccess().getTemplateBodyAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTemplateBodyAccess().getTemplateBodyAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTemplateBodyAccess().getPartsLiteralParserRuleCall_1_0(), currentNode); 
	    }
		lv_parts_1_0=ruleLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTemplateBodyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parts",
	        		lv_parts_1_0, 
	        		"Literal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTemplateBodyAccess().getPartsVariableOrDollarParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_parts_2_0=ruleVariableOrDollar		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTemplateBodyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parts",
	        		lv_parts_2_0, 
	        		"VariableOrDollar", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTemplateBodyAccess().getPartsLiteralParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_parts_3_0=ruleLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTemplateBodyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parts",
	        		lv_parts_3_0, 
	        		"Literal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)*)
;
finally {
	myHiddenTokenState.restore();
}







// Entry rule entryRuleVariableOrDollar
entryRuleVariableOrDollar returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableOrDollarRule(), currentNode); }
	 iv_ruleVariableOrDollar=ruleVariableOrDollar 
	 { $current=$iv_ruleVariableOrDollar.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule VariableOrDollar
ruleVariableOrDollar returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getVariableOrDollarAccess().getVariableParserRuleCall_0(), currentNode); 
    }
    this_Variable_0=ruleVariable
    {
        $current = $this_Variable_0.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVariableOrDollarAccess().getDollarParserRuleCall_1(), currentNode); 
    }
    this_Dollar_1=ruleDollar
    {
        $current = $this_Dollar_1.current;
        currentNode = currentNode.getParent();
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableRule(), currentNode); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	otherlv_0=KEYWORD_9 
    {
    	createLeafNode(otherlv_0, grammarAccess.getVariableAccess().getDollarSignLeftCurlyBracketKeyword_0(), null);
    }
(this_WS_1=RULE_WS
    { 
    createLeafNode(this_WS_1, grammarAccess.getVariableAccess().getWSTerminalRuleCall_1(), null); 
    }
)*((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableAccess().getNameValidIDParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_name_2_0=ruleValidID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ValidID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableAccess().getNameValidIDParserRuleCall_2_1_0_0_0(), currentNode); 
	    }
		lv_name_3_0=ruleValidID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"ValidID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(this_WS_4=RULE_WS
    { 
    createLeafNode(this_WS_4, grammarAccess.getVariableAccess().getWSTerminalRuleCall_2_1_0_1(), null); 
    }
)*)?
	otherlv_5=KEYWORD_6 
    {
    	createLeafNode(otherlv_5, grammarAccess.getVariableAccess().getColonKeyword_2_1_1(), null);
    }
(this_WS_6=RULE_WS
    { 
    createLeafNode(this_WS_6, grammarAccess.getVariableAccess().getWSTerminalRuleCall_2_1_2(), null); 
    }
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableAccess().getTypeValidIDParserRuleCall_2_1_3_0(), currentNode); 
	    }
		lv_type_7_0=ruleValidID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_7_0, 
	        		"ValidID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((this_WS_8=RULE_WS
    { 
    createLeafNode(this_WS_8, grammarAccess.getVariableAccess().getWSTerminalRuleCall_2_1_4_0(), null); 
    }
)*
	otherlv_9=KEYWORD_2 
    {
    	createLeafNode(otherlv_9, grammarAccess.getVariableAccess().getLeftParenthesisKeyword_2_1_4_1(), null);
    }
(this_WS_10=RULE_WS
    { 
    createLeafNode(this_WS_10, grammarAccess.getVariableAccess().getWSTerminalRuleCall_2_1_4_2(), null); 
    }
)*(
(
(
		lv_parameters_11_1=RULE_STRING
		{
			createLeafNode(lv_parameters_11_1, grammarAccess.getVariableAccess().getParametersSTRINGTerminalRuleCall_2_1_4_3_0_0(), "parameters"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_11_1, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableAccess().getParametersFQNParserRuleCall_2_1_4_3_0_1(), currentNode); 
	    }
		lv_parameters_11_2=ruleFQN		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_11_2, 
	        		"FQN", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
)((this_WS_12=RULE_WS
    { 
    createLeafNode(this_WS_12, grammarAccess.getVariableAccess().getWSTerminalRuleCall_2_1_4_4_0(), null); 
    }
)*
	otherlv_13=KEYWORD_4 
    {
    	createLeafNode(otherlv_13, grammarAccess.getVariableAccess().getCommaKeyword_2_1_4_4_1(), null);
    }
(this_WS_14=RULE_WS
    { 
    createLeafNode(this_WS_14, grammarAccess.getVariableAccess().getWSTerminalRuleCall_2_1_4_4_2(), null); 
    }
)*(
(
(
		lv_parameters_15_1=RULE_STRING
		{
			createLeafNode(lv_parameters_15_1, grammarAccess.getVariableAccess().getParametersSTRINGTerminalRuleCall_2_1_4_4_3_0_0(), "parameters"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_15_1, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableAccess().getParametersFQNParserRuleCall_2_1_4_4_3_0_1(), currentNode); 
	    }
		lv_parameters_15_2=ruleFQN		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_15_2, 
	        		"FQN", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))*(this_WS_16=RULE_WS
    { 
    createLeafNode(this_WS_16, grammarAccess.getVariableAccess().getWSTerminalRuleCall_2_1_4_5(), null); 
    }
)*
	otherlv_17=KEYWORD_3 
    {
    	createLeafNode(otherlv_17, grammarAccess.getVariableAccess().getRightParenthesisKeyword_2_1_4_6(), null);
    }
)?))(this_WS_18=RULE_WS
    { 
    createLeafNode(this_WS_18, grammarAccess.getVariableAccess().getWSTerminalRuleCall_3(), null); 
    }
)*
	otherlv_19=KEYWORD_7 
    {
    	createLeafNode(otherlv_19, grammarAccess.getVariableAccess().getRightCurlyBracketKeyword_4(), null);
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleValidID
entryRuleValidID returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
:
	{ currentNode = createCompositeNode(grammarAccess.getValidIDRule(), currentNode); } 
	 iv_ruleValidID=ruleValidID 
	 { $current=$iv_ruleValidID.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ValidID
ruleValidID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(this_ID_0, grammarAccess.getValidIDAccess().getIDTerminalRuleCall_0(), null); 
    }

    |
	kw=KEYWORD_13 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getValidIDAccess().getForKeyword_1(), null); 
    }

    |
	kw=KEYWORD_14 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getValidIDAccess().getTemplatesKeyword_2(), null); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
:
	{ currentNode = createCompositeNode(grammarAccess.getFQNRule(), currentNode); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getFQNAccess().getValidIDParserRuleCall_0(), currentNode); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
(
	kw=KEYWORD_5 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getFQNAccess().getValidIDParserRuleCall_1_1(), currentNode); 
    }
    this_ValidID_2=ruleValidID    {
		$current.merge(this_ValidID_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)*)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralRule(), currentNode); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getValueLiteralValueParserRuleCall_0(), currentNode); 
	    }
		lv_value_0_0=ruleLiteralValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"LiteralValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleLiteralValue
entryRuleLiteralValue returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralValueRule(), currentNode); } 
	 iv_ruleLiteralValue=ruleLiteralValue 
	 { $current=$iv_ruleLiteralValue.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule LiteralValue
ruleLiteralValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    createLeafNode(this_WS_0, grammarAccess.getLiteralValueAccess().getWSTerminalRuleCall_0(), null); 
    }

    |    this_ANY_OTHER_1=RULE_ANY_OTHER    {
		$current.merge(this_ANY_OTHER_1);
    }

    { 
    createLeafNode(this_ANY_OTHER_1, grammarAccess.getLiteralValueAccess().getANY_OTHERTerminalRuleCall_1(), null); 
    }

    |    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    createLeafNode(this_ID_2, grammarAccess.getLiteralValueAccess().getIDTerminalRuleCall_2(), null); 
    }

    |
	kw=KEYWORD_12 
    {
        $current.merge(kw);
        createLeafNode(kw, grammarAccess.getLiteralValueAccess().getReverseSolidusLessThanSignLessThanSignKeyword_3(), null); 
    }
)+
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleDollar
entryRuleDollar returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getDollarRule(), currentNode); }
	 iv_ruleDollar=ruleDollar 
	 { $current=$iv_ruleDollar.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Dollar
ruleDollar returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getDollarAccess().getDollarAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getDollarAccess().getDollarAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
(
		lv_escaped_1_0=
	KEYWORD_8 
    {
        createLeafNode(lv_escaped_1_0, grammarAccess.getDollarAccess().getEscapedDollarSignDollarSignKeyword_1_0_0(), "escaped");
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDollarRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "escaped", true, "$$", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |
	otherlv_2=KEYWORD_1 
    {
    	createLeafNode(otherlv_2, grammarAccess.getDollarAccess().getDollarSignKeyword_1_1(), null);
    }
))
;
finally {
	myHiddenTokenState.restore();
}





