
/*
* generated by Xtext
*/
package org.eclipse.xtext.xtend2.ui.refactoring;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.common.types.JvmConstructor;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.resource.ILocationInFileProvider;
import org.eclipse.xtext.ui.refactoring.IRenameStrategy;
import org.eclipse.xtext.ui.refactoring.impl.DefaultRenameStrategy;
import org.eclipse.xtext.ui.refactoring.ui.IRenameElementContext;
import org.eclipse.xtext.xbase.ui.jvmmodel.refactoring.AbstractJvmModelRenameStrategy;
import org.eclipse.xtext.xtend2.jvmmodel.IXtend2JvmAssociations;
import org.eclipse.xtext.xtend2.xtend2.XtendClass;
import org.eclipse.xtext.xtend2.xtend2.XtendFunction;
import org.eclipse.xtext.xtend2.xtend2.XtendMember;

import com.google.inject.Inject;

/**
 * Encapsulates the model changes of a rename refactoring.  
 */
public class Xtend2RenameStrategy extends AbstractJvmModelRenameStrategy {

	public static class Provider extends DefaultRenameStrategy.Provider {

		@Inject
		private IXtend2JvmAssociations jvmModelAssociations;

		@Override
		public IRenameStrategy get(EObject targetElement, IRenameElementContext renameElementContext) {
			return new Xtend2RenameStrategy(targetElement, getLocationInFileProvider(), jvmModelAssociations);
		}
	}
	
	protected Xtend2RenameStrategy(EObject targetElement, ILocationInFileProvider locationInFileProvider,
			IXtend2JvmAssociations jvmModelAssociations) {
		super(targetElement, locationInFileProvider, jvmModelAssociations);
	}
	
	@Override
	protected IXtend2JvmAssociations getJvmModelAssociations() {
		return (IXtend2JvmAssociations) super.getJvmModelAssociations();
	}

	@Override
	protected void setInferredJvmElementName(String name, EObject renamedElement) {
		if (renamedElement instanceof XtendClass) {
			JvmGenericType inferredJvmType = getJvmModelAssociations().getInferredType((XtendClass) renamedElement);
			if(inferredJvmType != null) {
				inferredJvmType.setSimpleName(((XtendClass)renamedElement).getName());
				inferredJvmType.setPackageName(((XtendClass)renamedElement).getPackageName());
			}
			JvmConstructor inferredConstructor = getJvmModelAssociations().getInferredConstructor((XtendClass) renamedElement);
			if(inferredConstructor != null) {
				inferredConstructor.setSimpleName(((XtendClass)renamedElement).getName());
			}
		} else if(renamedElement instanceof XtendFunction) {
			JvmMember inferredJvmMember = getJvmModelAssociations().getDirectlyInferredOperation(((XtendFunction) renamedElement));
			if(inferredJvmMember != null) {
				inferredJvmMember.setSimpleName(((XtendMember) renamedElement).getName());
			}
		}
	}
}
